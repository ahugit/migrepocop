nop,maxfn,iprint,nloop,iquad:   938000  20  95   1
stopcr,simp:    20.0000       0.00000    
T0,Tstep:    96.2856      0.500000    
Tfreq:   63
nop,maxfn,iprint,nloop,iquad:   938000  20  95   1
stopcr,simp:    20.0000       0.00000    
T0,Tstep:    96.2856      0.500000    
Tfreq:   63
 Estimating   63 parameters on   1 communicators
 Progress Report every  20 function evaluations
 EVAL.   FUNC.VALUE.          PARAMETER VALUES
iter,obj,time:      2        320.95          4.20          1.09         23.09          0.00          0.03         28.40
iter,obj,time:      3        320.49          0.88          1.11         23.11          0.02          0.04         25.16
iter,obj,time:      4        320.29          0.88          1.11         22.96          0.16          0.04         25.15
iter,obj,time:      5        352.56          0.89          1.11         23.04          0.09          0.04         25.17
iter,obj,time:      6        320.09          0.88          1.11         23.06          0.09          0.05         25.19
iter,obj,time:      7        322.96          0.88          1.12         23.07          0.12          0.05         25.23
iter,obj,time:      8        326.10          0.88          1.11         23.09          0.32          0.04         25.45
iter,obj,time:      9        322.04          0.88          1.12         23.05          0.06          0.04         25.16
iter,obj,time:     10        318.71          0.88          1.11         23.05          0.05          0.04         25.13
iter,obj,time:     11        319.82          0.88          1.12         23.04          0.05          0.04         25.12
iter,obj,time:     12        300.47          0.88          1.12         23.04          0.09          0.04         25.16
iter,obj,time:     13        321.72          0.88          1.12         23.02          0.08          0.04         25.14
iter,obj,time:     14        326.23          0.88          1.12         23.04          0.05          0.05         25.13
iter,obj,time:     15        318.58          0.88          1.11         23.07          0.06          0.04         25.16
iter,obj,time:     16        320.42          0.88          1.12         23.05          0.08          0.05         25.17
iter,obj,time:     17        321.44          0.88          1.11         23.10          0.26          0.04         25.39
iter,obj,time:     18        320.56          0.87          1.10         23.07          0.12          0.04         25.20
iter,obj,time:     19        316.75          0.88          1.10         23.05          0.09          0.04         25.16
iter,obj,time:     20        320.78          0.89          1.11         23.03          0.09          0.04         25.16
iter,obj,time:     21        318.99          0.88          1.12         23.04          0.09          0.04         25.16
iter,obj,time:     22        320.95          0.88          1.12         23.05          0.09          0.05         25.18
iter,obj,time:     23        319.35          0.88          1.12         23.05          0.05          0.04         25.13
iter,obj,time:     24        324.39          0.89          1.11         23.05          0.07          0.04         25.16
iter,obj,time:     25        315.96          0.88          1.12         23.05          0.09          0.05         25.18
iter,obj,time:     26        357.84          0.88          1.11         23.08          0.34          0.04         25.45
iter,obj,time:     27        314.78          0.89          1.11         23.05          0.05          0.04         25.14
iter,obj,time:     28        325.38          0.88          1.12         23.05          0.05          0.04         25.15
iter,obj,time:     29        340.98          0.88          1.11         23.05          0.09          0.04         25.17
iter,obj,time:     30        319.40          0.88          1.12         23.05          0.06          0.04         25.15
iter,obj,time:     31        366.70          0.88          1.12         23.05          0.09          0.04         25.18
iter,obj,time:     32        322.26          0.88          1.12         23.04          0.09          0.04         25.16
iter,obj,time:     33        324.83          0.88          1.10         23.05          0.10          0.04         25.17
iter,obj,time:     34        336.63          0.88          1.12         23.02          0.10          0.04         25.16
iter,obj,time:     35        328.18          0.89          1.11         23.02          0.10          0.04         25.16
iter,obj,time:     36        335.38          0.89          1.11         23.03          0.10          0.04         25.17
iter,obj,time:     37        323.31          0.88          1.11         23.05          0.05          0.05         25.14
iter,obj,time:     38        326.33          0.88          1.11         23.07          0.09          0.04         25.20
iter,obj,time:     39        327.02          0.89          1.11         23.03          0.11          0.04         25.18
iter,obj,time:     40        325.15          0.88          1.12         23.04          0.08          0.04         25.16
iter,obj,time:     41        337.72          0.88          1.12         23.06          0.10          0.04         25.20
iter,obj,time:     42        323.03          0.89          1.11         23.08          0.25          0.04         25.37
iter,obj,time:     43        326.28          0.89          1.11         23.06          0.09          0.05         25.20
iter,obj,time:     44        357.01          0.88          1.12         23.05          0.05          0.04         25.14
iter,obj,time:     45        351.87          0.88          1.11         23.05          0.08          0.05         25.16
iter,obj,time:     46        345.38          0.88          1.11         23.02          0.09          0.04         25.14
iter,obj,time:     47        319.51          0.88          1.11         23.05          0.05          0.04         25.14
iter,obj,time:     48        324.83          0.88          1.12         23.05          0.08          0.05         25.18
iter,obj,time:     49        326.64          0.88          1.11         23.05          0.09          0.04         25.16
iter,obj,time:     50        321.00          0.89          1.11         23.04          0.09          0.04         25.16
iter,obj,time:     51        320.18          0.89          1.09         23.06          0.12          0.05         25.22
iter,obj,time:     52        320.27          0.88          1.10         23.05          0.12          0.04         25.20
iter,obj,time:     53        324.94          0.89          1.11         23.05          0.15          0.04         25.23
iter,obj,time:     54        326.06          0.88          1.12         23.03          0.09          0.04         25.16
iter,obj,time:     55        322.06          0.88          1.10         23.08          0.24          0.05         25.34
iter,obj,time:     56        321.14          0.88          1.09         23.05          0.10          0.04         25.17
iter,obj,time:     57        320.91          0.89          1.09         23.08          0.08          0.04         25.18
iter,obj,time:     58        324.61          0.89          1.11         23.05          0.10          0.04         25.20
iter,obj,time:     59        325.47          0.88          1.12         23.07          0.22          0.04         25.33
iter,obj,time:     60        321.96          0.88          1.12         23.03          0.09          0.04         25.16
iter,obj,time:     61        321.98          0.89          1.09         23.06          0.07          0.04         25.16
iter,obj,time:     62        321.31          0.88          1.09         23.14          0.00          0.04         25.16
iter,obj,time:     63        324.17          0.88          1.11         23.06          0.05          0.04         25.14
iter,obj,time:     64        325.18          0.88          1.12         23.05          0.08          0.04         25.16
iter,obj,time:     65        321.57          0.89          1.11         23.02          0.07          0.05         25.14

    1    320.95        3.842    -0.9479      3.341     -100.0     0.2624    
                     -0.7884      2.474     -100.0      2.257      1.000    
                       1.000     0.1000      2.400      0.000      0.000    
                      -1.500      0.000      0.000      0.000     -1.221    

                      -2.500      8654.     0.1251E+05 -483.9     -1451.    
                      -2.000     -4.000     -3.000     -5.300     -4.000    
                      -13.60     -2.675      1359.      0.000      3354.    

                       4764.      3323.      5073.      5329.      2500.    
                       4298.    -0.4892E-02-0.9315E-01  0.000    -0.5150E-01
                     -0.8335E-01-0.1448     0.3666E-01-0.1910     0.5754E-01

                     -0.7539     -1.000      0.000     0.1780     0.3619E-01
                      0.8541E-01-0.2985E-01-0.7237E-01-0.2366E-01-0.6522E-01
                     -0.7198E-01 0.7849E-01-0.2628     -1.000      0.000    

                     -0.5000     -1.000      3.000     -1.000      0.000    
                       0.000      9.100      9.200     -5000.     -4.000    
                       0.000      0.000      9.000      8.900     -5000.    

                      -4.000      0.000      0.000      9.200      9.000    
                      -5000.     -4.000      0.000      0.000      9.400    
                       8.800     -5000.     -2.000    

    2    320.49        2.842    -0.9479      3.341     -100.0     0.2624    
                     -0.7884      2.474     -100.0      2.257      1.000    
                       1.000     0.1000      2.400      0.000      0.000    
                      -1.500      0.000      0.000      0.000     -1.221    

                      -2.500      8654.     0.1251E+05 -483.9     -1451.    
                      -2.000     -4.000     -3.000     -5.300     -4.000    
                      -13.60     -2.675      1359.      0.000      3354.    

                       4764.      3323.      5073.      5329.      2500.    
                       4298.    -0.4892E-02-0.9315E-01  0.000    -0.5150E-01
                     -0.8335E-01-0.1448     0.3666E-01-0.1910     0.5754E-01

                     -0.7539     -1.000      0.000     0.1780     0.3619E-01
                      0.8541E-01-0.2985E-01-0.7237E-01-0.2366E-01-0.6522E-01
                     -0.7198E-01 0.7849E-01-0.2628     -1.000      0.000    

                     -0.5000     -1.000      3.000     -1.000      0.000    
                       0.000      9.100      9.200     -5000.     -4.000    
                       0.000      0.000      9.000      8.900     -5000.    

                      -4.000      0.000      0.000      9.200      9.000    
                      -5000.     -4.000      0.000      0.000      9.400    
                       8.800     -5000.     -2.000    

    3    320.29        3.842     -1.948      3.341     -100.0     0.2624    
                     -0.7884      2.474     -100.0      2.257      1.000    
                       1.000     0.1000      2.400      0.000      0.000    
                      -1.500      0.000      0.000      0.000     -1.221    

                      -2.500      8654.     0.1251E+05 -483.9     -1451.    
                      -2.000     -4.000     -3.000     -5.300     -4.000    
                      -13.60     -2.675      1359.      0.000      3354.    

                       4764.      3323.      5073.      5329.      2500.    
                       4298.    -0.4892E-02-0.9315E-01  0.000    -0.5150E-01
                     -0.8335E-01-0.1448     0.3666E-01-0.1910     0.5754E-01

                     -0.7539     -1.000      0.000     0.1780     0.3619E-01
                      0.8541E-01-0.2985E-01-0.7237E-01-0.2366E-01-0.6522E-01
                     -0.7198E-01 0.7849E-01-0.2628     -1.000      0.000    

                     -0.5000     -1.000      3.000     -1.000      0.000    
                       0.000      9.100      9.200     -5000.     -4.000    
                       0.000      0.000      9.000      8.900     -5000.    

                      -4.000      0.000      0.000      9.200      9.000    
                      -5000.     -4.000      0.000      0.000      9.400    
                       8.800     -5000.     -2.000    

    4    352.56        3.842    -0.9479      2.341     -100.0     0.2624    
                     -0.7884      2.474     -100.0      2.257      1.000    
                       1.000     0.1000      2.400      0.000      0.000    
                      -1.500      0.000      0.000      0.000     -1.221    

                      -2.500      8654.     0.1251E+05 -483.9     -1451.    
                      -2.000     -4.000     -3.000     -5.300     -4.000    
                      -13.60     -2.675      1359.      0.000      3354.    

                       4764.      3323.      5073.      5329.      2500.    
                       4298.    -0.4892E-02-0.9315E-01  0.000    -0.5150E-01
                     -0.8335E-01-0.1448     0.3666E-01-0.1910     0.5754E-01

                     -0.7539     -1.000      0.000     0.1780     0.3619E-01
                      0.8541E-01-0.2985E-01-0.7237E-01-0.2366E-01-0.6522E-01
                     -0.7198E-01 0.7849E-01-0.2628     -1.000      0.000    

                     -0.5000     -1.000      3.000     -1.000      0.000    
                       0.000      9.100      9.200     -5000.     -4.000    
                       0.000      0.000      9.000      8.900     -5000.    

                      -4.000      0.000      0.000      9.200      9.000    
                      -5000.     -4.000      0.000      0.000      9.400    
                       8.800     -5000.     -2.000    

    5    320.09        3.842    -0.9479      3.341     -100.0    -0.7376    
                     -0.7884      2.474     -100.0      2.257      1.000    
                       1.000     0.1000      2.400      0.000      0.000    
                      -1.500      0.000      0.000      0.000     -1.221    

                      -2.500      8654.     0.1251E+05 -483.9     -1451.    
                      -2.000     -4.000     -3.000     -5.300     -4.000    
                      -13.60     -2.675      1359.      0.000      3354.    

                       4764.      3323.      5073.      5329.      2500.    
                       4298.    -0.4892E-02-0.9315E-01  0.000    -0.5150E-01
                     -0.8335E-01-0.1448     0.3666E-01-0.1910     0.5754E-01

                     -0.7539     -1.000      0.000     0.1780     0.3619E-01
                      0.8541E-01-0.2985E-01-0.7237E-01-0.2366E-01-0.6522E-01
                     -0.7198E-01 0.7849E-01-0.2628     -1.000      0.000    

                     -0.5000     -1.000      3.000     -1.000      0.000    
                       0.000      9.100      9.200     -5000.     -4.000    
                       0.000      0.000      9.000      8.900     -5000.    

                      -4.000      0.000      0.000      9.200      9.000    
                      -5000.     -4.000      0.000      0.000      9.400    
                       8.800     -5000.     -2.000    

    6    322.96        3.842    -0.9479      3.341     -100.0     0.2624    
                      -1.788      2.474     -100.0      2.257      1.000    
                       1.000     0.1000      2.400      0.000      0.000    
                      -1.500      0.000      0.000      0.000     -1.221    

                      -2.500      8654.     0.1251E+05 -483.9     -1451.    
                      -2.000     -4.000     -3.000     -5.300     -4.000    
                      -13.60     -2.675      1359.      0.000      3354.    

                       4764.      3323.      5073.      5329.      2500.    
                       4298.    -0.4892E-02-0.9315E-01  0.000    -0.5150E-01
                     -0.8335E-01-0.1448     0.3666E-01-0.1910     0.5754E-01

                     -0.7539     -1.000      0.000     0.1780     0.3619E-01
                      0.8541E-01-0.2985E-01-0.7237E-01-0.2366E-01-0.6522E-01
                     -0.7198E-01 0.7849E-01-0.2628     -1.000      0.000    

                     -0.5000     -1.000      3.000     -1.000      0.000    
                       0.000      9.100      9.200     -5000.     -4.000    
                       0.000      0.000      9.000      8.900     -5000.    

                      -4.000      0.000      0.000      9.200      9.000    
                      -5000.     -4.000      0.000      0.000      9.400    
                       8.800     -5000.     -2.000    

    7    326.10        3.842    -0.9479      3.341     -100.0     0.2624    
                     -0.7884      1.474     -100.0      2.257      1.000    
                       1.000     0.1000      2.400      0.000      0.000    
                      -1.500      0.000      0.000      0.000     -1.221    

                      -2.500      8654.     0.1251E+05 -483.9     -1451.    
                      -2.000     -4.000     -3.000     -5.300     -4.000    
                      -13.60     -2.675      1359.      0.000      3354.    

                       4764.      3323.      5073.      5329.      2500.    
                       4298.    -0.4892E-02-0.9315E-01  0.000    -0.5150E-01
                     -0.8335E-01-0.1448     0.3666E-01-0.1910     0.5754E-01

                     -0.7539     -1.000      0.000     0.1780     0.3619E-01
                      0.8541E-01-0.2985E-01-0.7237E-01-0.2366E-01-0.6522E-01
                     -0.7198E-01 0.7849E-01-0.2628     -1.000      0.000    

                     -0.5000     -1.000      3.000     -1.000      0.000    
                       0.000      9.100      9.200     -5000.     -4.000    
                       0.000      0.000      9.000      8.900     -5000.    

                      -4.000      0.000      0.000      9.200      9.000    
                      -5000.     -4.000      0.000      0.000      9.400    
                       8.800     -5000.     -2.000    

    8    322.04        3.842    -0.9479      3.341     -100.0     0.2624    
                     -0.7884      2.474     -100.0      1.257      1.000    
                       1.000     0.1000      2.400      0.000      0.000    
                      -1.500      0.000      0.000      0.000     -1.221    

                      -2.500      8654.     0.1251E+05 -483.9     -1451.    
                      -2.000     -4.000     -3.000     -5.300     -4.000    
                      -13.60     -2.675      1359.      0.000      3354.    

                       4764.      3323.      5073.      5329.      2500.    
                       4298.    -0.4892E-02-0.9315E-01  0.000    -0.5150E-01
                     -0.8335E-01-0.1448     0.3666E-01-0.1910     0.5754E-01

                     -0.7539     -1.000      0.000     0.1780     0.3619E-01
                      0.8541E-01-0.2985E-01-0.7237E-01-0.2366E-01-0.6522E-01
                     -0.7198E-01 0.7849E-01-0.2628     -1.000      0.000    

                     -0.5000     -1.000      3.000     -1.000      0.000    
                       0.000      9.100      9.200     -5000.     -4.000    
                       0.000      0.000      9.000      8.900     -5000.    

                      -4.000      0.000      0.000      9.200      9.000    
                      -5000.     -4.000      0.000      0.000      9.400    
                       8.800     -5000.     -2.000    

    9    318.71        3.842    -0.9479      3.341     -100.0     0.2624    
                     -0.7884      2.474     -100.0      2.257      0.000    
                       1.000     0.1000      2.400      0.000      0.000    
                      -1.500      0.000      0.000      0.000     -1.221    

                      -2.500      8654.     0.1251E+05 -483.9     -1451.    
                      -2.000     -4.000     -3.000     -5.300     -4.000    
                      -13.60     -2.675      1359.      0.000      3354.    

                       4764.      3323.      5073.      5329.      2500.    
                       4298.    -0.4892E-02-0.9315E-01  0.000    -0.5150E-01
                     -0.8335E-01-0.1448     0.3666E-01-0.1910     0.5754E-01

                     -0.7539     -1.000      0.000     0.1780     0.3619E-01
                      0.8541E-01-0.2985E-01-0.7237E-01-0.2366E-01-0.6522E-01
                     -0.7198E-01 0.7849E-01-0.2628     -1.000      0.000    

                     -0.5000     -1.000      3.000     -1.000      0.000    
                       0.000      9.100      9.200     -5000.     -4.000    
                       0.000      0.000      9.000      8.900     -5000.    

                      -4.000      0.000      0.000      9.200      9.000    
                      -5000.     -4.000      0.000      0.000      9.400    
                       8.800     -5000.     -2.000    

   10    319.82        3.842    -0.9479      3.341     -100.0     0.2624    
                     -0.7884      2.474     -100.0      2.257      1.000    
                       0.000     0.1000      2.400      0.000      0.000    
                      -1.500      0.000      0.000      0.000     -1.221    

                      -2.500      8654.     0.1251E+05 -483.9     -1451.    
                      -2.000     -4.000     -3.000     -5.300     -4.000    
                      -13.60     -2.675      1359.      0.000      3354.    

                       4764.      3323.      5073.      5329.      2500.    
                       4298.    -0.4892E-02-0.9315E-01  0.000    -0.5150E-01
                     -0.8335E-01-0.1448     0.3666E-01-0.1910     0.5754E-01

                     -0.7539     -1.000      0.000     0.1780     0.3619E-01
                      0.8541E-01-0.2985E-01-0.7237E-01-0.2366E-01-0.6522E-01
                     -0.7198E-01 0.7849E-01-0.2628     -1.000      0.000    

                     -0.5000     -1.000      3.000     -1.000      0.000    
                       0.000      9.100      9.200     -5000.     -4.000    
                       0.000      0.000      9.000      8.900     -5000.    

                      -4.000      0.000      0.000      9.200      9.000    
                      -5000.     -4.000      0.000      0.000      9.400    
                       8.800     -5000.     -2.000    

   11    300.47        3.842    -0.9479      3.341     -100.0     0.2624    
                     -0.7884      2.474     -100.0      2.257      1.000    
                       1.000    -0.9000      2.400      0.000      0.000    
                      -1.500      0.000      0.000      0.000     -1.221    

                      -2.500      8654.     0.1251E+05 -483.9     -1451.    
                      -2.000     -4.000     -3.000     -5.300     -4.000    
                      -13.60     -2.675      1359.      0.000      3354.    

                       4764.      3323.      5073.      5329.      2500.    
                       4298.    -0.4892E-02-0.9315E-01  0.000    -0.5150E-01
                     -0.8335E-01-0.1448     0.3666E-01-0.1910     0.5754E-01

                     -0.7539     -1.000      0.000     0.1780     0.3619E-01
                      0.8541E-01-0.2985E-01-0.7237E-01-0.2366E-01-0.6522E-01
                     -0.7198E-01 0.7849E-01-0.2628     -1.000      0.000    

                     -0.5000     -1.000      3.000     -1.000      0.000    
                       0.000      9.100      9.200     -5000.     -4.000    
                       0.000      0.000      9.000      8.900     -5000.    

                      -4.000      0.000      0.000      9.200      9.000    
                      -5000.     -4.000      0.000      0.000      9.400    
                       8.800     -5000.     -2.000    

   12    321.72        3.842    -0.9479      3.341     -100.0     0.2624    
                     -0.7884      2.474     -100.0      2.257      1.000    
                       1.000     0.1000      2.400      0.000      0.000    
                     -0.5000      0.000      0.000      0.000     -1.221    

                      -2.500      8654.     0.1251E+05 -483.9     -1451.    
                      -2.000     -4.000     -3.000     -5.300     -4.000    
                      -13.60     -2.675      1359.      0.000      3354.    

                       4764.      3323.      5073.      5329.      2500.    
                       4298.    -0.4892E-02-0.9315E-01  0.000    -0.5150E-01
                     -0.8335E-01-0.1448     0.3666E-01-0.1910     0.5754E-01

                     -0.7539     -1.000      0.000     0.1780     0.3619E-01
                      0.8541E-01-0.2985E-01-0.7237E-01-0.2366E-01-0.6522E-01
                     -0.7198E-01 0.7849E-01-0.2628     -1.000      0.000    

                     -0.5000     -1.000      3.000     -1.000      0.000    
                       0.000      9.100      9.200     -5000.     -4.000    
                       0.000      0.000      9.000      8.900     -5000.    

                      -4.000      0.000      0.000      9.200      9.000    
                      -5000.     -4.000      0.000      0.000      9.400    
                       8.800     -5000.     -2.000    

   13    326.23        3.842    -0.9479      3.341     -100.0     0.2624    
                     -0.7884      2.474     -100.0      2.257      1.000    
                       1.000     0.1000      2.400      0.000      0.000    
                      -1.500      0.000      0.000      0.000     -1.221    

                      -2.500     0.1298E+05 0.1251E+05 -483.9     -1451.    
                      -2.000     -4.000     -3.000     -5.300     -4.000    
                      -13.60     -2.675      1359.      0.000      3354.    

                       4764.      3323.      5073.      5329.      2500.    
                       4298.    -0.4892E-02-0.9315E-01  0.000    -0.5150E-01
                     -0.8335E-01-0.1448     0.3666E-01-0.1910     0.5754E-01

                     -0.7539     -1.000      0.000     0.1780     0.3619E-01
                      0.8541E-01-0.2985E-01-0.7237E-01-0.2366E-01-0.6522E-01
                     -0.7198E-01 0.7849E-01-0.2628     -1.000      0.000    

                     -0.5000     -1.000      3.000     -1.000      0.000    
                       0.000      9.100      9.200     -5000.     -4.000    
                       0.000      0.000      9.000      8.900     -5000.    

                      -4.000      0.000      0.000      9.200      9.000    
                      -5000.     -4.000      0.000      0.000      9.400    
                       8.800     -5000.     -2.000    

   14    318.58        3.842    -0.9479      3.341     -100.0     0.2624    
                     -0.7884      2.474     -100.0      2.257      1.000    
                       1.000     0.1000      2.400      0.000      0.000    
                      -1.500      0.000      0.000      0.000     -1.221    

                      -2.500      8654.     0.1877E+05 -483.9     -1451.    
                      -2.000     -4.000     -3.000     -5.300     -4.000    
                      -13.60     -2.675      1359.      0.000      3354.    

                       4764.      3323.      5073.      5329.      2500.    
                       4298.    -0.4892E-02-0.9315E-01  0.000    -0.5150E-01
                     -0.8335E-01-0.1448     0.3666E-01-0.1910     0.5754E-01

                     -0.7539     -1.000      0.000     0.1780     0.3619E-01
                      0.8541E-01-0.2985E-01-0.7237E-01-0.2366E-01-0.6522E-01
                     -0.7198E-01 0.7849E-01-0.2628     -1.000      0.000    

                     -0.5000     -1.000      3.000     -1.000      0.000    
                       0.000      9.100      9.200     -5000.     -4.000    
                       0.000      0.000      9.000      8.900     -5000.    

                      -4.000      0.000      0.000      9.200      9.000    
                      -5000.     -4.000      0.000      0.000      9.400    
                       8.800     -5000.     -2.000    

   15    320.42        3.842    -0.9479      3.341     -100.0     0.2624    
                     -0.7884      2.474     -100.0      2.257      1.000    
                       1.000     0.1000      2.400      0.000      0.000    
                      -1.500      0.000      0.000      0.000     -1.221    

                      -2.500      8654.     0.1251E+05 -1694.     -1451.    
                      -2.000     -4.000     -3.000     -5.300     -4.000    
                      -13.60     -2.675      1359.      0.000      3354.    

                       4764.      3323.      5073.      5329.      2500.    
                       4298.    -0.4892E-02-0.9315E-01  0.000    -0.5150E-01
                     -0.8335E-01-0.1448     0.3666E-01-0.1910     0.5754E-01

                     -0.7539     -1.000      0.000     0.1780     0.3619E-01
                      0.8541E-01-0.2985E-01-0.7237E-01-0.2366E-01-0.6522E-01
                     -0.7198E-01 0.7849E-01-0.2628     -1.000      0.000    

                     -0.5000     -1.000      3.000     -1.000      0.000    
                       0.000      9.100      9.200     -5000.     -4.000    
                       0.000      0.000      9.000      8.900     -5000.    

                      -4.000      0.000      0.000      9.200      9.000    
                      -5000.     -4.000      0.000      0.000      9.400    
                       8.800     -5000.     -2.000    

   16    321.44        3.842    -0.9479      3.341     -100.0     0.2624    
                     -0.7884      2.474     -100.0      2.257      1.000    
                       1.000     0.1000      2.400      0.000      0.000    
                      -1.500      0.000      0.000      0.000     -1.221    

                      -2.500      8654.     0.1251E+05 -483.9     -5080.    
                      -2.000     -4.000     -3.000     -5.300     -4.000    
                      -13.60     -2.675      1359.      0.000      3354.    

                       4764.      3323.      5073.      5329.      2500.    
                       4298.    -0.4892E-02-0.9315E-01  0.000    -0.5150E-01
                     -0.8335E-01-0.1448     0.3666E-01-0.1910     0.5754E-01

                     -0.7539     -1.000      0.000     0.1780     0.3619E-01
                      0.8541E-01-0.2985E-01-0.7237E-01-0.2366E-01-0.6522E-01
                     -0.7198E-01 0.7849E-01-0.2628     -1.000      0.000    

                     -0.5000     -1.000      3.000     -1.000      0.000    
                       0.000      9.100      9.200     -5000.     -4.000    
                       0.000      0.000      9.000      8.900     -5000.    

                      -4.000      0.000      0.000      9.200      9.000    
                      -5000.     -4.000      0.000      0.000      9.400    
                       8.800     -5000.     -2.000    

   17    320.56        3.842    -0.9479      3.341     -100.0     0.2624    
                     -0.7884      2.474     -100.0      2.257      1.000    
                       1.000     0.1000      2.400      0.000      0.000    
                      -1.500      0.000      0.000      0.000     -1.221    

                      -2.500      8654.     0.1251E+05 -483.9     -1451.    
                      -2.000     -1.000     -3.000     -5.300     -4.000    
                      -13.60     -2.675      1359.      0.000      3354.    

                       4764.      3323.      5073.      5329.      2500.    
                       4298.    -0.4892E-02-0.9315E-01  0.000    -0.5150E-01
                     -0.8335E-01-0.1448     0.3666E-01-0.1910     0.5754E-01

                     -0.7539     -1.000      0.000     0.1780     0.3619E-01
                      0.8541E-01-0.2985E-01-0.7237E-01-0.2366E-01-0.6522E-01
                     -0.7198E-01 0.7849E-01-0.2628     -1.000      0.000    

                     -0.5000     -1.000      3.000     -1.000      0.000    
                       0.000      9.100      9.200     -5000.     -4.000    
                       0.000      0.000      9.000      8.900     -5000.    

                      -4.000      0.000      0.000      9.200      9.000    
                      -5000.     -4.000      0.000      0.000      9.400    
                       8.800     -5000.     -2.000    

   18    316.75        3.842    -0.9479      3.341     -100.0     0.2624    
                     -0.7884      2.474     -100.0      2.257      1.000    
                       1.000     0.1000      2.400      0.000      0.000    
                      -1.500      0.000      0.000      0.000     -1.221    

                      -2.500      8654.     0.1251E+05 -483.9     -1451.    
                      -2.000     -4.000      0.000     -5.300     -4.000    
                      -13.60     -2.675      1359.      0.000      3354.    

                       4764.      3323.      5073.      5329.      2500.    
                       4298.    -0.4892E-02-0.9315E-01  0.000    -0.5150E-01
                     -0.8335E-01-0.1448     0.3666E-01-0.1910     0.5754E-01

                     -0.7539     -1.000      0.000     0.1780     0.3619E-01
                      0.8541E-01-0.2985E-01-0.7237E-01-0.2366E-01-0.6522E-01
                     -0.7198E-01 0.7849E-01-0.2628     -1.000      0.000    

                     -0.5000     -1.000      3.000     -1.000      0.000    
                       0.000      9.100      9.200     -5000.     -4.000    
                       0.000      0.000      9.000      8.900     -5000.    

                      -4.000      0.000      0.000      9.200      9.000    
                      -5000.     -4.000      0.000      0.000      9.400    
                       8.800     -5000.     -2.000    

   19    320.78        3.842    -0.9479      3.341     -100.0     0.2624    
                     -0.7884      2.474     -100.0      2.257      1.000    
                       1.000     0.1000      2.400      0.000      0.000    
                      -1.500      0.000      0.000      0.000     -1.221    

                      -2.500      8654.     0.1251E+05 -483.9     -1451.    
                      -2.000     -4.000     -3.000     -2.300     -4.000    
                      -13.60     -2.675      1359.      0.000      3354.    

                       4764.      3323.      5073.      5329.      2500.    
                       4298.    -0.4892E-02-0.9315E-01  0.000    -0.5150E-01
                     -0.8335E-01-0.1448     0.3666E-01-0.1910     0.5754E-01

                     -0.7539     -1.000      0.000     0.1780     0.3619E-01
                      0.8541E-01-0.2985E-01-0.7237E-01-0.2366E-01-0.6522E-01
                     -0.7198E-01 0.7849E-01-0.2628     -1.000      0.000    

                     -0.5000     -1.000      3.000     -1.000      0.000    
                       0.000      9.100      9.200     -5000.     -4.000    
                       0.000      0.000      9.000      8.900     -5000.    

                      -4.000      0.000      0.000      9.200      9.000    
                      -5000.     -4.000      0.000      0.000      9.400    
                       8.800     -5000.     -2.000    

   20    318.99        3.842    -0.9479      3.341     -100.0     0.2624    
                     -0.7884      2.474     -100.0      2.257      1.000    
                       1.000     0.1000      2.400      0.000      0.000    
                      -1.500      0.000      0.000      0.000     -1.221    

                      -2.500      8654.     0.1251E+05 -483.9     -1451.    
                      -2.000     -4.000     -3.000     -5.300     -1.000    
                      -13.60     -2.675      1359.      0.000      3354.    

                       4764.      3323.      5073.      5329.      2500.    
                       4298.    -0.4892E-02-0.9315E-01  0.000    -0.5150E-01
                     -0.8335E-01-0.1448     0.3666E-01-0.1910     0.5754E-01

                     -0.7539     -1.000      0.000     0.1780     0.3619E-01
                      0.8541E-01-0.2985E-01-0.7237E-01-0.2366E-01-0.6522E-01
                     -0.7198E-01 0.7849E-01-0.2628     -1.000      0.000    

                     -0.5000     -1.000      3.000     -1.000      0.000    
                       0.000      9.100      9.200     -5000.     -4.000    
                       0.000      0.000      9.000      8.900     -5000.    

                      -4.000      0.000      0.000      9.200      9.000    
                      -5000.     -4.000      0.000      0.000      9.400    
                       8.800     -5000.     -2.000    

   21    320.95        3.842    -0.9479      3.341     -100.0     0.2624    
                     -0.7884      2.474     -100.0      2.257      1.000    
                       1.000     0.1000      2.400      0.000      0.000    
                      -1.500      0.000      0.000      0.000     -1.221    

                      -2.500      8654.     0.1251E+05 -483.9     -1451.    
                      -2.000     -4.000     -3.000     -5.300     -4.000    
                      -9.595     -2.675      1359.      0.000      3354.    

                       4764.      3323.      5073.      5329.      2500.    
                       4298.    -0.4892E-02-0.9315E-01  0.000    -0.5150E-01
                     -0.8335E-01-0.1448     0.3666E-01-0.1910     0.5754E-01

                     -0.7539     -1.000      0.000     0.1780     0.3619E-01
                      0.8541E-01-0.2985E-01-0.7237E-01-0.2366E-01-0.6522E-01
                     -0.7198E-01 0.7849E-01-0.2628     -1.000      0.000    

                     -0.5000     -1.000      3.000     -1.000      0.000    
                       0.000      9.100      9.200     -5000.     -4.000    
                       0.000      0.000      9.000      8.900     -5000.    

                      -4.000      0.000      0.000      9.200      9.000    
                      -5000.     -4.000      0.000      0.000      9.400    
                       8.800     -5000.     -2.000    

   22    319.35        3.842    -0.9479      3.341     -100.0     0.2624    
                     -0.7884      2.474     -100.0      2.257      1.000    
                       1.000     0.1000      2.400      0.000      0.000    
                      -1.500      0.000      0.000      0.000     -1.221    

                      -2.500      8654.     0.1251E+05 -483.9     -1451.    
                      -2.000     -4.000     -3.000     -5.300     -4.000    
                      -13.60     -1.675      1359.      0.000      3354.    

                       4764.      3323.      5073.      5329.      2500.    
                       4298.    -0.4892E-02-0.9315E-01  0.000    -0.5150E-01
                     -0.8335E-01-0.1448     0.3666E-01-0.1910     0.5754E-01

                     -0.7539     -1.000      0.000     0.1780     0.3619E-01
                      0.8541E-01-0.2985E-01-0.7237E-01-0.2366E-01-0.6522E-01
                     -0.7198E-01 0.7849E-01-0.2628     -1.000      0.000    

                     -0.5000     -1.000      3.000     -1.000      0.000    
                       0.000      9.100      9.200     -5000.     -4.000    
                       0.000      0.000      9.000      8.900     -5000.    

                      -4.000      0.000      0.000      9.200      9.000    
                      -5000.     -4.000      0.000      0.000      9.400    
                       8.800     -5000.     -2.000    

   23    324.39        3.842    -0.9479      3.341     -100.0     0.2624    
                     -0.7884      2.474     -100.0      2.257      1.000    
                       1.000     0.1000      2.400      0.000      0.000    
                      -1.500      0.000      0.000      0.000     -1.221    

                      -2.500      8654.     0.1251E+05 -483.9     -1451.    
                      -2.000     -4.000     -3.000     -5.300     -4.000    
                      -13.60     -2.675      1359.      0.000      3354.    

                       4764.      3323.      5073.      5329.      2500.    
                       4298.     0.4951    -0.9315E-01  0.000    -0.5150E-01
                     -0.8335E-01-0.1448     0.3666E-01-0.1910     0.5754E-01

                     -0.7539     -1.000      0.000     0.1780     0.3619E-01
                      0.8541E-01-0.2985E-01-0.7237E-01-0.2366E-01-0.6522E-01
                     -0.7198E-01 0.7849E-01-0.2628     -1.000      0.000    

                     -0.5000     -1.000      3.000     -1.000      0.000    
                       0.000      9.100      9.200     -5000.     -4.000    
                       0.000      0.000      9.000      8.900     -5000.    

                      -4.000      0.000      0.000      9.200      9.000    
                      -5000.     -4.000      0.000      0.000      9.400    
                       8.800     -5000.     -2.000    

   24    315.96        3.842    -0.9479      3.341     -100.0     0.2624    
                     -0.7884      2.474     -100.0      2.257      1.000    
                       1.000     0.1000      2.400      0.000      0.000    
                      -1.500      0.000      0.000      0.000     -1.221    

                      -2.500      8654.     0.1251E+05 -483.9     -1451.    
                      -2.000     -4.000     -3.000     -5.300     -4.000    
                      -13.60     -2.675      1359.      0.000      3354.    

                       4764.      3323.      5073.      5329.      2500.    
                       4298.    -0.4892E-02 0.4069      0.000    -0.5150E-01
                     -0.8335E-01-0.1448     0.3666E-01-0.1910     0.5754E-01

                     -0.7539     -1.000      0.000     0.1780     0.3619E-01
                      0.8541E-01-0.2985E-01-0.7237E-01-0.2366E-01-0.6522E-01
                     -0.7198E-01 0.7849E-01-0.2628     -1.000      0.000    

                     -0.5000     -1.000      3.000     -1.000      0.000    
                       0.000      9.100      9.200     -5000.     -4.000    
                       0.000      0.000      9.000      8.900     -5000.    

                      -4.000      0.000      0.000      9.200      9.000    
                      -5000.     -4.000      0.000      0.000      9.400    
                       8.800     -5000.     -2.000    

   25    357.84        3.842    -0.9479      3.341     -100.0     0.2624    
                     -0.7884      2.474     -100.0      2.257      1.000    
                       1.000     0.1000      2.400      0.000      0.000    
                      -1.500      0.000      0.000      0.000     -1.221    

                      -2.500      8654.     0.1251E+05 -483.9     -1451.    
                      -2.000     -4.000     -3.000     -5.300     -4.000    
                      -13.60     -2.675      1359.      0.000      3354.    

                       4764.      3323.      5073.      5329.      2500.    
                       4298.    -0.4892E-02-0.9315E-01  0.000     0.4485    
                     -0.8335E-01-0.1448     0.3666E-01-0.1910     0.5754E-01

                     -0.7539     -1.000      0.000     0.1780     0.3619E-01
                      0.8541E-01-0.2985E-01-0.7237E-01-0.2366E-01-0.6522E-01
                     -0.7198E-01 0.7849E-01-0.2628     -1.000      0.000    

                     -0.5000     -1.000      3.000     -1.000      0.000    
                       0.000      9.100      9.200     -5000.     -4.000    
                       0.000      0.000      9.000      8.900     -5000.    

                      -4.000      0.000      0.000      9.200      9.000    
                      -5000.     -4.000      0.000      0.000      9.400    
                       8.800     -5000.     -2.000    

   26    314.78        3.842    -0.9479      3.341     -100.0     0.2624    
                     -0.7884      2.474     -100.0      2.257      1.000    
                       1.000     0.1000      2.400      0.000      0.000    
                      -1.500      0.000      0.000      0.000     -1.221    

                      -2.500      8654.     0.1251E+05 -483.9     -1451.    
                      -2.000     -4.000     -3.000     -5.300     -4.000    
                      -13.60     -2.675      1359.      0.000      3354.    

                       4764.      3323.      5073.      5329.      2500.    
                       4298.    -0.4892E-02-0.9315E-01  0.000    -0.5150E-01
                      0.4166    -0.1448     0.3666E-01-0.1910     0.5754E-01

                     -0.7539     -1.000      0.000     0.1780     0.3619E-01
                      0.8541E-01-0.2985E-01-0.7237E-01-0.2366E-01-0.6522E-01
                     -0.7198E-01 0.7849E-01-0.2628     -1.000      0.000    

                     -0.5000     -1.000      3.000     -1.000      0.000    
                       0.000      9.100      9.200     -5000.     -4.000    
                       0.000      0.000      9.000      8.900     -5000.    

                      -4.000      0.000      0.000      9.200      9.000    
                      -5000.     -4.000      0.000      0.000      9.400    
                       8.800     -5000.     -2.000    

   27    325.38        3.842    -0.9479      3.341     -100.0     0.2624    
                     -0.7884      2.474     -100.0      2.257      1.000    
                       1.000     0.1000      2.400      0.000      0.000    
                      -1.500      0.000      0.000      0.000     -1.221    

                      -2.500      8654.     0.1251E+05 -483.9     -1451.    
                      -2.000     -4.000     -3.000     -5.300     -4.000    
                      -13.60     -2.675      1359.      0.000      3354.    

                       4764.      3323.      5073.      5329.      2500.    
                       4298.    -0.4892E-02-0.9315E-01  0.000    -0.5150E-01
                     -0.8335E-01 0.3552     0.3666E-01-0.1910     0.5754E-01

                     -0.7539     -1.000      0.000     0.1780     0.3619E-01
                      0.8541E-01-0.2985E-01-0.7237E-01-0.2366E-01-0.6522E-01
                     -0.7198E-01 0.7849E-01-0.2628     -1.000      0.000    

                     -0.5000     -1.000      3.000     -1.000      0.000    
                       0.000      9.100      9.200     -5000.     -4.000    
                       0.000      0.000      9.000      8.900     -5000.    

                      -4.000      0.000      0.000      9.200      9.000    
                      -5000.     -4.000      0.000      0.000      9.400    
                       8.800     -5000.     -2.000    

   28    340.98        3.842    -0.9479      3.341     -100.0     0.2624    
                     -0.7884      2.474     -100.0      2.257      1.000    
                       1.000     0.1000      2.400      0.000      0.000    
                      -1.500      0.000      0.000      0.000     -1.221    

                      -2.500      8654.     0.1251E+05 -483.9     -1451.    
                      -2.000     -4.000     -3.000     -5.300     -4.000    
                      -13.60     -2.675      1359.      0.000      3354.    

                       4764.      3323.      5073.      5329.      2500.    
                       4298.    -0.4892E-02-0.9315E-01  0.000    -0.5150E-01
                     -0.8335E-01-0.1448     0.5367    -0.1910     0.5754E-01

                     -0.7539     -1.000      0.000     0.1780     0.3619E-01
                      0.8541E-01-0.2985E-01-0.7237E-01-0.2366E-01-0.6522E-01
                     -0.7198E-01 0.7849E-01-0.2628     -1.000      0.000    

                     -0.5000     -1.000      3.000     -1.000      0.000    
                       0.000      9.100      9.200     -5000.     -4.000    
                       0.000      0.000      9.000      8.900     -5000.    

                      -4.000      0.000      0.000      9.200      9.000    
                      -5000.     -4.000      0.000      0.000      9.400    
                       8.800     -5000.     -2.000    

   29    319.40        3.842    -0.9479      3.341     -100.0     0.2624    
                     -0.7884      2.474     -100.0      2.257      1.000    
                       1.000     0.1000      2.400      0.000      0.000    
                      -1.500      0.000      0.000      0.000     -1.221    

                      -2.500      8654.     0.1251E+05 -483.9     -1451.    
                      -2.000     -4.000     -3.000     -5.300     -4.000    
                      -13.60     -2.675      1359.      0.000      3354.    

                       4764.      3323.      5073.      5329.      2500.    
                       4298.    -0.4892E-02-0.9315E-01  0.000    -0.5150E-01
                     -0.8335E-01-0.1448     0.3666E-01 0.3090     0.5754E-01

                     -0.7539     -1.000      0.000     0.1780     0.3619E-01
                      0.8541E-01-0.2985E-01-0.7237E-01-0.2366E-01-0.6522E-01
                     -0.7198E-01 0.7849E-01-0.2628     -1.000      0.000    

                     -0.5000     -1.000      3.000     -1.000      0.000    
                       0.000      9.100      9.200     -5000.     -4.000    
                       0.000      0.000      9.000      8.900     -5000.    

                      -4.000      0.000      0.000      9.200      9.000    
                      -5000.     -4.000      0.000      0.000      9.400    
                       8.800     -5000.     -2.000    

   30    366.70        3.842    -0.9479      3.341     -100.0     0.2624    
                     -0.7884      2.474     -100.0      2.257      1.000    
                       1.000     0.1000      2.400      0.000      0.000    
                      -1.500      0.000      0.000      0.000     -1.221    

                      -2.500      8654.     0.1251E+05 -483.9     -1451.    
                      -2.000     -4.000     -3.000     -5.300     -4.000    
                      -13.60     -2.675      1359.      0.000      3354.    

                       4764.      3323.      5073.      5329.      2500.    
                       4298.    -0.4892E-02-0.9315E-01  0.000    -0.5150E-01
                     -0.8335E-01-0.1448     0.3666E-01-0.1910     0.5575    

                     -0.7539     -1.000      0.000     0.1780     0.3619E-01
                      0.8541E-01-0.2985E-01-0.7237E-01-0.2366E-01-0.6522E-01
                     -0.7198E-01 0.7849E-01-0.2628     -1.000      0.000    

                     -0.5000     -1.000      3.000     -1.000      0.000    
                       0.000      9.100      9.200     -5000.     -4.000    
                       0.000      0.000      9.000      8.900     -5000.    

                      -4.000      0.000      0.000      9.200      9.000    
                      -5000.     -4.000      0.000      0.000      9.400    
                       8.800     -5000.     -2.000    

   31    322.26        3.842    -0.9479      3.341     -100.0     0.2624    
                     -0.7884      2.474     -100.0      2.257      1.000    
                       1.000     0.1000      2.400      0.000      0.000    
                      -1.500      0.000      0.000      0.000     -1.221    

                      -2.500      8654.     0.1251E+05 -483.9     -1451.    
                      -2.000     -4.000     -3.000     -5.300     -4.000    
                      -13.60     -2.675      1359.      0.000      3354.    

                       4764.      3323.      5073.      5329.      2500.    
                       4298.    -0.4892E-02-0.9315E-01  0.000    -0.5150E-01
                     -0.8335E-01-0.1448     0.3666E-01-0.1910     0.5754E-01

                      0.2461     -1.000      0.000     0.1780     0.3619E-01
                      0.8541E-01-0.2985E-01-0.7237E-01-0.2366E-01-0.6522E-01
                     -0.7198E-01 0.7849E-01-0.2628     -1.000      0.000    

                     -0.5000     -1.000      3.000     -1.000      0.000    
                       0.000      9.100      9.200     -5000.     -4.000    
                       0.000      0.000      9.000      8.900     -5000.    

                      -4.000      0.000      0.000      9.200      9.000    
                      -5000.     -4.000      0.000      0.000      9.400    
                       8.800     -5000.     -2.000    

   32    324.83        3.842    -0.9479      3.341     -100.0     0.2624    
                     -0.7884      2.474     -100.0      2.257      1.000    
                       1.000     0.1000      2.400      0.000      0.000    
                      -1.500      0.000      0.000      0.000     -1.221    

                      -2.500      8654.     0.1251E+05 -483.9     -1451.    
                      -2.000     -4.000     -3.000     -5.300     -4.000    
                      -13.60     -2.675      1359.      0.000      3354.    

                       4764.      3323.      5073.      5329.      2500.    
                       4298.    -0.4892E-02-0.9315E-01  0.000    -0.5150E-01
                     -0.8335E-01-0.1448     0.3666E-01-0.1910     0.5754E-01

                     -0.7539      0.000      0.000     0.1780     0.3619E-01
                      0.8541E-01-0.2985E-01-0.7237E-01-0.2366E-01-0.6522E-01
                     -0.7198E-01 0.7849E-01-0.2628     -1.000      0.000    

                     -0.5000     -1.000      3.000     -1.000      0.000    
                       0.000      9.100      9.200     -5000.     -4.000    
                       0.000      0.000      9.000      8.900     -5000.    

                      -4.000      0.000      0.000      9.200      9.000    
                      -5000.     -4.000      0.000      0.000      9.400    
                       8.800     -5000.     -2.000    

   33    336.63        3.842    -0.9479      3.341     -100.0     0.2624    
                     -0.7884      2.474     -100.0      2.257      1.000    
                       1.000     0.1000      2.400      0.000      0.000    
                      -1.500      0.000      0.000      0.000     -1.221    

                      -2.500      8654.     0.1251E+05 -483.9     -1451.    
                      -2.000     -4.000     -3.000     -5.300     -4.000    
                      -13.60     -2.675      1359.      0.000      3354.    

                       4764.      3323.      5073.      5329.      2500.    
                       4298.    -0.4892E-02-0.9315E-01  0.000    -0.5150E-01
                     -0.8335E-01-0.1448     0.3666E-01-0.1910     0.5754E-01

                     -0.7539     -1.000      0.000     0.6780     0.3619E-01
                      0.8541E-01-0.2985E-01-0.7237E-01-0.2366E-01-0.6522E-01
                     -0.7198E-01 0.7849E-01-0.2628     -1.000      0.000    

                     -0.5000     -1.000      3.000     -1.000      0.000    
                       0.000      9.100      9.200     -5000.     -4.000    
                       0.000      0.000      9.000      8.900     -5000.    

                      -4.000      0.000      0.000      9.200      9.000    
                      -5000.     -4.000      0.000      0.000      9.400    
                       8.800     -5000.     -2.000    

   34    328.18        3.842    -0.9479      3.341     -100.0     0.2624    
                     -0.7884      2.474     -100.0      2.257      1.000    
                       1.000     0.1000      2.400      0.000      0.000    
                      -1.500      0.000      0.000      0.000     -1.221    

                      -2.500      8654.     0.1251E+05 -483.9     -1451.    
                      -2.000     -4.000     -3.000     -5.300     -4.000    
                      -13.60     -2.675      1359.      0.000      3354.    

                       4764.      3323.      5073.      5329.      2500.    
                       4298.    -0.4892E-02-0.9315E-01  0.000    -0.5150E-01
                     -0.8335E-01-0.1448     0.3666E-01-0.1910     0.5754E-01

                     -0.7539     -1.000      0.000     0.1780     0.5362    
                      0.8541E-01-0.2985E-01-0.7237E-01-0.2366E-01-0.6522E-01
                     -0.7198E-01 0.7849E-01-0.2628     -1.000      0.000    

                     -0.5000     -1.000      3.000     -1.000      0.000    
                       0.000      9.100      9.200     -5000.     -4.000    
                       0.000      0.000      9.000      8.900     -5000.    

                      -4.000      0.000      0.000      9.200      9.000    
                      -5000.     -4.000      0.000      0.000      9.400    
                       8.800     -5000.     -2.000    

   35    335.38        3.842    -0.9479      3.341     -100.0     0.2624    
                     -0.7884      2.474     -100.0      2.257      1.000    
                       1.000     0.1000      2.400      0.000      0.000    
                      -1.500      0.000      0.000      0.000     -1.221    

                      -2.500      8654.     0.1251E+05 -483.9     -1451.    
                      -2.000     -4.000     -3.000     -5.300     -4.000    
                      -13.60     -2.675      1359.      0.000      3354.    

                       4764.      3323.      5073.      5329.      2500.    
                       4298.    -0.4892E-02-0.9315E-01  0.000    -0.5150E-01
                     -0.8335E-01-0.1448     0.3666E-01-0.1910     0.5754E-01

                     -0.7539     -1.000      0.000     0.1780     0.3619E-01
                      0.8541E-01 0.4702    -0.7237E-01-0.2366E-01-0.6522E-01
                     -0.7198E-01 0.7849E-01-0.2628     -1.000      0.000    

                     -0.5000     -1.000      3.000     -1.000      0.000    
                       0.000      9.100      9.200     -5000.     -4.000    
                       0.000      0.000      9.000      8.900     -5000.    

                      -4.000      0.000      0.000      9.200      9.000    
                      -5000.     -4.000      0.000      0.000      9.400    
                       8.800     -5000.     -2.000    

   36    323.31        3.842    -0.9479      3.341     -100.0     0.2624    
                     -0.7884      2.474     -100.0      2.257      1.000    
                       1.000     0.1000      2.400      0.000      0.000    
                      -1.500      0.000      0.000      0.000     -1.221    

                      -2.500      8654.     0.1251E+05 -483.9     -1451.    
                      -2.000     -4.000     -3.000     -5.300     -4.000    
                      -13.60     -2.675      1359.      0.000      3354.    

                       4764.      3323.      5073.      5329.      2500.    
                       4298.    -0.4892E-02-0.9315E-01  0.000    -0.5150E-01
                     -0.8335E-01-0.1448     0.3666E-01-0.1910     0.5754E-01

                     -0.7539     -1.000      0.000     0.1780     0.3619E-01
                      0.8541E-01-0.2985E-01 0.4276    -0.2366E-01-0.6522E-01
                     -0.7198E-01 0.7849E-01-0.2628     -1.000      0.000    

                     -0.5000     -1.000      3.000     -1.000      0.000    
                       0.000      9.100      9.200     -5000.     -4.000    
                       0.000      0.000      9.000      8.900     -5000.    

                      -4.000      0.000      0.000      9.200      9.000    
                      -5000.     -4.000      0.000      0.000      9.400    
                       8.800     -5000.     -2.000    

   37    326.33        3.842    -0.9479      3.341     -100.0     0.2624    
                     -0.7884      2.474     -100.0      2.257      1.000    
                       1.000     0.1000      2.400      0.000      0.000    
                      -1.500      0.000      0.000      0.000     -1.221    

                      -2.500      8654.     0.1251E+05 -483.9     -1451.    
                      -2.000     -4.000     -3.000     -5.300     -4.000    
                      -13.60     -2.675      1359.      0.000      3354.    

                       4764.      3323.      5073.      5329.      2500.    
                       4298.    -0.4892E-02-0.9315E-01  0.000    -0.5150E-01
                     -0.8335E-01-0.1448     0.3666E-01-0.1910     0.5754E-01

                     -0.7539     -1.000      0.000     0.1780     0.3619E-01
                      0.8541E-01-0.2985E-01-0.7237E-01 0.4763    -0.6522E-01
                     -0.7198E-01 0.7849E-01-0.2628     -1.000      0.000    

                     -0.5000     -1.000      3.000     -1.000      0.000    
                       0.000      9.100      9.200     -5000.     -4.000    
                       0.000      0.000      9.000      8.900     -5000.    

                      -4.000      0.000      0.000      9.200      9.000    
                      -5000.     -4.000      0.000      0.000      9.400    
                       8.800     -5000.     -2.000    

   38    327.02        3.842    -0.9479      3.341     -100.0     0.2624    
                     -0.7884      2.474     -100.0      2.257      1.000    
                       1.000     0.1000      2.400      0.000      0.000    
                      -1.500      0.000      0.000      0.000     -1.221    

                      -2.500      8654.     0.1251E+05 -483.9     -1451.    
                      -2.000     -4.000     -3.000     -5.300     -4.000    
                      -13.60     -2.675      1359.      0.000      3354.    

                       4764.      3323.      5073.      5329.      2500.    
                       4298.    -0.4892E-02-0.9315E-01  0.000    -0.5150E-01
                     -0.8335E-01-0.1448     0.3666E-01-0.1910     0.5754E-01

                     -0.7539     -1.000      0.000     0.1780     0.3619E-01
                      0.8541E-01-0.2985E-01-0.7237E-01-0.2366E-01 0.4348    
                     -0.7198E-01 0.7849E-01-0.2628     -1.000      0.000    

                     -0.5000     -1.000      3.000     -1.000      0.000    
                       0.000      9.100      9.200     -5000.     -4.000    
                       0.000      0.000      9.000      8.900     -5000.    

                      -4.000      0.000      0.000      9.200      9.000    
                      -5000.     -4.000      0.000      0.000      9.400    
                       8.800     -5000.     -2.000    

   39    325.15        3.842    -0.9479      3.341     -100.0     0.2624    
                     -0.7884      2.474     -100.0      2.257      1.000    
                       1.000     0.1000      2.400      0.000      0.000    
                      -1.500      0.000      0.000      0.000     -1.221    

                      -2.500      8654.     0.1251E+05 -483.9     -1451.    
                      -2.000     -4.000     -3.000     -5.300     -4.000    
                      -13.60     -2.675      1359.      0.000      3354.    

                       4764.      3323.      5073.      5329.      2500.    
                       4298.    -0.4892E-02-0.9315E-01  0.000    -0.5150E-01
                     -0.8335E-01-0.1448     0.3666E-01-0.1910     0.5754E-01

                     -0.7539     -1.000      0.000     0.1780     0.3619E-01
                      0.8541E-01-0.2985E-01-0.7237E-01-0.2366E-01-0.6522E-01
                      0.4280     0.7849E-01-0.2628     -1.000      0.000    

                     -0.5000     -1.000      3.000     -1.000      0.000    
                       0.000      9.100      9.200     -5000.     -4.000    
                       0.000      0.000      9.000      8.900     -5000.    

                      -4.000      0.000      0.000      9.200      9.000    
                      -5000.     -4.000      0.000      0.000      9.400    
                       8.800     -5000.     -2.000    

   40    337.72        3.842    -0.9479      3.341     -100.0     0.2624    
                     -0.7884      2.474     -100.0      2.257      1.000    
                       1.000     0.1000      2.400      0.000      0.000    
                      -1.500      0.000      0.000      0.000     -1.221    

                      -2.500      8654.     0.1251E+05 -483.9     -1451.    
                      -2.000     -4.000     -3.000     -5.300     -4.000    
                      -13.60     -2.675      1359.      0.000      3354.    

                       4764.      3323.      5073.      5329.      2500.    
                       4298.    -0.4892E-02-0.9315E-01  0.000    -0.5150E-01
                     -0.8335E-01-0.1448     0.3666E-01-0.1910     0.5754E-01

                     -0.7539     -1.000      0.000     0.1780     0.3619E-01
                      0.8541E-01-0.2985E-01-0.7237E-01-0.2366E-01-0.6522E-01
                     -0.7198E-01 0.5785    -0.2628     -1.000      0.000    

                     -0.5000     -1.000      3.000     -1.000      0.000    
                       0.000      9.100      9.200     -5000.     -4.000    
                       0.000      0.000      9.000      8.900     -5000.    

                      -4.000      0.000      0.000      9.200      9.000    
                      -5000.     -4.000      0.000      0.000      9.400    
                       8.800     -5000.     -2.000    

   41    323.03        3.842    -0.9479      3.341     -100.0     0.2624    
                     -0.7884      2.474     -100.0      2.257      1.000    
                       1.000     0.1000      2.400      0.000      0.000    
                      -1.500      0.000      0.000      0.000     -1.221    

                      -2.500      8654.     0.1251E+05 -483.9     -1451.    
                      -2.000     -4.000     -3.000     -5.300     -4.000    
                      -13.60     -2.675      1359.      0.000      3354.    

                       4764.      3323.      5073.      5329.      2500.    
                       4298.    -0.4892E-02-0.9315E-01  0.000    -0.5150E-01
                     -0.8335E-01-0.1448     0.3666E-01-0.1910     0.5754E-01

                     -0.7539     -1.000      0.000     0.1780     0.3619E-01
                      0.8541E-01-0.2985E-01-0.7237E-01-0.2366E-01-0.6522E-01
                     -0.7198E-01 0.7849E-01 0.7372     -1.000      0.000    

                     -0.5000     -1.000      3.000     -1.000      0.000    
                       0.000      9.100      9.200     -5000.     -4.000    
                       0.000      0.000      9.000      8.900     -5000.    

                      -4.000      0.000      0.000      9.200      9.000    
                      -5000.     -4.000      0.000      0.000      9.400    
                       8.800     -5000.     -2.000    

   42    326.28        3.842    -0.9479      3.341     -100.0     0.2624    
                     -0.7884      2.474     -100.0      2.257      1.000    
                       1.000     0.1000      2.400      0.000      0.000    
                      -1.500      0.000      0.000      0.000     -1.221    

                      -2.500      8654.     0.1251E+05 -483.9     -1451.    
                      -2.000     -4.000     -3.000     -5.300     -4.000    
                      -13.60     -2.675      1359.      0.000      3354.    

                       4764.      3323.      5073.      5329.      2500.    
                       4298.    -0.4892E-02-0.9315E-01  0.000    -0.5150E-01
                     -0.8335E-01-0.1448     0.3666E-01-0.1910     0.5754E-01

                     -0.7539     -1.000      0.000     0.1780     0.3619E-01
                      0.8541E-01-0.2985E-01-0.7237E-01-0.2366E-01-0.6522E-01
                     -0.7198E-01 0.7849E-01-0.2628      0.000      0.000    

                     -0.5000     -1.000      3.000     -1.000      0.000    
                       0.000      9.100      9.200     -5000.     -4.000    
                       0.000      0.000      9.000      8.900     -5000.    

                      -4.000      0.000      0.000      9.200      9.000    
                      -5000.     -4.000      0.000      0.000      9.400    
                       8.800     -5000.     -2.000    

   43    357.01        3.842    -0.9479      3.341     -100.0     0.2624    
                     -0.7884      2.474     -100.0      2.257      1.000    
                       1.000     0.1000      2.400      0.000      0.000    
                      -1.500      0.000      0.000      0.000     -1.221    

                      -2.500      8654.     0.1251E+05 -483.9     -1451.    
                      -2.000     -4.000     -3.000     -5.300     -4.000    
                      -13.60     -2.675      1359.      0.000      3354.    

                       4764.      3323.      5073.      5329.      2500.    
                       4298.    -0.4892E-02-0.9315E-01  0.000    -0.5150E-01
                     -0.8335E-01-0.1448     0.3666E-01-0.1910     0.5754E-01

                     -0.7539     -1.000      0.000     0.1780     0.3619E-01
                      0.8541E-01-0.2985E-01-0.7237E-01-0.2366E-01-0.6522E-01
                     -0.7198E-01 0.7849E-01-0.2628     -1.000      0.000    

                      0.5000     -1.000      3.000     -1.000      0.000    
                       0.000      9.100      9.200     -5000.     -4.000    
                       0.000      0.000      9.000      8.900     -5000.    

                      -4.000      0.000      0.000      9.200      9.000    
                      -5000.     -4.000      0.000      0.000      9.400    
                       8.800     -5000.     -2.000    

   44    351.87        3.842    -0.9479      3.341     -100.0     0.2624    
                     -0.7884      2.474     -100.0      2.257      1.000    
                       1.000     0.1000      2.400      0.000      0.000    
                      -1.500      0.000      0.000      0.000     -1.221    

                      -2.500      8654.     0.1251E+05 -483.9     -1451.    
                      -2.000     -4.000     -3.000     -5.300     -4.000    
                      -13.60     -2.675      1359.      0.000      3354.    

                       4764.      3323.      5073.      5329.      2500.    
                       4298.    -0.4892E-02-0.9315E-01  0.000    -0.5150E-01
                     -0.8335E-01-0.1448     0.3666E-01-0.1910     0.5754E-01

                     -0.7539     -1.000      0.000     0.1780     0.3619E-01
                      0.8541E-01-0.2985E-01-0.7237E-01-0.2366E-01-0.6522E-01
                     -0.7198E-01 0.7849E-01-0.2628     -1.000      0.000    

                     -0.5000      0.000      3.000     -1.000      0.000    
                       0.000      9.100      9.200     -5000.     -4.000    
                       0.000      0.000      9.000      8.900     -5000.    

                      -4.000      0.000      0.000      9.200      9.000    
                      -5000.     -4.000      0.000      0.000      9.400    
                       8.800     -5000.     -2.000    

   45    345.38        3.842    -0.9479      3.341     -100.0     0.2624    
                     -0.7884      2.474     -100.0      2.257      1.000    
                       1.000     0.1000      2.400      0.000      0.000    
                      -1.500      0.000      0.000      0.000     -1.221    

                      -2.500      8654.     0.1251E+05 -483.9     -1451.    
                      -2.000     -4.000     -3.000     -5.300     -4.000    
                      -13.60     -2.675      1359.      0.000      3354.    

                       4764.      3323.      5073.      5329.      2500.    
                       4298.    -0.4892E-02-0.9315E-01  0.000    -0.5150E-01
                     -0.8335E-01-0.1448     0.3666E-01-0.1910     0.5754E-01

                     -0.7539     -1.000      0.000     0.1780     0.3619E-01
                      0.8541E-01-0.2985E-01-0.7237E-01-0.2366E-01-0.6522E-01
                     -0.7198E-01 0.7849E-01-0.2628     -1.000      0.000    

                     -0.5000     -1.000      0.000     -1.000      0.000    
                       0.000      9.100      9.200     -5000.     -4.000    
                       0.000      0.000      9.000      8.900     -5000.    

                      -4.000      0.000      0.000      9.200      9.000    
                      -5000.     -4.000      0.000      0.000      9.400    
                       8.800     -5000.     -2.000    

   46    319.51        3.842    -0.9479      3.341     -100.0     0.2624    
                     -0.7884      2.474     -100.0      2.257      1.000    
                       1.000     0.1000      2.400      0.000      0.000    
                      -1.500      0.000      0.000      0.000     -1.221    

                      -2.500      8654.     0.1251E+05 -483.9     -1451.    
                      -2.000     -4.000     -3.000     -5.300     -4.000    
                      -13.60     -2.675      1359.      0.000      3354.    

                       4764.      3323.      5073.      5329.      2500.    
                       4298.    -0.4892E-02-0.9315E-01  0.000    -0.5150E-01
                     -0.8335E-01-0.1448     0.3666E-01-0.1910     0.5754E-01

                     -0.7539     -1.000      0.000     0.1780     0.3619E-01
                      0.8541E-01-0.2985E-01-0.7237E-01-0.2366E-01-0.6522E-01
                     -0.7198E-01 0.7849E-01-0.2628     -1.000      0.000    

                     -0.5000     -1.000      3.000      0.000      0.000    
                       0.000      9.100      9.200     -5000.     -4.000    
                       0.000      0.000      9.000      8.900     -5000.    

                      -4.000      0.000      0.000      9.200      9.000    
                      -5000.     -4.000      0.000      0.000      9.400    
                       8.800     -5000.     -2.000    

   47    324.83        3.842    -0.9479      3.341     -100.0     0.2624    
                     -0.7884      2.474     -100.0      2.257      1.000    
                       1.000     0.1000      2.400      0.000      0.000    
                      -1.500      0.000      0.000      0.000     -1.221    

                      -2.500      8654.     0.1251E+05 -483.9     -1451.    
                      -2.000     -4.000     -3.000     -5.300     -4.000    
                      -13.60     -2.675      1359.      0.000      3354.    

                       4764.      3323.      5073.      5329.      2500.    
                       4298.    -0.4892E-02-0.9315E-01  0.000    -0.5150E-01
                     -0.8335E-01-0.1448     0.3666E-01-0.1910     0.5754E-01

                     -0.7539     -1.000      0.000     0.1780     0.3619E-01
                      0.8541E-01-0.2985E-01-0.7237E-01-0.2366E-01-0.6522E-01
                     -0.7198E-01 0.7849E-01-0.2628     -1.000      0.000    

                     -0.5000     -1.000      3.000     -1.000      0.000    
                       0.000      9.600      9.200     -5000.     -4.000    
                       0.000      0.000      9.000      8.900     -5000.    

                      -4.000      0.000      0.000      9.200      9.000    
                      -5000.     -4.000      0.000      0.000      9.400    
                       8.800     -5000.     -2.000    

   48    326.64        3.842    -0.9479      3.341     -100.0     0.2624    
                     -0.7884      2.474     -100.0      2.257      1.000    
                       1.000     0.1000      2.400      0.000      0.000    
                      -1.500      0.000      0.000      0.000     -1.221    

                      -2.500      8654.     0.1251E+05 -483.9     -1451.    
                      -2.000     -4.000     -3.000     -5.300     -4.000    
                      -13.60     -2.675      1359.      0.000      3354.    

                       4764.      3323.      5073.      5329.      2500.    
                       4298.    -0.4892E-02-0.9315E-01  0.000    -0.5150E-01
                     -0.8335E-01-0.1448     0.3666E-01-0.1910     0.5754E-01

                     -0.7539     -1.000      0.000     0.1780     0.3619E-01
                      0.8541E-01-0.2985E-01-0.7237E-01-0.2366E-01-0.6522E-01
                     -0.7198E-01 0.7849E-01-0.2628     -1.000      0.000    

                     -0.5000     -1.000      3.000     -1.000      0.000    
                       0.000      9.100      9.700     -5000.     -4.000    
                       0.000      0.000      9.000      8.900     -5000.    

                      -4.000      0.000      0.000      9.200      9.000    
                      -5000.     -4.000      0.000      0.000      9.400    
                       8.800     -5000.     -2.000    

   49    321.00        3.842    -0.9479      3.341     -100.0     0.2624    
                     -0.7884      2.474     -100.0      2.257      1.000    
                       1.000     0.1000      2.400      0.000      0.000    
                      -1.500      0.000      0.000      0.000     -1.221    

                      -2.500      8654.     0.1251E+05 -483.9     -1451.    
                      -2.000     -4.000     -3.000     -5.300     -4.000    
                      -13.60     -2.675      1359.      0.000      3354.    

                       4764.      3323.      5073.      5329.      2500.    
                       4298.    -0.4892E-02-0.9315E-01  0.000    -0.5150E-01
                     -0.8335E-01-0.1448     0.3666E-01-0.1910     0.5754E-01

                     -0.7539     -1.000      0.000     0.1780     0.3619E-01
                      0.8541E-01-0.2985E-01-0.7237E-01-0.2366E-01-0.6522E-01
                     -0.7198E-01 0.7849E-01-0.2628     -1.000      0.000    

                     -0.5000     -1.000      3.000     -1.000      0.000    
                       0.000      9.100      9.200      0.000     -4.000    
                       0.000      0.000      9.000      8.900     -5000.    

                      -4.000      0.000      0.000      9.200      9.000    
                      -5000.     -4.000      0.000      0.000      9.400    
                       8.800     -5000.     -2.000    

   50    320.18        3.842    -0.9479      3.341     -100.0     0.2624    
                     -0.7884      2.474     -100.0      2.257      1.000    
                       1.000     0.1000      2.400      0.000      0.000    
                      -1.500      0.000      0.000      0.000     -1.221    

                      -2.500      8654.     0.1251E+05 -483.9     -1451.    
                      -2.000     -4.000     -3.000     -5.300     -4.000    
                      -13.60     -2.675      1359.      0.000      3354.    

                       4764.      3323.      5073.      5329.      2500.    
                       4298.    -0.4892E-02-0.9315E-01  0.000    -0.5150E-01
                     -0.8335E-01-0.1448     0.3666E-01-0.1910     0.5754E-01

                     -0.7539     -1.000      0.000     0.1780     0.3619E-01
                      0.8541E-01-0.2985E-01-0.7237E-01-0.2366E-01-0.6522E-01
                     -0.7198E-01 0.7849E-01-0.2628     -1.000      0.000    

                     -0.5000     -1.000      3.000     -1.000      0.000    
                       0.000      9.100      9.200     -5000.     -4.000    
                       1.500      0.000      9.000      8.900     -5000.    

                      -4.000      0.000      0.000      9.200      9.000    
                      -5000.     -4.000      0.000      0.000      9.400    
                       8.800     -5000.     -2.000    

   51    320.27        3.842    -0.9479      3.341     -100.0     0.2624    
                     -0.7884      2.474     -100.0      2.257      1.000    
                       1.000     0.1000      2.400      0.000      0.000    
                      -1.500      0.000      0.000      0.000     -1.221    

                      -2.500      8654.     0.1251E+05 -483.9     -1451.    
                      -2.000     -4.000     -3.000     -5.300     -4.000    
                      -13.60     -2.675      1359.      0.000      3354.    

                       4764.      3323.      5073.      5329.      2500.    
                       4298.    -0.4892E-02-0.9315E-01  0.000    -0.5150E-01
                     -0.8335E-01-0.1448     0.3666E-01-0.1910     0.5754E-01

                     -0.7539     -1.000      0.000     0.1780     0.3619E-01
                      0.8541E-01-0.2985E-01-0.7237E-01-0.2366E-01-0.6522E-01
                     -0.7198E-01 0.7849E-01-0.2628     -1.000      0.000    

                     -0.5000     -1.000      3.000     -1.000      0.000    
                       0.000      9.100      9.200     -5000.     -4.000    
                       0.000      1.500      9.000      8.900     -5000.    

                      -4.000      0.000      0.000      9.200      9.000    
                      -5000.     -4.000      0.000      0.000      9.400    
                       8.800     -5000.     -2.000    

   52    324.94        3.842    -0.9479      3.341     -100.0     0.2624    
                     -0.7884      2.474     -100.0      2.257      1.000    
                       1.000     0.1000      2.400      0.000      0.000    
                      -1.500      0.000      0.000      0.000     -1.221    

                      -2.500      8654.     0.1251E+05 -483.9     -1451.    
                      -2.000     -4.000     -3.000     -5.300     -4.000    
                      -13.60     -2.675      1359.      0.000      3354.    

                       4764.      3323.      5073.      5329.      2500.    
                       4298.    -0.4892E-02-0.9315E-01  0.000    -0.5150E-01
                     -0.8335E-01-0.1448     0.3666E-01-0.1910     0.5754E-01

                     -0.7539     -1.000      0.000     0.1780     0.3619E-01
                      0.8541E-01-0.2985E-01-0.7237E-01-0.2366E-01-0.6522E-01
                     -0.7198E-01 0.7849E-01-0.2628     -1.000      0.000    

                     -0.5000     -1.000      3.000     -1.000      0.000    
                       0.000      9.100      9.200     -5000.     -4.000    
                       0.000      0.000      9.500      8.900     -5000.    

                      -4.000      0.000      0.000      9.200      9.000    
                      -5000.     -4.000      0.000      0.000      9.400    
                       8.800     -5000.     -2.000    

   53    326.06        3.842    -0.9479      3.341     -100.0     0.2624    
                     -0.7884      2.474     -100.0      2.257      1.000    
                       1.000     0.1000      2.400      0.000      0.000    
                      -1.500      0.000      0.000      0.000     -1.221    

                      -2.500      8654.     0.1251E+05 -483.9     -1451.    
                      -2.000     -4.000     -3.000     -5.300     -4.000    
                      -13.60     -2.675      1359.      0.000      3354.    

                       4764.      3323.      5073.      5329.      2500.    
                       4298.    -0.4892E-02-0.9315E-01  0.000    -0.5150E-01
                     -0.8335E-01-0.1448     0.3666E-01-0.1910     0.5754E-01

                     -0.7539     -1.000      0.000     0.1780     0.3619E-01
                      0.8541E-01-0.2985E-01-0.7237E-01-0.2366E-01-0.6522E-01
                     -0.7198E-01 0.7849E-01-0.2628     -1.000      0.000    

                     -0.5000     -1.000      3.000     -1.000      0.000    
                       0.000      9.100      9.200     -5000.     -4.000    
                       0.000      0.000      9.000      9.400     -5000.    

                      -4.000      0.000      0.000      9.200      9.000    
                      -5000.     -4.000      0.000      0.000      9.400    
                       8.800     -5000.     -2.000    

   54    322.06        3.842    -0.9479      3.341     -100.0     0.2624    
                     -0.7884      2.474     -100.0      2.257      1.000    
                       1.000     0.1000      2.400      0.000      0.000    
                      -1.500      0.000      0.000      0.000     -1.221    

                      -2.500      8654.     0.1251E+05 -483.9     -1451.    
                      -2.000     -4.000     -3.000     -5.300     -4.000    
                      -13.60     -2.675      1359.      0.000      3354.    

                       4764.      3323.      5073.      5329.      2500.    
                       4298.    -0.4892E-02-0.9315E-01  0.000    -0.5150E-01
                     -0.8335E-01-0.1448     0.3666E-01-0.1910     0.5754E-01

                     -0.7539     -1.000      0.000     0.1780     0.3619E-01
                      0.8541E-01-0.2985E-01-0.7237E-01-0.2366E-01-0.6522E-01
                     -0.7198E-01 0.7849E-01-0.2628     -1.000      0.000    

                     -0.5000     -1.000      3.000     -1.000      0.000    
                       0.000      9.100      9.200     -5000.     -4.000    
                       0.000      0.000      9.000      8.900      0.000    

                      -4.000      0.000      0.000      9.200      9.000    
                      -5000.     -4.000      0.000      0.000      9.400    
                       8.800     -5000.     -2.000    

   55    321.14        3.842    -0.9479      3.341     -100.0     0.2624    
                     -0.7884      2.474     -100.0      2.257      1.000    
                       1.000     0.1000      2.400      0.000      0.000    
                      -1.500      0.000      0.000      0.000     -1.221    

                      -2.500      8654.     0.1251E+05 -483.9     -1451.    
                      -2.000     -4.000     -3.000     -5.300     -4.000    
                      -13.60     -2.675      1359.      0.000      3354.    

                       4764.      3323.      5073.      5329.      2500.    
                       4298.    -0.4892E-02-0.9315E-01  0.000    -0.5150E-01
                     -0.8335E-01-0.1448     0.3666E-01-0.1910     0.5754E-01

                     -0.7539     -1.000      0.000     0.1780     0.3619E-01
                      0.8541E-01-0.2985E-01-0.7237E-01-0.2366E-01-0.6522E-01
                     -0.7198E-01 0.7849E-01-0.2628     -1.000      0.000    

                     -0.5000     -1.000      3.000     -1.000      0.000    
                       0.000      9.100      9.200     -5000.     -4.000    
                       0.000      0.000      9.000      8.900     -5000.    

                      -4.000      1.500      0.000      9.200      9.000    
                      -5000.     -4.000      0.000      0.000      9.400    
                       8.800     -5000.     -2.000    

   56    320.91        3.842    -0.9479      3.341     -100.0     0.2624    
                     -0.7884      2.474     -100.0      2.257      1.000    
                       1.000     0.1000      2.400      0.000      0.000    
                      -1.500      0.000      0.000      0.000     -1.221    

                      -2.500      8654.     0.1251E+05 -483.9     -1451.    
                      -2.000     -4.000     -3.000     -5.300     -4.000    
                      -13.60     -2.675      1359.      0.000      3354.    

                       4764.      3323.      5073.      5329.      2500.    
                       4298.    -0.4892E-02-0.9315E-01  0.000    -0.5150E-01
                     -0.8335E-01-0.1448     0.3666E-01-0.1910     0.5754E-01

                     -0.7539     -1.000      0.000     0.1780     0.3619E-01
                      0.8541E-01-0.2985E-01-0.7237E-01-0.2366E-01-0.6522E-01
                     -0.7198E-01 0.7849E-01-0.2628     -1.000      0.000    

                     -0.5000     -1.000      3.000     -1.000      0.000    
                       0.000      9.100      9.200     -5000.     -4.000    
                       0.000      0.000      9.000      8.900     -5000.    

                      -4.000      0.000      1.500      9.200      9.000    
                      -5000.     -4.000      0.000      0.000      9.400    
                       8.800     -5000.     -2.000    

   57    324.61        3.842    -0.9479      3.341     -100.0     0.2624    
                     -0.7884      2.474     -100.0      2.257      1.000    
                       1.000     0.1000      2.400      0.000      0.000    
                      -1.500      0.000      0.000      0.000     -1.221    

                      -2.500      8654.     0.1251E+05 -483.9     -1451.    
                      -2.000     -4.000     -3.000     -5.300     -4.000    
                      -13.60     -2.675      1359.      0.000      3354.    

                       4764.      3323.      5073.      5329.      2500.    
                       4298.    -0.4892E-02-0.9315E-01  0.000    -0.5150E-01
                     -0.8335E-01-0.1448     0.3666E-01-0.1910     0.5754E-01

                     -0.7539     -1.000      0.000     0.1780     0.3619E-01
                      0.8541E-01-0.2985E-01-0.7237E-01-0.2366E-01-0.6522E-01
                     -0.7198E-01 0.7849E-01-0.2628     -1.000      0.000    

                     -0.5000     -1.000      3.000     -1.000      0.000    
                       0.000      9.100      9.200     -5000.     -4.000    
                       0.000      0.000      9.000      8.900     -5000.    

                      -4.000      0.000      0.000      9.700      9.000    
                      -5000.     -4.000      0.000      0.000      9.400    
                       8.800     -5000.     -2.000    

   58    325.47        3.842    -0.9479      3.341     -100.0     0.2624    
                     -0.7884      2.474     -100.0      2.257      1.000    
                       1.000     0.1000      2.400      0.000      0.000    
                      -1.500      0.000      0.000      0.000     -1.221    

                      -2.500      8654.     0.1251E+05 -483.9     -1451.    
                      -2.000     -4.000     -3.000     -5.300     -4.000    
                      -13.60     -2.675      1359.      0.000      3354.    

                       4764.      3323.      5073.      5329.      2500.    
                       4298.    -0.4892E-02-0.9315E-01  0.000    -0.5150E-01
                     -0.8335E-01-0.1448     0.3666E-01-0.1910     0.5754E-01

                     -0.7539     -1.000      0.000     0.1780     0.3619E-01
                      0.8541E-01-0.2985E-01-0.7237E-01-0.2366E-01-0.6522E-01
                     -0.7198E-01 0.7849E-01-0.2628     -1.000      0.000    

                     -0.5000     -1.000      3.000     -1.000      0.000    
                       0.000      9.100      9.200     -5000.     -4.000    
                       0.000      0.000      9.000      8.900     -5000.    

                      -4.000      0.000      0.000      9.200      9.500    
                      -5000.     -4.000      0.000      0.000      9.400    
                       8.800     -5000.     -2.000    

   59    321.96        3.842    -0.9479      3.341     -100.0     0.2624    
                     -0.7884      2.474     -100.0      2.257      1.000    
                       1.000     0.1000      2.400      0.000      0.000    
                      -1.500      0.000      0.000      0.000     -1.221    

                      -2.500      8654.     0.1251E+05 -483.9     -1451.    
                      -2.000     -4.000     -3.000     -5.300     -4.000    
                      -13.60     -2.675      1359.      0.000      3354.    

                       4764.      3323.      5073.      5329.      2500.    
                       4298.    -0.4892E-02-0.9315E-01  0.000    -0.5150E-01
                     -0.8335E-01-0.1448     0.3666E-01-0.1910     0.5754E-01

                     -0.7539     -1.000      0.000     0.1780     0.3619E-01
                      0.8541E-01-0.2985E-01-0.7237E-01-0.2366E-01-0.6522E-01
                     -0.7198E-01 0.7849E-01-0.2628     -1.000      0.000    

                     -0.5000     -1.000      3.000     -1.000      0.000    
                       0.000      9.100      9.200     -5000.     -4.000    
                       0.000      0.000      9.000      8.900     -5000.    

                      -4.000      0.000      0.000      9.200      9.000    
                       0.000     -4.000      0.000      0.000      9.400    
                       8.800     -5000.     -2.000    

   60    321.98        3.842    -0.9479      3.341     -100.0     0.2624    
                     -0.7884      2.474     -100.0      2.257      1.000    
                       1.000     0.1000      2.400      0.000      0.000    
                      -1.500      0.000      0.000      0.000     -1.221    

                      -2.500      8654.     0.1251E+05 -483.9     -1451.    
                      -2.000     -4.000     -3.000     -5.300     -4.000    
                      -13.60     -2.675      1359.      0.000      3354.    

                       4764.      3323.      5073.      5329.      2500.    
                       4298.    -0.4892E-02-0.9315E-01  0.000    -0.5150E-01
                     -0.8335E-01-0.1448     0.3666E-01-0.1910     0.5754E-01

                     -0.7539     -1.000      0.000     0.1780     0.3619E-01
                      0.8541E-01-0.2985E-01-0.7237E-01-0.2366E-01-0.6522E-01
                     -0.7198E-01 0.7849E-01-0.2628     -1.000      0.000    

                     -0.5000     -1.000      3.000     -1.000      0.000    
                       0.000      9.100      9.200     -5000.     -4.000    
                       0.000      0.000      9.000      8.900     -5000.    

                      -4.000      0.000      0.000      9.200      9.000    
                      -5000.     -4.000      1.500      0.000      9.400    
                       8.800     -5000.     -2.000    

   61    321.31        3.842    -0.9479      3.341     -100.0     0.2624    
                     -0.7884      2.474     -100.0      2.257      1.000    
                       1.000     0.1000      2.400      0.000      0.000    
                      -1.500      0.000      0.000      0.000     -1.221    

                      -2.500      8654.     0.1251E+05 -483.9     -1451.    
                      -2.000     -4.000     -3.000     -5.300     -4.000    
                      -13.60     -2.675      1359.      0.000      3354.    

                       4764.      3323.      5073.      5329.      2500.    
                       4298.    -0.4892E-02-0.9315E-01  0.000    -0.5150E-01
                     -0.8335E-01-0.1448     0.3666E-01-0.1910     0.5754E-01

                     -0.7539     -1.000      0.000     0.1780     0.3619E-01
                      0.8541E-01-0.2985E-01-0.7237E-01-0.2366E-01-0.6522E-01
                     -0.7198E-01 0.7849E-01-0.2628     -1.000      0.000    

                     -0.5000     -1.000      3.000     -1.000      0.000    
                       0.000      9.100      9.200     -5000.     -4.000    
                       0.000      0.000      9.000      8.900     -5000.    

                      -4.000      0.000      0.000      9.200      9.000    
                      -5000.     -4.000      0.000      1.500      9.400    
                       8.800     -5000.     -2.000    

   62    324.17        3.842    -0.9479      3.341     -100.0     0.2624    
                     -0.7884      2.474     -100.0      2.257      1.000    
                       1.000     0.1000      2.400      0.000      0.000    
                      -1.500      0.000      0.000      0.000     -1.221    

                      -2.500      8654.     0.1251E+05 -483.9     -1451.    
                      -2.000     -4.000     -3.000     -5.300     -4.000    
                      -13.60     -2.675      1359.      0.000      3354.    

                       4764.      3323.      5073.      5329.      2500.    
                       4298.    -0.4892E-02-0.9315E-01  0.000    -0.5150E-01
                     -0.8335E-01-0.1448     0.3666E-01-0.1910     0.5754E-01

                     -0.7539     -1.000      0.000     0.1780     0.3619E-01
                      0.8541E-01-0.2985E-01-0.7237E-01-0.2366E-01-0.6522E-01
                     -0.7198E-01 0.7849E-01-0.2628     -1.000      0.000    

                     -0.5000     -1.000      3.000     -1.000      0.000    
                       0.000      9.100      9.200     -5000.     -4.000    
                       0.000      0.000      9.000      8.900     -5000.    

                      -4.000      0.000      0.000      9.200      9.000    
                      -5000.     -4.000      0.000      0.000      9.900    
                       8.800     -5000.     -2.000    

   63    325.18        3.842    -0.9479      3.341     -100.0     0.2624    
                     -0.7884      2.474     -100.0      2.257      1.000    
                       1.000     0.1000      2.400      0.000      0.000    
                      -1.500      0.000      0.000      0.000     -1.221    

                      -2.500      8654.     0.1251E+05 -483.9     -1451.    
                      -2.000     -4.000     -3.000     -5.300     -4.000    
                      -13.60     -2.675      1359.      0.000      3354.    

                       4764.      3323.      5073.      5329.      2500.    
                       4298.    -0.4892E-02-0.9315E-01  0.000    -0.5150E-01
                     -0.8335E-01-0.1448     0.3666E-01-0.1910     0.5754E-01

                     -0.7539     -1.000      0.000     0.1780     0.3619E-01
                      0.8541E-01-0.2985E-01-0.7237E-01-0.2366E-01-0.6522E-01
                     -0.7198E-01 0.7849E-01-0.2628     -1.000      0.000    

                     -0.5000     -1.000      3.000     -1.000      0.000    
                       0.000      9.100      9.200     -5000.     -4.000    
                       0.000      0.000      9.000      8.900     -5000.    

                      -4.000      0.000      0.000      9.200      9.000    
                      -5000.     -4.000      0.000      0.000      9.400    
                       9.300     -5000.     -2.000    

   64    321.57        3.842    -0.9479      3.341     -100.0     0.2624    
                     -0.7884      2.474     -100.0      2.257      1.000    
                       1.000     0.1000      2.400      0.000      0.000    
                      -1.500      0.000      0.000      0.000     -1.221    

                      -2.500      8654.     0.1251E+05 -483.9     -1451.    
                      -2.000     -4.000     -3.000     -5.300     -4.000    
                      -13.60     -2.675      1359.      0.000      3354.    

                       4764.      3323.      5073.      5329.      2500.    
                       4298.    -0.4892E-02-0.9315E-01  0.000    -0.5150E-01
                     -0.8335E-01-0.1448     0.3666E-01-0.1910     0.5754E-01

                     -0.7539     -1.000      0.000     0.1780     0.3619E-01
                      0.8541E-01-0.2985E-01-0.7237E-01-0.2366E-01-0.6522E-01
                     -0.7198E-01 0.7849E-01-0.2628     -1.000      0.000    

                     -0.5000     -1.000      3.000     -1.000      0.000    
                       0.000      9.100      9.200     -5000.     -4.000    
                       0.000      0.000      9.000      8.900     -5000.    

                      -4.000      0.000      0.000      9.200      9.000    
                      -5000.     -4.000      0.000      0.000      9.400    
                       8.800      0.000     -2.000    
 finished setting up initial simplex
 count number of function evaluations which here is neval=np1          64          64

beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    96.2856               127
loop is:        1
neval is:       64


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      127
neval,tstepnext:       64     127

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.228570      -1.47591      -142.109       142.109       320.952       463.061    
   2  0.709707     -0.342904      -33.0167       33.0167       320.493       353.509    
   3  0.151889      -1.88460      -181.460       181.460       320.290       501.751    
   4  0.456170E-01  -3.08747      -297.279       297.279       352.562       649.842    
   5  0.882557     -0.124932      -12.0291       12.0291       320.093       332.122    
   6  0.711292     -0.340672      -32.8018       32.8018       322.959       355.761    
   7  0.241669      -1.42019      -136.744       136.744       326.099       462.842    
   8  0.682871     -0.381450      -36.7281       36.7281       322.041       358.769    
   9  0.500657     -0.691834      -66.6136       66.6136       318.706       385.320    
  10  0.494633     -0.703939      -67.7791       67.7791       319.816       387.595    
  11  0.437126     -0.827535      -79.6797       79.6797       300.470       380.149    
  12  0.462981     -0.770069      -74.1466       74.1466       321.719       395.866    
  13  0.988878     -0.111840E-01  -1.07686       1.07686       326.229       327.306    
  14  0.878158     -0.129929      -12.5103       12.5103       318.584       331.094    
  15  0.825605     -0.191638      -18.4520       18.4520       320.415       338.867    
  16  0.966665     -0.339033E-01  -3.26440       3.26440       321.437       324.701    
  17  0.340930      -1.07608      -103.611       103.611       320.556       424.167    
  18  0.288920      -1.24161      -119.549       119.549       316.751       436.300    
  19  0.442843     -0.814539      -78.4284       78.4284       320.779       399.207    
  20  0.878635     -0.129386      -12.4580       12.4580       318.992       331.450    
  21  0.198777E-01  -3.91816      -377.262       377.262       320.952       698.214    
  22  0.315829      -1.15255      -110.974       110.974       319.349       430.323    
  23  0.208690      -1.56690      -150.870       150.870       324.389       475.259    
  24  0.849393     -0.163234      -15.7170       15.7170       315.962       331.679    
  25  0.945818     -0.557056E-01  -5.36364       5.36364       357.841       363.205    
  26  0.567839     -0.565917      -54.4896       54.4896       314.778       369.268    
  27  0.718388     -0.330745      -31.8460       31.8460       325.382       357.228    
  28  0.115406      -2.15930      -207.909       207.909       340.979       548.889    
  29  0.659869E-01  -2.71830      -261.733       261.733       319.401       581.134    
  30  0.171393      -1.76380      -169.828       169.828       366.704       536.532    
  31  0.161953      -1.82045      -175.283       175.283       322.257       497.540    
  32  0.455406     -0.786566      -75.7349       75.7349       324.833       400.568    
  33  0.788693     -0.237378      -22.8560       22.8560       336.634       359.490    
  34  0.157754      -1.84672      -177.812       177.812       328.180       505.992    
  35  0.126279      -2.06926      -199.240       199.240       335.383       534.622    
  36  0.646962     -0.435467      -41.9292       41.9292       323.311       365.241    
  37  0.730769     -0.313658      -30.2007       30.2007       326.333       356.533    
  38  0.443446E-01  -3.11577      -300.003       300.003       327.018       627.021    
  39  0.219048      -1.51847      -146.206       146.206       325.148       471.354    
  40  0.311223E-01  -3.46983      -334.095       334.095       337.725       671.819    
  41  0.864417     -0.145700      -14.0288       14.0288       323.034       337.063    
  42  0.372606     -0.987233      -95.0563       95.0563       326.285       421.341    
  43  0.599250E-01  -2.81466      -271.011       271.011       357.008       628.019    
  44  0.250528      -1.38418      -133.277       133.277       351.873       485.150    
  45  0.404968E-01  -3.20653      -308.743       308.743       345.376       654.119    
  46  0.792822     -0.232156      -22.3533       22.3533       319.515       341.868    
  47  0.826691     -0.190324      -18.3255       18.3255       324.826       343.151    
  48  0.258424      -1.35316      -130.289       130.289       326.643       456.933    
  49  0.713620     -0.337405      -32.4873       32.4873       321.004       353.491    
  50  0.936186     -0.659413E-01  -6.34919       6.34919       320.176       326.526    
  51  0.655367E-01  -2.72514      -262.392       262.392       320.267       582.659    
  52  0.178790      -1.72154      -165.760       165.760       324.938       490.698    
  53  0.110644E-01  -4.50403      -433.673       433.673       326.065       759.737    
  54  0.459577     -0.777448      -74.8570       74.8570       322.062       396.919    
  55  0.210706      -1.55729      -149.945       149.945       321.141       471.086    
  56  0.667378     -0.404399      -38.9378       38.9378       320.912       359.850    
  57  0.787749     -0.238575      -22.9713       22.9713       324.615       347.586    
  58  0.774339E-01  -2.55833      -246.330       246.330       325.466       571.796    
  59  0.154999      -1.86434      -179.509       179.509       321.964       501.473    
  60  0.510712     -0.671950      -64.6991       64.6991       321.980       386.679    
  61  0.628107     -0.465044      -44.7770       44.7770       321.315       366.092    
  62  0.850273     -0.162197      -15.6173       15.6173       324.169       339.787    
  63  0.355976      -1.03289      -99.4525       99.4525       325.176       424.628    
  64  0.531318     -0.632394      -60.8904       60.8904       321.570       382.461    
loop,thermsimp(1:2)        1   142.109       33.0167    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     66        319.50          0.86          1.10         23.11          0.04          0.04         25.15
Just calling func    0   0         25.15


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     67        316.39          0.88          1.10         23.01          0.18          0.04         25.20
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    316.39
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    96.2856               127
loop is:        1
neval is:       66
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        1      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    96.2856               127
loop is:        2
neval is:       66


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      127
neval,tstepnext:       66     127

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.352733      -1.04204      -100.334       100.334       321.437       421.771    
   2  0.440787     -0.819193      -78.8765       78.8765       320.176       399.053    
   3  0.685789     -0.377185      -36.3175       36.3175       326.229       362.546    
   4  0.673104     -0.395856      -38.1152       38.1152       318.584       356.699    
   5  0.655536     -0.422301      -40.6615       40.6615       318.992       359.654    
   6  0.422838     -0.860766      -82.8793       82.8793       315.962       398.841    
   7  0.300870      -1.20108      -115.646       115.646       320.093       435.740    
   8  0.776987     -0.252331      -24.2958       24.2958       323.034       347.330    
   9  0.170551      -1.76872      -170.302       170.302       320.415       490.718    
  10  0.587497     -0.531884      -51.2128       51.2128       324.169       375.382    
  11  0.250425      -1.38459      -133.316       133.316       319.515       452.831    
  12  0.776362E-01  -2.55572      -246.079       246.079       324.826       570.905    
  13  0.766647     -0.265729      -25.5859       25.5859       324.615       350.201    
  14  0.480193     -0.733568      -70.6320       70.6320       321.004       391.636    
  15  0.434643     -0.833231      -80.2281       80.2281       320.493       400.721    
  16  0.815924E-01  -2.50602      -241.293       241.293       322.959       564.253    
  17  0.724257E-01  -2.62519      -252.768       252.768       326.333       579.101    
  18  0.573795     -0.555483      -53.4850       53.4850       325.382       378.867    
  19  0.196096      -1.62915      -156.864       156.864       322.041       478.904    
  20  0.240673      -1.42432      -137.141       137.141       336.634       473.775    
  21  0.194228      -1.63872      -157.785       157.785       320.912       478.697    
  22  0.236387      -1.44229      -138.871       138.871       357.841       496.712    
  23  0.261662      -1.34070      -129.090       129.090       323.311       452.401    
  24  0.146321      -1.92195      -185.056       185.056       321.315       506.371    
  25  0.169637      -1.77410      -170.820       170.820       314.778       485.598    
  26  0.886717     -0.120229      -11.5763       11.5763       300.470       312.046    
  27  0.253412      -1.37274      -132.175       132.175       321.570       453.745    
  28  0.470820     -0.753279      -72.5299       72.5299       318.706       391.236    
  29  0.329871      -1.10905      -106.786       106.786       321.980       428.766    
  30  0.726784     -0.319126      -30.7272       30.7272       319.816       350.543    
  31  0.612351     -0.490450      -47.2233       47.2233       321.719       368.942    
  32  0.146573      -1.92023      -184.891       184.891       322.062       506.952    
  33  0.812633     -0.207476      -19.9769       19.9769       320.779       340.756    
  34  0.486789     -0.719925      -69.3184       69.3184       324.833       394.152    
  35  0.653508     -0.425400      -40.9599       40.9599       326.285       367.245    
  36  0.180127      -1.71409      -165.042       165.042       320.556       485.599    
  37  0.155218      -1.86292      -179.373       179.373       325.176       504.548    
  38  0.830615     -0.185589      -17.8695       17.8695       319.349       337.219    
  39  0.728345     -0.316980      -30.5206       30.5206       316.751       347.272    
  40  0.262318      -1.33820      -128.849       128.849       326.643       455.492    
  41  0.234222      -1.45148      -139.757       139.757       326.099       465.856    
  42  0.250201      -1.38549      -133.403       133.403       320.952       454.355    
  43  0.898433     -0.107103      -10.3125       10.3125       321.141       331.453    
  44  0.580277     -0.544250      -52.4035       52.4035       325.148       377.551    
  45  0.823617     -0.194050      -18.6842       18.6842       324.389       343.073    
  46  0.820676     -0.197627      -19.0286       19.0286       351.873       370.902    
  47  0.502494     -0.688171      -66.2609       66.2609       324.938       391.199    
  48  0.751016     -0.286329      -27.5693       27.5693       322.257       349.826    
  49  0.360461      -1.02037      -98.2470       98.2470       321.964       420.211    
  50  0.948712     -0.526497E-01  -5.06941       5.06941       320.290       325.360    
  51  0.452918     -0.792045      -76.2625       76.2625       328.180       404.442    
  52  0.182886      -1.69889      -163.579       163.579       335.383       498.962    
  53  0.986780     -0.133085E-01  -1.28142       1.28142       366.704       367.986    
  54  0.720276     -0.328121      -31.5933       31.5933       340.979       372.573    
  55  0.999574     -0.426396E-03 -0.410558E-01  0.410558E-01   325.466       325.507    
  56  0.573447     -0.556089      -53.5434       53.5434       319.401       372.944    
  57  0.441160E-01  -3.12093      -300.501       300.501       320.267       620.768    
  58  0.596470     -0.516726      -49.7532       49.7532       327.018       376.772    
  59  0.561679E-01  -2.87941      -277.246       277.246       357.008       634.253    
  60  0.664610     -0.408554      -39.3379       39.3379       352.562       391.900    
  61  0.875363     -0.133117      -12.8172       12.8172       345.376       358.194    
  62  0.969943     -0.305184E-01  -2.93848       2.93848       337.725       340.663    
  63  0.692714     -0.367138      -35.3501       35.3501       320.952       356.302    
  64  0.107969      -2.22591      -214.323       214.323       316.394       530.717    
loop,thermsimp(1:2)        2   100.334       78.8765    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     68        310.32          0.88          1.11         23.05          0.35          0.05         25.44
Just calling func    0   0         25.43


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     69        308.49          0.88          1.10         23.02          0.10          0.04         25.15
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    308.49
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    96.2856               127
loop is:        2
neval is:       68
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        2      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    96.2856               127
loop is:        3
neval is:       68


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      127
neval,tstepnext:       68     127

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.167898      -1.78440      -171.812       171.812       300.470       472.281    
   2  0.274399      -1.29317      -124.514       124.514       320.290       444.804    
   3  0.597410E-01  -2.81774      -271.307       271.307       325.466       596.773    
   4  0.283115E-01  -3.56449      -343.209       343.209       321.141       664.349    
   5  0.901069     -0.104174      -10.0304       10.0304       319.349       329.380    
   6  0.717939     -0.331371      -31.9062       31.9062       337.725       369.631    
   7  0.294866      -1.22123      -117.587       117.587       320.779       438.366    
   8  0.935651     -0.665127E-01  -6.40421       6.40421       324.389       330.793    
   9  0.314362      -1.15721      -111.423       111.423       316.751       428.174    
  10  0.807729     -0.213529      -20.5598       20.5598       323.034       343.594    
  11  0.757191     -0.278140      -26.7808       26.7808       322.257       349.038    
  12  0.508654     -0.675987      -65.0878       65.0878       324.615       389.703    
  13  0.722060     -0.325647      -31.3551       31.3551       319.816       351.171    
  14  0.424032     -0.857947      -82.6079       82.6079       320.952       403.560    
  15  0.786154     -0.240602      -23.1665       23.1665       318.584       341.750    
  16  0.399894     -0.916557      -88.2512       88.2512       345.376       433.628    
  17  0.757416     -0.277843      -26.7523       26.7523       318.992       345.745    
  18  0.637270     -0.450563      -43.3827       43.3827       326.229       369.611    
  19  0.586055     -0.534342      -51.4494       51.4494       326.285       377.734    
  20  0.821724     -0.196351      -18.9058       18.9058       366.704       385.610    
  21  0.921558     -0.816897E-01  -7.86554       7.86554       321.719       329.585    
  22  0.985596     -0.145083E-01  -1.39694       1.39694       351.873       353.270    
  23  0.257194      -1.35793      -130.749       130.749       340.979       471.728    
  24  0.921438E-01  -2.38440      -229.584       229.584       319.401       548.985    
  25  0.114653      -2.16584      -208.539       208.539       324.169       532.709    
  26  0.379827     -0.968040      -93.2083       93.2083       327.018       420.227    
  27  0.541451     -0.613503      -59.0714       59.0714       325.148       384.219    
  28  0.544274     -0.608302      -58.5707       58.5707       325.382       383.953    
  29  0.934365     -0.678883E-01  -6.53667       6.53667       324.938       331.475    
  30  0.266419E-01  -3.62527      -349.061       349.061       318.706       667.767    
  31  0.919572     -0.838466E-01  -8.07321       8.07321       321.004       329.077    
  32  0.864639     -0.145444      -14.0041       14.0041       352.562       366.567    
  33  0.341156      -1.07542      -103.547       103.547       324.833       428.380    
  34  0.803175     -0.219182      -21.1041       21.1041       315.962       337.066    
  35  0.699424     -0.357498      -34.4219       34.4219       320.176       354.598    
  36  0.223868E-01  -3.79928      -365.816       365.816       320.493       686.309    
  37  0.605689     -0.501389      -48.2765       48.2765       328.180       376.456    
  38  0.312349      -1.16363      -112.041       112.041       321.964       434.005    
  39  0.437501     -0.826675      -79.5969       79.5969       321.437       401.034    
  40  0.303330      -1.19293      -114.862       114.862       321.980       436.842    
  41  0.129735      -2.04226      -196.640       196.640       320.093       516.733    
  42  0.954352     -0.467224E-01  -4.49869       4.49869       323.311       327.810    
  43  0.519807     -0.654297      -62.9994       62.9994       319.515       382.514    
  44  0.950560     -0.507036E-01  -4.88202       4.88202       321.570       326.452    
  45  0.443941     -0.812064      -78.1900       78.1900       320.952       399.142    
  46  0.911446     -0.927229E-01  -8.92788       8.92788       326.643       335.571    
  47  0.782475     -0.245293      -23.6182       23.6182       326.099       349.717    
  48  0.412534     -0.885438      -85.2549       85.2549       336.634       421.889    
  49  0.843850     -0.169780      -16.3474       16.3474       320.912       337.259    
  50  0.149432      -1.90091      -183.031       183.031       322.041       505.071    
  51  0.292747      -1.22845      -118.282       118.282       314.778       433.060    
  52  0.579908E-02  -5.15006      -495.876       495.876       320.556       816.432    
  53  0.164431      -1.80526      -173.821       173.821       320.415       494.236    
  54  0.963795     -0.368765E-01  -3.55068       3.55068       357.841       361.392    
  55  0.536638     -0.622432      -59.9312       59.9312       335.383       395.314    
  56  0.231620      -1.46266      -140.833       140.833       325.176       466.009    
  57  0.452632E-01  -3.09526      -298.029       298.029       321.315       619.343    
  58  0.241294      -1.42174      -136.893       136.893       322.062       458.955    
  59  0.757653     -0.277529      -26.7220       26.7220       316.394       343.116    
  60  0.504715     -0.683762      -65.8364       65.8364       322.959       388.796    
  61  0.878562     -0.129469      -12.4660       12.4660       324.826       337.292    
  62  0.874452     -0.134158      -12.9175       12.9175       326.333       339.250    
  63  0.370953     -0.991680      -95.4844       95.4844       320.267       415.752    
  64  0.757717     -0.277446      -26.7140       26.7140       308.487       335.201    
loop,thermsimp(1:2)        3   171.812       124.514    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     70        319.44          0.89          1.10         23.02          0.12          0.05         25.17
Just calling func    0   0         25.17


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     71        318.87          0.88          1.10         23.01          0.11          0.04         25.13
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    318.87
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    96.2856               127
loop is:        3
neval is:       70
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        3      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    96.2856               127
loop is:        4
neval is:       70


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      127
neval,tstepnext:       70     127

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.883237     -0.124162      -11.9550       11.9550       321.570       333.525    
   2  0.114178      -2.16999      -208.939       208.939       323.311       532.250    
   3  0.217017      -1.52778      -147.103       147.103       321.004       468.107    
   4  0.138317      -1.97821      -190.473       190.473       319.349       509.822    
   5  0.832728     -0.183048      -17.6249       17.6249       321.719       339.344    
   6  0.390825     -0.939496      -90.4599       90.4599       324.389       414.849    
   7  0.283633      -1.26007      -121.327       121.327       324.938       446.265    
   8  0.725809     -0.320468      -30.8565       30.8565       308.487       339.343    
   9  0.506121     -0.680979      -65.5685       65.5685       326.643       392.212    
  10  0.216234      -1.53139      -147.451       147.451       315.962       463.413    
  11  0.637942     -0.449509      -43.2812       43.2812       320.912       364.193    
  12  0.536707     -0.622302      -59.9187       59.9187       324.826       384.744    
  13  0.231844      -1.46169      -140.740       140.740       326.333       467.072    
  14  0.491379     -0.710540      -68.4148       68.4148       318.584       386.998    
  15  0.825774     -0.191434      -18.4324       18.4324       316.394       334.827    
  16  0.671593     -0.398102      -38.3315       38.3315       323.034       361.366    
  17  0.549103     -0.599470      -57.7203       57.7203       318.992       376.713    
  18  0.659287     -0.416597      -40.1123       40.1123       322.257       362.369    
  19  0.205012      -1.58469      -152.582       152.582       326.099       478.681    
  20  0.400541E-02  -5.52011      -531.507       531.507       319.816       851.323    
  21  0.750831     -0.286575      -27.5930       27.5930       351.873       379.466    
  22  0.619921     -0.478162      -46.0401       46.0401       320.176       366.217    
  23  0.435226     -0.831889      -80.0989       80.0989       357.841       437.940    
  24  0.460974     -0.774414      -74.5649       74.5649       352.562       427.127    
  25  0.891582E-01  -2.41734      -232.755       232.755       326.229       558.984    
  26  0.589618E-01  -2.83087      -272.571       272.571       337.725       610.296    
  27  0.541391     -0.613613      -59.0821       59.0821       328.180       387.262    
  28  0.545108E-01  -2.90936      -280.129       280.129       326.285       606.414    
  29  0.744722     -0.294744      -28.3796       28.3796       319.515       347.894    
  30  0.712477     -0.339008      -32.6416       32.6416       325.382       358.023    
  31  0.563836     -0.572992      -55.1708       55.1708       325.148       380.319    
  32  0.161455      -1.82353      -175.579       175.579       366.704       542.283    
  33  0.640738     -0.445135      -42.8601       42.8601       322.959       365.820    
  34  0.157494      -1.84837      -177.971       177.971       324.615       502.586    
  35  0.695323     -0.363378      -34.9881       34.9881       335.383       370.371    
  36  0.792798     -0.232186      -22.3562       22.3562       320.952       343.308    
  37  0.940634     -0.612017E-01  -5.89284       5.89284       321.437       327.330    
  38  0.750008     -0.287672      -27.6986       27.6986       320.952       348.650    
  39  0.298939E-01  -3.51010      -337.972       337.972       320.267       658.239    
  40  0.633510     -0.456480      -43.9524       43.9524       327.018       370.971    
  41  0.465723     -0.764164      -73.5780       73.5780       336.634       410.212    
  42  0.916259     -0.874560E-01  -8.42075       8.42075       316.751       325.172    
  43  0.451376     -0.795456      -76.5909       76.5909       324.833       401.424    
  44  0.414090     -0.881672      -84.8923       84.8923       314.778       399.670    
  45  0.273092      -1.29795      -124.974       124.974       345.376       470.350    
  46  0.361379      -1.01783      -98.0021       98.0021       321.964       419.966    
  47  0.548848     -0.599934      -57.7649       57.7649       321.980       379.745    
  48  0.832309     -0.183552      -17.6734       17.6734       320.779       338.452    
  49  0.673017     -0.395985      -38.1276       38.1276       320.290       358.418    
  50  0.692516     -0.367425      -35.3777       35.3777       322.062       357.440    
  51  0.354468E-01  -3.33972      -321.567       321.567       325.176       646.743    
  52  0.987850     -0.122240E-01  -1.17699       1.17699       340.979       342.156    
  53  0.659676     -0.416007      -40.0554       40.0554       300.470       340.525    
  54  0.276145      -1.28683      -123.903       123.903       320.415       444.319    
  55  0.426927     -0.851141      -81.9526       81.9526       322.041       403.993    
  56  0.221817      -1.50590      -144.996       144.996       320.093       465.090    
  57  0.911956     -0.921634E-01  -8.87401       8.87401       324.169       333.043    
  58  0.791973     -0.233228      -22.4565       22.4565       319.401       341.857    
  59  0.805447     -0.216358      -20.8321       20.8321       325.466       346.298    
  60  0.887840     -0.118963      -11.4544       11.4544       321.315       332.769    
  61  0.978176     -0.220657E-01  -2.12460       2.12460       321.141       323.265    
  62  0.539899     -0.616372      -59.3478       59.3478       318.706       378.054    
  63  0.313742      -1.15918      -111.613       111.613       320.493       432.105    
  64  0.355768      -1.03348      -99.5088       99.5088       318.875       418.384    
loop,thermsimp(1:2)        4   11.9550       208.939    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     72        324.81          0.88          1.11         23.02          0.10          0.04         25.15
Just calling func    0   0         25.15


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     73        329.20          0.89          1.10         23.00          0.09          0.04         25.12
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    324.81
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    96.2856               127
loop is:        4
neval is:       72
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        4      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    96.2856               127
loop is:        5
neval is:       72


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      127
neval,tstepnext:       72     127

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.968189     -0.323278E-01  -3.11270       3.11270       321.141       324.253    
   2  0.384676     -0.955353      -91.9867       91.9867       316.751       408.738    
   3  0.472770     -0.749146      -72.1320       72.1320       321.437       393.569    
   4  0.131186      -2.03114      -195.569       195.569       321.315       516.884    
   5  0.387497     -0.948046      -91.2832       91.2832       324.169       415.452    
   6  0.474858     -0.744739      -71.7076       71.7076       321.570       393.278    
   7  0.654056     -0.424563      -40.8792       40.8792       316.394       357.273    
   8  0.375266     -0.980119      -94.3713       94.3713       320.779       415.150    
   9  0.605577     -0.501574      -48.2943       48.2943       308.487       356.781    
  10  0.485605     -0.722360      -69.5529       69.5529       321.719       391.272    
  11  0.503843     -0.685490      -66.0028       66.0028       300.470       366.472    
  12  0.374521     -0.982108      -94.5628       94.5628       319.401       413.964    
  13  0.955542E-01  -2.34806      -226.084       226.084       340.979       567.064    
  14  0.902567     -0.102512      -9.87043       9.87043       320.952       330.822    
  15  0.347215      -1.05781      -101.852       101.852       325.466       427.317    
  16  0.893138     -0.113014      -10.8816       10.8816       319.515       330.396    
  17  0.561145     -0.577776      -55.6314       55.6314       320.952       376.583    
  18  0.667287     -0.404536      -38.9509       38.9509       322.062       361.013    
  19  0.601102     -0.508991      -49.0085       49.0085       325.382       374.390    
  20  0.569928     -0.562245      -54.1361       54.1361       320.290       374.427    
  21  0.655926     -0.421708      -40.6044       40.6044       323.034       363.639    
  22  0.355892      -1.03313      -99.4752       99.4752       322.257       421.732    
  23  0.208013      -1.57015      -151.183       151.183       320.912       472.095    
  24  0.879772     -0.128093      -12.3335       12.3335       322.959       335.293    
  25  0.114206E-01  -4.47233      -430.621       430.621       320.176       750.798    
  26  0.950245     -0.510357E-01  -4.91400       4.91400       335.383       340.297    
  27  0.321268      -1.13548      -109.330       109.330       327.018       436.349    
  28  0.379005     -0.970207      -93.4169       93.4169       318.992       412.409    
  29  0.117960      -2.13741      -205.802       205.802       318.706       524.508    
  30  0.822558     -0.195337      -18.8081       18.8081       351.873       370.682    
  31  0.671085     -0.398860      -38.4045       38.4045       321.980       360.385    
  32  0.220279      -1.51286      -145.667       145.667       325.148       470.814    
  33  0.836335     -0.178727      -17.2088       17.2088       324.826       342.034    
  34  0.982442E-01  -2.32030      -223.411       223.411       318.584       541.995    
  35  0.912526     -0.915389E-01  -8.81387       8.81387       328.180       336.994    
  36  0.758802     -0.276015      -26.5762       26.5762       326.643       353.220    
  37  0.562651     -0.575096      -55.3734       55.3734       314.778       370.151    
  38  0.248142      -1.39375      -134.198       134.198       324.833       459.032    
  39  0.864881     -0.145163      -13.9771       13.9771       322.041       336.018    
  40  0.495151     -0.702893      -67.6785       67.6785       336.634       404.313    
  41  0.112352E-01  -4.48870      -432.197       432.197       324.389       756.586    
  42  0.745500     -0.293700      -28.2790       28.2790       318.875       347.154    
  43  0.405071     -0.903693      -87.0126       87.0126       321.964       408.976    
  44  0.617259     -0.482466      -46.4546       46.4546       352.562       399.017    
  45  0.992755     -0.727089E-02 -0.700082      0.700082       320.493       321.193    
  46  0.888739     -0.117952      -11.3571       11.3571       357.841       369.198    
  47  0.976701     -0.235748E-01  -2.26991       2.26991       320.415       322.685    
  48  0.461976     -0.772242      -74.3558       74.3558       324.938       399.294    
  49  0.150581      -1.89325      -182.293       182.293       315.962       498.255    
  50  0.726286E-01  -2.62240      -252.499       252.499       320.093       572.592    
  51  0.280837      -1.26998      -122.281       122.281       326.333       448.613    
  52  0.727959     -0.317510      -30.5716       30.5716       321.004       351.575    
  53  0.565225     -0.570532      -54.9340       54.9340       345.376       400.310    
  54  0.884775     -0.122422      -11.7875       11.7875       326.099       337.886    
  55  0.289837      -1.23844      -119.244       119.244       324.615       443.858    
  56  0.282389      -1.26447      -121.750       121.750       319.349       441.099    
  57  0.737455     -0.304550      -29.3238       29.3238       323.311       352.635    
  58  0.436668E-02  -5.43375      -523.192       523.192       366.704       889.896    
  59  0.809492     -0.211348      -20.3498       20.3498       326.229       346.579    
  60  0.957786E-01  -2.34572      -225.859       225.859       326.285       552.143    
  61  0.335750      -1.09139      -105.085       105.085       337.725       442.809    
  62  0.687327     -0.374945      -36.1018       36.1018       325.176       361.277    
  63  0.340103      -1.07851      -103.844       103.844       320.267       424.112    
  64  0.902520     -0.102564      -9.87543       9.87543       324.811       334.686    
loop,thermsimp(1:2)        5   3.11270       91.9867    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     74        309.63          0.88          1.11         23.02          0.11          0.04         25.16
Just calling func    0   0         25.16


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     75        336.07          0.87          1.10         22.99          0.09          0.05         25.10
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    309.63
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    96.2856               127
loop is:        5
neval is:       74
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        5      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    96.2856               127
loop is:        6
neval is:       74


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      127
neval,tstepnext:       74     127

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.806234     -0.215382      -20.7382       20.7382       320.493       341.231    
   2  0.337878      -1.08507      -104.477       104.477       320.415       424.892    
   3  0.930612     -0.719127E-01  -6.92415       6.92415       321.141       328.065    
   4  0.843645     -0.170024      -16.3708       16.3708       319.515       335.886    
   5  0.757799     -0.277337      -26.7035       26.7035       320.952       347.655    
   6  0.627925     -0.465335      -44.8051       44.8051       324.811       369.616    
   7  0.412314     -0.885971      -85.3062       85.3062       322.959       408.266    
   8  0.282274      -1.26488      -121.789       121.789       322.041       443.830    
   9  0.426609E-01  -3.15447      -303.730       303.730       328.180       631.910    
  10  0.484876     -0.723862      -69.6974       69.6974       326.099       395.796    
  11  0.372210     -0.988296      -95.1587       95.1587       335.383       430.541    
  12  0.740507     -0.300421      -28.9262       28.9262       324.826       353.752    
  13  0.361519      -1.01744      -97.9649       97.9649       326.229       424.194    
  14  0.421034     -0.865042      -83.2911       83.2911       318.875       402.166    
  15  0.780595     -0.247699      -23.8499       23.8499       321.004       344.854    
  16  0.758410     -0.276531      -26.6259       26.6259       323.311       349.937    
  17  0.522921E-01  -2.95091      -284.130       284.130       326.643       610.773    
  18  0.609673     -0.494833      -47.6453       47.6453       308.487       356.132    
  19  0.204029      -1.58949      -153.045       153.045       316.394       469.439    
  20  0.516385     -0.660902      -63.6353       63.6353       321.980       385.615    
  21  0.323918      -1.12726      -108.539       108.539       322.062       430.601    
  22  0.671820     -0.397765      -38.2991       38.2991       325.176       363.475    
  23  0.850344     -0.162114      -15.6092       15.6092       323.034       338.643    
  24  0.515631     -0.662364      -63.7760       63.7760       300.470       364.246    
  25  0.919408     -0.840249E-01  -8.09039       8.09039       357.841       365.931    
  26  0.516519     -0.660643      -63.6104       63.6104       314.778       378.388    
  27  0.986900     -0.131869E-01  -1.26970       1.26970       351.873       353.143    
  28  0.127351      -2.06081      -198.426       198.426       325.382       523.808    
  29  0.775028E-01  -2.55744      -246.245       246.245       320.290       566.535    
  30  0.778307     -0.250634      -24.1324       24.1324       320.952       345.084    
  31  0.548570     -0.600441      -57.8138       57.8138       321.719       379.533    
  32  0.191672      -1.65197      -159.061       159.061       321.570       480.631    
  33  0.593733     -0.521326      -50.1962       50.1962       321.437       371.633    
  34  0.612853     -0.489631      -47.1444       47.1444       352.562       399.707    
  35  0.872749     -0.136107      -13.1051       13.1051       324.938       338.043    
  36  0.291105E-01  -3.53666      -340.529       340.529       345.376       685.906    
  37  0.310804      -1.16859      -112.519       112.519       336.634       449.153    
  38  0.238051      -1.43527      -138.196       138.196       316.751       454.947    
  39  0.600295     -0.510334      -49.1378       49.1378       321.964       371.101    
  40  0.856575     -0.154813      -14.9063       14.9063       318.992       333.899    
  41  0.127990      -2.05580      -197.944       197.944       319.401       517.345    
  42  0.390396E-01  -3.24318      -312.271       312.271       320.779       633.050    
  43  0.469298E-01  -3.05910      -294.547       294.547       324.169       618.717    
  44  0.170208      -1.77073      -170.496       170.496       322.257       492.753    
  45  0.457801     -0.781320      -75.2298       75.2298       320.267       395.497    
  46  0.451589     -0.794982      -76.5453       76.5453       325.466       402.011    
  47  0.601844     -0.507757      -48.8897       48.8897       327.018       375.908    
  48  0.923684     -0.793857E-01  -7.64370       7.64370       319.349       326.993    
  49  0.113154      -2.17901      -209.807       209.807       337.725       547.531    
  50  0.652894     -0.426340      -41.0504       41.0504       324.615       365.665    
  51  0.600010     -0.510809      -49.1835       49.1835       326.333       375.516    
  52  0.768679     -0.263082      -25.3310       25.3310       324.833       350.164    
  53  0.999310     -0.690144E-03 -0.664509E-01  0.664509E-01   325.148       325.214    
  54  0.798907     -0.224511      -21.6171       21.6171       320.912       342.529    
  55  0.246243      -1.40144      -134.938       134.938       315.962       450.900    
  56  0.798424     -0.225115      -21.6754       21.6754       321.315       342.990    
  57  0.120926      -2.11257      -203.410       203.410       318.706       522.116    
  58  0.771675     -0.259192      -24.9565       24.9565       318.584       343.540    
  59  0.670629     -0.399540      -38.4699       38.4699       326.285       364.755    
  60  0.127505      -2.05960      -198.309       198.309       340.979       539.289    
  61  0.375387     -0.979799      -94.3404       94.3404       320.093       414.434    
  62  0.572534E-01  -2.86027      -275.403       275.403       320.176       595.579    
  63  0.358654      -1.02540      -98.7309       98.7309       324.389       423.120    
  64  0.903087     -0.101937      -9.81505       9.81505       309.634       319.449    
loop,thermsimp(1:2)        6   20.7382       104.477    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     76        317.68          0.88          1.11         23.02          0.13          0.04         25.19
Just calling func    0   0         25.19


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     77        315.12          0.88          1.10         23.02          0.10          0.04         25.14
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    315.12
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    96.2856               127
loop is:        6
neval is:       76
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        6      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    96.2856               127
loop is:        7
neval is:       76


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      127
neval,tstepnext:       76     127

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.117714      -2.13949      -206.002       206.002       309.634       515.637    
   2  0.421875     -0.863045      -83.0988       83.0988       325.148       408.247    
   3  0.700103     -0.356528      -34.3285       34.3285       319.349       353.678    
   4  0.209367      -1.56367      -150.559       150.559       321.141       471.699    
   5  0.117251      -2.14344      -206.382       206.382       318.992       525.374    
   6  0.898330     -0.107218      -10.3235       10.3235       319.515       329.838    
   7  0.209806      -1.56157      -150.357       150.357       324.938       475.295    
   8  0.917155     -0.864790E-01  -8.32668       8.32668       323.034       331.361    
   9  0.120514E-01  -4.41857      -425.445       425.445       320.493       745.938    
  10  0.189983      -1.66082      -159.913       159.913       320.912       480.825    
  11  0.257131      -1.35817      -130.772       130.772       321.315       452.087    
  12  0.913158E-01  -2.39343      -230.453       230.453       318.584       549.037    
  13  0.336531      -1.08906      -104.861       104.861       321.004       425.865    
  14  0.318351      -1.14460      -110.209       110.209       320.952       431.160    
  15  0.919606     -0.838101E-01  -8.06970       8.06970       320.952       329.022    
  16  0.719771E-01  -2.63141      -253.367       253.367       323.311       576.678    
  17  0.788730E-01  -2.53992      -244.557       244.557       324.833       569.390    
  18  0.905929     -0.987941E-01  -9.51244       9.51244       351.873       361.386    
  19  0.665501     -0.407215      -39.2090       39.2090       324.826       364.035    
  20  0.812159     -0.208059      -20.0331       20.0331       308.487       328.520    
  21  0.412726E-01  -3.18756      -306.916       306.916       325.176       632.091    
  22  0.256064      -1.36233      -131.172       131.172       300.470       431.642    
  23  0.277519      -1.28187      -123.425       123.425       326.285       449.710    
  24  0.279550      -1.27457      -122.723       122.723       324.615       447.338    
  25  0.857884     -0.153286      -14.7593       14.7593       357.841       372.600    
  26  0.205158      -1.58398      -152.514       152.514       324.811       477.325    
  27  0.482085     -0.729635      -70.2533       70.2533       321.964       392.217    
  28  0.494966E-01  -3.00585      -289.420       289.420       321.437       610.857    
  29  0.338791      -1.08237      -104.217       104.217       326.333       430.549    
  30  0.249491E-01  -3.69092      -355.382       355.382       327.018       682.400    
  31  0.480710     -0.732491      -70.5283       70.5283       314.778       385.306    
  32  0.908951E-01  -2.39805      -230.897       230.897       321.719       552.617    
  33  0.283223      -1.26152      -121.466       121.466       321.980       443.446    
  34  0.277734      -1.28109      -123.351       123.351       320.267       443.618    
  35  0.504407     -0.684372      -65.8952       65.8952       326.099       391.994    
  36  0.251881      -1.37880      -132.758       132.758       352.562       485.321    
  37  0.568193     -0.565294      -54.4296       54.4296       325.466       379.895    
  38  0.186135      -1.68128      -161.883       161.883       318.875       480.758    
  39  0.964582     -0.360604E-01  -3.47210       3.47210       322.959       326.432    
  40  0.493045     -0.707155      -68.0888       68.0888       320.093       388.182    
  41  0.477950     -0.738248      -71.0827       71.0827       324.389       395.472    
  42  0.114879      -2.16388      -208.350       208.350       326.229       534.579    
  43  0.324003      -1.12700      -108.514       108.514       320.415       428.929    
  44  0.720573     -0.327708      -31.5536       31.5536       335.383       366.936    
  45  0.934913     -0.673019E-01  -6.48021       6.48021       322.062       328.542    
  46  0.516467     -0.660745      -63.6202       63.6202       322.041       385.661    
  47  0.351513      -1.04551      -100.667       100.667       336.634       437.302    
  48  0.310221      -1.17047      -112.700       112.700       315.962       428.662    
  49  0.467571     -0.760204      -73.1966       73.1966       316.751       389.948    
  50  0.700644     -0.355756      -34.2541       34.2541       316.394       350.648    
  51  0.608579E-01  -2.79921      -269.524       269.524       321.570       591.094    
  52  0.360106      -1.02136      -98.3419       98.3419       322.257       420.599    
  53  0.355744      -1.03354      -99.5154       99.5154       319.401       418.916    
  54  0.356778      -1.03064      -99.2358       99.2358       318.706       417.942    
  55  0.209214      -1.56440      -150.629       150.629       325.382       476.011    
  56  0.513034     -0.667413      -64.2623       64.2623       340.979       405.242    
  57  0.131750      -2.02685      -195.156       195.156       337.725       532.881    
  58  0.860948     -0.149721      -14.4159       14.4159       320.290       334.706    
  59  0.245301      -1.40527      -135.307       135.307       320.176       455.483    
  60  0.411604     -0.887695      -85.4722       85.4722       326.643       412.115    
  61  0.444838     -0.810046      -77.9958       77.9958       324.169       402.165    
  62  0.173997      -1.74872      -168.376       168.376       328.180       496.556    
  63  0.616177     -0.484222      -46.6236       46.6236       320.779       367.403    
  64  0.794601     -0.229915      -22.1375       22.1375       315.117       337.254    
loop,thermsimp(1:2)        7   206.002       83.0988    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     78        317.80          0.89          1.10         23.02          0.12          0.05         25.18
Just calling func    0   0         25.18


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     79        316.64          0.88          1.10         23.02          0.11          0.05         25.16
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    316.64
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    96.2856               127
loop is:        7
neval is:       78
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        7      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    96.2856               127
loop is:        8
neval is:       78


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      127
neval,tstepnext:       78     127

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.487401     -0.718668      -69.1974       69.1974       322.959       392.157    
   2  0.568497     -0.564760      -54.3782       54.3782       308.487       362.865    
   3  0.632037E-01  -2.76139      -265.882       265.882       322.062       587.944    
   4  0.184325      -1.69105      -162.824       162.824       320.952       483.776    
   5  0.949772     -0.515332E-01  -4.96190       4.96190       319.515       324.477    
   6  0.512179     -0.669081      -64.4228       64.4228       323.034       387.457    
   7  0.573767     -0.555532      -53.4897       53.4897       320.290       373.780    
   8  0.590189     -0.527312      -50.7725       50.7725       315.117       365.889    
   9  0.323917      -1.12727      -108.540       108.540       316.394       424.934    
  10  0.246420E-01  -3.70330      -356.575       356.575       319.349       675.924    
  11  0.923153E-01  -2.38255      -229.405       229.405       351.873       581.278    
  12  0.236043      -1.44374      -139.012       139.012       324.826       463.837    
  13  0.885388     -0.121730      -11.7208       11.7208       335.383       347.103    
  14  0.617726     -0.481710      -46.3817       46.3817       320.779       367.161    
  15  0.349992      -1.04985      -101.085       101.085       357.841       458.926    
  16  0.892028     -0.114257      -11.0013       11.0013       325.466       336.467    
  17  0.382423     -0.961227      -92.5523       92.5523       314.778       407.330    
  18  0.850527     -0.161899      -15.5886       15.5886       322.041       337.629    
  19  0.653461     -0.425472      -40.9668       40.9668       320.093       361.060    
  20  0.413959     -0.881988      -84.9227       84.9227       316.751       401.674    
  21  0.807813     -0.213424      -20.5497       20.5497       326.099       346.648    
  22  0.348045      -1.05542      -101.622       101.622       321.964       423.586    
  23  0.435267     -0.831795      -80.0898       80.0898       324.389       404.479    
  24  0.434284     -0.834056      -80.3075       80.3075       324.169       404.477    
  25  0.983564     -0.165728E-01  -1.59573       1.59573       340.979       342.575    
  26  0.545923     -0.605277      -58.2794       58.2794       325.148       383.427    
  27  0.227140      -1.48219      -142.713       142.713       326.643       469.357    
  28  0.965085     -0.355395E-01  -3.42194       3.42194       318.706       322.128    
  29  0.183882      -1.69346      -163.056       163.056       319.401       482.457    
  30  0.187300E-02  -6.28022      -604.694       604.694       322.257       926.951    
  31  0.428736     -0.846914      -81.5456       81.5456       321.004       402.549    
  32  0.459764     -0.777041      -74.8179       74.8179       315.962       390.780    
  33  0.914786     -0.890649E-01  -8.57566       8.57566       320.415       328.991    
  34  0.872236     -0.136696      -13.1618       13.1618       326.333       339.494    
  35  0.789367     -0.236524      -22.7738       22.7738       320.952       343.726    
  36  0.619233E-01  -2.78186      -267.853       267.853       300.470       568.322    
  37  0.138004E-01  -4.28306      -412.397       412.397       336.634       749.031    
  38  0.287035      -1.24815      -120.179       120.179       321.980       442.159    
  39  0.138758E-01  -4.27761      -411.872       411.872       320.267       732.139    
  40  0.593330     -0.522005      -50.2615       50.2615       324.615       374.876    
  41  0.399445     -0.917679      -88.3592       88.3592       326.285       414.644    
  42  0.982947     -0.172001E-01  -1.65613       1.65613       321.315       322.971    
  43  0.259534      -1.34887      -129.876       129.876       320.176       450.053    
  44  0.816592E-01  -2.50520      -241.215       241.215       321.141       562.355    
  45  0.166083      -1.79527      -172.858       172.858       324.938       497.796    
  46  0.967370     -0.331741E-01  -3.19419       3.19419       325.382       328.576    
  47  0.371024     -0.991488      -95.4660       95.4660       324.811       420.277    
  48  0.941964     -0.597885E-01  -5.75677       5.75677       318.875       324.632    
  49  0.130219      -2.03854      -196.281       196.281       320.912       517.193    
  50  0.599455     -0.511734      -49.2726       49.2726       352.562       401.835    
  51  0.519323     -0.655230      -63.0892       63.0892       328.180       391.269    
  52  0.829175     -0.187324      -18.0366       18.0366       309.634       327.671    
  53  0.341525      -1.07433      -103.443       103.443       318.992       422.435    
  54  0.686480     -0.376178      -36.2205       36.2205       337.725       373.945    
  55  0.273157      -1.29771      -124.951       124.951       326.229       451.180    
  56  0.472999     -0.748662      -72.0853       72.0853       318.584       390.669    
  57  0.591611     -0.524905      -50.5408       50.5408       321.719       372.260    
  58  0.253673      -1.37171      -132.076       132.076       324.833       456.909    
  59  0.522398     -0.649326      -62.5207       62.5207       323.311       385.832    
  60  0.927744     -0.749995E-01  -7.22137       7.22137       321.570       328.792    
  61  0.470581     -0.753787      -72.5788       72.5788       321.437       394.016    
  62  0.365015      -1.00782      -97.0381       97.0381       325.176       422.214    
  63  0.732288     -0.311582      -30.0008       30.0008       327.018       357.019    
  64  0.536772E-01  -2.92477      -281.613       281.613       316.644       598.256    
loop,thermsimp(1:2)        8   69.1974       54.3782    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     80        315.50          0.88          1.11         23.02          0.12          0.04         25.16
Just calling func    0   0         25.17


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     81        313.29          0.88          1.10         23.02          0.08          0.05         25.13
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

   80    313.29        4.008     -1.040      3.249     -100.0     0.1705    
                     -0.8803      2.382     -100.0      2.165     0.9081    
                       1.059     0.8053E-02  2.400      0.000      0.000    
                      -1.408      0.000      0.000      0.000     -1.221    

                      -2.500      9052.     0.1309E+05 -595.1     -1785.    
                      -2.000     -4.656     -2.724     -5.024     -3.724    
                      -13.23     -2.583      1359.      0.000      3354.    

                       4764.      3323.      5073.      5329.      2500.    
                       4298.     0.4108E-01-0.4717E-01  0.000    -0.5522E-02
                     -0.3738E-01-0.9885E-01 0.8263E-01-0.1451     0.3056E-01

                      -3.725    -0.9081      0.000     0.2240     0.8216E-01
                      0.8541E-01 0.1613E-01-0.2639E-01 0.2231E-01-0.1924E-01
                     -0.2601E-01 0.1245    -0.1709    -0.9081      0.000    

                     -0.7384    -0.9081      3.547    -0.9081      0.000    
                       0.000      9.146      9.246     -4540.     -4.000    
                      0.1379     0.1379      9.046      8.770     -4540.    

                      -4.000     0.1379     0.1379      9.246      9.046    
                      -4540.     -4.000     0.1379     0.1379      9.446    
                       8.846     -4540.     -2.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    313.29
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    96.2856               127
loop is:        8
neval is:       80
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        8      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    96.2856               127
loop is:        9
neval is:       80


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      127
neval,tstepnext:       80     127

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.878288E-01  -2.43237      -234.202       234.202       318.706       552.908    
   2  0.192227      -1.64908      -158.782       158.782       321.315       480.097    
   3  0.872733     -0.136126      -13.1070       13.1070       319.515       332.622    
   4  0.444113     -0.811675      -78.1526       78.1526       318.875       397.027    
   5  0.194382      -1.63793      -157.709       157.709       309.634       467.343    
   6  0.358074      -1.02702      -98.8869       98.8869       325.382       424.269    
   7  0.461693     -0.772855      -74.4148       74.4148       321.570       395.985    
   8  0.180202      -1.71368      -165.002       165.002       320.415       485.418    
   9  0.944954     -0.566187E-01  -5.45157       5.45157       325.466       330.917    
  10  0.738770     -0.302769      -29.1523       29.1523       322.041       351.193    
  11  0.822491E-01  -2.49800      -240.522       240.522       326.333       566.854    
  12  0.313602      -1.15963      -111.656       111.656       340.979       452.635    
  13  0.978185     -0.220567E-01  -2.12374       2.12374       320.952       323.076    
  14  0.540591E-01  -2.91768      -280.930       280.930       326.099       607.029    
  15  0.872885     -0.135951      -13.0901       13.0901       335.383       348.473    
  16  0.209079      -1.56504      -150.691       150.691       327.018       477.709    
  17  0.789205E-01  -2.53931      -244.499       244.499       320.093       564.592    
  18  0.746404     -0.292489      -28.1624       28.1624       308.487       336.649    
  19  0.110219      -2.20529      -212.338       212.338       315.117       527.454    
  20  0.656016     -0.421570      -40.5911       40.5911       320.779       361.370    
  21  0.665675     -0.406953      -39.1837       39.1837       321.719       360.903    
  22  0.563292     -0.573957      -55.2637       55.2637       320.290       375.554    
  23  0.615044     -0.486062      -46.8007       46.8007       337.725       384.525    
  24  0.128081      -2.05509      -197.875       197.875       324.615       522.490    
  25  0.459916     -0.776711      -74.7860       74.7860       325.148       399.934    
  26  0.433297     -0.836332      -80.5267       80.5267       323.311       403.838    
  27  0.225675      -1.48866      -143.336       143.336       323.034       466.371    
  28  0.808805     -0.212197      -20.4315       20.4315       318.584       339.015    
  29  0.578238     -0.547770      -52.7423       52.7423       315.962       368.704    
  30  0.569572     -0.562871      -54.1963       54.1963       328.180       382.376    
  31  0.291272      -1.23350      -118.768       118.768       322.959       441.727    
  32  0.144426      -1.93499      -186.311       186.311       321.437       507.748    
  33  0.908321     -0.961572E-01  -9.25855       9.25855       316.751       326.010    
  34  0.593166     -0.522281      -50.2882       50.2882       352.562       402.851    
  35  0.327630      -1.11587      -107.442       107.442       321.004       428.446    
  36  0.823214E-01  -2.49712      -240.437       240.437       324.169       564.606    
  37  0.742531     -0.297691      -28.6633       28.6633       324.389       353.052    
  38  0.476201E-01  -3.04450      -293.141       293.141       314.778       607.919    
  39  0.183829      -1.69375      -163.084       163.084       326.285       489.368    
  40  0.417257     -0.874053      -84.1587       84.1587       324.811       408.969    
  41  0.647723E-01  -2.73688      -263.522       263.522       325.176       588.697    
  42  0.123950E-01  -4.39046      -422.738       422.738       318.992       741.730    
  43  0.281372E-01  -3.57066      -343.803       343.803       321.964       665.767    
  44  0.883044     -0.124380      -11.9760       11.9760       316.394       328.370    
  45  0.445413     -0.808754      -77.8713       77.8713       321.980       399.851    
  46  0.418101     -0.872031      -83.9640       83.9640       320.176       404.140    
  47  0.301534      -1.19887      -115.434       115.434       326.229       441.663    
  48  0.674500     -0.393783      -37.9156       37.9156       324.833       362.749    
  49  0.732783     -0.310905      -29.9357       29.9357       357.841       387.777    
  50  0.970355     -0.300929E-01  -2.89752       2.89752       324.826       327.723    
  51  0.981589     -0.185824E-01  -1.78922       1.78922       326.643       328.433    
  52  0.677253     -0.389711      -37.5235       37.5235       319.401       356.924    
  53  0.800731     -0.222230      -21.3976       21.3976       320.952       342.349    
  54  0.529544     -0.635738      -61.2124       61.2124       324.938       386.151    
  55  0.814619     -0.205035      -19.7419       19.7419       320.912       340.654    
  56  0.909218     -0.951702E-01  -9.16351       9.16351       321.141       330.304    
  57  0.269472      -1.31129      -126.258       126.258       300.470       426.728    
  58  0.166504      -1.79274      -172.615       172.615       351.873       524.488    
  59  0.328775      -1.11238      -107.106       107.106       322.062       429.168    
  60  0.333602      -1.09781      -105.703       105.703       316.644       422.347    
  61  0.213893      -1.54228      -148.499       148.499       319.349       467.848    
  62  0.401720     -0.911999      -87.8123       87.8123       320.267       408.080    
  63  0.453769     -0.790168      -76.0818       76.0818       336.634       412.716    
  64  0.649690E-01  -2.73384      -263.230       263.230       313.293       576.523    
loop,thermsimp(1:2)        9   234.202       158.782    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     82        316.20          0.88          1.11         23.02          0.12          0.04         25.16
Just calling func    0   0         25.17


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     83        314.64          0.88          1.10         23.05          0.09          0.04         25.16
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    314.64
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    96.2856               127
loop is:        9
neval is:       82
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        9      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    96.2856               127
loop is:       10
neval is:       82


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      127
neval,tstepnext:       82     127

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.611807     -0.491339      -47.3089       47.3089       320.952       368.261    
   2  0.877337     -0.130865      -12.6004       12.6004       316.751       329.352    
   3  0.821280     -0.196891      -18.9578       18.9578       324.826       343.783    
   4  0.989636     -0.104181E-01  -1.00311       1.00311       316.394       317.397    
   5  0.492813     -0.707625      -68.1340       68.1340       326.643       394.777    
   6  0.904083     -0.100835      -9.70892       9.70892       321.141       330.850    
   7  0.490620     -0.712086      -68.5636       68.5636       325.466       394.029    
   8  0.572439     -0.557850      -53.7129       53.7129       319.515       373.228    
   9  0.588753     -0.529749      -51.0072       51.0072       308.487       359.494    
  10  0.341799      -1.07353      -103.366       103.366       318.584       421.949    
  11  0.449605     -0.799385      -76.9693       76.9693       320.912       397.881    
  12  0.740720     -0.300132      -28.8984       28.8984       320.952       349.850    
  13  0.173164E-01  -4.05610      -390.544       390.544       335.383       725.926    
  14  0.828389     -0.188272      -18.1279       18.1279       322.041       340.168    
  15  0.110451      -2.20318      -212.135       212.135       324.389       536.524    
  16  0.646816     -0.435693      -41.9510       41.9510       319.401       361.352    
  17  0.857676     -0.153529      -14.7826       14.7826       321.719       336.502    
  18  0.691202E-02  -4.97449      -478.972       478.972       320.779       799.751    
  19  0.530885     -0.633210      -60.9690       60.9690       324.833       385.802    
  20  0.742957     -0.297117      -28.6081       28.6081       315.962       344.570    
  21  0.883526E-01  -2.42642      -233.629       233.629       320.290       553.920    
  22  0.599138     -0.512263      -49.3235       49.3235       328.180       377.503    
  23  0.476407     -0.741482      -71.3940       71.3940       337.725       409.119    
  24  0.509994E-01  -2.97594      -286.540       286.540       324.938       611.478    
  25  0.669768     -0.400824      -38.5936       38.5936       357.841       396.435    
  26  0.874430     -0.134183      -12.9199       12.9199       321.570       334.490    
  27  0.830739     -0.185440      -17.8552       17.8552       318.875       336.730    
  28  0.166673      -1.79172      -172.517       172.517       321.980       494.497    
  29  0.578742     -0.546898      -52.6584       52.6584       325.148       377.806    
  30  0.433531     -0.835791      -80.4746       80.4746       352.562       433.037    
  31  0.979127     -0.210935E-01  -2.03100       2.03100       323.311       325.342    
  32  0.310252      -1.17037      -112.690       112.690       320.176       432.866    
  33  0.686879     -0.375597      -36.1646       36.1646       320.267       356.432    
  34  0.243104      -1.41427      -136.173       136.173       324.811       460.984    
  35  0.459407     -0.777818      -74.8927       74.8927       336.634       411.527    
  36  0.332163      -1.10213      -106.119       106.119       316.644       422.763    
  37  0.512243     -0.668956      -64.4108       64.4108       325.382       389.793    
  38  0.323240      -1.12936      -108.741       108.741       300.470       409.211    
  39  0.667455     -0.404284      -38.9267       38.9267       321.004       359.930    
  40  0.460037     -0.776449      -74.7608       74.7608       322.062       396.823    
  41  0.227415      -1.48098      -142.597       142.597       326.229       468.825    
  42  0.636494     -0.451780      -43.4999       43.4999       322.959       366.459    
  43  0.432078     -0.839149      -80.7979       80.7979       340.979       421.777    
  44  0.609015     -0.495913      -47.7492       47.7492       323.034       370.783    
  45  0.427755     -0.849205      -81.7661       81.7661       309.634       391.400    
  46  0.496712     -0.699745      -67.3754       67.3754       319.349       386.725    
  47  0.295308      -1.21974      -117.443       117.443       327.018       444.461    
  48  0.928979     -0.736692E-01  -7.09328       7.09328       321.315       328.408    
  49  0.245696E-01  -3.70625      -356.858       356.858       320.415       677.273    
  50  0.833617E-01  -2.48457      -239.228       239.228       326.285       565.513    
  51  0.499690     -0.693767      -66.7998       66.7998       321.437       388.237    
  52  0.320552      -1.13771      -109.545       109.545       324.615       434.160    
  53  0.151030E-01  -4.19286      -403.712       403.712       351.873       755.585    
  54  0.551054     -0.595922      -57.3787       57.3787       315.117       372.495    
  55  0.786630     -0.239997      -23.1082       23.1082       318.706       341.814    
  56  0.793760E-01  -2.53356      -243.945       243.945       320.093       564.038    
  57  0.456771     -0.783574      -75.4469       75.4469       324.169       399.616    
  58  0.613263     -0.488962      -47.0799       47.0799       326.333       373.413    
  59  0.407581     -0.897515      -86.4178       86.4178       313.293       399.711    
  60  0.214329      -1.54024      -148.303       148.303       325.176       473.479    
  61  0.543052     -0.610551      -58.7872       58.7872       326.099       384.886    
  62  0.861407     -0.149188      -14.3646       14.3646       314.778       329.143    
  63  0.727563     -0.318055      -30.6241       30.6241       321.964       352.588    
  64  0.954867     -0.461830E-01  -4.44675       4.44675       314.636       319.083    
loop,thermsimp(1:2)       10   47.3089       12.6004    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     84        316.25          0.88          1.11         23.04          0.27          0.05         25.35
Just calling func    0   0         25.35


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     85        314.39          0.88          1.10         23.05          0.09          0.04         25.16
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    314.39
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    96.2856               127
loop is:       10
neval is:       84
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       10      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    96.2856               127
loop is:       11
neval is:       84


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      127
neval,tstepnext:       84     127

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.356780      -1.03064      -99.2355       99.2355       316.394       415.630    
   2  0.318207      -1.14505      -110.252       110.252       314.636       424.889    
   3  0.410972E-01  -3.19181      -307.326       307.326       323.311       630.637    
   4  0.217948      -1.52350      -146.691       146.691       321.315       468.005    
   5  0.460755     -0.774888      -74.6105       74.6105       314.778       389.388    
   6  0.694214     -0.364975      -35.1418       35.1418       316.751       351.893    
   7  0.237764      -1.43648      -138.312       138.312       321.141       459.453    
   8  0.635477     -0.453379      -43.6538       43.6538       321.570       365.224    
   9  0.882831E-01  -2.42721      -233.705       233.705       321.719       555.424    
  10  0.889613     -0.116969      -11.2624       11.2624       318.875       330.137    
  11  0.236395      -1.44225      -138.868       138.868       322.041       460.908    
  12  0.785560     -0.241359      -23.2394       23.2394       318.706       341.945    
  13  0.253594      -1.37202      -132.106       132.106       324.826       456.931    
  14  0.767743     -0.264300      -25.4483       25.4483       315.962       341.410    
  15  0.425111     -0.855405      -82.3632       82.3632       320.952       403.315    
  16  0.334680E-01  -3.39717      -327.098       327.098       321.964       649.062    
  17  0.737903     -0.303943      -29.2653       29.2653       320.267       349.533    
  18  0.530906     -0.633170      -60.9651       60.9651       308.487       369.452    
  19  0.811772     -0.208536      -20.0790       20.0790       321.004       341.083    
  20  0.781494     -0.246548      -23.7390       23.7390       319.401       343.140    
  21  0.668871     -0.402164      -38.7226       38.7226       322.959       361.682    
  22  0.609633     -0.494898      -47.6515       47.6515       320.952       368.603    
  23  0.732795E-01  -2.61347      -251.640       251.640       323.034       574.674    
  24  0.999755     -0.244962E-03 -0.235863E-01  0.235863E-01   315.117       315.140    
  25  0.556911     -0.585350      -56.3608       56.3608       319.515       375.875    
  26  0.381942     -0.962485      -92.6734       92.6734       326.333       419.006    
  27  0.230973      -1.46546      -141.102       141.102       328.180       469.282    
  28  0.791084     -0.234351      -22.5647       22.5647       325.148       347.712    
  29  0.122039      -2.10341      -202.528       202.528       326.099       528.627    
  30  0.411383     -0.888231      -85.5238       85.5238       324.833       410.357    
  31  0.753656     -0.282819      -27.2314       27.2314       319.349       346.581    
  32  0.846821     -0.166266      -16.0090       16.0090       321.437       337.446    
  33  0.577745     -0.548622      -52.8244       52.8244       325.382       378.206    
  34  0.859903     -0.150936      -14.5329       14.5329       309.634       324.167    
  35  0.915816     -0.879395E-01  -8.46731       8.46731       325.466       333.933    
  36  0.220499      -1.51186      -145.570       145.570       326.643       472.214    
  37  0.539962     -0.616256      -59.3366       59.3366       357.841       417.178    
  38  0.810725     -0.209827      -20.2033       20.2033       322.062       342.265    
  39  0.901567     -0.103621      -9.97718       9.97718       320.912       330.889    
  40  0.196148      -1.62888      -156.838       156.838       324.169       481.007    
  41  0.413437     -0.883250      -85.0442       85.0442       313.293       398.337    
  42  0.192892      -1.64562      -158.450       158.450       337.725       496.174    
  43  0.194290      -1.63840      -157.755       157.755       300.470       458.224    
  44  0.988313     -0.117563E-01  -1.13196       1.13196       336.634       337.766    
  45  0.917980     -0.855792E-01  -8.24004       8.24004       340.979       349.219    
  46  0.136083      -1.99449      -192.040       192.040       318.584       510.624    
  47  0.847126     -0.165905      -15.9743       15.9743       316.644       332.618    
  48  0.513003     -0.667474      -64.2681       64.2681       320.176       384.445    
  49  0.562161     -0.575967      -55.4573       55.4573       352.562       408.020    
  50  0.926079     -0.767957E-01  -7.39431       7.39431       324.615       332.009    
  51  0.890313     -0.116182      -11.1866       11.1866       327.018       338.205    
  52  0.857665     -0.153542      -14.7838       14.7838       324.811       339.595    
  53  0.599877     -0.511031      -49.2049       49.2049       326.229       375.434    
  54  0.835330     -0.179929      -17.3245       17.3245       325.176       342.500    
  55  0.323336      -1.12906      -108.713       108.713       321.980       430.693    
  56  0.305042      -1.18731      -114.320       114.320       324.389       438.709    
  57  0.980883     -0.193016E-01  -1.85847       1.85847       320.290       322.149    
  58  0.129682      -2.04267      -196.680       196.680       320.093       516.773    
  59  0.738352     -0.303335      -29.2068       29.2068       326.285       355.491    
  60  0.383117     -0.959416      -92.3779       92.3779       324.938       417.316    
  61  0.524900     -0.644547      -62.0606       62.0606       320.415       382.476    
  62  0.594829     -0.519481      -50.0185       50.0185       335.383       385.401    
  63  0.596925     -0.515963      -49.6798       49.6798       351.873       401.553    
  64  0.462523     -0.771060      -74.2419       74.2419       314.391       388.633    
loop,thermsimp(1:2)       11   99.2355       110.252    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     86        316.13          0.88          1.11         23.03          0.10          0.04         25.16
Just calling func    0   0         25.16


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    316.13
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    96.2856               127
loop is:       11
neval is:       85
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       11      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    96.2856               127
loop is:       12
neval is:       85


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      127
neval,tstepnext:       85     127

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.759790E-01  -2.57730      -248.157       248.157       315.117       563.273    
   2  0.804470     -0.217571      -20.9490       20.9490       320.290       341.239    
   3  0.984017     -0.161120E-01  -1.55135       1.55135       309.634       311.186    
   4  0.587639     -0.531643      -51.1895       51.1895       318.875       370.064    
   5  0.523810     -0.646626      -62.2607       62.2607       320.912       383.173    
   6  0.930607     -0.719181E-01  -6.92467       6.92467       324.615       331.539    
   7  0.360114E-01  -3.32392      -320.046       320.046       316.644       636.689    
   8  0.963815     -0.368556E-01  -3.54866       3.54866       325.466       329.014    
   9  0.201264E-01  -3.90572      -376.065       376.065       321.437       697.501    
  10  0.954897     -0.461522E-01  -4.44379       4.44379       336.634       341.078    
  11  0.374160     -0.983071      -94.6556       94.6556       327.018       421.674    
  12  0.174967      -1.74316      -167.841       167.841       324.811       492.652    
  13  0.381618     -0.963335      -92.7552       92.7552       321.004       413.759    
  14  0.191097      -1.65498      -159.350       159.350       315.962       475.312    
  15  0.425287     -0.854991      -82.3233       82.3233       318.706       401.029    
  16  0.426180     -0.852893      -82.1213       82.1213       322.062       404.183    
  17  0.615671     -0.485042      -46.7026       46.7026       325.176       371.878    
  18  0.787264     -0.239192      -23.0307       23.0307       319.401       342.432    
  19  0.812636     -0.207472      -19.9766       19.9766       319.349       339.326    
  20  0.917241E-01  -2.38897      -230.023       230.023       325.148       555.171    
  21  0.671310     -0.398525      -38.3722       38.3722       340.979       379.352    
  22  0.548174     -0.601162      -57.8832       57.8832       320.267       378.151    
  23  0.134851      -2.00359      -192.916       192.916       316.751       509.668    
  24  0.373236     -0.985545      -94.8938       94.8938       326.285       421.178    
  25  0.578774     -0.546843      -52.6531       52.6531       322.959       375.613    
  26  0.910021     -0.942872E-01  -9.07849       9.07849       321.570       330.649    
  27  0.192323      -1.64858      -158.734       158.734       320.952       479.686    
  28  0.366342      -1.00419      -96.6888       96.6888       308.487       405.176    
  29  0.686994     -0.375430      -36.1485       36.1485       326.229       362.377    
  30  0.486551     -0.720414      -69.3655       69.3655       319.515       388.880    
  31  0.256801      -1.35945      -130.896       130.896       325.382       456.278    
  32  0.284977      -1.25535      -120.872       120.872       320.415       441.287    
  33  0.903072     -0.101953      -9.81656       9.81656       320.176       329.993    
  34  0.226450      -1.48523      -143.006       143.006       335.383       478.389    
  35  0.446078     -0.807261      -77.7275       77.7275       314.391       392.119    
  36  0.152634      -1.87971      -180.989       180.989       314.778       495.767    
  37  0.511955     -0.669518      -64.4650       64.4650       313.293       377.758    
  38  0.513138     -0.667210      -64.2427       64.2427       351.873       416.116    
  39  0.637309     -0.450501      -43.3767       43.3767       320.952       364.329    
  40  0.861477     -0.149107      -14.3568       14.3568       352.562       366.919    
  41  0.817364     -0.201671      -19.4180       19.4180       324.833       344.251    
  42  0.793820     -0.230898      -22.2321       22.2321       316.394       338.626    
  43  0.253309      -1.37315      -132.214       132.214       357.841       490.055    
  44  0.702532     -0.353065      -33.9950       33.9950       324.938       358.933    
  45  0.822324     -0.195620      -18.8354       18.8354       326.333       345.168    
  46  0.720485     -0.327831      -31.5654       31.5654       314.636       346.202    
  47  0.881589     -0.126029      -12.1348       12.1348       321.980       334.115    
  48  0.584479     -0.537035      -51.7087       51.7087       324.389       376.098    
  49  0.697197     -0.360688      -34.7290       34.7290       324.826       359.555    
  50  0.320931      -1.13653      -109.431       109.431       300.470       409.901    
  51  0.780071     -0.248371      -23.9145       23.9145       321.141       345.055    
  52  0.318322E-01  -3.44728      -331.923       331.923       322.041       653.964    
  53  0.693387     -0.366167      -35.2566       35.2566       321.315       356.571    
  54  0.332128      -1.10223      -106.129       106.129       328.180       434.309    
  55  0.891883E-01  -2.41701      -232.723       232.723       326.643       559.366    
  56  0.960735     -0.400567E-01  -3.85689       3.85689       324.169       328.026    
  57  0.726634     -0.319332      -30.7471       30.7471       337.725       368.472    
  58  0.867850     -0.141737      -13.6472       13.6472       318.584       332.231    
  59  0.960075     -0.407444E-01  -3.92310       3.92310       320.093       324.016    
  60  0.303374E-01  -3.49537      -336.554       336.554       326.099       662.653    
  61  0.159557      -1.83535      -176.718       176.718       321.719       498.437    
  62  0.487506     -0.718453      -69.1766       69.1766       323.034       392.211    
  63  0.978612E-01  -2.32420      -223.787       223.787       323.311       547.099    
  64  0.405010     -0.903843      -87.0271       87.0271       316.129       403.156    
loop,thermsimp(1:2)       12   248.157       20.9490    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     87        319.58          0.88          1.11         23.02          0.12          0.05         25.16
Just calling func    0   0         25.16


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     88        319.31          0.88          1.10         23.04          0.09          0.04         25.15
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    319.31
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    96.2856               127
loop is:       12
neval is:       87
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       12      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    96.2856               127
loop is:       13
neval is:       87


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      127
neval,tstepnext:       87     127

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.872435     -0.136467      -13.1398       13.1398       309.634       322.774    
   2  0.311340      -1.16687      -112.353       112.353       320.093       432.446    
   3  0.293828      -1.22476      -117.927       117.927       324.169       442.096    
   4  0.586668     -0.533296      -51.3487       51.3487       325.466       376.814    
   5  0.360311      -1.02079      -98.2872       98.2872       320.176       418.464    
   6  0.315643      -1.15314      -111.031       111.031       321.570       432.601    
   7  0.481464     -0.730923      -70.3773       70.3773       324.615       394.992    
   8  0.720279     -0.328116      -31.5929       31.5929       318.584       350.177    
   9  0.551471     -0.595166      -57.3059       57.3059       321.980       379.286    
  10  0.524434     -0.645435      -62.1461       62.1461       316.394       378.540    
  11  0.781600     -0.246412      -23.7259       23.7259       319.349       343.075    
  12  0.353648      -1.03945      -100.084       100.084       336.634       436.719    
  13  0.451044     -0.796190      -76.6616       76.6616       320.290       396.952    
  14  0.325353      -1.12284      -108.114       108.114       319.401       427.515    
  15  0.312157      -1.16425      -112.100       112.100       324.833       436.933    
  16  0.432418     -0.838362      -80.7222       80.7222       321.141       401.863    
  17  0.296543      -1.21556      -117.041       117.041       326.333       443.374    
  18  0.705416     -0.348967      -33.6005       33.6005       314.636       348.237    
  19  0.146505      -1.92069      -184.935       184.935       321.315       506.250    
  20  0.471608     -0.751607      -72.3689       72.3689       324.938       397.307    
  21  0.633095     -0.457134      -44.0154       44.0154       324.826       368.841    
  22  0.754855     -0.281230      -27.0784       27.0784       326.229       353.307    
  23  0.444501E-01  -3.11339      -299.774       299.774       320.952       620.726    
  24  0.160973      -1.82652      -175.867       175.867       352.562       528.430    
  25  0.943694     -0.579536E-01  -5.58009       5.58009       337.725       343.305    
  26  0.187304      -1.67502      -161.281       161.281       318.875       480.155    
  27  0.840922     -0.173257      -16.6821       16.6821       325.176       341.858    
  28  0.888648     -0.118054      -11.3669       11.3669       322.959       334.326    
  29  0.920614E-01  -2.38530      -229.670       229.670       324.389       554.059    
  30  0.906493     -0.981722E-01  -9.45257       9.45257       313.293       322.745    
  31  0.221761      -1.50616      -145.021       145.021       320.267       465.289    
  32  0.248725      -1.39141      -133.972       133.972       340.979       474.952    
  33  0.315928      -1.15224      -110.944       110.944       320.912       431.856    
  34  0.949967     -0.513283E-01  -4.94218       4.94218       319.515       324.457    
  35  0.802748     -0.219715      -21.1554       21.1554       314.391       335.547    
  36  0.558987     -0.581628      -56.0024       56.0024       323.034       379.037    
  37  0.638133     -0.449209      -43.2523       43.2523       318.706       361.958    
  38  0.637852     -0.449648      -43.2946       43.2946       316.129       359.424    
  39  0.382908     -0.959961      -92.4304       92.4304       322.062       414.492    
  40  0.982834     -0.173149E-01  -1.66718       1.66718       308.487       310.154    
  41  0.497022     -0.699120      -67.3152       67.3152       300.470       367.785    
  42  0.263620      -1.33325      -128.372       128.372       321.004       449.376    
  43  0.296939      -1.21423      -116.913       116.913       351.873       468.786    
  44  0.784161     -0.243141      -23.4110       23.4110       326.285       349.696    
  45  0.545321     -0.606380      -58.3856       58.3856       327.018       385.404    
  46  0.770080     -0.261260      -25.1556       25.1556       328.180       353.335    
  47  0.358755      -1.02511      -98.7037       98.7037       320.415       419.119    
  48  0.325126      -1.12354      -108.181       108.181       325.382       433.563    
  49  0.599396     -0.511832      -49.2821       49.2821       315.962       365.244    
  50  0.323708      -1.12791      -108.602       108.602       335.383       443.984    
  51  0.329142      -1.11127      -106.999       106.999       320.952       427.951    
  52  0.685661     -0.377371      -36.3354       36.3354       357.841       394.176    
  53  0.360361      -1.02065      -98.2736       98.2736       324.811       423.084    
  54  0.665281     -0.407545      -39.2407       39.2407       314.778       354.019    
  55  0.983321     -0.168196E-01  -1.61949       1.61949       321.719       323.339    
  56  0.644247     -0.439672      -42.3341       42.3341       316.751       359.085    
  57  0.735645     -0.307008      -29.5604       29.5604       323.311       352.872    
  58  0.680276     -0.385257      -37.0947       37.0947       325.148       362.242    
  59  0.864073     -0.146098      -14.0671       14.0671       326.643       340.710    
  60  0.788785     -0.237262      -22.8449       22.8449       315.117       337.961    
  61  0.429383     -0.845405      -81.4003       81.4003       316.644       398.044    
  62  0.798857     -0.224573      -21.6231       21.6231       322.041       343.664    
  63  0.946983     -0.544737E-01  -5.24503       5.24503       326.099       331.344    
  64  0.229664      -1.47114      -141.649       141.649       319.307       460.956    
loop,thermsimp(1:2)       13   13.1398       112.353    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     89        316.15          0.88          1.10         23.05          0.07          0.05         25.16
Just calling func    0   0         25.15


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     90        314.11          0.87          1.10         23.08          0.05          0.04         25.14
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    314.11
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    96.2856               127
loop is:       13
neval is:       89
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       13      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    96.2856               127
loop is:       14
neval is:       89


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      127
neval,tstepnext:       89     127

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.344597      -1.06538      -102.581       102.581       308.487       411.067    
   2  0.267720      -1.31781      -126.886       126.886       313.293       440.179    
   3  0.279825      -1.27359      -122.629       122.629       309.634       432.263    
   4  0.281095      -1.26906      -122.192       122.192       321.719       443.912    
   5  0.245867      -1.40297      -135.085       135.085       319.515       454.600    
   6  0.914239     -0.896636E-01  -8.63331       8.63331       326.099       334.732    
   7  0.180116      -1.71415      -165.048       165.048       322.959       488.008    
   8  0.567917     -0.565780      -54.4765       54.4765       314.391       368.868    
   9  0.431941     -0.839465      -80.8284       80.8284       315.117       395.945    
  10  0.877920     -0.130199      -12.5363       12.5363       326.643       339.180    
  11  0.280355      -1.27170      -122.446       122.446       325.176       447.622    
  12  0.486947     -0.719601      -69.2871       69.2871       319.349       388.636    
  13  0.216546      -1.52995      -147.312       147.312       337.725       485.037    
  14  0.483718E-02  -5.33142      -513.339       513.339       322.041       835.380    
  15  0.785152E-03  -7.14963      -688.406       688.406       314.636       1003.04    
  16  0.300781      -1.20137      -115.675       115.675       326.285       441.959    
  17  0.869691     -0.139618      -13.4432       13.4432       318.584       332.027    
  18  0.694261E-01  -2.66749      -256.841       256.841       323.311       580.152    
  19  0.635475     -0.453382      -43.6542       43.6542       326.229       369.883    
  20  0.894977     -0.110958      -10.6836       10.6836       328.180       338.863    
  21  0.442267     -0.815841      -78.5537       78.5537       314.778       393.332    
  22  0.283362      -1.26103      -121.419       121.419       316.751       438.170    
  23  0.518611     -0.656601      -63.2212       63.2212       316.129       379.350    
  24  0.858122E-01  -2.45559      -236.438       236.438       318.706       555.144    
  25  0.461153     -0.774026      -74.5276       74.5276       325.148       399.675    
  26  0.180026      -1.71465      -165.096       165.096       315.962       481.058    
  27  0.446938E-01  -3.10792      -299.248       299.248       300.470       599.717    
  28  0.152352      -1.88156      -181.167       181.167       324.826       505.993    
  29  0.163937E-01  -4.11086      -395.816       395.816       325.466       721.282    
  30  0.721347     -0.326635      -31.4502       31.4502       316.394       347.844    
  31  0.813323     -0.206626      -19.8951       19.8951       323.034       342.929    
  32  0.569343     -0.563273      -54.2350       54.2350       321.980       376.215    
  33  0.275899      -1.28772      -123.989       123.989       327.018       451.007    
  34  0.933187     -0.691492E-01  -6.65807       6.65807       357.841       364.499    
  35  0.716570     -0.333279      -32.0899       32.0899       324.615       356.705    
  36  0.405413     -0.902848      -86.9312       86.9312       320.290       407.222    
  37  0.907528     -0.970314E-01  -9.34272       9.34272       324.938       334.281    
  38  0.554651     -0.589416      -56.7522       56.7522       316.644       373.396    
  39  0.419962     -0.867592      -83.5365       83.5365       321.141       404.677    
  40  0.824173     -0.193375      -18.6192       18.6192       322.062       340.681    
  41  0.865647     -0.144278      -13.8919       13.8919       320.176       334.068    
  42  0.300944      -1.20083      -115.623       115.623       320.415       436.038    
  43  0.339688      -1.07973      -103.962       103.962       324.811       428.773    
  44  0.217032      -1.52771      -147.097       147.097       319.401       466.498    
  45  0.792618E-01  -2.53500      -244.084       244.084       320.952       565.036    
  46  0.997677     -0.232582E-02 -0.223943      0.223943       320.912       321.136    
  47  0.174239      -1.74733      -168.242       168.242       320.093       488.336    
  48  0.834084     -0.181422      -17.4683       17.4683       321.570       339.039    
  49  0.324404      -1.12577      -108.395       108.395       325.382       433.777    
  50  0.927598     -0.751564E-01  -7.23648       7.23648       336.634       343.871    
  51  0.981384     -0.187911E-01  -1.80931       1.80931       324.833       326.642    
  52  0.849105     -0.163572      -15.7496       15.7496       324.169       339.919    
  53  0.148698      -1.90584      -183.505       183.505       326.333       509.837    
  54  0.389930     -0.941789      -90.6807       90.6807       335.383       426.063    
  55  0.183568      -1.69517      -163.220       163.220       321.004       484.224    
  56  0.661220     -0.413669      -39.8303       39.8303       319.307       359.137    
  57  0.242183      -1.41806      -136.539       136.539       320.267       456.806    
  58  0.182262      -1.70231      -163.908       163.908       351.873       515.781    
  59  0.299801      -1.20464      -115.989       115.989       340.979       456.969    
  60  0.950117     -0.511698E-01  -4.92691       4.92691       318.875       323.802    
  61  0.184593      -1.68960      -162.684       162.684       321.315       483.999    
  62  0.730970     -0.313382      -30.1742       30.1742       352.562       382.737    
  63  0.753232E-01  -2.58597      -248.991       248.991       324.389       573.380    
  64  0.501460     -0.690231      -66.4592       66.4592       314.110       380.570    
loop,thermsimp(1:2)       14   102.581       126.886    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     91        309.58          0.88          1.11         23.06          0.05          0.05         25.15
Just calling func    0   0         25.15


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     92        335.56          0.87          1.11         23.12          0.00          0.05         25.14
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    309.58
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    96.2856               127
loop is:       14
neval is:       91
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       14      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    96.2856               127
loop is:       15
neval is:       91


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      127
neval,tstepnext:       91     127

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.229949      -1.46990      -141.530       141.530       320.912       462.442    
   2  0.322822      -1.13066      -108.866       108.866       318.875       427.741    
   3  0.327586      -1.11601      -107.455       107.455       324.833       432.288    
   4  0.799078     -0.224296      -21.5965       21.5965       318.584       340.180    
   5  0.698072     -0.359433      -34.6082       34.6082       320.176       354.785    
   6  0.733871     -0.309421      -29.7928       29.7928       324.938       354.731    
   7  0.823872     -0.193740      -18.6544       18.6544       326.099       344.753    
   8  0.800045     -0.223087      -21.4801       21.4801       328.180       349.660    
   9  0.162010      -1.82010      -175.249       175.249       321.570       496.819    
  10  0.113138      -2.17915      -209.820       209.820       326.643       536.464    
  11  0.973966     -0.263784E-01  -2.53986       2.53986       324.169       326.709    
  12  0.998107     -0.189521E-02 -0.182481      0.182481       322.062       322.244    
  13  0.631351     -0.459893      -44.2811       44.2811       323.034       367.315    
  14  0.698229     -0.359208      -34.5866       34.5866       336.634       371.221    
  15  0.359252      -1.02373      -98.5705       98.5705       316.394       414.965    
  16  0.936266     -0.658562E-01  -6.34100       6.34100       324.615       330.956    
  17  0.843107     -0.170662      -16.4323       16.4323       319.307       335.739    
  18  0.181284      -1.70769      -164.426       164.426       357.841       522.267    
  19  0.354246      -1.03777      -99.9218       99.9218       314.391       414.313    
  20  0.981540     -0.186324E-01  -1.79403       1.79403       326.229       328.023    
  21  0.582284E-01  -2.84338      -273.777       273.777       316.644       590.420    
  22  0.935088     -0.671143E-01  -6.46214       6.46214       321.980       328.442    
  23  0.682144     -0.382515      -36.8306       36.8306       316.129       352.960    
  24  0.441439     -0.817715      -78.7341       78.7341       314.110       392.845    
  25  0.325829      -1.12138      -107.973       107.973       352.562       460.535    
  26  0.956968E-01  -2.34657      -225.941       225.941       319.349       545.290    
  27  0.465124E-01  -3.06804      -295.408       295.408       314.778       610.186    
  28  0.645503     -0.437726      -42.1467       42.1467       315.117       357.263    
  29  0.184751      -1.68875      -162.602       162.602       325.148       487.750    
  30  0.676303     -0.391115      -37.6587       37.6587       321.141       358.799    
  31  0.408248     -0.895880      -86.2603       86.2603       320.290       406.551    
  32  0.215511      -1.53474      -147.774       147.774       308.487       456.260    
  33  0.762109     -0.271666      -26.1575       26.1575       335.383       361.540    
  34  0.445022     -0.809632      -77.9558       77.9558       324.811       402.767    
  35  0.667113     -0.404797      -38.9761       38.9761       309.634       348.610    
  36  0.995785     -0.422376E-02 -0.406687      0.406687       325.382       325.789    
  37  0.278840      -1.27712      -122.968       122.968       320.415       443.383    
  38  0.624255     -0.471196      -45.3694       45.3694       316.751       362.121    
  39  0.368212     -0.999097      -96.1986       96.1986       313.293       409.492    
  40  0.330266      -1.10786      -106.671       106.671       326.285       432.955    
  41  0.969155     -0.313304E-01  -3.01667       3.01667       321.719       324.736    
  42  0.686816     -0.375688      -36.1733       36.1733       325.176       361.349    
  43  0.201053      -1.60419      -154.460       154.460       327.018       481.478    
  44  0.481166     -0.731544      -70.4371       70.4371       319.515       389.952    
  45  0.992829     -0.719725E-02 -0.692991      0.692991       320.267       320.960    
  46  0.665697     -0.406921      -39.1806       39.1806       340.979       380.160    
  47  0.991934E-02  -4.61327      -444.191       444.191       319.401       763.592    
  48  0.211644      -1.55285      -149.517       149.517       315.962       465.479    
  49  0.908243E-01  -2.39883      -230.973       230.973       321.315       552.287    
  50  0.643762     -0.440426      -42.4067       42.4067       321.004       363.410    
  51  0.568794E-01  -2.86682      -276.034       276.034       337.725       613.758    
  52  0.159466      -1.83592      -176.773       176.773       322.959       499.732    
  53  0.918851     -0.846310E-01  -8.14874       8.14874       320.093       328.242    
  54  0.865178     -0.144820      -13.9441       13.9441       324.826       338.770    
  55  0.826009     -0.191150      -18.4050       18.4050       326.333       344.738    
  56  0.665816E-02  -5.01191      -482.575       482.575       351.873       834.448    
  57  0.998155     -0.184716E-02 -0.177855      0.177855       318.706       318.884    
  58  0.875957E-01  -2.43502      -234.458       234.458       320.952       555.409    
  59  0.546955     -0.603388      -58.0975       58.0975       324.389       382.486    
  60  0.953933     -0.471617E-01  -4.54099       4.54099       323.311       327.852    
  61  0.131488      -2.02884      -195.348       195.348       300.470       495.817    
  62  0.415197     -0.879003      -84.6353       84.6353       325.466       410.101    
  63  0.543800E-02  -5.21434      -502.066       502.066       322.041       824.107    
  64  0.821907     -0.196128      -18.8843       18.8843       309.584       328.468    
loop,thermsimp(1:2)       15   141.530       108.866    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     93        316.44          0.88          1.11         23.03          0.12          0.04         25.17
Just calling func    0   0         25.17


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     94        314.09          0.88          1.10         23.07          0.05          0.04         25.14
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    314.09
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    96.2856               127
loop is:       15
neval is:       93
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       15      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    96.2856               127
loop is:       16
neval is:       93


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      127
neval,tstepnext:       93     127

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.557805     -0.583747      -56.2064       56.2064       318.706       374.912    
   2  0.850944     -0.161409      -15.5414       15.5414       320.267       335.809    
   3  0.343999      -1.06712      -102.748       102.748       322.062       424.810    
   4  0.481777E-02  -5.33544      -513.726       513.726       321.719       835.445    
   5  0.146991      -1.91738      -184.616       184.616       325.382       509.998    
   6  0.545677     -0.605728      -58.3228       58.3228       324.169       382.492    
   7  0.761940     -0.271888      -26.1789       26.1789       323.311       349.490    
   8  0.944477     -0.571238E-01  -5.50020       5.50020       326.229       331.729    
   9  0.965249     -0.353688E-01  -3.40550       3.40550       320.093       323.499    
  10  0.634176     -0.455429      -43.8513       43.8513       321.980       365.831    
  11  0.793205     -0.231673      -22.3068       22.3068       309.584       331.891    
  12  0.743605     -0.296246      -28.5242       28.5242       324.615       353.139    
  13  0.983069E-01  -2.31966      -223.350       223.350       319.307       542.657    
  14  0.618437     -0.480560      -46.2710       46.2710       324.826       371.097    
  15  0.429182     -0.845875      -81.4455       81.4455       318.584       400.029    
  16  0.771528     -0.259382      -24.9747       24.9747       326.333       351.307    
  17  0.218286      -1.52195      -146.542       146.542       326.099       472.640    
  18  0.556408     -0.586254      -56.4478       56.4478       309.634       366.082    
  19  0.526292     -0.641899      -61.8056       61.8056       328.180       389.985    
  20  0.665532     -0.407169      -39.2045       39.2045       316.129       355.334    
  21  0.261756      -1.34034      -129.056       129.056       324.938       453.994    
  22  0.975508     -0.247971E-01  -2.38760       2.38760       320.176       322.564    
  23  0.257613      -1.35630      -130.592       130.592       315.117       445.708    
  24  0.981555E-01  -2.32120      -223.498       223.498       321.141       544.639    
  25  0.955054     -0.459870E-01  -4.42788       4.42788       325.176       329.604    
  26  0.887906     -0.118890      -11.4474       11.4474       335.383       346.830    
  27  0.407043     -0.898837      -86.5450       86.5450       316.751       403.296    
  28  0.876870     -0.131396      -12.6516       12.6516       321.004       333.655    
  29  0.957152     -0.437935E-01  -4.21669       4.21669       323.034       327.251    
  30  0.827730     -0.189068      -18.2045       18.2045       336.634       354.839    
  31  0.289027      -1.24124      -119.513       119.513       340.979       460.493    
  32  0.125230      -2.07760      -200.043       200.043       324.389       524.432    
  33  0.242443      -1.41699      -136.436       136.436       319.515       455.950    
  34  0.654103     -0.424490      -40.8723       40.8723       314.110       354.983    
  35  0.811871     -0.208414      -20.0672       20.0672       324.811       344.878    
  36  0.145201E-01  -4.23222      -407.502       407.502       320.290       727.792    
  37  0.344449      -1.06581      -102.622       102.622       313.293       415.915    
  38  0.265532      -1.32602      -127.676       127.676       325.466       453.142    
  39  0.811851     -0.208438      -20.0696       20.0696       314.391       334.461    
  40  0.983290E-01  -2.31944      -223.328       223.328       316.394       539.722    
  41  0.347314      -1.05753      -101.825       101.825       318.875       420.699    
  42  0.923773     -0.792888E-01  -7.63436       7.63436       324.833       332.468    
  43  0.690375     -0.370520      -35.6757       35.6757       326.285       361.960    
  44  0.227523      -1.48051      -142.551       142.551       320.415       462.967    
  45  0.652275     -0.427289      -41.1417       41.1417       308.487       349.628    
  46  0.669640     -0.401014      -38.6119       38.6119       352.562       391.174    
  47  0.288804      -1.24201      -119.587       119.587       320.912       440.499    
  48  0.404648     -0.904738      -87.1132       87.1132       315.962       403.075    
  49  0.371042     -0.991440      -95.4613       95.4613       327.018       422.480    
  50  0.308424      -1.17628      -113.259       113.259       325.148       438.407    
  51  0.911221     -0.929703E-01  -8.95170       8.95170       300.470       309.421    
  52  0.615436     -0.485425      -46.7394       46.7394       321.570       368.310    
  53  0.780328     -0.248041      -23.8827       23.8827       322.959       346.842    
  54  0.127539      -2.05933      -198.284       198.284       357.841       556.125    
  55  0.709081     -0.343786      -33.1016       33.1016       326.643       359.745    
  56  0.974925     -0.253942E-01  -2.44510       2.44510       319.349       321.794    
  57  0.834943     -0.180392      -17.3691       17.3691       321.315       338.684    
  58  0.696274     -0.362013      -34.8566       34.8566       320.952       355.808    
  59  0.623965     -0.471660      -45.4141       45.4141       316.644       362.058    
  60  0.620467     -0.477282      -45.9554       45.9554       314.778       360.733    
  61  0.983840E-01  -2.31888      -223.274       223.274       337.725       560.999    
  62  0.452904     -0.792074      -76.2653       76.2653       319.401       395.666    
  63  0.731276     -0.312965      -30.1340       30.1340       322.041       352.175    
  64  0.136630      -1.99048      -191.654       191.654       314.090       505.744    
loop,thermsimp(1:2)       16   56.2064       15.5414    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     95        313.59          0.88          1.11         23.02          0.11          0.05         25.17
Just calling func    0   0         25.17


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     96        307.21          0.86          1.09         23.05          0.09          0.04         25.12
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    307.21
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    96.2856               127
loop is:       16
neval is:       95
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       16      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    96.2856               127
loop is:       17
neval is:       95


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      127
neval,tstepnext:       95     127

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.739792     -0.301387      -29.0192       29.0192       300.470       329.489    
   2  0.527958     -0.638738      -61.5012       61.5012       319.349       380.851    
   3  0.326119      -1.12049      -107.887       107.887       320.176       428.064    
   4  0.647061     -0.435314      -41.9145       41.9145       320.093       362.008    
   5  0.419805     -0.867966      -83.5726       83.5726       323.034       406.607    
   6  0.218417      -1.52135      -146.484       146.484       325.176       471.659    
   7  0.168864      -1.77866      -171.260       171.260       326.229       497.488    
   8  0.761417     -0.272575      -26.2450       26.2450       309.584       335.829    
   9  0.383989     -0.957143      -92.1590       92.1590       324.833       416.992    
  10  0.104774      -2.25595      -217.216       217.216       321.004       538.219    
  11  0.167912      -1.78432      -171.804       171.804       314.391       486.195    
  12  0.997930     -0.207190E-02 -0.199494      0.199494       320.267       320.467    
  13  0.493294     -0.706650      -68.0402       68.0402       321.315       389.355    
  14  0.483048     -0.727639      -70.0612       70.0612       324.811       394.872    
  15  0.715967     -0.334121      -32.1711       32.1711       335.383       367.554    
  16  0.595423E-01  -2.82107      -271.628       271.628       322.959       594.588    
  17  0.636569     -0.451662      -43.4885       43.4885       323.311       366.800    
  18  0.482980     -0.727779      -70.0746       70.0746       308.487       378.561    
  19  0.500121     -0.692905      -66.7168       66.7168       326.333       393.049    
  20  0.426980     -0.851018      -81.9407       81.9407       322.041       403.981    
  21  0.546576     -0.604082      -58.1644       58.1644       324.615       382.779    
  22  0.142720      -1.94687      -187.456       187.456       336.634       524.090    
  23  0.473622     -0.747346      -71.9586       71.9586       314.110       386.069    
  24  0.892718E-01  -2.41607      -232.633       232.633       316.129       548.762    
  25  0.660659     -0.414518      -39.9120       39.9120       320.952       360.864    
  26  0.328755      -1.11244      -107.112       107.112       326.643       433.756    
  27  0.544150     -0.608530      -58.5927       58.5927       314.778       373.371    
  28  0.199068      -1.61411      -155.416       155.416       326.285       481.700    
  29  0.685070     -0.378234      -36.4185       36.4185       316.644       353.062    
  30  0.500258     -0.692632      -66.6904       66.6904       321.980       388.671    
  31  0.130607      -2.03556      -195.995       195.995       309.634       505.630    
  32  0.982013E-01  -2.32074      -223.453       223.453       321.570       545.024    
  33  0.581494E-01  -2.84474      -273.907       273.907       324.826       598.733    
  34  0.841391     -0.172699      -16.6284       16.6284       318.706       335.335    
  35  0.838937E-01  -2.47820      -238.615       238.615       324.169       562.785    
  36  0.729848     -0.314919      -30.3222       30.3222       328.180       358.502    
  37  0.748292     -0.289962      -27.9192       27.9192       352.562       380.482    
  38  0.229216      -1.47309      -141.837       141.837       319.401       461.238    
  39  0.710713     -0.341487      -32.8803       32.8803       318.584       351.464    
  40  0.511506     -0.670395      -64.5494       64.5494       315.962       380.511    
  41  0.106756      -2.23721      -215.411       215.411       316.751       532.162    
  42  0.583466     -0.538770      -51.8758       51.8758       313.293       365.169    
  43  0.993140E-01  -2.30947      -222.369       222.369       318.875       541.243    
  44  0.461224     -0.773871      -74.5126       74.5126       327.018       401.531    
  45  0.574465     -0.554316      -53.3726       53.3726       322.062       375.434    
  46  0.715977     -0.334107      -32.1697       32.1697       325.148       357.317    
  47  0.877584     -0.130583      -12.5732       12.5732       320.912       333.485    
  48  0.492354     -0.708558      -68.2239       68.2239       315.117       383.340    
  49  0.874926     -0.133616      -12.8653       12.8653       325.466       338.331    
  50  0.800367     -0.222685      -21.4413       21.4413       324.938       346.380    
  51  0.507308     -0.678636      -65.3429       65.3429       319.515       384.858    
  52  0.727831     -0.317686      -30.5886       30.5886       340.979       371.568    
  53  0.899777E-01  -2.40819      -231.874       231.874       320.415       552.290    
  54  0.392780     -0.934505      -89.9794       89.9794       326.099       416.078    
  55  0.585301     -0.535629      -51.5733       51.5733       314.090       365.663    
  56  0.522884     -0.648395      -62.4311       62.4311       325.382       387.813    
  57  0.559213     -0.581225      -55.9635       55.9635       324.389       380.352    
  58  0.116989      -2.14568      -206.598       206.598       316.394       522.992    
  59  0.411020     -0.889113      -85.6088       85.6088       319.307       404.916    
  60  0.484202     -0.725253      -69.8314       69.8314       321.141       390.972    
  61  0.771761     -0.259080      -24.9457       24.9457       357.841       382.787    
  62  0.908486     -0.959755E-01  -9.24105       9.24105       337.725       346.966    
  63  0.340814      -1.07642      -103.643       103.643       320.290       423.934    
  64  0.519873     -0.654172      -62.9873       62.9873       307.210       370.197    
loop,thermsimp(1:2)       17   29.0192       61.5012    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     97        313.85          0.88          1.11         23.03          0.10          0.04         25.16
Just calling func    0   0         25.17


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     98        314.28          0.88          1.10         23.08          0.27          0.04         25.38
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    313.85
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    96.2856               127
loop is:       17
neval is:       97
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       17      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    96.2856               127
loop is:       18
neval is:       97


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      127
neval,tstepnext:       97     127

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.382860     -0.960086      -92.4424       92.4424       320.267       412.710    
   2  0.293468      -1.22599      -118.045       118.045       300.470       418.515    
   3  0.954036     -0.470539E-01  -4.53061       4.53061       320.912       325.442    
   4  0.452934     -0.792010      -76.2591       76.2591       318.706       394.965    
   5  0.251692      -1.37955      -132.831       132.831       309.584       442.415    
   6  0.881081     -0.126605      -12.1903       12.1903       325.466       337.656    
   7  0.855311     -0.156290      -15.0484       15.0484       324.938       339.987    
   8  0.576474     -0.550824      -53.0364       53.0364       337.725       390.761    
   9  0.433835     -0.835090      -80.4071       80.4071       318.584       398.991    
  10  0.298626      -1.20856      -116.367       116.367       316.644       433.011    
  11  0.269991      -1.30937      -126.073       126.073       325.148       451.221    
  12  0.884826     -0.122364      -11.7819       11.7819       328.180       339.962    
  13  0.664124     -0.409287      -39.4084       39.4084       320.952       360.360    
  14  0.580836     -0.543287      -52.3107       52.3107       320.093       372.404    
  15  0.285501      -1.25351      -120.695       120.695       313.293       433.988    
  16  0.690757     -0.369967      -35.6225       35.6225       314.090       349.712    
  17  0.578320     -0.547628      -52.7287       52.7287       323.311       376.040    
  18  0.563230     -0.574067      -55.2744       55.2744       335.383       390.657    
  19  0.681565     -0.383363      -36.9123       36.9123       307.210       344.122    
  20  0.453362     -0.791065      -76.1681       76.1681       340.979       417.147    
  21  0.645457     -0.437797      -42.1536       42.1536       314.778       356.932    
  22  0.982222E-01  -2.32052      -223.433       223.433       322.062       545.495    
  23  0.843064     -0.170712      -16.4371       16.4371       308.487       324.924    
  24  0.505683     -0.681845      -65.6519       65.6519       324.389       390.041    
  25  0.350376      -1.04875      -100.979       100.979       352.562       453.542    
  26  0.367167      -1.00194      -96.4723       96.4723       315.962       412.434    
  27  0.268175      -1.31611      -126.723       126.723       319.349       446.072    
  28  0.989085E-01  -2.31356      -222.762       222.762       324.615       547.377    
  29  0.349392      -1.05156      -101.250       101.250       357.841       459.091    
  30  0.945468     -0.560755E-01  -5.39926       5.39926       315.117       320.516    
  31  0.305400      -1.18613      -114.207       114.207       319.515       433.722    
  32  0.942706     -0.590006E-01  -5.68091       5.68091       314.110       319.791    
  33  0.778346     -0.250584      -24.1276       24.1276       325.382       349.509    
  34  0.256449      -1.36083      -131.028       131.028       321.980       453.008    
  35  0.338120      -1.08436      -104.408       104.408       321.315       425.722    
  36  0.644609     -0.439112      -42.2801       42.2801       321.141       363.421    
  37  0.420837     -0.865509      -83.3360       83.3360       326.333       409.669    
  38  0.793406     -0.231421      -22.2825       22.2825       324.811       347.093    
  39  0.685561     -0.377517      -36.3495       36.3495       327.018       363.368    
  40  0.278740      -1.27748      -123.003       123.003       322.041       445.043    
  41  0.414078     -0.881700      -84.8950       84.8950       319.307       404.202    
  42  0.999720     -0.280334E-03 -0.269921E-01  0.269921E-01   323.034       323.061    
  43  0.714259     -0.336509      -32.4010       32.4010       326.099       358.500    
  44  0.713371     -0.337753      -32.5208       32.5208       324.833       357.354    
  45  0.451360     -0.795490      -76.5942       76.5942       320.290       396.885    
  46  0.887280     -0.119595      -11.5153       11.5153       320.176       331.692    
  47  0.234319      -1.45107      -139.717       139.717       326.643       466.361    
  48  0.277567E-01  -3.58428      -345.114       345.114       319.401       664.515    
  49  0.582411     -0.540579      -52.0499       52.0499       325.176       377.226    
  50  0.969019     -0.314707E-01  -3.03017       3.03017       326.285       329.315    
  51  0.441889     -0.816696      -78.6360       78.6360       314.391       393.027    
  52  0.150247      -1.89548      -182.507       182.507       326.229       508.736    
  53  0.901555E-01  -2.40622      -231.684       231.684       309.634       541.318    
  54  0.274120      -1.29419      -124.612       124.612       316.394       441.006    
  55  0.166801      -1.79095      -172.443       172.443       336.634       509.077    
  56  0.783053     -0.244555      -23.5471       23.5471       316.751       340.298    
  57  0.541655     -0.613126      -59.0351       59.0351       321.004       380.039    
  58  0.113786      -2.17344      -209.270       209.270       318.875       528.145    
  59  0.794080     -0.230571      -22.2006       22.2006       321.570       343.771    
  60  0.266758      -1.32141      -127.233       127.233       316.129       443.362    
  61  0.637690     -0.449903      -43.3191       43.3191       320.415       363.735    
  62  0.912681     -0.913685E-01  -8.79746       8.79746       324.169       332.967    
  63  0.303728      -1.19162      -114.736       114.736       322.959       437.696    
  64  0.318303      -1.14475      -110.223       110.223       313.855       424.078    
loop,thermsimp(1:2)       18   92.4424       118.045    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     99        324.09          0.88          1.11         22.99          0.13          0.05         25.16
Just calling func    0   0         25.16


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    100        339.56          0.86          1.09         23.09          0.05          0.05         25.13
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    324.09
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    96.2856               127
loop is:       18
neval is:       99
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       18      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    96.2856               127
loop is:       19
neval is:       99


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      127
neval,tstepnext:       99     127

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.352992      -1.04131      -100.263       100.263       314.110       414.374    
   2  0.270835E-01  -3.60883      -347.478       347.478       315.117       662.595    
   3  0.923755     -0.793087E-01  -7.63628       7.63628       323.034       330.671    
   4  0.535520     -0.624517      -60.1320       60.1320       308.487       368.619    
   5  0.629344     -0.463078      -44.5877       44.5877       320.912       365.500    
   6  0.572648E-01  -2.86007      -275.383       275.383       326.285       601.668    
   7  0.353113E-01  -3.34355      -321.936       321.936       320.176       642.112    
   8  0.580838     -0.543283      -52.3103       52.3103       324.169       376.480    
   9  0.370403     -0.993164      -95.6273       95.6273       325.466       421.093    
  10  0.443010     -0.814162      -78.3920       78.3920       328.180       406.572    
  11  0.188704      -1.66757      -160.563       160.563       324.938       485.502    
  12  0.177608      -1.72818      -166.399       166.399       316.751       483.150    
  13  0.694998     -0.363847      -35.0332       35.0332       321.570       356.604    
  14  0.160742      -1.82796      -176.006       176.006       307.210       483.215    
  15  0.290050      -1.23770      -119.173       119.173       324.811       443.984    
  16  0.441138E-01  -3.12098      -300.505       300.505       325.382       625.887    
  17  0.372461     -0.987622      -95.0938       95.0938       314.090       409.184    
  18  0.652779     -0.426517      -41.0674       41.0674       314.778       355.845    
  19  0.998108     -0.189387E-02 -0.182353      0.182353       324.833       325.016    
  20  0.741140     -0.299566      -28.8439       28.8439       326.099       354.943    
  21  0.623042     -0.473141      -45.5567       45.5567       320.952       366.509    
  22  0.504617     -0.683955      -65.8550       65.8550       327.018       392.873    
  23  0.872499     -0.136394      -13.1328       13.1328       321.141       334.274    
  24  0.142620      -1.94757      -187.523       187.523       320.415       507.938    
  25  0.580285     -0.544236      -52.4021       52.4021       320.093       372.495    
  26  0.860063E-01  -2.45334      -236.221       236.221       323.311       559.532    
  27  0.401846     -0.911687      -87.7823       87.7823       325.176       412.958    
  28  0.161242      -1.82485      -175.707       175.707       321.004       496.711    
  29  0.550753     -0.596469      -57.4314       57.4314       324.389       381.820    
  30  0.815012     -0.204553      -19.6955       19.6955       335.383       355.078    
  31  0.438663     -0.824024      -79.3416       79.3416       337.725       417.066    
  32  0.542283     -0.611968      -58.9237       58.9237       314.391       373.315    
  33  0.943132E-01  -2.36113      -227.343       227.343       318.706       546.049    
  34  0.236587      -1.44144      -138.790       138.790       320.290       459.080    
  35  0.283068      -1.26207      -121.519       121.519       318.584       440.103    
  36  0.973178     -0.271886E-01  -2.61787       2.61787       319.307       321.925    
  37  0.596723     -0.516302      -49.7124       49.7124       326.333       376.045    
  38  0.595114     -0.519003      -49.9725       49.9725       315.962       365.934    
  39  0.948736     -0.526250E-01  -5.06703       5.06703       320.267       325.334    
  40  0.216072E-01  -3.83473      -369.229       369.229       340.979       710.208    
  41  0.440213     -0.820496      -79.0019       79.0019       300.470       379.471    
  42  0.905197     -0.996023E-01  -9.59027       9.59027       313.855       323.445    
  43  0.158396      -1.84266      -177.422       177.422       321.315       498.736    
  44  0.287789      -1.24553      -119.926       119.926       316.644       436.570    
  45  0.238244      -1.43446      -138.118       138.118       319.515       457.633    
  46  0.363881      -1.01093      -97.3377       97.3377       313.293       410.631    
  47  0.828805     -0.187771      -18.0796       18.0796       322.959       341.039    
  48  0.587140     -0.532492      -51.2713       51.2713       316.394       367.666    
  49  0.141687      -1.95414      -188.155       188.155       309.584       497.739    
  50  0.879115     -0.128839      -12.4053       12.4053       316.129       328.535    
  51  0.742190     -0.298150      -28.7076       28.7076       322.041       350.748    
  52  0.218958      -1.51887      -146.246       146.246       319.349       465.595    
  53  0.333192      -1.09904      -105.821       105.821       325.148       430.969    
  54  0.356774      -1.03065      -99.2370       99.2370       321.980       421.217    
  55  0.739597     -0.301650      -29.0446       29.0446       352.562       381.607    
  56  0.224658E-01  -3.79576      -365.477       365.477       357.841       723.318    
  57  0.338214      -1.08408      -104.381       104.381       326.643       431.024    
  58  0.227014      -1.48275      -142.767       142.767       326.229       468.996    
  59  0.289792E-01  -3.54118      -340.964       340.964       336.634       677.598    
  60  0.871226     -0.137854      -13.2734       13.2734       318.875       332.148    
  61  0.159622      -1.83495      -176.679       176.679       309.634       486.313    
  62  0.581826     -0.541584      -52.1467       52.1467       322.062       374.209    
  63  0.733467E-02  -4.91514      -473.257       473.257       324.615       797.872    
  64  0.646078     -0.436835      -42.0609       42.0609       324.085       366.146    
loop,thermsimp(1:2)       19   100.263       347.478    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    101        313.76          0.88          1.11         23.02          0.08          0.05         25.13
Just calling func    0   0         25.13


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    102        318.14          0.88          1.10         23.08          0.04          0.04         25.14
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  100    313.76        3.973     -1.020      3.269     -100.0     0.1898    
                     -0.8609      2.401     -100.0      2.184     0.9274    
                       1.046     0.2744E-01  2.400      0.000      0.000    
                      -1.565      0.000      0.000      0.000     -1.221    

                      -2.500      8968.     0.1297E+05 -571.7     -1096.    
                      -2.000     -4.518     -2.782     -5.643     -3.665    
                      -13.31     -2.602      1359.      0.000      3354.    

                       4764.      3323.      5073.      5329.      2500.    
                       4298.     0.3139E-01-0.5686E-01  0.000    -0.1521E-01
                     -0.4707E-01-0.1085     0.7294E-01-0.1870     0.3625E-01

                     -0.8728    -0.9274      0.000     0.2143     0.7247E-01
                      0.8541E-01 0.6434E-02-0.3609E-01 0.1262E-01-0.2893E-01
                     -0.3570E-01 0.1148    -0.1903    -0.9274      0.000    

                     -0.6881     -1.073      3.432    -0.9274      0.000    
                       0.000      9.103      9.236     -4637.     -4.000    
                      0.1088     0.1088      9.036      8.798     -4637.    

                      -4.000     0.1088     0.1088      8.720      9.036    
                      -5090.     -4.000     0.1088     0.1088      9.436    
                       8.836     -4637.     -2.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    313.76
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    96.2856               127
loop is:       19
neval is:      101
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       19      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    96.2856               127
loop is:       20
neval is:      101


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      127
neval,tstepnext:      101     127

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.534746     -0.625963      -60.2712       60.2712       319.307       379.578    
   2  0.288348      -1.24359      -119.740       119.740       313.855       433.594    
   3  0.910112E-01  -2.39677      -230.775       230.775       324.833       555.608    
   4  0.213812      -1.54266      -148.536       148.536       320.267       468.803    
   5  0.575222     -0.552999      -53.2458       53.2458       316.129       369.375    
   6  0.855707     -0.155827      -15.0039       15.0039       323.034       338.038    
   7  0.818692     -0.200047      -19.2617       19.2617       318.875       338.136    
   8  0.309911      -1.17147      -112.796       112.796       321.141       433.936    
   9  0.773438     -0.256910      -24.7367       24.7367       322.959       347.696    
  10  0.440502E-01  -3.12243      -300.644       300.644       322.041       622.685    
  11  0.211655      -1.55280      -149.512       149.512       326.099       475.611    
  12  0.713577     -0.337465      -32.4930       32.4930       335.383       367.876    
  13  0.927405     -0.753650E-01  -7.25657       7.25657       314.778       322.035    
  14  0.360229      -1.02101      -98.3089       98.3089       321.570       419.879    
  15  0.911872     -0.922553E-01  -8.88285       8.88285       320.912       329.795    
  16  0.800691     -0.222280      -21.4024       21.4024       315.962       337.364    
  17  0.169830      -1.77296      -170.710       170.710       324.085       494.795    
  18  0.581014     -0.542980      -52.2812       52.2812       320.952       373.233    
  19  0.869395     -0.139958      -13.4759       13.4759       316.394       329.870    
  20  0.773880     -0.256338      -24.6817       24.6817       308.487       333.168    
  21  0.496085     -0.701008      -67.4970       67.4970       320.093       387.590    
  22  0.530037     -0.634809      -61.1229       61.1229       314.391       375.514    
  23  0.239414      -1.42956      -137.646       137.646       322.062       459.708    
  24  0.595728     -0.517972      -49.8732       49.8732       326.333       376.206    
  25  0.170793      -1.76730      -170.166       170.166       324.169       494.335    
  26  0.983027     -0.171183E-01  -1.64824       1.64824       300.470       302.118    
  27  0.608714     -0.496407      -47.7968       47.7968       352.562       400.359    
  28  0.518727     -0.656378      -63.1997       63.1997       324.389       387.589    
  29  0.887918     -0.118876      -11.4460       11.4460       327.018       338.464    
  30  0.140498      -1.96256      -188.966       188.966       328.180       517.146    
  31  0.256308      -1.36138      -131.081       131.081       314.090       445.171    
  32  0.887238     -0.119642      -11.5198       11.5198       313.293       324.813    
  33  0.306042      -1.18403      -114.005       114.005       325.176       439.181    
  34  0.993873     -0.614632E-02 -0.591801      0.591801       314.110       314.702    
  35  0.275412E-01  -3.59207      -345.865       345.865       337.725       683.589    
  36  0.698960     -0.358161      -34.4857       34.4857       325.466       359.951    
  37  0.268424      -1.31519      -126.633       126.633       321.980       448.614    
  38  0.580935E-01  -2.84570      -274.000       274.000       325.148       599.148    
  39  0.242705      -1.41591      -136.332       136.332       326.643       462.975    
  40  0.443517     -0.813019      -78.2820       78.2820       316.644       394.926    
  41  0.904179     -0.100728      -9.69863       9.69863       318.584       328.282    
  42  0.454025     -0.789603      -76.0273       76.0273       324.811       400.838    
  43  0.592994     -0.522572      -50.3161       50.3161       319.515       369.831    
  44  0.401796     -0.911812      -87.7943       87.7943       320.290       408.085    
  45  0.130776      -2.03427      -195.871       195.871       319.349       515.220    
  46  0.709753     -0.342839      -33.0104       33.0104       326.229       359.239    
  47  0.388071     -0.946568      -91.1408       91.1408       316.751       407.892    
  48  0.362521      -1.01467      -97.6982       97.6982       307.210       404.908    
  49  0.285379      -1.25394      -120.736       120.736       324.938       445.674    
  50  0.286508      -1.24999      -120.356       120.356       309.634       429.990    
  51  0.951542     -0.496714E-01  -4.78264       4.78264       321.004       325.786    
  52  0.122933      -2.09612      -201.826       201.826       309.584       511.410    
  53  0.210928      -1.55624      -149.843       149.843       321.315       471.158    
  54  0.860093     -0.150715      -14.5117       14.5117       320.415       334.927    
  55  0.997563     -0.243951E-02 -0.234890      0.234890       318.706       318.941    
  56  0.750720     -0.286722      -27.6072       27.6072       323.311       350.918    
  57  0.667101     -0.404814      -38.9777       38.9777       326.285       365.262    
  58  0.508750E-01  -2.97838      -286.775       286.775       325.382       612.157    
  59  0.552474     -0.593349      -57.1309       57.1309       320.176       377.307    
  60  0.514478     -0.664602      -63.9916       63.9916       315.117       379.108    
  61  0.539834     -0.616494      -59.3595       59.3595       336.634       395.994    
  62  0.610888     -0.492841      -47.4535       47.4535       340.979       388.433    
  63  0.328075      -1.11451      -107.312       107.312       357.841       465.153    
  64  0.894692     -0.111276      -10.7143       10.7143       313.763       324.477    
loop,thermsimp(1:2)       20   60.2712       119.740    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    103        311.91          0.88          1.10         23.02          0.10          0.05         25.15
Just calling func    0   0         25.15


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    104        325.27          0.87          1.09         23.05          0.07          0.05         25.13
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    311.91
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    96.2856               127
loop is:       20
neval is:      103
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       20      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    96.2856               127
loop is:       21
neval is:      103


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      127
neval,tstepnext:      103     127

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.297422      -1.21260      -116.756       116.756       300.470       417.226    
   2  0.663536     -0.410173      -39.4937       39.4937       314.110       353.604    
   3  0.263982      -1.33188      -128.240       128.240       318.706       446.946    
   4  0.792402     -0.232686      -22.4043       22.4043       314.778       337.182    
   5  0.624731     -0.470434      -45.2960       45.2960       313.763       359.059    
   6  0.170977      -1.76622      -170.062       170.062       313.293       483.355    
   7  0.362487      -1.01477      -97.7075       97.7075       321.004       418.711    
   8  0.659245     -0.416659      -40.1183       40.1183       318.584       358.702    
   9  0.746481E-03  -7.20014      -693.270       693.270       320.912       1014.18    
  10  0.690046     -0.370998      -35.7217       35.7217       316.394       352.116    
  11  0.905636     -0.991173E-01  -9.54356       9.54356       308.487       318.030    
  12  0.317643      -1.14683      -110.423       110.423       320.415       430.838    
  13  0.321948      -1.13336      -109.127       109.127       315.962       425.089    
  14  0.293974      -1.22426      -117.879       117.879       323.034       440.913    
  15  0.679275     -0.386729      -37.2364       37.2364       318.875       356.111    
  16  0.180340      -1.71291      -164.929       164.929       327.018       491.947    
  17  0.539600     -0.616927      -59.4012       59.4012       322.959       382.361    
  18  0.260315      -1.34586      -129.587       129.587       323.311       452.898    
  19  0.256777      -1.35955      -130.905       130.905       326.229       457.134    
  20  0.518851     -0.656138      -63.1766       63.1766       325.466       388.642    
  21  0.485887     -0.721780      -69.4970       69.4970       326.285       395.782    
  22  0.562814     -0.574805      -55.3454       55.3454       335.383       390.728    
  23  0.906369     -0.983082E-01  -9.46566       9.46566       316.129       325.595    
  24  0.332143      -1.10219      -106.125       106.125       319.515       425.640    
  25  0.912001E-01  -2.39470      -230.575       230.575       320.952       551.527    
  26  0.302569      -1.19545      -115.104       115.104       314.391       429.496    
  27  0.362040      -1.01600      -97.8261       97.8261       326.333       424.159    
  28  0.630870     -0.460656      -44.3545       44.3545       320.176       364.531    
  29  0.685312     -0.377881      -36.3845       36.3845       315.117       351.501    
  30  0.329910      -1.10894      -106.775       106.775       319.307       426.082    
  31  0.906630E-01  -2.40061      -231.144       231.144       324.389       555.533    
  32  0.339749      -1.07955      -103.945       103.945       320.093       424.038    
  33  0.783039     -0.244573      -23.5488       23.5488       340.979       364.528    
  34  0.322673      -1.13112      -108.910       108.910       316.644       425.554    
  35  0.255311      -1.36527      -131.456       131.456       336.634       468.090    
  36  0.645921     -0.437078      -42.0843       42.0843       352.562       394.647    
  37  0.240122      -1.42661      -137.362       137.362       324.811       462.172    
  38  0.224638      -1.49326      -143.780       143.780       307.210       450.989    
  39  0.682659     -0.381760      -36.7579       36.7579       316.751       353.509    
  40  0.533856     -0.627629      -60.4316       60.4316       320.290       380.722    
  41  0.439620E-02  -5.42701      -522.543       522.543       321.570       844.114    
  42  0.409891     -0.891863      -85.8735       85.8735       309.634       395.508    
  43  0.379406     -0.969149      -93.3150       93.3150       313.855       407.170    
  44  0.982111     -0.180514E-01  -1.73809       1.73809       321.141       322.879    
  45  0.243530      -1.41251      -136.005       136.005       325.176       461.180    
  46  0.709323     -0.343445      -33.0688       33.0688       314.090       347.159    
  47  0.212014      -1.55110      -149.349       149.349       324.938       474.287    
  48  0.530919     -0.633146      -60.9628       60.9628       321.980       382.943    
  49  0.439600     -0.821890      -79.1362       79.1362       322.062       401.198    
  50  0.304385      -1.18946      -114.528       114.528       326.643       441.171    
  51  0.850253     -0.162221      -15.6195       15.6195       357.841       373.461    
  52  0.686564     -0.376055      -36.2087       36.2087       320.267       356.476    
  53  0.894299     -0.111715      -10.7565       10.7565       321.315       332.071    
  54  0.724097E-02  -4.92800      -474.495       474.495       326.099       800.594    
  55  0.666382     -0.405892      -39.0815       39.0815       324.169       363.251    
  56  0.216072      -1.53214      -147.523       147.523       324.085       471.608    
  57  0.481454     -0.730944      -70.3793       70.3793       309.584       379.963    
  58  0.107413      -2.23107      -214.820       214.820       319.349       534.169    
  59  0.943557     -0.580990E-01  -5.59409       5.59409       328.180       333.774    
  60  0.259811      -1.34780      -129.774       129.774       324.833       454.607    
  61  0.526852     -0.640836      -61.7032       61.7032       325.148       386.851    
  62  0.306319E-01  -3.48571      -335.624       335.624       325.382       661.006    
  63  0.180513      -1.71195      -164.836       164.836       322.041       486.877    
  64  0.901495     -0.103701      -9.98490       9.98490       311.913       321.898    
loop,thermsimp(1:2)       21   116.756       39.4937    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    105        314.19          0.88          1.11         23.09          0.05          0.05         25.16
Just calling func    0   0         25.17


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    106        309.48          0.87          1.11         23.10          0.02          0.04         25.14
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    309.48
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    96.2856               127
loop is:       21
neval is:      105
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       21      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    96.2856               127
loop is:       22
neval is:      105


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      127
neval,tstepnext:      105     127

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.383671     -0.957969      -92.2386       92.2386       308.487       400.725    
   2  0.741480     -0.299107      -28.7996       28.7996       311.913       340.713    
   3  0.138898      -1.97401      -190.069       190.069       321.141       511.210    
   4  0.751974E-01  -2.58764      -249.152       249.152       316.129       565.281    
   5  0.824485     -0.192996      -18.5827       18.5827       321.315       339.897    
   6  0.982900     -0.172482E-01  -1.66076       1.66076       328.180       329.841    
   7  0.693409     -0.366136      -35.2536       35.2536       314.778       350.032    
   8  0.941572     -0.602045E-01  -5.79682       5.79682       314.090       319.887    
   9  0.812713     -0.207378      -19.9675       19.9675       315.117       335.084    
  10  0.879507     -0.128393      -12.3624       12.3624       316.394       328.757    
  11  0.418958     -0.869984      -83.7668       83.7668       316.751       400.518    
  12  0.314952      -1.15533      -111.242       111.242       314.110       425.352    
  13  0.812426     -0.207731      -20.0015       20.0015       318.875       338.876    
  14  0.213788      -1.54277      -148.546       148.546       320.267       468.814    
  15  0.521629     -0.650798      -62.6624       62.6624       318.584       381.246    
  16  0.287143      -1.24777      -120.143       120.143       313.763       433.905    
  17  0.518340     -0.657125      -63.2716       63.2716       324.169       387.441    
  18  0.712802E-02  -4.94372      -476.009       476.009       340.979       816.988    
  19  0.579935     -0.544838      -52.4601       52.4601       320.176       372.637    
  20  0.508101E-02  -5.28224      -508.604       508.604       357.841       866.445    
  21  0.984466     -0.156557E-01  -1.50742       1.50742       309.584       311.091    
  22  0.394325     -0.930579      -89.6013       89.6013       320.290       409.892    
  23  0.837309     -0.177562      -17.0967       17.0967       322.959       340.056    
  24  0.683519     -0.380501      -36.6367       36.6367       321.980       358.617    
  25  0.892337     -0.113912      -10.9681       10.9681       325.148       336.116    
  26  0.297675      -1.21175      -116.674       116.674       325.466       442.140    
  27  0.566054     -0.569065      -54.7928       54.7928       335.383       390.175    
  28  0.325499E-01  -3.42498      -329.776       329.776       352.562       682.339    
  29  0.721169     -0.326882      -31.4740       31.4740       309.634       341.108    
  30  0.370449     -0.993040      -95.6154       95.6154       326.285       421.900    
  31  0.398952     -0.918913      -88.4781       88.4781       322.062       410.540    
  32  0.942469     -0.592518E-01  -5.70510       5.70510       313.855       319.560    
  33  0.379045     -0.970101      -93.4067       93.4067       300.470       393.876    
  34  0.218373      -1.52155      -146.503       146.503       321.004       467.507    
  35  0.413944     -0.882024      -84.9261       84.9261       320.093       405.019    
  36  0.452532     -0.792896      -76.3445       76.3445       326.333       402.677    
  37  0.938896     -0.630505E-01  -6.07085       6.07085       315.962       322.033    
  38  0.389299     -0.943409      -90.8366       90.8366       316.644       407.480    
  39  0.943794     -0.578471E-01  -5.56984       5.56984       319.515       325.085    
  40  0.706887     -0.346884      -33.3999       33.3999       319.307       352.707    
  41  0.274873      -1.29145      -124.348       124.348       314.391       438.739    
  42  0.343864      -1.06751      -102.786       102.786       320.415       423.201    
  43  0.869527E-01  -2.44239      -235.167       235.167       323.034       558.201    
  44  0.859615     -0.151271      -14.5652       14.5652       326.643       341.208    
  45  0.264079      -1.33151      -128.205       128.205       318.706       446.911    
  46  0.494871     -0.703457      -67.7328       67.7328       307.210       374.942    
  47  0.112943      -2.18087      -209.987       209.987       323.311       533.298    
  48  0.358273      -1.02646      -98.8333       98.8333       324.833       423.666    
  49  0.215257      -1.53592      -147.887       147.887       326.229       474.116    
  50  0.441681     -0.817166      -78.6813       78.6813       325.176       403.857    
  51  0.888276     -0.118473      -11.4073       11.4073       324.811       336.218    
  52  0.780286     -0.248095      -23.8880       23.8880       336.634       360.522    
  53  0.488747     -0.715911      -68.9319       68.9319       324.085       393.017    
  54  0.683795     -0.380097      -36.5979       36.5979       324.938       361.536    
  55  0.466986     -0.761456      -73.3172       73.3172       313.293       386.610    
  56  0.900497     -0.104809      -10.0916       10.0916       322.041       332.132    
  57  0.876058     -0.132323      -12.7408       12.7408       327.018       339.759    
  58  0.413808     -0.882354      -84.9580       84.9580       319.349       404.307    
  59  0.268165      -1.31615      -126.727       126.727       320.952       447.678    
  60  0.637465     -0.450255      -43.3531       43.3531       324.389       367.742    
  61  0.476344     -0.741616      -71.4069       71.4069       325.382       396.789    
  62  0.878474     -0.129569      -12.4756       12.4756       326.099       338.574    
  63  0.185973      -1.68216      -161.967       161.967       321.570       483.538    
  64  0.802667E-03  -7.12757      -686.282       686.282       309.482       995.764    
loop,thermsimp(1:2)       22   92.2386       28.7996    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    107        331.40          0.88          1.09         23.12          0.08          0.04         25.20
Just calling func    0   0         25.21


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    108        381.24          0.88          1.10         23.15          0.13          0.04         25.30
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    331.40
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    96.2856               127
loop is:       22
neval is:      107
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       22      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    96.2856               127
loop is:       23
neval is:      107


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      127
neval,tstepnext:      107     127

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.327656      -1.11579      -107.435       107.435       309.584       417.019    
   2  0.736029     -0.306486      -29.5101       29.5101       313.855       343.365    
   3  0.608436     -0.496864      -47.8408       47.8408       314.090       361.931    
   4  0.584882     -0.536346      -51.6424       51.6424       315.962       367.604    
   5  0.617514     -0.482053      -46.4147       46.4147       319.515       365.929    
   6  0.376473     -0.976909      -94.0622       94.0622       316.394       410.456    
   7  0.535145     -0.625218      -60.1995       60.1995       328.180       388.379    
   8  0.341783      -1.07358      -103.370       103.370       322.041       425.411    
   9  0.804208E-01  -2.52048      -242.686       242.686       315.117       557.803    
  10  0.660499     -0.414760      -39.9354       39.9354       325.148       365.083    
  11  0.739860E-01  -2.60388      -250.716       250.716       324.811       575.527    
  12  0.203251      -1.59331      -153.413       153.413       326.099       479.512    
  13  0.637025     -0.450946      -43.4196       43.4196       318.875       362.294    
  14  0.687460     -0.374752      -36.0832       36.0832       327.018       363.101    
  15  0.663581     -0.410105      -39.4872       39.4872       321.315       360.802    
  16  0.579690     -0.545263      -52.5009       52.5009       322.959       375.460    
  17  0.775653     -0.254050      -24.4614       24.4614       311.913       336.375    
  18  0.284124      -1.25834      -121.160       121.160       309.634       430.795    
  19  0.317710      -1.14662      -110.402       110.402       326.643       437.046    
  20  0.958871     -0.419990E-01  -4.04390       4.04390       314.778       318.822    
  21  0.582932     -0.539685      -51.9639       51.9639       319.307       371.271    
  22  0.905476     -0.992942E-01  -9.56060       9.56060       321.980       331.541    
  23  0.225214      -1.49070      -143.533       143.533       336.634       480.167    
  24  0.618260     -0.480846      -46.2985       46.2985       324.938       371.237    
  25  0.608706     -0.496420      -47.7981       47.7981       324.389       372.187    
  26  0.651052     -0.429165      -41.3224       41.3224       320.176       361.499    
  27  0.138439E-02  -6.58249      -633.799       633.799       307.210       941.009    
  28  0.157375      -1.84913      -178.044       178.044       318.584       496.628    
  29  0.168063      -1.78342      -171.717       171.717       313.293       485.010    
  30  0.924354     -0.786598E-01  -7.57381       7.57381       324.169       331.743    
  31  0.985585     -0.145204E-01  -1.39811       1.39811       335.383       336.781    
  32  0.540844E-01  -2.91721      -280.885       280.885       324.085       604.970    
  33  0.535345     -0.624843      -60.1634       60.1634       300.470       360.633    
  34  0.736351     -0.306048      -29.4680       29.4680       325.382       354.850    
  35  0.283062E-01  -3.56467      -343.227       343.227       316.751       659.978    
  36  0.690743     -0.369987      -35.6244       35.6244       308.487       344.111    
  37  0.260994      -1.34326      -129.336       129.336       326.333       455.669    
  38  0.243637      -1.41208      -135.963       135.963       325.176       461.138    
  39  0.850226     -0.162253      -15.6226       15.6226       319.349       334.972    
  40  0.589307     -0.528809      -50.9166       50.9166       320.093       371.010    
  41  0.515087     -0.663420      -63.8778       63.8778       316.644       380.521    
  42  0.348855      -1.05310      -101.398       101.398       320.290       421.689    
  43  0.791407     -0.233943      -22.5254       22.5254       322.062       344.587    
  44  0.370775     -0.992160      -95.5306       95.5306       326.285       421.815    
  45  0.676021     -0.391531      -37.6988       37.6988       320.415       358.114    
  46  0.125601      -2.07465      -199.758       199.758       324.833       524.592    
  47  0.582904     -0.539733      -51.9685       51.9685       314.110       366.079    
  48  0.818994     -0.199679      -19.2262       19.2262       313.763       332.989    
  49  0.291406      -1.23304      -118.724       118.724       314.391       433.115    
  50  0.887104     -0.119794      -11.5344       11.5344       325.466       337.000    
  51  0.666242     -0.406102      -39.1018       39.1018       318.706       357.808    
  52  0.931047     -0.714460E-01  -6.87922       6.87922       320.952       327.831    
  53  0.169651      -1.77401      -170.812       170.812       321.004       491.815    
  54  0.228429      -1.47653      -142.169       142.169       320.267       462.436    
  55  0.453181     -0.791463      -76.2065       76.2065       326.229       402.435    
  56  0.376518     -0.976789      -94.0507       94.0507       321.570       415.621    
  57  0.551543     -0.595035      -57.2933       57.2933       321.141       378.434    
  58  0.837469     -0.177371      -17.0783       17.0783       323.311       340.390    
  59  0.436148     -0.829773      -79.8952       79.8952       323.034       402.929    
  60  0.245765      -1.40338      -135.125       135.125       316.129       451.254    
  61  0.727782     -0.317754      -30.5951       30.5951       352.562       383.158    
  62  0.677441     -0.389433      -37.4967       37.4967       340.979       378.476    
  63  0.835222     -0.180057      -17.3369       17.3369       357.841       375.178    
  64  0.964839     -0.357941E-01  -3.44646       3.44646       331.399       334.846    
loop,thermsimp(1:2)       23   107.435       29.5101    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    109        330.09          0.88          1.12         23.06          0.07          0.03         25.16
Just calling func    0   0         25.16


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    110        367.84          0.88          1.12         23.12          0.00          0.04         25.16
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    330.09
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    96.2856               127
loop is:       23
neval is:      109
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       23      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    96.2856               127
loop is:       24
neval is:      109


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      127
neval,tstepnext:      109     127

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.291502      -1.23271      -118.692       118.692       314.778       433.470    
   2  0.991852     -0.818183E-02 -0.787792      0.787792       320.952       321.740    
   3  0.317368      -1.14769      -110.506       110.506       321.980       432.486    
   4  0.737330     -0.304720      -29.3401       29.3401       324.169       353.509    
   5  0.834641     -0.180753      -17.4039       17.4039       313.763       331.167    
   6  0.464401     -0.767007      -73.8517       73.8517       331.399       405.251    
   7  0.592116     -0.524053      -50.4587       50.4587       319.349       369.808    
   8  0.464372     -0.767069      -73.8576       73.8576       311.913       385.771    
   9  0.636055E-01  -2.75505      -265.272       265.272       335.383       600.655    
  10  0.712927     -0.338376      -32.5807       32.5807       325.466       358.046    
  11  0.265597      -1.32578      -127.653       127.653       323.311       450.964    
  12  0.152318      -1.88178      -181.189       181.189       313.855       495.043    
  13  0.629580     -0.462703      -44.5516       44.5516       308.487       353.038    
  14  0.849464     -0.163150      -15.7089       15.7089       322.062       337.771    
  15  0.487816     -0.717817      -69.1154       69.1154       325.382       394.497    
  16  0.374667     -0.981718      -94.5253       94.5253       318.706       413.231    
  17  0.657383     -0.419488      -40.3906       40.3906       320.415       360.806    
  18  0.846901     -0.166172      -15.9999       15.9999       300.470       316.469    
  19  0.201185      -1.60353      -154.397       154.397       321.315       475.712    
  20  0.771980     -0.258797      -24.9184       24.9184       320.176       345.095    
  21  0.507739     -0.677788      -65.2612       65.2612       314.090       379.351    
  22  0.280262      -1.27203      -122.478       122.478       318.875       441.353    
  23  0.285359      -1.25401      -120.743       120.743       327.018       447.761    
  24  0.246191      -1.40165      -134.958       134.958       325.148       460.106    
  25  0.559989E-01  -2.88242      -277.536       277.536       319.515       597.050    
  26  0.330462      -1.10726      -106.613       106.613       314.110       420.724    
  27  0.899405     -0.106022      -10.2084       10.2084       315.962       326.170    
  28  0.637003     -0.450981      -43.4229       43.4229       320.093       363.516    
  29  0.699726E-01  -2.65965      -256.086       256.086       324.938       581.024    
  30  0.677191     -0.389802      -37.5323       37.5323       319.307       356.839    
  31  0.649507     -0.431542      -41.5513       41.5513       324.389       365.940    
  32  0.527986     -0.638685      -61.4961       61.4961       357.841       419.337    
  33  0.374870E-01  -3.28376      -316.179       316.179       322.959       639.138    
  34  0.448697     -0.801407      -77.1639       77.1639       321.141       398.305    
  35  0.809612     -0.211200      -20.3355       20.3355       340.979       361.315    
  36  0.836235     -0.178846      -17.2203       17.2203       316.644       333.864    
  37  0.198161      -1.61867      -155.855       155.855       352.562       508.417    
  38  0.222702      -1.50192      -144.613       144.613       328.180       472.793    
  39  0.888863     -0.117812      -11.3436       11.3436       326.229       337.572    
  40  0.868267     -0.141256      -13.6009       13.6009       323.034       336.635    
  41  0.164066      -1.80749      -174.035       174.035       316.394       490.429    
  42  0.163797      -1.80912      -174.193       174.193       321.570       495.763    
  43  0.883498     -0.123867      -11.9266       11.9266       309.584       321.510    
  44  0.749983     -0.287705      -27.7018       27.7018       320.290       347.992    
  45  0.666691     -0.405428      -39.0369       39.0369       326.285       365.322    
  46  0.978530     -0.217038E-01  -2.08976       2.08976       322.041       324.130    
  47  0.442024     -0.816391      -78.6067       78.6067       309.634       388.241    
  48  0.228080      -1.47806      -142.316       142.316       314.391       456.707    
  49  0.226174      -1.48645      -143.124       143.124       326.643       469.767    
  50  0.388394     -0.945736      -91.0607       91.0607       316.129       407.190    
  51  0.257425      -1.35703      -130.662       130.662       326.333       456.995    
  52  0.707288     -0.346317      -33.3454       33.3454       325.176       358.521    
  53  0.518387     -0.657032      -63.2627       63.2627       320.267       383.530    
  54  0.628700     -0.464102      -44.6863       44.6863       326.099       370.785    
  55  0.981249     -0.189295E-01  -1.82264       1.82264       336.634       338.457    
  56  0.928260     -0.744431E-01  -7.16780       7.16780       313.293       320.461    
  57  0.752004E-02  -4.89018      -470.854       470.854       321.004       791.858    
  58  0.930611     -0.719140E-01  -6.92428       6.92428       318.584       325.508    
  59  0.552686     -0.592965      -57.0940       57.0940       324.833       381.927    
  60  0.695877     -0.362583      -34.9115       34.9115       315.117       350.028    
  61  0.432533     -0.838096      -80.6965       80.6965       324.811       405.507    
  62  0.127859      -2.05683      -198.043       198.043       324.085       522.128    
  63  0.304427      -1.18932      -114.515       114.515       316.751       431.266    
  64  0.938376     -0.636043E-01  -6.12418       6.12418       330.093       336.218    
loop,thermsimp(1:2)       24   118.692      0.787792    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    111        314.85          0.84          1.10         23.05          0.10          0.05         25.14
Just calling func    0   0         25.14


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    112        311.67          0.88          1.09         23.10          0.09          0.05         25.20
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    311.67
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    96.2856               127
loop is:       24
neval is:      111
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       24      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    96.2856               127
loop is:       25
neval is:      111


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      127
neval,tstepnext:      111     127

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.145902      -1.92482      -185.333       185.333       300.470       485.802    
   2  0.438196     -0.825090      -79.4442       79.4442       313.293       392.737    
   3  0.637359     -0.450422      -43.3692       43.3692       309.584       352.953    
   4  0.122813      -2.09709      -201.920       201.920       320.952       522.871    
   5  0.926899     -0.759107E-01  -7.30910       7.30910       322.041       329.350    
   6  0.456580     -0.783992      -75.4871       75.4871       318.584       394.071    
   7  0.988763     -0.113008E-01  -1.08811       1.08811       315.962       317.050    
   8  0.499609     -0.693930      -66.8154       66.8154       313.763       380.578    
   9  0.432617     -0.837902      -80.6778       80.6778       316.644       397.321    
  10  0.403570     -0.907406      -87.3701       87.3701       330.093       417.464    
  11  0.435824     -0.830517      -79.9668       79.9668       323.034       403.001    
  12  0.504807     -0.683579      -65.8188       65.8188       326.229       392.048    
  13  0.778763     -0.250048      -24.0760       24.0760       322.062       346.138    
  14  0.429140     -0.845972      -81.4549       81.4549       336.634       418.089    
  15  0.597763     -0.514562      -49.5448       49.5448       320.176       369.721    
  16  0.425932     -0.853476      -82.1774       82.1774       320.290       402.468    
  17  0.825778     -0.191430      -18.4319       18.4319       315.117       333.548    
  18  0.448772     -0.801241      -77.1479       77.1479       308.487       385.635    
  19  0.701335     -0.354770      -34.1592       34.1592       324.169       358.328    
  20  0.425857     -0.853651      -82.1943       82.1943       319.307       401.501    
  21  0.800815     -0.222126      -21.3875       21.3875       325.466       346.853    
  22  0.724239     -0.322634      -31.0650       31.0650       325.176       356.241    
  23  0.312194      -1.16413      -112.089       112.089       320.415       432.504    
  24  0.796592     -0.227412      -21.8965       21.8965       340.979       362.876    
  25  0.164146      -1.80700      -173.988       173.988       320.093       494.081    
  26  0.503041     -0.687083      -66.1562       66.1562       326.285       392.441    
  27  0.640838     -0.444978      -42.8450       42.8450       324.389       367.234    
  28  0.327752      -1.11550      -107.406       107.406       319.349       426.756    
  29  0.720325     -0.328053      -31.5868       31.5868       326.099       357.686    
  30  0.447570     -0.803922      -77.4060       77.4060       314.090       391.496    
  31  0.377461     -0.974289      -93.8100       93.8100       324.833       418.643    
  32  0.951264     -0.499633E-01  -4.81074       4.81074       320.267       325.078    
  33  0.610405     -0.493632      -47.5297       47.5297       311.913       359.443    
  34  0.564697     -0.571466      -55.0239       55.0239       309.634       364.658    
  35  0.993998     -0.601974E-02 -0.579614      0.579614       325.382       325.961    
  36  0.908032     -0.964757E-01  -9.28921       9.28921       321.141       330.430    
  37  0.731210     -0.313055      -30.1427       30.1427       331.399       361.542    
  38  0.818812     -0.199901      -19.2476       19.2476       324.811       344.058    
  39  0.423172     -0.859976      -82.8033       82.8033       316.129       398.933    
  40  0.554414     -0.589843      -56.7934       56.7934       318.706       375.499    
  41  0.244903E-01  -3.70948      -357.169       357.169       357.841       715.010    
  42  0.337898      -1.08501      -104.471       104.471       314.110       418.581    
  43  0.634521E-01  -2.75747      -265.505       265.505       316.751       582.256    
  44  0.824978     -0.192398      -18.5252       18.5252       321.980       340.505    
  45  0.954123     -0.469622E-01  -4.52178       4.52178       314.778       319.300    
  46  0.807852     -0.213376      -20.5450       20.5450       318.875       339.420    
  47  0.335430      -1.09234      -105.177       105.177       327.018       432.195    
  48  0.266194      -1.32353      -127.437       127.437       323.311       450.748    
  49  0.797818     -0.225874      -21.7485       21.7485       314.391       336.140    
  50  0.710601     -0.341644      -32.8954       32.8954       326.333       359.228    
  51  0.469059     -0.757026      -72.8907       72.8907       325.148       398.038    
  52  0.256457E-01  -3.66338      -352.731       352.731       326.643       679.374    
  53  0.620630     -0.477020      -45.9302       45.9302       328.180       374.110    
  54  0.600237     -0.510431      -49.1471       49.1471       321.315       370.462    
  55  0.959467     -0.413769E-01  -3.98399       3.98399       316.394       320.378    
  56  0.541492     -0.613428      -59.0642       59.0642       313.855       372.919    
  57  0.577789     -0.548547      -52.8172       52.8172       321.570       374.388    
  58  0.701570     -0.354435      -34.1269       34.1269       352.562       386.689    
  59  0.274557E-01  -3.59518      -346.164       346.164       324.085       670.249    
  60  0.584746     -0.536578      -51.6647       51.6647       324.938       376.603    
  61  0.131184      -2.03115      -195.571       195.571       319.515       515.085    
  62  0.986883     -0.132037E-01  -1.27133       1.27133       335.383       336.654    
  63  0.257198      -1.35791      -130.747       130.747       322.959       453.706    
  64  0.831173     -0.184917      -17.8049       17.8049       311.670       329.475    
loop,thermsimp(1:2)       25   185.333       79.4442    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    113        313.44          0.88          1.11         23.03          0.08          0.04         25.13
Just calling func    0   0         25.13


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    114        322.26          0.88          1.10         23.09          0.03          0.05         25.16
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    313.44
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    96.2856               127
loop is:       25
neval is:      113
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       25      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    96.2856               127
loop is:       26
neval is:      113


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      127
neval,tstepnext:      113     127

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.781042     -0.247126      -23.7946       23.7946       315.962       339.757    
   2  0.928800     -0.738619E-01  -7.11184       7.11184       314.778       321.890    
   3  0.727994     -0.317462      -30.5670       30.5670       316.394       346.961    
   4  0.109723E-01  -4.51238      -434.477       434.477       320.267       754.745    
   5  0.160096      -1.83198      -176.393       176.393       325.382       501.775    
   6  0.497079     -0.699006      -67.3042       67.3042       322.041       389.345    
   7  0.789473     -0.236389      -22.7609       22.7609       311.670       334.431    
   8  0.763780     -0.269476      -25.9466       25.9466       321.141       347.087    
   9  0.217288      -1.52653      -146.983       146.983       315.117       462.100    
  10  0.867642     -0.141976      -13.6703       13.6703       314.391       328.062    
  11  0.740966     -0.299800      -28.8664       28.8664       335.383       364.249    
  12  0.999757     -0.242662E-03 -0.233649E-01  0.233649E-01   318.875       318.898    
  13  0.587476     -0.531920      -51.2162       51.2162       321.980       373.196    
  14  0.703619     -0.351518      -33.8461       33.8461       324.811       358.657    
  15  0.740946     -0.299828      -28.8691       28.8691       322.062       350.931    
  16  0.335927      -1.09086      -105.034       105.034       325.466       430.500    
  17  0.736553     -0.305774      -29.4416       29.4416       309.584       339.025    
  18  0.597397     -0.515174      -49.6038       49.6038       325.176       374.779    
  19  0.126601      -2.06672      -198.995       198.995       326.099       525.094    
  20  0.990194     -0.985477E-02 -0.948872      0.948872       324.169       325.118    
  21  0.716453     -0.333443      -32.1058       32.1058       326.333       358.438    
  22  0.279233E-01  -3.57829      -344.538       344.538       311.913       656.451    
  23  0.413932     -0.882054      -84.9291       84.9291       331.399       416.328    
  24  0.109516      -2.21168      -212.953       212.953       340.979       553.932    
  25  0.440749     -0.819279      -78.8848       78.8848       309.634       388.519    
  26  0.412115     -0.886453      -85.3526       85.3526       324.389       409.741    
  27  0.146963      -1.91758      -184.635       184.635       320.176       504.811    
  28  0.345919      -1.06155      -102.212       102.212       321.315       423.527    
  29  0.343614      -1.06824      -102.856       102.856       313.855       416.710    
  30  0.600334E-01  -2.81285      -270.837       270.837       328.180       599.017    
  31  0.751538     -0.285634      -27.5024       27.5024       321.570       349.073    
  32  0.878119     -0.129973      -12.5146       12.5146       318.706       331.221    
  33  0.544046     -0.608721      -58.6111       58.6111       324.938       383.549    
  34  0.931023     -0.714714E-01  -6.88167       6.88167       313.763       320.644    
  35  0.131968      -2.02520      -194.997       194.997       308.487       503.484    
  36  0.826694E-01  -2.49291      -240.031       240.031       352.562       592.593    
  37  0.174702E-02  -6.34984      -611.398       611.398       314.090       925.488    
  38  0.233470      -1.45470      -140.067       140.067       326.229       466.296    
  39  0.232927      -1.45703      -140.291       140.291       326.285       466.576    
  40  0.958279     -0.426163E-01  -4.10334       4.10334       313.293       317.396    
  41  0.820100     -0.198330      -19.0963       19.0963       318.584       337.680    
  42  0.305797      -1.18483      -114.082       114.082       316.644       430.726    
  43  0.260853      -1.34380      -129.388       129.388       325.148       454.536    
  44  0.960408     -0.403967E-01  -3.88962       3.88962       316.129       320.019    
  45  0.318957      -1.14270      -110.025       110.025       319.307       429.333    
  46  0.146887      -1.91809      -184.685       184.685       320.290       504.975    
  47  0.787623     -0.238735      -22.9868       22.9868       323.034       346.021    
  48  0.452412     -0.793163      -76.3701       76.3701       330.093       406.464    
  49  0.218339      -1.52170      -146.518       146.518       336.634       483.152    
  50  0.177672      -1.72782      -166.364       166.364       314.110       480.474    
  51  0.928922     -0.737304E-01  -7.09917       7.09917       324.833       331.932    
  52  0.341447      -1.07456      -103.465       103.465       319.349       422.814    
  53  0.462674     -0.770732      -74.2104       74.2104       327.018       401.229    
  54  0.125513      -2.07534      -199.826       199.826       320.415       520.241    
  55  0.354899      -1.03592      -99.7442       99.7442       323.311       423.056    
  56  0.341830      -1.07344      -103.357       103.357       322.959       426.317    
  57  0.604983     -0.502555      -48.3888       48.3888       300.470       348.858    
  58  0.223932      -1.49641      -144.083       144.083       320.093       464.176    
  59  0.146473      -1.92091      -184.956       184.956       319.515       504.471    
  60  0.997224     -0.277992E-02 -0.267666      0.267666       320.952       321.220    
  61  0.430465     -0.842888      -81.1580       81.1580       316.751       397.909    
  62  0.712472     -0.339015      -32.6422       32.6422       324.085       356.727    
  63  0.303370      -1.19280      -114.850       114.850       326.643       441.493    
  64  0.676458E-01  -2.69347      -259.342       259.342       313.441       572.783    
loop,thermsimp(1:2)       26   23.7946       7.11184    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    115        641.28          0.88          1.12         23.09          0.03          0.04         25.16
Just calling func    0   0         25.16


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    641.28
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    96.2856               127
loop is:       26
neval is:      114
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       26      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    96.2856               127
loop is:       27
neval is:      114


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      127
neval,tstepnext:      114     127

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.818509     -0.200271      -19.2832       19.2832       313.293       332.576    
   2  0.309452      -1.17295      -112.938       112.938       318.875       431.813    
   3  0.303638      -1.19192      -114.765       114.765       316.129       430.894    
   4  0.754457     -0.281757      -27.1291       27.1291       313.763       340.892    
   5  0.623133     -0.472996      -45.5427       45.5427       320.952       366.495    
   6  0.989422E-01  -2.31322      -222.730       222.730       314.778       537.508    
   7  0.695126     -0.363662      -35.0154       35.0154       324.169       359.185    
   8  0.832210E-01  -2.48626      -239.390       239.390       314.391       553.782    
   9  0.869521     -0.139813      -13.4620       13.4620       318.706       332.168    
  10  0.488136     -0.717160      -69.0522       69.0522       324.833       393.885    
  11  0.579877     -0.544940      -52.4698       52.4698       311.670       364.140    
  12  0.480435     -0.733064      -70.5835       70.5835       318.584       389.167    
  13  0.792626     -0.232404      -22.3772       22.3772       309.584       331.961    
  14  0.870230     -0.138998      -13.3835       13.3835       315.962       329.345    
  15  0.886361     -0.120631      -11.6150       11.6150       323.034       334.649    
  16  0.358181      -1.02672      -98.8581       98.8581       316.394       415.252    
  17  0.560125     -0.579594      -55.8066       55.8066       321.141       376.947    
  18  0.546151     -0.604859      -58.2392       58.2392       300.470       358.709    
  19  0.732086     -0.311858      -30.0274       30.0274       321.570       351.598    
  20  0.590102     -0.527460      -50.7868       50.7868       322.062       372.849    
  21  0.867355     -0.142307      -13.7021       13.7021       324.085       337.787    
  22  0.749758     -0.288005      -27.7307       27.7307       326.333       354.063    
  23  0.721970     -0.325772      -31.3671       31.3671       324.811       356.178    
  24  0.596865     -0.516065      -49.6896       49.6896       335.383       385.072    
  25  0.878161     -0.129925      -12.5099       12.5099       321.980       334.490    
  26  0.558752E-01  -2.88463      -277.749       277.749       325.176       602.924    
  27  0.555543     -0.587810      -56.5976       56.5976       324.938       381.536    
  28  0.597562     -0.514897      -49.5771       49.5771       309.634       359.211    
  29  0.995329     -0.468202E-02 -0.450811      0.450811       322.041       322.491    
  30  0.206787      -1.57606      -151.752       151.752       316.751       468.504    
  31  0.645457     -0.437797      -42.1536       42.1536       327.018       369.172    
  32  0.871352     -0.137710      -13.2594       13.2594       330.093       343.353    
  33  0.701360     -0.354733      -34.1557       34.1557       324.389       358.545    
  34  0.936151     -0.659784E-01  -6.35277       6.35277       331.399       337.752    
  35  0.590091     -0.527478      -50.7885       50.7885       313.855       364.643    
  36  0.750433     -0.287105      -27.6441       27.6441       319.349       346.993    
  37  0.326255      -1.12007      -107.847       107.847       323.311       431.158    
  38  0.873133     -0.135668      -13.0629       13.0629       321.315       334.378    
  39  0.621627     -0.475415      -45.7756       45.7756       322.959       368.735    
  40  0.153041      -1.87705      -180.733       180.733       319.307       500.040    
  41  0.196696      -1.62610      -156.570       156.570       325.466       482.035    
  42  0.365028      -1.00778      -97.0348       97.0348       316.644       413.678    
  43  0.398429     -0.920226      -88.6045       88.6045       326.643       415.248    
  44  0.549691     -0.598399      -57.6172       57.6172       325.148       382.765    
  45  0.994179     -0.583795E-02 -0.562110      0.562110       315.117       315.679    
  46  0.147335E-01  -4.21763      -406.097       406.097       320.093       726.190    
  47  0.224737      -1.49282      -143.737       143.737       326.229       469.966    
  48  0.182172      -1.70281      -163.956       163.956       326.285       490.240    
  49  0.230919      -1.46569      -141.125       141.125       314.110       455.235    
  50  0.491818     -0.709647      -68.3287       68.3287       336.634       404.963    
  51  0.370754     -0.992217      -95.5361       95.5361       325.382       420.918    
  52  0.785622     -0.241279      -23.2317       23.2317       308.487       331.718    
  53  0.476284     -0.741742      -71.4190       71.4190       319.515       390.934    
  54  0.958799     -0.420736E-01  -4.05108       4.05108       320.176       324.228    
  55  0.305133      -1.18701      -114.292       114.292       320.290       434.582    
  56  0.270329      -1.30812      -125.953       125.953       320.415       446.368    
  57  0.130426      -2.03695      -196.129       196.129       326.099       522.227    
  58  0.222171      -1.50431      -144.843       144.843       340.979       485.822    
  59  0.233872      -1.45298      -139.901       139.901       313.441       453.342    
  60  0.916355E-02  -4.69252      -451.822       451.822       352.562       804.384    
  61  0.400634     -0.914708      -88.0731       88.0731       328.180       416.253    
  62  0.354647E-01  -3.33922      -321.518       321.518       311.913       633.431    
  63  0.453450     -0.790870      -76.1493       76.1493       320.267       396.417    
  64  0.411527     -0.887880      -85.4900       85.4900       641.282       726.772    
loop,thermsimp(1:2)       27   19.2832       112.938    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    116        306.25          0.88          1.10         23.12          0.00          0.05         25.16
Just calling func    0   0         25.15


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    117        298.57          0.88          1.09         23.16          0.00          0.05         25.18
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    298.57
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    96.2856               127
loop is:       27
neval is:      116
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       27      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    96.2856               127
loop is:       28
neval is:      116


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      127
neval,tstepnext:      116     127

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.808657     -0.212380      -20.4492       20.4492       315.117       335.566    
   2  0.162004E-01  -4.12272      -396.959       396.959       322.041       718.999    
   3  0.446841E-01  -3.10814      -299.269       299.269       320.176       619.445    
   4  0.757954     -0.277132      -26.6839       26.6839       315.962       342.646    
   5  0.525315     -0.643757      -61.9845       61.9845       308.487       370.471    
   6  0.229940      -1.46994      -141.534       141.534       309.584       451.118    
   7  0.273310E-01  -3.59973      -346.602       346.602       318.706       665.308    
   8  0.228047      -1.47820      -142.330       142.330       313.293       455.622    
   9  0.963384E-01  -2.33989      -225.297       225.297       321.315       546.612    
  10  0.495504     -0.702179      -67.6097       67.6097       321.980       389.590    
  11  0.930436     -0.721018E-01  -6.94236       6.94236       323.034       329.977    
  12  0.138744      -1.97513      -190.176       190.176       331.399       521.576    
  13  0.676381     -0.390999      -37.6476       37.6476       324.085       361.733    
  14  0.763696     -0.269586      -25.9572       25.9572       313.763       339.720    
  15  0.282468      -1.26419      -121.723       121.723       330.093       451.817    
  16  0.359172      -1.02395      -98.5919       98.5919       319.349       417.941    
  17  0.392258     -0.935834      -90.1073       90.1073       321.570       411.678    
  18  0.524686     -0.644955      -62.0998       62.0998       326.333       388.432    
  19  0.850465     -0.161972      -15.5956       15.5956       324.811       340.406    
  20  0.227056      -1.48256      -142.749       142.749       324.389       467.138    
  21  0.942039     -0.597082E-01  -5.74904       5.74904       300.470       306.219    
  22  0.807336     -0.214016      -20.6066       20.6066       324.169       344.776    
  23  0.345853      -1.06174      -102.230       102.230       309.634       411.865    
  24  0.762940     -0.270575      -26.0525       26.0525       311.670       337.723    
  25  0.589959     -0.527702      -50.8100       50.8100       313.855       364.665    
  26  0.563539     -0.573518      -55.2215       55.2215       320.952       376.173    
  27  0.812044     -0.208201      -20.0468       20.0468       322.959       343.006    
  28  0.735850     -0.306729      -29.5336       29.5336       327.018       356.552    
  29  0.396292     -0.925605      -89.1223       89.1223       322.062       411.184    
  30  0.623568     -0.472298      -45.4755       45.4755       321.141       366.616    
  31  0.925937     -0.769486E-01  -7.40904       7.40904       324.938       332.347    
  32  0.880074     -0.127749      -12.3004       12.3004       325.148       337.448    
  33  0.379958     -0.967693      -93.1749       93.1749       335.383       428.557    
  34  0.842940E-01  -2.47344      -238.157       238.157       318.584       556.741    
  35  0.199092      -1.61399      -155.404       155.404       319.515       474.918    
  36  0.625899     -0.468566      -45.1161       45.1161       324.833       369.949    
  37  0.888337     -0.118405      -11.4006       11.4006       320.267       331.668    
  38  0.959633     -0.412048E-01  -3.96743       3.96743       336.634       340.602    
  39  0.289813      -1.23852      -119.251       119.251       316.644       435.895    
  40  0.889440     -0.117163      -11.2811       11.2811       326.643       337.924    
  41  0.797260     -0.226575      -21.8159       21.8159       316.394       338.210    
  42  0.451097     -0.796073      -76.6503       76.6503       328.180       404.830    
  43  0.609578     -0.494989      -47.6603       47.6603       325.382       373.042    
  44  0.910850     -0.933770E-01  -8.99086       8.99086       316.129       325.120    
  45  0.448191     -0.802536      -77.2726       77.2726       323.311       400.584    
  46  0.831229     -0.184850      -17.7983       17.7983       318.875       336.673    
  47  0.246260      -1.40137      -134.932       134.932       320.290       455.222    
  48  0.280480      -1.27125      -122.403       122.403       320.415       442.819    
  49  0.161513      -1.82317      -175.545       175.545       313.441       488.986    
  50  0.337020      -1.08761      -104.721       104.721       314.110       418.832    
  51  0.160136      -1.83173      -176.369       176.369       316.751       493.120    
  52  0.268039      -1.31662      -126.772       126.772       326.229       453.001    
  53  0.907744     -0.967928E-01  -9.31975       9.31975       325.466       334.785    
  54  0.237998      -1.43549      -138.217       138.217       340.979       479.197    
  55  0.932063     -0.703547E-01  -6.77414       6.77414       326.285       333.059    
  56  0.304233      -1.18996      -114.576       114.576       319.307       433.883    
  57  0.471578     -0.751672      -72.3751       72.3751       326.099       398.474    
  58  0.985625     -0.144798E-01  -1.39420       1.39420       314.778       316.172    
  59  0.576194     -0.551311      -53.0833       53.0833       314.391       367.475    
  60  0.561463     -0.577209      -55.5769       55.5769       325.176       380.753    
  61  0.762775     -0.270792      -26.0734       26.0734       311.913       337.987    
  62  0.728042     -0.317397      -30.5607       30.5607       320.093       350.654    
  63  0.246589      -1.40003      -134.803       134.803       641.282       776.085    
  64  0.128678      -2.05044      -197.428       197.428       298.574       496.002    
loop,thermsimp(1:2)       28   20.4492       396.959    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    118        311.38          0.88          1.10         23.05          0.05          0.04         25.12
Just calling func    0   0         25.13


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    119        304.81          0.88          1.09         23.15          0.21          0.05         25.38
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    304.81
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    96.2856               127
loop is:       28
neval is:      118
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       28      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    96.2856               127
loop is:       29
neval is:      118


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      127
neval,tstepnext:      118     127

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.115886      -2.15515      -207.510       207.510       300.470       507.980    
   2  0.685048     -0.378267      -36.4216       36.4216       314.778       351.200    
   3  0.739526     -0.301746      -29.0538       29.0538       316.129       345.183    
   4  0.161448      -1.82357      -175.584       175.584       323.034       498.618    
   5  0.819608     -0.198929      -19.1540       19.1540       320.267       339.421    
   6  0.750679     -0.286777      -27.6125       27.6125       324.938       352.551    
   7  0.797409     -0.226388      -21.7979       21.7979       326.285       348.083    
   8  0.193123      -1.64443      -158.335       158.335       325.466       483.800    
   9  0.189346E-01  -3.96676      -381.942       381.942       315.117       697.059    
  10  0.715264     -0.335103      -32.2656       32.2656       318.875       351.140    
  11  0.384856     -0.954886      -91.9417       91.9417       325.148       417.089    
  12  0.268023      -1.31668      -126.778       126.778       311.670       438.448    
  13  0.777164     -0.252104      -24.2739       24.2739       326.643       350.917    
  14  0.707495E-01  -2.64861      -255.023       255.023       311.913       566.936    
  15  0.233610      -1.45410      -140.009       140.009       316.394       456.403    
  16  0.193057      -1.64477      -158.368       158.368       313.763       472.130    
  17  0.486879     -0.719739      -69.3005       69.3005       324.811       394.111    
  18  0.735370     -0.307381      -29.5964       29.5964       336.634       366.231    
  19  0.147509      -1.91387      -184.278       184.278       315.962       500.240    
  20  0.739111     -0.302308      -29.1078       29.1078       322.959       352.067    
  21  0.886241     -0.120766      -11.6280       11.6280       324.169       335.797    
  22  0.158672      -1.84092      -177.254       177.254       320.093       497.347    
  23  0.143658      -1.94032      -186.825       186.825       327.018       513.843    
  24  0.637431E-02  -5.05548      -486.770       486.770       324.085       810.855    
  25  0.753372     -0.283196      -27.2677       27.2677       313.855       341.123    
  26  0.555831     -0.587292      -56.5477       56.5477       321.141       377.688    
  27  0.280013      -1.27292      -122.564       122.564       314.391       436.955    
  28  0.811304     -0.209112      -20.1345       20.1345       324.833       344.968    
  29  0.972296E-02  -4.63327      -446.117       446.117       308.487       754.603    
  30  0.713459     -0.337631      -32.5090       32.5090       325.382       357.891    
  31  0.194621      -1.63670      -157.590       157.590       320.952       478.542    
  32  0.492587     -0.708083      -68.1782       68.1782       325.176       393.354    
  33  0.759094E-01  -2.57821      -248.245       248.245       326.333       574.577    
  34  0.494544     -0.704119      -67.7965       67.7965       321.980       389.777    
  35  0.297023      -1.21395      -116.886       116.886       326.099       442.984    
  36  0.429878E-01  -3.14684      -302.995       302.995       323.311       626.306    
  37  0.490931     -0.711452      -68.5025       68.5025       328.180       396.682    
  38  0.534417     -0.626578      -60.3304       60.3304       322.062       382.392    
  39  0.254967      -1.36662      -131.586       131.586       321.570       453.156    
  40  0.995945     -0.406335E-02 -0.391242      0.391242       309.634       310.026    
  41  0.428814E-01  -3.14932      -303.234       303.234       319.349       622.583    
  42  0.332915      -1.09987      -105.901       105.901       314.110       420.012    
  43  0.657266     -0.419666      -40.4078       40.4078       335.383       375.790    
  44  0.301071      -1.20041      -115.582       115.582       319.307       434.889    
  45  0.998178     -0.182349E-02 -0.175576      0.175576       316.644       316.819    
  46  0.533372     -0.628536      -60.5189       60.5189       320.415       380.934    
  47  0.244746      -1.40753      -135.525       135.525       309.584       445.109    
  48  0.345321      -1.06328      -102.379       102.379       330.093       432.472    
  49  0.339541      -1.08016      -104.004       104.004       326.229       430.233    
  50  0.456434     -0.784311      -75.5178       75.5178       320.290       395.808    
  51  0.510210     -0.672933      -64.7937       64.7937       313.293       378.087    
  52  0.678441     -0.387958      -37.3548       37.3548       324.389       361.744    
  53  0.802552     -0.219958      -21.1788       21.1788       319.515       340.693    
  54  0.542503     -0.611562      -58.8846       58.8846       340.979       399.864    
  55  0.887113     -0.119783      -11.5334       11.5334       313.441       324.974    
  56  0.631934     -0.458971      -44.1923       44.1923       316.751       360.944    
  57  0.776760     -0.252624      -24.3241       24.3241       298.574       322.898    
  58  0.764990     -0.267893      -25.7942       25.7942       331.399       357.194    
  59  0.329328      -1.11070      -106.944       106.944       321.315       428.259    
  60  0.304425      -1.18933      -114.515       114.515       318.584       433.099    
  61  0.992863     -0.716266E-02 -0.689661      0.689661       320.176       320.866    
  62  0.545111     -0.606767      -58.4229       58.4229       318.706       377.129    
  63  0.215175      -1.53630      -147.924       147.924       322.041       469.964    
  64  0.486479     -0.720562      -69.3797       69.3797       304.814       374.194    
loop,thermsimp(1:2)       29   207.510       36.4216    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    120        314.55          0.88          1.11         23.09          0.03          0.04         25.15
Just calling func    0   0         25.15


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    121        395.40          0.88          1.12         23.06          0.09          0.04         25.19
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  120    395.40        3.762    -0.9039      3.660     -100.0     0.3064    
                     -0.7443      2.518     -100.0      2.301      1.044    
                      0.9719     0.1440      2.400      0.000      0.000    
                      -1.019      0.000      0.000      0.000     -1.221    

                      -2.500      8463.     0.1224E+05 -430.6     -1667.    
                      -2.000     -3.686     -3.132     -5.092     -4.203    
                      -13.77     -2.719      1359.      0.000      3354.    

                       4764.      3323.      5073.      5329.      2500.    
                       4298.    -0.2691E-01-0.1152      0.000    -0.1405    
                     -0.1054    -0.1668     0.1464E-01  1.289     0.7045E-01

                     -0.6818     -1.044      0.000     0.1560     0.1417E-01
                      0.8541E-01-0.5186E-01-0.9438E-01-0.4568E-01-0.8723E-01
                     -0.9400E-01-0.1691E-01-0.3068     -1.044      0.000    

                     -0.3858     -1.295      2.738     -1.044      0.000    
                       0.000      9.096      9.178     -6602.     -4.000    
                     -0.6604E-01-0.6604E-01  8.978      8.962     -5220.    

                      -4.000    -0.6604E-01 0.1613      9.102      8.978    
                      -4945.     -4.000    -0.6604E-01-0.6604E-01  9.378    
                       8.778     -5220.     -2.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    314.55
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    96.2856               127
loop is:       29
neval is:      120
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       29      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    96.2856               127
loop is:       30
neval is:      120


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      127
neval,tstepnext:      120     127

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.396389E-01  -3.22794      -310.804       310.804       309.634       620.439    
   2  0.712690     -0.338709      -32.6128       32.6128       316.644       349.256    
   3  0.284498      -1.25703      -121.034       121.034       320.176       441.210    
   4  0.132414      -2.02182      -194.672       194.672       298.574       493.246    
   5  0.868558     -0.140920      -13.5686       13.5686       313.441       327.009    
   6  0.695240     -0.363498      -34.9996       34.9996       324.169       359.169    
   7  0.777362     -0.251849      -24.2494       24.2494       320.267       344.517    
   8  0.302494      -1.19569      -115.128       115.128       319.515       434.643    
   9  0.710188     -0.342225      -32.9514       32.9514       313.855       346.806    
  10  0.884530     -0.122698      -11.8141       11.8141       324.833       336.647    
  11  0.146421E-01  -4.22386      -406.696       406.696       316.129       722.825    
  12  0.834801     -0.180562      -17.3855       17.3855       326.285       343.670    
  13  0.414011     -0.881863      -84.9107       84.9107       326.643       411.554    
  14  0.655777     -0.421935      -40.6263       40.6263       318.875       359.501    
  15  0.530106     -0.634679      -61.1104       61.1104       314.778       375.888    
  16  0.325231      -1.12322      -108.150       108.150       322.959       431.109    
  17  0.293550      -1.22571      -118.018       118.018       324.938       442.956    
  18  0.194161      -1.63907      -157.819       157.819       331.399       489.218    
  19  0.589029E-01  -2.83186      -272.668       272.668       325.382       598.049    
  20  0.385142     -0.954143      -91.8702       91.8702       316.751       408.622    
  21  0.287461      -1.24667      -120.036       120.036       324.389       444.425    
  22  0.528518     -0.637678      -61.3992       61.3992       336.634       398.034    
  23  0.517042     -0.659630      -63.5129       63.5129       304.814       368.327    
  24  0.453375     -0.791035      -76.1652       76.1652       335.383       411.548    
  25  0.695596     -0.362986      -34.9503       34.9503       318.706       353.656    
  26  0.645178     -0.438228      -42.1951       42.1951       321.141       363.336    
  27  0.696076     -0.362297      -34.8840       34.8840       313.293       348.177    
  28  0.483522     -0.726659      -69.9667       69.9667       320.415       390.382    
  29  0.155396E-01  -4.16436      -400.968       400.968       322.062       723.030    
  30  0.883154     -0.124256      -11.9641       11.9641       321.980       333.944    
  31  0.525944     -0.642561      -61.8694       61.8694       325.176       387.045    
  32  0.746799     -0.291959      -28.1114       28.1114       324.811       352.922    
  33  0.458658     -0.779449      -75.0497       75.0497       320.290       395.340    
  34  0.614284     -0.487298      -46.9198       46.9198       328.180       375.100    
  35  0.581412     -0.542295      -52.2152       52.2152       340.979       393.195    
  36  0.820935     -0.197312      -18.9983       18.9983       325.148       344.146    
  37  0.852366     -0.159739      -15.3806       15.3806       314.110       329.491    
  38  0.527059     -0.640443      -61.6654       61.6654       321.315       382.980    
  39  0.376404     -0.977092      -94.0798       94.0798       326.229       420.309    
  40  0.729525E-01  -2.61795      -252.070       252.070       330.093       582.164    
  41  0.342258      -1.07219      -103.236       103.236       318.584       421.820    
  42  0.955065     -0.459761E-01  -4.42683       4.42683       319.307       323.734    
  43  0.508654E-01  -2.97857      -286.793       286.793       314.391       601.185    
  44  0.471716     -0.751379      -72.3469       72.3469       311.670       384.017    
  45  0.137118      -1.98691      -191.311       191.311       326.099       517.410    
  46  0.844826     -0.168625      -16.2361       16.2361       309.584       325.820    
  47  0.841708     -0.172322      -16.5921       16.5921       321.570       338.163    
  48  0.360396E-01  -3.32314      -319.970       319.970       316.394       636.364    
  49  0.953282     -0.478444E-01  -4.60672       4.60672       322.041       326.647    
  50  0.503408     -0.686355      -66.0860       66.0860       313.763       379.849    
  51  0.593854     -0.521122      -50.1765       50.1765       320.952       371.128    
  52  0.524910     -0.644528      -62.0587       62.0587       325.466       387.524    
  53  0.730244     -0.314377      -30.2699       30.2699       320.093       350.363    
  54  0.828919     -0.187632      -18.0663       18.0663       323.034       341.101    
  55  0.151629      -1.88632      -181.625       181.625       315.962       497.587    
  56  0.431672     -0.840089      -80.8884       80.8884       300.470       381.358    
  57  0.449333     -0.799990      -77.0275       77.0275       327.018       404.046    
  58  0.116759      -2.14764      -206.787       206.787       311.913       518.700    
  59  0.578588     -0.547165      -52.6841       52.6841       326.333       379.017    
  60  0.119282      -2.12627      -204.729       204.729       319.349       524.078    
  61  0.643272E-01  -2.74377      -264.186       264.186       323.311       587.497    
  62  0.906211     -0.984834E-01  -9.48253       9.48253       315.117       324.599    
  63  0.811859     -0.208429      -20.0687       20.0687       308.487       328.555    
  64  0.119821      -2.12175      -204.294       204.294       314.547       518.841    
loop,thermsimp(1:2)       30   310.804       32.6128    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    122        310.12          0.88          1.11         23.05          0.05          0.05         25.13
Just calling func    0   0         25.13


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    123        301.41          0.86          1.09         23.16          0.00          0.04         25.16
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    301.41
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    96.2856               127
loop is:       30
neval is:      122
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       30      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    96.2856               127
loop is:       31
neval is:      122


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      127
neval,tstepnext:      122     127

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.248581      -1.39199      -134.028       134.028       319.307       453.335    
   2  0.247647      -1.39575      -134.391       134.391       315.117       449.507    
   3  0.396263     -0.925678      -89.1295       89.1295       309.584       398.713    
   4  0.386461     -0.950723      -91.5409       91.5409       322.041       413.581    
   5  0.729285     -0.315691      -30.3964       30.3964       313.441       343.837    
   6  0.665866     -0.406667      -39.1562       39.1562       308.487       347.643    
   7  0.385122     -0.954194      -91.8751       91.8751       314.110       405.986    
   8  0.625701     -0.468883      -45.1466       45.1466       321.980       367.127    
   9  0.392668     -0.934792      -90.0070       90.0070       324.833       414.840    
  10  0.698356     -0.359026      -34.5691       34.5691       321.570       356.140    
  11  0.537534E-01  -2.92335      -281.476       281.476       323.034       604.510    
  12  0.289307      -1.24027      -119.420       119.420       326.285       445.705    
  13  0.138460E-01  -4.27976      -412.079       412.079       325.148       737.227    
  14  0.824110     -0.193451      -18.6265       18.6265       320.267       338.894    
  15  0.560983     -0.578065      -55.6593       55.6593       313.855       369.514    
  16  0.116087E-01  -4.45600      -429.049       429.049       313.293       742.341    
  17  0.218033      -1.52311      -146.653       146.653       316.644       463.297    
  18  0.893705E-01  -2.41497      -232.526       232.526       320.093       552.619    
  19  0.304886      -1.18782      -114.370       114.370       324.811       439.180    
  20  0.179833      -1.71573      -165.200       165.200       318.706       483.906    
  21  0.867378     -0.142281      -13.6996       13.6996       324.169       337.869    
  22  0.243287      -1.41351      -136.101       136.101       318.875       454.976    
  23  0.772489     -0.258138      -24.8549       24.8549       321.141       345.996    
  24  0.321011      -1.13628      -109.407       109.407       304.814       414.221    
  25  0.499417     -0.694314      -66.8524       66.8524       320.952       387.804    
  26  0.396806     -0.924307      -88.9975       88.9975       328.180       417.177    
  27  0.580203E-01  -2.84696      -274.121       274.121       314.778       588.899    
  28  0.854206     -0.157583      -15.1730       15.1730       326.333       341.506    
  29  0.914649     -0.892145E-01  -8.59007       8.59007       313.763       322.353    
  30  0.167601      -1.78617      -171.982       171.982       300.470       472.452    
  31  0.350137      -1.04943      -101.045       101.045       321.315       422.360    
  32  0.522932     -0.648304      -62.4223       62.4223       311.670       374.092    
  33  0.538779     -0.618450      -59.5478       59.5478       325.176       384.723    
  34  0.693066     -0.366629      -35.3011       35.3011       325.466       360.767    
  35  0.361961      -1.01622      -97.8472       97.8472       320.415       418.263    
  36  0.310665      -1.16904      -112.562       112.562       340.979       453.541    
  37  0.818669     -0.200076      -19.2644       19.2644       320.290       339.555    
  38  0.582861     -0.539807      -51.9756       51.9756       336.634       388.610    
  39  0.401728     -0.911979      -87.8104       87.8104       327.018       414.829    
  40  0.171089      -1.76557      -169.999       169.999       316.751       486.750    
  41  0.980174     -0.200248E-01  -1.92810       1.92810       335.383       337.311    
  42  0.495496     -0.702196      -67.6114       67.6114       326.643       394.255    
  43  0.436683     -0.828549      -79.7773       79.7773       326.229       406.006    
  44  0.910411     -0.938588E-01  -9.03725       9.03725       318.584       327.621    
  45  0.649932     -0.430887      -41.4882       41.4882       322.959       364.448    
  46  0.755226     -0.280738      -27.0310       27.0310       319.515       346.546    
  47  0.927352     -0.754221E-01  -7.26206       7.26206       320.176       327.439    
  48  0.848028     -0.164842      -15.8719       15.8719       324.938       340.810    
  49  0.146193      -1.92283      -185.141       185.141       324.389       509.530    
  50  0.571278     -0.559879      -53.9083       53.9083       331.399       385.308    
  51  0.244418      -1.40888      -135.655       135.655       298.574       434.228    
  52  0.979014     -0.212091E-01  -2.04213       2.04213       315.962       318.004    
  53  0.235747      -1.44500      -139.132       139.132       326.099       465.231    
  54  0.486927     -0.719642      -69.2911       69.2911       311.913       381.204    
  55  0.694010     -0.365269      -35.1701       35.1701       314.547       349.717    
  56  0.392305     -0.935716      -90.0960       90.0960       319.349       409.445    
  57  0.334373      -1.09550      -105.481       105.481       330.093       435.574    
  58  0.526166     -0.642138      -61.8286       61.8286       323.311       385.140    
  59  0.701539     -0.354479      -34.1312       34.1312       325.382       359.513    
  60  0.447845     -0.803307      -77.3469       77.3469       314.391       391.738    
  61  0.927856     -0.748784E-01  -7.20971       7.20971       309.634       316.844    
  62  0.453274     -0.791258      -76.1868       76.1868       316.394       392.581    
  63  0.291736      -1.23190      -118.615       118.615       316.129       434.744    
  64  0.497643E-02  -5.30304      -510.606       510.606       301.413       812.020    
loop,thermsimp(1:2)       31   134.028       134.391    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    124        336.13          0.88          1.12         23.15          0.02          0.04         25.20
Just calling func    0   0         25.20


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    125        386.19          0.88          1.13         23.11          0.01          0.04         25.16
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    336.13
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    96.2856               127
loop is:       31
neval is:      124
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       31      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    96.2856               127
loop is:       32
neval is:      124


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      127
neval,tstepnext:      124     127

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.996070     -0.393760E-02 -0.379134      0.379134       309.634       310.013    
   2  0.758684E-02  -4.88134      -470.003       470.003       315.962       785.965    
   3  0.404439     -0.905254      -87.1629       87.1629       313.763       400.925    
   4  0.947917E-01  -2.35607      -226.856       226.856       320.176       547.032    
   5  0.834417     -0.181022      -17.4298       17.4298       318.584       336.014    
   6  0.891274     -0.115104      -11.0828       11.0828       335.383       346.465    
   7  0.744451     -0.295108      -28.4147       28.4147       324.169       352.584    
   8  0.559638     -0.580466      -55.8905       55.8905       320.267       376.158    
   9  0.821724     -0.196351      -18.9057       18.9057       320.290       339.196    
  10  0.847292     -0.165710      -15.9554       15.9554       324.938       340.894    
  11  0.661676     -0.412979      -39.7639       39.7639       326.333       366.097    
  12  0.993427     -0.659478E-02 -0.634982      0.634982       313.441       314.076    
  13  0.425996     -0.853326      -82.1630       82.1630       321.141       403.304    
  14  0.673132     -0.395813      -38.1111       38.1111       319.515       357.626    
  15  0.234810      -1.44898      -139.516       139.516       308.487       448.002    
  16  0.122926      -2.09617      -201.831       201.831       314.547       516.378    
  17  0.523553     -0.647118      -62.3081       62.3081       321.570       383.879    
  18  0.959317     -0.415333E-01  -3.99906       3.99906       325.382       329.381    
  19  0.321726      -1.13406      -109.193       109.193       325.466       434.659    
  20  0.493112     -0.707018      -68.0756       68.0756       322.959       391.035    
  21  0.416134     -0.876748      -84.4182       84.4182       321.980       406.398    
  22  0.409432     -0.892985      -85.9815       85.9815       313.855       399.836    
  23  0.657956     -0.418617      -40.3068       40.3068       311.670       351.977    
  24  0.904324     -0.100567      -9.68319       9.68319       311.913       321.596    
  25  0.714426     -0.336276      -32.3786       32.3786       325.176       357.554    
  26  0.150521      -1.89365      -182.331       182.331       323.311       505.642    
  27  0.758740     -0.276096      -26.5841       26.5841       331.399       357.983    
  28  0.359105      -1.02414      -98.6099       98.6099       320.952       419.562    
  29  0.666937     -0.405060      -39.0014       39.0014       336.634       375.636    
  30  0.343213      -1.06940      -102.968       102.968       314.391       417.360    
  31  0.484849     -0.723918      -69.7029       69.7029       316.394       386.097    
  32  0.874661     -0.133919      -12.8945       12.8945       326.643       339.538    
  33  0.994710     -0.530415E-02 -0.510713      0.510713       309.584       310.095    
  34  0.821923     -0.196109      -18.8825       18.8825       314.110       332.993    
  35  0.954096E-02  -4.65216      -447.936       447.936       326.229       774.165    
  36  0.240030      -1.42699      -137.398       137.398       319.349       456.748    
  37  0.279003      -1.27653      -122.912       122.912       322.041       444.952    
  38  0.553830     -0.590898      -56.8950       56.8950       304.814       361.709    
  39  0.400809     -0.914271      -88.0311       88.0311       327.018       415.049    
  40  0.146125      -1.92330      -185.186       185.186       324.833       510.019    
  41  0.811879     -0.208403      -20.0662       20.0662       328.180       348.246    
  42  0.349149      -1.05226      -101.317       101.317       320.415       421.733    
  43  0.897422     -0.108229      -10.4209       10.4209       321.315       331.736    
  44  0.114492      -2.16725      -208.675       208.675       298.574       507.249    
  45  0.831901E-01  -2.48663      -239.426       239.426       316.129       555.556    
  46  0.721169     -0.326882      -31.4740       31.4740       330.093       361.567    
  47  0.801724     -0.220991      -21.2782       21.2782       324.811       346.089    
  48  0.466569     -0.762349      -73.4032       73.4032       326.285       399.688    
  49  0.103404      -2.26911      -218.483       218.483       315.117       533.599    
  50  0.417206     -0.874175      -84.1704       84.1704       319.307       403.478    
  51  0.267666      -1.31802      -126.906       126.906       340.979       467.885    
  52  0.670232     -0.400131      -38.5268       38.5268       318.875       357.402    
  53  0.161265      -1.82470      -175.693       175.693       316.644       492.336    
  54  0.414706     -0.880185      -84.7491       84.7491       326.099       410.848    
  55  0.501015     -0.691119      -66.5448       66.5448       300.470       367.014    
  56  0.516090     -0.661474      -63.6904       63.6904       318.706       382.397    
  57  0.424740     -0.856278      -82.4472       82.4472       316.751       399.199    
  58  0.303796      -1.19140      -114.714       114.714       324.389       439.103    
  59  0.803455     -0.218834      -21.0706       21.0706       320.093       341.164    
  60  0.416256     -0.876456      -84.3900       84.3900       314.778       399.168    
  61  0.760689     -0.273531      -26.3370       26.3370       323.034       349.371    
  62  0.995587     -0.442238E-02 -0.425811      0.425811       325.148       325.574    
  63  0.961804     -0.389449E-01  -3.74983       3.74983       313.293       317.043    
  64  0.321618      -1.13439      -109.226       109.226       336.128       445.354    
loop,thermsimp(1:2)       32  0.379134       470.003    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    126        323.80          0.87          1.10         23.05          0.07          0.05         25.13
Just calling func    0   0         25.13


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    127        338.65          0.88          1.09         23.11          0.05          0.05         25.18
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    323.80
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    96.2856               127
loop is:       32
neval is:      126
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       32      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    96.2856               127
loop is:       33
neval is:      126


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      127
neval,tstepnext:      126     127

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.455591     -0.786160      -75.6959       75.6959       309.634       385.330    
   2  0.588265E-01  -2.83316      -272.793       272.793       309.584       582.377    
   3  0.787103E-01  -2.54198      -244.756       244.756       313.441       558.197    
   4  0.597713     -0.514644      -49.5528       49.5528       313.293       362.846    
   5  0.110741      -2.20056      -211.882       211.882       311.913       523.795    
   6  0.677861     -0.388813      -37.4370       37.4370       325.148       362.585    
   7  0.307724      -1.17855      -113.477       113.477       325.382       438.859    
   8  0.550587     -0.596770      -57.4604       57.4604       321.315       378.775    
   9  0.601295     -0.508669      -48.9775       48.9775       314.110       363.088    
  10  0.487121     -0.719243      -69.2527       69.2527       318.584       387.836    
  11  0.146295      -1.92213      -185.073       185.073       320.290       505.364    
  12  0.714050     -0.336802      -32.4291       32.4291       326.643       359.072    
  13  0.723089     -0.324223      -31.2180       31.2180       324.938       356.156    
  14  0.805432     -0.216376      -20.8339       20.8339       320.093       340.927    
  15  0.123280      -2.09329      -201.554       201.554       324.811       526.365    
  16  0.853039     -0.158950      -15.3046       15.3046       335.383       350.687    
  17  0.288289      -1.24379      -119.759       119.759       328.180       447.939    
  18  0.705126     -0.349379      -33.6402       33.6402       323.034       356.674    
  19  0.772420     -0.258227      -24.8635       24.8635       311.670       336.534    
  20  0.962845     -0.378631E-01  -3.64567       3.64567       324.169       327.815    
  21  0.245802      -1.40323      -135.111       135.111       318.875       453.985    
  22  0.752702     -0.284087      -27.3534       27.3534       325.176       352.529    
  23  0.729896     -0.314853      -30.3158       30.3158       319.515       349.830    
  24  0.869278     -0.140092      -13.4889       13.4889       331.399       344.888    
  25  0.597817E-01  -2.81706      -271.242       271.242       330.093       601.335    
  26  0.984108     -0.160195E-01  -1.54245       1.54245       304.814       306.356    
  27  0.278288      -1.27910      -123.159       123.159       326.333       449.491    
  28  0.588278     -0.530555      -51.0848       51.0848       300.470       351.554    
  29  0.807614     -0.213671      -20.5735       20.5735       336.634       357.208    
  30  0.428679     -0.847047      -81.5584       81.5584       320.267       401.826    
  31  0.452991     -0.791883      -76.2469       76.2469       318.706       394.953    
  32  0.678742     -0.387514      -37.3120       37.3120       321.570       358.882    
  33  0.504500     -0.684188      -65.8774       65.8774       316.394       382.272    
  34  0.894800     -0.111155      -10.7026       10.7026       322.959       333.662    
  35  0.854311     -0.157461      -15.1612       15.1612       314.778       329.939    
  36  0.756230     -0.279410      -26.9031       26.9031       316.751       343.654    
  37  0.744369     -0.295219      -28.4253       28.4253       326.285       354.710    
  38  0.435758     -0.830668      -79.9813       79.9813       313.855       393.836    
  39  0.677387     -0.389513      -37.5045       37.5045       313.763       351.267    
  40  0.504989     -0.683219      -65.7841       65.7841       321.141       386.925    
  41  0.325676      -1.12185      -108.018       108.018       319.307       427.325    
  42  0.147207      -1.91591      -184.475       184.475       321.980       506.455    
  43  0.432041     -0.839234      -80.8061       80.8061       326.099       406.905    
  44  0.615972     -0.484555      -46.6556       46.6556       327.018       373.674    
  45  0.150867      -1.89136      -182.110       182.110       314.391       496.502    
  46  0.464307     -0.767210      -73.8712       73.8712       320.952       394.823    
  47  0.379753     -0.968234      -93.2269       93.2269       320.415       413.642    
  48  0.886192     -0.120822      -11.6334       11.6334       325.466       337.099    
  49  0.231751E-01  -3.76468      -362.484       362.484       324.389       686.873    
  50  0.257662      -1.35611      -130.573       130.573       322.041       452.614    
  51  0.470381E-01  -3.05680      -294.325       294.325       336.128       630.454    
  52  0.972366     -0.280233E-01  -2.69824       2.69824       308.487       311.185    
  53  0.242054      -1.41860      -136.590       136.590       319.349       455.940    
  54  0.660577     -0.414642      -39.9241       39.9241       340.979       380.903    
  55  0.234396      -1.45074      -139.685       139.685       316.644       456.329    
  56  0.891547     -0.114797      -11.0533       11.0533       323.311       334.365    
  57  0.408879E-01  -3.19692      -307.817       307.817       298.574       606.391    
  58  0.577007     -0.549901      -52.9475       52.9475       324.833       377.781    
  59  0.851462     -0.160801      -15.4828       15.4828       314.547       330.030    
  60  0.733240     -0.310283      -29.8758       29.8758       315.117       344.992    
  61  0.219002E-01  -3.82126      -367.932       367.932       320.176       688.108    
  62  0.293643      -1.22539      -117.987       117.987       316.129       434.117    
  63  0.552105     -0.594017      -57.1952       57.1952       326.229       383.424    
  64  0.638007E-01  -2.75199      -264.977       264.977       323.798       588.775    
loop,thermsimp(1:2)       33   75.6959       272.793    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    128        313.26          0.89          1.12         23.13          0.20          0.04         25.38
Just calling func    0   0         25.38


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    129        308.72          0.89          1.10         23.16          0.00          0.04         25.20
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    308.72
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    96.2856               127
loop is:       33
neval is:      128
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       33      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    96.2856               127
loop is:       34
neval is:      128


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 




neval>tstepnex so lower away!t
---> lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
     new SAtemp,tstepnext are :    48.1428               190

 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      190
neval,tstepnext:      128     190

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.961594E-01  -2.34175      -112.738       112.738       304.814       417.552    
   2  0.298819      -1.20792      -58.1526       58.1526       308.487       366.639    
   3  0.706385     -0.347595      -16.7342       16.7342       324.169       340.903    
   4  0.958764     -0.421100E-01  -2.02729       2.02729       314.778       316.805    
   5  0.306496      -1.18255      -56.9313       56.9313       314.547       371.478    
   6  0.905447     -0.993270E-01  -4.78188       4.78188       322.959       327.741    
   7  0.234113      -1.45195      -69.9009       69.9009       323.311       393.212    
   8  0.704141     -0.350777      -16.8874       16.8874       311.670       328.558    
   9  0.908200     -0.962902E-01  -4.63568       4.63568       325.466       330.101    
  10  0.656383     -0.421011      -20.2686       20.2686       320.093       340.362    
  11  0.967894     -0.326327E-01  -1.57103       1.57103       316.751       318.322    
  12  0.754670     -0.281475      -13.5510       13.5510       331.399       344.950    
  13  0.488960     -0.715475      -34.4449       34.4449       315.117       349.561    
  14  0.451577     -0.795009      -38.2739       38.2739       319.515       357.789    
  15  0.387599E-01  -3.25037      -156.482       156.482       335.383       491.864    
  16  0.210942E-02  -6.16134      -296.624       296.624       313.763       610.387    
  17  0.656530     -0.420787      -20.2578       20.2578       300.470       320.727    
  18  0.181246      -1.70790      -82.2231       82.2231       325.176       407.399    
  19  0.758879     -0.275913      -13.2832       13.2832       326.285       339.568    
  20  0.392052     -0.936362      -45.0791       45.0791       324.938       370.017    
  21  0.406710     -0.899654      -43.3118       43.3118       323.034       366.346    
  22  0.830107     -0.186201      -8.96422       8.96422       336.634       345.599    
  23  0.311833      -1.16529      -56.1002       56.1002       321.570       377.671    
  24  0.945407     -0.561396E-01  -2.70272       2.70272       326.643       329.346    
  25  0.303319      -1.19297      -57.4329       57.4329       325.148       382.581    
  26  0.284230      -1.25797      -60.5622       60.5622       313.293       373.855    
  27  0.292492      -1.22932      -59.1827       59.1827       314.110       373.293    
  28  0.401496     -0.912557      -43.9330       43.9330       327.018       370.951    
  29  0.379648     -0.968510      -46.6268       46.6268       324.833       371.460    
  30  0.723496E-01  -2.62625      -126.435       126.435       321.315       447.749    
  31  0.940338     -0.615157E-01  -2.96154       2.96154       340.979       343.941    
  32  0.766237     -0.266264      -12.8187       12.8187       316.394       329.213    
  33  0.984920     -0.151946E-01 -0.731510      0.731510       326.229       326.960    
  34  0.552546     -0.593218      -28.5592       28.5592       309.634       338.193    
  35  0.735557     -0.307128      -14.7860       14.7860       321.141       335.927    
  36  0.142195      -1.95056      -93.9052       93.9052       318.584       412.489    
  37  0.304783      -1.18816      -57.2011       57.2011       313.855       371.056    
  38  0.868582     -0.140894      -6.78302       6.78302       320.952       327.735    
  39  0.382741     -0.960397      -46.2362       46.2362       318.706       364.942    
  40  0.273812      -1.29531      -62.3600       62.3600       320.267       382.627    
  41  0.601920     -0.507631      -24.4388       24.4388       326.099       350.537    
  42  0.827744     -0.189051      -9.10146       9.10146       320.415       329.517    
  43  0.881186E-01  -2.42907      -116.942       116.942       319.307       436.249    
  44  0.386744     -0.949994      -45.7353       45.7353       316.129       361.865    
  45  0.852312     -0.159803      -7.69336       7.69336       325.382       333.075    
  46  0.830189     -0.186102      -8.95949       8.95949       328.180       337.139    
  47  0.216531      -1.53002      -73.6595       73.6595       326.333       399.992    
  48  0.835540     -0.179677      -8.65016       8.65016       322.041       330.691    
  49  0.962152     -0.385824E-01  -1.85747       1.85747       318.875       320.732    
  50  0.866477     -0.143320      -6.89981       6.89981       319.349       326.249    
  51  0.640111     -0.446114      -21.4771       21.4771       316.644       338.121    
  52  0.103467      -2.26850      -109.212       109.212       314.391       423.604    
  53  0.746080     -0.292923      -14.1021       14.1021       320.290       334.393    
  54  0.154266      -1.86908      -89.9826       89.9826       321.980       411.963    
  55  0.479981     -0.734008      -35.3372       35.3372       311.913       347.250    
  56  0.641740     -0.443572      -21.3548       21.3548       324.811       346.166    
  57  0.282342      -1.26463      -60.8830       60.8830       313.441       374.324    
  58  0.691857     -0.368376      -17.7346       17.7346       309.584       327.319    
  59  0.774818     -0.255127      -12.2825       12.2825       323.798       336.081    
  60  0.950647     -0.506124E-01  -2.43662       2.43662       330.093       332.530    
  61  0.946272E-01  -2.35781      -113.512       113.512       298.574       412.085    
  62  0.936976     -0.650979E-01  -3.13399       3.13399       336.128       339.262    
  63  0.339755      -1.07953      -51.9717       51.9717       324.389       376.361    
  64  0.781991     -0.245913      -11.8389       11.8389       308.719       320.558    
loop,thermsimp(1:2)       34   112.738       58.1526    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    130        320.14          0.86          1.10         23.08          0.05          0.04         25.12
Just calling func    0   0         25.13


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    131        347.39          0.88          1.11         23.13          0.00          0.04         25.16
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    320.14
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    48.1428               190
loop is:       34
neval is:      130
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       34      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    48.1428               190
loop is:       35
neval is:      130


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      190
neval,tstepnext:      130     190

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.348096      -1.05528      -50.8040       50.8040       314.778       365.582    
   2  0.175000      -1.74297      -83.9115       83.9115       316.751       400.663    
   3  0.131587      -2.02809      -97.6379       97.6379       308.719       406.357    
   4  0.301717      -1.19826      -57.6878       57.6878       300.470       358.157    
   5  0.166877      -1.79050      -86.1997       86.1997       318.875       405.074    
   6  0.481073     -0.731736      -35.2278       35.2278       319.349       354.577    
   7  0.706381     -0.347600      -16.7345       16.7345       326.229       342.963    
   8  0.702617     -0.352943      -16.9917       16.9917       309.584       326.576    
   9  0.552795     -0.592767      -28.5375       28.5375       320.952       349.489    
  10  0.495420     -0.702349      -33.8130       33.8130       322.959       356.773    
  11  0.479343     -0.735339      -35.4013       35.4013       311.670       347.071    
  12  0.462659     -0.770765      -37.1068       37.1068       316.394       353.501    
  13  0.631315E-01  -2.76253      -132.996       132.996       326.643       459.639    
  14  0.785681     -0.241205      -11.6123       11.6123       320.415       332.028    
  15  0.767932     -0.264055      -12.7123       12.7123       325.466       338.178    
  16  0.262689E-01  -3.63937      -175.209       175.209       322.041       497.250    
  17  0.871353     -0.137708      -6.62965       6.62965       330.093       336.723    
  18  0.618350     -0.480701      -23.1423       23.1423       325.382       348.524    
  19  0.196090      -1.62918      -78.4334       78.4334       320.290       398.724    
  20  0.925050     -0.779078E-01  -3.75070       3.75070       321.141       324.891    
  21  0.903269     -0.101735      -4.89781       4.89781       323.798       328.696    
  22  0.958828     -0.420436E-01  -2.02409       2.02409       328.180       330.204    
  23  0.969274     -0.312081E-01  -1.50244       1.50244       316.644       318.146    
  24  0.313932      -1.15858      -55.7772       55.7772       309.634       365.411    
  25  0.106324      -2.24126      -107.901       107.901       336.128       444.029    
  26  0.718705     -0.330304      -15.9018       15.9018       326.285       342.186    
  27  0.751116     -0.286195      -13.7782       13.7782       320.093       333.871    
  28  0.996391     -0.361592E-02 -0.174080      0.174080       324.169       324.343    
  29  0.313387      -1.16032      -55.8609       55.8609       340.979       396.840    
  30  0.305057      -1.18726      -57.1578       57.1578       331.399       388.557    
  31  0.408833     -0.894447      -43.0612       43.0612       336.634       379.696    
  32  0.589856     -0.527877      -25.4135       25.4135       324.811       350.224    
  33  0.808683     -0.212349      -10.2231       10.2231       311.913       322.136    
  34  0.481635     -0.730569      -35.1716       35.1716       315.117       350.288    
  35  0.677481     -0.389374      -18.7455       18.7455       326.099       344.844    
  36  0.673605     -0.395111      -19.0217       19.0217       319.515       338.536    
  37  0.409374E-01  -3.19571      -153.850       153.850       316.129       469.980    
  38  0.362144      -1.01571      -48.8993       48.8993       318.706       367.605    
  39  0.364718E-01  -3.31122      -159.411       159.411       323.034       482.445    
  40  0.280272      -1.27199      -61.2373       61.2373       308.487       369.724    
  41  0.532528     -0.630120      -30.3357       30.3357       324.938       355.274    
  42  0.901591     -0.103595      -4.98734       4.98734       327.018       332.006    
  43  0.262858      -1.33614      -64.3255       64.3255       313.855       378.180    
  44  0.168755      -1.77931      -85.6609       85.6609       324.833       410.494    
  45  0.504619     -0.683952      -32.9273       32.9273       314.547       347.474    
  46  0.900650     -0.104639      -5.03760       5.03760       314.110       319.148    
  47  0.438495     -0.824406      -39.6892       39.6892       313.293       352.982    
  48  0.984597     -0.155233E-01 -0.747336      0.747336       313.441       314.188    
  49  0.469739     -0.755579      -36.3757       36.3757       324.389       360.765    
  50  0.252111      -1.37789      -66.3352       66.3352       321.570       387.906    
  51  0.764692     -0.268282      -12.9159       12.9159       325.148       338.064    
  52  0.848445     -0.164351      -7.91229       7.91229       320.267       328.180    
  53  0.705739     -0.348509      -16.7782       16.7782       323.311       340.090    
  54  0.449895     -0.798741      -38.4536       38.4536       326.333       364.786    
  55  0.742135     -0.298224      -14.3573       14.3573       325.176       339.533    
  56  0.305311      -1.18642      -57.1178       57.1178       321.980       379.098    
  57  0.798408     -0.225136      -10.8387       10.8387       298.574       309.412    
  58  0.807590     -0.213700      -10.2881       10.2881       318.584       328.872    
  59  0.768432     -0.263404      -12.6810       12.6810       304.814       317.495    
  60  0.895397     -0.110488      -5.31922       5.31922       314.391       319.711    
  61  0.585964     -0.534497      -25.7322       25.7322       319.307       345.039    
  62  0.785258     -0.241743      -11.6382       11.6382       321.315       332.953    
  63  0.311021      -1.16790      -56.2257       56.2257       335.383       391.608    
  64  0.803571     -0.218690      -10.5283       10.5283       320.138       330.666    
loop,thermsimp(1:2)       35   50.8040       83.9115    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    132        312.99          0.88          1.11         23.09          0.04          0.04         25.16
Just calling func    0   0         25.16


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    133        306.19          0.88          1.10         23.12          0.05          0.05         25.20
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    306.19
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    48.1428               190
loop is:       35
neval is:      132
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       35      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    48.1428               190
loop is:       36
neval is:      132


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      190
neval,tstepnext:      132     190

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.757905E-01  -2.57978      -124.198       124.198       298.574       422.772    
   2  0.962370     -0.383559E-01  -1.84656       1.84656       313.441       315.287    
   3  0.356737      -1.03076      -49.6234       49.6234       304.814       354.437    
   4  0.884319     -0.122937      -5.91854       5.91854       316.644       322.562    
   5  0.919725E-01  -2.38627      -114.881       114.881       314.110       428.992    
   6  0.900184     -0.105156      -5.06250       5.06250       314.391       319.454    
   7  0.390055     -0.941468      -45.3249       45.3249       311.913       357.238    
   8  0.263976      -1.33190      -64.1212       64.1212       324.169       388.291    
   9  0.898455     -0.107078      -5.15505       5.15505       321.141       326.296    
  10  0.697674E-01  -2.66259      -128.184       128.184       309.584       437.768    
  11  0.888938     -0.117727      -5.66772       5.66772       320.267       325.935    
  12  0.824147     -0.193406      -9.31110       9.31110       323.798       333.109    
  13  0.941109     -0.606968E-01  -2.92211       2.92211       318.584       321.506    
  14  0.885654     -0.121429      -5.84592       5.84592       328.180       334.026    
  15  0.798208     -0.225386      -10.8507       10.8507       320.138       330.988    
  16  0.365331      -1.00695      -48.4775       48.4775       327.018       375.496    
  17  0.519490     -0.654907      -31.5290       31.5290       320.415       351.944    
  18  0.922741     -0.804065E-01  -3.87099       3.87099       321.315       325.186    
  19  0.877443     -0.130744      -6.29436       6.29436       320.093       326.388    
  20  0.584844     -0.536410      -25.8243       25.8243       330.093       355.918    
  21  0.671390     -0.398406      -19.1804       19.1804       325.148       344.328    
  22  0.203335      -1.59290      -76.6866       76.6866       325.466       402.152    
  23  0.330236E-01  -3.41053      -164.193       164.193       319.515       483.707    
  24  0.879725     -0.128146      -6.16932       6.16932       325.176       331.345    
  25  0.833976     -0.181550      -8.74035       8.74035       323.311       332.052    
  26  0.901698     -0.103475      -4.98158       4.98158       326.285       331.266    
  27  0.692847     -0.366946      -17.6658       17.6658       326.229       343.895    
  28  0.550572     -0.596797      -28.7315       28.7315       326.099       354.830    
  29  0.158383E-01  -4.14532      -199.567       199.567       319.307       518.874    
  30  0.503246     -0.686677      -33.0585       33.0585       311.670       344.729    
  31  0.648812     -0.432612      -20.8272       20.8272       314.547       335.374    
  32  0.306980      -1.18097      -56.8553       56.8553       325.382       382.237    
  33  0.205188      -1.58383      -76.2500       76.2500       320.952       397.202    
  34  0.265146      -1.32748      -63.9084       63.9084       324.811       388.719    
  35  0.272730E-01  -3.60186      -173.403       173.403       315.117       488.520    
  36  0.262990E-01  -3.63823      -175.154       175.154       313.293       488.447    
  37  0.492753     -0.707748      -34.0730       34.0730       316.394       350.467    
  38  0.255065      -1.36624      -65.7743       65.7743       319.349       385.124    
  39  0.623259     -0.472794      -22.7616       22.7616       324.938       347.700    
  40  0.949296     -0.520343E-01  -2.50508       2.50508       322.959       325.465    
  41  0.982394     -0.177630E-01 -0.855159      0.855159       300.470       301.325    
  42  0.566450     -0.568366      -27.3627       27.3627       324.389       351.752    
  43  0.557613     -0.584090      -28.1197       28.1197       326.333       354.452    
  44  0.900731     -0.104549      -5.03327       5.03327       309.634       314.668    
  45  0.671339     -0.398481      -19.1840       19.1840       314.778       333.962    
  46  0.650454     -0.430084      -20.7054       20.7054       318.706       339.412    
  47  0.749315     -0.288595      -13.8938       13.8938       308.487       322.381    
  48  0.667497     -0.404220      -19.4603       19.4603       313.855       333.315    
  49  0.132870      -2.01838      -97.1707       97.1707       321.980       419.151    
  50  0.964787     -0.358480E-01  -1.72582       1.72582       336.634       338.360    
  51  0.835780     -0.179390      -8.63631       8.63631       321.570       330.207    
  52  0.601609     -0.508148      -24.4636       24.4636       331.399       355.863    
  53  0.937321     -0.647298E-01  -3.11627       3.11627       335.383       338.499    
  54  0.467877     -0.759550      -36.5669       36.5669       340.979       377.546    
  55  0.953249     -0.478789E-01  -2.30502       2.30502       320.290       322.596    
  56  0.827724     -0.189076      -9.10263       9.10263       316.751       325.854    
  57  0.624780     -0.470355      -22.6442       22.6442       318.875       341.519    
  58  0.821535     -0.196581      -9.46393       9.46393       308.719       318.183    
  59  0.625285     -0.469548      -22.6054       22.6054       324.833       347.439    
  60  0.581213     -0.542638      -26.1241       26.1241       336.128       362.252    
  61  0.855886E-01  -2.45820      -118.345       118.345       326.643       444.988    
  62  0.262334      -1.33814      -64.4215       64.4215       316.129       380.551    
  63  0.978265     -0.219749E-01  -1.05793       1.05793       323.034       324.092    
  64  0.600842     -0.509423      -24.5250       24.5250       306.186       330.711    
loop,thermsimp(1:2)       36   124.198       1.84656    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    134        319.48          0.88          1.12         23.13          0.00          0.04         25.17
Just calling func    0   0         25.17


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    135        332.35          0.88          1.12         23.12          0.00          0.04         25.16
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    319.48
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    48.1428               190
loop is:       36
neval is:      134
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       36      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    48.1428               190
loop is:       37
neval is:      134


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      190
neval,tstepnext:      134     190

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.939165     -0.627646E-01  -3.02166       3.02166       300.470       303.491    
   2  0.112532E-01  -4.48710      -216.021       216.021       309.634       525.656    
   3  0.907929     -0.965891E-01  -4.65007       4.65007       313.441       318.091    
   4  0.478640     -0.736807      -35.4719       35.4719       308.719       344.191    
   5  0.737686     -0.304237      -14.6468       14.6468       314.391       329.038    
   6  0.114880      -2.16387      -104.175       104.175       318.584       422.758    
   7  0.309837      -1.17171      -56.4093       56.4093       308.487       364.896    
   8  0.469091     -0.756958      -36.4421       36.4421       316.644       353.086    
   9  0.721151     -0.326907      -15.7382       15.7382       320.290       336.029    
  10  0.557251     -0.584740      -28.1510       28.1510       323.034       351.185    
  11  0.581534     -0.542085      -26.0975       26.0975       321.315       347.412    
  12  0.501412     -0.690326      -33.2342       33.2342       322.959       356.194    
  13  0.783062     -0.244543      -11.7730       11.7730       316.751       328.524    
  14  0.571322     -0.559803      -26.9505       26.9505       320.267       347.218    
  15  0.902729E-01  -2.40492      -115.779       115.779       321.141       436.920    
  16  0.695403E-01  -2.66585      -128.341       128.341       320.093       448.435    
  17  0.128872      -2.04894      -98.6416       98.6416       321.570       420.212    
  18  0.940828E-01  -2.36358      -113.789       113.789       306.186       419.975    
  19  0.326350      -1.11979      -53.9096       53.9096       320.138       374.047    
  20  0.102915      -2.27385      -109.470       109.470       326.285       435.754    
  21  0.324524      -1.12540      -54.1797       54.1797       325.176       379.355    
  22  0.259454      -1.34918      -64.9531       64.9531       323.311       388.264    
  23  0.782812     -0.244863      -11.7884       11.7884       323.798       335.587    
  24  0.383591     -0.958178      -46.1294       46.1294       313.855       359.984    
  25  0.626880     -0.466999      -22.4826       22.4826       314.778       337.261    
  26  0.292269      -1.23008      -59.2194       59.2194       328.180       387.399    
  27  0.448852     -0.801062      -38.5654       38.5654       314.547       353.112    
  28  0.685432     -0.377706      -18.1838       18.1838       336.634       354.818    
  29  0.995399     -0.461118E-02 -0.221995      0.221995       335.383       335.605    
  30  0.163323      -1.81203      -87.2361       87.2361       318.706       405.942    
  31  0.952940     -0.482038E-01  -2.32066       2.32066       318.875       321.195    
  32  0.861306     -0.149306      -7.18799       7.18799       326.229       333.417    
  33  0.587276     -0.532261      -25.6245       25.6245       325.148       350.772    
  34  0.908704     -0.957357E-01  -4.60898       4.60898       311.670       316.279    
  35  0.585935     -0.534546      -25.7345       25.7345       324.833       350.568    
  36  0.429836     -0.844352      -40.6495       40.6495       324.938       365.588    
  37  0.726203     -0.319926      -15.4021       15.4021       316.394       331.796    
  38  0.151145E-01  -4.19210      -201.819       201.819       324.389       526.208    
  39  0.927869     -0.748646E-01  -3.60419       3.60419       320.415       324.020    
  40  0.961645     -0.391099E-01  -1.88286       1.88286       304.814       306.697    
  41  0.253977      -1.37051      -65.9802       65.9802       326.333       392.313    
  42  0.768038     -0.263917      -12.7057       12.7057       326.099       338.804    
  43  0.569441E-01  -2.86569      -137.962       137.962       331.399       469.361    
  44  0.103919      -2.26415      -109.002       109.002       330.093       439.096    
  45  0.312226      -1.16403      -56.0395       56.0395       311.913       367.953    
  46  0.473636E-02  -5.35249      -257.684       257.684       336.128       593.812    
  47  0.192099      -1.64975      -79.4233       79.4233       327.018       406.442    
  48  0.799429     -0.223858      -10.7771       10.7771       340.979       351.757    
  49  0.164379      -1.80558      -86.9257       86.9257       316.129       403.055    
  50  0.421896     -0.862996      -41.5470       41.5470       325.382       366.929    
  51  0.361660      -1.01705      -48.9636       48.9636       319.349       368.313    
  52  0.346541      -1.05975      -51.0195       51.0195       324.169       375.189    
  53  0.728715     -0.316473      -15.2359       15.2359       324.811       340.047    
  54  0.305329      -1.18637      -57.1149       57.1149       320.952       378.067    
  55  0.547244     -0.602861      -29.0234       29.0234       325.466       354.489    
  56  0.942790     -0.589122E-01  -2.83619       2.83619       321.980       324.816    
  57  0.846801     -0.166290      -8.00566       8.00566       298.574       306.579    
  58  0.961806     -0.389424E-01  -1.87480       1.87480       314.110       315.985    
  59  0.101104      -2.29161      -110.324       110.324       309.584       419.908    
  60  0.181736      -1.70520      -82.0932       82.0932       326.643       408.736    
  61  0.298004      -1.21065      -58.2840       58.2840       319.515       377.799    
  62  0.840699E-01  -2.47611      -119.207       119.207       313.293       432.500    
  63  0.796444     -0.227598      -10.9572       10.9572       315.117       326.074    
  64  0.294043      -1.22403      -58.9282       58.9282       319.480       378.408    
loop,thermsimp(1:2)       37   3.02166       216.021    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    136        301.06          0.88          1.09         23.10          0.04          0.05         25.16
Just calling func    0   0         25.15


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    137        295.64          0.88          1.09         23.09          0.03          0.05         25.12
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    295.64
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    48.1428               190
loop is:       37
neval is:      136
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       37      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    48.1428               190
loop is:       38
neval is:      136


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      190
neval,tstepnext:      136     190

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.371753     -0.989525      -47.6385       47.6385       300.470       348.108    
   2  0.687927     -0.374072      -18.0089       18.0089       298.574       316.583    
   3  0.288957      -1.24148      -59.7682       59.7682       304.814       364.582    
   4  0.192838      -1.64590      -79.2383       79.2383       314.110       393.349    
   5  0.369869     -0.994607      -47.8832       47.8832       311.670       359.553    
   6  0.735973     -0.306562      -14.7587       14.7587       313.441       328.200    
   7  0.637144     -0.450760      -21.7008       21.7008       318.875       340.576    
   8  0.703934     -0.351071      -16.9015       16.9015       320.415       337.317    
   9  0.864279     -0.145859      -7.02206       7.02206       321.980       329.002    
  10  0.473452     -0.747705      -35.9966       35.9966       315.117       351.113    
  11  0.242010      -1.41877      -68.3038       68.3038       316.751       385.055    
  12  0.510769     -0.671838      -32.3441       32.3441       314.391       346.736    
  13  0.829624     -0.186782      -8.99223       8.99223       316.394       325.386    
  14  0.228911      -1.47442      -70.9829       70.9829       326.229       397.212    
  15  0.310006      -1.17116      -56.3831       56.3831       323.798       380.181    
  16  0.248341      -1.39295      -67.0607       67.0607       335.383       402.443    
  17  0.723214     -0.324050      -15.6007       15.6007       320.290       335.891    
  18  0.420900     -0.865360      -41.6609       41.6609       314.778       356.439    
  19  0.133903      -2.01064      -96.7976       96.7976       326.099       422.896    
  20  0.571916     -0.558763      -26.9004       26.9004       324.811       351.711    
  21  0.609104     -0.495766      -23.8675       23.8675       308.719       332.587    
  22  0.582057     -0.541186      -26.0542       26.0542       320.267       346.322    
  23  0.440731     -0.819321      -39.4444       39.4444       321.315       360.759    
  24  0.211006      -1.55587      -74.9039       74.9039       324.833       399.737    
  25  0.665769     -0.406813      -19.5851       19.5851       325.148       344.733    
  26  0.766062     -0.266493      -12.8297       12.8297       323.034       335.864    
  27  0.321416E-01  -3.43760      -165.496       165.496       340.979       506.475    
  28  0.165897E-01  -4.09897      -197.336       197.336       316.644       513.979    
  29  0.634553     -0.454835      -21.8970       21.8970       314.547       336.444    
  30  0.981834     -0.183335E-01 -0.882626      0.882626       325.466       326.348    
  31  0.511720     -0.669978      -32.2546       32.2546       336.634       368.889    
  32  0.426358     -0.852477      -41.0406       41.0406       322.959       364.000    
  33  0.500527     -0.692094      -33.3193       33.3193       313.855       347.174    
  34  0.100483      -2.29777      -110.621       110.621       308.487       419.108    
  35  0.837324     -0.177545      -8.54750       8.54750       324.938       333.486    
  36  0.257741      -1.35580      -65.2720       65.2720       325.382       390.654    
  37  0.437184     -0.827401      -39.8334       39.8334       311.913       351.747    
  38  0.707529     -0.345976      -16.6563       16.6563       319.349       336.006    
  39  0.538379     -0.619193      -29.8097       29.8097       320.138       349.947    
  40  0.611820     -0.491317      -23.6533       23.6533       324.169       347.823    
  41  0.404533     -0.905022      -43.5703       43.5703       319.515       363.085    
  42  0.902499     -0.102588      -4.93888       4.93888       320.952       325.891    
  43  0.704299     -0.350552      -16.8766       16.8766       319.480       336.357    
  44  0.511818     -0.669786      -32.2453       32.2453       325.176       357.421    
  45  0.748131     -0.290178      -13.9700       13.9700       328.180       342.150    
  46  0.296598      -1.21538      -58.5117       58.5117       323.311       381.823    
  47  0.805122     -0.216762      -10.4355       10.4355       326.333       336.768    
  48  0.525063     -0.644236      -31.0153       31.0153       316.129       347.145    
  49  0.192567      -1.64731      -79.3062       79.3062       318.706       398.012    
  50  0.991898     -0.813527E-02 -0.391655      0.391655       327.018       327.410    
  51  0.238175      -1.43475      -69.0728       69.0728       326.643       395.716    
  52  0.627675     -0.465733      -22.4217       22.4217       309.584       332.006    
  53  0.328849      -1.11216      -53.5423       53.5423       306.186       359.728    
  54  0.697651     -0.360037      -17.3332       17.3332       321.570       338.904    
  55  0.154345      -1.86857      -89.9581       89.9581       318.584       408.542    
  56  0.196838      -1.62537      -78.2500       78.2500       313.293       391.543    
  57  0.397903     -0.921546      -44.3658       44.3658       326.285       370.651    
  58  0.746135E-01  -2.59543      -124.951       124.951       321.141       446.092    
  59  0.283843      -1.25934      -60.6279       60.6279       330.093       390.721    
  60  0.540853E-02  -5.21978      -251.295       251.295       320.093       571.388    
  61  0.534720     -0.626011      -30.1379       30.1379       331.399       361.537    
  62  0.909816     -0.945126E-01  -4.55010       4.55010       309.634       314.184    
  63  0.190142      -1.65998      -79.9162       79.9162       324.389       404.305    
  64  0.150854      -1.89144      -91.0593       91.0593       295.636       386.695    
loop,thermsimp(1:2)       38   47.6385       18.0089    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    138        310.45          0.88          1.10         23.09          0.03          0.04         25.14
Just calling func    0   0         25.14


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    139        305.58          0.88          1.09         23.08          0.20          0.05         25.29
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    305.58
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    48.1428               190
loop is:       38
neval is:      138
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       38      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    48.1428               190
loop is:       39
neval is:      138


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      190
neval,tstepnext:      138     190

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.724264     -0.322600      -15.5308       15.5308       309.634       325.165    
   2  0.309663      -1.17227      -56.4363       56.4363       298.574       355.010    
   3  0.688114     -0.373801      -17.9958       17.9958       316.394       334.390    
   4  0.677876     -0.388791      -18.7175       18.7175       320.952       339.669    
   5  0.283701      -1.25984      -60.6520       60.6520       325.466       386.118    
   6  0.183733      -1.69427      -81.5668       81.5668       327.018       408.585    
   7  0.243414      -1.41299      -68.0254       68.0254       313.441       381.466    
   8  0.785389     -0.241576      -11.6301       11.6301       321.980       333.610    
   9  0.258033      -1.35467      -65.2175       65.2175       309.584       374.801    
  10  0.137887      -1.98132      -95.3865       95.3865       308.719       404.106    
  11  0.386520     -0.950573      -45.7632       45.7632       324.938       370.701    
  12  0.882934     -0.124505      -5.99403       5.99403       323.034       329.028    
  13  0.395106     -0.928602      -44.7055       44.7055       320.290       364.996    
  14  0.107633      -2.22903      -107.312       107.312       319.349       426.661    
  15  0.434094     -0.834495      -40.1749       40.1749       319.480       359.655    
  16  0.558484     -0.582529      -28.0446       28.0446       314.547       342.591    
  17  0.102706      -2.27589      -109.568       109.568       326.333       435.900    
  18  0.325804      -1.12146      -53.9901       53.9901       320.415       374.406    
  19  0.693871     -0.365469      -17.5947       17.5947       321.570       339.165    
  20  0.832622     -0.183176      -8.81859       8.81859       318.875       327.693    
  21  0.691207     -0.369316      -17.7799       17.7799       328.180       345.960    
  22  0.903946     -0.100985      -4.86171       4.86171       325.148       330.009    
  23  0.258785E-01  -3.65434      -175.930       175.930       320.267       496.198    
  24  0.247338      -1.39700      -67.2554       67.2554       314.391       381.647    
  25  0.861464     -0.149122      -7.17916       7.17916       316.129       323.308    
  26  0.954919     -0.461290E-01  -2.22078       2.22078       313.855       316.076    
  27  0.579638     -0.545352      -26.2548       26.2548       324.169       350.424    
  28  0.537182     -0.621418      -29.9168       29.9168       300.470       330.386    
  29  0.407710     -0.897199      -43.1937       43.1937       320.138       363.331    
  30  0.958466     -0.424211E-01  -2.04227       2.04227       315.117       317.159    
  31  0.884674     -0.122536      -5.89923       5.89923       324.811       330.710    
  32  0.395055     -0.928731      -44.7117       44.7117       311.913       356.625    
  33  0.325425      -1.12262      -54.0462       54.0462       314.778       368.824    
  34  0.679842     -0.385895      -18.5781       18.5781       325.176       343.754    
  35  0.765292     -0.267498      -12.8781       12.8781       311.670       324.548    
  36  0.217460      -1.52574      -73.4534       73.4534       306.186       379.639    
  37  0.181189      -1.70822      -82.2382       82.2382       321.315       403.553    
  38  0.518456     -0.656899      -31.6250       31.6250       331.399       363.024    
  39  0.249864E-01  -3.68942      -177.619       177.619       319.515       497.134    
  40  0.336654      -1.08870      -52.4131       52.4131       322.959       375.373    
  41  0.873801     -0.134903      -6.49460       6.49460       304.814       311.309    
  42  0.478904     -0.736255      -35.4454       35.4454       336.634       372.080    
  43  0.819950     -0.198512      -9.55693       9.55693       326.285       335.842    
  44  0.966813     -0.337500E-01  -1.62482       1.62482       323.798       325.423    
  45  0.514109     -0.665319      -32.0303       32.0303       323.311       355.342    
  46  0.483734     -0.726221      -34.9623       34.9623       316.751       351.714    
  47  0.227743E-01  -3.78212      -182.082       182.082       295.636       477.718    
  48  0.409495     -0.892830      -42.9833       42.9833       325.382       368.365    
  49  0.198361      -1.61767      -77.8791       77.8791       330.093       407.973    
  50  0.925767     -0.771331E-01  -3.71340       3.71340       313.293       317.006    
  51  0.842113     -0.171842      -8.27293       8.27293       314.110       322.383    
  52  0.347114E-01  -3.36069      -161.793       161.793       326.643       488.436    
  53  0.215814      -1.53334      -73.8192       73.8192       326.229       400.048    
  54  0.219309      -1.51727      -73.0458       73.0458       318.706       391.752    
  55  0.940126     -0.617416E-01  -2.97241       2.97241       324.833       327.806    
  56  0.663408     -0.410365      -19.7561       19.7561       335.383       355.139    
  57  0.630947     -0.460533      -22.1713       22.1713       324.389       346.560    
  58  0.719671     -0.328961      -15.8371       15.8371       318.584       334.421    
  59  0.939094     -0.628392E-01  -3.02525       3.02525       308.487       311.512    
  60  0.901520     -0.103673      -4.99112       4.99112       326.099       331.090    
  61  0.771028     -0.260031      -12.5186       12.5186       321.141       333.659    
  62  0.320616      -1.13751      -54.7629       54.7629       340.979       395.742    
  63  0.893890     -0.112173      -5.40030       5.40030       316.644       322.044    
  64  0.874332     -0.134295      -6.46533       6.46533       305.577       312.043    
loop,thermsimp(1:2)       39   15.5308       56.4363    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    140        315.09          0.87          1.09         23.05          0.15          0.05         25.20
Just calling func    0   0         25.20


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    141        311.31          0.84          1.09         23.19          0.00          0.05         25.17
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  140    311.31        4.244     -1.171      3.542     -100.0     0.2974    
                      -1.011      2.251     -100.0      2.335     0.7770    
                       1.142    -0.1230      2.400      0.000      0.000    
                      -1.048      0.000      0.000      0.000     -1.221    

                      -2.500      9619.     0.1391E+05 -753.7     -1840.    
                      -2.000     -5.591     -2.331     -6.367     -2.820    
                      -12.70     -2.452      1359.      0.000      3354.    

                       4764.      3323.      5073.      5329.      2500.    
                       4298.     0.1066    -0.6947E-01  0.000    -0.4342E-01
                      0.2815E-01-0.3331E-01 0.1482    -0.9541E-01-0.7897E-02

                      -1.119    -0.7770      0.000     0.2895     0.1477    
                      0.8541E-01 0.8166E-01 0.3914E-01 0.8785E-01 0.4629E-01
                      0.3953E-01 0.7661E-01-0.3980E-01-0.7770      0.000    

                      -1.078     -1.784      4.327     -3.840      0.000    
                       0.000      9.099      9.312     -6019.     -4.000    
                     -0.1610     0.3345      9.112      8.585     -7138.    

                      -4.000     0.3345     0.6858      9.277      9.112    
                      -5287.     -4.000     0.3345     0.3345      9.512    
                       8.912     -3885.     -2.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    311.31
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    48.1428               190
loop is:       39
neval is:      140
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       39      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    48.1428               190
loop is:       40
neval is:      140


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      190
neval,tstepnext:      140     190

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.954632     -0.464296E-01  -2.23525       2.23525       304.814       307.049    
   2  0.450411     -0.797594      -38.3984       38.3984       308.487       346.885    
   3  0.691912E-01  -2.67088      -128.584       128.584       305.577       434.161    
   4  0.740935     -0.299842      -14.4352       14.4352       313.855       328.290    
   5  0.452531     -0.792898      -38.1723       38.1723       313.293       351.465    
   6  0.461330     -0.773642      -37.2453       37.2453       315.117       352.362    
   7  0.102999      -2.27303      -109.430       109.430       316.644       426.074    
   8  0.475106     -0.744217      -35.8287       35.8287       314.110       349.939    
   9  0.240275      -1.42597      -68.6501       68.6501       316.129       384.779    
  10  0.276707E-01  -3.58738      -172.706       172.706       311.670       484.377    
  11  0.132701E-01  -4.32224      -208.085       208.085       309.634       517.719    
  12  0.997219     -0.278509E-02 -0.134082      0.134082       323.798       323.932    
  13  0.563305     -0.573934      -27.6308       27.6308       318.875       346.506    
  14  0.347949      -1.05570      -50.8243       50.8243       324.833       375.658    
  15  0.546018     -0.605103      -29.1313       29.1313       323.034       352.166    
  16  0.343968      -1.06721      -51.3783       51.3783       325.148       376.526    
  17  0.945234     -0.563230E-01  -2.71154       2.71154       300.470       303.181    
  18  0.346208      -1.06072      -51.0658       51.0658       324.811       375.877    
  19  0.406433     -0.900337      -43.3447       43.3447       326.099       369.443    
  20  0.632259     -0.458455      -22.0713       22.0713       321.980       344.051    
  21  0.983930     -0.162002E-01 -0.779922      0.779922       321.141       321.921    
  22  0.200798      -1.60546      -77.2912       77.2912       316.394       393.685    
  23  0.223962      -1.49628      -72.0349       72.0349       318.584       390.619    
  24  0.594322     -0.520335      -25.0504       25.0504       326.285       351.335    
  25  0.875298     -0.133191      -6.41218       6.41218       321.570       327.983    
  26  0.327822      -1.11529      -53.6929       53.6929       320.952       374.645    
  27  0.215105      -1.53663      -73.9775       73.9775       314.547       388.524    
  28  0.905181     -0.996198E-01  -4.79598       4.79598       325.176       329.972    
  29  0.699086     -0.357981      -17.2342       17.2342       328.180       345.414    
  30  0.747401     -0.291154      -14.0170       14.0170       324.389       338.406    
  31  0.699189     -0.357834      -17.2271       17.2271       324.169       341.396    
  32  0.563488     -0.573610      -27.6152       27.6152       316.751       344.366    
  33  0.155576      -1.86062      -89.5756       89.5756       298.574       388.149    
  34  0.380593     -0.966025      -46.5071       46.5071       335.383       381.890    
  35  0.626112     -0.468226      -22.5417       22.5417       323.311       345.853    
  36  0.372369     -0.987870      -47.5588       47.5588       311.913       359.472    
  37  0.517531     -0.658686      -31.7110       31.7110       319.480       351.191    
  38  0.673247     -0.395643      -19.0473       19.0473       331.399       350.447    
  39  0.741527     -0.299044      -14.3968       14.3968       320.138       334.534    
  40  0.280982      -1.26947      -61.1156       61.1156       320.290       381.406    
  41  0.331745      -1.10339      -53.1202       53.1202       325.382       378.502    
  42  0.712030     -0.339635      -16.3510       16.3510       314.778       331.129    
  43  0.200581      -1.60654      -77.3431       77.3431       324.938       402.281    
  44  0.989915     -0.101357E-01 -0.487961      0.487961       336.634       337.122    
  45  0.808031     -0.213155      -10.2619       10.2619       320.415       330.677    
  46  0.893446     -0.112670      -5.42424       5.42424       309.584       315.008    
  47  0.364885      -1.00817      -48.5362       48.5362       322.959       371.496    
  48  0.923731     -0.793347E-01  -3.81939       3.81939       306.186       310.005    
  49  0.504880     -0.683434      -32.9024       32.9024       313.441       346.343    
  50  0.724988     -0.321600      -15.4827       15.4827       314.391       329.874    
  51  0.927322     -0.754540E-01  -3.63256       3.63256       325.466       329.098    
  52  0.857721     -0.153476      -7.38878       7.38878       318.706       326.095    
  53  0.943333     -0.583361E-01  -2.80846       2.80846       340.979       343.788    
  54  0.794551     -0.229978      -11.0718       11.0718       326.229       337.301    
  55  0.732400     -0.311429      -14.9931       14.9931       321.315       336.308    
  56  0.143434      -1.94188      -93.4875       93.4875       308.719       402.207    
  57  0.859384     -0.151540      -7.29554       7.29554       330.093       337.389    
  58  0.677471     -0.389389      -18.7462       18.7462       327.018       345.765    
  59  0.258745      -1.35191      -65.0847       65.0847       319.349       384.434    
  60  0.380926E-01  -3.26773      -157.318       157.318       326.333       483.650    
  61  0.563373     -0.573814      -27.6250       27.6250       295.636       323.261    
  62  0.985538     -0.145678E-01 -0.701332      0.701332       326.643       327.345    
  63  0.647297     -0.434951      -20.9397       20.9397       320.267       341.207    
  64  0.608092     -0.497430      -23.9476       23.9476       311.308       335.256    
loop,thermsimp(1:2)       40   2.23525       38.3984    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    142        358.34          0.88          1.10         23.12          0.00          0.04         25.15
Just calling func    0   0         25.15


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    358.34
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    48.1428               190
loop is:       40
neval is:      141
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       40      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    48.1428               190
loop is:       41
neval is:      141


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      190
neval,tstepnext:      141     190

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.357965      -1.02732      -49.4580       49.4580       300.470       349.928    
   2  0.414955     -0.879585      -42.3457       42.3457       304.814       347.160    
   3  0.407443     -0.897854      -43.2252       43.2252       306.186       349.411    
   4  0.883897     -0.123414      -5.94151       5.94151       309.584       315.525    
   5  0.520045     -0.653840      -31.4777       31.4777       321.141       352.618    
   6  0.634521     -0.454885      -21.8994       21.8994       295.636       317.535    
   7  0.344406      -1.06594      -51.3171       51.3171       323.798       375.115    
   8  0.545595     -0.605879      -29.1687       29.1687       318.706       347.875    
   9  0.766876     -0.265430      -12.7785       12.7785       326.643       339.422    
  10  0.639043     -0.447783      -21.5575       21.5575       321.570       343.128    
  11  0.850701     -0.161694      -7.78442       7.78442       313.855       321.639    
  12  0.832060     -0.183851      -8.85110       8.85110       325.466       334.317    
  13  0.728209     -0.317167      -15.2693       15.2693       314.391       329.661    
  14  0.531327     -0.632378      -30.4444       30.4444       325.176       355.620    
  15  0.188974E-01  -3.96873      -191.066       191.066       320.415       511.481    
  16  0.246817      -1.39911      -67.3569       67.3569       314.778       382.135    
  17  0.935336     -0.668496E-01  -3.21832       3.21832       320.138       323.356    
  18  0.730823     -0.313585      -15.0968       15.0968       311.308       326.405    
  19  0.482288     -0.729213      -35.1063       35.1063       321.315       356.421    
  20  0.782974E-04  -9.45500      -455.190       455.190       336.634       791.824    
  21  0.258744      -1.35192      -65.0850       65.0850       326.229       391.314    
  22  0.389044     -0.944063      -45.4498       45.4498       330.093       375.543    
  23  0.611459E-01  -2.79449      -134.535       134.535       324.389       458.923    
  24  0.124922      -2.08006      -100.140       100.140       320.267       420.407    
  25  0.253683      -1.37167      -66.0360       66.0360       324.169       390.205    
  26  0.781437     -0.246621      -11.8730       11.8730       340.979       352.852    
  27  0.835634     -0.179565      -8.64476       8.64476       321.980       330.625    
  28  0.542030     -0.612434      -29.4843       29.4843       316.751       346.236    
  29  0.463443     -0.769071      -37.0252       37.0252       328.180       365.205    
  30  0.120587      -2.11538      -101.840       101.840       327.018       428.859    
  31  0.733316     -0.310178      -14.9328       14.9328       323.311       338.244    
  32  0.955530     -0.454889E-01  -2.18996       2.18996       313.441       315.631    
  33  0.419735     -0.868132      -41.7943       41.7943       318.875       360.669    
  34  0.284829      -1.25587      -60.4609       60.4609       308.487       368.948    
  35  0.924079     -0.789582E-01  -3.80127       3.80127       314.110       317.912    
  36  0.432674     -0.837770      -40.3326       40.3326       331.399       371.732    
  37  0.155293      -1.86244      -89.6630       89.6630       319.480       409.143    
  38  0.634342     -0.455168      -21.9130       21.9130       326.285       348.198    
  39  0.935635     -0.665293E-01  -3.20291       3.20291       313.293       316.496    
  40  0.931832     -0.706024E-01  -3.39900       3.39900       323.034       326.433    
  41  0.875970     -0.132424      -6.37525       6.37525       315.117       321.492    
  42  0.273544      -1.29629      -62.4071       62.4071       311.913       374.320    
  43  0.799596     -0.223649      -10.7671       10.7671       326.099       336.866    
  44  0.772883     -0.257628      -12.4029       12.4029       322.959       335.362    
  45  0.274276      -1.29362      -62.2785       62.2785       320.952       383.230    
  46  0.116034      -2.15387      -103.693       103.693       324.833       428.527    
  47  0.700214     -0.356369      -17.1566       17.1566       324.811       341.967    
  48  0.704184E-01  -2.65330      -127.737       127.737       325.148       452.885    
  49  0.699980E-01  -2.65929      -128.026       128.026       325.382       453.407    
  50  0.186964      -1.67684      -80.7277       80.7277       320.290       401.018    
  51  0.342641      -1.07107      -51.5644       51.5644       335.383       386.947    
  52  0.989806     -0.102462E-01 -0.493279      0.493279       319.349       319.843    
  53  0.216227      -1.53143      -73.7272       73.7272       316.129       389.856    
  54  0.233793      -1.45332      -69.9668       69.9668       298.574       368.541    
  55  0.404477     -0.905159      -43.5769       43.5769       314.547       358.124    
  56  0.164502      -1.80483      -86.8896       86.8896       318.584       405.473    
  57  0.561765E-01  -2.87926      -138.615       138.615       316.394       455.010    
  58  0.169196E-01  -4.07928      -196.388       196.388       308.719       505.107    
  59  0.486948     -0.719597      -34.6434       34.6434       324.938       359.582    
  60  0.640730     -0.445148      -21.4306       21.4306       316.644       338.074    
  61  0.940004     -0.618708E-01  -2.97863       2.97863       305.577       308.556    
  62  0.216981      -1.52795      -73.5596       73.5596       326.333       399.892    
  63  0.131817      -2.02634      -97.5539       97.5539       311.670       409.224    
  64  0.996981     -0.302401E-02 -0.145584      0.145584       358.339       358.485    
loop,thermsimp(1:2)       41   49.4580       42.3457    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    143        309.65          0.88          1.10         23.12          0.13          0.04         25.27
Just calling func    0   0         25.27


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    144        309.30          0.88          1.09         23.16          0.02          0.04         25.20
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    309.30
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    48.1428               190
loop is:       41
neval is:      143
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       41      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    48.1428               190
loop is:       42
neval is:      143


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      190
neval,tstepnext:      143     190

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.559413E-01  -2.88345      -138.817       138.817       305.577       444.395    
   2  0.688513     -0.373221      -17.9679       17.9679       309.584       327.552    
   3  0.530653     -0.633647      -30.5055       30.5055       313.441       343.946    
   4  0.542886     -0.610856      -29.4083       29.4083       313.293       342.701    
   5  0.603382     -0.505205      -24.3220       24.3220       295.636       319.958    
   6  0.478412     -0.737283      -35.4949       35.4949       314.110       349.605    
   7  0.809657     -0.211144      -10.1651       10.1651       319.349       329.514    
   8  0.764585     -0.268422      -12.9226       12.9226       315.117       328.039    
   9  0.228600      -1.47578      -71.0481       71.0481       313.855       384.903    
  10  0.495526     -0.702136      -33.8028       33.8028       320.138       353.940    
  11  0.368264     -0.998954      -48.0924       48.0924       311.308       359.400    
  12  0.407647     -0.897355      -43.2011       43.2011       323.034       366.235    
  13  0.316165      -1.15149      -55.4360       55.4360       314.391       369.827    
  14  0.458518     -0.779756      -37.5396       37.5396       321.980       359.520    
  15  0.643610     -0.440663      -21.2147       21.2147       325.466       346.680    
  16  0.316553E-01  -3.45285      -166.230       166.230       322.959       489.189    
  17  0.570171     -0.561819      -27.0475       27.0475       326.099       353.146    
  18  0.448642E-01  -3.10412      -149.441       149.441       316.644       466.084    
  19  0.128957      -2.04828      -98.6098       98.6098       323.311       421.921    
  20  0.159422      -1.83620      -88.3999       88.3999       326.643       415.043    
  21  0.154083      -1.87026      -90.0396       90.0396       324.811       414.850    
  22  0.696997     -0.360974      -17.3783       17.3783       321.570       338.949    
  23  0.579421     -0.545727      -26.2728       26.2728       316.751       343.024    
  24  0.528206     -0.638269      -30.7281       30.7281       304.814       335.542    
  25  0.322914      -1.13037      -54.4191       54.4191       318.706       373.125    
  26  0.369562     -0.995437      -47.9231       47.9231       326.285       374.208    
  27  0.134248      -2.00806      -96.6738       96.6738       306.186       402.860    
  28  0.950150     -0.511358E-01  -2.46182       2.46182       300.470       302.931    
  29  0.138040      -1.98021      -95.3329       95.3329       321.141       416.474    
  30  0.316838      -1.14936      -55.3336       55.3336       340.979       396.313    
  31  0.151783      -1.88530      -90.7638       90.7638       325.176       415.939    
  32  0.338674      -1.08272      -52.1251       52.1251       321.315       373.440    
  33  0.814165     -0.205592      -9.89779       9.89779       314.547       324.445    
  34  0.578183     -0.547865      -26.3757       26.3757       358.339       384.715    
  35  0.208707      -1.56682      -75.4312       75.4312       324.938       400.369    
  36  0.540561     -0.615147      -29.6149       29.6149       318.875       348.490    
  37  0.910129     -0.941686E-01  -4.53354       4.53354       328.180       332.713    
  38  0.907740     -0.967972E-01  -4.66009       4.66009       298.574       303.234    
  39  0.549661     -0.598453      -28.8112       28.8112       308.487       337.298    
  40  0.193889      -1.64047      -78.9769       78.9769       331.399       410.376    
  41  0.807651     -0.213625      -10.2845       10.2845       311.913       322.198    
  42  0.613777     -0.488124      -23.4996       23.4996       323.798       347.298    
  43  0.664452     -0.408793      -19.6804       19.6804       330.093       349.774    
  44  0.584630     -0.536776      -25.8419       25.8419       314.778       340.620    
  45  0.618915     -0.479787      -23.0983       23.0983       320.952       344.050    
  46  0.542097     -0.612311      -29.4784       29.4784       335.383       364.861    
  47  0.133641      -2.01260      -96.8921       96.8921       316.129       413.021    
  48  0.479627     -0.734747      -35.3727       35.3727       324.169       359.542    
  49  0.225939      -1.48749      -71.6120       71.6120       326.229       397.841    
  50  0.324869      -1.12433      -54.1285       54.1285       326.333       380.461    
  51  0.669051     -0.401895      -19.3484       19.3484       320.290       339.639    
  52  0.602039     -0.507434      -24.4293       24.4293       318.584       343.013    
  53  0.143076      -1.94438      -93.6079       93.6079       319.480       413.088    
  54  0.897604     -0.108026      -5.20068       5.20068       311.670       316.871    
  55  0.165810      -1.79691      -86.5084       86.5084       320.267       406.776    
  56  0.468567     -0.758077      -36.4959       36.4959       324.833       361.329    
  57  0.641740     -0.443572      -21.3548       21.3548       327.018       348.373    
  58  0.904980     -0.998426E-01  -4.80670       4.80670       325.148       329.954    
  59  0.674132     -0.394330      -18.9841       18.9841       325.382       344.366    
  60  0.756363     -0.279234      -13.4431       13.4431       316.394       329.837    
  61  0.113892      -2.17251      -104.591       104.591       324.389       428.979    
  62  0.835916     -0.179227      -8.62849       8.62849       308.719       317.348    
  63  0.284183      -1.25814      -60.5702       60.5702       320.415       380.986    
  64  0.276674      -1.28492      -61.8594       61.8594       309.295       371.155    
loop,thermsimp(1:2)       42   138.817       17.9679    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    145        310.34          0.88          1.09         23.11          0.17          0.05         25.30
Just calling func    0   0         25.30


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    146        326.63          0.88          1.09         23.16          0.04          0.04         25.20
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    310.34
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    48.1428               190
loop is:       42
neval is:      145
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       42      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    48.1428               190
loop is:       43
neval is:      145


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      190
neval,tstepnext:      145     190

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.788601     -0.237495      -11.4336       11.4336       300.470       311.903    
   2  0.796559     -0.227454      -10.9503       10.9503       298.574       309.524    
   3  0.784232     -0.243051      -11.7011       11.7011       311.670       323.371    
   4  0.503549     -0.686074      -33.0295       33.0295       308.719       341.749    
   5  0.468337     -0.758566      -36.5195       36.5195       295.636       332.155    
   6  0.198518      -1.61688      -77.8410       77.8410       311.913       389.754    
   7  0.857529     -0.153700      -7.39954       7.39954       314.547       321.946    
   8  0.845427     -0.167913      -8.08379       8.08379       309.584       317.668    
   9  0.710919     -0.341197      -16.4262       16.4262       315.117       331.543    
  10  0.934107     -0.681640E-01  -3.28161       3.28161       319.349       322.631    
  11  0.565087     -0.570775      -27.4787       27.4787       316.394       343.873    
  12  0.147377      -1.91476      -92.1819       92.1819       325.148       417.330    
  13  0.471965     -0.750851      -36.1481       36.1481       328.180       364.328    
  14  0.287319      -1.24716      -60.0418       60.0418       304.814       364.856    
  15  0.526906     -0.640733      -30.8467       30.8467       308.487       339.333    
  16  0.176999      -1.73161      -83.3646       83.3646       321.570       404.935    
  17  0.868579     -0.140897      -6.78315       6.78315       320.290       327.074    
  18  0.621282     -0.475971      -22.9146       22.9146       314.778       337.693    
  19  0.181881      -1.70440      -82.0548       82.0548       313.293       395.348    
  20  0.565209     -0.570560      -27.4684       27.4684       318.584       346.052    
  21  0.927617     -0.751364E-01  -3.61727       3.61727       316.751       320.369    
  22  0.296120      -1.21699      -58.5893       58.5893       313.441       372.030    
  23  0.152389      -1.88132      -90.5718       90.5718       320.952       411.524    
  24  0.508731     -0.675835      -32.5366       32.5366       325.382       357.918    
  25  0.389654     -0.942496      -45.3744       45.3744       325.466       370.840    
  26  0.770754     -0.260386      -12.5357       12.5357       323.798       336.334    
  27  0.144347      -1.93554      -93.1821       93.1821       327.018       420.200    
  28  0.690124     -0.370884      -17.8554       17.8554       318.875       336.730    
  29  0.882429     -0.125077      -6.02156       6.02156       314.110       320.132    
  30  0.781105     -0.247045      -11.8935       11.8935       330.093       341.987    
  31  0.331946      -1.10278      -53.0910       53.0910       326.099       379.190    
  32  0.157011      -1.85144      -89.1333       89.1333       320.138       409.271    
  33  0.734200     -0.308973      -14.8748       14.8748       311.308       326.183    
  34  0.563390     -0.573784      -27.6235       27.6235       321.980       349.604    
  35  0.349498      -1.05126      -50.6104       50.6104       324.169       374.780    
  36  0.256822      -1.35937      -65.4439       65.4439       324.833       390.277    
  37  0.563556     -0.573488      -27.6093       27.6093       335.383       362.992    
  38  0.945419E-01  -2.35871      -113.555       113.555       323.034       436.589    
  39  0.571450     -0.559577      -26.9396       26.9396       314.391       341.331    
  40  0.583029E-01  -2.84210      -136.827       136.827       309.295       446.122    
  41  0.428808     -0.846746      -40.7647       40.7647       318.706       359.471    
  42  0.628450     -0.464499      -22.3623       22.3623       321.315       343.677    
  43  0.152789      -1.87869      -90.4456       90.4456       326.285       416.730    
  44  0.787004E-01  -2.54211      -122.384       122.384       326.333       448.717    
  45  0.170927E-01  -4.06911      -195.898       195.898       320.415       516.313    
  46  0.531078     -0.632847      -30.4670       30.4670       358.339       388.806    
  47  0.206082E-01  -3.88206      -186.893       186.893       313.855       500.748    
  48  0.909565     -0.947891E-01  -4.56341       4.56341       340.979       345.543    
  49  0.456291     -0.784625      -37.7740       37.7740       326.229       364.003    
  50  0.997425E-02  -4.60775      -221.830       221.830       324.938       546.768    
  51  0.251070      -1.38202      -66.5344       66.5344       306.186       372.720    
  52  0.548517     -0.600536      -28.9115       28.9115       320.267       349.179    
  53  0.210242      -1.55950      -75.0786       75.0786       331.399       406.478    
  54  0.848361     -0.164449      -7.91704       7.91704       316.129       324.046    
  55  0.160491E-01  -4.13210      -198.931       198.931       319.480       518.411    
  56  0.407967     -0.896570      -43.1634       43.1634       324.811       367.974    
  57  0.859929     -0.150905      -7.26501       7.26501       326.643       333.908    
  58  0.406052     -0.901274      -43.3899       43.3899       325.176       368.566    
  59  0.743169     -0.296832      -14.2903       14.2903       321.141       335.431    
  60  0.434823     -0.832817      -40.0941       40.0941       323.311       363.405    
  61  0.559897     -0.580003      -27.9229       27.9229       324.389       352.312    
  62  0.277128      -1.28328      -61.7804       61.7804       305.577       367.358    
  63  0.839691     -0.174721      -8.41158       8.41158       316.644       325.055    
  64  0.641867     -0.443375      -21.3453       21.3453       310.344       331.690    
loop,thermsimp(1:2)       43   11.4336       10.9503    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    147        307.49          0.88          1.10         23.07          0.06          0.05         25.16
Just calling func    0   0         25.15


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    148        298.35          0.87          1.10         23.17          0.00          0.04         25.18
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    298.35
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    48.1428               190
loop is:       43
neval is:      147
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       43      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    48.1428               190
loop is:       44
neval is:      147


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      190
neval,tstepnext:      147     190

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.104987      -2.25392      -108.510       108.510       298.574       407.084    
   2  0.780131E-01  -2.55088      -122.806       122.806       300.470       423.276    
   3  0.723689     -0.323394      -15.5691       15.5691       309.584       325.153    
   4  0.439896     -0.821218      -39.5357       39.5357       314.110       353.646    
   5  0.967364     -0.331803E-01  -1.59739       1.59739       316.751       318.349    
   6  0.235884      -1.44441      -69.5381       69.5381       314.547       384.085    
   7  0.311956      -1.16489      -56.0813       56.0813       319.349       375.431    
   8  0.600573     -0.509870      -24.5466       24.5466       311.670       336.217    
   9  0.781739     -0.246234      -11.8544       11.8544       316.129       327.984    
  10  0.505036     -0.683126      -32.8876       32.8876       316.644       349.531    
  11  0.896130     -0.109670      -5.27983       5.27983       311.308       316.588    
  12  0.545040     -0.606897      -29.2177       29.2177       320.290       349.508    
  13  0.338019      -1.08465      -52.2183       52.2183       315.117       367.335    
  14  0.200467      -1.60711      -77.3706       77.3706       310.344       387.715    
  15  0.548763     -0.600089      -28.8899       28.8899       295.636       324.526    
  16  0.897241     -0.108431      -5.22016       5.22016       326.643       331.863    
  17  0.229905      -1.47009      -70.7741       70.7741       321.141       391.915    
  18  0.387828     -0.947193      -45.6005       45.6005       323.798       369.399    
  19  0.789400     -0.236482      -11.3849       11.3849       318.875       330.260    
  20  0.495667     -0.701851      -33.7891       33.7891       314.778       348.567    
  21  0.818926     -0.199761      -9.61706       9.61706       308.487       318.104    
  22  0.181319      -1.70750      -82.2036       82.2036       314.391       396.595    
  23  0.901986     -0.103156      -4.96623       4.96623       308.719       313.686    
  24  0.933790E-01  -2.37109      -114.151       114.151       330.093       444.244    
  25  0.171523      -1.76304      -84.8775       84.8775       321.315       406.192    
  26  0.648450     -0.433170      -20.8540       20.8540       316.394       337.248    
  27  0.777448     -0.251739      -12.1194       12.1194       340.979       353.099    
  28  0.777670     -0.251453      -12.1056       12.1056       318.584       330.689    
  29  0.972420     -0.279672E-01  -1.34642       1.34642       320.267       321.614    
  30  0.825305     -0.192002      -9.24349       9.24349       321.980       331.224    
  31  0.470649     -0.753642      -36.2824       36.2824       324.389       360.671    
  32  0.263953      -1.33198      -64.1253       64.1253       325.382       389.507    
  33  0.857551     -0.153675      -7.39835       7.39835       318.706       326.104    
  34  0.950157     -0.511279E-01  -2.46144       2.46144       335.383       337.844    
  35  0.866482     -0.143314      -6.89953       6.89953       323.311       330.211    
  36  0.904889     -0.999433E-01  -4.81155       4.81155       326.229       331.040    
  37  0.297565      -1.21212      -58.3549       58.3549       328.180       386.535    
  38  0.902696     -0.102369      -4.92834       4.92834       304.814       309.742    
  39  0.800054     -0.223076      -10.7395       10.7395       305.577       316.317    
  40  0.534162     -0.627057      -30.1883       30.1883       324.811       354.999    
  41  0.593018     -0.522530      -25.1560       25.1560       325.176       350.332    
  42  0.682417E-01  -2.68470      -129.249       129.249       325.466       454.715    
  43  0.336048      -1.09050      -52.4998       52.4998       313.441       365.941    
  44  0.576540     -0.550710      -26.5127       26.5127       306.186       332.698    
  45  0.217955      -1.52347      -73.3439       73.3439       324.169       397.513    
  46  0.281607      -1.26724      -61.0085       61.0085       326.099       387.107    
  47  0.306631      -1.18211      -56.9100       56.9100       358.339       415.249    
  48  0.676335E-01  -2.69365      -129.680       129.680       311.913       441.593    
  49  0.145631      -1.92668      -92.7557       92.7557       324.833       417.589    
  50  0.820952     -0.197291      -9.49813       9.49813       313.293       322.791    
  51  0.224137      -1.49550      -71.9974       71.9974       321.570       393.568    
  52  0.738282     -0.303430      -14.6080       14.6080       331.399       346.007    
  53  0.364089      -1.01036      -48.6414       48.6414       320.138       368.779    
  54  0.321068      -1.13610      -54.6951       54.6951       320.952       375.647    
  55  0.179504      -1.71756      -82.6880       82.6880       326.285       408.973    
  56  0.808596     -0.212456      -10.2282       10.2282       325.148       335.376    
  57  0.974692     -0.256343E-01  -1.23410       1.23410       327.018       328.252    
  58  0.559434     -0.580830      -27.9628       27.9628       323.034       350.997    
  59  0.443035E-01  -3.11669      -150.046       150.046       309.295       459.342    
  60  0.711672     -0.340139      -16.3752       16.3752       326.333       342.708    
  61  0.578255     -0.547741      -26.3698       26.3698       313.855       340.225    
  62  0.102770      -2.27527      -109.538       109.538       320.415       429.953    
  63  0.813100     -0.206901      -9.96078       9.96078       319.480       329.441    
  64  0.612419     -0.490339      -23.6063       23.6063       298.353       321.959    
loop,thermsimp(1:2)       44   108.510       122.806    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    149        634.65          0.88          1.12         23.12          0.01          0.05         25.18
Just calling func    0   0         25.18


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    150        383.65          0.85          1.10         23.15          0.00          0.04         25.14
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3    383.65
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    48.1428               190
loop is:       44
neval is:      149
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       44      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    48.1428               190
loop is:       45
neval is:      149


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      190
neval,tstepnext:      149     190

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.872614     -0.136261      -6.56000       6.56000       304.814       311.374    
   2  0.990306     -0.974175E-02 -0.468995      0.468995       308.719       309.188    
   3  0.488656     -0.716096      -34.4749       34.4749       305.577       340.052    
   4  0.865115E-01  -2.44748      -117.828       117.828       311.308       429.136    
   5  0.234262      -1.45132      -69.8704       69.8704       308.487       378.357    
   6  0.906541     -0.981186E-01  -4.72370       4.72370       316.751       321.475    
   7  0.680454     -0.384995      -18.5347       18.5347       320.267       338.802    
   8  0.575574     -0.552388      -26.5935       26.5935       298.353       324.946    
   9  0.537443E-02  -5.22610      -251.599       251.599       313.293       564.892    
  10  0.421676     -0.863518      -41.5722       41.5722       295.636       337.208    
  11  0.297588      -1.21204      -58.3512       58.3512       309.584       367.935    
  12  0.119337      -2.12581      -102.342       102.342       318.706       421.048    
  13  0.958276     -0.426192E-01  -2.05181       2.05181       316.129       318.181    
  14  0.115549      -2.15806      -103.895       103.895       327.018       430.913    
  15  0.104220      -2.26125      -108.863       108.863       319.480       428.343    
  16  0.719503     -0.329194      -15.8483       15.8483       323.311       339.160    
  17  0.875656     -0.132782      -6.39248       6.39248       318.875       325.267    
  18  0.578760     -0.546868      -26.3277       26.3277       318.584       344.911    
  19  0.923704     -0.793639E-01  -3.82080       3.82080       326.229       330.050    
  20  0.457980     -0.780930      -37.5961       37.5961       321.980       359.576    
  21  0.783173     -0.244401      -11.7662       11.7662       326.643       338.409    
  22  0.764479     -0.268561      -12.9293       12.9293       306.186       319.115    
  23  0.496891     -0.699384      -33.6703       33.6703       325.148       358.818    
  24  0.554859     -0.589041      -28.3581       28.3581       311.670       340.028    
  25  0.734503E-02  -4.91373      -236.561       236.561       316.394       552.955    
  26  0.117643      -2.14010      -103.031       103.031       335.383       438.413    
  27  0.145440      -1.92799      -92.8189       92.8189       313.855       406.674    
  28  0.375449     -0.979633      -47.1623       47.1623       326.333       373.495    
  29  0.954324E-01  -2.34934      -113.104       113.104       331.399       444.503    
  30  0.449085     -0.800543      -38.5404       38.5404       314.778       353.318    
  31  0.354483      -1.03709      -49.9286       49.9286       320.290       370.219    
  32  0.153971      -1.87099      -90.0747       90.0747       316.644       406.718    
  33  0.871598     -0.137427      -6.61610       6.61610       325.176       331.792    
  34  0.633061     -0.457188      -22.0103       22.0103       323.034       345.045    
  35  0.947022E-01  -2.35702      -113.473       113.473       340.979       454.453    
  36  0.793812     -0.230909      -11.1166       11.1166       314.110       325.227    
  37  0.760585     -0.273667      -13.1751       13.1751       324.811       337.986    
  38  0.124312      -2.08496      -100.376       100.376       324.389       424.765    
  39  0.961605E-03  -6.94691      -334.443       334.443       313.441       647.884    
  40  0.672529     -0.396710      -19.0987       19.0987       315.117       334.215    
  41  0.749847E-01  -2.59047      -124.712       124.712       320.138       444.850    
  42  0.982441     -0.177147E-01 -0.852836      0.852836       323.798       324.651    
  43  0.340727      -1.07667      -51.8340       51.8340       319.349       371.183    
  44  0.915043     -0.887846E-01  -4.27434       4.27434       320.952       325.226    
  45  0.150614      -1.89303      -91.1359       91.1359       314.547       405.683    
  46  0.892785     -0.113409      -5.45983       5.45983       328.180       333.640    
  47  0.844073     -0.169516      -8.16096       8.16096       326.099       334.260    
  48  0.469949     -0.755131      -36.3541       36.3541       310.344       346.698    
  49  0.389072     -0.943991      -45.4464       45.4464       325.382       370.828    
  50  0.738049     -0.303745      -14.6231       14.6231       321.141       335.764    
  51  0.250173      -1.38560      -66.7068       66.7068       321.570       388.277    
  52  0.383245     -0.959081      -46.1728       46.1728       314.391       360.564    
  53  0.384434     -0.955983      -46.0237       46.0237       324.169       370.193    
  54  0.479018E-01  -3.03860      -146.287       146.287       321.315       467.601    
  55  0.819285     -0.199323      -9.59599       9.59599       298.574       308.170    
  56  0.568165     -0.565344      -27.2172       27.2172       326.285       353.502    
  57  0.918732     -0.847606E-01  -4.08061       4.08061       358.339       362.420    
  58  0.374258     -0.982809      -47.3152       47.3152       324.833       372.148    
  59  0.966524     -0.340496E-01  -1.63924       1.63924       300.470       302.109    
  60  0.505261     -0.682680      -32.8661       32.8661       320.415       353.282    
  61  0.283819      -1.25942      -60.6319       60.6319       311.913       372.545    
  62  0.448920     -0.800911      -38.5581       38.5581       330.093       368.652    
  63  0.398648     -0.919676      -44.2758       44.2758       325.466       369.741    
  64  0.625742     -0.468817      -22.5702       22.5702       383.653       406.223    
loop,thermsimp(1:2)       45   6.56000      0.468995    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    151        352.26          0.88          1.12         23.10          0.00          0.05         25.14
Just calling func    0   0         25.14


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    152        466.89          0.88          1.12         23.13          0.00          0.04         25.16
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    352.26
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    48.1428               190
loop is:       45
neval is:      151
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       45      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    48.1428               190
loop is:       46
neval is:      151


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      190
neval,tstepnext:      151     190

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.880559E-01  -2.42978      -116.977       116.977       300.470       417.446    
   2  0.312747      -1.16236      -55.9593       55.9593       298.574       354.533    
   3  0.317683      -1.14670      -55.2053       55.2053       308.719       363.925    
   4  0.693053     -0.366649      -17.6515       17.6515       304.814       322.465    
   5  0.361881      -1.01644      -48.9342       48.9342       316.129       365.063    
   6  0.127478      -2.05981      -99.1650       99.1650       306.186       405.351    
   7  0.718706     -0.330302      -15.9017       15.9017       316.751       332.653    
   8  0.609419E-01  -2.79783      -134.695       134.695       323.798       458.494    
   9  0.320798      -1.13695      -54.7357       54.7357       298.353       353.088    
  10  0.343503      -1.06856      -51.4434       51.4434       320.952       372.395    
  11  0.671828     -0.397753      -19.1489       19.1489       314.110       333.259    
  12  0.616702     -0.483369      -23.2707       23.2707       318.875       342.145    
  13  0.806358E-01  -2.51781      -121.214       121.214       326.229       447.443    
  14  0.997284     -0.271972E-02 -0.130935      0.130935       325.176       325.307    
  15  0.554344     -0.589969      -28.4028       28.4028       328.180       356.583    
  16  0.411057     -0.889023      -42.8000       42.8000       315.117       357.917    
  17  0.846258E-01  -2.46952      -118.889       118.889       326.099       444.988    
  18  0.737439     -0.304571      -14.6629       14.6629       321.141       335.804    
  19  0.393790     -0.931939      -44.8661       44.8661       295.636       340.502    
  20  0.965947     -0.346467E-01  -1.66799       1.66799       324.811       326.479    
  21  0.150166      -1.89601      -91.2793       91.2793       326.643       417.923    
  22  0.212005      -1.55114      -74.6764       74.6764       320.267       394.944    
  23  0.615060     -0.486036      -23.3991       23.3991       323.311       346.710    
  24  0.382142     -0.961962      -46.3115       46.3115       311.670       357.982    
  25  0.249044      -1.39013      -66.9246       66.9246       305.577       372.502    
  26  0.245943      -1.40266      -67.5278       67.5278       318.584       386.111    
  27  0.108882      -2.21749      -106.756       106.756       323.034       429.791    
  28  0.199835      -1.61026      -77.5226       77.5226       310.344       387.867    
  29  0.863954     -0.146235      -7.04018       7.04018       320.415       327.456    
  30  0.392842     -0.934347      -44.9820       44.9820       314.778       359.760    
  31  0.770596     -0.260592      -12.5456       12.5456       326.285       338.830    
  32  0.149868      -1.89800      -91.3751       91.3751       325.148       416.523    
  33  0.234154      -1.45178      -69.8925       69.8925       321.980       391.873    
  34  0.611512     -0.491821      -23.6776       23.6776       314.391       338.069    
  35  0.518093E-01  -2.96019      -142.512       142.512       358.339       500.851    
  36  0.567953     -0.565716      -27.2351       27.2351       309.584       336.819    
  37  0.190847      -1.65628      -79.7381       79.7381       330.093       409.832    
  38  0.104561      -2.25798      -108.706       108.706       325.466       434.171    
  39  0.135276      -2.00044      -96.3066       96.3066       324.169       420.476    
  40  0.262364      -1.33802      -64.4162       64.4162       320.290       384.707    
  41  0.463951     -0.767976      -36.9725       36.9725       325.382       362.354    
  42  0.419672     -0.868282      -41.8015       41.8015       319.349       361.151    
  43  0.897011     -0.108687      -5.23248       5.23248       324.833       330.066    
  44  0.818933     -0.199754      -9.61669       9.61669       311.913       321.530    
  45  0.136906      -1.98846      -95.7302       95.7302       326.333       422.063    
  46  0.561722     -0.576748      -27.7662       27.7662       308.487       336.253    
  47  0.991681     -0.835368E-02 -0.402170      0.402170       321.570       321.973    
  48  0.653388     -0.425585      -20.4888       20.4888       314.547       335.036    
  49  0.578557     -0.547219      -26.3446       26.3446       383.653       409.998    
  50  0.784121     -0.243191      -11.7079       11.7079       313.855       325.563    
  51  0.827307     -0.189579      -9.12687       9.12687       316.644       325.770    
  52  0.994261     -0.575522E-02 -0.277072      0.277072       318.706       318.983    
  53  0.274030      -1.29452      -62.3217       62.3217       324.389       386.711    
  54  0.879777     -0.128087      -6.16644       6.16644       319.480       325.647    
  55  0.694576E-01  -2.66704      -128.399       128.399       311.308       439.707    
  56  0.431517E-01  -3.14303      -151.314       151.314       327.018       478.333    
  57  0.620633     -0.477015      -22.9648       22.9648       335.383       358.347    
  58  0.166702      -1.79155      -86.2502       86.2502       331.399       417.650    
  59  0.785136E-01  -2.54448      -122.498       122.498       320.138       442.636    
  60  0.440162     -0.820613      -39.5066       39.5066       340.979       380.486    
  61  0.924092     -0.789432E-01  -3.80054       3.80054       321.315       325.115    
  62  0.957397     -0.435372E-01  -2.09600       2.09600       316.394       318.490    
  63  0.817312     -0.201734      -9.71203       9.71203       313.293       323.005    
  64  0.345978      -1.06138      -51.0977       51.0977       352.263       403.361    
loop,thermsimp(1:2)       46   116.977       55.9593    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    153        309.82          0.88          1.11         23.04          0.09          0.04         25.15
Just calling func    0   0         25.16


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    154        350.23          0.87          1.11         23.05          0.05          0.05         25.12
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    309.82
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    48.1428               190
loop is:       46
neval is:      153
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       46      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    48.1428               190
loop is:       47
neval is:      153


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      190
neval,tstepnext:      153     190

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.419083E-01  -3.17227      -152.722       152.722       316.394       469.116    
   2  0.581082     -0.542864      -26.1350       26.1350       318.706       344.841    
   3  0.690143     -0.370857      -17.8541       17.8541       311.913       329.767    
   4  0.958690     -0.421877E-01  -2.03103       2.03103       321.570       323.601    
   5  0.947492     -0.539367E-01  -2.59666       2.59666       304.814       307.411    
   6  0.253816E-01  -3.67373      -176.864       176.864       313.293       490.157    
   7  0.811950     -0.208316      -10.0289       10.0289       321.315       331.344    
   8  0.448512     -0.801821      -38.6019       38.6019       325.176       363.778    
   9  0.625244     -0.469613      -22.6085       22.6085       313.855       336.463    
  10  0.557627     -0.584065      -28.1185       28.1185       319.480       347.599    
  11  0.762657     -0.270947      -13.0442       13.0442       316.644       329.688    
  12  0.579328     -0.545887      -26.2805       26.2805       324.811       351.091    
  13  0.168395      -1.78144      -85.7637       85.7637       320.415       406.179    
  14  0.993282     -0.674111E-02 -0.324536      0.324536       324.833       325.158    
  15  0.573458     -0.556070      -26.7708       26.7708       316.751       343.522    
  16  0.900456     -0.104854      -5.04794       5.04794       314.110       319.158    
  17  0.961937     -0.388068E-01  -1.86827       1.86827       314.547       316.415    
  18  0.685702     -0.377312      -18.1649       18.1649       321.141       339.306    
  19  0.335644      -1.09171      -52.5577       52.5577       308.487       361.044    
  20  0.726392     -0.319666      -15.3896       15.3896       309.584       324.973    
  21  0.523515     -0.647189      -31.1575       31.1575       314.391       345.549    
  22  0.877914     -0.130206      -6.26850       6.26850       326.285       332.553    
  23  0.893563     -0.112539      -5.41794       5.41794       295.636       301.054    
  24  0.829449     -0.186994      -9.00242       9.00242       318.875       327.877    
  25  0.454457     -0.788653      -37.9679       37.9679       323.311       361.279    
  26  0.261407      -1.34168      -64.5920       64.5920       298.353       362.945    
  27  0.144225      -1.93638      -93.2228       93.2228       298.574       391.797    
  28  0.963744     -0.369299E-01  -1.77791       1.77791       328.180       329.958    
  29  0.267843      -1.31735      -63.4211       63.4211       315.117       378.538    
  30  0.251943E-01  -3.68114      -177.220       177.220       311.670       488.890    
  31  0.321532      -1.13466      -54.6256       54.6256       335.383       390.008    
  32  0.440903     -0.818930      -39.4256       39.4256       314.778       354.204    
  33  0.214416      -1.53984      -74.1321       74.1321       319.349       393.481    
  34  0.212185      -1.55030      -74.6357       74.6357       325.382       400.018    
  35  0.948253E-01  -2.35572      -113.411       113.411       308.719       422.130    
  36  0.507627     -0.678008      -32.6412       32.6412       316.129       348.770    
  37  0.415074     -0.879299      -42.3319       42.3319       320.952       363.284    
  38  0.768069     -0.263876      -12.7037       12.7037       305.577       318.281    
  39  0.462999E-01  -3.07261      -147.924       147.924       340.979       488.904    
  40  0.835390     -0.179856      -8.65879       8.65879       320.290       328.949    
  41  0.678734     -0.387526      -18.6566       18.6566       318.584       337.240    
  42  0.363569      -1.01179      -48.7102       48.7102       324.389       373.099    
  43  0.677161     -0.389846      -18.7683       18.7683       310.344       329.113    
  44  0.506668     -0.679899      -32.7322       32.7322       321.980       354.712    
  45  0.875658     -0.132779      -6.39236       6.39236       320.267       326.660    
  46  0.924863     -0.781102E-01  -3.76044       3.76044       352.263       356.024    
  47  0.794570E-01  -2.53254      -121.924       121.924       306.186       428.109    
  48  0.449212     -0.800261      -38.5268       38.5268       330.093       368.620    
  49  0.658987     -0.417051      -20.0780       20.0780       383.653       403.731    
  50  0.674357     -0.393995      -18.9680       18.9680       325.148       344.116    
  51  0.436334     -0.829348      -39.9271       39.9271       300.470       340.397    
  52  0.331871      -1.10301      -53.1019       53.1019       331.399       384.501    
  53  0.233029      -1.45659      -70.1245       70.1245       326.643       396.768    
  54  0.207666      -1.57183      -75.6721       75.6721       324.169       399.841    
  55  0.801765     -0.220940      -10.6367       10.6367       326.333       336.969    
  56  0.614336E-01  -2.78980      -134.309       134.309       323.034       457.343    
  57  0.167288      -1.78804      -86.0811       86.0811       325.466       411.547    
  58  0.718808     -0.330162      -15.8949       15.8949       311.308       327.203    
  59  0.981938     -0.182272E-01 -0.877509      0.877509       320.138       321.015    
  60  0.759328     -0.275322      -13.2548       13.2548       326.099       339.353    
  61  0.290749      -1.23530      -59.4706       59.4706       326.229       385.699    
  62  0.887200     -0.119685      -5.76197       5.76197       323.798       329.560    
  63  0.186280      -1.68051      -80.9042       80.9042       327.018       407.922    
  64  0.427708     -0.849315      -40.8884       40.8884       309.825       350.713    
loop,thermsimp(1:2)       47   152.722       26.1350    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    155        319.20          0.88          1.11         23.11          0.00          0.04         25.14
Just calling func    0   0         25.15


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    319.20
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    48.1428               190
loop is:       47
neval is:      154
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       47      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    48.1428               190
loop is:       48
neval is:      154


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      190
neval,tstepnext:      154     190

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.566816     -0.567720      -27.3316       27.3316       295.636       322.967    
   2  0.216137      -1.53184      -73.7471       73.7471       304.814       378.561    
   3  0.476425     -0.741444      -35.6952       35.6952       314.547       350.242    
   4  0.184047      -1.69256      -81.4847       81.4847       305.577       387.062    
   5  0.722630     -0.324858      -15.6396       15.6396       314.110       329.750    
   6  0.887750     -0.119065      -5.73212       5.73212       320.138       325.870    
   7  0.236344      -1.44247      -69.4444       69.4444       321.570       391.015    
   8  0.798055     -0.225578      -10.8599       10.8599       309.584       320.444    
   9  0.425454     -0.854597      -41.1427       41.1427       324.833       365.976    
  10  0.605701     -0.501368      -24.1373       24.1373       320.267       344.405    
  11  0.742456     -0.297792      -14.3365       14.3365       311.308       325.645    
  12  0.378462E-01  -3.27423      -157.630       157.630       318.875       476.505    
  13  0.341910      -1.07321      -51.6672       51.6672       320.290       371.958    
  14  0.794971E-01  -2.53203      -121.899       121.899       310.344       432.244    
  15  0.586423     -0.533715      -25.6945       25.6945       323.798       349.493    
  16  0.990523     -0.952170E-02 -0.458401      0.458401       316.644       317.102    
  17  0.348475      -1.05419      -50.7515       50.7515       311.913       362.665    
  18  0.998034     -0.196755E-02 -0.947232E-01  0.947232E-01   328.180       328.274    
  19  0.616072     -0.484391      -23.3199       23.3199       321.315       344.635    
  20  0.427239     -0.850411      -40.9411       40.9411       326.285       367.226    
  21  0.598160     -0.513898      -24.7405       24.7405       313.855       338.595    
  22  0.642831     -0.441873      -21.2730       21.2730       326.333       347.606    
  23  0.392766     -0.934541      -44.9914       44.9914       318.584       363.575    
  24  0.738407     -0.303260      -14.5998       14.5998       321.141       335.741    
  25  0.334341      -1.09559      -52.7449       52.7449       326.099       378.844    
  26  0.997912     -0.208996E-02 -0.100616      0.100616       300.470       300.570    
  27  0.492305E-01  -3.01124      -144.970       144.970       316.751       461.721    
  28  0.304734      -1.18832      -57.2088       57.2088       325.148       382.357    
  29  0.159886      -1.83330      -88.2600       88.2600       318.706       406.966    
  30  0.991331     -0.870666E-02 -0.419163      0.419163       314.391       314.811    
  31  0.735164     -0.307662      -14.8117       14.8117       319.480       334.292    
  32  0.279948      -1.27315      -61.2930       61.2930       316.129       377.422    
  33  0.457260     -0.782502      -37.6718       37.6718       309.825       347.496    
  34  0.678170     -0.388358      -18.6966       18.6966       324.811       343.507    
  35  0.689603     -0.371639      -17.8917       17.8917       314.778       332.670    
  36  0.468470     -0.758283      -36.5058       36.5058       321.980       358.486    
  37  0.937429     -0.646141E-01  -3.11070       3.11070       352.263       355.374    
  38  0.115915      -2.15490      -103.743       103.743       308.487       412.230    
  39  0.125789      -2.07315      -99.8070       99.8070       323.311       423.118    
  40  0.137562      -1.98368      -95.5000       95.5000       298.353       393.853    
  41  0.273901      -1.29499      -62.3443       62.3443       320.952       383.296    
  42  0.934963     -0.672484E-01  -3.23753       3.23753       325.176       328.413    
  43  0.450296     -0.797850      -38.4107       38.4107       330.093       368.504    
  44  0.681645     -0.383246      -18.4505       18.4505       324.389       342.839    
  45  0.282914E-01  -3.56520      -171.638       171.638       315.117       486.755    
  46  0.962226     -0.385062E-01  -1.85379       1.85379       331.399       333.253    
  47  0.771412     -0.259533      -12.4946       12.4946       326.229       338.723    
  48  0.778208     -0.250761      -12.0724       12.0724       335.383       347.455    
  49  0.945686     -0.558450E-01  -2.68853       2.68853       298.574       301.262    
  50  0.648669     -0.432833      -20.8378       20.8378       319.349       340.187    
  51  0.214283      -1.54046      -74.1618       74.1618       326.643       400.805    
  52  0.692999     -0.366726      -17.6552       17.6552       324.169       341.824    
  53  0.966323     -0.342573E-01  -1.64924       1.64924       325.382       327.031    
  54  0.975007     -0.253104E-01  -1.21851       1.21851       383.653       384.872    
  55  0.947991E-01  -2.35600      -113.424       113.424       320.415       433.840    
  56  0.195092      -1.63429      -78.6791       78.6791       327.018       405.697    
  57  0.459282     -0.778091      -37.4594       37.4594       325.466       362.925    
  58  0.563954     -0.572782      -27.5753       27.5753       308.719       336.295    
  59  0.482884     -0.727978      -35.0469       35.0469       306.186       341.233    
  60  0.270357      -1.30801      -62.9714       62.9714       323.034       386.006    
  61  0.184282      -1.69129      -81.4232       81.4232       316.394       397.817    
  62  0.486455     -0.720611      -34.6922       34.6922       311.670       346.362    
  63  0.348603      -1.05382      -50.7339       50.7339       340.979       391.713    
  64  0.556175     -0.586673      -28.2441       28.2441       319.205       347.449    
loop,thermsimp(1:2)       48   27.3316       73.7471    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    156        409.25          0.88          1.11         23.13          0.00          0.04         25.16
Just calling func    0   0         25.15


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    409.25
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    48.1428               190
loop is:       48
neval is:      155
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       48      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    48.1428               190
loop is:       49
neval is:      155


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      190
neval,tstepnext:      155     190

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.180970      -1.70942      -82.2963       82.2963       300.470       382.766    
   2  0.335083      -1.09338      -52.6382       52.6382       298.574       351.212    
   3  0.585160     -0.535871      -25.7983       25.7983       314.391       340.190    
   4  0.445729     -0.808044      -38.9015       38.9015       316.644       355.545    
   5  0.963605     -0.370741E-01  -1.78485       1.78485       309.584       311.369    
   6  0.538074     -0.619758      -29.8369       29.8369       295.636       325.473    
   7  0.971443     -0.289729E-01  -1.39484       1.39484       311.308       312.703    
   8  0.817136     -0.201950      -9.72243       9.72243       320.138       329.860    
   9  0.216943      -1.52812      -73.5680       73.5680       325.382       398.950    
  10  0.572311     -0.558074      -26.8672       26.8672       328.180       355.047    
  11  0.511761     -0.669897      -32.2507       32.2507       325.176       357.426    
  12  0.331920E-01  -3.40545      -163.948       163.948       314.110       478.058    
  13  0.662680     -0.411462      -19.8089       19.8089       314.778       334.587    
  14  0.578679     -0.547007      -26.3344       26.3344       331.399       357.734    
  15  0.473979     -0.746592      -35.9430       35.9430       319.480       355.423    
  16  0.243750      -1.41161      -67.9589       67.9589       321.141       389.100    
  17  0.784227     -0.243057      -11.7015       11.7015       308.719       320.421    
  18  0.215065      -1.53682      -73.9865       73.9865       313.855       387.841    
  19  0.813272     -0.206689      -9.95060       9.95060       326.229       336.179    
  20  0.877336     -0.130865      -6.30021       6.30021       319.349       325.649    
  21  0.911070     -0.931357E-01  -4.48381       4.48381       306.186       310.670    
  22  0.424500     -0.856844      -41.2509       41.2509       324.169       365.420    
  23  0.122508      -2.09958      -101.080       101.080       324.389       425.469    
  24  0.173199      -1.75331      -84.4094       84.4094       324.811       409.220    
  25  0.243010      -1.41465      -68.1054       68.1054       320.267       388.373    
  26  0.618804     -0.479966      -23.1069       23.1069       321.315       344.422    
  27  0.365303      -1.00703      -48.4811       48.4811       311.670       360.151    
  28  0.178054      -1.72567      -83.0785       83.0785       319.205       402.283    
  29  0.416122     -0.876776      -42.2104       42.2104       335.383       377.593    
  30  0.789287     -0.236625      -11.3918       11.3918       309.825       321.216    
  31  0.786736     -0.239863      -11.5477       11.5477       326.333       337.880    
  32  0.295880      -1.21780      -58.6283       58.6283       323.798       382.427    
  33  0.418649     -0.870722      -41.9190       41.9190       314.547       356.466    
  34  0.706992     -0.346736      -16.6928       16.6928       352.263       368.956    
  35  0.281863      -1.26633      -60.9648       60.9648       321.980       382.945    
  36  0.357290      -1.02921      -49.5490       49.5490       311.913       361.462    
  37  0.174180      -1.74767      -84.1375       84.1375       325.466       409.603    
  38  0.190924      -1.65588      -79.7187       79.7187       318.584       398.302    
  39  0.630369     -0.461449      -22.2154       22.2154       324.833       347.049    
  40  0.252261      -1.37729      -66.3066       66.3066       326.285       392.591    
  41  0.359213      -1.02384      -49.2906       49.2906       330.093       379.384    
  42  0.740344     -0.300640      -14.4737       14.4737       320.290       334.764    
  43  0.283211      -1.26156      -60.7352       60.7352       316.129       376.864    
  44  0.965119     -0.355039E-01  -1.70925       1.70925       304.814       306.523    
  45  0.389600     -0.942634      -45.3810       45.3810       326.099       371.480    
  46  0.598383     -0.513525      -24.7225       24.7225       325.148       349.870    
  47  0.631795     -0.459190      -22.1067       22.1067       320.952       343.059    
  48  0.997460     -0.254363E-02 -0.122458      0.122458       383.653       383.776    
  49  0.192532      -1.64749      -79.3150       79.3150       323.034       402.349    
  50  0.769348     -0.262212      -12.6236       12.6236       305.577       318.201    
  51  0.740745     -0.300099      -14.4476       14.4476       321.570       336.018    
  52  0.590587     -0.526639      -25.3539       25.3539       340.979       366.333    
  53  0.628310E-01  -2.76731      -133.226       133.226       298.353       431.579    
  54  0.515529     -0.662562      -31.8976       31.8976       316.394       348.292    
  55  0.306025      -1.18409      -57.0053       57.0053       326.643       383.649    
  56  0.686790     -0.375726      -18.0885       18.0885       327.018       345.107    
  57  0.357910      -1.02747      -49.4655       49.4655       318.706       368.172    
  58  0.267469      -1.31875      -63.4883       63.4883       308.487       371.975    
  59  0.410193     -0.891128      -42.9014       42.9014       323.311       366.213    
  60  0.490314     -0.712709      -34.3118       34.3118       310.344       344.656    
  61  0.395217     -0.928320      -44.6919       44.6919       320.415       365.107    
  62  0.641491E-01  -2.74655      -132.226       132.226       316.751       448.978    
  63  0.610173     -0.494012      -23.7831       23.7831       318.875       342.658    
  64  0.657523     -0.419276      -20.1851       20.1851       409.249       429.434    
loop,thermsimp(1:2)       49   82.2963       52.6382    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    157        319.65          0.88          1.11         23.12          0.02          0.05         25.17
Just calling func    0   0         25.17


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    319.65
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    48.1428               190
loop is:       49
neval is:      156
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       49      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    48.1428               190
loop is:       50
neval is:      156


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      190
neval,tstepnext:      156     190

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.317228E-01  -3.45072      -166.127       166.127       304.814       470.941    
   2  0.601445     -0.508421      -24.4768       24.4768       306.186       330.663    
   3  0.651191     -0.428952      -20.6509       20.6509       309.584       330.235    
   4  0.187303      -1.67503      -80.6404       80.6404       311.308       391.948    
   5  0.664603     -0.408566      -19.6695       19.6695       305.577       325.247    
   6  0.945236     -0.563208E-01  -2.71144       2.71144       308.719       311.431    
   7  0.865870     -0.144020      -6.93352       6.93352       309.825       316.758    
   8  0.674117     -0.394351      -18.9852       18.9852       295.636       314.621    
   9  0.959689E-01  -2.34373      -112.834       112.834       319.349       432.183    
  10  0.663337     -0.410472      -19.7613       19.7613       320.138       339.899    
  11  0.384854     -0.954891      -45.9711       45.9711       314.778       360.749    
  12  0.892338     -0.113910      -5.48396       5.48396       320.290       325.774    
  13  0.470837     -0.753243      -36.2632       36.2632       321.570       357.834    
  14  0.262618      -1.33706      -64.3696       64.3696       326.229       390.598    
  15  0.877143     -0.131085      -6.31078       6.31078       326.333       332.643    
  16  0.262102      -1.33902      -64.4642       64.4642       314.391       378.856    
  17  0.306130      -1.18375      -56.9889       56.9889       318.875       375.864    
  18  0.251844      -1.37895      -66.3864       66.3864       320.952       387.338    
  19  0.371147     -0.991157      -47.7171       47.7171       321.315       369.032    
  20  0.244393E-01  -3.71156      -178.685       178.685       310.344       489.029    
  21  0.550903     -0.596197      -28.7026       28.7026       327.018       355.721    
  22  0.509078     -0.675154      -32.5038       32.5038       324.833       357.337    
  23  0.741178     -0.299515      -14.4195       14.4195       316.394       330.814    
  24  0.585965     -0.534496      -25.7321       25.7321       325.148       350.880    
  25  0.602491     -0.506683      -24.3931       24.3931       298.574       322.967    
  26  0.532366     -0.630423      -30.3503       30.3503       328.180       358.530    
  27  0.264247      -1.33087      -64.0718       64.0718       319.480       383.552    
  28  0.468512     -0.758194      -36.5016       36.5016       316.644       353.145    
  29  0.338122      -1.08435      -52.2036       52.2036       314.547       366.750    
  30  0.815455     -0.204008      -9.82153       9.82153       325.176       334.997    
  31  0.126007      -2.07142      -99.7239       99.7239       331.399       431.123    
  32  0.391435     -0.937937      -45.1549       45.1549       311.670       356.825    
  33  0.477179     -0.739864      -35.6191       35.6191       311.913       347.532    
  34  0.926058     -0.768180E-01  -3.69823       3.69823       320.415       324.114    
  35  0.305992E-01  -3.48678      -167.863       167.863       324.169       492.033    
  36  0.142122      -1.95107      -93.9299       93.9299       323.311       417.241    
  37  0.934627E-01  -2.37019      -114.108       114.108       340.979       455.087    
  38  0.933240     -0.690924E-01  -3.32630       3.32630       318.706       322.032    
  39  0.551354     -0.595378      -28.6631       28.6631       352.263       380.926    
  40  0.167646      -1.78590      -85.9782       85.9782       326.099       412.077    
  41  0.657770     -0.418900      -20.1670       20.1670       308.487       328.654    
  42  0.937012     -0.650587E-01  -3.13211       3.13211       316.129       319.261    
  43  0.435130     -0.832109      -40.0601       40.0601       335.383       375.443    
  44  0.346278E-01  -3.36310      -161.909       161.909       330.093       492.002    
  45  0.529273     -0.636251      -30.6309       30.6309       323.798       354.429    
  46  0.543808     -0.609159      -29.3266       29.3266       300.470       329.796    
  47  0.476993     -0.740254      -35.6379       35.6379       321.980       357.618    
  48  0.602365     -0.506891      -24.4031       24.4031       326.643       351.046    
  49  0.429141     -0.845970      -40.7274       40.7274       383.653       424.380    
  50  0.161300E-01  -4.12707      -198.689       198.689       313.855       512.544    
  51  0.806405     -0.215169      -10.3589       10.3589       320.267       330.626    
  52  0.577848E-01  -2.85103      -137.256       137.256       321.141       458.397    
  53  0.992308     -0.772154E-02 -0.371736      0.371736       326.285       326.656    
  54  0.130687      -2.03495      -97.9683       97.9683       318.584       416.552    
  55  0.844072     -0.169518      -8.16105       8.16105       325.382       333.543    
  56  0.900890     -0.104372      -5.02478       5.02478       319.205       324.229    
  57  0.886923E-01  -2.42258      -116.630       116.630       323.034       439.664    
  58  0.675479     -0.392334      -18.8880       18.8880       324.811       343.699    
  59  0.486368     -0.720791      -34.7009       34.7009       325.466       360.166    
  60  0.868319E-01  -2.44378      -117.650       117.650       324.389       442.039    
  61  0.536051     -0.623527      -30.0183       30.0183       409.249       439.267    
  62  0.916344     -0.873636E-01  -4.20593       4.20593       298.353       302.559    
  63  0.264660E-01  -3.63190      -174.850       174.850       316.751       491.601    
  64  0.765006     -0.267871      -12.8961       12.8961       319.650       332.546    
loop,thermsimp(1:2)       50   166.127       24.4768    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    158        317.69          0.88          1.11         23.12          0.01          0.04         25.16
Just calling func    0   0         25.16


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    159        340.27          0.86          1.10         23.13          0.00          0.05         25.14
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    317.69
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    48.1428               190
loop is:       50
neval is:      158
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       50      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    48.1428               190
loop is:       51
neval is:      158


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      190
neval,tstepnext:      158     190

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.929295     -0.733287E-01  -3.53025       3.53025       298.353       301.883    
   2  0.669511     -0.401208      -19.3153       19.3153       308.719       328.035    
   3  0.863337E-01  -2.44954      -117.927       117.927       295.636       413.563    
   4  0.279945      -1.27316      -61.2936       61.2936       309.825       371.118    
   5  0.832640     -0.183154      -8.81755       8.81755       316.129       324.947    
   6  0.848933     -0.163775      -7.88460       7.88460       318.706       326.591    
   7  0.141794      -1.95338      -94.0413       94.0413       298.574       392.615    
   8  0.208764      -1.56655      -75.4182       75.4182       320.415       395.834    
   9  0.755787     -0.279996      -13.4798       13.4798       319.205       332.684    
  10  0.177416      -1.72926      -83.2513       83.2513       305.577       388.829    
  11  0.405148     -0.903503      -43.4971       43.4971       320.290       363.788    
  12  0.640380     -0.445693      -21.4569       21.4569       326.285       347.742    
  13  0.548060     -0.601370      -28.9516       28.9516       308.487       337.438    
  14  0.773287     -0.257105      -12.3777       12.3777       300.470       312.847    
  15  0.180768      -1.71054      -82.3502       82.3502       309.584       391.934    
  16  0.135846      -1.99624      -96.1043       96.1043       320.267       416.372    
  17  0.601016     -0.509133      -24.5111       24.5111       306.186       330.697    
  18  0.302263      -1.19646      -57.6008       57.6008       316.394       373.995    
  19  0.189428      -1.66374      -80.0973       80.0973       319.650       399.747    
  20  0.737158     -0.304953      -14.6813       14.6813       326.333       341.014    
  21  0.790680     -0.234862      -11.3069       11.3069       325.382       336.689    
  22  0.177192E-01  -4.03310      -194.165       194.165       325.176       519.341    
  23  0.236042      -1.44375      -69.5059       69.5059       320.138       389.644    
  24  0.459229     -0.778206      -37.4650       37.4650       324.811       362.276    
  25  0.586479E-01  -2.83620      -136.543       136.543       311.913       448.456    
  26  0.263766      -1.33269      -64.1595       64.1595       325.148       389.307    
  27  0.942550     -0.591663E-01  -2.84843       2.84843       326.643       329.492    
  28  0.106855      -2.23628      -107.661       107.661       316.644       424.304    
  29  0.710700     -0.341505      -16.4410       16.4410       323.798       340.239    
  30  0.207109E-01  -3.87709      -186.654       186.654       327.018       513.672    
  31  0.901203     -0.104025      -5.00805       5.00805       311.670       316.678    
  32  0.949751     -0.515555E-01  -2.48203       2.48203       324.833       327.315    
  33  0.343487      -1.06861      -51.4457       51.4457       321.980       373.426    
  34  0.875043     -0.133483      -6.42623       6.42623       321.570       327.997    
  35  0.122447E-01  -4.40266      -211.956       211.956       328.180       540.136    
  36  0.820650     -0.197659      -9.51584       9.51584       325.466       334.981    
  37  0.748866     -0.289195      -13.9227       13.9227       314.778       328.701    
  38  0.594525     -0.519992      -25.0339       25.0339       314.547       339.581    
  39  0.927863E-01  -2.37746      -114.457       114.457       321.315       435.772    
  40  0.631335     -0.459918      -22.1417       22.1417       335.383       357.524    
  41  0.282620      -1.26365      -60.8358       60.8358       318.875       379.711    
  42  0.707811     -0.345578      -16.6371       16.6371       314.391       331.029    
  43  0.930463     -0.720730E-01  -3.46980       3.46980       352.263       355.733    
  44  0.988563     -0.115032E-01 -0.553798      0.553798       319.480       320.034    
  45  0.869439     -0.139907      -6.73552       6.73552       320.952       327.687    
  46  0.693921     -0.365397      -17.5912       17.5912       326.229       343.820    
  47  0.731753     -0.312312      -15.0356       15.0356       311.308       326.344    
  48  0.848712     -0.164035      -7.89711       7.89711       326.099       333.996    
  49  0.174447      -1.74613      -84.0638       84.0638       318.584       402.647    
  50  0.313212      -1.16087      -55.8877       55.8877       323.311       379.199    
  51  0.880789     -0.126937      -6.11110       6.11110       383.653       389.764    
  52  0.441967     -0.816520      -39.3095       39.3095       331.399       370.709    
  53  0.624106     -0.471435      -22.6962       22.6962       319.349       342.045    
  54  0.447426     -0.804244      -38.7185       38.7185       409.249       447.967    
  55  0.681696     -0.383171      -18.4469       18.4469       323.034       341.481    
  56  0.336384      -1.08950      -52.4517       52.4517       324.389       376.841    
  57  0.197044      -1.62433      -78.1996       78.1996       340.979       419.179    
  58  0.186834E-01  -3.98012      -191.614       191.614       321.141       512.755    
  59  0.467980     -0.759329      -36.5562       36.5562       304.814       341.370    
  60  0.607270     -0.498782      -24.0127       24.0127       310.344       334.357    
  61  0.299128      -1.20689      -58.1028       58.1028       316.751       374.854    
  62  0.166354      -1.79364      -86.3506       86.3506       330.093       416.444    
  63  0.542834     -0.610952      -29.4129       29.4129       324.169       353.582    
  64  0.811476     -0.208901      -10.0571       10.0571       317.692       327.749    
loop,thermsimp(1:2)       51   3.53025       19.3153    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    160        309.75          0.88          1.10         23.13          0.05          0.03         25.20
Just calling func    0   0         25.20


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    309.75
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    48.1428               190
loop is:       51
neval is:      159
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       51      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    48.1428               190
loop is:       52
neval is:      159


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      190
neval,tstepnext:      159     190

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.658032     -0.418502      -20.1479       20.1479       298.353       318.501    
   2  0.385391     -0.953496      -45.9040       45.9040       300.470       346.373    
   3  0.323679      -1.12800      -54.3051       54.3051       311.670       365.975    
   4  0.402516E-01  -3.21260      -154.664       154.664       319.480       474.144    
   5  0.866022     -0.143846      -6.92512       6.92512       316.129       323.054    
   6  0.560147     -0.579555      -27.9014       27.9014       311.308       339.209    
   7  0.389098     -0.943925      -45.4432       45.4432       318.706       364.149    
   8  0.470755     -0.753417      -36.2716       36.2716       324.833       361.105    
   9  0.794299     -0.230295      -11.0870       11.0870       320.952       332.039    
  10  0.897132     -0.108553      -5.22603       5.22603       317.692       322.918    
  11  0.359474      -1.02311      -49.2556       49.2556       321.570       370.826    
  12  0.604694     -0.503032      -24.2174       24.2174       308.719       332.937    
  13  0.101554      -2.28717      -110.111       110.111       314.778       424.888    
  14  0.274480      -1.29288      -62.2426       62.2426       326.643       388.886    
  15  0.916086     -0.876445E-01  -4.21945       4.21945       306.186       310.405    
  16  0.820070E-01  -2.50095      -120.403       120.403       314.391       434.794    
  17  0.975902     -0.243929E-01  -1.17434       1.17434       319.205       320.379    
  18  0.131665      -2.02750      -97.6094       97.6094       326.099       423.708    
  19  0.751313     -0.285933      -13.7656       13.7656       310.344       324.110    
  20  0.775324     -0.254475      -12.2511       12.2511       325.466       337.717    
  21  0.237000      -1.43969      -69.3109       69.3109       325.382       394.693    
  22  0.113641      -2.17471      -104.696       104.696       308.487       413.183    
  23  0.762281     -0.271440      -13.0679       13.0679       314.547       327.615    
  24  0.783730     -0.243690      -11.7319       11.7319       323.798       335.530    
  25  0.492891     -0.707468      -34.0595       34.0595       326.333       360.392    
  26  0.471904     -0.750980      -36.1543       36.1543       304.814       340.968    
  27  0.855781     -0.155740      -7.49777       7.49777       323.034       330.532    
  28  0.636473     -0.451814      -21.7516       21.7516       319.349       341.101    
  29  0.433340     -0.836232      -40.2585       40.2585       326.229       366.487    
  30  0.482236     -0.729321      -35.1115       35.1115       326.285       361.396    
  31  0.855143E-01  -2.45907      -118.387       118.387       324.169       442.556    
  32  0.916579     -0.871071E-01  -4.19358       4.19358       352.263       356.457    
  33  0.232519      -1.45878      -70.2299       70.2299       335.383       405.612    
  34  0.283977      -1.25886      -60.6051       60.6051       324.811       385.416    
  35  0.401228E-01  -3.21581      -154.818       154.818       320.290       475.109    
  36  0.235231      -1.44719      -69.6717       69.6717       331.399       401.071    
  37  0.233426      -1.45489      -70.0424       70.0424       309.825       379.867    
  38  0.903594     -0.101376      -4.88050       4.88050       321.980       326.861    
  39  0.857571     -0.153651      -7.39718       7.39718       316.394       323.791    
  40  0.444085     -0.811739      -39.0794       39.0794       316.751       355.831    
  41  0.151055      -1.89011      -90.9953       90.9953       324.389       415.384    
  42  0.745694     -0.293440      -14.1270       14.1270       323.311       337.438    
  43  0.470647E-01  -3.05623      -147.135       147.135       318.875       466.010    
  44  0.344459      -1.06578      -51.3097       51.3097       305.577       356.887    
  45  0.592738     -0.523004      -25.1788       25.1788       325.148       350.327    
  46  0.754292     -0.281975      -13.5751       13.5751       320.138       333.713    
  47  0.162950      -1.81431      -87.3461       87.3461       383.653       470.999    
  48  0.939100     -0.628333E-01  -3.02497       3.02497       309.584       312.609    
  49  0.966845     -0.337175E-01  -1.62326       1.62326       298.574       300.197    
  50  0.287323      -1.24715      -60.0411       60.0411       320.415       380.457    
  51  0.835081     -0.180227      -8.67661       8.67661       319.650       328.326    
  52  0.836052     -0.179064      -8.62064       8.62064       318.584       327.204    
  53  0.382321     -0.961495      -46.2890       46.2890       295.636       341.925    
  54  0.873869     -0.134824      -6.49081       6.49081       320.267       326.758    
  55  0.169635      -1.77411      -85.4104       85.4104       330.093       415.504    
  56  0.511680     -0.670055      -32.2583       32.2583       340.979       373.238    
  57  0.687848     -0.374188      -18.0144       18.0144       316.644       334.658    
  58  0.659885     -0.415689      -20.0124       20.0124       321.315       341.327    
  59  0.615967     -0.484562      -23.3281       23.3281       409.249       432.577    
  60  0.600029     -0.510778      -24.5903       24.5903       311.913       336.503    
  61  0.166513      -1.79268      -86.3047       86.3047       321.141       407.445    
  62  0.730640     -0.313835      -15.1089       15.1089       327.018       342.127    
  63  0.168194      -1.78264      -85.8212       85.8212       325.176       410.997    
  64  0.562652E-01  -2.87768      -138.539       138.539       309.752       448.292    
loop,thermsimp(1:2)       52   20.1479       45.9040    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    161        307.64          0.84          1.10         23.15          0.16          0.04         25.29
Just calling func    0   0         25.29


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  160    307.64        4.088    -0.4297E-01  3.515     -100.0     0.3187    
                     -0.8277      2.347     -100.0      2.343     0.8732    
                       1.081    -0.2679E-01  2.400      0.000      0.000    
                      -1.206      0.000      0.000      0.000     -1.221    

                      -2.500      9203.     0.1331E+05 -637.3     -1765.    
                      -2.000     -4.905     -2.620     -6.014     -3.212    
                      -13.09     -2.548      1359.      0.000      3354.    

                       4764.      3323.      5073.      5329.      2500.    
                       4298.     0.5850E-01-0.9207E-01  0.000    -0.2136E-01
                     -0.1996E-01-0.8143E-01 0.1001    -0.1361     0.2534E-01

                     -0.7718    -0.8732      0.000     0.2435     0.6733E-01
                      0.8541E-01 0.3355E-01-0.8972E-02 0.3973E-01-0.1821E-02
                     -0.8586E-02 0.6409E-01-0.1360    -0.8732      0.000    

                     -0.8287     -1.567      3.159     -1.045      0.000    
                       0.000      9.120      9.263     -5830.     -4.000    
                     -0.1614     0.1902      8.981      8.721     -6674.    

                      -4.000     0.1902     0.4312      9.242      9.063    
                      -5250.     -4.000     0.1902     0.1902      9.463    
                       8.863     -4366.     -2.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    307.64
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    48.1428               190
loop is:       52
neval is:      160
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       52      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    48.1428               190
loop is:       53
neval is:      160


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      190
neval,tstepnext:      160     190

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.581749     -0.541717      -26.0798       26.0798       298.574       324.654    
   2  0.307993      -1.17768      -56.6966       56.6966       306.186       362.882    
   3  0.551684     -0.594779      -28.6343       28.6343       309.584       338.218    
   4  0.969976     -0.304835E-01  -1.46756       1.46756       298.353       299.820    
   5  0.401714     -0.912015      -43.9069       43.9069       319.205       363.112    
   6  0.336211      -1.09002      -52.4764       52.4764       317.692       370.169    
   7  0.649191     -0.432028      -20.7990       20.7990       316.129       336.928    
   8  0.426986     -0.851005      -40.9698       40.9698       316.394       357.364    
   9  0.479997     -0.733976      -35.3356       35.3356       310.344       345.680    
  10  0.441527     -0.817516      -39.3575       39.3575       320.267       359.625    
  11  0.218988      -1.51874      -73.1163       73.1163       321.980       395.096    
  12  0.935549     -0.666221E-01  -3.20737       3.20737       318.584       321.791    
  13  0.159996      -1.83261      -88.2269       88.2269       314.547       402.774    
  14  0.486870     -0.719759      -34.6512       34.6512       319.650       354.301    
  15  0.835520     -0.179701      -8.65129       8.65129       323.034       331.686    
  16  0.643759     -0.440431      -21.2036       21.2036       320.952       342.155    
  17  0.177188      -1.73054      -83.3132       83.3132       308.719       392.033    
  18  0.408356     -0.895617      -43.1175       43.1175       320.138       363.255    
  19  0.463768     -0.768371      -36.9915       36.9915       316.644       353.635    
  20  0.616820     -0.483178      -23.2615       23.2615       323.798       347.060    
  21  0.377083     -0.975289      -46.9531       46.9531       311.913       358.866    
  22  0.278016      -1.28008      -61.6265       61.6265       323.311       384.938    
  23  0.746435     -0.292446      -14.0792       14.0792       325.466       339.545    
  24  0.872234     -0.136697      -6.58098       6.58098       311.308       317.889    
  25  0.887073E-01  -2.42241      -116.622       116.622       304.814       421.436    
  26  0.124913      -2.08014      -100.144       100.144       319.349       419.493    
  27  0.918160     -0.853835E-01  -4.11060       4.11060       321.315       325.425    
  28  0.924603     -0.783912E-01  -3.77397       3.77397       295.636       299.410    
  29  0.863214     -0.147092      -7.08144       7.08144       327.018       334.100    
  30  0.823499E-02  -4.79936      -231.055       231.055       300.470       531.524    
  31  0.548113     -0.601275      -28.9470       28.9470       325.148       354.095    
  32  0.800553     -0.222452      -10.7095       10.7095       316.751       327.461    
  33  0.180829      -1.71020      -82.3339       82.3339       352.263       434.597    
  34  0.968975E-01  -2.33410      -112.370       112.370       305.577       417.948    
  35  0.749847     -0.287886      -13.8597       13.8597       326.333       340.192    
  36  0.902028     -0.103110      -4.96400       4.96400       324.833       329.797    
  37  0.312083      -1.16449      -56.0616       56.0616       326.285       382.346    
  38  0.472691     -0.749313      -36.0740       36.0740       318.706       354.780    
  39  0.970346     -0.301026E-01  -1.44922       1.44922       311.670       313.119    
  40  0.485853     -0.721850      -34.7519       34.7519       326.229       360.981    
  41  0.604658     -0.503092      -24.2203       24.2203       321.570       345.791    
  42  0.172238      -1.75888      -84.6774       84.6774       340.979       425.657    
  43  0.359079E-01  -3.32680      -160.161       160.161       309.825       469.986    
  44  0.464923     -0.765884      -36.8718       36.8718       320.415       357.287    
  45  0.293512      -1.22584      -59.0152       59.0152       324.811       383.826    
  46  0.572788     -0.557239      -26.8270       26.8270       326.643       353.470    
  47  0.931713     -0.707300E-01  -3.40514       3.40514       325.382       328.787    
  48  0.983012     -0.171340E-01 -0.824880      0.824880       331.399       332.224    
  49  0.572194     -0.558278      -26.8770       26.8770       335.383       362.260    
  50  0.272189      -1.30126      -62.6462       62.6462       321.141       383.787    
  51  0.521081     -0.651849      -31.3818       31.3818       325.176       356.558    
  52  0.560075     -0.579685      -27.9077       27.9077       308.487       336.394    
  53  0.442251     -0.815877      -39.2786       39.2786       324.389       363.667    
  54  0.541873     -0.612723      -29.4982       29.4982       330.093       359.592    
  55  0.619019     -0.479619      -23.0902       23.0902       326.099       349.189    
  56  0.554460     -0.589760      -28.3927       28.3927       314.778       343.171    
  57  0.942853     -0.588454E-01  -2.83298       2.83298       409.249       412.081    
  58  0.289656E-01  -3.54165      -170.505       170.505       314.391       484.896    
  59  0.420166     -0.867105      -41.7448       41.7448       324.169       365.914    
  60  0.304886      -1.18782      -57.1848       57.1848       309.752       366.937    
  61  0.799970     -0.223182      -10.7446       10.7446       318.875       329.619    
  62  0.330194      -1.10808      -53.3458       53.3458       383.653       436.999    
  63  0.193095      -1.64457      -79.1742       79.1742       319.480       398.654    
  64  0.151812      -1.88511      -90.7545       90.7545       307.638       398.392    
loop,thermsimp(1:2)       53   26.0798       56.6966    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    162        332.77          0.88          1.10         23.09          0.09          0.04         25.20
Just calling func    0   0         25.20


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    332.77
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    48.1428               190
loop is:       53
neval is:      161
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       53      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    48.1428               190
loop is:       54
neval is:      161


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      190
neval,tstepnext:      161     190

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.565968     -0.569218      -27.4037       27.4037       295.636       323.040    
   2  0.698829     -0.358349      -17.2519       17.2519       298.353       315.605    
   3  0.550231     -0.597418      -28.7613       28.7613       311.670       340.432    
   4  0.844966     -0.168459      -8.11007       8.11007       311.308       319.418    
   5  0.139804      -1.96751      -94.7215       94.7215       318.584       413.305    
   6  0.119451      -2.12485      -102.296       102.296       298.574       400.870    
   7  0.474112     -0.746312      -35.9296       35.9296       321.315       357.244    
   8  0.293024      -1.22750      -59.0952       59.0952       316.751       375.847    
   9  0.760137     -0.274256      -13.2034       13.2034       325.382       338.585    
  10  0.216376      -1.53074      -73.6940       73.6940       318.875       392.569    
  11  0.837069     -0.177849      -8.56213       8.56213       324.833       333.395    
  12  0.969258     -0.312245E-01  -1.50324       1.50324       323.034       324.537    
  13  0.335918      -1.09089      -52.5184       52.5184       331.399       383.918    
  14  0.966643     -0.339265E-01  -1.63332       1.63332       327.018       328.652    
  15  0.723887     -0.323119      -15.5559       15.5559       308.487       324.043    
  16  0.459929E-01  -3.07927      -148.244       148.244       316.129       464.374    
  17  0.536724     -0.622271      -29.9579       29.9579       309.584       339.542    
  18  0.432574     -0.838001      -40.3437       40.3437       325.466       365.809    
  19  0.160308      -1.83066      -88.1330       88.1330       326.333       414.466    
  20  0.885158     -0.121989      -5.87289       5.87289       320.952       326.825    
  21  0.753783     -0.282650      -13.6076       13.6076       314.778       328.386    
  22  0.135562      -1.99832      -96.2048       96.2048       310.344       406.549    
  23  0.817964     -0.200937      -9.67365       9.67365       321.570       331.244    
  24  0.286617      -1.24961      -60.1597       60.1597       323.798       383.958    
  25  0.319126      -1.14217      -54.9872       54.9872       326.099       381.086    
  26  0.104479E-01  -4.56135      -219.596       219.596       326.643       546.240    
  27  0.671407     -0.398379      -19.1791       19.1791       316.644       335.823    
  28  0.782955     -0.244680      -11.7796       11.7796       325.148       336.927    
  29  0.186689      -1.67831      -80.7987       80.7987       319.650       400.449    
  30  0.462519     -0.771067      -37.1213       37.1213       318.706       355.827    
  31  0.203171      -1.59371      -76.7255       76.7255       325.176       401.901    
  32  0.851762E-01  -2.46303      -118.577       118.577       320.415       438.993    
  33  0.702824     -0.352649      -16.9775       16.9775       316.394       333.372    
  34  0.747923     -0.290456      -13.9833       13.9833       311.913       325.896    
  35  0.224450      -1.49410      -71.9303       71.9303       330.093       402.024    
  36  0.243563E-02  -6.01755      -289.702       289.702       320.267       609.969    
  37  0.160790      -1.82766      -87.9886       87.9886       326.229       414.217    
  38  0.880431     -0.127343      -6.13066       6.13066       335.383       341.513    
  39  0.507306     -0.678640      -32.6716       32.6716       306.186       338.857    
  40  0.266019      -1.32419      -63.7501       63.7501       319.205       382.955    
  41  0.310751      -1.16876      -56.2675       56.2675       320.138       376.405    
  42  0.945006     -0.565640E-01  -2.72315       2.72315       324.389       327.112    
  43  0.265699E-01  -3.62797      -174.661       174.661       324.169       498.830    
  44  0.652842     -0.426420      -20.5290       20.5290       309.752       330.281    
  45  0.799409     -0.223882      -10.7783       10.7783       317.692       328.471    
  46  0.543529     -0.609672      -29.3513       29.3513       326.285       355.636    
  47  0.361947      -1.01626      -48.9255       48.9255       321.141       370.066    
  48  0.398721     -0.919492      -44.2669       44.2669       324.811       369.078    
  49  0.349489      -1.05128      -50.6116       50.6116       323.311       373.923    
  50  0.948739     -0.526212E-01  -2.53333       2.53333       308.719       311.253    
  51  0.346176      -1.06081      -51.0703       51.0703       321.980       373.050    
  52  0.678244     -0.388248      -18.6913       18.6913       307.638       326.329    
  53  0.858518     -0.152547      -7.34406       7.34406       319.480       326.824    
  54  0.835860E-01  -2.48188      -119.485       119.485       314.547       434.031    
  55  0.762568     -0.271063      -13.0497       13.0497       409.249       422.298    
  56  0.273927      -1.29489      -62.3398       62.3398       305.577       367.917    
  57  0.729557     -0.315318      -15.1803       15.1803       319.349       334.530    
  58  0.320381      -1.13825      -54.7983       54.7983       304.814       359.612    
  59  0.818134     -0.200729      -9.66364       9.66364       340.979       350.643    
  60  0.639548     -0.446993      -21.5195       21.5195       352.263       373.783    
  61  0.976107     -0.241828E-01  -1.16423       1.16423       383.653       384.817    
  62  0.232128      -1.46046      -70.3108       70.3108       309.825       380.135    
  63  0.215412      -1.53520      -73.9090       73.9090       314.391       388.300    
  64  0.770868     -0.260238      -12.5286       12.5286       332.767       345.296    
loop,thermsimp(1:2)       54   27.4037       17.2519    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    163        309.28          0.88          1.10         23.16          0.00          0.05         25.19
Just calling func    0   0         25.18


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    164        304.97          0.86          1.09         23.11          0.02          0.04         25.12
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    304.97
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    48.1428               190
loop is:       54
neval is:      163
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       54      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    48.1428               190
loop is:       55
neval is:      163


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      190
neval,tstepnext:      163     190

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.194359      -1.63805      -78.8602       78.8602       308.719       387.580    
   2  0.875287     -0.133204      -6.41279       6.41279       298.353       304.766    
   3  0.103612      -2.26710      -109.144       109.144       311.308       420.452    
   4  0.159072      -1.83840      -88.5057       88.5057       295.636       384.142    
   5  0.118738      -2.13084      -102.584       102.584       308.487       411.071    
   6  0.294105      -1.22382      -58.9180       58.9180       323.034       381.952    
   7  0.967643     -0.328919E-01  -1.58351       1.58351       311.913       313.497    
   8  0.675183     -0.392772      -18.9091       18.9091       307.638       326.547    
   9  0.170112      -1.77130      -85.2752       85.2752       319.480       404.755    
  10  0.990992     -0.904902E-02 -0.435645      0.435645       320.952       321.387    
  11  0.198513      -1.61690      -77.8422       77.8422       324.389       402.231    
  12  0.404817E-01  -3.20690      -154.389       154.389       314.778       469.167    
  13  0.834933E-01  -2.48299      -119.538       119.538       317.692       437.230    
  14  0.458935     -0.778848      -37.4959       37.4959       327.018       364.514    
  15  0.929311     -0.733118E-01  -3.52944       3.52944       309.752       313.282    
  16  0.593071     -0.522440      -25.1517       25.1517       321.570       346.722    
  17  0.963359E-01  -2.33991      -112.650       112.650       316.394       429.044    
  18  0.383119E-01  -3.26200      -157.042       157.042       324.833       481.875    
  19  0.841843     -0.172161      -8.28832       8.28832       319.349       327.638    
  20  0.874261     -0.134376      -6.46925       6.46925       316.644       323.113    
  21  0.706443     -0.347513      -16.7302       16.7302       325.148       341.878    
  22  0.423649E-01  -3.16143      -152.200       152.200       325.382       477.582    
  23  0.904835     -0.100003      -4.81442       4.81442       306.186       311.000    
  24  0.728800     -0.316356      -15.2303       15.2303       309.584       324.814    
  25  0.764304     -0.268790      -12.9403       12.9403       311.670       324.610    
  26  0.578519     -0.547284      -26.3478       26.3478       335.383       361.730    
  27  0.321737      -1.13402      -54.5949       54.5949       332.767       387.362    
  28  0.592944     -0.522656      -25.1621       25.1621       340.979       366.141    
  29  0.159596      -1.83511      -88.3474       88.3474       326.285       414.632    
  30  0.797332     -0.226484      -10.9036       10.9036       318.706       329.610    
  31  0.263979      -1.33189      -64.1207       64.1207       321.315       385.435    
  32  0.449355     -0.799942      -38.5114       38.5114       304.814       343.325    
  33  0.859901     -0.150938      -7.26656       7.26656       325.466       332.732    
  34  0.730093     -0.314584      -15.1449       15.1449       305.577       320.722    
  35  0.484666     -0.724295      -34.8696       34.8696       324.811       359.680    
  36  0.180217      -1.71359      -82.4971       82.4971       321.141       403.638    
  37  0.857397     -0.153854      -7.40697       7.40697       321.980       329.387    
  38  0.502370     -0.688418      -33.1424       33.1424       352.263       385.406    
  39  0.245408      -1.40484      -67.6327       67.6327       323.311       390.944    
  40  0.134540      -2.00590      -96.5694       96.5694       316.751       413.321    
  41  0.468137     -0.758995      -36.5401       36.5401       320.138       356.678    
  42  0.864548E-01  -2.44813      -117.860       117.860       309.825       427.685    
  43  0.178791      -1.72154      -82.8797       82.8797       326.099       408.978    
  44  0.690351     -0.370555      -17.8395       17.8395       319.205       337.044    
  45  0.731648     -0.312455      -15.0425       15.0425       331.399       346.442    
  46  0.857623     -0.153591      -7.39428       7.39428       323.798       331.193    
  47  0.754956     -0.281095      -13.5327       13.5327       383.653       397.186    
  48  0.355557      -1.03407      -49.7830       49.7830       314.391       364.175    
  49  0.200964      -1.60463      -77.2514       77.2514       318.875       396.126    
  50  0.243499      -1.41264      -68.0085       68.0085       319.650       387.658    
  51  0.796288     -0.227794      -10.9667       10.9667       298.574       309.540    
  52  0.256937      -1.35892      -65.4224       65.4224       325.176       390.598    
  53  0.591760     -0.524655      -25.2583       25.2583       330.093       355.352    
  54  0.799227     -0.224110      -10.7893       10.7893       310.344       321.134    
  55  0.115295E-01  -4.46285      -214.854       214.854       318.584       533.438    
  56  0.559205     -0.581239      -27.9825       27.9825       326.229       354.211    
  57  0.742198     -0.298139      -14.3532       14.3532       326.333       340.686    
  58  0.543157     -0.610356      -29.3843       29.3843       409.249       438.633    
  59  0.100933      -2.29330      -110.406       110.406       314.547       424.953    
  60  0.201228      -1.60332      -77.1881       77.1881       320.415       397.603    
  61  0.602159E-01  -2.80982      -135.272       135.272       316.129       451.402    
  62  0.107777      -2.22769      -107.247       107.247       324.169       431.417    
  63  0.131787E-01  -4.32915      -208.418       208.418       326.643       535.061    
  64  0.756826     -0.278622      -13.4136       13.4136       304.975       318.388    
loop,thermsimp(1:2)       55   78.8602       6.41279    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    165        306.07          0.89          1.10         23.11          0.00          0.05         25.15
Just calling func    0   0         25.14


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    166        291.27          0.85          1.09         23.15          0.00          0.04         25.13
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    291.27
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    48.1428               190
loop is:       55
neval is:      165
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       55      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    48.1428               190
loop is:       56
neval is:      165


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      190
neval,tstepnext:      165     190

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.141299      -1.95688      -94.2096       94.2096       298.353       392.562    
   2  0.197548      -1.62177      -78.0767       78.0767       298.574       376.651    
   3  0.774000     -0.256183      -12.3334       12.3334       306.186       318.519    
   4  0.170284      -1.77029      -85.2266       85.2266       309.752       394.979    
   5  0.250636      -1.38376      -66.6178       66.6178       311.913       378.531    
   6  0.907951     -0.965652E-01  -4.64892       4.64892       304.975       309.623    
   7  0.611678     -0.491549      -23.6645       23.6645       305.577       329.242    
   8  0.735945E-02  -4.91177      -236.466       236.466       310.344       546.811    
   9  0.309131      -1.17399      -56.5191       56.5191       320.952       377.471    
  10  0.577854     -0.548434      -26.4031       26.4031       316.644       343.047    
  11  0.931529     -0.709274E-01  -3.41464       3.41464       311.670       315.085    
  12  0.665703     -0.406912      -19.5899       19.5899       309.584       329.174    
  13  0.585695     -0.534955      -25.7542       25.7542       307.638       333.392    
  14  0.295001      -1.22078      -58.7716       58.7716       319.349       378.121    
  15  0.317712E-01  -3.44920      -166.054       166.054       321.980       488.034    
  16  0.222963      -1.50075      -72.2503       72.2503       318.706       390.956    
  17  0.325931      -1.12107      -53.9714       53.9714       323.798       377.770    
  18  0.785098     -0.241947      -11.6480       11.6480       325.466       337.114    
  19  0.550467     -0.596988      -28.7407       28.7407       319.205       347.945    
  20  0.780222     -0.248176      -11.9479       11.9479       326.333       338.280    
  21  0.130712      -2.03476      -97.9589       97.9589       325.148       423.107    
  22  0.873397     -0.135365      -6.51684       6.51684       304.814       311.331    
  23  0.366975      -1.00246      -48.2613       48.2613       331.399       379.661    
  24  0.813244     -0.206724      -9.95227       9.95227       321.570       331.523    
  25  0.782660E-01  -2.54764      -122.651       122.651       326.229       448.879    
  26  0.700327     -0.356208      -17.1488       17.1488       330.093       347.242    
  27  0.437766     -0.826071      -39.7693       39.7693       320.138       359.907    
  28  0.508966E-01  -2.97796      -143.367       143.367       324.811       468.178    
  29  0.276850      -1.28428      -61.8287       61.8287       335.383       397.211    
  30  0.792031     -0.233154      -11.2247       11.2247       314.391       325.616    
  31  0.174747      -1.74441      -83.9810       83.9810       327.018       410.999    
  32  0.469718     -0.755623      -36.3778       36.3778       340.979       377.357    
  33  0.252316      -1.37707      -66.2960       66.2960       323.034       389.330    
  34  0.980061     -0.201409E-01 -0.969636      0.969636       295.636       296.605    
  35  0.838300     -0.176379      -8.49140       8.49140       352.263       360.755    
  36  0.369385     -0.995915      -47.9461       47.9461       321.315       369.261    
  37  0.923139     -0.799751E-01  -3.85022       3.85022       332.767       336.617    
  38  0.592446     -0.523496      -25.2026       25.2026       308.719       333.922    
  39  0.348787      -1.05329      -50.7084       50.7084       319.650       370.358    
  40  0.569584     -0.562850      -27.0972       27.0972       325.176       352.273    
  41  0.543034E-01  -2.91317      -140.248       140.248       323.311       463.559    
  42  0.582662     -0.540148      -26.0042       26.0042       318.875       344.879    
  43  0.702825     -0.352648      -16.9774       16.9774       383.653       400.631    
  44  0.941375     -0.604140E-01  -2.90850       2.90850       320.415       323.324    
  45  0.258857      -1.35148      -65.0640       65.0640       324.389       389.453    
  46  0.116535      -2.14956      -103.486       103.486       321.141       424.627    
  47  0.102671      -2.27622      -109.584       109.584       319.480       429.064    
  48  0.172023      -1.76013      -84.7373       84.7373       326.099       410.836    
  49  0.434982E-01  -3.13504      -150.929       150.929       308.487       459.416    
  50  0.852122     -0.160026      -7.70410       7.70410       316.751       324.455    
  51  0.583521     -0.538675      -25.9333       25.9333       326.285       352.218    
  52  0.843374     -0.170345      -8.20088       8.20088       311.308       319.509    
  53  0.194743      -1.63607      -78.7651       78.7651       314.547       393.312    
  54  0.191808      -1.65126      -79.4961       79.4961       309.825       389.321    
  55  0.656555     -0.420749      -20.2560       20.2560       316.394       336.650    
  56  0.468384E-01  -3.06105      -147.367       147.367       324.169       471.537    
  57  0.812217     -0.207988      -10.0131       10.0131       317.692       327.706    
  58  0.852265     -0.159858      -7.69598       7.69598       409.249       416.944    
  59  0.340213      -1.07818      -51.9067       51.9067       316.129       368.036    
  60  0.655911     -0.421730      -20.3032       20.3032       314.778       335.081    
  61  0.329724      -1.10950      -53.4144       53.4144       325.382       378.796    
  62  0.362242      -1.01544      -48.8862       48.8862       324.833       373.719    
  63  0.273539      -1.29631      -62.4080       62.4080       318.584       380.992    
  64  0.524351     -0.645594      -31.0807       31.0807       291.268       322.348    
loop,thermsimp(1:2)       56   94.2096       78.0767    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    167        323.29          0.88          1.11         23.09          0.01          0.05         25.13
Just calling func    0   0         25.13


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    323.29
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    48.1428               190
loop is:       56
neval is:      166
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       56      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    48.1428               190
loop is:       57
neval is:      166


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      190
neval,tstepnext:      166     190

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.662269     -0.412083      -19.8388       19.8388       295.636       315.475    
   2  0.724212     -0.322671      -15.5343       15.5343       304.975       320.509    
   3  0.633711     -0.456163      -21.9609       21.9609       304.814       326.775    
   4  0.448566     -0.801700      -38.5961       38.5961       311.670       350.266    
   5  0.964228     -0.364273E-01  -1.75371       1.75371       306.186       307.939    
   6  0.714306     -0.336444      -16.1974       16.1974       311.308       327.505    
   7  0.528330     -0.638035      -30.7168       30.7168       291.268       321.985    
   8  0.654127     -0.424453      -20.4343       20.4343       320.415       340.850    
   9  0.368899     -0.997232      -48.0095       48.0095       316.751       364.761    
  10  0.227697      -1.47974      -71.2388       71.2388       314.391       385.630    
  11  0.612266     -0.490588      -23.6183       23.6183       317.692       341.311    
  12  0.313777      -1.15907      -55.8010       55.8010       309.584       365.385    
  13  0.258526      -1.35276      -65.1257       65.1257       305.577       370.703    
  14  0.119298      -2.12613      -102.358       102.358       321.570       423.928    
  15  0.213331      -1.54491      -74.3762       74.3762       307.638       382.014    
  16  0.294218      -1.22343      -58.8996       58.8996       308.719       367.619    
  17  0.352988      -1.04132      -50.1321       50.1321       314.778       364.910    
  18  0.348706      -1.05353      -50.7197       50.7197       332.767       383.487    
  19  0.449249     -0.800179      -38.5228       38.5228       316.394       354.917    
  20  0.879121     -0.128833      -6.20237       6.20237       325.466       331.668    
  21  0.464081     -0.767695      -36.9590       36.9590       326.333       363.292    
  22  0.497582     -0.697995      -33.6034       33.6034       316.644       350.247    
  23  0.920207     -0.831566E-01  -4.00339       4.00339       318.875       322.878    
  24  0.811773     -0.208535      -10.0395       10.0395       330.093       340.133    
  25  0.190651      -1.65731      -79.7875       79.7875       319.205       398.992    
  26  0.645174     -0.438235      -21.0979       21.0979       326.285       347.383    
  27  0.668343     -0.402954      -19.3993       19.3993       325.176       344.575    
  28  0.765111     -0.267735      -12.8895       12.8895       320.138       333.027    
  29  0.991779     -0.825499E-02 -0.397418      0.397418       352.263       352.661    
  30  0.136888      -1.98859      -95.7365       95.7365       316.129       411.866    
  31  0.645145E-01  -2.74086      -131.953       131.953       321.315       453.267    
  32  0.408515E-01  -3.19781      -153.951       153.951       319.650       473.601    
  33  0.264109      -1.33140      -64.0971       64.0971       324.833       388.930    
  34  0.382737     -0.960407      -46.2366       46.2366       298.574       344.810    
  35  0.402738E-02  -5.51464      -265.490       265.490       340.979       606.469    
  36  0.318074      -1.14547      -55.1461       55.1461       320.952       376.098    
  37  0.245237      -1.40553      -67.6662       67.6662       323.798       391.465    
  38  0.519766     -0.654377      -31.5035       31.5035       319.349       350.853    
  39  0.255147      -1.36592      -65.7590       65.7590       311.913       377.672    
  40  0.833841     -0.181712      -8.74812       8.74812       325.382       334.130    
  41  0.696242E-01  -2.66464      -128.283       128.283       331.399       459.683    
  42  0.487295     -0.718886      -34.6092       34.6092       318.584       353.193    
  43  0.276229E-01  -3.58911      -172.790       172.790       309.825       482.614    
  44  0.638327     -0.448905      -21.6115       21.6115       323.034       344.646    
  45  0.206684      -1.57657      -75.9002       75.9002       324.389       400.289    
  46  0.736003     -0.306521      -14.7568       14.7568       318.706       333.463    
  47  0.217444E-01  -3.82840      -184.310       184.310       298.353       482.662    
  48  0.956929     -0.440260E-01  -2.11954       2.11954       314.547       316.666    
  49  0.883561     -0.123795      -5.95982       5.95982       309.752       315.712    
  50  0.700901     -0.355388      -17.1094       17.1094       335.383       352.492    
  51  0.201997      -1.59950      -77.0044       77.0044       383.653       460.658    
  52  0.412152     -0.886362      -42.6719       42.6719       326.099       368.771    
  53  0.890450     -0.116029      -5.58595       5.58595       327.018       332.604    
  54  0.417423     -0.873654      -42.0601       42.0601       409.249       451.309    
  55  0.426501     -0.852140      -41.0244       41.0244       325.148       366.172    
  56  0.983871     -0.162605E-01 -0.782824      0.782824       321.141       321.924    
  57  0.384350     -0.956201      -46.0342       46.0342       319.480       365.514    
  58  0.155937      -1.85830      -89.4639       89.4639       326.229       415.693    
  59  0.361264      -1.01815      -49.0164       49.0164       308.487       357.503    
  60  0.538177     -0.619568      -29.8277       29.8277       323.311       353.139    
  61  0.514362E-01  -2.96741      -142.859       142.859       324.811       467.670    
  62  0.994100     -0.591759E-02 -0.284889      0.284889       324.169       324.454    
  63  0.622557     -0.473920      -22.8158       22.8158       321.980       344.796    
  64  0.703606     -0.351537      -16.9240       16.9240       323.294       340.218    
loop,thermsimp(1:2)       57   19.8388       15.5343    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    168        310.10          0.88          1.11         23.10          0.02          0.03         25.13
Just calling func    0   0         25.14


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    169        318.84          0.88          1.10         23.16          0.00          0.05         25.18
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    310.10
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    48.1428               190
loop is:       57
neval is:      168
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       57      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    48.1428               190
loop is:       58
neval is:      168


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      190
neval,tstepnext:      168     190

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.584865E-01  -2.83896      -136.675       136.675       306.186       442.861    
   2  0.104884      -2.25490      -108.557       108.557       295.636       404.193    
   3  0.784254     -0.243023      -11.6998       11.6998       309.752       321.452    
   4  0.813133     -0.206861      -9.95886       9.95886       314.547       324.506    
   5  0.490778     -0.711764      -34.2663       34.2663       304.975       339.241    
   6  0.168573      -1.78039      -85.7127       85.7127       321.141       406.853    
   7  0.450161     -0.798149      -38.4251       38.4251       291.268       329.693    
   8  0.828233     -0.188461      -9.07303       9.07303       318.875       327.948    
   9  0.994731     -0.528342E-02 -0.254359      0.254359       324.169       324.424    
  10  0.813340     -0.206606      -9.94660       9.94660       304.814       314.761    
  11  0.776133     -0.253432      -12.2009       12.2009       311.308       323.509    
  12  0.729556     -0.315319      -15.1803       15.1803       325.466       340.646    
  13  0.530451     -0.634028      -30.5239       30.5239       327.018       357.542    
  14  0.752564E-01  -2.58685      -124.538       124.538       320.138       444.676    
  15  0.918457     -0.850597E-01  -4.09501       4.09501       318.706       322.801    
  16  0.162642      -1.81621      -87.4372       87.4372       325.382       412.819    
  17  0.725851     -0.320411      -15.4255       15.4255       330.093       345.519    
  18  0.322292      -1.13230      -54.5119       54.5119       323.294       377.806    
  19  0.838064     -0.176661      -8.50496       8.50496       320.415       328.920    
  20  0.346062E-01  -3.36372      -161.939       161.939       317.692       479.631    
  21  0.442915     -0.814377      -39.2064       39.2064       325.176       364.382    
  22  0.143708      -1.93997      -93.3957       93.3957       323.034       416.430    
  23  0.940845     -0.609769E-01  -2.93560       2.93560       321.980       324.916    
  24  0.972503     -0.278816E-01  -1.34230       1.34230       298.574       299.916    
  25  0.291831      -1.23158      -59.2917       59.2917       326.285       385.576    
  26  0.211976      -1.55128      -74.6831       74.6831       316.644       391.327    
  27  0.695427     -0.363229      -17.4869       17.4869       311.670       329.157    
  28  0.982540E-01  -2.32020      -111.701       111.701       319.349       431.050    
  29  0.730742     -0.313695      -15.1021       15.1021       335.383       350.485    
  30  0.417794     -0.872766      -42.0174       42.0174       352.263       394.281    
  31  0.868385     -0.141121      -6.79394       6.79394       323.311       330.105    
  32  0.300897      -1.20099      -57.8188       57.8188       318.584       376.403    
  33  0.917219     -0.864093E-01  -4.15998       4.15998       316.394       320.554    
  34  0.304394      -1.18943      -57.2626       57.2626       308.487       365.749    
  35  0.856500     -0.154901      -7.45739       7.45739       326.333       333.790    
  36  0.310652      -1.16908      -56.2828       56.2828       316.751       373.034    
  37  0.846275     -0.166911      -8.03557       8.03557       314.778       322.814    
  38  0.206825      -1.57588      -75.8674       75.8674       309.584       385.451    
  39  0.606376     -0.500256      -24.0837       24.0837       319.480       343.564    
  40  0.840015     -0.174336      -8.39300       8.39300       325.148       333.541    
  41  0.348835      -1.05315      -50.7018       50.7018       308.719       359.421    
  42  0.857325     -0.153939      -7.41104       7.41104       326.099       333.510    
  43  0.308035E-01  -3.48013      -167.543       167.543       305.577       473.120    
  44  0.400632     -0.914711      -44.0367       44.0367       320.952       364.989    
  45  0.242237      -1.41784      -68.2586       68.2586       311.913       380.172    
  46  0.407771     -0.897050      -43.1865       43.1865       307.638       350.824    
  47  0.430691     -0.842364      -40.5537       40.5537       332.767       373.321    
  48  0.415503     -0.878266      -42.2822       42.2822       314.391       356.674    
  49  0.593575     -0.521591      -25.1108       25.1108       324.833       349.944    
  50  0.973620     -0.267342E-01  -1.28706       1.28706       323.798       325.085    
  51  0.510257     -0.672840      -32.3924       32.3924       319.205       351.597    
  52  0.796475     -0.227560      -10.9554       10.9554       324.389       335.344    
  53  0.213576      -1.54376      -74.3210       74.3210       316.129       390.450    
  54  0.865534     -0.144409      -6.95225       6.95225       326.229       333.181    
  55  0.920053     -0.833240E-01  -4.01145       4.01145       321.570       325.582    
  56  0.534624     -0.626192      -30.1466       30.1466       409.249       439.395    
  57  0.963687     -0.369888E-01  -1.78074       1.78074       321.315       323.095    
  58  0.498139     -0.696877      -33.5496       33.5496       331.399       364.949    
  59  0.987058     -0.130264E-01 -0.627128      0.627128       383.653       384.280    
  60  0.488276E-01  -3.01946      -145.365       145.365       324.811       470.176    
  61  0.597381E-01  -2.81779      -135.656       135.656       319.650       455.306    
  62  0.589016     -0.529301      -25.4820       25.4820       309.825       335.307    
  63  0.680503     -0.384923      -18.5313       18.5313       298.353       316.884    
  64  0.793494     -0.231310      -11.1359       11.1359       310.095       321.231    
loop,thermsimp(1:2)       58   136.675       108.557    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    170        311.73          0.88          1.11         23.16          0.00          0.04         25.18
Just calling func    0   0         25.18


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    171        319.34          0.87          1.10         23.05          0.07          0.04         25.12
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    311.73
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    48.1428               190
loop is:       58
neval is:      170
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       58      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    48.1428               190
loop is:       59
neval is:      170


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      190
neval,tstepnext:      170     190

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.330032      -1.10857      -53.3695       53.3695       298.574       351.943    
   2  0.939148     -0.627826E-01  -3.02253       3.02253       304.814       307.836    
   3  0.130906      -2.03328      -97.8877       97.8877       298.353       396.240    
   4  0.664370     -0.408916      -19.6863       19.6863       316.394       336.081    
   5  0.490908     -0.711498      -34.2535       34.2535       310.095       344.349    
   6  0.711731     -0.340055      -16.3712       16.3712       309.752       326.124    
   7  0.676080     -0.391444      -18.8452       18.8452       318.706       337.551    
   8  0.611139     -0.492432      -23.7070       23.7070       314.778       338.485    
   9  0.614246     -0.487359      -23.4628       23.4628       321.315       344.777    
  10  0.988045     -0.120275E-01 -0.579039      0.579039       311.308       311.887    
  11  0.232883      -1.45722      -70.1545       70.1545       324.169       394.324    
  12  0.450825     -0.796675      -38.3541       38.3541       314.547       352.901    
  13  0.493319     -0.706599      -34.0176       34.0176       321.980       355.998    
  14  0.191184      -1.65452      -79.6532       79.6532       323.798       403.452    
  15  0.894136     -0.111897      -5.38705       5.38705       321.570       326.957    
  16  0.391751     -0.937128      -45.1159       45.1159       318.875       363.991    
  17  0.236278      -1.44275      -69.4579       69.4579       320.415       389.873    
  18  0.496874E-01  -3.00200      -144.525       144.525       311.670       456.195    
  19  0.784524     -0.242678      -11.6832       11.6832       291.268       302.951    
  20  0.292328      -1.22988      -59.2098       59.2098       323.311       382.521    
  21  0.832247E-01  -2.48621      -119.693       119.693       326.229       445.922    
  22  0.423133     -0.860069      -41.4061       41.4061       326.099       367.505    
  23  0.234472      -1.45042      -69.8271       69.8271       325.148       394.975    
  24  0.868463     -0.141031      -6.78960       6.78960       326.333       333.122    
  25  0.122969      -2.09582      -100.899       100.899       309.825       410.723    
  26  0.811771     -0.208537      -10.0396       10.0396       324.389       334.428    
  27  0.786834     -0.239738      -11.5417       11.5417       304.975       316.516    
  28  0.163144      -1.81312      -87.2886       87.2886       325.466       412.754    
  29  0.571103     -0.560186      -26.9689       26.9689       319.480       346.449    
  30  0.769982     -0.261388      -12.5839       12.5839       330.093       342.677    
  31  0.471769     -0.751265      -36.1680       36.1680       324.833       361.001    
  32  0.584935     -0.536254      -25.8168       25.8168       335.383       361.199    
  33  0.416140     -0.876734      -42.2084       42.2084       307.638       349.846    
  34  0.106525E-01  -4.54196      -218.663       218.663       319.205       537.867    
  35  0.595424     -0.518482      -24.9611       24.9611       314.391       339.353    
  36  0.302400      -1.19600      -57.5790       57.5790       327.018       384.597    
  37  0.629701     -0.462510      -22.2665       22.2665       308.719       330.986    
  38  0.939026E-01  -2.36550      -113.882       113.882       325.176       439.057    
  39  0.911727     -0.924151E-01  -4.44912       4.44912       331.399       335.849    
  40  0.289502      -1.23959      -59.6775       59.6775       320.952       380.629    
  41  0.326571      -1.11911      -53.8769       53.8769       308.487       362.364    
  42  0.972366     -0.280231E-01  -1.34911       1.34911       316.751       318.100    
  43  0.823413     -0.194297      -9.35400       9.35400       332.767       342.121    
  44  0.790717     -0.234815      -11.3046       11.3046       318.584       329.888    
  45  0.167922      -1.78426      -85.8991       85.8991       323.294       409.193    
  46  0.804665     -0.217329      -10.4628       10.4628       311.913       322.376    
  47  0.154714      -1.86617      -89.8428       89.8428       383.653       473.496    
  48  0.240456      -1.42522      -68.6140       68.6140       309.584       378.198    
  49  0.351787      -1.04473      -50.2962       50.2962       326.285       376.581    
  50  0.666429E-01  -2.70841      -130.390       130.390       316.129       446.519    
  51  0.484113     -0.725437      -34.9245       34.9245       316.644       351.568    
  52  0.298509      -1.20896      -58.2025       58.2025       352.263       410.466    
  53  0.982136     -0.180253E-01 -0.867787      0.867787       295.636       296.504    
  54  0.799723     -0.223490      -10.7594       10.7594       321.141       331.900    
  55  0.559799     -0.580177      -27.9313       27.9313       325.382       353.313    
  56  0.492929     -0.707390      -34.0557       34.0557       323.034       357.090    
  57  0.655290     -0.422678      -20.3489       20.3489       319.349       339.698    
  58  0.426949     -0.851091      -40.9739       40.9739       409.249       450.222    
  59  0.575269     -0.552918      -26.6190       26.6190       306.186       332.805    
  60  0.252283      -1.37721      -66.3025       66.3025       320.138       386.440    
  61  0.628464     -0.464477      -22.3612       22.3612       319.650       342.011    
  62  0.847342E-01  -2.46824      -118.828       118.828       324.811       443.639    
  63  0.701567     -0.354439      -17.0637       17.0637       305.577       322.641    
  64  0.171664      -1.76222      -84.8381       84.8381       311.734       396.572    
loop,thermsimp(1:2)       59   53.3695       3.02253    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    172        310.04          0.88          1.10         23.05          0.06          0.04         25.14
Just calling func    0   0         25.14


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    173        315.93          0.88          1.09         23.09          0.03          0.04         25.14
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    310.04
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    48.1428               190
loop is:       59
neval is:      172
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       59      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    48.1428               190
loop is:       60
neval is:      172


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      190
neval,tstepnext:      172     190

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.304136      -1.19028      -57.3034       57.3034       295.636       352.939    
   2  0.843344     -0.170380      -8.20256       8.20256       291.268       299.470    
   3  0.457815     -0.781289      -37.6134       37.6134       304.814       342.427    
   4  0.933709     -0.685899E-01  -3.30211       3.30211       311.308       314.610    
   5  0.887159     -0.119731      -5.76417       5.76417       304.975       310.739    
   6  0.786211     -0.240530      -11.5798       11.5798       316.751       328.331    
   7  0.794803     -0.229661      -11.0565       11.0565       311.913       322.970    
   8  0.573435E-01  -2.85870      -137.626       137.626       305.577       443.203    
   9  0.647106     -0.435245      -20.9539       20.9539       309.752       330.706    
  10  0.110118      -2.20620      -106.213       106.213       321.570       427.783    
  11  0.339548      -1.08014      -52.0009       52.0009       318.584       370.585    
  12  0.635246     -0.453742      -21.8444       21.8444       308.719       330.564    
  13  0.488392     -0.716638      -34.5009       34.5009       321.141       355.642    
  14  0.602571     -0.506549      -24.3867       24.3867       306.186       330.572    
  15  0.710041     -0.342433      -16.4857       16.4857       326.333       342.818    
  16  0.585763     -0.534840      -25.7487       25.7487       324.389       350.138    
  17  0.288010      -1.24476      -59.9262       59.9262       331.399       391.326    
  18  0.455238     -0.786934      -37.8852       37.8852       316.394       354.279    
  19  0.723984     -0.322986      -15.5494       15.5494       318.706       334.256    
  20  0.554067     -0.590470      -28.4269       28.4269       314.778       343.205    
  21  0.646516     -0.436157      -20.9978       20.9978       314.391       335.389    
  22  0.271985      -1.30201      -62.6823       62.6823       319.349       382.032    
  23  0.901636E-02  -4.70871      -226.691       226.691       319.650       546.340    
  24  0.383616     -0.958114      -46.1263       46.1263       332.767       378.893    
  25  0.443516     -0.813022      -39.1411       39.1411       330.093       369.235    
  26  0.223023      -1.50048      -72.2374       72.2374       310.095       382.333    
  27  0.123255      -2.09350      -100.787       100.787       321.315       422.101    
  28  0.817485     -0.201523      -9.70187       9.70187       319.480       329.182    
  29  0.333893      -1.09693      -52.8094       52.8094       307.638       360.447    
  30  0.867877     -0.141706      -6.82211       6.82211       316.644       323.466    
  31  0.365747      -1.00581      -48.4227       48.4227       298.574       346.996    
  32  0.429445     -0.845262      -40.6932       40.6932       314.547       355.240    
  33  0.856620     -0.154761      -7.45063       7.45063       325.382       332.832    
  34  0.729532     -0.315352      -15.1819       15.1819       321.980       337.162    
  35  0.315845      -1.15251      -55.4848       55.4848       323.034       378.519    
  36  0.547596     -0.602217      -28.9924       28.9924       324.833       353.826    
  37  0.752130     -0.284846      -13.7133       13.7133       335.383       349.096    
  38  0.806451     -0.215112      -10.3561       10.3561       308.487       318.843    
  39  0.618613     -0.480275      -23.1218       23.1218       318.875       341.997    
  40  0.630350     -0.461480      -22.2169       22.2169       326.099       348.316    
  41  0.251741      -1.37935      -66.4060       66.4060       326.285       392.691    
  42  0.846504     -0.166640      -8.02250       8.02250       309.584       317.606    
  43  0.830791     -0.185377      -8.92454       8.92454       320.952       329.876    
  44  0.566838     -0.567681      -27.3297       27.3297       323.311       350.641    
  45  0.499450E-01  -2.99683      -144.276       144.276       327.018       471.294    
  46  0.976301     -0.239838E-01  -1.15465       1.15465       320.138       321.292    
  47  0.401049     -0.913672      -43.9867       43.9867       320.415       364.402    
  48  0.709931E-01  -2.64517      -127.346       127.346       324.169       451.515    
  49  0.920370E-02  -4.68815      -225.701       225.701       325.148       550.848    
  50  0.379723     -0.968314      -46.6173       46.6173       298.353       344.970    
  51  0.207569      -1.57229      -75.6945       75.6945       311.734       387.428    
  52  0.745673     -0.293468      -14.1284       14.1284       323.798       337.927    
  53  0.915877     -0.878737E-01  -4.23048       4.23048       323.294       327.525    
  54  0.836769     -0.178207      -8.57939       8.57939       352.263       360.843    
  55  0.769684E-01  -2.56436      -123.455       123.455       309.825       433.280    
  56  0.797754     -0.225955      -10.8781       10.8781       325.466       336.344    
  57  0.555189     -0.588446      -28.3294       28.3294       325.176       353.505    
  58  0.134224      -2.00825      -96.6826       96.6826       324.811       421.493    
  59  0.796234     -0.227862      -10.9699       10.9699       326.229       337.199    
  60  0.628721     -0.464068      -22.3415       22.3415       316.129       338.471    
  61  0.460391     -0.775679      -37.3433       37.3433       409.249       446.592    
  62  0.137302      -1.98558      -95.5911       95.5911       311.670       407.261    
  63  0.504249     -0.684686      -32.9627       32.9627       383.653       416.616    
  64  0.548486     -0.600594      -28.9143       28.9143       310.037       338.951    
loop,thermsimp(1:2)       60   57.3034       8.20256    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    174        305.35          0.88          1.10         23.16          0.00          0.04         25.17
Just calling func    0   0         25.18


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    305.35
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    48.1428               190
loop is:       60
neval is:      173
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       60      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    48.1428               190
loop is:       61
neval is:      173


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      190
neval,tstepnext:      173     190

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.829682     -0.186713      -8.98888       8.98888       291.268       300.257    
   2  0.735850     -0.306729      -14.7668       14.7668       304.975       319.741    
   3  0.828786     -0.187793      -9.04089       9.04089       311.308       320.349    
   4  0.592078     -0.524118      -25.2325       25.2325       309.584       334.816    
   5  0.691797E-01  -2.67105      -128.592       128.592       308.487       437.078    
   6  0.772335     -0.258337      -12.4371       12.4371       320.138       332.575    
   7  0.504563     -0.684063      -32.9327       32.9327       311.913       344.846    
   8  0.700615     -0.355797      -17.1290       17.1290       316.644       333.773    
   9  0.764596     -0.268408      -12.9219       12.9219       323.294       336.216    
  10  0.459614     -0.777368      -37.4247       37.4247       316.751       354.176    
  11  0.931193     -0.712882E-01  -3.43201       3.43201       319.480       322.912    
  12  0.502482E-01  -2.99078      -143.984       143.984       320.952       464.936    
  13  0.498197     -0.696760      -33.5439       33.5439       308.719       342.263    
  14  0.551534E-01  -2.89764      -139.500       139.500       306.186       445.686    
  15  0.172209      -1.75905      -84.6854       84.6854       309.752       394.438    
  16  0.238868E-01  -3.73443      -179.786       179.786       325.382       505.168    
  17  0.699366     -0.357581      -17.2149       17.2149       318.706       335.921    
  18  0.764093     -0.269066      -12.9536       12.9536       314.391       327.345    
  19  0.465633     -0.764357      -36.7983       36.7983       325.466       362.264    
  20  0.209906      -1.56110      -75.1556       75.1556       321.980       397.136    
  21  0.216891      -1.52836      -73.5795       73.5795       326.229       399.808    
  22  0.795854E-01  -2.53092      -121.846       121.846       323.798       445.644    
  23  0.701683     -0.354273      -17.0557       17.0557       316.129       333.185    
  24  0.574425     -0.554385      -26.6896       26.6896       310.037       336.726    
  25  0.674968     -0.393090      -18.9244       18.9244       318.875       337.799    
  26  0.684189     -0.379521      -18.2712       18.2712       304.814       323.085    
  27  0.541862     -0.612745      -29.4992       29.4992       326.333       355.832    
  28  0.668027     -0.403426      -19.4220       19.4220       314.778       334.200    
  29  0.353251      -1.04058      -50.0962       50.0962       298.353       348.449    
  30  0.778708     -0.250119      -12.0414       12.0414       298.574       310.615    
  31  0.829283     -0.187194      -9.01204       9.01204       326.099       335.111    
  32  0.679297     -0.386697      -18.6167       18.6167       335.383       353.999    
  33  0.536301     -0.623060      -29.9958       29.9958       324.389       354.385    
  34  0.247738      -1.39538      -67.1776       67.1776       323.311       390.489    
  35  0.271399      -1.30416      -62.7861       62.7861       295.636       358.422    
  36  0.284124      -1.25835      -60.5803       60.5803       325.176       385.756    
  37  0.664442     -0.408808      -19.6812       19.6812       324.833       344.514    
  38  0.874508     -0.134094      -6.45564       6.45564       316.394       322.850    
  39  0.916444     -0.872538E-01  -4.20064       4.20064       314.547       318.747    
  40  0.295165      -1.22022      -58.7448       58.7448       321.141       379.886    
  41  0.242592      -1.41637      -68.1882       68.1882       307.638       375.826    
  42  0.396124     -0.926028      -44.5816       44.5816       352.263       396.845    
  43  0.509193E-01  -2.97751      -143.346       143.346       320.415       463.761    
  44  0.778911     -0.249858      -12.0289       12.0289       330.093       342.122    
  45  0.351009      -1.04694      -50.4028       50.4028       318.584       368.986    
  46  0.480934     -0.732025      -35.2417       35.2417       323.034       358.276    
  47  0.908579     -0.958731E-01  -4.61560       4.61560       332.767       337.383    
  48  0.898885     -0.106600      -5.13201       5.13201       319.349       324.481    
  49  0.561121     -0.577819      -27.8178       27.8178       310.095       337.913    
  50  0.851109     -0.161215      -7.76136       7.76136       311.734       319.495    
  51  0.975854     -0.244425E-01  -1.17673       1.17673       331.399       332.576    
  52  0.187829      -1.67223      -80.5056       80.5056       326.285       406.790    
  53  0.962131     -0.386049E-01  -1.85855       1.85855       311.670       313.529    
  54  0.823812     -0.193813      -9.33070       9.33070       383.653       392.984    
  55  0.765207     -0.267609      -12.8835       12.8835       324.811       337.694    
  56  0.207984      -1.57030      -75.5984       75.5984       321.315       396.913    
  57  0.675792     -0.391869      -18.8657       18.8657       321.570       340.436    
  58  0.641275     -0.444296      -21.3897       21.3897       309.825       331.214    
  59  0.621346E-01  -2.77845      -133.762       133.762       305.577       439.340    
  60  0.911977E-01  -2.39473      -115.289       115.289       409.249       524.537    
  61  0.697078     -0.360859      -17.3727       17.3727       324.169       341.542    
  62  0.760976     -0.273154      -13.1504       13.1504       327.018       340.169    
  63  0.812117     -0.208111      -10.0190       10.0190       319.650       329.669    
  64  0.654868     -0.423322      -20.3799       20.3799       305.352       325.732    
loop,thermsimp(1:2)       61   8.98888       14.7668    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    175        311.64          0.88          1.09         23.09          0.05          0.04         25.15
Just calling func    0   0         25.14


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    176        318.06          0.88          1.10         23.11          0.22          0.04         25.34
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    311.64
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    48.1428               190
loop is:       61
neval is:      175
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       61      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    48.1428               190
loop is:       62
neval is:      175


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      190
neval,tstepnext:      175     190

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.917395     -0.862167E-01  -4.15071       4.15071       291.268       295.418    
   2  0.899579E-01  -2.40841      -115.948       115.948       298.574       414.522    
   3  0.997625     -0.237830E-02 -0.114498      0.114498       311.670       311.785    
   4  0.224083      -1.49574      -72.0091       72.0091       314.547       386.556    
   5  0.120769      -2.11388      -101.768       101.768       311.734       413.502    
   6  0.302676E-01  -3.49768      -168.388       168.388       304.975       473.362    
   7  0.315161      -1.15467      -55.5891       55.5891       311.308       366.897    
   8  0.155895      -1.85857      -89.4769       89.4769       316.394       405.871    
   9  0.467639     -0.760060      -36.5914       36.5914       319.480       356.071    
  10  0.277823      -1.28077      -61.6598       61.6598       304.814       366.474    
  11  0.712282     -0.339281      -16.3339       16.3339       319.349       335.683    
  12  0.929560     -0.730437E-01  -3.51653       3.51653       305.352       308.869    
  13  0.499024     -0.695101      -33.4641       33.4641       314.391       347.856    
  14  0.940347     -0.615066E-01  -2.96110       2.96110       319.650       322.611    
  15  0.714006     -0.336864      -16.2176       16.2176       309.825       326.042    
  16  0.162603      -1.81644      -87.4487       87.4487       320.138       407.586    
  17  0.663729     -0.409881      -19.7328       19.7328       331.399       351.132    
  18  0.314148      -1.15789      -55.7441       55.7441       316.129       371.873    
  19  0.497386     -0.698388      -33.6224       33.6224       316.644       350.266    
  20  0.368387     -0.998622      -48.0765       48.0765       314.778       362.854    
  21  0.326342      -1.11981      -53.9107       53.9107       309.584       363.495    
  22  0.442952     -0.814294      -39.2024       39.2024       326.099       365.301    
  23  0.929694     -0.729000E-01  -3.50961       3.50961       318.706       322.216    
  24  0.945450E-01  -2.35868      -113.553       113.553       323.294       436.848    
  25  0.407158     -0.898555      -43.2589       43.2589       310.037       353.296    
  26  0.706679     -0.347179      -16.7142       16.7142       332.767       349.481    
  27  0.657848     -0.418781      -20.1613       20.1613       324.811       344.972    
  28  0.968040     -0.324817E-01  -1.56376       1.56376       318.875       320.439    
  29  0.330387      -1.10749      -53.3176       53.3176       310.095       363.413    
  30  0.756161     -0.279501      -13.4560       13.4560       327.018       340.474    
  31  0.307772      -1.17840      -56.7313       56.7313       321.570       378.302    
  32  0.759008E-01  -2.57833      -124.128       124.128       324.169       448.297    
  33  0.615618E-01  -2.78771      -134.208       134.208       330.093       464.302    
  34  0.545984     -0.605166      -29.1344       29.1344       308.719       337.854    
  35  0.339865      -1.07921      -51.9560       51.9560       324.833       376.789    
  36  0.816477     -0.202757      -9.76129       9.76129       311.913       321.674    
  37  0.932889     -0.694691E-01  -3.34443       3.34443       298.353       301.697    
  38  0.667042     -0.404902      -19.4931       19.4931       335.383       354.876    
  39  0.583049     -0.539484      -25.9723       25.9723       316.751       342.724    
  40  0.210192      -1.55973      -75.0900       75.0900       324.389       399.479    
  41  0.158846      -1.83982      -88.5742       88.5742       326.333       414.907    
  42  0.360401      -1.02054      -49.1315       49.1315       323.034       372.166    
  43  0.508154     -0.676971      -32.5913       32.5913       295.636       328.227    
  44  0.873303     -0.135473      -6.52204       6.52204       325.466       331.988    
  45  0.650524     -0.429977      -20.7003       20.7003       318.584       339.284    
  46  0.805601     -0.216166      -10.4068       10.4068       307.638       318.045    
  47  0.312590E-03  -8.07062      -388.542       388.542       321.141       709.683    
  48  0.892261     -0.113997      -5.48812       5.48812       325.176       330.664    
  49  0.504672     -0.683846      -32.9222       32.9222       323.311       356.234    
  50  0.269834      -1.30995      -63.0645       63.0645       383.653       446.718    
  51  0.752889     -0.283838      -13.6647       13.6647       309.752       323.417    
  52  0.952800     -0.483498E-01  -2.32769       2.32769       352.263       354.591    
  53  0.147189E-01  -4.21863      -203.096       203.096       321.315       524.411    
  54  0.213392      -1.54462      -74.3624       74.3624       321.980       396.343    
  55  0.278061      -1.27992      -61.6187       61.6187       326.229       387.848    
  56  0.668800     -0.402271      -19.3664       19.3664       326.285       345.651    
  57  0.674989     -0.393058      -18.9229       18.9229       308.487       327.410    
  58  0.186370      -1.68002      -80.8808       80.8808       305.577       386.458    
  59  0.133078      -2.01682      -97.0951       97.0951       323.798       420.893    
  60  0.519821     -0.654270      -31.4984       31.4984       306.186       337.684    
  61  0.136847      -1.98889      -95.7507       95.7507       320.415       416.166    
  62  0.604880     -0.502725      -24.2026       24.2026       320.952       345.154    
  63  0.301519      -1.19892      -57.7194       57.7194       325.382       383.101    
  64  0.531506     -0.632040      -30.4282       30.4282       311.637       342.065    
loop,thermsimp(1:2)       62   4.15071       115.948    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    177        305.20          0.88          1.11         23.14          0.00          0.04         25.17
Just calling func    0   0         25.17


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    178        292.39          0.87          1.09         23.12          0.00          0.04         25.12
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    292.39
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    48.1428               190
loop is:       62
neval is:      177
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       62      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    48.1428               190
loop is:       63
neval is:      177


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      190
neval,tstepnext:      177     190

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.617195     -0.482570      -23.2322       23.2322       291.268       314.500    
   2  0.828850     -0.187716      -9.03715       9.03715       298.353       307.390    
   3  0.138898      -1.97402      -95.0347       95.0347       305.352       400.387    
   4  0.174947      -1.74327      -83.9260       83.9260       311.670       395.596    
   5  0.452367E-01  -3.09585      -149.043       149.043       307.638       456.681    
   6  0.982229     -0.179305E-01 -0.863222      0.863222       318.875       319.738    
   7  0.855728     -0.155803      -7.50079       7.50079       311.913       319.414    
   8  0.350750      -1.04768      -50.4383       50.4383       318.706       369.144    
   9  0.880054     -0.127772      -6.15131       6.15131       319.650       325.801    
  10  0.106511      -2.23950      -107.816       107.816       309.752       417.568    
  11  0.336060      -1.09047      -52.4981       52.4981       309.825       362.323    
  12  0.904819     -0.100020      -4.81525       4.81525       308.487       313.302    
  13  0.765597     -0.267099      -12.8589       12.8589       295.636       308.495    
  14  0.551789     -0.594589      -28.6252       28.6252       325.176       353.801    
  15  0.832435     -0.183400      -8.82937       8.82937       325.466       334.295    
  16  0.353494      -1.03989      -50.0632       50.0632       319.349       369.412    
  17  0.510104     -0.673140      -32.4069       32.4069       306.186       338.593    
  18  0.523162     -0.647863      -31.1899       31.1899       308.719       339.909    
  19  0.953043     -0.480957E-01  -2.31546       2.31546       318.584       320.899    
  20  0.267001E-01  -3.62309      -174.425       174.425       327.018       501.444    
  21  0.280924      -1.26967      -61.1255       61.1255       311.637       372.762    
  22  0.956868     -0.440901E-01  -2.12262       2.12262       316.751       318.874    
  23  0.779725     -0.248814      -11.9786       11.9786       324.811       336.789    
  24  0.901061     -0.104183      -5.01565       5.01565       320.952       325.968    
  25  0.533391     -0.628501      -30.2578       30.2578       326.285       356.543    
  26  0.642536     -0.442333      -21.2951       21.2951       314.391       335.687    
  27  0.520565E-01  -2.95543      -142.282       142.282       332.767       475.049    
  28  0.330080      -1.10842      -53.3624       53.3624       316.644       370.006    
  29  0.280801      -1.27011      -61.1466       61.1466       331.399       392.546    
  30  0.144013      -1.93785      -93.2935       93.2935       310.037       403.330    
  31  0.201537      -1.60178      -77.1141       77.1141       352.263       429.377    
  32  0.920188     -0.831777E-01  -4.00441       4.00441       335.383       339.387    
  33  0.747222     -0.291393      -14.0285       14.0285       319.480       333.509    
  34  0.697959     -0.359595      -17.3119       17.3119       323.311       340.623    
  35  0.492949     -0.707349      -34.0537       34.0537       314.778       348.832    
  36  0.378001     -0.972857      -46.8361       46.8361       310.095       356.931    
  37  0.936484     -0.656225E-01  -3.15925       3.15925       309.584       312.743    
  38  0.458232     -0.780381      -37.5697       37.5697       326.099       363.668    
  39  0.286796      -1.24898      -60.1296       60.1296       304.814       364.944    
  40  0.524458     -0.645389      -31.0708       31.0708       311.308       342.379    
  41  0.126679      -2.06610      -99.4677       99.4677       316.129       415.597    
  42  0.645270     -0.438086      -21.0907       21.0907       323.034       344.125    
  43  0.996049     -0.395919E-02 -0.190607      0.190607       324.833       325.024    
  44  0.470695     -0.753545      -36.2777       36.2777       321.570       357.848    
  45  0.783048     -0.244561      -11.7738       11.7738       325.382       337.156    
  46  0.682425     -0.382103      -18.3955       18.3955       305.577       323.973    
  47  0.623779     -0.471960      -22.7214       22.7214       314.547       337.268    
  48  0.138146      -1.97945      -95.2961       95.2961       326.229       421.525    
  49  0.317697      -1.14666      -55.2032       55.2032       321.980       377.183    
  50  0.215616      -1.53426      -73.8633       73.8633       324.389       398.252    
  51  0.392653     -0.934829      -45.0053       45.0053       316.394       361.399    
  52  0.311957      -1.16489      -56.0811       56.0811       320.138       376.219    
  53  0.665567     -0.407116      -19.5997       19.5997       311.734       331.334    
  54  0.124333      -2.08479      -100.368       100.368       298.574       398.941    
  55  0.175373      -1.74084      -83.8088       83.8088       326.333       410.141    
  56  0.712195E-01  -2.64199      -127.193       127.193       320.415       447.608    
  57  0.626551E-01  -2.77011      -133.361       133.361       323.798       457.159    
  58  0.869671     -0.139640      -6.72266       6.72266       323.294       330.017    
  59  0.112950      -2.18081      -104.990       104.990       383.653       488.643    
  60  0.837299     -0.177574      -8.54889       8.54889       324.169       332.718    
  61  0.380546     -0.966149      -46.5131       46.5131       330.093       376.607    
  62  0.225371      -1.49001      -71.7331       71.7331       304.975       376.708    
  63  0.556139     -0.586737      -28.2471       28.2471       321.315       349.562    
  64  0.909618     -0.947309E-01  -4.56061       4.56061       292.387       296.948    
loop,thermsimp(1:2)       63   23.2322       9.03715    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    179        302.52          0.88          1.10         23.12          0.00          0.04         25.13
Just calling func    0   0         25.13


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    180        570.60          0.86          1.09         23.13          0.00          0.05         25.12
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    302.52
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    48.1428               190
loop is:       63
neval is:      179
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       63      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    48.1428               190
loop is:       64
neval is:      179


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      190
neval,tstepnext:      179     190

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.816548     -0.202670      -9.75707       9.75707       292.387       302.144    
   2  0.209930      -1.56098      -75.1500       75.1500       298.353       373.503    
   3  0.710991     -0.341096      -16.4213       16.4213       295.636       312.057    
   4  0.967365     -0.331789E-01  -1.59732       1.59732       309.584       311.181    
   5  0.650635E-01  -2.73239      -131.545       131.545       308.487       440.032    
   6  0.578340     -0.547593      -26.3626       26.3626       291.268       317.630    
   7  0.928890E-01  -2.37635      -114.404       114.404       316.751       431.155    
   8  0.486974     -0.719546      -34.6409       34.6409       311.913       346.554    
   9  0.560625     -0.578703      -27.8604       27.8604       318.875       346.735    
  10  0.552834     -0.592698      -28.5341       28.5341       318.584       347.118    
  11  0.744529E-01  -2.59759      -125.055       125.055       305.577       430.632    
  12  0.937600     -0.644318E-01  -3.10193       3.10193       324.833       327.935    
  13  0.154459      -1.86783      -89.9224       89.9224       319.650       409.572    
  14  0.186893E-02  -6.28239      -302.452       302.452       320.952       623.403    
  15  0.250797      -1.38311      -66.5869       66.5869       323.294       389.881    
  16  0.924847E-01  -2.38071      -114.614       114.614       311.734       426.348    
  17  0.476680     -0.740911      -35.6695       35.6695       324.169       359.839    
  18  0.266527      -1.32228      -63.6581       63.6581       319.480       383.138    
  19  0.369755     -0.994916      -47.8980       47.8980       325.466       373.364    
  20  0.595561     -0.518252      -24.9501       24.9501       314.391       339.342    
  21  0.636070     -0.452447      -21.7821       21.7821       324.811       346.593    
  22  0.447294     -0.804540      -38.7328       38.7328       325.382       364.115    
  23  0.964945     -0.356839E-01  -1.71792       1.71792       314.547       316.265    
  24  0.752421     -0.284460      -13.6947       13.6947       306.186       319.880    
  25  0.705556     -0.348769      -16.7907       16.7907       335.383       352.173    
  26  0.943467     -0.581939E-01  -2.80162       2.80162       308.719       311.521    
  27  0.272564      -1.29988      -62.5799       62.5799       323.311       385.891    
  28  0.215815      -1.53333      -73.8189       73.8189       311.308       385.127    
  29  0.756955     -0.278452      -13.4055       13.4055       323.034       336.440    
  30  0.538381     -0.619189      -29.8095       29.8095       314.778       344.587    
  31  0.182967      -1.69845      -81.7681       81.7681       321.315       403.083    
  32  0.644758     -0.438881      -21.1289       21.1289       325.176       346.305    
  33  0.939477     -0.624320E-01  -3.00565       3.00565       326.285       329.290    
  34  0.663186     -0.410699      -19.7722       19.7722       310.095       329.867    
  35  0.795014     -0.229396      -11.0438       11.0438       321.570       332.614    
  36  0.630792     -0.460779      -22.1832       22.1832       316.394       338.577    
  37  0.151039      -1.89022      -91.0003       91.0003       309.825       400.825    
  38  0.668306     -0.403009      -19.4020       19.4020       326.099       345.501    
  39  0.683820     -0.380061      -18.2972       18.2972       304.814       323.111    
  40  0.122229      -2.10186      -101.189       101.189       318.706       419.895    
  41  0.664453     -0.408791      -19.6803       19.6803       319.349       339.030    
  42  0.548687     -0.600228      -28.8966       28.8966       316.644       345.540    
  43  0.931535     -0.709210E-01  -3.41433       3.41433       311.637       315.051    
  44  0.139742      -1.96796      -94.7430       94.7430       320.138       414.881    
  45  0.429142     -0.845967      -40.7272       40.7272       330.093       370.821    
  46  0.531147     -0.632717      -30.4608       30.4608       304.975       335.435    
  47  0.575558     -0.552416      -26.5948       26.5948       321.980       348.575    
  48  0.336537      -1.08905      -52.4297       52.4297       331.399       383.829    
  49  0.324486      -1.12551      -54.1853       54.1853       311.670       365.855    
  50  0.652768     -0.426534      -20.5345       20.5345       324.389       344.923    
  51  0.537860     -0.620158      -29.8561       29.8561       298.574       328.430    
  52  0.415288     -0.878782      -42.3070       42.3070       305.352       347.659    
  53  0.771827     -0.258995      -12.4688       12.4688       310.037       322.506    
  54  0.537995     -0.619906      -29.8440       29.8440       326.333       356.177    
  55  0.438537     -0.824310      -39.6846       39.6846       316.129       355.814    
  56  0.872114     -0.136835      -6.58760       6.58760       309.752       316.340    
  57  0.974519E-01  -2.32840      -112.095       112.095       326.229       438.324    
  58  0.245035      -1.40635      -67.7058       67.7058       352.263       419.969    
  59  0.285418      -1.25380      -60.3615       60.3615       320.415       380.777    
  60  0.598735     -0.512936      -24.6942       24.6942       307.638       332.332    
  61  0.440039     -0.820892      -39.5200       39.5200       323.798       363.318    
  62  0.115587      -2.15774      -103.879       103.879       332.767       436.646    
  63  0.479716     -0.734560      -35.3638       35.3638       383.653       419.017    
  64  0.423297     -0.859681      -41.3875       41.3875       302.517       343.904    
loop,thermsimp(1:2)       64   9.75707       75.1500    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    181        304.25          0.88          1.10         23.14          0.00          0.05         25.17
Just calling func    0   0         25.17


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    182        294.45          0.85          1.09         23.13          0.00          0.05         25.12
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  180    304.25        4.178     -1.030      3.559     -100.0     0.3235    
                     -0.9335      2.292     -100.0      2.358     0.8184    
                       1.116     0.1498E-01  2.400      0.000      0.000    
                      -1.105      0.000      0.000      0.000     -1.221    

                      -2.500      9440.     0.1365E+05 -703.5     -1895.    
                      -2.000     -5.296     -2.455     -6.225     -2.896    
                      -17.00     -2.493      1359.      0.000      3354.    

                       4764.      3323.      5073.      5329.      2500.    
                       4298.     0.8590E-01-0.8497E-01  0.000    -0.2064E-02
                      0.7433E-02-0.5403E-01 0.8734E-01-0.1112     0.8489E-02

                     -0.9784    -0.8184      0.000     0.2770     0.7558E-01
                      0.8541E-01 0.6094E-01 0.1842E-01 0.6713E-01-0.6679E-02
                     -0.1770E-01 0.6634E-01-0.8124E-01-0.8184      0.000    

                     -0.9708     -1.746      3.790     -1.047      0.000    
                       0.000      9.102      9.205     -6030.     -4.000    
                     -0.1937    -0.7747E-05  8.976      8.644     -7152.    

                      -4.000     0.7272E-01 0.5913      9.262      9.091    
                      -5279.     -4.000     0.2724     0.2724      9.491    
                       8.891     -4092.     -2.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    294.45
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    48.1428               190
loop is:       64
neval is:      181
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       64      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    48.1428               190
loop is:       65
neval is:      181


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      190
neval,tstepnext:      181     190

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.367522      -1.00097      -48.1896       48.1896       292.387       340.577    
   2  0.298218      -1.20993      -58.2494       58.2494       309.584       367.833    
   3  0.374092     -0.983254      -47.3366       47.3366       308.719       356.056    
   4  0.417366     -0.873791      -42.0667       42.0667       295.636       337.703    
   5  0.299382      -1.20604      -58.0619       58.0619       311.637       369.699    
   6  0.373029     -0.986099      -47.4736       47.4736       314.547       362.020    
   7  0.628224     -0.464858      -22.3796       22.3796       309.752       332.132    
   8  0.111397      -2.19465      -105.657       105.657       291.268       396.924    
   9  0.983555     -0.165818E-01 -0.798293      0.798293       306.186       306.984    
  10  0.394578     -0.929938      -44.7698       44.7698       310.037       354.807    
  11  0.410639     -0.890042      -42.8491       42.8491       304.814       347.663    
  12  0.700680     -0.355705      -17.1246       17.1246       324.833       341.958    
  13  0.223946      -1.49635      -72.0386       72.0386       298.574       370.612    
  14  0.651113E-01  -2.73166      -131.510       131.510       326.285       457.794    
  15  0.704010     -0.350963      -16.8963       16.8963       310.095       326.992    
  16  0.172411      -1.75787      -84.6289       84.6289       307.638       392.267    
  17  0.567412     -0.566670      -27.2811       27.2811       321.570       348.852    
  18  0.186334      -1.68021      -80.8901       80.8901       304.975       385.865    
  19  0.677524     -0.389310      -18.7425       18.7425       323.034       341.777    
  20  0.362270      -1.01537      -48.8825       48.8825       316.394       365.277    
  21  0.603880     -0.504381      -24.2823       24.2823       319.349       343.632    
  22  0.782208     -0.245635      -11.8255       11.8255       314.391       326.217    
  23  0.129808      -2.04170      -98.2931       98.2931       302.517       400.810    
  24  0.284816      -1.25591      -60.4631       60.4631       314.778       375.241    
  25  0.246930      -1.39865      -67.3349       67.3349       324.389       391.724    
  26  0.256917      -1.35900      -65.4261       65.4261       326.099       391.525    
  27  0.240545      -1.42485      -68.5962       68.5962       316.644       385.240    
  28  0.218018      -1.52318      -73.3300       73.3300       325.176       398.506    
  29  0.235583E-01  -3.74828      -180.453       180.453       311.913       492.366    
  30  0.114660      -2.16578      -104.267       104.267       324.811       429.078    
  31  0.119129      -2.12755      -102.426       102.426       318.875       421.301    
  32  0.471707     -0.751398      -36.1744       36.1744       318.584       354.758    
  33  0.607413     -0.498546      -24.0014       24.0014       305.352       329.353    
  34  0.568731     -0.564347      -27.1692       27.1692       321.980       349.149    
  35  0.587492     -0.531893      -25.6068       25.6068       335.383       360.989    
  36  0.411259     -0.888533      -42.7765       42.7765       316.129       358.906    
  37  0.836192     -0.178897      -8.61258       8.61258       326.333       334.945    
  38  0.152977      -1.87747      -90.3864       90.3864       324.169       414.556    
  39  0.941831     -0.599291E-01  -2.88515       2.88515       323.798       326.683    
  40  0.936595     -0.655045E-01  -3.15357       3.15357       325.382       328.535    
  41  0.856621     -0.154759      -7.45054       7.45054       311.670       319.121    
  42  0.484786     -0.724047      -34.8576       34.8576       330.093       364.951    
  43  0.188261      -1.66993      -80.3949       80.3949       325.466       405.861    
  44  0.957606     -0.433189E-01  -2.08549       2.08549       298.353       300.438    
  45  0.234891      -1.44863      -69.7412       69.7412       320.415       390.157    
  46  0.758920     -0.275858      -13.2806       13.2806       319.480       332.761    
  47  0.135340      -1.99997      -96.2840       96.2840       331.399       427.683    
  48  0.779121E-01  -2.55217      -122.869       122.869       311.308       434.177    
  49  0.573767     -0.555531      -26.7448       26.7448       323.311       350.056    
  50  0.982512     -0.176424E-01 -0.849354      0.849354       323.294       324.144    
  51  0.109579      -2.21111      -106.449       106.449       309.825       416.274    
  52  0.714543     -0.336113      -16.1814       16.1814       321.315       337.496    
  53  0.573216     -0.556492      -26.7911       26.7911       319.650       346.441    
  54  0.389116     -0.943877      -45.4409       45.4409       320.138       365.579    
  55  0.149817      -1.89834      -91.3915       91.3915       383.653       475.045    
  56  0.623269     -0.472778      -22.7608       22.7608       318.706       341.467    
  57  0.682320E-02  -4.98743      -240.109       240.109       352.263       592.372    
  58  0.641698     -0.443637      -21.3579       21.3579       311.734       333.092    
  59  0.233363      -1.45516      -70.0555       70.0555       305.577       375.633    
  60  0.881483     -0.126150      -6.07321       6.07321       316.751       322.825    
  61  0.264921      -1.32832      -63.9491       63.9491       332.767       396.716    
  62  0.941652     -0.601200E-01  -2.89434       2.89434       326.229       329.123    
  63  0.179971      -1.71496      -82.5628       82.5628       308.487       391.050    
  64  0.381207E-01  -3.26700      -157.282       157.282       294.455       451.737    
loop,thermsimp(1:2)       65   48.1896       58.2494    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    183        304.69          0.88          1.10         23.12          0.00          0.04         25.14
Just calling func    0   0         25.15


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    184        314.34          0.88          1.10         23.09          0.02          0.04         25.12
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    304.69
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    48.1428               190
loop is:       65
neval is:      183
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       65      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    48.1428               190
loop is:       66
neval is:      183


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      190
neval,tstepnext:      183     190

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.255462      -1.36468      -65.6995       65.6995       298.353       364.052    
   2  0.513427E-01  -2.96923      -142.947       142.947       306.186       449.133    
   3  0.288453      -1.24322      -59.8523       59.8523       311.670       371.522    
   4  0.107044      -2.23452      -107.576       107.576       316.751       424.327    
   5  0.756779     -0.278684      -13.4166       13.4166       323.294       336.711    
   6  0.333762      -1.09733      -52.8284       52.8284       314.391       367.220    
   7  0.270335      -1.30809      -62.9753       62.9753       323.798       386.774    
   8  0.666278E-01  -2.70863      -130.401       130.401       310.095       440.496    
   9  0.517510     -0.658727      -31.7129       31.7129       325.382       357.095    
  10  0.719680     -0.328949      -15.8365       15.8365       326.229       342.065    
  11  0.401542     -0.912442      -43.9275       43.9275       305.352       349.280    
  12  0.408125     -0.896181      -43.1446       43.1446       309.752       352.897    
  13  0.481086     -0.731710      -35.2265       35.2265       319.480       354.707    
  14  0.166952E-01  -4.09263      -197.031       197.031       311.734       508.765    
  15  0.913266     -0.907286E-01  -4.36793       4.36793       326.333       330.700    
  16  0.972084     -0.283134E-01  -1.36309       1.36309       321.315       322.678    
  17  0.889421     -0.117184      -5.64158       5.64158       295.636       301.277    
  18  0.171754      -1.76169      -84.8129       84.8129       292.387       377.200    
  19  0.925876     -0.770155E-01  -3.70774       3.70774       318.706       322.414    
  20  0.992897     -0.712866E-02 -0.343193      0.343193       323.034       323.377    
  21  0.118575E-01  -4.43479      -213.503       213.503       324.833       538.336    
  22  0.492413     -0.708438      -34.1062       34.1062       319.349       353.455    
  23  0.952433     -0.487360E-01  -2.34629       2.34629       319.650       321.996    
  24  0.591826     -0.524543      -25.2530       25.2530       304.814       330.067    
  25  0.762199     -0.271548      -13.0731       13.0731       321.570       334.644    
  26  0.613492     -0.488588      -23.5220       23.5220       321.980       345.502    
  27  0.134863      -2.00350      -96.4540       96.4540       323.311       419.765    
  28  0.633670     -0.456227      -21.9640       21.9640       318.584       340.548    
  29  0.829625     -0.186782      -8.99219       8.99219       310.037       319.029    
  30  0.148219      -1.90906      -91.9076       91.9076       308.719       400.627    
  31  0.198093      -1.61902      -77.9441       77.9441       316.129       394.073    
  32  0.321318      -1.13532      -54.6576       54.6576       335.383       390.040    
  33  0.475408     -0.743582      -35.7981       35.7981       314.547       350.345    
  34  0.196520      -1.62699      -78.3279       78.3279       330.093       408.421    
  35  0.637413     -0.450337      -21.6805       21.6805       316.394       338.075    
  36  0.596751     -0.516255      -24.8540       24.8540       320.138       344.992    
  37  0.351361      -1.04594      -50.3546       50.3546       309.584       359.938    
  38  0.111764      -2.19136      -105.498       105.498       311.637       417.135    
  39  0.213579      -1.54375      -74.3204       74.3204       298.574       372.894    
  40  0.799647     -0.223585      -10.7640       10.7640       314.778       325.542    
  41  0.670682     -0.399460      -19.2311       19.2311       305.577       324.809    
  42  0.104235      -2.26111      -108.856       108.856       316.644       425.500    
  43  0.607160E-01  -2.80155      -134.874       134.874       304.975       439.849    
  44  0.462312     -0.771516      -37.1429       37.1429       320.415       357.558    
  45  0.269658      -1.31060      -63.0959       63.0959       308.487       371.583    
  46  0.678606     -0.387714      -18.6656       18.6656       326.099       344.764    
  47  0.669051     -0.401895      -19.3483       19.3483       324.389       343.737    
  48  0.551912     -0.594367      -28.6145       28.6145       307.638       336.252    
  49  0.116070E-01  -4.45614      -214.531       214.531       332.767       547.298    
  50  0.911337     -0.928428E-01  -4.46971       4.46971       291.268       295.737    
  51  0.302404      -1.19599      -57.5783       57.5783       325.176       382.754    
  52  0.527926     -0.638800      -30.7536       30.7536       302.517       333.271    
  53  0.204835      -1.58555      -76.3327       76.3327       325.466       401.798    
  54  0.761388     -0.272612      -13.1243       13.1243       324.169       337.294    
  55  0.189928      -1.66111      -79.9705       79.9705       309.825       389.795    
  56  0.423830     -0.858422      -41.3268       41.3268       318.875       360.202    
  57  0.895148     -0.110767      -5.33262       5.33262       331.399       336.732    
  58  0.109823      -2.20889      -106.342       106.342       324.811       431.153    
  59  0.960076     -0.407431E-01  -1.96149       1.96149       311.308       313.270    
  60  0.694180     -0.365024      -17.5733       17.5733       294.455       312.028    
  61  0.302866      -1.19446      -57.5048       57.5048       326.285       383.789    
  62  0.213503      -1.54410      -74.3374       74.3374       383.653       457.990    
  63  0.949162     -0.521754E-01  -2.51187       2.51187       311.913       314.425    
  64  0.912779     -0.912617E-01  -4.39359       4.39359       304.687       309.080    
loop,thermsimp(1:2)       66   65.6995       142.947    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    185        292.11          0.88          1.12         23.12          0.00          0.04         25.16
Just calling func    0   0         25.16


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    186        294.17          0.85          1.11         23.18          0.00          0.05         25.19
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    292.11
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    48.1428               190
loop is:       66
neval is:      185
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       66      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    48.1428               190
loop is:       67
neval is:      185


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      190
neval,tstepnext:      185     190

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.297913      -1.21095      -58.2987       58.2987       291.268       349.566    
   2  0.840396     -0.173882      -8.37114       8.37114       295.636       304.007    
   3  0.165782      -1.79708      -86.5165       86.5165       304.687       391.203    
   4  0.516202E-01  -2.96384      -142.688       142.688       294.455       437.142    
   5  0.163201      -1.81278      -87.2720       87.2720       311.308       398.580    
   6  0.201529      -1.60182      -77.1161       77.1161       311.913       389.029    
   7  0.791805     -0.233441      -11.2385       11.2385       310.037       321.275    
   8  0.306466      -1.18265      -56.9359       56.9359       319.650       376.586    
   9  0.625963     -0.468465      -22.5532       22.5532       318.706       341.259    
  10  0.255827      -1.36325      -65.6309       65.6309       321.315       386.946    
  11  0.275269      -1.29001      -62.1045       62.1045       323.034       385.139    
  12  0.546374     -0.604451      -29.1000       29.1000       305.577       334.677    
  13  0.738275E-01  -2.60602      -125.461       125.461       314.778       440.239    
  14  0.459460     -0.777704      -37.4408       37.4408       304.814       342.255    
  15  0.245891      -1.40287      -67.5379       67.5379       326.333       393.870    
  16  0.818144E-01  -2.50330      -120.516       120.516       302.517       423.033    
  17  0.791963     -0.233241      -11.2289       11.2289       321.570       332.799    
  18  0.652560     -0.426852      -20.5498       20.5498       307.638       328.188    
  19  0.743237     -0.296740      -14.2859       14.2859       323.294       337.580    
  20  0.146095      -1.92350      -92.6026       92.6026       331.399       424.002    
  21  0.747148     -0.291492      -14.0332       14.0332       324.169       338.203    
  22  0.935024E-01  -2.36977      -114.087       114.087       316.394       430.481    
  23  0.924202     -0.788243E-01  -3.79482       3.79482       318.584       322.379    
  24  0.193934      -1.64024      -78.9656       78.9656       326.229       405.194    
  25  0.112499      -2.18481      -105.183       105.183       324.389       429.572    
  26  0.609079     -0.495807      -23.8695       23.8695       326.099       349.968    
  27  0.387822     -0.947210      -45.6013       45.6013       320.138       365.739    
  28  0.151976      -1.88403      -90.7027       90.7027       321.980       412.683    
  29  0.820125     -0.198299      -9.54665       9.54665       305.352       314.899    
  30  0.100865      -2.29397      -110.438       110.438       314.547       424.985    
  31  0.246930      -1.39865      -67.3349       67.3349       309.752       377.087    
  32  0.101973      -2.28305      -109.912       109.912       319.349       429.261    
  33  0.389401     -0.943145      -45.4056       45.4056       319.480       364.886    
  34  0.573635     -0.555762      -26.7559       26.7559       325.382       352.138    
  35  0.730896E-01  -2.61607      -125.945       125.945       320.415       446.360    
  36  0.260104      -1.34667      -64.8325       64.8325       309.584       374.416    
  37  0.562102     -0.576073      -27.7337       27.7337       318.875       346.608    
  38  0.159056      -1.83850      -88.5105       88.5105       298.353       386.863    
  39  0.779134E-02  -4.85474      -233.721       233.721       314.391       548.112    
  40  0.693208     -0.366425      -17.6407       17.6407       311.670       329.311    
  41  0.600279     -0.510361      -24.5702       24.5702       308.487       333.057    
  42  0.419387     -0.868962      -41.8343       41.8343       298.574       340.408    
  43  0.952036     -0.491524E-01  -2.36633       2.36633       292.387       294.754    
  44  0.613955     -0.487834      -23.4857       23.4857       325.176       348.661    
  45  0.842752     -0.171082      -8.23639       8.23639       326.285       334.521    
  46  0.733219     -0.310311      -14.9392       14.9392       323.798       338.738    
  47  0.776088     -0.253489      -12.2037       12.2037       309.825       322.028    
  48  0.965215     -0.354047E-01  -1.70448       1.70448       335.383       337.087    
  49  0.487812     -0.717826      -34.5581       34.5581       316.129       350.687    
  50  0.864492     -0.145613      -7.01020       7.01020       308.719       315.730    
  51  0.334607      -1.09480      -52.7067       52.7067       325.466       378.172    
  52  0.267438      -1.31887      -63.4939       63.4939       330.093       393.587    
  53  0.333561      -1.09793      -52.8574       52.8574       311.637       364.494    
  54  0.593184     -0.522250      -25.1426       25.1426       323.311       348.454    
  55  0.832475     -0.183352      -8.82709       8.82709       316.751       325.578    
  56  0.642050     -0.443089      -21.3316       21.3316       316.644       337.975    
  57  0.799223     -0.224116      -10.7896       10.7896       324.811       335.600    
  58  0.184219      -1.69163      -81.4399       81.4399       304.975       386.414    
  59  0.478229     -0.737666      -35.5133       35.5133       310.095       345.608    
  60  0.604888     -0.502712      -24.2019       24.2019       306.186       330.388    
  61  0.575395     -0.552698      -26.6084       26.6084       383.653       410.261    
  62  0.325892E-01  -3.42377      -164.830       164.830       311.734       476.564    
  63  0.759877     -0.274599      -13.2200       13.2200       324.833       338.053    
  64  0.214378      -1.54002      -74.1406       74.1406       292.110       366.250    
loop,thermsimp(1:2)       67   58.2987       8.37114    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    187        305.16          0.88          1.11         23.13          0.00          0.04         25.16
Just calling func    0   0         25.16


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    188        304.68          0.88          1.11         23.13          0.00          0.04         25.16
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    304.68
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    48.1428               190
loop is:       67
neval is:      187
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       67      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    48.1428               190
loop is:       68
neval is:      187


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      190
neval,tstepnext:      187     190

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.944296E-02  -4.66249      -224.465       224.465       292.387       516.852    
   2  0.714357     -0.336373      -16.1939       16.1939       295.636       311.830    
   3  0.997096     -0.290808E-02 -0.140003      0.140003       305.352       305.492    
   4  0.905437     -0.993373E-01  -4.78237       4.78237       308.719       313.502    
   5  0.307060      -1.18071      -56.8428       56.8428       310.037       366.880    
   6  0.179061      -1.72003      -82.8069       82.8069       309.825       392.631    
   7  0.384312     -0.956301      -46.0390       46.0390       318.584       364.623    
   8  0.901101     -0.104138      -5.01351       5.01351       316.751       321.765    
   9  0.606170     -0.500594      -24.1000       24.1000       307.638       331.738    
  10  0.515234     -0.663133      -31.9251       31.9251       311.670       343.595    
  11  0.639447     -0.447152      -21.5271       21.5271       306.186       327.713    
  12  0.820429     -0.197928      -9.52879       9.52879       321.570       331.099    
  13  0.521739     -0.650587      -31.3211       31.3211       308.487       339.808    
  14  0.767979     -0.263993      -12.7094       12.7094       326.285       338.994    
  15  0.530366     -0.634187      -30.5315       30.5315       305.577       336.109    
  16  0.732471     -0.311332      -14.9884       14.9884       324.811       339.799    
  17  0.440461     -0.819933      -39.4738       39.4738       335.383       374.856    
  18  0.595715     -0.517993      -24.9376       24.9376       323.294       348.232    
  19  0.407958     -0.896592      -43.1644       43.1644       316.644       359.808    
  20  0.544683     -0.607550      -29.2492       29.2492       324.833       354.082    
  21  0.611386E-01  -2.79461      -134.540       134.540       324.169       458.710    
  22  0.135041      -2.00218      -96.3903       96.3903       323.798       420.189    
  23  0.547242     -0.602864      -29.0235       29.0235       298.574       327.597    
  24  0.214436      -1.53975      -74.1277       74.1277       318.706       392.834    
  25  0.340220      -1.07816      -51.9058       51.9058       304.814       356.720    
  26  0.270394      -1.30787      -62.9647       62.9647       310.095       373.060    
  27  0.605229     -0.502149      -24.1748       24.1748       318.875       343.050    
  28  0.630206     -0.461709      -22.2279       22.2279       323.311       345.539    
  29  0.942476     -0.592449E-01  -2.85221       2.85221       325.176       328.028    
  30  0.293125      -1.22716      -59.0788       59.0788       291.268       350.347    
  31  0.526210     -0.642056      -30.9103       30.9103       326.099       357.009    
  32  0.972201     -0.281927E-01  -1.35727       1.35727       316.129       317.486    
  33  0.570000     -0.562119      -27.0620       27.0620       325.382       352.444    
  34  0.752945     -0.283763      -13.6612       13.6612       311.637       325.298    
  35  0.333005      -1.09960      -52.9377       52.9377       319.480       372.418    
  36  0.430444     -0.842939      -40.5814       40.5814       320.138       360.719    
  37  0.106505      -2.23957      -107.819       107.819       292.110       399.928    
  38  0.327953      -1.11488      -53.6736       53.6736       309.584       363.258    
  39  0.586631     -0.533359      -25.6774       25.6774       319.650       345.327    
  40  0.563274     -0.573989      -27.6334       27.6334       309.752       337.386    
  41  0.802100     -0.220522      -10.6165       10.6165       325.466       336.082    
  42  0.594871     -0.519411      -25.0059       25.0059       323.034       348.040    
  43  0.816066     -0.203261      -9.78553       9.78553       304.975       314.760    
  44  0.170795E-01  -4.06987      -195.935       195.935       298.353       494.288    
  45  0.554958     -0.588864      -28.3495       28.3495       321.315       349.664    
  46  0.674023     -0.394492      -18.9919       18.9919       311.913       330.905    
  47  0.371758     -0.989512      -47.6378       47.6378       304.687       352.324    
  48  0.309440      -1.17299      -56.4710       56.4710       330.093       386.564    
  49  0.182337      -1.70190      -81.9341       81.9341       326.333       408.267    
  50  0.443504     -0.813049      -39.1424       39.1424       311.308       350.450    
  51  0.407824     -0.896918      -43.1801       43.1801       326.229       369.409    
  52  0.140254      -1.96430      -94.5668       94.5668       383.653       478.220    
  53  0.801043     -0.221840      -10.6800       10.6800       321.980       332.660    
  54  0.922923     -0.802099E-01  -3.86153       3.86153       302.517       306.378    
  55  0.982391     -0.177663E-01 -0.855318      0.855318       331.399       332.255    
  56  0.830509     -0.185717      -8.94094       8.94094       314.547       323.488    
  57  0.459056     -0.778583      -37.4831       37.4831       319.349       356.832    
  58  0.918078     -0.854734E-01  -4.11493       4.11493       324.389       328.504    
  59  0.858811E-01  -2.45479      -118.180       118.180       316.394       434.575    
  60  0.642813E-01  -2.74449      -132.127       132.127       294.455       426.582    
  61  0.328642      -1.11279      -53.5727       53.5727       314.778       368.351    
  62  0.238578      -1.43306      -68.9915       68.9915       320.415       389.407    
  63  0.183249      -1.69691      -81.6939       81.6939       311.734       393.428    
  64  0.575307     -0.552852      -26.6158       26.6158       304.685       331.301    
loop,thermsimp(1:2)       68   224.465       16.1939    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    189        348.30          0.88          1.08         23.11          0.08          0.05         25.19
Just calling func    0   0         25.19


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    348.30
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    48.1428               190
loop is:       68
neval is:      188
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       68      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    48.1428               190
loop is:       69
neval is:      188


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      190
neval,tstepnext:      188     190

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.521048     -0.651914      -31.3849       31.3849       305.352       336.737    
   2  0.554375     -0.589913      -28.4001       28.4001       302.517       330.917    
   3  0.404373     -0.905418      -43.5893       43.5893       295.636       339.225    
   4  0.632877     -0.457478      -22.0243       22.0243       308.719       330.744    
   5  0.395261     -0.928209      -44.6866       44.6866       304.975       349.661    
   6  0.715068     -0.335378      -16.1460       16.1460       316.129       332.275    
   7  0.918313     -0.852174E-01  -4.10260       4.10260       316.751       320.854    
   8  0.529514E-01  -2.93838      -141.462       141.462       314.547       456.009    
   9  0.284219      -1.25801      -60.5641       60.5641       311.637       372.201    
  10  0.809402     -0.211460      -10.1803       10.1803       298.574       308.754    
  11  0.604758     -0.502928      -24.2123       24.2123       306.186       330.398    
  12  0.624772     -0.470369      -22.6449       22.6449       325.176       347.821    
  13  0.622683     -0.473718      -22.8061       22.8061       324.389       347.195    
  14  0.491656     -0.709976      -34.1802       34.1802       311.913       346.093    
  15  0.823484     -0.194211      -9.34985       9.34985       321.570       330.920    
  16  0.185629E-01  -3.98659      -191.925       191.925       304.685       496.610    
  17  0.911253     -0.929346E-01  -4.47413       4.47413       307.638       312.112    
  18  0.825116     -0.192231      -9.25454       9.25454       331.399       340.654    
  19  0.902913     -0.102129      -4.91679       4.91679       321.980       326.897    
  20  0.869925     -0.139348      -6.70862       6.70862       325.466       332.174    
  21  0.135445      -1.99919      -96.2465       96.2465       305.577       401.824    
  22  0.516840     -0.660022      -31.7753       31.7753       309.752       341.528    
  23  0.127583      -2.05899      -99.1255       99.1255       326.285       425.410    
  24  0.237062E-01  -3.74202      -180.151       180.151       324.811       504.962    
  25  0.456233     -0.784753      -37.7802       37.7802       308.487       346.267    
  26  0.547397     -0.602581      -29.0099       29.0099       318.875       347.885    
  27  0.231746E-02  -6.06728      -292.096       292.096       311.670       603.766    
  28  0.467213     -0.760969      -36.6352       36.6352       319.650       356.285    
  29  0.397333     -0.922981      -44.4349       44.4349       323.311       367.746    
  30  0.291343      -1.23325      -59.3722       59.3722       323.034       382.406    
  31  0.964262     -0.363922E-01  -1.75202       1.75202       323.294       325.046    
  32  0.260485      -1.34521      -64.7621       64.7621       321.315       386.077    
  33  0.868574     -0.140902      -6.78343       6.78343       291.268       298.051    
  34  0.832573     -0.183235      -8.82143       8.82143       311.308       320.129    
  35  0.240383      -1.42552      -68.6286       68.6286       304.687       373.315    
  36  0.878342     -0.129719      -6.24503       6.24503       325.382       331.627    
  37  0.168707      -1.77959      -85.6746       85.6746       324.833       410.508    
  38  0.348015      -1.05551      -50.8152       50.8152       304.814       355.629    
  39  0.846224     -0.166971      -8.03847       8.03847       319.349       327.388    
  40  0.842580     -0.171286      -8.24619       8.24619       326.099       334.345    
  41  0.230401      -1.46794      -70.6705       70.6705       316.644       387.314    
  42  0.441962     -0.816531      -39.3101       39.3101       320.138       359.448    
  43  0.772036     -0.258724      -12.4557       12.4557       309.584       322.040    
  44  0.970063     -0.303946E-01  -1.46328       1.46328       318.584       320.047    
  45  0.610535     -0.493419      -23.7546       23.7546       310.037       333.791    
  46  0.548201     -0.601114      -28.9393       28.9393       314.778       343.717    
  47  0.322533      -1.13155      -54.4760       54.4760       326.229       380.705    
  48  0.194318E-01  -3.94084      -189.723       189.723       319.480       509.203    
  49  0.219930      -1.51445      -72.9096       72.9096       310.095       383.005    
  50  0.538995E-01  -2.92063      -140.607       140.607       335.383       475.990    
  51  0.189941      -1.66104      -79.9671       79.9671       330.093       410.061    
  52  0.339787      -1.07944      -51.9671       51.9671       320.415       372.383    
  53  0.783417     -0.244091      -11.7512       11.7512       309.825       321.576    
  54  0.347888      -1.05587      -50.8327       50.8327       318.706       369.539    
  55  0.511342     -0.670716      -32.2902       32.2902       311.734       344.024    
  56  0.656791     -0.420389      -20.2387       20.2387       292.110       312.348    
  57  0.433072E-01  -3.13944      -151.141       151.141       326.333       477.474    
  58  0.940019     -0.618557E-01  -2.97790       2.97790       323.798       326.776    
  59  0.560131     -0.579584      -27.9028       27.9028       294.455       322.357    
  60  0.335604      -1.09182      -52.5635       52.5635       316.394       368.958    
  61  0.677192     -0.389801      -18.7661       18.7661       324.169       342.935    
  62  0.166447      -1.79308      -86.3237       86.3237       383.653       469.977    
  63  0.966787     -0.337766E-01  -1.62610       1.62610       298.353       299.979    
  64  0.501486     -0.690179      -33.2272       33.2272       348.303       381.530    
loop,thermsimp(1:2)       69   31.3849       28.4001    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    190        314.94          0.88          1.11         23.13          0.00          0.04         25.16
Just calling func    0   0         25.16


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    191        348.71          0.86          1.12         23.12          0.08          0.04         25.21
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    314.94
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    48.1428               190
loop is:       69
neval is:      190
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       69      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    48.1428               190
loop is:       70
neval is:      190


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      190
neval,tstepnext:      190     190

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.242177      -1.41809      -68.2706       68.2706       291.268       359.538    
   2  0.384023     -0.957054      -46.0752       46.0752       298.353       344.428    
   3  0.672379     -0.396933      -19.1095       19.1095       298.574       317.683    
   4  0.204591      -1.58674      -76.3902       76.3902       307.638       384.028    
   5  0.145151      -1.92998      -92.9145       92.9145       292.110       385.024    
   6  0.235757      -1.44495      -69.5641       69.5641       318.584       388.148    
   7  0.882595     -0.124889      -6.01251       6.01251       311.308       317.321    
   8  0.215562      -1.53451      -73.8754       73.8754       316.751       390.627    
   9  0.248905      -1.39068      -66.9513       66.9513       309.825       376.776    
  10  0.695481     -0.363152      -17.4831       17.4831       309.584       327.067    
  11  0.515786     -0.662063      -31.8736       31.8736       294.455       326.328    
  12  0.956817     -0.441428E-01  -2.12516       2.12516       323.294       325.420    
  13  0.256477      -1.36072      -65.5086       65.5086       323.798       389.307    
  14  0.870409     -0.138792      -6.68184       6.68184       321.980       328.662    
  15  0.296335      -1.21627      -58.5544       58.5544       319.349       377.904    
  16  0.563087     -0.574322      -27.6495       27.6495       306.186       333.835    
  17  0.860973     -0.149692      -7.20658       7.20658       308.719       315.926    
  18  0.336353      -1.08959      -52.4560       52.4560       302.517       354.973    
  19  0.432238     -0.838780      -40.3812       40.3812       321.570       361.952    
  20  0.411587     -0.887734      -42.7380       42.7380       325.382       368.120    
  21  0.685679     -0.377346      -18.1665       18.1665       325.466       343.632    
  22  0.178038E-01  -4.02835      -193.936       193.936       316.129       510.065    
  23  0.330516      -1.10710      -53.2989       53.2989       310.037       363.336    
  24  0.987115     -0.129685E-01 -0.624338      0.624338       326.099       326.723    
  25  0.702947     -0.352474      -16.9691       16.9691       305.352       322.321    
  26  0.159040      -1.83860      -88.5152       88.5152       295.636       384.151    
  27  0.329714      -1.10953      -53.4159       53.4159       331.399       384.815    
  28  0.542452     -0.611656      -29.4468       29.4468       309.752       339.199    
  29  0.484074     -0.725518      -34.9285       34.9285       324.169       359.098    
  30  0.574330     -0.554551      -26.6976       26.6976       314.778       341.476    
  31  0.987944     -0.121288E-01 -0.583916      0.583916       311.734       312.318    
  32  0.565195E-01  -2.87317      -138.322       138.322       311.913       450.236    
  33  0.662626     -0.411545      -19.8129       19.8129       308.487       328.300    
  34  0.462195     -0.771769      -37.1551       37.1551       324.389       361.544    
  35  0.413957     -0.881994      -42.4616       42.4616       325.176       367.637    
  36  0.627825     -0.465493      -22.4101       22.4101       318.875       341.285    
  37  0.373783E-01  -3.28667      -158.229       158.229       304.975       463.204    
  38  0.318481      -1.14419      -55.0846       55.0846       304.814       359.899    
  39  0.193037      -1.64487      -79.1888       79.1888       319.650       398.839    
  40  0.246573      -1.40010      -67.4047       67.4047       320.138       387.542    
  41  0.913643     -0.903152E-01  -4.34802       4.34802       323.311       327.659    
  42  0.593287     -0.522077      -25.1342       25.1342       316.394       341.528    
  43  0.323913      -1.12728      -54.2703       54.2703       318.706       372.976    
  44  0.270579E-01  -3.60978      -173.785       173.785       311.637       485.421    
  45  0.684823     -0.378595      -18.2266       18.2266       320.415       338.642    
  46  0.279340      -1.27532      -61.3977       61.3977       304.687       366.084    
  47  0.285511      -1.25348      -60.3458       60.3458       326.229       386.575    
  48  0.361874      -1.01646      -48.9351       48.9351       348.303       397.238    
  49  0.779291     -0.249370      -12.0054       12.0054       323.034       335.040    
  50  0.590933     -0.526053      -25.3257       25.3257       310.095       335.421    
  51  0.493821E-01  -3.00817      -144.821       144.821       321.315       466.136    
  52  0.736348     -0.306053      -14.7342       14.7342       316.644       331.378    
  53  0.300670      -1.20174      -57.8551       57.8551       305.577       363.433    
  54  0.329072      -1.11148      -53.5096       53.5096       330.093       383.603    
  55  0.238483      -1.43346      -69.0105       69.0105       324.833       393.844    
  56  0.296796      -1.21471      -58.4795       58.4795       326.285       384.764    
  57  0.878745     -0.129261      -6.22298       6.22298       314.547       320.770    
  58  0.493874     -0.705475      -33.9635       33.9635       383.653       417.617    
  59  0.112522      -2.18461      -105.173       105.173       335.383       440.556    
  60  0.642649     -0.442156      -21.2866       21.2866       326.333       347.619    
  61  0.688378     -0.373417      -17.9773       17.9773       304.685       322.662    
  62  0.879214     -0.128727      -6.19728       6.19728       324.811       331.008    
  63  0.621151E-01  -2.77877      -133.778       133.778       319.480       453.258    
  64  0.270748      -1.30657      -62.9017       62.9017       314.938       377.840    
loop,thermsimp(1:2)       70   68.2706       46.0752    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    192        306.02          0.88          1.10         23.17          0.03          0.04         25.23
Just calling func    0   0         25.23


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    193        307.22          0.88          1.09         23.18          0.13          0.04         25.32
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    306.02
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    48.1428               190
loop is:       70
neval is:      192
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       70      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    48.1428               190
loop is:       71
neval is:      192


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 




neval>tstepnex so lower away!t
---> lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
     new SAtemp,tstepnext are :    24.0714               253

 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      253
neval,tstepnext:      192     253

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.810305     -0.210344      -5.06327       5.06327       311.734       316.797    
   2  0.601567     -0.508218      -12.2335       12.2335       308.719       320.953    
   3  0.190401      -1.65862      -39.9254       39.9254       311.308       351.233    
   4  0.827263     -0.189632      -4.56471       4.56471       298.574       303.139    
   5  0.581677     -0.541840      -13.0428       13.0428       314.547       327.590    
   6  0.680336     -0.385169      -9.27155       9.27155       305.352       314.624    
   7  0.641383     -0.444128      -10.6908       10.6908       304.685       315.376    
   8  0.593931     -0.520992      -12.5410       12.5410       323.294       335.835    
   9  0.326400      -1.11963      -26.9511       26.9511       294.455       321.406    
  10  0.964323     -0.363286E-01 -0.874480      0.874480       326.099       326.973    
  11  0.481751     -0.730328      -17.5800       17.5800       309.584       327.164    
  12  0.230624E-01  -3.76955      -90.7383       90.7383       323.311       414.050    
  13  0.214859      -1.53777      -37.0164       37.0164       308.487       345.503    
  14  0.325804      -1.12146      -26.9951       26.9951       321.980       348.975    
  15  0.668745     -0.402353      -9.68519       9.68519       324.811       334.496    
  16  0.803263     -0.219073      -5.27339       5.27339       316.644       321.917    
  17  0.465531     -0.764577      -18.4044       18.4044       306.186       324.590    
  18  0.589796     -0.527978      -12.7092       12.7092       323.034       335.743    
  19  0.783335     -0.244195      -5.87812       5.87812       310.095       315.973    
  20  0.937099     -0.649659E-01  -1.56382       1.56382       320.415       321.979    
  21  0.504081     -0.685019      -16.4893       16.4893       309.752       326.242    
  22  0.368431E-01  -3.30109      -79.4617       79.4617       318.875       398.336    
  23  0.462712     -0.770651      -18.5506       18.5506       314.778       333.329    
  24  0.172447      -1.75767      -42.3095       42.3095       316.394       358.704    
  25  0.361979      -1.01617      -24.4606       24.4606       325.466       349.926    
  26  0.616189     -0.484202      -11.6554       11.6554       298.353       310.008    
  27  0.495582     -0.702023      -16.8987       16.8987       326.333       343.231    
  28  0.492859     -0.707532      -17.0313       17.0313       302.517       319.548    
  29  0.189027      -1.66586      -40.0997       40.0997       324.169       364.269    
  30  0.336237      -1.08994      -26.2364       26.2364       291.268       317.504    
  31  0.997382     -0.262184E-02 -0.631112E-01  0.631112E-01   304.814       304.877    
  32  0.629287     -0.463168      -11.1491       11.1491       324.389       335.538    
  33  0.226178      -1.48644      -35.7806       35.7806       321.570       357.351    
  34  0.522315     -0.649483      -15.6340       15.6340       310.037       325.671    
  35  0.238835E-02  -6.03715      -145.323       145.323       305.577       450.900    
  36  0.123092E-01  -4.39741      -105.852       105.852       304.687       410.538    
  37  0.488141     -0.717152      -17.2628       17.2628       325.176       342.439    
  38  0.925188     -0.777584E-01  -1.87175       1.87175       325.382       327.254    
  39  0.676413     -0.390952      -9.41075       9.41075       318.706       328.117    
  40  0.638827     -0.448121      -10.7869       10.7869       309.825       320.611    
  41  0.789998     -0.235725      -5.67422       5.67422       314.938       320.612    
  42  0.453703E-01  -3.09290      -74.4504       74.4504       319.349       393.800    
  43  0.866893     -0.142840      -3.43836       3.43836       330.093       333.532    
  44  0.122493E-01  -4.40228      -105.969       105.969       307.638       413.607    
  45  0.172311      -1.75846      -42.3285       42.3285       295.636       337.964    
  46  0.899580     -0.105827      -2.54740       2.54740       326.285       328.832    
  47  0.857845     -0.153332      -3.69091       3.69091       331.399       335.090    
  48  0.176813      -1.73266      -41.7076       41.7076       292.110       333.817    
  49  0.795271E-01  -2.53166      -60.9405       60.9405       326.229       387.169    
  50  0.461368     -0.773559      -18.6206       18.6206       320.138       338.758    
  51  0.727625     -0.317970      -7.65398       7.65398       318.584       326.238    
  52  0.106879      -2.23606      -53.8251       53.8251       323.798       377.623    
  53  0.169411      -1.77543      -42.7369       42.7369       316.751       359.488    
  54  0.150923      -1.89099      -45.5187       45.5187       324.833       370.352    
  55  0.970144     -0.303104E-01 -0.729614      0.729614       348.303       349.033    
  56  0.819386     -0.199200      -4.79502       4.79502       319.650       324.445    
  57  0.855509     -0.156059      -3.75656       3.75656       383.653       387.410    
  58  0.248182      -1.39359      -33.5457       33.5457       335.383       368.928    
  59  0.632181     -0.458580      -11.0387       11.0387       311.913       322.952    
  60  0.626090     -0.468262      -11.2717       11.2717       319.480       330.752    
  61  0.122722      -2.09783      -50.4977       50.4977       304.975       355.472    
  62  0.656077     -0.421477      -10.1455       10.1455       321.315       331.460    
  63  0.811645     -0.208692      -5.02351       5.02351       311.637       316.660    
  64  0.241419E-05  -12.9341      -311.343       311.343       306.022       617.365    
loop,thermsimp(1:2)       71   5.06327       12.2335    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    194        316.13          0.88          1.10         23.05          0.09          0.04         25.17
Just calling func    0   0         25.17


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    195        360.82          0.88          1.11         23.12          0.05          0.04         25.20
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    316.13
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    24.0714               253
loop is:       71
neval is:      194
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       71      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    24.0714               253
loop is:       72
neval is:      194


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      253
neval,tstepnext:      194     253

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.870330     -0.138883      -3.34310       3.34310       298.574       301.917    
   2  0.470451     -0.754063      -18.1514       18.1514       304.814       322.965    
   3  0.615627     -0.485114      -11.6774       11.6774       298.353       310.030    
   4  0.291899      -1.23135      -29.6403       29.6403       305.352       334.992    
   5  0.584822     -0.536448      -12.9131       12.9131       304.685       317.598    
   6  0.681731     -0.383120      -9.22224       9.22224       310.095       319.317    
   7  0.680149     -0.385444      -9.27817       9.27817       311.637       320.915    
   8  0.560478     -0.578966      -13.9365       13.9365       311.734       325.670    
   9  0.392299     -0.935730      -22.5243       22.5243       291.268       313.792    
  10  0.586793     -0.533083      -12.8320       12.8320       302.517       315.349    
  11  0.461418     -0.773452      -18.6181       18.6181       309.825       328.443    
  12  0.142886      -1.94571      -46.8360       46.8360       314.938       361.774    
  13  0.960325     -0.404831E-01 -0.974484      0.974484       308.719       309.694    
  14  0.547176     -0.602984      -14.5147       14.5147       294.455       308.969    
  15  0.817596     -0.201386      -4.84765       4.84765       316.644       321.491    
  16  0.184065      -1.69247      -40.7400       40.7400       320.415       361.155    
  17  0.763954     -0.269247      -6.48116       6.48116       311.913       318.394    
  18  0.740640     -0.300240      -7.22720       7.22720       319.650       326.877    
  19  0.257299      -1.35751      -32.6773       32.6773       306.186       338.863    
  20  0.274950      -1.29117      -31.0802       31.0802       310.037       341.117    
  21  0.850599     -0.161814      -3.89509       3.89509       318.584       322.479    
  22  0.265651      -1.32557      -31.9084       31.9084       309.752       341.661    
  23  0.388810     -0.944665      -22.7394       22.7394       326.099       348.838    
  24  0.921262     -0.820106E-01  -1.97411       1.97411       309.584       311.558    
  25  0.622168     -0.474545      -11.4230       11.4230       325.382       336.805    
  26  0.831499     -0.184526      -4.44179       4.44179       314.547       318.989    
  27  0.777776     -0.251317      -6.04955       6.04955       318.706       324.756    
  28  0.519638     -0.654624      -15.7577       15.7577       326.285       342.042    
  29  0.343480      -1.06863      -25.7233       25.7233       319.480       345.203    
  30  0.379182     -0.969738      -23.3429       23.3429       321.315       344.658    
  31  0.509964     -0.673415      -16.2100       16.2100       314.778       330.988    
  32  0.457294E-01  -3.08501      -74.2605       74.2605       330.093       404.354    
  33  0.952238     -0.489400E-01  -1.17805       1.17805       292.110       293.288    
  34  0.198116      -1.61890      -38.9692       38.9692       324.811       363.780    
  35  0.863922     -0.146273      -3.52100       3.52100       331.399       334.920    
  36  0.765944     -0.266646      -6.41854       6.41854       324.389       330.807    
  37  0.849389     -0.163238      -3.92937       3.92937       323.034       326.964    
  38  0.488339     -0.716745      -17.2530       17.2530       323.294       340.547    
  39  0.969632     -0.308388E-01 -0.742333      0.742333       295.636       296.378    
  40  0.971690     -0.287184E-01 -0.691291      0.691291       320.138       320.829    
  41  0.690522     -0.370307      -8.91381       8.91381       325.176       334.090    
  42  0.266028      -1.32415      -31.8742       31.8742       326.333       358.207    
  43  0.581296     -0.542495      -13.0586       13.0586       308.487       321.545    
  44  0.636654     -0.451529      -10.8689       10.8689       321.980       332.849    
  45  0.947680     -0.537383E-01  -1.29356       1.29356       348.303       349.597    
  46  0.792806     -0.232176      -5.58881       5.58881       325.466       331.054    
  47  0.420588     -0.866101      -20.8483       20.8483       311.308       332.156    
  48  0.780043     -0.248407      -5.97949       5.97949       304.975       310.954    
  49  0.834700E-01  -2.48327      -59.7757       59.7757       321.570       381.346    
  50  0.707823     -0.345562      -8.31815       8.31815       316.394       324.712    
  51  0.836500     -0.178529      -4.29745       4.29745       316.751       321.049    
  52  0.111614      -2.19271      -52.7815       52.7815       324.169       376.951    
  53  0.690314     -0.370608      -8.92105       8.92105       335.383       344.304    
  54  0.200139      -1.60874      -38.7247       38.7247       324.833       363.558    
  55  0.182543E-01  -4.00336      -96.3663       96.3663       323.798       420.165    
  56  0.248611      -1.39187      -33.5042       33.5042       326.229       359.733    
  57  0.951106     -0.501293E-01  -1.20668       1.20668       383.653       384.860    
  58  0.576942     -0.550013      -13.2396       13.2396       319.349       332.589    
  59  0.335384      -1.09248      -26.2975       26.2975       318.875       345.172    
  60  0.137719E-01  -4.28512      -103.149       103.149       304.687       407.835    
  61  0.839758     -0.174642      -4.20388       4.20388       307.638       311.842    
  62  0.324640      -1.12504      -27.0813       27.0813       323.311       350.393    
  63  0.758550     -0.276346      -6.65204       6.65204       305.577       312.229    
  64  0.704737     -0.349931      -8.42332       8.42332       316.129       324.553    
loop,thermsimp(1:2)       72   3.34310       18.1514    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    196        302.69          0.88          1.10         23.16          0.00          0.04         25.19
Just calling func    0   0         25.19


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    302.69
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    24.0714               253
loop is:       72
neval is:      195
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       72      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    24.0714               253
loop is:       73
neval is:      195


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      253
neval,tstepnext:      195     253

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.741909     -0.298528      -7.18599       7.18599       292.110       299.296    
   2  0.823468     -0.194230      -4.67539       4.67539       295.636       300.311    
   3  0.352913      -1.04153      -25.0712       25.0712       298.574       323.645    
   4  0.268511      -1.31486      -31.6506       31.6506       294.455       326.105    
   5  0.137541      -1.98383      -47.7536       47.7536       308.719       356.473    
   6  0.953738     -0.473661E-01  -1.14017       1.14017       298.353       299.493    
   7  0.366602      -1.00348      -24.1551       24.1551       304.975       329.130    
   8  0.861530     -0.149046      -3.58774       3.58774       309.584       313.172    
   9  0.190086      -1.66028      -39.9652       39.9652       307.638       347.603    
  10  0.931621     -0.708293E-01  -1.70496       1.70496       305.577       307.282    
  11  0.135562      -1.99833      -48.1025       48.1025       291.268       339.370    
  12  0.577052     -0.549824      -13.2350       13.2350       302.517       315.752    
  13  0.937511     -0.645266E-01  -1.55324       1.55324       304.685       306.238    
  14  0.836727     -0.178258      -4.29091       4.29091       311.913       316.204    
  15  0.124731      -2.08159      -50.1068       50.1068       314.547       364.654    
  16  0.830758     -0.185417      -4.46325       4.46325       310.095       314.558    
  17  0.925849     -0.770442E-01  -1.85456       1.85456       320.138       321.992    
  18  0.945668     -0.558633E-01  -1.34471       1.34471       311.637       312.982    
  19  0.700762     -0.355587      -8.55947       8.55947       316.751       325.311    
  20  0.585168E-01  -2.83844      -68.3252       68.3252       316.644       384.969    
  21  0.241985      -1.41888      -34.1544       34.1544       308.487       342.641    
  22  0.426115     -0.853047      -20.5340       20.5340       318.584       339.118    
  23  0.730656     -0.313813      -7.55392       7.55392       304.814       312.368    
  24  0.227460      -1.48078      -35.6445       35.6445       316.129       351.774    
  25  0.824070     -0.193500      -4.65781       4.65781       316.394       321.052    
  26  0.912829     -0.912064E-01  -2.19547       2.19547       318.706       320.902    
  27  0.130860      -2.03363      -48.9522       48.9522       311.734       360.686    
  28  0.126999      -2.06358      -49.6731       49.6731       319.650       369.323    
  29  0.394828E-01  -3.23189      -77.7961       77.7961       323.034       400.830    
  30  0.927793     -0.749466E-01  -1.80407       1.80407       309.825       311.629    
  31  0.161762      -1.82163      -43.8492       43.8492       324.389       368.238    
  32  0.510374     -0.672611      -16.1907       16.1907       314.778       330.969    
  33  0.930607     -0.719186E-01  -1.73118       1.73118       325.466       327.197    
  34  0.825283E-01  -2.49461      -60.0488       60.0488       311.308       371.357    
  35  0.569143     -0.563624      -13.5672       13.5672       319.349       332.916    
  36  0.732951     -0.310676      -7.47841       7.47841       321.980       329.459    
  37  0.554950     -0.588877      -14.1751       14.1751       325.176       339.351    
  38  0.614368     -0.487160      -11.7266       11.7266       331.399       343.126    
  39  0.127889      -2.05659      -49.5051       49.5051       305.352       354.857    
  40  0.510007     -0.673330      -16.2080       16.2080       325.382       341.590    
  41  0.206107      -1.57936      -38.0174       38.0174       306.186       344.203    
  42  0.812962E-01  -2.50966      -60.4109       60.4109       323.294       383.705    
  43  0.711913     -0.339799      -8.17945       8.17945       310.037       318.216    
  44  0.649899     -0.430939      -10.3733       10.3733       309.752       320.126    
  45  0.102708      -2.27587      -54.7833       54.7833       326.285       381.068    
  46  0.152702      -1.87927      -45.2366       45.2366       335.383       380.619    
  47  0.827734     -0.189064      -4.55103       4.55103       321.315       325.866    
  48  0.558329     -0.582808      -14.0290       14.0290       318.875       332.904    
  49  0.174746      -1.74442      -41.9907       41.9907       319.480       361.471    
  50  0.107247      -2.23262      -53.7424       53.7424       326.099       379.841    
  51  0.988891     -0.111711E-01 -0.268903      0.268903       348.303       348.572    
  52  0.388651     -0.945075      -22.7493       22.7493       323.311       346.061    
  53  0.580190     -0.544399      -13.1044       13.1044       326.333       339.437    
  54  0.519409E-01  -2.95765      -71.1947       71.1947       326.229       397.424    
  55  0.418368     -0.871393      -20.9757       20.9757       320.415       341.391    
  56  0.435950     -0.830228      -19.9847       19.9847       314.938       334.923    
  57  0.226091      -1.48682      -35.7898       35.7898       324.833       360.623    
  58  0.371316     -0.990702      -23.8476       23.8476       324.811       348.658    
  59  0.113770      -2.17358      -52.3211       52.3211       324.169       376.490    
  60  0.335886      -1.09098      -26.2615       26.2615       321.570       347.832    
  61  0.733883     -0.309406      -7.44783       7.44783       383.653       391.101    
  62  0.127704      -2.05804      -49.5400       49.5400       330.093       379.633    
  63  0.205687      -1.58140      -38.0665       38.0665       304.687       342.753    
  64  0.315213      -1.15451      -27.7906       27.7906       302.687       330.478    
loop,thermsimp(1:2)       73   7.18599       4.67539    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    197        298.68          0.86          1.10         23.16          0.00          0.04         25.16
Just calling func    0   0         25.16


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    198        282.49          0.87          1.09         23.16          0.04          0.04         25.20
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    282.49
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    24.0714               253
loop is:       73
neval is:      197
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       73      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    24.0714               253
loop is:       74
neval is:      197


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      253
neval,tstepnext:      197     253

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.835960     -0.179175      -4.31299       4.31299       292.110       296.423    
   2  0.439366     -0.822423      -19.7969       19.7969       298.353       318.150    
   3  0.603094     -0.505682      -12.1725       12.1725       295.636       307.808    
   4  0.695854E-01  -2.66520      -64.1551       64.1551       304.685       368.840    
   5  0.273021      -1.29821      -31.2497       31.2497       305.577       336.827    
   6  0.418319     -0.871511      -20.9785       20.9785       309.825       330.803    
   7  0.688437     -0.373331      -8.98660       8.98660       304.814       313.801    
   8  0.400930     -0.913969      -22.0005       22.0005       311.637       333.637    
   9  0.569492     -0.563010      -13.5524       13.5524       309.584       323.136    
  10  0.812441     -0.207712      -4.99991       4.99991       310.095       315.095    
  11  0.222094      -1.50465      -36.2191       36.2191       302.517       338.736    
  12  0.695761     -0.362749      -8.73188       8.73188       311.913       320.645    
  13  0.909536E-01  -2.39741      -57.7089       57.7089       310.037       367.746    
  14  0.297191      -1.21338      -29.2077       29.2077       309.752       338.960    
  15  0.806729     -0.214767      -5.16975       5.16975       318.706       323.876    
  16  0.407021     -0.898891      -21.6375       21.6375       316.394       338.032    
  17  0.520426     -0.653107      -15.7212       15.7212       320.138       335.859    
  18  0.826852     -0.190129      -4.57667       4.57667       298.574       303.150    
  19  0.729268     -0.315714      -7.59968       7.59968       316.751       324.351    
  20  0.344086      -1.06687      -25.6809       25.6809       321.315       346.996    
  21  0.280849      -1.26994      -30.5692       30.5692       294.455       325.024    
  22  0.301244E-01  -3.50242      -84.3081       84.3081       325.466       409.774    
  23  0.503253     -0.686663      -16.5289       16.5289       304.975       321.503    
  24  0.549007     -0.599644      -14.4343       14.4343       321.980       336.414    
  25  0.814230     -0.205513      -4.94698       4.94698       302.687       307.634    
  26  0.641489     -0.443963      -10.6868       10.6868       314.778       325.465    
  27  0.248696      -1.39152      -33.4959       33.4959       318.875       352.371    
  28  0.684472     -0.379107      -9.12563       9.12563       319.349       328.475    
  29  0.815126     -0.204413      -4.92050       4.92050       314.938       319.858    
  30  0.388210     -0.946208      -22.7765       22.7765       318.584       341.360    
  31  0.670538     -0.399675      -9.62073       9.62073       325.176       334.796    
  32  0.851104     -0.161221      -3.88081       3.88081       291.268       295.149    
  33  0.381078     -0.964752      -23.2229       23.2229       326.333       349.555    
  34  0.776256     -0.253273      -6.09663       6.09663       320.415       326.512    
  35  0.168040      -1.78355      -42.9326       42.9326       325.382       368.314    
  36  0.229069      -1.47373      -35.4747       35.4747       308.487       343.961    
  37  0.917563     -0.860337E-01  -2.07095       2.07095       304.687       306.758    
  38  0.161815      -1.82130      -43.8413       43.8413       331.399       375.241    
  39  0.355170      -1.03516      -24.9177       24.9177       306.186       331.103    
  40  0.221709      -1.50639      -36.2609       36.2609       323.311       359.572    
  41  0.424436     -0.856993      -20.6290       20.6290       307.638       328.267    
  42  0.337698      -1.08560      -26.1320       26.1320       321.570       347.702    
  43  0.574481     -0.554289      -13.3425       13.3425       348.303       361.646    
  44  0.614536     -0.486888      -11.7201       11.7201       324.811       336.531    
  45  0.345602      -1.06247      -25.5751       25.5751       316.129       341.704    
  46  0.330006      -1.10864      -26.6866       26.6866       305.352       332.039    
  47  0.934389     -0.678626E-01  -1.63355       1.63355       308.719       310.353    
  48  0.884466     -0.122771      -2.95527       2.95527       324.833       327.788    
  49  0.928979     -0.736686E-01  -1.77331       1.77331       311.734       313.507    
  50  0.788461     -0.237672      -5.72109       5.72109       319.480       325.201    
  51  0.963462     -0.372219E-01 -0.895983      0.895983       314.547       315.443    
  52  0.630201     -0.461716      -11.1141       11.1141       324.389       335.503    
  53  0.797085     -0.226794      -5.45924       5.45924       319.650       325.109    
  54  0.389249     -0.943537      -22.7122       22.7122       311.308       334.020    
  55  0.660522     -0.414724      -9.98299       9.98299       324.169       334.152    
  56  0.520011     -0.653905      -15.7404       15.7404       330.093       345.834    
  57  0.270094      -1.30899      -31.5091       31.5091       326.099       357.608    
  58  0.218485      -1.52104      -36.6135       36.6135       335.383       371.996    
  59  0.391194     -0.938551      -22.5922       22.5922       326.285       348.877    
  60  0.740024     -0.301073      -7.24724       7.24724       323.294       330.542    
  61  0.184403      -1.69063      -40.6959       40.6959       316.644       357.339    
  62  0.309007E-01  -3.47698      -83.6956       83.6956       383.653       467.349    
  63  0.916682     -0.869952E-01  -2.09409       2.09409       326.229       328.323    
  64  0.268894      -1.31344      -31.6163       31.6163       282.492       314.108    
loop,thermsimp(1:2)       74   4.31299       19.7969    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    199        297.62          0.88          1.09         23.16          0.00          0.04         25.17
Just calling func    0   0         25.18


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    200        693.94          0.88          1.09         23.14          0.00          0.04         25.15
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    297.62
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    24.0714               253
loop is:       74
neval is:      199
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       74      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    24.0714               253
loop is:       75
neval is:      199


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      253
neval,tstepnext:      199     253

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.374776     -0.981426      -23.6243       23.6243       291.268       314.892    
   2  0.269095      -1.31269      -31.5983       31.5983       292.110       323.708    
   3  0.301960      -1.19746      -28.8245       28.8245       298.574       327.398    
   4  0.927593     -0.751619E-01  -1.80925       1.80925       304.687       306.496    
   5  0.783450     -0.244048      -5.87457       5.87457       302.687       308.562    
   6  0.716705     -0.333091      -8.01797       8.01797       295.636       303.654    
   7  0.728578     -0.316661      -7.62247       7.62247       308.719       316.342    
   8  0.752541     -0.284300      -6.84349       6.84349       311.734       318.577    
   9  0.111710      -2.19185      -52.7608       52.7608       304.814       357.575    
  10  0.202752E-01  -3.89836      -93.8389       93.8389       282.492       376.331    
  11  0.967738     -0.327937E-01 -0.789390      0.789390       310.095       310.885    
  12  0.530869     -0.633240      -15.2430       15.2430       314.547       329.790    
  13  0.752699E-01  -2.58668      -62.2649       62.2649       298.353       360.618    
  14  0.658334     -0.418043      -10.0629       10.0629       314.938       325.001    
  15  0.383542     -0.958305      -23.0677       23.0677       311.913       334.981    
  16  0.280803      -1.27010      -30.5732       30.5732       304.975       335.548    
  17  0.976909     -0.233616E-01 -0.562345      0.562345       309.584       310.146    
  18  0.611898     -0.491189      -11.8236       11.8236       318.706       330.530    
  19  0.860469     -0.150278      -3.61740       3.61740       316.751       320.369    
  20  0.375446     -0.979641      -23.5813       23.5813       294.455       318.036    
  21  0.964573     -0.360702E-01 -0.868260      0.868260       319.650       320.518    
  22  0.865663     -0.144259      -3.47252       3.47252       319.480       322.953    
  23  0.498009     -0.697137      -16.7811       16.7811       314.778       331.559    
  24  0.732547     -0.311228      -7.49169       7.49169       320.415       327.907    
  25  0.293766      -1.22497      -29.4867       29.4867       324.833       354.320    
  26  0.805097     -0.216793      -5.21851       5.21851       307.638       312.856    
  27  0.236791      -1.44058      -34.6767       34.6767       326.229       360.906    
  28  0.759809     -0.274688      -6.61213       6.61213       319.349       325.961    
  29  0.279804      -1.27367      -30.6589       30.6589       323.294       353.953    
  30  0.862550     -0.147862      -3.55925       3.55925       309.825       313.384    
  31  0.784800     -0.242327      -5.83314       5.83314       306.186       312.019    
  32  0.231425      -1.46350      -35.2285       35.2285       305.352       340.581    
  33  0.839725     -0.174681      -4.20482       4.20482       311.637       315.842    
  34  0.204862      -1.58542      -38.1632       38.1632       311.308       349.471    
  35  0.741170     -0.299525      -7.20999       7.20999       324.169       331.379    
  36  0.838703     -0.175898      -4.23411       4.23411       325.176       329.410    
  37  0.287711      -1.24580      -29.9881       29.9881       324.389       354.377    
  38  0.937479     -0.645611E-01  -1.55408       1.55408       320.138       321.692    
  39  0.188655      -1.66783      -40.1471       40.1471       321.980       362.127    
  40  0.818317     -0.200505      -4.82644       4.82644       324.811       329.637    
  41  0.903487     -0.101493      -2.44308       2.44308       305.577       308.020    
  42  0.148828      -1.90496      -45.8552       45.8552       316.394       362.249    
  43  0.573616E-01  -2.85838      -68.8052       68.8052       302.517       371.322    
  44  0.792726E-01  -2.53486      -61.0177       61.0177       309.752       370.770    
  45  0.150401      -1.89445      -45.6021       45.6021       318.584       364.186    
  46  0.511444     -0.670518      -16.1403       16.1403       316.129       332.269    
  47  0.179810      -1.71585      -41.3030       41.3030       308.487       349.790    
  48  0.167282      -1.78808      -43.0415       43.0415       330.093       373.135    
  49  0.589016     -0.529302      -12.7410       12.7410       321.315       334.056    
  50  0.974997     -0.253206E-01 -0.609503      0.609503       321.570       322.180    
  51  0.750240     -0.287363      -6.91722       6.91722       326.285       333.202    
  52  0.695153     -0.363624      -8.75293       8.75293       326.333       335.086    
  53  0.166976      -1.78991      -43.0855       43.0855       318.875       361.960    
  54  0.228686      -1.47540      -35.5150       35.5150       316.644       352.159    
  55  0.728220     -0.317152      -7.63429       7.63429       326.099       333.733    
  56  0.321968      -1.13330      -27.2802       27.2802       323.311       350.592    
  57  0.494283     -0.704647      -16.9618       16.9618       348.303       365.265    
  58  0.398916     -0.919004      -22.1217       22.1217       310.037       332.158    
  59  0.130321      -2.03776      -49.0517       49.0517       325.382       374.433    
  60  0.131470E-01  -4.33156      -104.267       104.267       304.685       408.952    
  61  0.868361E-03  -7.04890      -169.677       169.677       335.383       505.059    
  62  0.572113     -0.558419      -13.4419       13.4419       331.399       344.841    
  63  0.201897      -1.60000      -38.5141       38.5141       325.466       363.980    
  64  0.795960     -0.228206      -5.49324       5.49324       297.624       303.117    
loop,thermsimp(1:2)       75   23.6243       31.5983    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    201        295.17          0.85          1.10         23.15          0.00          0.05         25.15
Just calling func    0   0         25.15


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    202        632.79          0.88          1.09         23.14          0.00          0.05         25.15
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  200    295.17        4.199     -1.015      3.618     -100.0     0.3616    
                     -0.9495      2.282     -100.0      2.404     0.8077    
                       1.123    -0.5074E-01  2.400      0.000      0.000    
                      -1.060      0.000      0.000      0.000     -1.221    

                      -2.500      9486.     0.1372E+05 -716.5     -1978.    
                      -2.000     -5.372     -2.423     -4.980     -2.642    
                      -13.53     -2.482      1359.      0.000      3354.    

                       4764.      3323.      5073.      5329.      2500.    
                       4298.     0.9125E-01-0.5972E-01  0.000    -0.4519E-01
                      0.1279E-01-0.4868E-01 0.8012E-01-0.1056     0.3667E-02

                     -0.9887    -0.8077      0.000     0.2363     0.6757E-01
                      0.8541E-01-0.4496     0.2377E-01 0.7248E-01-0.1587E-01
                     -0.2380E-01 0.5547E-01-0.2036    -0.8077      0.000    

                     -0.9985     -1.890      3.812     -1.082      0.000    
                       0.000      9.093      9.184     -5252.     -4.000    
                     -0.2714    -0.6936E-01  8.961      8.629     -7737.    

                      -4.000     0.3450     0.6576      9.267      9.096    
                      -5400.     -4.000     0.2884     0.2884      9.496    
                       8.896     -4039.     -2.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    295.17
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    24.0714               253
loop is:       75
neval is:      201
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       75      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    24.0714               253
loop is:       76
neval is:      201


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      253
neval,tstepnext:      201     253

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.497287E-01  -3.00117      -72.2424       72.2424       297.624       369.866    
   2  0.604222     -0.503814      -12.1275       12.1275       295.636       307.763    
   3  0.106168      -2.24273      -53.9856       53.9856       304.687       358.672    
   4  0.342113      -1.07261      -25.8193       25.8193       305.577       331.397    
   5  0.473442     -0.747725      -17.9988       17.9988       302.687       320.686    
   6  0.100866E-01  -4.59655      -110.645       110.645       309.584       420.229    
   7  0.911848     -0.922817E-01  -2.22135       2.22135       310.095       312.317    
   8  0.633547     -0.456421      -10.9867       10.9867       306.186       317.172    
   9  0.729024     -0.316048      -7.60772       7.60772       307.638       315.246    
  10  0.620163     -0.477772      -11.5006       11.5006       309.825       321.325    
  11  0.867018     -0.142695      -3.43487       3.43487       291.268       294.703    
  12  0.969344E-01  -2.33372      -56.1759       56.1759       311.637       367.813    
  13  0.358466      -1.02592      -24.6953       24.6953       308.719       333.415    
  14  0.953168     -0.479638E-01  -1.15455       1.15455       294.455       295.609    
  15  0.684510     -0.379052      -9.12430       9.12430       311.734       320.858    
  16  0.482047     -0.729713      -17.5652       17.5652       316.751       334.317    
  17  0.974791     -0.255318E-01 -0.614587      0.614587       319.650       320.264    
  18  0.978669     -0.215619E-01 -0.519026      0.519026       320.138       320.657    
  19  0.929785     -0.728022E-01  -1.75245       1.75245       321.570       323.323    
  20  0.715020     -0.335444      -8.07461       8.07461       319.480       327.555    
  21  0.598247     -0.513752      -12.3667       12.3667       292.110       304.476    
  22  0.107080      -2.23418      -53.7798       53.7798       314.938       368.718    
  23  0.559093     -0.581439      -13.9960       13.9960       319.349       333.345    
  24  0.933094     -0.692491E-01  -1.66692       1.66692       298.574       300.241    
  25  0.470169E-01  -3.05725      -73.5922       73.5922       320.415       394.008    
  26  0.166768      -1.79115      -43.1155       43.1155       325.176       368.291    
  27  0.331277      -1.10480      -26.5941       26.5941       324.811       351.405    
  28  0.961755     -0.389952E-01 -0.938669      0.938669       314.547       315.485    
  29  0.464366E-01  -3.06967      -73.8912       73.8912       318.706       392.597    
  30  0.966136E-03  -6.94221      -167.109       167.109       324.169       491.278    
  31  0.941012     -0.607999E-01  -1.46354       1.46354       314.778       316.241    
  32  0.201947E-01  -3.90233      -93.9346       93.9346       310.037       403.971    
  33  0.679249     -0.386768      -9.31004       9.31004       316.129       325.439    
  34  0.318772      -1.14328      -27.5203       27.5203       326.285       353.805    
  35  0.388100     -0.946493      -22.7834       22.7834       326.099       348.882    
  36  0.658606     -0.417629      -10.0529       10.0529       321.315       331.368    
  37  0.774362     -0.255715      -6.15542       6.15542       311.913       318.069    
  38  0.704871     -0.349740      -8.41872       8.41872       326.333       334.751    
  39  0.274189      -1.29394      -31.1469       31.1469       304.975       336.121    
  40  0.881806     -0.125783      -3.02777       3.02777       305.352       308.380    
  41  0.198448      -1.61723      -38.9289       38.9289       331.399       370.328    
  42  0.342590      -1.07122      -25.7858       25.7858       311.308       337.094    
  43  0.603787     -0.504534      -12.1448       12.1448       308.487       320.632    
  44  0.667409     -0.404353      -9.73334       9.73334       323.311       333.045    
  45  0.317014      -1.14881      -27.6534       27.6534       316.644       344.297    
  46  0.368458     -0.998429      -24.0336       24.0336       323.294       347.328    
  47  0.139912      -1.96674      -47.3422       47.3422       324.833       372.175    
  48  0.537645     -0.620557      -14.9377       14.9377       324.389       339.327    
  49  0.159021      -1.83872      -44.2606       44.2606       304.814       349.075    
  50  0.729011     -0.316067      -7.60817       7.60817       298.353       305.961    
  51  0.802486     -0.220041      -5.29670       5.29670       326.229       331.526    
  52  0.249203      -1.38949      -33.4469       33.4469       318.875       352.322    
  53  0.282362      -1.26456      -30.4398       30.4398       321.980       352.420    
  54  0.803878     -0.218308      -5.25497       5.25497       316.394       321.649    
  55  0.183401      -1.69608      -40.8270       40.8270       325.466       366.293    
  56  0.144999      -1.93103      -46.4826       46.4826       318.584       365.066    
  57  0.821026     -0.197200      -4.74688       4.74688       348.303       353.050    
  58  0.391750     -0.937132      -22.5581       22.5581       309.752       332.310    
  59  0.605745     -0.501297      -12.0669       12.0669       302.517       314.584    
  60  0.759982E-01  -2.57705      -62.0331       62.0331       330.093       392.127    
  61  0.856619     -0.154762      -3.72533       3.72533       325.382       329.107    
  62  0.200085      -1.60901      -38.7312       38.7312       282.492       321.223    
  63  0.623969     -0.471654      -11.3534       11.3534       304.685       316.038    
  64  0.668527     -0.402679      -9.69305       9.69305       295.168       304.861    
loop,thermsimp(1:2)       76   72.2424       12.1275    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    203        296.58          0.88          1.10         23.15          0.00          0.04         25.16
Just calling func    0   0         25.17


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    204        292.28          0.88          1.09         23.12          0.00          0.04         25.14
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    292.28
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    24.0714               253
loop is:       76
neval is:      203
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       76      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    24.0714               253
loop is:       77
neval is:      203


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      253
neval,tstepnext:      203     253

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.596761     -0.516238      -12.4266       12.4266       291.268       303.694    
   2  0.476930     -0.740385      -17.8221       17.8221       294.455       312.277    
   3  0.845382     -0.167966      -4.04318       4.04318       298.574       302.617    
   4  0.397814     -0.921770      -22.1883       22.1883       292.110       314.298    
   5  0.249923      -1.38660      -33.3775       33.3775       295.168       328.545    
   6  0.591552     -0.525005      -12.6376       12.6376       298.353       310.990    
   7  0.143111      -1.94414      -46.7981       46.7981       295.636       342.434    
   8  0.306099      -1.18385      -28.4969       28.4969       305.352       333.849    
   9  0.441827     -0.816836      -19.6624       19.6624       310.095       329.758    
  10  0.504521     -0.684146      -16.4683       16.4683       302.517       318.985    
  11  0.127660      -2.05839      -49.5482       49.5482       307.638       357.186    
  12  0.333524      -1.09804      -26.4314       26.4314       314.547       340.978    
  13  0.130890      -2.03340      -48.9467       48.9467       304.685       353.632    
  14  0.307732      -1.17853      -28.3687       28.3687       314.778       343.147    
  15  0.154434E-01  -4.17057      -100.391       100.391       306.186       406.577    
  16  0.357863      -1.02761      -24.7359       24.7359       311.913       336.649    
  17  0.271898      -1.30233      -31.3488       31.3488       319.650       350.999    
  18  0.906228E-01  -2.40105      -57.7966       57.7966       308.487       366.283    
  19  0.344142      -1.06670      -25.6770       25.6770       320.138       345.815    
  20  0.392886     -0.934237      -22.4884       22.4884       302.687       325.175    
  21  0.454318     -0.788958      -18.9913       18.9913       311.734       330.725    
  22  0.384129     -0.956778      -23.0310       23.0310       282.492       305.523    
  23  0.354037      -1.03835      -24.9946       24.9946       309.825       334.819    
  24  0.154212      -1.86943      -44.9998       44.9998       316.394       361.394    
  25  0.816320     -0.202949      -4.88527       4.88527       321.570       326.456    
  26  0.994970     -0.504291E-02 -0.121390      0.121390       316.129       316.251    
  27  0.374719E-01  -3.28416      -79.0544       79.0544       319.480       398.534    
  28  0.227113      -1.48231      -35.6812       35.6812       325.382       361.063    
  29  0.410587     -0.890167      -21.4276       21.4276       321.315       342.742    
  30  0.104540E-01  -4.56077      -109.784       109.784       305.577       415.361    
  31  0.994826     -0.518730E-02 -0.124865      0.124865       326.229       326.354    
  32  0.738930     -0.302553      -7.28286       7.28286       309.752       317.035    
  33  0.715904     -0.334209      -8.04487       8.04487       323.311       331.356    
  34  0.128324      -2.05320      -49.4233       49.4233       319.349       368.773    
  35  0.856095     -0.155374      -3.74006       3.74006       308.719       312.460    
  36  0.423967     -0.858099      -20.6556       20.6556       316.751       337.407    
  37  0.504650     -0.683890      -16.4622       16.4622       326.333       342.795    
  38  0.347036      -1.05833      -25.4754       25.4754       304.975       330.450    
  39  0.906779     -0.978566E-01  -2.35554       2.35554       311.308       313.664    
  40  0.616911     -0.483030      -11.6272       11.6272       324.389       336.016    
  41  0.540209     -0.615800      -14.8232       14.8232       316.644       331.467    
  42  0.772932     -0.257564      -6.19992       6.19992       323.294       329.494    
  43  0.544989     -0.606989      -14.6111       14.6111       326.099       340.710    
  44  0.951523     -0.496917E-01  -1.19615       1.19615       304.814       306.010    
  45  0.172505      -1.75733      -42.3014       42.3014       324.811       367.112    
  46  0.871391     -0.137665      -3.31378       3.31378       318.875       322.189    
  47  0.127604      -2.05882      -49.5587       49.5587       321.980       371.539    
  48  0.785934     -0.240882      -5.79838       5.79838       348.303       354.102    
  49  0.815977     -0.203369      -4.89538       4.89538       326.285       331.180    
  50  0.350587      -1.04815      -25.2303       25.2303       304.687       329.917    
  51  0.739645     -0.301584      -7.25956       7.25956       318.584       325.843    
  52  0.996274     -0.373345E-02 -0.898693E-01  0.898693E-01   325.466       325.555    
  53  0.303822      -1.19131      -28.6766       28.6766       311.637       340.313    
  54  0.708260     -0.344944      -8.30329       8.30329       325.176       333.479    
  55  0.646268     -0.436541      -10.5081       10.5081       314.938       325.446    
  56  0.696585     -0.361566      -8.70340       8.70340       297.624       306.327    
  57  0.439732     -0.821591      -19.7768       19.7768       331.399       351.176    
  58  0.791452     -0.233886      -5.62996       5.62996       324.833       330.463    
  59  0.202743      -1.59581      -38.4135       38.4135       330.093       368.507    
  60  0.547790E-01  -2.90445      -69.9141       69.9141       318.706       388.620    
  61  0.663631     -0.410029      -9.86996       9.86996       320.415       330.285    
  62  0.838292     -0.176388      -4.24591       4.24591       310.037       314.283    
  63  0.450238     -0.797979      -19.2085       19.2085       309.584       328.792    
  64  0.209610      -1.56251      -37.6117       37.6117       292.278       329.890    
loop,thermsimp(1:2)       77   12.4266       17.8221    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    205        319.43          0.87          1.11         23.07          0.08          0.05         25.17
Just calling func    0   0         25.18


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    319.43
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    24.0714               253
loop is:       77
neval is:      204
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       77      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    24.0714               253
loop is:       78
neval is:      204


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      253
neval,tstepnext:      204     253

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.941883     -0.598737E-01  -1.44124       1.44124       298.574       300.015    
   2  0.368209     -0.999105      -24.0498       24.0498       291.268       315.318    
   3  0.508630     -0.676034      -16.2731       16.2731       282.492       298.765    
   4  0.744324     -0.295279      -7.10778       7.10778       304.814       311.922    
   5  0.401586     -0.912333      -21.9611       21.9611       297.624       319.585    
   6  0.712794     -0.338563      -8.14969       8.14969       298.353       306.502    
   7  0.186976      -1.67678      -40.3623       40.3623       294.455       334.817    
   8  0.688451     -0.373311      -8.98612       8.98612       308.719       317.706    
   9  0.668652     -0.402492      -9.68854       9.68854       311.308       320.997    
  10  0.656767     -0.420426      -10.1202       10.1202       310.037       320.157    
  11  0.853336     -0.158602      -3.81778       3.81778       292.110       295.927    
  12  0.556440     -0.586195      -14.1105       14.1105       316.129       330.240    
  13  0.258558E-01  -3.65522      -87.9862       87.9862       309.752       397.739    
  14  0.121003E-01  -4.41452      -106.264       106.264       302.517       408.781    
  15  0.150890      -1.89120      -45.5238       45.5238       318.875       364.399    
  16  0.820074     -0.198360      -4.77481       4.77481       302.687       307.462    
  17  0.151452      -1.88748      -45.4344       45.4344       314.938       360.372    
  18  0.305465      -1.18592      -28.5468       28.5468       325.466       354.012    
  19  0.533202     -0.628854      -15.1374       15.1374       318.584       333.721    
  20  0.143416      -1.94201      -46.7468       46.7468       326.229       372.976    
  21  0.687081     -0.375303      -9.03406       9.03406       321.570       330.604    
  22  0.546247     -0.604685      -14.5556       14.5556       295.168       309.723    
  23  0.356987      -1.03006      -24.7949       24.7949       309.584       334.379    
  24  0.545718     -0.605653      -14.5789       14.5789       323.294       337.873    
  25  0.789688     -0.236117      -5.68366       5.68366       310.095       315.779    
  26  0.752086     -0.284904      -6.85805       6.85805       292.278       299.136    
  27  0.388816     -0.944650      -22.7390       22.7390       304.687       327.426    
  28  0.988428     -0.116395E-01 -0.280180      0.280180       320.415       320.696    
  29  0.124991      -2.07952      -50.0569       50.0569       304.975       355.031    
  30  0.568214     -0.565257      -13.6065       13.6065       324.833       338.440    
  31  0.551032     -0.595962      -14.3456       14.3456       311.734       326.080    
  32  0.423622     -0.858913      -20.6752       20.6752       326.285       346.960    
  33  0.647554     -0.434553      -10.4603       10.4603       323.311       333.772    
  34  0.686255     -0.376506      -9.06303       9.06303       316.644       325.707    
  35  0.548072     -0.601349      -14.4753       14.4753       325.176       339.651    
  36  0.880777     -0.126951      -3.05589       3.05589       305.352       308.408    
  37  0.894918     -0.111023      -2.67247       2.67247       309.825       312.497    
  38  0.241077      -1.42264      -34.2449       34.2449       324.389       358.634    
  39  0.546141     -0.604877      -14.5602       14.5602       311.913       326.473    
  40  0.266590      -1.32204      -31.8234       31.8234       316.751       348.575    
  41  0.575085     -0.553238      -13.3172       13.3172       311.637       324.954    
  42  0.907139     -0.974596E-01  -2.34599       2.34599       326.099       328.445    
  43  0.469109     -0.756920      -18.2201       18.2201       314.547       332.767    
  44  0.738008     -0.303801      -7.31291       7.31291       295.636       302.949    
  45  0.557598     -0.584116      -14.0605       14.0605       321.315       335.375    
  46  0.305677      -1.18523      -28.5300       28.5300       326.333       354.863    
  47  0.392927     -0.934131      -22.4858       22.4858       314.778       337.264    
  48  0.121997      -2.10376      -50.6403       50.6403       320.138       370.778    
  49  0.712082     -0.339563      -8.17375       8.17375       319.650       327.824    
  50  0.342132      -1.07256      -25.8179       25.8179       331.399       357.217    
  51  0.288307      -1.24373      -29.9383       29.9383       304.685       334.623    
  52  0.554777     -0.589188      -14.1826       14.1826       348.303       362.486    
  53  0.116597E-01  -4.45161      -107.157       107.157       307.638       414.795    
  54  0.844148     -0.169427      -4.07834       4.07834       325.382       329.460    
  55  0.910896     -0.933267E-01  -2.24650       2.24650       316.394       318.641    
  56  0.257100      -1.35829      -32.6960       32.6960       308.487       341.183    
  57  0.340199      -1.07823      -25.9544       25.9544       324.811       350.765    
  58  0.656010     -0.421580      -10.1480       10.1480       330.093       340.241    
  59  0.894739     -0.111224      -2.67731       2.67731       319.349       322.027    
  60  0.226933      -1.48310      -35.7003       35.7003       321.980       357.680    
  61  0.478182     -0.737763      -17.7590       17.7590       318.706       336.465    
  62  0.361863      -1.01649      -24.4683       24.4683       319.480       343.948    
  63  0.415757     -0.877654      -21.1264       21.1264       306.186       327.312    
  64  0.540919     -0.614487      -14.7915       14.7915       319.432       334.224    
loop,thermsimp(1:2)       78   1.44124       24.0498    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    206        308.58          0.88          1.10         23.08          0.02          0.04         25.12
Just calling func    0   0         25.12


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    207        310.06          0.88          1.10         23.10          0.20          0.05         25.33
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    308.58
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    24.0714               253
loop is:       78
neval is:      206
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       78      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    24.0714               253
loop is:       79
neval is:      206


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      253
neval,tstepnext:      206     253

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.708826E-01  -2.64673      -63.7105       63.7105       292.110       355.820    
   2  0.952063     -0.491245E-01  -1.18249       1.18249       282.492       283.674    
   3  0.207928      -1.57057      -37.8057       37.8057       292.278       330.084    
   4  0.564009     -0.572686      -13.7853       13.7853       298.574       312.359    
   5  0.461636     -0.772979      -18.6067       18.6067       295.636       314.243    
   6  0.683812     -0.380072      -9.14885       9.14885       298.353       307.502    
   7  0.153569      -1.87360      -45.1002       45.1002       302.687       347.787    
   8  0.605650     -0.501453      -12.0707       12.0707       305.352       317.423    
   9  0.257296      -1.35753      -32.6776       32.6776       295.168       327.845    
  10  0.517987     -0.657805      -15.8343       15.8343       304.814       320.648    
  11  0.571129     -0.560140      -13.4834       13.4834       309.825       323.308    
  12  0.735134     -0.307703      -7.40684       7.40684       291.268       298.675    
  13  0.766340E-02  -4.87130      -117.259       117.259       310.095       427.354    
  14  0.435932     -0.830269      -19.9857       19.9857       308.719       328.705    
  15  0.513945     -0.665639      -16.0229       16.0229       316.394       332.417    
  16  0.447046     -0.805095      -19.3797       19.3797       297.624       317.003    
  17  0.244813      -1.40726      -33.8747       33.8747       310.037       343.911    
  18  0.183933      -1.69318      -40.7573       40.7573       320.415       361.173    
  19  0.413164     -0.883910      -21.2769       21.2769       311.308       332.585    
  20  0.869613     -0.139707      -3.36295       3.36295       319.349       322.712    
  21  0.853260     -0.158691      -3.81990       3.81990       311.637       315.457    
  22  0.138067      -1.98001      -47.6617       47.6617       316.644       364.305    
  23  0.940528     -0.613134E-01  -1.47590       1.47590       311.734       313.210    
  24  0.694939     -0.363931      -8.76033       8.76033       311.913       320.673    
  25  0.962776     -0.379346E-01 -0.913139      0.913139       306.186       307.099    
  26  0.378266     -0.972158      -23.4012       23.4012       304.687       328.088    
  27  0.855922     -0.155576      -3.74493       3.74493       319.650       323.395    
  28  0.393452     -0.932797      -22.4537       22.4537       326.099       348.552    
  29  0.253590      -1.37204      -33.0269       33.0269       325.382       358.409    
  30  0.777948     -0.251096      -6.04423       6.04423       316.129       322.173    
  31  0.654890     -0.423288      -10.1891       10.1891       321.570       331.760    
  32  0.690016E-01  -2.67363      -64.3579       64.3579       314.547       378.905    
  33  0.101034      -2.29229      -55.1787       55.1787       318.584       373.762    
  34  0.684533     -0.379019      -9.12351       9.12351       323.311       332.435    
  35  0.592603     -0.523230      -12.5949       12.5949       319.432       332.027    
  36  0.904830     -0.100009      -2.40735       2.40735       309.584       311.991    
  37  0.400244     -0.915681      -22.0417       22.0417       304.685       326.727    
  38  0.698191     -0.359263      -8.64796       8.64796       294.455       303.103    
  39  0.551449E-01  -2.89779      -69.7539       69.7539       321.315       391.069    
  40  0.500493     -0.692161      -16.6613       16.6613       318.706       335.367    
  41  0.289592      -1.23928      -29.8313       29.8313       314.778       344.609    
  42  0.447163     -0.804833      -19.3735       19.3735       323.294       342.668    
  43  0.690940     -0.369702      -8.89923       8.89923       324.833       333.732    
  44  0.631068     -0.460341      -11.0811       11.0811       325.176       336.257    
  45  0.926041     -0.768363E-01  -1.84956       1.84956       330.093       331.943    
  46  0.436187     -0.829684      -19.9717       19.9717       308.487       328.458    
  47  0.314139      -1.15792      -27.8727       27.8727       319.480       347.353    
  48  0.363110      -1.01305      -24.3855       24.3855       326.285       350.670    
  49  0.446982     -0.805238      -19.3832       19.3832       316.751       336.135    
  50  0.541529     -0.613360      -14.7644       14.7644       324.811       339.575    
  51  0.415529     -0.878202      -21.1395       21.1395       325.466       346.605    
  52  0.559792     -0.580190      -13.9660       13.9660       326.333       340.299    
  53  0.931332     -0.711389E-01  -1.71241       1.71241       304.975       306.687    
  54  0.653342     -0.425655      -10.2461       10.2461       331.399       341.646    
  55  0.254324E-01  -3.67173      -88.3837       88.3837       321.980       410.364    
  56  0.365877      -1.00546      -24.2028       24.2028       324.389       348.592    
  57  0.187661      -1.67312      -40.2742       40.2742       314.938       355.212    
  58  0.592744     -0.522993      -12.5892       12.5892       348.303       360.892    
  59  0.211036      -1.55573      -37.4485       37.4485       318.875       356.323    
  60  0.718956     -0.329955      -7.94247       7.94247       320.138       328.080    
  61  0.170082      -1.77147      -42.6419       42.6419       326.229       368.871    
  62  0.190051      -1.66046      -39.9697       39.9697       309.752       349.722    
  63  0.275889      -1.28776      -30.9981       30.9981       302.517       333.515    
  64  0.670664     -0.399487      -9.61621       9.61621       308.583       318.199    
loop,thermsimp(1:2)       79   63.7105       1.18249    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    208        330.11          0.88          1.11         23.09          0.12          0.05         25.25
Just calling func    0   0         25.25


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    330.11
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    24.0714               253
loop is:       79
neval is:      207
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       79      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    24.0714               253
loop is:       80
neval is:      207


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      253
neval,tstepnext:      207     253

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.668425     -0.402832      -9.69672       9.69672       282.492       292.189    
   2  0.238500      -1.43339      -34.5036       34.5036       291.268       325.771    
   3  0.689211     -0.372208      -8.95957       8.95957       294.455       303.414    
   4  0.540774     -0.614753      -14.7980       14.7980       304.975       319.772    
   5  0.178857      -1.72117      -41.4310       41.4310       306.186       347.617    
   6  0.884253     -0.123012      -2.96108       2.96108       298.353       301.314    
   7  0.755546     -0.280314      -6.74756       6.74756       309.584       316.331    
   8  0.654086E-01  -2.72710      -65.6451       65.6451       298.574       364.219    
   9  0.802958     -0.219452      -5.28252       5.28252       311.734       317.016    
  10  0.840665     -0.173562      -4.17787       4.17787       295.636       299.814    
  11  0.864930     -0.145107      -3.49292       3.49292       311.637       315.130    
  12  0.728243     -0.317120      -7.63352       7.63352       297.624       305.257    
  13  0.453086     -0.791672      -19.0567       19.0567       305.352       324.409    
  14  0.702549E-01  -2.65563      -63.9246       63.9246       308.583       372.508    
  15  0.610595     -0.493321      -11.8749       11.8749       304.814       316.689    
  16  0.728410E-02  -4.92206      -118.481       118.481       311.913       430.394    
  17  0.913763     -0.901841E-01  -2.17086       2.17086       316.129       318.300    
  18  0.165001      -1.80180      -43.3719       43.3719       319.349       362.721    
  19  0.917747E-01  -2.38842      -57.4926       57.4926       309.825       367.317    
  20  0.338507      -1.08321      -26.0744       26.0744       319.650       345.724    
  21  0.357666      -1.02815      -24.7491       24.7491       304.685       329.434    
  22  0.389441     -0.943044      -22.7004       22.7004       295.168       317.868    
  23  0.879897     -0.127950      -3.07994       3.07994       320.138       323.218    
  24  0.418897     -0.870129      -20.9452       20.9452       304.687       325.632    
  25  0.838426     -0.176230      -4.24209       4.24209       308.487       312.729    
  26  0.185169      -1.68649      -40.5960       40.5960       308.719       349.316    
  27  0.200952      -1.60469      -38.6270       38.6270       292.278       330.905    
  28  0.877256     -0.130957      -3.15231       3.15231       321.570       324.723    
  29  0.386592     -0.950385      -22.8771       22.8771       330.093       352.971    
  30  0.888706     -0.117988      -2.84014       2.84014       319.432       322.272    
  31  0.105408      -2.24991      -54.1586       54.1586       316.394       370.553    
  32  0.994268     -0.574873E-02 -0.138380      0.138380       323.311       323.450    
  33  0.764077     -0.269087      -6.47729       6.47729       311.308       317.785    
  34  0.812108     -0.208121      -5.00977       5.00977       302.517       307.527    
  35  0.121669      -2.10645      -50.7053       50.7053       324.833       375.538    
  36  0.637909     -0.449559      -10.8215       10.8215       318.706       329.528    
  37  0.316007E-02  -5.75716      -138.583       138.583       316.751       455.334    
  38  0.229677      -1.47108      -35.4110       35.4110       325.176       360.587    
  39  0.521374     -0.651288      -15.6774       15.6774       324.811       340.488    
  40  0.391402     -0.938019      -22.5794       22.5794       326.333       348.912    
  41  0.327357      -1.11670      -26.8806       26.8806       331.399       358.280    
  42  0.963139     -0.375576E-01 -0.904065      0.904065       323.294       324.198    
  43  0.174261      -1.74720      -42.0575       42.0575       310.037       352.094    
  44  0.331602      -1.10382      -26.5705       26.5705       314.778       341.348    
  45  0.526338     -0.641812      -15.4493       15.4493       325.466       340.915    
  46  0.413265     -0.883667      -21.2711       21.2711       319.480       340.751    
  47  0.541510E-02  -5.21856      -125.618       125.618       302.687       428.305    
  48  0.781613     -0.246396      -5.93108       5.93108       326.099       332.030    
  49  0.656825     -0.420337      -10.1181       10.1181       324.389       334.507    
  50  0.584791     -0.536501      -12.9143       12.9143       309.752       322.667    
  51  0.811204     -0.209236      -5.03660       5.03660       326.285       331.321    
  52  0.421027     -0.865059      -20.8232       20.8232       314.938       335.761    
  53  0.663739     -0.409866      -9.86605       9.86605       292.110       301.976    
  54  0.164765      -1.80323      -43.4064       43.4064       318.875       362.281    
  55  0.883187E-01  -2.42680      -58.4165       58.4165       325.382       383.798    
  56  0.825424     -0.191858      -4.61829       4.61829       348.303       352.922    
  57  0.201966E-01  -3.90224      -93.9324       93.9324       320.415       414.348    
  58  0.174898      -1.74355      -41.9697       41.9697       316.644       358.613    
  59  0.477008     -0.740222      -17.8182       17.8182       326.229       344.047    
  60  0.162167E-01  -4.12171      -99.2154       99.2154       318.584       417.799    
  61  0.378219     -0.972282      -23.4042       23.4042       314.547       337.951    
  62  0.980713     -0.194752E-01 -0.468796      0.468796       321.315       321.783    
  63  0.232487      -1.45892      -35.1182       35.1182       321.980       357.098    
  64  0.962055     -0.386832E-01 -0.931158      0.931158       330.113       331.044    
loop,thermsimp(1:2)       80   9.69672       34.5036    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    209        297.45          0.88          1.09         23.11          0.02          0.05         25.15
Just calling func    0   0         25.15


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    210        287.24          0.85          1.09         23.14          0.02          0.05         25.14
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    287.24
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    24.0714               253
loop is:       80
neval is:      209
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       80      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    24.0714               253
loop is:       81
neval is:      209


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      253
neval,tstepnext:      209     253

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.270023      -1.30925      -31.5154       31.5154       282.492       314.007    
   2  0.879265     -0.128669      -3.09723       3.09723       295.636       298.733    
   3  0.684902     -0.378479      -9.11052       9.11052       298.353       307.463    
   4  0.893896     -0.112166      -2.69998       2.69998       292.110       294.810    
   5  0.476761     -0.740739      -17.8306       17.8306       294.455       312.285    
   6  0.755167     -0.280817      -6.75965       6.75965       297.624       304.383    
   7  0.452407     -0.793173      -19.0928       19.0928       302.517       321.610    
   8  0.723906     -0.323093      -7.77730       7.77730       308.487       316.264    
   9  0.451260     -0.795711      -19.1539       19.1539       311.637       330.791    
  10  0.668265     -0.403071      -9.70248       9.70248       309.584       319.286    
  11  0.777249     -0.251995      -6.06587       6.06587       304.814       310.880    
  12  0.342240      -1.07224      -25.8104       25.8104       311.734       337.544    
  13  0.639156     -0.447606      -10.7745       10.7745       311.308       322.083    
  14  0.166924      -1.79022      -43.0930       43.0930       295.168       338.261    
  15  0.375260     -0.980137      -23.5933       23.5933       316.129       339.722    
  16  0.299730      -1.20487      -29.0030       29.0030       304.975       333.977    
  17  0.407119     -0.898650      -21.6318       21.6318       321.315       342.946    
  18  0.762992E-01  -2.57309      -61.9379       61.9379       319.432       381.370    
  19  0.281066      -1.26917      -30.5506       30.5506       309.752       340.303    
  20  0.220512      -1.51180      -36.3912       36.3912       320.138       356.529    
  21  0.389846     -0.942004      -22.6753       22.6753       323.311       345.987    
  22  0.660048     -0.415443      -10.0003       10.0003       323.294       333.295    
  23  0.150026      -1.89695      -45.6622       45.6622       305.352       351.014    
  24  0.113767      -2.17360      -52.3216       52.3216       321.570       373.892    
  25  0.810589     -0.209994      -5.05485       5.05485       304.687       309.741    
  26  0.247911      -1.39468      -33.5720       33.5720       291.268       324.840    
  27  0.408875     -0.894345      -21.5281       21.5281       304.685       326.213    
  28  0.310528      -1.16948      -28.1510       28.1510       318.706       346.857    
  29  0.663027     -0.410939      -9.89188       9.89188       292.278       302.170    
  30  0.798362     -0.225193      -5.42070       5.42070       330.113       335.533    
  31  0.564885     -0.571133      -13.7480       13.7480       326.285       340.033    
  32  0.473510E-02  -5.35275      -128.848       128.848       326.099       454.947    
  33  0.933475E-01  -2.37143      -57.0835       57.0835       324.389       381.472    
  34  0.931702     -0.707423E-01  -1.70287       1.70287       314.938       316.641    
  35  0.341741      -1.07370      -25.8455       25.8455       314.547       340.392    
  36  0.171330      -1.76417      -42.4659       42.4659       324.811       367.277    
  37  0.355860      -1.03322      -24.8710       24.8710       319.480       344.351    
  38  0.469639     -0.755790      -18.1929       18.1929       325.466       343.659    
  39  0.805376     -0.216446      -5.21015       5.21015       314.778       319.988    
  40  0.651615     -0.428301      -10.3098       10.3098       326.229       336.539    
  41  0.126831      -2.06490      -49.7049       49.7049       319.650       369.355    
  42  0.715737     -0.334442      -8.05049       8.05049       306.186       314.236    
  43  0.444007     -0.811915      -19.5439       19.5439       326.333       345.876    
  44  0.887105     -0.119791      -2.88354       2.88354       308.719       311.603    
  45  0.492139     -0.708993      -17.0664       17.0664       310.037       327.103    
  46  0.590315     -0.527098      -12.6880       12.6880       348.303       360.991    
  47  0.313130      -1.16114      -27.9502       27.9502       330.093       358.044    
  48  0.824070     -0.193500      -4.65782       4.65782       321.980       326.638    
  49  0.785026     -0.242039      -5.82622       5.82622       331.399       337.226    
  50  0.105781      -2.24638      -54.0735       54.0735       316.644       370.717    
  51  0.644933     -0.438608      -10.5579       10.5579       325.176       335.734    
  52  0.656932     -0.420175      -10.1142       10.1142       318.875       328.989    
  53  0.418239     -0.871703      -20.9831       20.9831       319.349       340.332    
  54  0.191132      -1.65479      -39.8331       39.8331       298.574       338.407    
  55  0.493587     -0.706055      -16.9957       16.9957       309.825       326.820    
  56  0.490289     -0.712761      -17.1571       17.1571       316.394       333.551    
  57  0.703124     -0.352222      -8.47848       8.47848       308.583       317.061    
  58  0.514219E-01  -2.96769      -71.4364       71.4364       324.833       396.270    
  59  0.967122     -0.334307E-01 -0.804724      0.804724       325.382       326.187    
  60  0.164565      -1.80445      -43.4356       43.4356       320.415       363.851    
  61  0.787129     -0.239363      -5.76180       5.76180       318.584       324.346    
  62  0.877224     -0.130993      -3.15319       3.15319       302.687       305.840    
  63  0.826666     -0.190355      -4.58210       4.58210       311.913       316.495    
  64  0.478850     -0.736368      -17.7254       17.7254       287.238       304.963    
loop,thermsimp(1:2)       81   31.5154       3.09723    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    211        295.19          0.88          1.09         23.12          0.02          0.04         25.15
Just calling func    0   0         25.15


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    212        286.09          0.87          1.09         23.12          0.05          0.04         25.16
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    286.09
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    24.0714               253
loop is:       81
neval is:      211
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       81      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    24.0714               253
loop is:       82
neval is:      211


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      253
neval,tstepnext:      211     253

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.130014E-01  -4.34270      -104.535       104.535       292.110       396.644    
   2  0.906957E-01  -2.40025      -57.7772       57.7772       295.636       353.413    
   3  0.973677     -0.266758E-01 -0.642125      0.642125       292.278       292.920    
   4  0.764409     -0.268653      -6.46684       6.46684       297.624       304.091    
   5  0.647718     -0.434300      -10.4542       10.4542       287.238       297.692    
   6  0.450945     -0.796410      -19.1707       19.1707       302.687       321.858    
   7  0.342138      -1.07254      -25.8175       25.8175       298.353       324.170    
   8  0.491560     -0.710170      -17.0948       17.0948       304.687       321.781    
   9  0.728901     -0.316218      -7.61180       7.61180       304.814       312.426    
  10  0.361124      -1.01853      -24.5175       24.5175       308.719       333.237    
  11  0.187026      -1.67651      -40.3559       40.3559       294.455       334.811    
  12  0.560514     -0.578901      -13.9350       13.9350       282.492       296.427    
  13  0.218776      -1.51971      -36.5814       36.5814       306.186       342.767    
  14  0.109271      -2.21392      -53.2921       53.2921       308.487       361.779    
  15  0.263420E-01  -3.63659      -87.5378       87.5378       311.913       399.451    
  16  0.654642     -0.423667      -10.1983       10.1983       314.938       325.136    
  17  0.975959     -0.243343E-01 -0.585760      0.585760       308.583       309.169    
  18  0.107212      -2.23295      -53.7502       53.7502       309.584       363.334    
  19  0.972340     -0.280494E-01 -0.675188      0.675188       314.778       315.453    
  20  0.259158      -1.35032      -32.5040       32.5040       302.517       335.021    
  21  0.889970     -0.116568      -2.80594       2.80594       311.308       314.114    
  22  0.956672     -0.442943E-01  -1.06622       1.06622       318.584       319.650    
  23  0.299261      -1.20644      -29.0406       29.0406       291.268       320.308    
  24  0.114836      -2.16425      -52.0965       52.0965       325.382       377.478    
  25  0.728848     -0.316291      -7.61356       7.61356       304.685       312.299    
  26  0.650336     -0.430267      -10.3571       10.3571       321.980       332.337    
  27  0.816983     -0.202137      -4.86573       4.86573       309.825       314.690    
  28  0.507860     -0.677550      -16.3096       16.3096       310.037       326.346    
  29  0.920661     -0.826634E-01  -1.98982       1.98982       318.875       320.865    
  30  0.253772      -1.37132      -33.0096       33.0096       311.637       344.646    
  31  0.667512     -0.404198      -9.72960       9.72960       323.294       333.024    
  32  0.772715     -0.257844      -6.20667       6.20667       316.394       322.601    
  33  0.757620     -0.277573      -6.68157       6.68157       304.975       311.656    
  34  0.776421     -0.253060      -6.09151       6.09151       330.113       336.204    
  35  0.886642     -0.120314      -2.89613       2.89613       325.176       328.072    
  36  0.238693E-01  -3.73516      -89.9105       89.9105       326.229       416.139    
  37  0.303957      -1.19087      -28.6659       28.6659       331.399       360.065    
  38  0.875267     -0.133226      -3.20694       3.20694       311.734       314.941    
  39  0.144246      -1.93624      -46.6079       46.6079       295.168       341.775    
  40  0.993963     -0.605564E-02 -0.145768      0.145768       298.574       298.720    
  41  0.172168      -1.75928      -42.3484       42.3484       316.129       358.478    
  42  0.979713     -0.204952E-01 -0.493349      0.493349       326.285       326.778    
  43  0.938694     -0.632658E-01  -1.52290       1.52290       309.752       311.275    
  44  0.716061     -0.333990      -8.03961       8.03961       319.349       327.389    
  45  0.764601     -0.268402      -6.46080       6.46080       314.547       321.008    
  46  0.546951     -0.603396      -14.5246       14.5246       321.315       335.839    
  47  0.104442      -2.25912      -54.3802       54.3802       325.466       379.846    
  48  0.669980     -0.400508      -9.64077       9.64077       319.480       329.121    
  49  0.255048      -1.36630      -32.8888       32.8888       326.333       359.221    
  50  0.761153     -0.272921      -6.56958       6.56958       323.311       329.881    
  51  0.273269      -1.29730      -31.2278       31.2278       318.706       349.934    
  52  0.789047E-01  -2.53951      -61.1296       61.1296       305.352       366.482    
  53  0.723703     -0.323374      -7.78407       7.78407       320.138       327.922    
  54  0.535422     -0.624699      -15.0374       15.0374       330.093       345.131    
  55  0.394266     -0.930730      -22.4040       22.4040       348.303       370.707    
  56  0.334209      -1.09599      -26.3819       26.3819       320.415       346.797    
  57  0.713084     -0.338156      -8.13988       8.13988       324.811       332.951    
  58  0.335811      -1.09121      -26.2668       26.2668       319.650       345.917    
  59  0.877329     -0.130873      -3.15030       3.15030       316.644       319.794    
  60  0.804760     -0.217212      -5.22859       5.22859       321.570       326.799    
  61  0.676806     -0.390371      -9.39677       9.39677       319.432       328.829    
  62  0.139025      -1.97310      -47.4954       47.4954       324.389       371.884    
  63  0.453238     -0.791339      -19.0486       19.0486       324.833       343.882    
  64  0.174629      -1.74509      -42.0068       42.0068       286.088       328.095    
loop,thermsimp(1:2)       82   104.535       57.7772    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    213        316.63          0.88          1.09         23.11          0.01          0.04         25.13
Just calling func    0   0         25.14


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    316.63
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    24.0714               253
loop is:       82
neval is:      212
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       82      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    24.0714               253
loop is:       83
neval is:      212


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      253
neval,tstepnext:      212     253

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.609134     -0.495717      -11.9326       11.9326       292.278       304.211    
   2  0.266275      -1.32323      -31.8519       31.8519       282.492       314.344    
   3  0.545538     -0.605984      -14.5869       14.5869       287.238       301.825    
   4  0.196234      -1.62845      -39.1989       39.1989       298.574       337.773    
   5  0.786411     -0.240275      -5.78376       5.78376       297.624       303.407    
   6  0.453912     -0.789853      -19.0128       19.0128       308.583       327.596    
   7  0.900549     -0.104751      -2.52150       2.52150       309.752       312.274    
   8  0.339919      -1.07905      -25.9742       25.9742       304.975       330.949    
   9  0.511643     -0.670128      -16.1309       16.1309       304.685       320.816    
  10  0.628202     -0.464894      -11.1906       11.1906       304.814       316.005    
  11  0.672886E-01  -2.69876      -64.9630       64.9630       311.308       376.271    
  12  0.518493     -0.656829      -15.8108       15.8108       309.825       325.635    
  13  0.994926     -0.508642E-02 -0.122437      0.122437       311.734       311.856    
  14  0.733191     -0.310349      -7.47053       7.47053       314.778       322.248    
  15  0.952818     -0.483318E-01  -1.16341       1.16341       318.584       319.747    
  16  0.735955     -0.306586      -7.37996       7.37996       316.644       324.024    
  17  0.743149     -0.296859      -7.14581       7.14581       291.268       298.414    
  18  0.549375     -0.598975      -14.4182       14.4182       318.875       333.293    
  19  0.355140      -1.03524      -24.9197       24.9197       314.547       339.466    
  20  0.482165     -0.729469      -17.5593       17.5593       304.687       322.246    
  21  0.577197     -0.549571      -13.2289       13.2289       302.687       315.916    
  22  0.107316E-01  -4.53456      -109.153       109.153       316.394       425.547    
  23  0.923969     -0.790764E-01  -1.90348       1.90348       298.353       300.256    
  24  0.810451     -0.210164      -5.05894       5.05894       314.938       319.997    
  25  0.143346      -1.94249      -46.7585       46.7585       310.037       356.795    
  26  0.994184     -0.583318E-02 -0.140413      0.140413       326.285       326.425    
  27  0.870737     -0.138415      -3.33184       3.33184       321.570       324.902    
  28  0.970691     -0.297469E-01 -0.716050      0.716050       319.349       320.065    
  29  0.351269      -1.04620      -25.1836       25.1836       320.138       345.321    
  30  0.464982     -0.765756      -18.4328       18.4328       325.176       343.609    
  31  0.921785     -0.814432E-01  -1.96045       1.96045       286.088       288.048    
  32  0.110512      -2.20263      -53.0204       53.0204       319.432       372.452    
  33  0.261408      -1.34167      -32.2959       32.2959       319.480       351.776    
  34  0.908908     -0.955118E-01  -2.29910       2.29910       323.311       325.610    
  35  0.819412     -0.199168      -4.79425       4.79425       321.980       326.774    
  36  0.466482     -0.762536      -18.3553       18.3553       324.811       343.166    
  37  0.717237     -0.332349      -8.00010       8.00010       323.294       331.294    
  38  0.802331     -0.220234      -5.30133       5.30133       308.719       314.021    
  39  0.949390     -0.519355E-01  -1.25016       1.25016       294.455       295.705    
  40  0.258511      -1.35282      -32.5642       32.5642       302.517       335.081    
  41  0.270423      -1.30777      -31.4798       31.4798       321.315       352.794    
  42  0.366439      -1.00392      -24.1658       24.1658       330.113       354.278    
  43  0.934403     -0.678476E-01  -1.63319       1.63319       295.168       296.801    
  44  0.956654     -0.443133E-01  -1.06668       1.06668       306.186       307.252    
  45  0.377790     -0.973417      -23.4315       23.4315       324.833       348.265    
  46  0.203667      -1.59127      -38.3041       38.3041       311.637       349.941    
  47  0.673892     -0.394685      -9.50061       9.50061       330.093       339.594    
  48  0.347380      -1.05734      -25.4515       25.4515       319.650       345.101    
  49  0.144339      -1.93559      -46.5924       46.5924       320.415       367.008    
  50  0.728571     -0.316670      -7.62268       7.62268       318.706       326.329    
  51  0.243065      -1.41443      -34.0472       34.0472       295.636       329.683    
  52  0.686711     -0.375841      -9.04702       9.04702       316.129       325.176    
  53  0.159440      -1.83609      -44.1972       44.1972       326.333       370.530    
  54  0.426258     -0.852711      -20.5259       20.5259       331.399       351.925    
  55  0.929286     -0.733386E-01  -1.76536       1.76536       308.487       310.252    
  56  0.335987E-01  -3.39327      -81.6807       81.6807       309.584       391.265    
  57  0.539383     -0.617330      -14.8600       14.8600       305.352       320.212    
  58  0.384768     -0.955116      -22.9910       22.9910       348.303       371.294    
  59  0.267956      -1.31693      -31.7004       31.7004       324.389       356.089    
  60  0.116616      -2.14887      -51.7263       51.7263       325.382       377.108    
  61  0.852032     -0.160131      -3.85458       3.85458       325.466       329.320    
  62  0.456598     -0.783952      -18.8708       18.8708       292.110       310.980    
  63  0.157616      -1.84759      -44.4741       44.4741       311.913       356.387    
  64  0.928361     -0.743348E-01  -1.78934       1.78934       316.630       318.420    
loop,thermsimp(1:2)       83   11.9326       31.8519    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    214        305.27          0.88          1.10         23.11          0.02          0.04         25.15
Just calling func    0   0         25.15


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    305.27
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    24.0714               253
loop is:       83
neval is:      213
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       83      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    24.0714               253
loop is:       84
neval is:      213


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      253
neval,tstepnext:      213     253

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.572627     -0.557521      -13.4203       13.4203       286.088       299.508    
   2  0.468879     -0.757411      -18.2319       18.2319       294.455       312.687    
   3  0.886741E-01  -2.42279      -58.3199       58.3199       295.168       353.487    
   4  0.211783      -1.55219      -37.3634       37.3634       291.268       328.631    
   5  0.573306     -0.556336      -13.3918       13.3918       298.353       311.745    
   6  0.401711     -0.912021      -21.9536       21.9536       287.238       309.192    
   7  0.505706     -0.681800      -16.4119       16.4119       297.624       314.036    
   8  0.603045     -0.505763      -12.1744       12.1744       292.278       304.453    
   9  0.696575     -0.361580      -8.70374       8.70374       306.186       314.890    
  10  0.294614      -1.22209      -29.4174       29.4174       308.487       337.904    
  11  0.527550     -0.639511      -15.3939       15.3939       292.110       307.503    
  12  0.657157     -0.419832      -10.1059       10.1059       311.734       321.840    
  13  0.627866     -0.465428      -11.2035       11.2035       309.752       320.956    
  14  0.993353E-02  -4.61184      -111.013       111.013       308.719       419.733    
  15  0.885166E-01  -2.42456      -58.3626       58.3626       282.492       340.855    
  16  0.265764      -1.32515      -31.8982       31.8982       302.687       334.585    
  17  0.446403     -0.806534      -19.4144       19.4144       304.814       324.228    
  18  0.287864      -1.24527      -29.9753       29.9753       316.630       346.606    
  19  0.926928E-01  -2.37846      -57.2530       57.2530       318.584       375.837    
  20  0.394849     -0.929252      -22.3684       22.3684       314.938       337.306    
  21  0.540746     -0.614805      -14.7992       14.7992       319.349       334.148    
  22  0.846435     -0.166721      -4.01322       4.01322       305.352       309.365    
  23  0.417037     -0.874580      -21.0523       21.0523       304.685       325.737    
  24  0.210713      -1.55726      -37.4853       37.4853       304.687       342.172    
  25  0.764669     -0.268312      -6.45864       6.45864       314.778       321.237    
  26  0.219471E-01  -3.81912      -91.9316       91.9316       316.644       408.575    
  27  0.200728      -1.60581      -38.6540       38.6540       321.570       360.224    
  28  0.572660     -0.557463      -13.4189       13.4189       316.129       329.548    
  29  0.599083E-01  -2.81494      -67.7595       67.7595       323.311       391.071    
  30  0.214614      -1.53891      -37.0438       37.0438       309.825       346.868    
  31  0.489389     -0.714598      -17.2014       17.2014       318.706       335.907    
  32  0.162616      -1.81636      -43.7224       43.7224       326.285       370.007    
  33  0.710022     -0.342459      -8.24346       8.24346       321.980       330.224    
  34  0.753583     -0.282916      -6.81018       6.81018       308.583       315.393    
  35  0.743317     -0.296633      -7.14036       7.14036       325.466       332.606    
  36  0.155416      -1.86165      -44.8125       44.8125       295.636       340.448    
  37  0.643355     -0.441059      -10.6169       10.6169       304.975       315.591    
  38  0.656098     -0.421444      -10.1448       10.1448       323.294       333.439    
  39  0.327550      -1.11611      -26.8664       26.8664       318.875       345.741    
  40  0.192244      -1.64899      -39.6935       39.6935       302.517       342.210    
  41  0.433590     -0.835657      -20.1154       20.1154       298.574       318.689    
  42  0.788561     -0.237545      -5.71805       5.71805       314.547       320.265    
  43  0.978028     -0.222173E-01 -0.534802      0.534802       330.093       330.628    
  44  0.110322      -2.20435      -53.0618       53.0618       324.811       377.873    
  45  0.795332     -0.228995      -5.51224       5.51224       325.176       330.688    
  46  0.497518E-01  -3.00071      -72.2312       72.2312       319.650       391.881    
  47  0.852459     -0.159631      -3.84253       3.84253       320.138       323.980    
  48  0.133240      -2.01560      -48.5183       48.5183       324.833       373.352    
  49  0.671163     -0.398743      -9.59830       9.59830       311.637       321.235    
  50  0.245122      -1.40600      -33.8443       33.8443       319.480       353.324    
  51  0.820498     -0.197843      -4.76236       4.76236       331.399       336.162    
  52  0.422422     -0.861751      -20.7435       20.7435       321.315       342.058    
  53  0.946612E-01  -2.35745      -56.7471       56.7471       330.113       386.860    
  54  0.902486     -0.102603      -2.46979       2.46979       324.389       326.859    
  55  0.858585     -0.152469      -3.67014       3.67014       311.913       315.583    
  56  0.713346     -0.337789      -8.13104       8.13104       310.037       318.168    
  57  0.497785     -0.697587      -16.7919       16.7919       320.415       337.207    
  58  0.971461     -0.289536E-01 -0.696955      0.696955       326.333       327.030    
  59  0.714587     -0.336051      -8.08921       8.08921       348.303       356.393    
  60  0.194565E-01  -3.93958      -94.8311       94.8311       319.432       414.263    
  61  0.675786E-01  -2.69446      -64.8595       64.8595       311.308       376.168    
  62  0.924162     -0.788681E-01  -1.89846       1.89846       325.382       327.280    
  63  0.988536     -0.115299E-01 -0.277540      0.277540       309.584       309.861    
  64  0.136917      -1.98838      -47.8630       47.8630       305.275       353.138    
loop,thermsimp(1:2)       84   13.4203       18.2319    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    215        317.18          0.88          1.08         23.14          0.02          0.04         25.16
Just calling func    0   0         25.15


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    216        359.45          0.87          1.08         23.14          0.01          0.04         25.13
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    317.18
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    24.0714               253
loop is:       84
neval is:      215
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       84      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    24.0714               253
loop is:       85
neval is:      215


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      253
neval,tstepnext:      215     253

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.197499      -1.62202      -39.0443       39.0443       286.088       325.132    
   2  0.793097     -0.231809      -5.57997       5.57997       292.278       297.858    
   3  0.261081      -1.34293      -32.3261       32.3261       292.110       324.436    
   4  0.912198     -0.918984E-01  -2.21212       2.21212       287.238       289.450    
   5  0.493539     -0.706153      -16.9981       16.9981       305.352       322.350    
   6  0.721001     -0.327115      -7.87410       7.87410       309.584       317.458    
   7  0.578790     -0.546816      -13.1626       13.1626       298.353       311.515    
   8  0.684127     -0.379612      -9.13778       9.13778       294.455       303.592    
   9  0.627712     -0.465674      -11.2094       11.2094       297.624       308.833    
  10  0.858540     -0.152522      -3.67142       3.67142       306.186       309.857    
  11  0.712254E-01  -2.64191      -63.5943       63.5943       308.583       372.177    
  12  0.927250     -0.755316E-01  -1.81815       1.81815       311.913       313.731    
  13  0.458073     -0.780727      -18.7932       18.7932       304.975       323.768    
  14  0.940004     -0.618714E-01  -1.48933       1.48933       310.037       311.526    
  15  0.322549      -1.13150      -27.2368       27.2368       298.574       325.811    
  16  0.939473     -0.624358E-01  -1.50292       1.50292       314.547       316.050    
  17  0.726080     -0.320095      -7.70514       7.70514       309.752       317.458    
  18  0.602088E-02  -5.11252      -123.065       123.065       311.637       434.702    
  19  0.735289     -0.307492      -7.40176       7.40176       314.778       322.180    
  20  0.847617     -0.165326      -3.97964       3.97964       311.734       315.714    
  21  0.747190E-01  -2.59402      -62.4417       62.4417       320.138       382.579    
  22  0.248374      -1.39282      -33.5271       33.5271       304.814       338.341    
  23  0.350184      -1.04930      -25.2580       25.2580       304.685       329.943    
  24  0.327739E-03  -8.02329      -193.132       193.132       324.389       517.521    
  25  0.130012      -2.04013      -49.1087       49.1087       326.333       375.441    
  26  0.609791     -0.494639      -11.9067       11.9067       325.382       337.288    
  27  0.793414     -0.231410      -5.57036       5.57036       291.268       296.838    
  28  0.962567     -0.381519E-01 -0.918369      0.918369       316.129       317.048    
  29  0.499469     -0.694211      -16.7106       16.7106       321.980       338.691    
  30  0.887491     -0.119357      -2.87309       2.87309       330.093       332.967    
  31  0.136374      -1.99236      -47.9588       47.9588       325.176       373.134    
  32  0.292356      -1.22978      -29.6026       29.6026       325.466       355.068    
  33  0.301564      -1.19877      -28.8562       28.8562       323.294       352.151    
  34  0.352543      -1.04258      -25.0964       25.0964       319.349       344.446    
  35  0.483726     -0.726236      -17.4815       17.4815       302.687       320.168    
  36  0.410499     -0.890381      -21.4327       21.4327       318.706       340.139    
  37  0.458111     -0.780644      -18.7912       18.7912       331.399       350.191    
  38  0.670071     -0.400372      -9.63752       9.63752       320.415       330.053    
  39  0.175486      -1.74020      -41.8889       41.8889       314.938       356.827    
  40  0.798907     -0.224511      -5.40429       5.40429       308.487       313.891    
  41  0.270487      -1.30753      -31.4741       31.4741       295.636       327.110    
  42  0.480368     -0.733202      -17.6492       17.6492       282.492       300.141    
  43  0.658406     -0.417933      -10.0602       10.0602       321.315       331.375    
  44  0.937976     -0.640304E-01  -1.54130       1.54130       304.687       306.228    
  45  0.710083     -0.342373      -8.24139       8.24139       302.517       310.758    
  46  0.567340     -0.566797      -13.6436       13.6436       318.875       332.518    
  47  0.201426      -1.60233      -38.5704       38.5704       316.630       355.201    
  48  0.660313     -0.415042      -9.99063       9.99063       309.825       319.815    
  49  0.524008     -0.646249      -15.5561       15.5561       305.275       320.831    
  50  0.513616     -0.666280      -16.0383       16.0383       319.480       335.518    
  51  0.951218     -0.500122E-01  -1.20386       1.20386       295.168       296.371    
  52  0.703465     -0.351737      -8.46681       8.46681       348.303       356.770    
  53  0.702859     -0.352600      -8.48756       8.48756       321.570       330.058    
  54  0.453067     -0.791715      -19.0577       19.0577       326.285       345.342    
  55  0.202116      -1.59891      -38.4881       38.4881       324.833       363.321    
  56  0.491988     -0.709301      -17.0739       17.0739       318.584       335.658    
  57  0.632131     -0.458659      -11.0405       11.0405       311.308       322.349    
  58  0.911086     -0.931178E-01  -2.24147       2.24147       324.811       327.052    
  59  0.888750     -0.117939      -2.83896       2.83896       330.113       332.952    
  60  0.468235     -0.758785      -18.2650       18.2650       323.311       341.576    
  61  0.971366     -0.290520E-01 -0.699323      0.699323       319.650       320.349    
  62  0.622947     -0.473294      -11.3929       11.3929       316.644       328.036    
  63  0.837000     -0.177932      -4.28306       4.28306       319.432       323.715    
  64  0.495636     -0.701913      -16.8960       16.8960       317.183       334.079    
loop,thermsimp(1:2)       85   39.0443       5.57997    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    217        302.78          0.88          1.09         23.13          0.01          0.04         25.16
Just calling func    0   0         25.16


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    218        300.32          0.88          1.09         23.10          0.00          0.05         25.11
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    300.32
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    24.0714               253
loop is:       85
neval is:      217
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       85      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    24.0714               253
loop is:       86
neval is:      217


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      253
neval,tstepnext:      217     253

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.464881     -0.765974      -18.4381       18.4381       287.238       305.676    
   2  0.948887     -0.524654E-01  -1.26292       1.26292       295.168       296.430    
   3  0.532332     -0.630488      -15.1767       15.1767       291.268       306.444    
   4  0.374267     -0.982785      -23.6570       23.6570       292.278       315.935    
   5  0.694531     -0.364519      -8.77448       8.77448       282.492       291.266    
   6  0.414371     -0.880994      -21.2067       21.2067       294.455       315.661    
   7  0.208827E-01  -3.86883      -93.1282       93.1282       304.687       397.815    
   8  0.627187     -0.466511      -11.2296       11.2296       297.624       308.853    
   9  0.148799E-01  -4.20774      -101.286       101.286       306.186       407.472    
  10  0.809008     -0.211946      -5.10184       5.10184       302.517       307.619    
  11  0.647680     -0.434359      -10.4556       10.4556       298.353       308.808    
  12  0.289351      -1.24012      -29.8513       29.8513       310.037       339.888    
  13  0.222457      -1.50302      -36.1798       36.1798       311.913       348.093    
  14  0.374268     -0.982782      -23.6569       23.6569       308.487       332.144    
  15  0.785765     -0.241097      -5.80354       5.80354       311.734       317.537    
  16  0.298051      -1.21049      -29.1382       29.1382       314.547       343.685    
  17  0.725075     -0.321480      -7.73848       7.73848       316.129       323.868    
  18  0.386364     -0.950976      -22.8913       22.8913       309.752       332.644    
  19  0.631686     -0.459363      -11.0575       11.0575       309.584       320.641    
  20  0.688282     -0.373557      -8.99204       8.99204       309.825       318.817    
  21  0.373817     -0.983990      -23.6860       23.6860       302.687       326.373    
  22  0.219845      -1.51483      -36.4642       36.4642       319.650       356.114    
  23  0.926271     -0.765889E-01  -1.84360       1.84360       305.275       307.118    
  24  0.618127     -0.481061      -11.5798       11.5798       314.778       326.358    
  25  0.176216      -1.73604      -41.7890       41.7890       311.308       353.097    
  26  0.742943     -0.297136      -7.15248       7.15248       305.352       312.505    
  27  0.357690      -1.02809      -24.7475       24.7475       319.432       344.180    
  28  0.478359     -0.737394      -17.7501       17.7501       304.975       322.725    
  29  0.395976     -0.926401      -22.2997       22.2997       292.110       314.409    
  30  0.803186     -0.219169      -5.27570       5.27570       286.088       291.363    
  31  0.231845      -1.46168      -35.1848       35.1848       298.574       333.759    
  32  0.808968     -0.211996      -5.10304       5.10304       324.811       329.914    
  33  0.579217     -0.546078      -13.1448       13.1448       295.636       308.781    
  34  0.384357     -0.956183      -23.0167       23.0167       316.644       339.660    
  35  0.856367     -0.155057      -3.73243       3.73243       304.685       308.417    
  36  0.265661      -1.32553      -31.9074       31.9074       320.415       352.323    
  37  0.288915      -1.24162      -29.8876       29.8876       321.570       351.458    
  38  0.224915      -1.49203      -35.9153       35.9153       321.315       357.230    
  39  0.685944     -0.376959      -9.07393       9.07393       318.875       327.949    
  40  0.265936      -1.32450      -31.8825       31.8825       330.113       361.995    
  41  0.412966     -0.884389      -21.2885       21.2885       330.093       351.382    
  42  0.440796     -0.819173      -19.7186       19.7186       317.183       336.902    
  43  0.572522     -0.557705      -13.4247       13.4247       319.480       332.905    
  44  0.798412     -0.225131      -5.41922       5.41922       318.584       324.003    
  45  0.127097      -2.06281      -49.6546       49.6546       325.382       375.036    
  46  0.243397      -1.41306      -34.0144       34.0144       304.814       338.828    
  47  0.322195      -1.13260      -27.2632       27.2632       321.980       349.243    
  48  0.512728     -0.668011      -16.0799       16.0799       318.706       334.786    
  49  0.786191     -0.240556      -5.79051       5.79051       323.311       329.102    
  50  0.733079     -0.310501      -7.47419       7.47419       319.349       326.823    
  51  0.601364     -0.508554      -12.2416       12.2416       326.285       338.526    
  52  0.348529      -1.05403      -25.3720       25.3720       331.399       356.771    
  53  0.923986     -0.790584E-01  -1.90305       1.90305       323.294       325.197    
  54  0.843742     -0.169908      -4.08993       4.08993       325.466       329.556    
  55  0.723581     -0.323543      -7.78812       7.78812       316.630       324.418    
  56  0.378158     -0.972444      -23.4081       23.4081       348.303       371.711    
  57  0.463644     -0.768638      -18.5022       18.5022       314.938       333.440    
  58  0.427569     -0.849641      -20.4520       20.4520       324.833       345.285    
  59  0.235852      -1.44455      -34.7723       34.7723       308.583       343.355    
  60  0.203797      -1.59063      -38.2887       38.2887       325.176       363.464    
  61  0.146982E-02  -6.52261      -157.008       157.008       326.333       483.341    
  62  0.681525     -0.383422      -9.22950       9.22950       320.138       329.367    
  63  0.931276     -0.711992E-01  -1.71386       1.71386       311.637       313.351    
  64  0.581849     -0.541545      -13.0357       13.0357       300.320       313.356    
loop,thermsimp(1:2)       86   18.4381       1.26292    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    219        291.76          0.88          1.09         23.12          0.01          0.05         25.15
Just calling func    0   0         25.15


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    220        643.83          0.88          1.09         23.09          0.02          0.04         25.11
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    291.76
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    24.0714               253
loop is:       86
neval is:      219
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       86      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    24.0714               253
loop is:       87
neval is:      219


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      253
neval,tstepnext:      219     253

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.182970      -1.69843      -40.8836       40.8836       282.492       323.376    
   2  0.721345     -0.326637      -7.86262       7.86262       286.088       293.950    
   3  0.842493     -0.171390      -4.12558       4.12558       295.168       299.293    
   4  0.260540      -1.34500      -32.3759       32.3759       287.238       319.614    
   5  0.782605     -0.245127      -5.90055       5.90055       291.268       297.168    
   6  0.208492      -1.56785      -37.7404       37.7404       305.275       343.015    
   7  0.290568E-01  -3.53850      -85.1766       85.1766       302.517       387.694    
   8  0.673682     -0.394997      -9.50812       9.50812       304.685       314.193    
   9  0.399393     -0.917808      -22.0929       22.0929       295.636       317.729    
  10  0.966971     -0.335863E-01 -0.808470      0.808470       298.353       299.161    
  11  0.390645     -0.939956      -22.6260       22.6260       297.624       320.250    
  12  0.259548      -1.34881      -32.4678       32.4678       305.352       337.820    
  13  0.260765      -1.34413      -32.3552       32.3552       311.637       343.992    
  14  0.110601E-01  -4.50441      -108.428       108.428       300.320       408.747    
  15  0.727710     -0.317852      -7.65114       7.65114       292.110       299.761    
  16  0.717076     -0.332574      -8.00552       8.00552       294.455       302.460    
  17  0.612129     -0.490811      -11.8145       11.8145       292.278       304.093    
  18  0.589376     -0.528691      -12.7263       12.7263       311.734       324.460    
  19  0.541615     -0.613199      -14.7606       14.7606       309.825       324.585    
  20  0.330403      -1.10744      -26.6577       26.6577       309.584       336.242    
  21  0.229530      -1.47172      -35.4264       35.4264       304.975       340.401    
  22  0.564010     -0.572684      -13.7853       13.7853       316.129       329.914    
  23  0.454226     -0.789161      -18.9962       18.9962       318.584       337.580    
  24  0.579528     -0.545541      -13.1319       13.1319       316.630       329.762    
  25  0.245500      -1.40446      -33.8073       33.8073       323.294       357.102    
  26  0.708019     -0.345284      -8.31146       8.31146       314.778       323.089    
  27  0.300215      -1.20326      -28.9641       28.9641       302.687       331.651    
  28  0.721461     -0.326478      -7.85877       7.85877       319.349       327.208    
  29  0.326772      -1.11849      -26.9237       26.9237       318.875       345.798    
  30  0.580879     -0.543212      -13.0759       13.0759       323.311       336.387    
  31  0.963075     -0.376241E-01 -0.905665      0.905665       320.138       321.043    
  32  0.656935     -0.420170      -10.1141       10.1141       325.466       335.580    
  33  0.908335     -0.961416E-01  -2.31426       2.31426       324.811       327.125    
  34  0.765938     -0.266654      -6.41874       6.41874       308.487       314.906    
  35  0.497301     -0.698561      -16.8153       16.8153       309.752       326.568    
  36  0.833603     -0.181997      -4.38093       4.38093       319.480       323.861    
  37  0.433057     -0.836886      -20.1450       20.1450       314.938       335.083    
  38  0.349547      -1.05112      -25.3018       25.3018       298.574       323.876    
  39  0.142838      -1.94604      -46.8440       46.8440       318.706       365.550    
  40  0.326780      -1.11847      -26.9231       26.9231       317.183       344.107    
  41  0.707709     -0.345723      -8.32203       8.32203       326.285       334.607    
  42  0.914339     -0.895538E-01  -2.15568       2.15568       304.814       306.970    
  43  0.392800     -0.934454      -22.4936       22.4936       316.644       339.137    
  44  0.434772     -0.832933      -20.0499       20.0499       310.037       330.087    
  45  0.229545      -1.47165      -35.4248       35.4248       308.583       344.008    
  46  0.661281     -0.413577      -9.95537       9.95537       314.547       324.502    
  47  0.459966     -0.776602      -18.6939       18.6939       319.432       338.126    
  48  0.352439      -1.04288      -25.1035       25.1035       324.833       349.937    
  49  0.490345     -0.712647      -17.1544       17.1544       311.913       329.068    
  50  0.837788     -0.176990      -4.26040       4.26040       321.980       326.241    
  51  0.247493      -1.39637      -33.6127       33.6127       330.093       363.706    
  52  0.221382      -1.50787      -36.2965       36.2965       321.570       357.867    
  53  0.374412     -0.982399      -23.6477       23.6477       320.415       344.063    
  54  0.170580      -1.76855      -42.5714       42.5714       311.308       353.879    
  55  0.464054     -0.767755      -18.4809       18.4809       319.650       338.131    
  56  0.936961     -0.651140E-01  -1.56738       1.56738       331.399       332.967    
  57  0.302357      -1.19615      -28.7929       28.7929       321.315       350.108    
  58  0.572748E-01  -2.85990      -68.8417       68.8417       330.113       398.954    
  59  0.495156     -0.702883      -16.9194       16.9194       325.176       342.095    
  60  0.101162      -2.29104      -55.1484       55.1484       348.303       403.452    
  61  0.786435E-02  -4.84542      -116.636       116.636       325.382       442.018    
  62  0.960492     -0.403100E-01 -0.970317      0.970317       304.687       305.657    
  63  0.902616     -0.102458      -2.46631       2.46631       306.186       308.652    
  64  0.646986     -0.435430      -10.4814       10.4814       291.756       302.237    
loop,thermsimp(1:2)       87   40.8836       7.86262    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    221        297.86          0.88          1.09         23.12          0.02          0.04         25.15
Just calling func    0   0         25.15


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    222        295.94          0.87          1.08         23.14          0.23          0.04         25.36
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  220    297.86        4.328     -1.097      3.741     -100.0     0.1637    
                      -1.004      2.374     -100.0      2.492     0.7449    
                       1.170    -0.9347E-01  2.400      0.000      0.000    
                     -0.9007      0.000      0.000      0.000     -1.221    

                      -2.500      9432.     0.1411E+05 -792.5     -2262.    
                      -2.000     -5.867     -2.731     -4.500     -2.095    
                      -13.73     -2.420      1359.      0.000      3354.    

                       4764.      3323.      5073.      5329.      2500.    
                       4298.     0.5610E-01-0.4416E-01  0.000    -0.5122E-01
                      0.4419E-01-0.5332     0.1230    -0.7705E-01-0.1761E-01

                      -1.090    -0.7449      0.000     0.2425     0.6381E-01
                      0.8541E-01 0.4635E-01 0.5518E-01 0.7163E-01-0.1453E-01
                     -0.2321E-01 0.4082E-01-0.2263    -0.7449      0.000    

                      -1.178     -2.250      4.133     -1.161      0.000    
                       0.000      9.081      9.149     -5143.     -4.000    
                     -0.9942E-01-0.1864      8.923      8.643     -9109.    

                      -4.000     0.4755     0.8945      9.292      9.128    
                      -5592.     -4.000     0.3826     0.3826      9.431    
                       8.928     -3725.     -2.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    295.94
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    24.0714               253
loop is:       87
neval is:      221
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       87      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    24.0714               253
loop is:       88
neval is:      221


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      253
neval,tstepnext:      221     253

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.220180      -1.51331      -36.4275       36.4275       286.088       322.515    
   2  0.246752E-01  -3.70196      -89.1113       89.1113       291.268       380.379    
   3  0.679039     -0.387076      -9.31747       9.31747       298.353       307.670    
   4  0.709027     -0.343862      -8.27722       8.27722       295.168       303.445    
   5  0.577754     -0.548608      -13.2058       13.2058       292.110       305.315    
   6  0.738694     -0.302871      -7.29054       7.29054       291.756       299.046    
   7  0.181723      -1.70527      -41.0483       41.0483       294.455       335.503    
   8  0.103748      -2.26579      -54.5407       54.5407       292.278       346.819    
   9  0.456811E-02  -5.38866      -129.712       129.712       304.687       434.399    
  10  0.303247      -1.19321      -28.7222       28.7222       304.814       333.536    
  11  0.284736      -1.25619      -30.2383       30.2383       306.186       336.424    
  12  0.900494     -0.104812      -2.52297       2.52297       304.685       307.208    
  13  0.691792     -0.368470      -8.86958       8.86958       308.487       317.356    
  14  0.502714     -0.687735      -16.5547       16.5547       295.636       312.191    
  15  0.305219      -1.18673      -28.5662       28.5662       287.238       315.804    
  16  0.412005     -0.886720      -21.3446       21.3446       297.624       318.968    
  17  0.412225     -0.886186      -21.3317       21.3317       320.138       341.469    
  18  0.121697      -2.10622      -50.6997       50.6997       314.778       365.478    
  19  0.465374     -0.764915      -18.4126       18.4126       282.492       300.905    
  20  0.273016      -1.29823      -31.2501       31.2501       319.480       350.730    
  21  0.502763     -0.687636      -16.5524       16.5524       298.574       315.126    
  22  0.516442     -0.660793      -15.9062       15.9062       311.734       327.640    
  23  0.554333     -0.589990      -14.2019       14.2019       314.547       328.749    
  24  0.192397E-01  -3.95078      -95.1007       95.1007       309.825       404.925    
  25  0.451279E-01  -3.09825      -74.5793       74.5793       321.980       396.559    
  26  0.457340     -0.782327      -18.8317       18.8317       309.752       328.584    
  27  0.325184      -1.12336      -27.0409       27.0409       324.811       351.852    
  28  0.700952     -0.355315      -8.55293       8.55293       319.349       327.902    
  29  0.961087     -0.396906E-01 -0.955408      0.955408       311.913       312.869    
  30  0.195966E-02  -6.23498      -150.085       150.085       316.630       466.715    
  31  0.766376     -0.266082      -6.40497       6.40497       316.129       322.534    
  32  0.398846     -0.919180      -22.1259       22.1259       310.037       332.163    
  33  0.675249     -0.392674      -9.45221       9.45221       302.687       312.139    
  34  0.189468      -1.66354      -40.0437       40.0437       331.399       371.443    
  35  0.444608     -0.810562      -19.5114       19.5114       326.285       345.796    
  36  0.514006     -0.665520      -16.0200       16.0200       314.938       330.958    
  37  0.575199     -0.553039      -13.3124       13.3124       325.466       338.778    
  38  0.121449      -2.10826      -50.7488       50.7488       309.584       360.333    
  39  0.209130      -1.56480      -37.6669       37.6669       323.311       360.978    
  40  0.466284E-01  -3.06555      -73.7919       73.7919       318.584       392.376    
  41  0.386630E-01  -3.25287      -78.3012       78.3012       305.352       383.653    
  42  0.335751E-01  -3.39397      -81.6976       81.6976       319.432       401.130    
  43  0.878126     -0.129965      -3.12844       3.12844       319.650       322.778    
  44  0.652938     -0.426273      -10.2610       10.2610       316.644       326.905    
  45  0.932456E-01  -2.37252      -57.1098       57.1098       304.975       362.084    
  46  0.662683     -0.411458      -9.90437       9.90437       325.176       335.080    
  47  0.204704      -1.58619      -38.1819       38.1819       305.275       343.456    
  48  0.985446     -0.146609E-01 -0.352909      0.352909       311.637       311.990    
  49  0.105847      -2.24576      -54.0586       54.0586       308.583       362.642    
  50  0.843201     -0.170550      -4.10537       4.10537       320.415       324.521    
  51  0.364087      -1.01036      -24.3208       24.3208       317.183       341.504    
  52  0.650651E-01  -2.73237      -65.7719       65.7719       318.875       384.647    
  53  0.968103     -0.324171E-01 -0.780324      0.780324       324.833       325.614    
  54  0.131933      -2.02546      -48.7556       48.7556       321.315       370.070    
  55  0.906847     -0.977815E-01  -2.35374       2.35374       311.308       313.662    
  56  0.443328E-01  -3.11603      -75.0072       75.0072       323.294       398.302    
  57  0.507045     -0.679156      -16.3482       16.3482       321.570       337.919    
  58  0.287709      -1.24581      -29.9883       29.9883       330.093       360.082    
  59  0.900299     -0.105028      -2.52818       2.52818       318.706       321.234    
  60  0.689829E-01  -2.67390      -64.3644       64.3644       302.517       366.881    
  61  0.876407     -0.131925      -3.17561       3.17561       330.113       333.288    
  62  0.718081     -0.331173      -7.97178       7.97178       348.303       356.275    
  63  0.177063      -1.73125      -41.6736       41.6736       300.320       341.994    
  64  0.749425E-01  -2.59103      -62.3698       62.3698       295.939       358.309    
loop,thermsimp(1:2)       88   36.4275       89.1113    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    223        322.84          0.88          1.11         23.06          0.16          0.04         25.25
Just calling func    0   0         25.25


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    224        409.43          0.88          1.10         23.12          0.02          0.04         25.17
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    322.84
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    24.0714               253
loop is:       88
neval is:      223
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       88      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    24.0714               253
loop is:       89
neval is:      223


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      253
neval,tstepnext:      223     253

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.876761     -0.131521      -3.16590       3.16590       291.756       294.922    
   2  0.765270     -0.267527      -6.43975       6.43975       282.492       288.932    
   3  0.215687      -1.53393      -36.9238       36.9238       295.168       332.091    
   4  0.999601E-01  -2.30298      -55.4360       55.4360       292.110       347.546    
   5  0.706519     -0.347405      -8.36252       8.36252       304.685       313.047    
   6  0.201358      -1.60267      -38.5785       38.5785       298.353       336.931    
   7  0.450677     -0.797005      -19.1850       19.1850       311.637       330.822    
   8  0.897557     -0.108078      -2.60160       2.60160       302.687       305.289    
   9  0.161166      -1.82532      -43.9379       43.9379       295.636       339.574    
  10  0.972556E-01  -2.33041      -56.0963       56.0963       311.913       368.009    
  11  0.742112     -0.298255      -7.17940       7.17940       311.308       318.487    
  12  0.172377      -1.75807      -42.3192       42.3192       298.574       340.893    
  13  0.658751     -0.417410      -10.0476       10.0476       287.238       297.286    
  14  0.725340     -0.321114      -7.72966       7.72966       308.487       316.216    
  15  0.501488     -0.690175      -16.6135       16.6135       297.624       314.237    
  16  0.845372     -0.167978      -4.04347       4.04347       318.706       322.750    
  17  0.132369      -2.02216      -48.6762       48.6762       286.088       334.764    
  18  0.734515E-01  -2.61113      -62.8535       62.8535       316.129       378.983    
  19  0.391205     -0.938523      -22.5916       22.5916       319.650       342.241    
  20  0.376983     -0.975555      -23.4830       23.4830       320.415       343.898    
  21  0.315463      -1.15371      -27.7715       27.7715       324.833       352.605    
  22  0.267113      -1.32008      -31.7762       31.7762       316.644       348.420    
  23  0.965292     -0.353243E-01 -0.850306      0.850306       311.734       312.584    
  24  0.954592     -0.464714E-01  -1.11863       1.11863       319.349       320.468    
  25  0.992414     -0.761515E-02 -0.183307      0.183307       309.752       309.936    
  26  0.867953E-02  -4.74679      -114.262       114.262       314.547       428.809    
  27  0.829585     -0.186829      -4.49724       4.49724       314.938       319.435    
  28  0.349695      -1.05069      -25.2917       25.2917       310.037       335.328    
  29  0.673511     -0.395251      -9.51424       9.51424       330.113       339.627    
  30  0.340696      -1.07676      -25.9192       25.9192       304.814       330.733    
  31  0.558731     -0.582087      -14.0116       14.0116       325.176       339.187    
  32  0.747295     -0.291295      -7.01187       7.01187       294.455       301.467    
  33  0.123287      -2.09324      -50.3873       50.3873       306.186       356.573    
  34  0.355051      -1.03549      -24.9257       24.9257       321.570       346.496    
  35  0.511895     -0.669636      -16.1191       16.1191       325.466       341.585    
  36  0.571856E-01  -2.86145      -68.8791       68.8791       320.138       389.017    
  37  0.507517     -0.678226      -16.3258       16.3258       317.183       333.509    
  38  0.326770      -1.11850      -26.9238       26.9238       300.320       327.244    
  39  0.736001     -0.306523      -7.37844       7.37844       305.275       312.653    
  40  0.970046     -0.304120E-01 -0.732059      0.732059       326.285       327.017    
  41  0.673510     -0.395253      -9.51428       9.51428       292.278       301.792    
  42  0.335032      -1.09353      -26.3228       26.3228       319.480       345.803    
  43  0.872321E-01  -2.43918      -58.7145       58.7145       324.811       383.525    
  44  0.749956     -0.287741      -6.92632       6.92632       348.303       355.230    
  45  0.159001      -1.83884      -44.2635       44.2635       295.939       340.203    
  46  0.529687     -0.635468      -15.2966       15.2966       330.093       345.390    
  47  0.142415      -1.94901      -46.9154       46.9154       309.584       356.499    
  48  0.803387     -0.218919      -5.26967       5.26967       323.311       328.581    
  49  0.709133     -0.343713      -8.27365       8.27365       304.975       313.248    
  50  0.261172      -1.34258      -32.3177       32.3177       308.583       340.901    
  51  0.106599      -2.23868      -53.8882       53.8882       314.778       368.666    
  52  0.955666     -0.453468E-01  -1.09156       1.09156       302.517       303.609    
  53  0.376236     -0.977539      -23.5307       23.5307       321.315       344.845    
  54  0.890774     -0.115665      -2.78422       2.78422       331.399       334.184    
  55  0.554077     -0.590452      -14.2130       14.2130       291.268       305.481    
  56  0.892825E-01  -2.41595      -58.1553       58.1553       305.352       363.507    
  57  0.941033     -0.607774E-01  -1.46300       1.46300       318.875       320.338    
  58  0.209380E-01  -3.86619      -93.0645       93.0645       318.584       411.648    
  59  0.427794     -0.849113      -20.4393       20.4393       321.980       342.419    
  60  0.194887      -1.63533      -39.3648       39.3648       323.294       362.659    
  61  0.840289     -0.174009      -4.18864       4.18864       319.432       323.621    
  62  0.634527     -0.454875      -10.9495       10.9495       309.825       320.774    
  63  0.159135      -1.83800      -44.2432       44.2432       304.687       348.930    
  64  0.182987      -1.69834      -40.8814       40.8814       322.844       363.726    
loop,thermsimp(1:2)       89   3.16590       6.43975    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    225        304.13          0.88          1.09         23.12          0.02          0.04         25.15
Just calling func    0   0         25.14


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    304.13
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    24.0714               253
loop is:       89
neval is:      224
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       89      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    24.0714               253
loop is:       90
neval is:      224


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      253
neval,tstepnext:      224     253

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.157371      -1.84915      -44.5115       44.5115       282.492       327.003    
   2  0.894146     -0.111886      -2.69325       2.69325       291.756       294.449    
   3  0.721270     -0.326741      -7.86512       7.86512       287.238       295.103    
   4  0.536866     -0.622006      -14.9725       14.9725       294.455       309.427    
   5  0.418107     -0.872017      -20.9907       20.9907       292.278       313.269    
   6  0.391189     -0.938564      -22.5926       22.5926       302.517       325.109    
   7  0.799669     -0.223558      -5.38134       5.38134       302.687       308.068    
   8  0.595070     -0.519076      -12.4949       12.4949       291.268       303.763    
   9  0.384356E-03  -7.86394      -189.296       189.296       309.752       499.048    
  10  0.654302     -0.424187      -10.2108       10.2108       311.734       321.945    
  11  0.873355     -0.135413      -3.25958       3.25958       305.275       308.534    
  12  0.303212      -1.19332      -28.7249       28.7249       304.685       333.410    
  13  0.434159     -0.834344      -20.0838       20.0838       304.975       325.058    
  14  0.970825     -0.296089E-01 -0.712728      0.712728       297.624       298.336    
  15  0.405896     -0.901659      -21.7042       21.7042       308.487       330.191    
  16  0.250423      -1.38461      -33.3294       33.3294       311.308       344.637    
  17  0.517030     -0.659654      -15.8788       15.8788       314.938       330.817    
  18  0.165468      -1.79897      -43.3038       43.3038       318.875       362.179    
  19  0.679403     -0.386541      -9.30457       9.30457       319.349       328.654    
  20  0.554013     -0.590567      -14.2158       14.2158       309.825       324.040    
  21  0.211764E-01  -3.85487      -92.7921       92.7921       318.706       411.498    
  22  0.453828     -0.790038      -19.0173       19.0173       319.432       338.449    
  23  0.377409     -0.974426      -23.4558       23.4558       326.285       349.740    
  24  0.496879     -0.699408      -16.8357       16.8357       300.320       317.156    
  25  0.214619      -1.53889      -37.0432       37.0432       323.311       360.355    
  26  0.724154     -0.322751      -7.76907       7.76907       304.814       312.583    
  27  0.385609     -0.952932      -22.9384       22.9384       311.637       334.575    
  28  0.777864     -0.251204      -6.04682       6.04682       295.168       301.214    
  29  0.709283     -0.343500      -8.26852       8.26852       317.183       325.452    
  30  0.191760      -1.65151      -39.7542       39.7542       331.399       371.154    
  31  0.347616      -1.05666      -25.4352       25.4352       286.088       311.523    
  32  0.191581      -1.65244      -39.7766       39.7766       310.037       349.813    
  33  0.770989     -0.260081      -6.26052       6.26052       298.353       304.613    
  34  0.788566E-01  -2.54012      -61.1443       61.1443       325.176       386.320    
  35  0.229474      -1.47197      -35.4323       35.4323       295.636       331.068    
  36  0.339326      -1.08079      -26.0162       26.0162       330.113       356.129    
  37  0.220886      -1.51011      -36.3504       36.3504       295.939       332.290    
  38  0.223644      -1.49770      -36.0517       36.0517       298.574       334.625    
  39  0.138287      -1.97842      -47.6234       47.6234       308.583       356.206    
  40  0.796402     -0.227651      -5.47988       5.47988       325.466       330.946    
  41  0.104384      -2.25968      -54.3936       54.3936       319.650       374.043    
  42  0.919642     -0.837713E-01  -2.01649       2.01649       321.980       323.997    
  43  0.360767      -1.01952      -24.5413       24.5413       320.415       344.957    
  44  0.924300     -0.787181E-01  -1.89485       1.89485       321.315       323.210    
  45  0.561139     -0.577786      -13.9081       13.9081       330.093       344.002    
  46  0.509073E-01  -2.97775      -71.6785       71.6785       319.480       391.159    
  47  0.715469     -0.334817      -8.05952       8.05952       321.570       329.630    
  48  0.294040E-01  -3.52662      -84.8907       84.8907       292.110       377.000    
  49  0.264026E-02  -5.93688      -142.909       142.909       316.644       459.552    
  50  0.634029     -0.455661      -10.9684       10.9684       304.687       315.655    
  51  0.319148      -1.14210      -27.4920       27.4920       324.833       352.325    
  52  0.495674     -0.701836      -16.8942       16.8942       348.303       365.198    
  53  0.838343     -0.176328      -4.24447       4.24447       309.584       313.828    
  54  0.240556      -1.42480      -34.2970       34.2970       306.186       340.483    
  55  0.919800     -0.835990E-01  -2.01235       2.01235       323.294       325.307    
  56  0.652899     -0.426332      -10.2624       10.2624       305.352       315.615    
  57  0.777375     -0.251832      -6.06195       6.06195       322.844       328.906    
  58  0.988137     -0.119340E-01 -0.287268      0.287268       311.913       312.200    
  59  0.771111     -0.259922      -6.25669       6.25669       314.778       321.035    
  60  0.980963     -0.192203E-01 -0.462659      0.462659       316.129       316.592    
  61  0.358823      -1.02493      -24.6714       24.6714       324.811       349.482    
  62  0.398479     -0.920100      -22.1481       22.1481       320.138       342.286    
  63  0.524779     -0.644778      -15.5207       15.5207       318.584       334.104    
  64  0.391693E-01  -3.23986      -77.9880       77.9880       304.134       382.122    
loop,thermsimp(1:2)       90   44.5115       2.69325    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    226        305.60          0.88          1.10         23.12          0.02          0.04         25.16
Just calling func    0   0         25.15


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    227        571.98          0.88          1.09         23.12          0.01          0.05         25.14
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    305.60
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    24.0714               253
loop is:       90
neval is:      226
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       90      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    24.0714               253
loop is:       91
neval is:      226


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      253
neval,tstepnext:      226     253

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.102884      -2.27415      -54.7419       54.7419       291.756       346.498    
   2  0.846291     -0.166892      -4.01732       4.01732       287.238       291.255    
   3  0.167054      -1.78944      -43.0742       43.0742       297.624       340.698    
   4  0.786038     -0.240750      -5.79519       5.79519       295.168       300.963    
   5  0.680218     -0.385341      -9.27570       9.27570       291.268       300.543    
   6  0.843894     -0.169729      -4.08561       4.08561       298.353       302.438    
   7  0.295559      -1.21889      -29.3403       29.3403       302.687       332.027    
   8  0.383493     -0.958433      -23.0708       23.0708       305.275       328.345    
   9  0.867247     -0.142431      -3.42851       3.42851       294.455       297.883    
  10  0.241960      -1.41898      -34.1569       34.1569       286.088       320.245    
  11  0.486925     -0.719645      -17.3229       17.3229       311.913       329.236    
  12  0.750166     -0.287460      -6.91957       6.91957       304.814       311.734    
  13  0.507045     -0.679156      -16.3482       16.3482       292.278       308.626    
  14  0.237743      -1.43656      -34.5801       34.5801       309.584       344.164    
  15  0.256837E-01  -3.66190      -88.1470       88.1470       305.352       393.499    
  16  0.776460     -0.253010      -6.09029       6.09029       304.687       310.777    
  17  0.316300      -1.15106      -27.7077       27.7077       316.129       343.837    
  18  0.493161     -0.706919      -17.0165       17.0165       300.320       317.336    
  19  0.807271     -0.214096      -5.15359       5.15359       314.778       319.932    
  20  0.338915      -1.08201      -26.0454       26.0454       311.734       337.779    
  21  0.132986      -2.01751      -48.5642       48.5642       321.315       369.879    
  22  0.409975     -0.891659      -21.4635       21.4635       321.980       343.444    
  23  0.525021     -0.644317      -15.5096       15.5096       309.825       325.334    
  24  0.393064     -0.933783      -22.4775       22.4775       304.975       327.452    
  25  0.176068      -1.73689      -41.8093       41.8093       302.517       344.326    
  26  0.965490     -0.351191E-01 -0.845366      0.845366       323.294       324.140    
  27  0.387767     -0.947350      -22.8040       22.8040       317.183       339.987    
  28  0.936248     -0.658753E-01  -1.58571       1.58571       282.492       284.078    
  29  0.914720     -0.891370E-01  -2.14565       2.14565       319.349       321.495    
  30  0.332171      -1.10211      -26.5292       26.5292       322.844       349.373    
  31  0.845314E-01  -2.47063      -59.4715       59.4715       321.570       381.042    
  32  0.687741     -0.374343      -9.01096       9.01096       308.487       317.498    
  33  0.899776     -0.105610      -2.54217       2.54217       314.938       317.480    
  34  0.558791     -0.581980      -14.0091       14.0091       325.466       339.475    
  35  0.882799     -0.124658      -3.00069       3.00069       295.636       298.637    
  36  0.235569      -1.44575      -34.8012       34.8012       295.939       330.741    
  37  0.533400     -0.628484      -15.1285       15.1285       304.685       319.813    
  38  0.147169      -1.91617      -46.1249       46.1249       318.584       364.709    
  39  0.966208E-01  -2.33696      -56.2539       56.2539       311.637       367.891    
  40  0.952887     -0.482588E-01  -1.16166       1.16166       298.574       299.735    
  41  0.155551      -1.86078      -44.7915       44.7915       319.432       364.224    
  42  0.645067     -0.438401      -10.5529       10.5529       306.186       316.739    
  43  0.394254     -0.930759      -22.4047       22.4047       320.138       342.542    
  44  0.546893     -0.603501      -14.5271       14.5271       330.093       344.621    
  45  0.390314     -0.940803      -22.6464       22.6464       311.308       333.954    
  46  0.311561      -1.16616      -28.0711       28.0711       320.415       348.487    
  47  0.752427E-01  -2.58704      -62.2736       62.2736       324.811       387.084    
  48  0.144673      -1.93328      -46.5368       46.5368       326.285       372.822    
  49  0.297567      -1.21212      -29.1773       29.1773       310.037       339.214    
  50  0.544131     -0.608565      -14.6490       14.6490       324.833       339.482    
  51  0.750603E-01  -2.58946      -62.3320       62.3320       330.113       392.445    
  52  0.127547      -2.05927      -49.5695       49.5695       308.583       358.153    
  53  0.839209     -0.175296      -4.21961       4.21961       323.311       327.531    
  54  0.718305     -0.330861      -7.96429       7.96429       318.875       326.839    
  55  0.246952      -1.39856      -33.6653       33.6653       348.303       381.969    
  56  0.550710     -0.596548      -14.3597       14.3597       331.399       345.759    
  57  0.588510     -0.530162      -12.7617       12.7617       319.650       332.412    
  58  0.361548      -1.01736      -24.4893       24.4893       292.110       316.599    
  59  0.962524     -0.381965E-01 -0.919443      0.919443       304.134       305.054    
  60  0.510442     -0.672478      -16.1875       16.1875       325.176       341.363    
  61  0.177498      -1.72880      -41.6145       41.6145       319.480       361.095    
  62  0.775349     -0.254441      -6.12476       6.12476       318.706       324.831    
  63  0.313518E-01  -3.46248      -83.3468       83.3468       316.644       399.990    
  64  0.136553      -1.99105      -47.9272       47.9272       305.597       353.524    
loop,thermsimp(1:2)       91   54.7419       4.01732    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    228        297.68          0.88          1.10         23.11          0.01          0.05         25.14
Just calling func    0   0         25.14


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    297.68
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    24.0714               253
loop is:       91
neval is:      227
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       91      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    24.0714               253
loop is:       92
neval is:      227


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      253
neval,tstepnext:      227     253

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.218624      -1.52040      -36.5981       36.5981       282.492       319.090    
   2  0.389473     -0.942961      -22.6984       22.6984       287.238       309.936    
   3  0.919121     -0.843378E-01  -2.03013       2.03013       294.455       296.485    
   4  0.970518     -0.299250E-01 -0.720337      0.720337       295.636       296.356    
   5  0.713317     -0.337830      -8.13203       8.13203       298.574       306.706    
   6  0.639607     -0.446902      -10.7576       10.7576       291.268       302.025    
   7  0.712661     -0.338749      -8.15415       8.15415       295.168       303.322    
   8  0.212311      -1.54970      -37.3035       37.3035       298.353       335.656    
   9  0.831769     -0.184200      -4.43396       4.43396       304.134       308.568    
  10  0.794875     -0.229571      -5.52608       5.52608       292.278       297.804    
  11  0.909815     -0.945137E-01  -2.27508       2.27508       304.687       306.962    
  12  0.753651E-01  -2.58541      -62.2344       62.2344       304.814       367.048    
  13  0.676081     -0.391442      -9.42256       9.42256       292.110       301.532    
  14  0.597437     -0.515107      -12.3993       12.3993       306.186       318.585    
  15  0.146947      -1.91768      -46.1613       46.1613       300.320       346.481    
  16  0.854910     -0.156760      -3.77342       3.77342       314.938       318.711    
  17  0.984999     -0.151146E-01 -0.363829      0.363829       308.487       308.851    
  18  0.533419     -0.628448      -15.1276       15.1276       304.685       319.813    
  19  0.383774     -0.957703      -23.0532       23.0532       314.778       337.831    
  20  0.691729     -0.368561      -8.87178       8.87178       286.088       294.960    
  21  0.313732E-01  -3.46180      -83.3303       83.3303       319.349       402.680    
  22  0.415635     -0.877947      -21.1334       21.1334       323.294       344.428    
  23  0.288746      -1.24221      -29.9017       29.9017       318.706       348.608    
  24  0.176464      -1.73464      -41.7551       41.7551       309.825       351.580    
  25  0.881312     -0.126344      -3.04128       3.04128       318.875       321.916    
  26  0.962783     -0.379267E-01 -0.912949      0.912949       304.975       305.887    
  27  0.415450     -0.878393      -21.1441       21.1441       323.311       344.455    
  28  0.271836      -1.30256      -31.3544       31.3544       305.275       336.629    
  29  0.926655     -0.761736E-01  -1.83360       1.83360       311.913       313.747    
  30  0.277790      -1.28089      -30.8328       30.8328       295.939       326.772    
  31  0.189974      -1.66087      -39.9794       39.9794       302.687       342.666    
  32  0.410540     -0.890281      -21.4303       21.4303       319.650       341.080    
  33  0.952387     -0.487839E-01  -1.17430       1.17430       311.308       312.482    
  34  0.896015     -0.109798      -2.64299       2.64299       311.734       314.377    
  35  0.121549E-01  -4.41002      -106.155       106.155       310.037       416.192    
  36  0.723911     -0.323087      -7.77716       7.77716       325.466       333.243    
  37  0.759053     -0.275683      -6.63608       6.63608       324.833       331.469    
  38  0.969929     -0.305320E-01 -0.734948      0.734948       317.183       317.918    
  39  0.852636     -0.159422      -3.83751       3.83751       297.624       301.461    
  40  0.730471     -0.314065      -7.55999       7.55999       325.176       332.736    
  41  0.528358     -0.637981      -15.3571       15.3571       320.138       335.495    
  42  0.404403     -0.905344      -21.7929       21.7929       321.980       343.773    
  43  0.232822      -1.45748      -35.0836       35.0836       316.129       351.213    
  44  0.847643     -0.165296      -3.97889       3.97889       309.584       313.563    
  45  0.429393E-01  -3.14797      -75.7759       75.7759       302.517       378.293    
  46  0.673157     -0.395777      -9.52691       9.52691       330.093       339.620    
  47  0.806068E-01  -2.51817      -60.6159       60.6159       331.399       392.015    
  48  0.926018     -0.768619E-01  -1.85017       1.85017       291.756       293.606    
  49  0.167973      -1.78395      -42.9422       42.9422       320.415       363.358    
  50  0.780773     -0.247471      -5.95697       5.95697       322.844       328.801    
  51  0.565702E-01  -2.87227      -69.1396       69.1396       305.597       374.736    
  52  0.646011     -0.436939      -10.5177       10.5177       308.583       319.101    
  53  0.455316     -0.786763      -18.9385       18.9385       319.480       338.419    
  54  0.410066     -0.891437      -21.4581       21.4581       319.432       340.890    
  55  0.934064     -0.682104E-01  -1.64192       1.64192       318.584       320.226    
  56  0.511079     -0.671231      -16.1575       16.1575       311.637       327.794    
  57  0.578130     -0.547957      -13.1901       13.1901       321.315       334.505    
  58  0.458047     -0.780783      -18.7945       18.7945       326.285       345.079    
  59  0.223630      -1.49776      -36.0533       36.0533       321.570       357.624    
  60  0.952824E-01  -2.35091      -56.5897       56.5897       348.303       404.893    
  61  0.995385     -0.462583E-02 -0.111350      0.111350       324.811       324.922    
  62  0.675298     -0.392602      -9.45047       9.45047       330.113       339.563    
  63  0.728172     -0.317218      -7.63588       7.63588       305.352       312.988    
  64  0.240868      -1.42350      -34.2657       34.2657       297.677       331.943    
loop,thermsimp(1:2)       92   36.5981       22.6984    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    229        302.38          0.87          1.10         23.16          0.01          0.05         25.19
Just calling func    0   0         25.19


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    230        300.31          0.88          1.10         23.14          0.00          0.04         25.16
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    300.31
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    24.0714               253
loop is:       92
neval is:      229
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       92      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    24.0714               253
loop is:       93
neval is:      229


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      253
neval,tstepnext:      229     253

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.148595      -1.90653      -45.8929       45.8929       291.756       337.649    
   2  0.695074     -0.363738      -8.75567       8.75567       286.088       294.843    
   3  0.541180     -0.614003      -14.7799       14.7799       295.636       310.416    
   4  0.189791      -1.66183      -40.0026       40.0026       294.455       334.457    
   5  0.245553      -1.40424      -33.8020       33.8020       292.278       326.080    
   6  0.641474     -0.443986      -10.6874       10.6874       297.624       308.311    
   7  0.308462      -1.17616      -28.3117       28.3117       292.110       320.421    
   8  0.478005     -0.738133      -17.7679       17.7679       291.268       309.036    
   9  0.395759     -0.926951      -22.3130       22.3130       295.168       317.481    
  10  0.438776E-01  -3.12635      -75.2556       75.2556       304.975       380.230    
  11  0.294628E-01  -3.52463      -84.8427       84.8427       298.574       383.416    
  12  0.331052E-01  -3.40806      -82.0368       82.0368       304.687       386.723    
  13  0.916325E-01  -2.38997      -57.5299       57.5299       304.134       361.664    
  14  0.985908     -0.141919E-01 -0.341618      0.341618       308.487       308.828    
  15  0.511724     -0.669970      -16.1271       16.1271       287.238       303.365    
  16  0.185695      -1.68365      -40.5278       40.5278       311.308       351.836    
  17  0.830711     -0.185474      -4.46461       4.46461       305.352       309.817    
  18  0.765179E-04  -9.47799      -228.148       228.148       309.584       537.732    
  19  0.129365      -2.04512      -49.2289       49.2289       311.913       361.142    
  20  0.796363     -0.227700      -5.48105       5.48105       311.734       317.215    
  21  0.589256     -0.528895      -12.7312       12.7312       317.183       329.915    
  22  0.770995     -0.260073      -6.26032       6.26032       306.186       312.446    
  23  0.685430     -0.377709      -9.09199       9.09199       314.938       324.030    
  24  0.487688     -0.718080      -17.2852       17.2852       282.492       299.777    
  25  0.114898      -2.16371      -52.0836       52.0836       308.583       360.667    
  26  0.165093      -1.80124      -43.3584       43.3584       304.685       348.043    
  27  0.302275      -1.19642      -28.7995       28.7995       318.584       347.383    
  28  0.123669      -2.09014      -50.3127       50.3127       318.875       369.187    
  29  0.960526     -0.402739E-01 -0.969448      0.969448       324.811       325.780    
  30  0.744557     -0.294966      -7.10024       7.10024       295.939       303.040    
  31  0.418436     -0.871232      -20.9718       20.9718       311.637       332.609    
  32  0.624411     -0.470947      -11.3363       11.3363       322.844       334.181    
  33  0.920055     -0.833222E-01  -2.00568       2.00568       324.833       326.839    
  34  0.330507      -1.10713      -26.6501       26.6501       297.677       324.327    
  35  0.889566     -0.117022      -2.81687       2.81687       325.176       327.993    
  36  0.269410      -1.31152      -31.5701       31.5701       325.466       357.036    
  37  0.458780     -0.779184      -18.7560       18.7560       321.315       340.071    
  38  0.952588     -0.485730E-01  -1.16922       1.16922       320.138       321.307    
  39  0.213836      -1.54254      -37.1312       37.1312       298.353       335.484    
  40  0.460697     -0.775015      -18.6557       18.6557       305.275       323.930    
  41  0.571693     -0.559153      -13.4596       13.4596       314.778       328.238    
  42  0.201363      -1.60265      -38.5779       38.5779       319.480       358.058    
  43  0.707817     -0.345570      -8.31835       8.31835       330.113       338.431    
  44  0.927118     -0.756745E-01  -1.82159       1.82159       330.093       331.915    
  45  0.288916      -1.24162      -29.8875       29.8875       319.432       349.320    
  46  0.702737     -0.352773      -8.49173       8.49173       319.650       328.142    
  47  0.253190      -1.37362      -33.0649       33.0649       302.687       335.752    
  48  0.709086     -0.343779      -8.27523       8.27523       321.980       330.255    
  49  0.399421     -0.917738      -22.0912       22.0912       323.294       345.386    
  50  0.837301     -0.177572      -4.27441       4.27441       323.311       327.586    
  51  0.906694     -0.979507E-01  -2.35781       2.35781       326.285       328.643    
  52  0.479547     -0.734913      -17.6904       17.6904       300.320       318.010    
  53  0.573668     -0.555704      -13.3766       13.3766       318.706       332.083    
  54  0.616113     -0.484325      -11.6584       11.6584       316.129       327.788    
  55  0.899004     -0.106467      -2.56282       2.56282       309.825       312.387    
  56  0.668105     -0.403310      -9.70823       9.70823       321.570       331.279    
  57  0.464354     -0.767107      -18.4653       18.4653       320.415       338.881    
  58  0.298472E-01  -3.51166      -84.5306       84.5306       304.814       389.345    
  59  0.458507     -0.779779      -18.7704       18.7704       305.597       324.367    
  60  0.372295E-01  -3.29065      -79.2106       79.2106       302.517       381.728    
  61  0.349332      -1.05173      -25.3167       25.3167       331.399       356.716    
  62  0.396867     -0.924153      -22.2457       22.2457       319.349       341.595    
  63  0.599776     -0.511199      -12.3053       12.3053       348.303       360.609    
  64  0.175124      -1.74226      -41.9386       41.9386       300.312       342.251    
loop,thermsimp(1:2)       93   45.8929       8.75567    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    231        290.58          0.86          1.09         23.16          0.03          0.04         25.18
Just calling func    0   0         25.18


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    232        295.46          0.88          1.09         23.06          0.06          0.05         25.13
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    290.58
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    24.0714               253
loop is:       93
neval is:      231
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       93      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    24.0714               253
loop is:       94
neval is:      231


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      253
neval,tstepnext:      231     253

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.842284     -0.171638      -4.13156       4.13156       286.088       290.219    
   2  0.478368     -0.737375      -17.7496       17.7496       282.492       300.242    
   3  0.283498      -1.26055      -30.3432       30.3432       295.939       326.282    
   4  0.520516     -0.652935      -15.7170       15.7170       287.238       302.955    
   5  0.703282E-01  -2.65458      -63.8995       63.8995       297.624       361.523    
   6  0.914137     -0.897748E-01  -2.16100       2.16100       308.487       310.648    
   7  0.479535     -0.734938      -17.6910       17.6910       291.268       308.959    
   8  0.921875     -0.813456E-01  -1.95810       1.95810       305.352       307.310    
   9  0.739547     -0.301718      -7.26277       7.26277       295.636       302.899    
  10  0.790753     -0.234770      -5.65124       5.65124       309.825       315.476    
  11  0.212247E-01  -3.85259      -92.7371       92.7371       306.186       398.923    
  12  0.286971      -1.24837      -30.0501       30.0501       311.734       341.784    
  13  0.695666     -0.362886      -8.73517       8.73517       295.168       303.903    
  14  0.534590     -0.626255      -15.0748       15.0748       300.320       315.395    
  15  0.945577     -0.559603E-01  -1.34704       1.34704       292.110       293.457    
  16  0.619446     -0.478930      -11.5285       11.5285       320.138       331.666    
  17  0.291083E-01  -3.53673      -85.1340       85.1340       305.275       390.409    
  18  0.372584E-01  -3.28988      -79.1919       79.1919       314.938       394.130    
  19  0.713241     -0.337936      -8.13458       8.13458       297.677       305.811    
  20  0.280281      -1.27196      -30.6179       30.6179       305.597       336.214    
  21  0.254796      -1.36729      -32.9126       32.9126       324.811       357.723    
  22  0.498598     -0.695955      -16.7526       16.7526       292.278       309.031    
  23  0.515261E-01  -2.96567      -71.3877       71.3877       324.833       396.221    
  24  0.347627      -1.05662      -25.4344       25.4344       323.311       348.746    
  25  0.696212     -0.362102      -8.71629       8.71629       316.129       324.845    
  26  0.707749E-01  -2.64825      -63.7471       63.7471       325.176       388.923    
  27  0.364523E-01  -3.31175      -79.7184       79.7184       319.650       399.368    
  28  0.895087E-02  -4.71600      -113.521       113.521       314.778       428.299    
  29  0.333194      -1.09903      -26.4552       26.4552       326.285       352.740    
  30  0.451375     -0.795457      -19.1477       19.1477       317.183       336.331    
  31  0.849961E-01  -2.46515      -59.3396       59.3396       321.980       381.320    
  32  0.524791     -0.644756      -15.5202       15.5202       321.570       337.091    
  33  0.641068     -0.444619      -10.7026       10.7026       330.093       340.796    
  34  0.757376     -0.277895      -6.68932       6.68932       318.706       325.395    
  35  0.760597     -0.273651      -6.58716       6.58716       311.637       318.224    
  36  0.709070     -0.343801      -8.27576       8.27576       322.844       331.120    
  37  0.794718     -0.229768      -5.53083       5.53083       294.455       299.985    
  38  0.869679     -0.139632      -3.36112       3.36112       298.353       301.714    
  39  0.229100E-01  -3.77618      -90.8980       90.8980       302.687       393.585    
  40  0.935590     -0.665776E-01  -1.60262       1.60262       291.756       293.358    
  41  0.889453     -0.117149      -2.81993       2.81993       330.113       332.933    
  42  0.529054     -0.636665      -15.3254       15.3254       320.415       335.741    
  43  0.907902     -0.966186E-01  -2.32574       2.32574       321.315       323.640    
  44  0.693802     -0.365568      -8.79973       8.79973       319.349       328.149    
  45  0.883803     -0.123521      -2.97333       2.97333       300.312       303.285    
  46  0.275134E-01  -3.59308      -86.4904       86.4904       323.294       409.785    
  47  0.324767      -1.12465      -27.0718       27.0718       318.584       345.656    
  48  0.853326     -0.158614      -3.81806       3.81806       304.685       308.503    
  49  0.325639      -1.12197      -27.0073       27.0073       319.432       346.439    
  50  0.773280     -0.257115      -6.18911       6.18911       311.308       317.497    
  51  0.108890      -2.21741      -53.3762       53.3762       331.399       384.776    
  52  0.188532E-01  -3.97107      -95.5893       95.5893       325.466       421.055    
  53  0.970927     -0.295045E-01 -0.710215      0.710215       319.480       320.190    
  54  0.549714     -0.598357      -14.4033       14.4033       348.303       362.707    
  55  0.937888E-01  -2.36671      -56.9700       56.9700       308.583       365.553    
  56  0.293516      -1.22582      -29.5073       29.5073       311.913       341.420    
  57  0.598789     -0.512846      -12.3449       12.3449       304.134       316.479    
  58  0.173412      -1.75209      -42.1752       42.1752       318.875       361.050    
  59  0.552776     -0.592802      -14.2696       14.2696       304.975       319.244    
  60  0.586717     -0.533213      -12.8352       12.8352       302.517       315.352    
  61  0.902886     -0.102159      -2.45911       2.45911       298.574       301.033    
  62  0.423679     -0.858778      -20.6720       20.6720       304.687       325.359    
  63  0.796344E-01  -2.53031      -60.9080       60.9080       304.814       365.722    
  64  0.894023     -0.112024      -2.69657       2.69657       290.580       293.276    
loop,thermsimp(1:2)       94   4.13156       17.7496    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    233        301.36          0.88          1.09         23.11          0.01          0.05         25.13
Just calling func    0   0         25.14


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    301.36
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    24.0714               253
loop is:       94
neval is:      232
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       94      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    24.0714               253
loop is:       95
neval is:      232


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      253
neval,tstepnext:      232     253

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.744650     -0.294841      -7.09722       7.09722       286.088       293.185    
   2  0.739179     -0.302215      -7.27474       7.27474       290.580       297.855    
   3  0.131167      -2.03128      -48.8957       48.8957       291.756       340.651    
   4  0.523356     -0.647493      -15.5861       15.5861       292.110       307.696    
   5  0.660412     -0.414891      -9.98701       9.98701       294.455       304.442    
   6  0.433074E-01  -3.13943      -75.5705       75.5705       282.492       358.062    
   7  0.480352     -0.733236      -17.6500       17.6500       298.574       316.224    
   8  0.808114     -0.213053      -5.12847       5.12847       298.353       303.481    
   9  0.723804     -0.323235      -7.78071       7.78071       295.636       303.417    
  10  0.322682      -1.13109      -27.2268       27.2268       287.238       314.465    
  11  0.898907     -0.106576      -2.56544       2.56544       300.312       302.878    
  12  0.359972      -1.02173      -24.5944       24.5944       295.168       319.762    
  13  0.879118     -0.128836      -3.10126       3.10126       297.677       300.778    
  14  0.963559     -0.371220E-01 -0.893577      0.893577       305.352       306.246    
  15  0.662848     -0.411210      -9.89839       9.89839       304.685       314.583    
  16  0.648402     -0.433244      -10.4288       10.4288       291.268       301.697    
  17  0.375343     -0.979916      -23.5879       23.5879       292.278       315.866    
  18  0.812441     -0.207712      -4.99992       4.99992       308.487       313.487    
  19  0.248177E-01  -3.69620      -88.9726       88.9726       302.517       391.490    
  20  0.653530     -0.425366      -10.2392       10.2392       300.320       310.559    
  21  0.712244     -0.339334      -8.16824       8.16824       309.825       317.993    
  22  0.358229      -1.02658      -24.7113       24.7113       304.134       328.846    
  23  0.325518      -1.12234      -27.0162       27.0162       311.308       338.324    
  24  0.770349     -0.260912      -6.28050       6.28050       311.637       317.917    
  25  0.633518E-01  -2.75905      -66.4142       66.4142       304.975       371.389    
  26  0.168796      -1.77907      -42.8246       42.8246       319.480       362.305    
  27  0.562007     -0.576241      -13.8709       13.8709       321.315       335.186    
  28  0.156316      -1.85588      -44.6735       44.6735       316.129       360.803    
  29  0.967732     -0.328002E-01 -0.789547      0.789547       304.687       305.476    
  30  0.538071     -0.619766      -14.9186       14.9186       318.706       333.625    
  31  0.967495     -0.330453E-01 -0.795447      0.795447       295.939       296.735    
  32  0.771619     -0.259265      -6.24086       6.24086       319.349       325.590    
  33  0.246044      -1.40225      -33.7540       33.7540       322.844       356.598    
  34  0.700731     -0.355631      -8.56054       8.56054       320.138       328.698    
  35  0.382714     -0.960468      -23.1198       23.1198       330.113       353.232    
  36  0.580395     -0.544047      -13.0960       13.0960       320.415       333.511    
  37  0.305131      -1.18701      -28.5731       28.5731       305.597       334.170    
  38  0.624250     -0.471204      -11.3425       11.3425       317.183       328.526    
  39  0.575432     -0.552634      -13.3027       13.3027       321.570       334.873    
  40  0.701335     -0.354770      -8.53981       8.53981       330.093       338.633    
  41  0.290211      -1.23715      -29.7798       29.7798       311.913       341.693    
  42  0.140976      -1.95916      -47.1598       47.1598       311.734       358.894    
  43  0.275714      -1.28839      -31.0134       31.0134       318.584       349.597    
  44  0.856479     -0.154925      -3.72927       3.72927       319.432       323.161    
  45  0.994286     -0.573084E-02 -0.137949      0.137949       323.311       323.449    
  46  0.913008     -0.910102E-01  -2.19074       2.19074       326.285       328.475    
  47  0.204063      -1.58933      -38.2574       38.2574       324.811       363.068    
  48  0.388833     -0.944605      -22.7380       22.7380       318.875       341.613    
  49  0.781619     -0.246387      -5.93089       5.93089       297.624       303.555    
  50  0.373421     -0.985049      -23.7115       23.7115       348.303       372.015    
  51  0.834918     -0.180422      -4.34300       4.34300       308.583       312.926    
  52  0.174969      -1.74315      -41.9600       41.9600       304.814       346.774    
  53  0.531353     -0.632329      -15.2210       15.2210       321.980       337.201    
  54  0.339530      -1.08019      -26.0017       26.0017       331.399       357.401    
  55  0.929760     -0.728288E-01  -1.75309       1.75309       325.176       326.929    
  56  0.223523      -1.49824      -36.0647       36.0647       305.275       341.339    
  57  0.557869     -0.583631      -14.0488       14.0488       302.687       316.736    
  58  0.521577     -0.650898      -15.6680       15.6680       314.938       330.606    
  59  0.856336     -0.155092      -3.73328       3.73328       324.833       328.566    
  60  0.645536     -0.437674      -10.5354       10.5354       306.186       316.721    
  61  0.438677     -0.823992      -19.8346       19.8346       319.650       339.484    
  62  0.346732      -1.05920      -25.4965       25.4965       323.294       348.791    
  63  0.902848     -0.102201      -2.46011       2.46011       325.466       327.926    
  64  0.578219     -0.547803      -13.1864       13.1864       301.361       314.548    
loop,thermsimp(1:2)       95   7.09722       7.27474    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    234        306.25          0.88          1.10         23.10          0.02          0.05         25.15
Just calling func    0   0         25.14


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    306.25
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    24.0714               253
loop is:       95
neval is:      233
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       95      95
 right before GO TO 250



 right after: 250 IF (loop < nloop) CYCLE Main_loop 
loop,nloop:       95      95
loop was equal to nloop so did not start main cycle again, now will do the following: 




calculate mean & stdev of func values for current simplex (hmean,hstd)
 write hstd
 RMS of function values of last simplex =   13.2811    

hmean,hstd :    310.016       13.2811    


writing best so far by calling functn2 
 but just writing params not moments. see the change in functn2
hmean,hstd :    310.016       13.2811    
h(1),h(best1),h(np1) :    286.088       282.492       306.247    
htherm(1),htherm(best1),htherm(np1) :    293.185       358.062       391.490    


 CHECK hstd>?stopcr
---------> IF hstd>stopcr (and maxfn,neval.nevalp conditions as well) then set iflag and loop to zero and go to the start of the main cycle again 
---------> IF hstd<=stopcr then find the centroid of the current simplex and get the function value there 
 ............
 ............
 ............
 ............
  .NOT. (hstd > stopcr .AND. (((maxfn>=0).AND.(neval <= maxfn)).OR.((maxfn<0).AND.(nevalp <= -1*maxfn))  )) 
  so find the centroid of current simplex and get teh function value there 
  call functn(p,func) 
  neval = neval + 1
  nevalp = nevalp + 1
  IF ((iprint > 0).AND.(realrank==0)) THEN 
     IF (MOD(neval,iprint) == 0) WRITE (lout,5100) neval, func, p 
  END IF  
  CHECK wtr the no. of func values allowed, maxfn, has been overrun. if so, exit with ifault= 1 
  IF maxfn>0 check based on neval. if maxfn<0 check based on nevalp. 
  i.e.: ---->IF (((maxfn>=0).AND.(neval > maxfn)).OR.((maxfn<0).AND.(nevalp > -1*maxfn))) THEN
        ---->IF the above if statement true then something ... RETURN 
        ---->IF the above if statement not true then you get out of that if statement ... CONVGENCE CRTI SATISFIED - RETURN 
 ............
 ............
iter,obj,time:    235        303.33          0.88          1.10         23.15          0.01          0.04         25.17

 EVIDENCE OF CONVERGENCE
 Centroid of last simplex =
    4.0164      -1.0335       3.5901      -100.00      0.20060     -0.91055    
    2.4300      -100.00       2.4120      0.85354       1.0986     -0.14406E-01
    2.4000       0.0000       0.0000      -1.1512       0.0000       0.0000    
    0.0000      -1.2210      -2.5000       9243.7       13429.      -661.06    

   -1942.7      -2.0000      -5.0775      -2.8875      -4.7086      -3.1607    
   -13.772      -2.5283       1358.8       0.0000       3354.5       4763.8    
    3323.5       5072.9       5329.0       2500.1       4298.4      0.22233E-01
  -0.65275E-01   0.0000     -0.57552E-01 -0.26503E-01 -0.11361      0.86309E-01

  -0.14535      0.13949E-01 -0.76570     -0.85354       0.0000      0.20902    
   0.67861E-01  0.85411E-01  0.95463E-02  0.86104E-03  0.27225E-01 -0.26261E-01
  -0.49543E-01  0.52257E-01 -0.26043     -0.85354       0.0000     -0.89127    
   -1.7665       3.7028      -1.1108       0.0000       0.0000       9.0827    

    9.1633      -5025.2      -4.0000     -0.51707E-01 -0.13115       8.9470    
    8.7648      -7585.9      -4.0000      0.28702      0.52784       9.2534    
    9.0732      -5394.1      -4.0000      0.21969      0.21969       9.4096    
    8.8732      -4267.7      -2.0000    
 Function value at centroid =   303.329    

beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    24.0714               253
loop is:        1
neval is:      234


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      253
neval,tstepnext:      234     253

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.204528E-01  -3.88964      -93.6289       93.6289       286.088       379.717    
   2  0.977100     -0.231667E-01 -0.557654      0.557654       295.939       296.497    
   3  0.491467     -0.710361      -17.0994       17.0994       290.580       307.679    
   4  0.802113E-01  -2.52309      -60.7343       60.7343       297.677       358.411    
   5  0.891044     -0.115361      -2.77691       2.77691       291.268       294.045    
   6  0.397551     -0.922433      -22.2042       22.2042       300.312       322.516    
   7  0.121203      -2.11029      -50.7976       50.7976       295.636       346.433    
   8  0.789985E-01  -2.53833      -61.1010       61.1010       298.353       359.454    
   9  0.921855     -0.813679E-01  -1.95864       1.95864       297.624       299.582    
  10  0.252671      -1.37567      -33.1142       33.1142       294.455       327.569    
  11  0.787271     -0.239182      -5.75745       5.75745       304.687       310.444    
  12  0.634653     -0.454676      -10.9447       10.9447       305.352       316.297    
  13  0.706648     -0.347222      -8.35812       8.35812       292.110       300.468    
  14  0.349740E-01  -3.35315      -80.7150       80.7150       300.320       381.035    
  15  0.686787     -0.375731      -9.04436       9.04436       308.583       317.627    
  16  0.309348      -1.17329      -28.2427       28.2427       308.487       336.729    
  17  0.703748     -0.351336      -8.45714       8.45714       287.238       295.695    
  18  0.985092     -0.150207E-01 -0.361570      0.361570       301.361       301.723    
  19  0.440741     -0.819298      -19.7216       19.7216       304.685       324.407    
  20  0.796112     -0.228015      -5.48864       5.48864       292.278       297.767    
  21  0.451938     -0.794210      -19.1177       19.1177       298.574       317.692    
  22  0.230902      -1.46576      -35.2829       35.2829       306.186       341.469    
  23  0.760212     -0.274159      -6.59938       6.59938       302.687       309.286    
  24  0.250434E-02  -5.98973      -144.181       144.181       311.637       455.818    
  25  0.627913E-01  -2.76794      -66.6281       66.6281       309.825       376.453    
  26  0.263128      -1.33511      -32.1381       32.1381       295.168       327.306    
  27  0.177986      -1.72605      -41.5484       41.5484       319.432       360.980    
  28  0.919776     -0.836247E-01  -2.01296       2.01296       323.311       325.324    
  29  0.854272     -0.157506      -3.79139       3.79139       319.349       323.141    
  30  0.648187     -0.433576      -10.4368       10.4368       325.176       335.612    
  31  0.853797     -0.158061      -3.80476       3.80476       325.466       329.270    
  32  0.484551     -0.724533      -17.4405       17.4405       326.285       343.725    
  33  0.423817     -0.858454      -20.6642       20.6642       317.183       337.848    
  34  0.932015     -0.704065E-01  -1.69478       1.69478       324.833       326.528    
  35  0.161906      -1.82074      -43.8278       43.8278       320.138       363.965    
  36  0.812519     -0.207617      -4.99762       4.99762       304.134       309.132    
  37  0.346838      -1.05890      -25.4892       25.4892       314.938       340.427    
  38  0.477141     -0.739943      -17.8114       17.8114       320.415       338.227    
  39  0.931946     -0.704808E-01  -1.69657       1.69657       318.706       320.403    
  40  0.189794      -1.66182      -40.0022       40.0022       305.597       345.599    
  41  0.361902      -1.01638      -24.4657       24.4657       321.570       346.036    
  42  0.775630E-02  -4.85925      -116.969       116.969       321.315       438.284    
  43  0.292497      -1.22930      -29.5909       29.5909       321.980       351.571    
  44  0.264300      -1.33067      -32.0311       32.0311       311.308       343.339    
  45  0.529597     -0.635638      -15.3007       15.3007       330.093       345.394    
  46  0.163272      -1.81234      -43.6254       43.6254       319.650       363.275    
  47  0.212593      -1.54838      -37.2716       37.2716       291.756       329.027    
  48  0.359173      -1.02395      -24.6479       24.6479       305.275       329.923    
  49  0.993707     -0.631295E-02 -0.151962      0.151962       318.875       319.027    
  50  0.261479      -1.34140      -32.2894       32.2894       311.913       344.203    
  51  0.441392     -0.817822      -19.6861       19.6861       304.814       324.500    
  52  0.624656     -0.470554      -11.3269       11.3269       323.294       334.621    
  53  0.646784     -0.435743      -10.4889       10.4889       318.584       329.073    
  54  0.343734      -1.06789      -25.7055       25.7055       330.113       355.818    
  55  0.438651     -0.824052      -19.8361       19.8361       322.844       342.680    
  56  0.476250     -0.741811      -17.8564       17.8564       331.399       349.256    
  57  0.665451     -0.407291      -9.80406       9.80406       282.492       292.296    
  58  0.903561E-01  -2.40400      -57.8675       57.8675       311.734       369.601    
  59  0.899286     -0.106155      -2.55529       2.55529       316.129       318.684    
  60  0.822477     -0.195434      -4.70438       4.70438       319.480       324.184    
  61  0.824462E-01  -2.49561      -60.0728       60.0728       324.811       384.884    
  62  0.689460     -0.371846      -8.95085       8.95085       304.975       313.925    
  63  0.124471      -2.08368      -50.1571       50.1571       348.303       398.460    
  64  0.215598      -1.53434      -36.9336       36.9336       306.247       343.180    
loop,thermsimp(1:2)        1   93.6289      0.557654    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    236        403.89          0.87          1.09         23.12          0.02          0.05         25.14
Just calling func    0   0         25.14


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    403.89
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    24.0714               253
loop is:        1
neval is:      235
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        1      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    24.0714               253
loop is:        2
neval is:      235


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      253
neval,tstepnext:      235     253

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.225672      -1.48867      -35.8344       35.8344       282.492       318.326    
   2  0.726663     -0.319292      -7.68580       7.68580       291.268       298.954    
   3  0.929061     -0.735808E-01  -1.77119       1.77119       287.238       289.009    
   4  0.764703     -0.268268      -6.45759       6.45759       295.939       302.397    
   5  0.119617      -2.12346      -51.1147       51.1147       292.278       343.393    
   6  0.369672     -0.995138      -23.9544       23.9544       297.624       321.578    
   7  0.875806     -0.132611      -3.19213       3.19213       292.110       295.302    
   8  0.657886     -0.418723      -10.0792       10.0792       301.361       311.440    
   9  0.387095E-01  -3.25167      -78.2722       78.2722       290.580       368.852    
  10  0.454078     -0.789485      -19.0040       19.0040       304.134       323.138    
  11  0.890470     -0.116006      -2.79242       2.79242       302.687       305.479    
  12  0.118445      -2.13331      -51.3516       51.3516       304.687       356.038    
  13  0.190238      -1.65948      -39.9460       39.9460       304.975       344.921    
  14  0.435624     -0.830976      -20.0027       20.0027       305.352       325.355    
  15  0.768655     -0.263114      -6.33351       6.33351       308.583       314.917    
  16  0.870896E-01  -2.44082      -58.7539       58.7539       298.574       357.328    
  17  0.936453     -0.656556E-01  -1.58042       1.58042       316.129       317.710    
  18  0.159312      -1.83689      -44.2165       44.2165       318.875       363.091    
  19  0.988165     -0.119051E-01 -0.286572      0.286572       318.706       318.993    
  20  0.713347     -0.337787      -8.13100       8.13100       300.312       308.443    
  21  0.417075     -0.874489      -21.0502       21.0502       319.349       340.399    
  22  0.719048     -0.329827      -7.93939       7.93939       319.480       327.419    
  23  0.785519     -0.241411      -5.81110       5.81110       304.685       310.496    
  24  0.356994      -1.03004      -24.7944       24.7944       304.814       329.608    
  25  0.357951      -1.02736      -24.7300       24.7300       323.311       348.041    
  26  0.154816      -1.86552      -44.9056       44.9056       324.833       369.739    
  27  0.246912      -1.39872      -33.6692       33.6692       295.168       328.837    
  28  0.553458     -0.591570      -14.2399       14.2399       294.455       308.695    
  29  0.729602     -0.315256      -7.58865       7.58865       291.756       299.344    
  30  0.605470     -0.501750      -12.0778       12.0778       318.584       330.662    
  31  0.278987E-01  -3.57918      -86.1557       86.1557       325.466       411.621    
  32  0.187991      -1.67136      -40.2320       40.2320       305.275       345.507    
  33  0.543158     -0.610355      -14.6921       14.6921       323.294       337.986    
  34  0.996749     -0.325625E-02 -0.783824E-01  0.783824E-01   325.176       325.254    
  35  0.540727     -0.614841      -14.8001       14.8001       308.487       323.287    
  36  0.833271E-01  -2.48498      -59.8169       59.8169       317.183       377.000    
  37  0.404538     -0.905011      -21.7849       21.7849       320.415       342.200    
  38  0.147302      -1.91527      -46.1032       46.1032       314.938       361.041    
  39  0.364226E-01  -3.31257      -79.7381       79.7381       306.186       385.924    
  40  0.381304     -0.964158      -23.2086       23.2086       322.844       346.053    
  41  0.737758     -0.304140      -7.32106       7.32106       306.247       313.568    
  42  0.179374      -1.71828      -41.3614       41.3614       311.308       352.669    
  43  0.281757      -1.26671      -30.4915       30.4915       326.285       356.776    
  44  0.192633      -1.64697      -39.6448       39.6448       311.913       351.558    
  45  0.954983     -0.460617E-01  -1.10877       1.10877       330.093       331.202    
  46  0.710258     -0.342127      -8.23548       8.23548       305.597       313.832    
  47  0.831769     -0.184201      -4.43397       4.43397       321.570       326.004    
  48  0.912541     -0.915218E-01  -2.20306       2.20306       295.636       297.839    
  49  0.221543      -1.50714      -36.2790       36.2790       331.399       367.678    
  50  0.690803E-02  -4.97507      -119.757       119.757       321.980       441.737    
  51  0.162616      -1.81637      -43.7224       43.7224       330.113       373.835    
  52  0.869433     -0.139913      -3.36791       3.36791       297.677       301.045    
  53  0.541563     -0.613295      -14.7629       14.7629       298.353       313.116    
  54  0.310811      -1.16857      -28.1291       28.1291       319.432       347.561    
  55  0.879573     -0.128319      -3.08882       3.08882       319.650       322.739    
  56  0.262339      -1.33812      -32.2103       32.2103       320.138       352.348    
  57  0.651476     -0.428515      -10.3149       10.3149       311.734       322.049    
  58  0.498193     -0.696767      -16.7722       16.7722       309.825       326.597    
  59  0.251241      -1.38134      -33.2508       33.2508       286.088       319.339    
  60  0.704518     -0.350242      -8.43080       8.43080       300.320       308.751    
  61  0.387431     -0.948219      -22.8249       22.8249       324.811       347.636    
  62  0.447312     -0.804500      -19.3654       19.3654       348.303       367.669    
  63  0.842599     -0.171264      -4.12255       4.12255       321.315       325.437    
  64  0.754683     -0.281457      -6.77506       6.77506       403.895       410.670    
loop,thermsimp(1:2)        2   35.8344       7.68580    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    237        289.66          0.88          1.10         23.08          0.02          0.05         25.13
Just calling func    0   0         25.13


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    238        281.27          0.86          1.09         23.13          0.22          0.05         25.34
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    281.27
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    24.0714               253
loop is:        2
neval is:      237
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        2      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    24.0714               253
loop is:        3
neval is:      237


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      253
neval,tstepnext:      237     253

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.415533     -0.878194      -21.1393       21.1393       287.238       308.377    
   2  0.117190E-02  -6.74913      -162.461       162.461       292.110       454.570    
   3  0.432199     -0.838870      -20.1928       20.1928       295.636       315.829    
   4  0.466381     -0.762753      -18.3605       18.3605       291.268       309.628    
   5  0.696685     -0.361422      -8.69992       8.69992       291.756       300.456    
   6  0.193714      -1.64137      -39.5101       39.5101       297.677       337.187    
   7  0.535145     -0.625217      -15.0498       15.0498       295.939       310.989    
   8  0.812984     -0.207044      -4.98384       4.98384       302.687       307.671    
   9  0.956789     -0.441723E-01  -1.06329       1.06329       300.312       301.375    
  10  0.496711E-01  -3.00233      -72.2703       72.2703       294.455       366.725    
  11  0.206308E-01  -3.88097      -93.4204       93.4204       300.320       393.740    
  12  0.423434     -0.859358      -20.6860       20.6860       304.685       325.371    
  13  0.216826      -1.52866      -36.7970       36.7970       301.361       338.158    
  14  0.792422     -0.232661      -5.60048       5.60048       298.353       303.953    
  15  0.265940      -1.32449      -31.8822       31.8822       306.247       338.129    
  16  0.993400     -0.662201E-02 -0.159401      0.159401       305.597       305.756    
  17  0.645200E-01  -2.74078      -65.9744       65.9744       308.583       374.557    
  18  0.651527     -0.428436      -10.3131       10.3131       316.129       326.442    
  19  0.858875     -0.152131      -3.66201       3.66201       282.492       286.154    
  20  0.126056      -2.07103      -49.8525       49.8525       318.706       368.559    
  21  0.772661E-01  -2.56050      -61.6348       61.6348       286.088       347.723    
  22  0.441429     -0.817737      -19.6841       19.6841       297.624       317.308    
  23  0.166586      -1.79224      -43.1417       43.1417       311.734       354.876    
  24  0.217490      -1.52560      -36.7234       36.7234       319.650       356.373    
  25  0.632871     -0.457488      -11.0124       11.0124       304.134       315.147    
  26  0.201694      -1.60100      -38.5384       38.5384       308.487       347.025    
  27  0.282690      -1.26341      -30.4119       30.4119       325.176       355.588    
  28  0.255086E-01  -3.66874      -88.3117       88.3117       305.352       393.664    
  29  0.562308     -0.575706      -13.8580       13.8580       321.315       335.173    
  30  0.283366E-01  -3.56360      -85.7808       85.7808       321.570       407.351    
  31  0.404254E-01  -3.20830      -77.2281       77.2281       309.825       387.053    
  32  0.170475      -1.76917      -42.5863       42.5863       319.480       362.066    
  33  0.141712      -1.95396      -47.0344       47.0344       295.168       342.202    
  34  0.773173     -0.257253      -6.19243       6.19243       304.814       311.006    
  35  0.255978      -1.36266      -32.8012       32.8012       318.584       351.385    
  36  0.823739     -0.193902      -4.66748       4.66748       330.093       334.761    
  37  0.166307      -1.79392      -43.1821       43.1821       323.294       366.476    
  38  0.676319     -0.391090      -9.41407       9.41407       319.349       328.763    
  39  0.144546      -1.93416      -46.5579       46.5579       320.415       366.973    
  40  0.593436     -0.521826      -12.5611       12.5611       292.278       304.839    
  41  0.762921     -0.270600      -6.51372       6.51372       304.975       311.488    
  42  0.855796     -0.155724      -3.74848       3.74848       305.275       309.023    
  43  0.433555     -0.835737      -20.1173       20.1173       322.844       342.962    
  44  0.252891      -1.37480      -33.0932       33.0932       319.432       352.525    
  45  0.942909     -0.587850E-01  -1.41504       1.41504       324.811       326.226    
  46  0.432313     -0.838605      -20.1864       20.1864       323.311       343.498    
  47  0.975713     -0.245869E-01 -0.591841      0.591841       311.913       312.505    
  48  0.541226     -0.613919      -14.7779       14.7779       320.138       334.916    
  49  0.255057      -1.36627      -32.8880       32.8880       311.308       344.196    
  50  0.202141      -1.59879      -38.4850       38.4850       304.687       343.172    
  51  0.949562     -0.517549E-01  -1.24581       1.24581       326.285       327.531    
  52  0.255660E-01  -3.66649      -88.2576       88.2576       298.574       386.831    
  53  0.306802      -1.18155      -28.4416       28.4416       314.938       343.379    
  54  0.243277E-01  -3.71614      -89.4527       89.4527       318.875       408.327    
  55  0.466793     -0.761870      -18.3393       18.3393       348.303       366.643    
  56  0.200407      -1.60740      -38.6924       38.6924       331.399       370.092    
  57  0.282970      -1.26241      -30.3880       30.3880       290.580       320.968    
  58  0.214232      -1.54069      -37.0867       37.0867       324.833       361.920    
  59  0.326606      -1.11900      -26.9359       26.9359       330.113       357.049    
  60  0.997507     -0.249621E-02 -0.600872E-01  0.600872E-01   317.183       317.244    
  61  0.426725     -0.851615      -20.4996       20.4996       306.186       326.685    
  62  0.862854     -0.147510      -3.55078       3.55078       403.895       407.445    
  63  0.737079     -0.305061      -7.34323       7.34323       325.466       332.809    
  64  0.976691     -0.235846E-01 -0.567714      0.567714       281.266       281.834    
loop,thermsimp(1:2)        3   21.1393       162.461    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    239        320.47          0.88          1.09         23.13          0.09          0.05         25.24
Just calling func    0   0         25.24


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    320.47
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    24.0714               253
loop is:        3
neval is:      238
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        3      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    24.0714               253
loop is:        4
neval is:      238


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      253
neval,tstepnext:      238     253

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.656626     -0.420640      -10.1254       10.1254       281.266       291.392    
   2  0.880966     -0.126736      -3.05071       3.05071       282.492       285.543    
   3  0.854972     -0.156687      -3.77167       3.77167       291.756       295.527    
   4  0.797101     -0.226774      -5.45877       5.45877       300.312       305.771    
   5  0.158477      -1.84214      -44.3430       44.3430       298.353       342.696    
   6  0.593839     -0.521148      -12.5447       12.5447       292.278       304.823    
   7  0.817101     -0.201993      -4.86225       4.86225       305.597       310.459    
   8  0.997190     -0.281377E-02 -0.677313E-01  0.677313E-01   302.687       302.755    
   9  0.402857     -0.909174      -21.8851       21.8851       287.238       309.123    
  10  0.690455     -0.370405      -8.91616       8.91616       305.275       314.191    
  11  0.609635     -0.494895      -11.9128       11.9128       291.268       303.181    
  12  0.491117     -0.711073      -17.1165       17.1165       295.939       313.056    
  13  0.990676     -0.936814E-02 -0.225504      0.225504       304.814       305.039    
  14  0.976919     -0.233519E-01 -0.562113      0.562113       304.975       305.537    
  15  0.692556     -0.367366      -8.84302       8.84302       311.913       320.756    
  16  0.549694     -0.598394      -14.4042       14.4042       304.134       318.539    
  17  0.538267E-01  -2.92199      -70.3362       70.3362       295.636       365.972    
  18  0.602193     -0.507178      -12.2085       12.2085       317.183       329.392    
  19  0.537276     -0.621243      -14.9542       14.9542       297.624       312.578    
  20  0.338220      -1.08406      -26.0948       26.0948       290.580       316.675    
  21  0.306772      -1.18165      -28.4440       28.4440       304.685       333.129    
  22  0.895389     -0.110497      -2.65983       2.65983       324.811       327.471    
  23  0.120096      -2.11946      -51.0184       51.0184       316.129       367.148    
  24  0.680166     -0.385418      -9.27754       9.27754       306.186       315.463    
  25  0.369434     -0.995782      -23.9699       23.9699       326.285       350.255    
  26  0.235484      -1.44611      -34.8099       34.8099       319.349       354.159    
  27  0.260836      -1.34386      -32.3487       32.3487       325.466       357.814    
  28  0.720259     -0.328144      -7.89889       7.89889       330.093       337.992    
  29  0.695069     -0.363744      -8.75582       8.75582       320.138       328.894    
  30  0.105076      -2.25307      -54.2346       54.2346       321.315       375.549    
  31  0.968349     -0.321628E-01 -0.774203      0.774203       297.677       298.451    
  32  0.974131     -0.262091E-01 -0.630890      0.630890       306.247       306.878    
  33  0.647785E-01  -2.73678      -65.8781       65.8781       301.361       367.239    
  34  0.910402     -0.938690E-01  -2.25956       2.25956       295.168       297.427    
  35  0.488733     -0.715939      -17.2336       17.2336       322.844       340.078    
  36  0.377436E-01  -3.27694      -78.8805       78.8805       304.687       383.567    
  37  0.154608      -1.86686      -44.9380       44.9380       314.938       359.876    
  38  0.277804      -1.28084      -30.8316       30.8316       323.311       354.143    
  39  0.969547     -0.309263E-01 -0.744439      0.744439       311.308       312.052    
  40  0.380083     -0.967367      -23.2859       23.2859       308.487       331.773    
  41  0.751822     -0.285256      -6.86650       6.86650       286.088       292.954    
  42  0.137692      -1.98274      -47.7273       47.7273       318.584       366.311    
  43  0.293470      -1.22598      -29.5111       29.5111       319.432       348.943    
  44  0.433705     -0.835390      -20.1090       20.1090       311.734       331.843    
  45  0.418034     -0.872194      -20.9949       20.9949       325.176       346.171    
  46  0.166728      -1.79139      -43.1213       43.1213       319.650       362.771    
  47  0.921960     -0.812537E-01  -1.95589       1.95589       330.113       332.068    
  48  0.412601     -0.885275      -21.3098       21.3098       324.833       346.143    
  49  0.925181     -0.777655E-01  -1.87192       1.87192       319.480       321.352    
  50  0.687711     -0.374386      -9.01200       9.01200       323.294       332.306    
  51  0.729890     -0.314862      -7.57917       7.57917       348.303       355.882    
  52  0.355028      -1.03556      -24.9273       24.9273       294.455       319.382    
  53  0.123338      -2.09283      -50.3773       50.3773       320.415       370.793    
  54  0.638370E-01  -2.75142      -66.2306       66.2306       318.706       384.937    
  55  0.379414     -0.969128      -23.3283       23.3283       331.399       354.728    
  56  0.643705     -0.440515      -10.6038       10.6038       308.583       319.187    
  57  0.172292      -1.75856      -42.3310       42.3310       298.574       340.905    
  58  0.996763     -0.324212E-02 -0.780422E-01  0.780422E-01   309.825       309.903    
  59  0.606366     -0.500272      -12.0422       12.0422       305.352       317.394    
  60  0.299698      -1.20498      -29.0056       29.0056       300.320       329.325    
  61  0.723907E-02  -4.92826      -118.630       118.630       321.570       440.201    
  62  0.197118      -1.62395      -39.0907       39.0907       403.895       442.985    
  63  0.316130      -1.15160      -27.7207       27.7207       318.875       346.595    
  64  0.115913      -2.15492      -51.8719       51.8719       320.470       372.342    
loop,thermsimp(1:2)        4   10.1254       3.05071    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    240        310.44          0.88          1.09         23.06          0.05          0.05         25.12
Just calling func    0   0         25.13


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    241        369.05          0.88          1.11         23.09          0.07          0.04         25.18
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  240    369.05        3.517    -0.8951      2.865     -100.0     0.1830    
                      -1.057      2.199     -100.0      1.852     0.8915    
                       1.061     0.3206      2.400      0.000      0.000    
                      -1.568      0.000      0.000      0.000     -1.221    

                      -2.500      9195.     0.1319E+05 -615.1     -1995.    
                      -2.000     -4.721     -2.144     -6.019     -3.767    
                      -11.86     -2.566      1359.      0.000      3354.    

                       4764.      3323.      5073.      5329.      2500.    
                       4298.     0.1242    -0.2192E-01  0.000     0.1123    
                     -0.2511E-02-0.2234E-01 0.2792E-01-0.9896E-01 0.2542E-01

                     -0.9739    -0.8915      0.000     0.3165     0.2371E-01
                      0.8541E-01 0.7935E-01-0.1812E-01 0.6687E-01 0.4925E-01
                     -0.2745E-01 0.2242     0.7965E-01-0.8915      0.000    

                     -0.7626    -0.3476E-01  28.65    -0.6303      0.000    
                       0.000      9.270      9.217     -4545.     -4.000    
                      0.2837     0.4467E-01  9.170      8.631     -1168.    

                      -4.000     0.8164E-01-0.1208      9.268      9.054    
                      -3272.     -4.000    -0.2365     0.1627      9.558    
                       8.854     -4458.     -2.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    310.44
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    24.0714               253
loop is:        4
neval is:      240
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        4      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    24.0714               253
loop is:        5
neval is:      240


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      253
neval,tstepnext:      240     253

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.630229     -0.461672      -11.1131       11.1131       282.492       293.605    
   2  0.876370     -0.131967      -3.17662       3.17662       281.266       284.443    
   3  0.840080     -0.174259      -4.19465       4.19465       286.088       290.282    
   4  0.608986E-01  -2.79854      -67.3649       67.3649       291.756       359.121    
   5  0.311901      -1.16507      -28.0448       28.0448       295.168       323.212    
   6  0.937552E-01  -2.36707      -56.9786       56.9786       297.677       354.655    
   7  0.608418     -0.496893      -11.9609       11.9609       302.687       314.648    
   8  0.297707      -1.21164      -29.1660       29.1660       291.268       320.434    
   9  0.365777      -1.00573      -24.2094       24.2094       292.278       316.487    
  10  0.194673      -1.63643      -39.3912       39.3912       304.814       344.205    
  11  0.941388     -0.604003E-01  -1.45392       1.45392       304.975       306.428    
  12  0.984881     -0.152343E-01 -0.366711      0.366711       300.312       300.679    
  13  0.750245     -0.287355      -6.91703       6.91703       306.247       313.164    
  14  0.437446     -0.826803      -19.9023       19.9023       287.238       307.140    
  15  0.174754      -1.74437      -41.9895       41.9895       309.825       351.814    
  16  0.300465E-01  -3.50501      -84.3704       84.3704       305.597       389.967    
  17  0.372924     -0.986380      -23.7435       23.7435       311.308       335.052    
  18  0.803506     -0.218771      -5.26612       5.26612       297.624       302.890    
  19  0.232583      -1.45851      -35.1083       35.1083       295.939       331.048    
  20  0.383368     -0.958759      -23.0787       23.0787       305.275       328.353    
  21  0.622786     -0.473552      -11.3991       11.3991       306.186       317.585    
  22  0.356422      -1.03164      -24.8330       24.8330       290.580       315.413    
  23  0.919964     -0.834212E-01  -2.00807       2.00807       305.352       307.360    
  24  0.550740     -0.596492      -14.3584       14.3584       304.134       318.493    
  25  0.402627     -0.909745      -21.8988       21.8988       308.583       330.482    
  26  0.256265      -1.36154      -32.7743       32.7743       294.455       327.229    
  27  0.763510     -0.269828      -6.49515       6.49515       311.913       318.408    
  28  0.388963     -0.944271      -22.7299       22.7299       319.480       342.210    
  29  0.981923     -0.182423E-01 -0.439117      0.439117       324.811       325.250    
  30  0.656629     -0.420635      -10.1253       10.1253       320.138       330.263    
  31  0.932472     -0.699161E-01  -1.68298       1.68298       300.320       302.003    
  32  0.336775      -1.08834      -26.1979       26.1979       317.183       343.381    
  33  0.810758     -0.209786      -5.04984       5.04984       308.487       313.537    
  34  0.557014     -0.585166      -14.0857       14.0857       311.734       325.820    
  35  0.652747     -0.426565      -10.2680       10.2680       330.113       340.381    
  36  0.890774     -0.115665      -2.78421       2.78421       323.294       326.079    
  37  0.703035     -0.352349      -8.48153       8.48153       304.685       313.166    
  38  0.534296     -0.626805      -15.0881       15.0881       330.093       345.182    
  39  0.604162     -0.503914      -12.1299       12.1299       322.844       334.974    
  40  0.545557     -0.605948      -14.5860       14.5860       298.574       313.160    
  41  0.371346     -0.990620      -23.8456       23.8456       298.353       322.198    
  42  0.491801     -0.709680      -17.0830       17.0830       324.833       341.916    
  43  0.879731     -0.128139      -3.08449       3.08449       325.176       328.260    
  44  0.995113     -0.489866E-02 -0.117917      0.117917       318.875       318.993    
  45  0.467927     -0.759444      -18.2809       18.2809       319.432       337.713    
  46  0.355083      -1.03540      -24.9236       24.9236       326.285       351.208    
  47  0.216960      -1.52804      -36.7821       36.7821       323.311       360.093    
  48  0.276988      -1.28378      -30.9024       30.9024       319.349       350.252    
  49  0.905458     -0.993144E-01  -2.39063       2.39063       331.399       333.790    
  50  0.704241     -0.350635      -8.44026       8.44026       348.303       356.744    
  51  0.784564     -0.242627      -5.84038       5.84038       325.466       331.306    
  52  0.329376      -1.11055      -26.7326       26.7326       314.938       341.670    
  53  0.845894     -0.167361      -4.02861       4.02861       319.650       323.678    
  54  0.645172     -0.438238      -10.5490       10.5490       295.636       306.185    
  55  0.279949      -1.27315      -30.6464       30.6464       318.584       349.230    
  56  0.149089      -1.90321      -45.8130       45.8130       316.129       361.942    
  57  0.887681     -0.119143      -2.86793       2.86793       301.361       304.229    
  58  0.582426     -0.540553      -13.0119       13.0119       320.415       333.427    
  59  0.221293      -1.50827      -36.3061       36.3061       320.470       356.776    
  60  0.839449     -0.175010      -4.21273       4.21273       321.315       325.527    
  61  0.383721     -0.957840      -23.0565       23.0565       304.687       327.743    
  62  0.933136     -0.692040E-01  -1.66584       1.66584       318.706       320.372    
  63  0.148663      -1.90607      -45.8819       45.8819       321.570       367.452    
  64  0.788780     -0.237267      -5.71135       5.71135       310.438       316.149    
loop,thermsimp(1:2)        5   11.1131       3.17662    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    242        305.85          0.88          1.10         23.13          0.01          0.04         25.16
Just calling func    0   0         25.16


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    243        339.15          0.86          1.09         23.05          0.09          0.04         25.14
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    305.85
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    24.0714               253
loop is:        5
neval is:      242
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        5      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    24.0714               253
loop is:        6
neval is:      242


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      253
neval,tstepnext:      242     253

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.215976      -1.53259      -36.8915       36.8915       281.266       318.158    
   2  0.942431     -0.592928E-01  -1.42726       1.42726       286.088       287.515    
   3  0.193824      -1.64081      -39.4965       39.4965       282.492       321.988    
   4  0.162512      -1.81700      -43.7378       43.7378       300.312       344.050    
   5  0.625243     -0.469616      -11.3043       11.3043       300.320       311.624    
   6  0.499178     -0.694793      -16.7246       16.7246       297.624       314.348    
   7  0.706095     -0.348006      -8.37699       8.37699       301.361       309.738    
   8  0.527414     -0.639770      -15.4001       15.4001       295.636       311.036    
   9  0.575748     -0.552085      -13.2894       13.2894       304.975       318.264    
  10  0.490522     -0.712286      -17.1457       17.1457       287.238       304.384    
  11  0.306517      -1.18248      -28.4640       28.4640       305.352       333.816    
  12  0.798470     -0.225057      -5.41744       5.41744       298.574       303.991    
  13  0.333550      -1.09796      -26.4295       26.4295       306.247       332.676    
  14  0.166731      -1.79138      -43.1209       43.1209       304.685       347.806    
  15  0.443580     -0.812878      -19.5671       19.5671       308.487       328.054    
  16  0.669985     -0.400500      -9.64060       9.64060       302.687       312.328    
  17  0.339921      -1.07904      -25.9740       25.9740       290.580       316.554    
  18  0.201260      -1.60316      -38.5903       38.5903       310.438       349.028    
  19  0.772250     -0.258447      -6.22117       6.22117       292.278       298.499    
  20  0.401372E-01  -3.21545      -77.4004       77.4004       306.186       383.586    
  21  0.940962     -0.608526E-01  -1.46481       1.46481       311.913       313.378    
  22  0.115324      -2.16001      -51.9945       51.9945       304.134       356.129    
  23  0.939991E-01  -2.36447      -56.9161       56.9161       318.875       375.791    
  24  0.412221     -0.886196      -21.3320       21.3320       318.706       340.038    
  25  0.136462      -1.99171      -47.9432       47.9432       291.268       339.211    
  26  0.310095      -1.17088      -28.1846       28.1846       298.353       326.537    
  27  0.985727     -0.143755E-01 -0.346038      0.346038       295.168       295.514    
  28  0.900161     -0.105182      -2.53187       2.53187       319.650       322.182    
  29  0.250220      -1.38542      -33.3489       33.3489       324.811       358.160    
  30  0.780405     -0.247942      -5.96831       5.96831       321.315       327.283    
  31  0.228719      -1.47526      -35.5115       35.5115       311.734       347.245    
  32  0.407088     -0.898727      -21.6336       21.6336       323.294       344.928    
  33  0.975627     -0.246749E-01 -0.593960      0.593960       294.455       295.049    
  34  0.885140     -0.122009      -2.93694       2.93694       304.687       307.624    
  35  0.896135     -0.109664      -2.63977       2.63977       325.176       327.815    
  36  0.856661     -0.154713      -3.72416       3.72416       305.275       308.999    
  37  0.258643      -1.35231      -32.5519       32.5519       320.138       352.690    
  38  0.336283      -1.08980      -26.2330       26.2330       308.583       334.816    
  39  0.868205     -0.141327      -3.40194       3.40194       295.939       299.341    
  40  0.937935     -0.640747E-01  -1.54237       1.54237       325.466       327.008    
  41  0.418906     -0.870109      -20.9447       20.9447       320.415       341.360    
  42  0.351040      -1.04685      -25.1992       25.1992       331.399       356.599    
  43  0.611628E-01  -2.79422      -67.2607       67.2607       322.844       390.105    
  44  0.153518      -1.87394      -45.1083       45.1083       311.308       356.416    
  45  0.938341     -0.636423E-01  -1.53196       1.53196       319.432       320.964    
  46  0.598133     -0.513942      -12.3713       12.3713       330.113       342.484    
  47  0.795771     -0.228444      -5.49897       5.49897       314.938       320.437    
  48  0.295375      -1.21951      -29.3553       29.3553       324.833       354.188    
  49  0.804738     -0.217239      -5.22925       5.22925       319.480       324.709    
  50  0.260094      -1.34671      -32.4173       32.4173       317.183       349.601    
  51  0.640517     -0.445479      -10.7233       10.7233       304.814       315.537    
  52  0.221872      -1.50566      -36.2432       36.2432       330.093       366.337    
  53  0.837141     -0.177762      -4.27899       4.27899       318.584       322.863    
  54  0.212745      -1.54766      -37.2544       37.2544       319.349       356.604    
  55  0.162033      -1.81996      -43.8089       43.8089       326.285       370.094    
  56  0.631631     -0.459450      -11.0596       11.0596       309.825       320.884    
  57  0.816014E-01  -2.50591      -60.3207       60.3207       297.677       357.998    
  58  0.754954     -0.281099      -6.76644       6.76644       348.303       355.070    
  59  0.568761E-01  -2.86688      -69.0098       69.0098       320.470       389.480    
  60  0.610521     -0.493442      -11.8778       11.8778       291.756       303.634    
  61  0.691718     -0.368577      -8.87215       8.87215       323.311       332.183    
  62  0.330677      -1.10661      -26.6377       26.6377       316.129       342.767    
  63  0.669260     -0.401583      -9.66665       9.66665       321.570       331.237    
  64  0.677208     -0.389776      -9.38246       9.38246       305.846       315.228    
loop,thermsimp(1:2)        6   36.8915       1.42726    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    244        313.37          0.88          1.09         23.11          0.02          0.04         25.14
Just calling func    0   0         25.14


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    313.37
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    24.0714               253
loop is:        6
neval is:      243
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        6      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    24.0714               253
loop is:        7
neval is:      243


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      253
neval,tstepnext:      243     253

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.264215      -1.33099      -32.0389       32.0389       286.088       318.127    
   2  0.401807     -0.911784      -21.9479       21.9479       294.455       316.403    
   3  0.418885     -0.870159      -20.9459       20.9459       295.168       316.113    
   4  0.753378     -0.283189      -6.81675       6.81675       292.278       299.095    
   5  0.792066     -0.233111      -5.61131       5.61131       295.939       301.551    
   6  0.868474     -0.141017      -3.39448       3.39448       291.756       295.150    
   7  0.318670      -1.14360      -27.5280       27.5280       298.574       326.102    
   8  0.863267     -0.147031      -3.53924       3.53924       287.238       290.777    
   9  0.589255     -0.528896      -12.7313       12.7313       304.687       317.418    
  10  0.632079E-01  -2.76133      -66.4690       66.4690       305.275       371.744    
  11  0.992270     -0.775975E-02 -0.186788      0.186788       301.361       301.548    
  12  0.466140     -0.763269      -18.3729       18.3729       295.636       314.009    
  13  0.177509      -1.72873      -41.6130       41.6130       300.320       341.933    
  14  0.933326     -0.690005E-01  -1.66094       1.66094       302.687       304.348    
  15  0.876357     -0.131982      -3.17698       3.17698       311.913       315.090    
  16  0.673496     -0.395274      -9.51479       9.51479       297.624       307.139    
  17  0.648708     -0.432773      -10.4174       10.4174       305.846       316.263    
  18  0.400813     -0.914259      -22.0075       22.0075       304.814       326.821    
  19  0.763164     -0.270282      -6.50607       6.50607       290.580       297.086    
  20  0.196240      -1.62842      -39.1983       39.1983       281.266       320.464    
  21  0.923666     -0.794046E-01  -1.91138       1.91138       304.975       306.886    
  22  0.999600     -0.400298E-03 -0.963572E-02  0.963572E-02   314.938       314.947    
  23  0.379715     -0.968335      -23.3092       23.3092       309.825       333.134    
  24  0.197375      -1.62265      -39.0594       39.0594       319.432       358.491    
  25  0.760736     -0.273468      -6.58277       6.58277       282.492       289.075    
  26  0.392182     -0.936030      -22.5315       22.5315       319.650       342.181    
  27  0.256208      -1.36177      -32.7796       32.7796       318.584       351.363    
  28  0.251796      -1.37914      -33.1977       33.1977       319.480       352.678    
  29  0.332089E-01  -3.40494      -81.9616       81.9616       298.353       380.314    
  30  0.970457     -0.299883E-01 -0.721860      0.721860       325.466       326.187    
  31  0.467370E-01  -3.06322      -73.7359       73.7359       321.315       395.051    
  32  0.716125     -0.333901      -8.03745       8.03745       325.176       333.213    
  33  0.757897     -0.277208      -6.67278       6.67278       308.487       315.160    
  34  0.765628     -0.267059      -6.42848       6.42848       321.570       327.999    
  35  0.323816      -1.12758      -27.1424       27.1424       323.311       350.454    
  36  0.909845     -0.944807E-01  -2.27428       2.27428       306.247       308.521    
  37  0.515782     -0.662071      -15.9370       15.9370       305.352       321.289    
  38  0.464370     -0.767074      -18.4645       18.4645       308.583       327.048    
  39  0.445707     -0.808094      -19.4520       19.4520       291.268       310.720    
  40  0.786320     -0.240391      -5.78656       5.78656       318.706       324.493    
  41  0.631860     -0.459087      -11.0509       11.0509       320.415       331.466    
  42  0.672488     -0.396772      -9.55084       9.55084       330.113       339.663    
  43  0.251717E-02  -5.98462      -144.058       144.058       316.129       460.187    
  44  0.245023      -1.40640      -33.8541       33.8541       300.312       334.166    
  45  0.252688      -1.37560      -33.1126       33.1126       323.294       356.407    
  46  0.268946      -1.31324      -31.6116       31.6116       311.734       343.346    
  47  0.550357     -0.597189      -14.3752       14.3752       304.685       319.060    
  48  0.826205     -0.190912      -4.59552       4.59552       310.438       315.033    
  49  0.964276     -0.363780E-01 -0.875669      0.875669       317.183       318.059    
  50  0.415479     -0.878324      -21.1425       21.1425       320.138       341.280    
  51  0.599143E-01  -2.81484      -67.7571       67.7571       324.833       392.590    
  52  0.348555      -1.05396      -25.3702       25.3702       348.303       373.674    
  53  0.243819      -1.41133      -33.9727       33.9727       304.134       338.107    
  54  0.233297      -1.45544      -35.0345       35.0345       311.308       346.343    
  55  0.705284     -0.349155      -8.40465       8.40465       331.399       339.804    
  56  0.258436      -1.35311      -32.5712       32.5712       319.349       351.920    
  57  0.328631      -1.11282      -26.7872       26.7872       297.677       324.464    
  58  0.676481     -0.390852      -9.40834       9.40834       324.811       334.219    
  59  0.784590     -0.242594      -5.83957       5.83957       330.093       335.933    
  60  0.546419E-01  -2.90695      -69.9744       69.9744       326.285       396.259    
  61  0.507256     -0.678740      -16.3382       16.3382       318.875       335.213    
  62  0.980797     -0.193899E-01 -0.466742      0.466742       306.186       306.653    
  63  0.193856      -1.64064      -39.4925       39.4925       320.470       359.963    
  64  0.101492      -2.28777      -55.0698       55.0698       313.371       368.441    
loop,thermsimp(1:2)        7   32.0389       21.9479    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    245        294.73          0.88          1.09         23.08          0.04          0.05         25.14
Just calling func    0   0         25.15


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    246        295.36          0.88          1.09         23.10          0.31          0.04         25.41
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    294.73
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    24.0714               253
loop is:        7
neval is:      245
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        7      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    24.0714               253
loop is:        8
neval is:      245


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      253
neval,tstepnext:      245     253

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.105813      -2.24608      -54.0663       54.0663       282.492       336.558    
   2  0.476819     -0.740619      -17.8277       17.8277       287.238       305.066    
   3  0.564430     -0.571938      -13.7674       13.7674       291.756       305.523    
   4  0.211741      -1.55239      -37.3682       37.3682       290.580       327.948    
   5  0.154226E-01  -4.17192      -100.424       100.424       292.278       392.702    
   6  0.489577     -0.714213      -17.1921       17.1921       301.361       318.553    
   7  0.583965     -0.537914      -12.9483       12.9483       295.939       308.888    
   8  0.430258     -0.843370      -20.3011       20.3011       302.687       322.988    
   9  0.280982      -1.26946      -30.5578       30.5578       306.186       336.744    
  10  0.535183     -0.625146      -15.0481       15.0481       304.975       320.023    
  11  0.306750      -1.18172      -28.4457       28.4457       297.624       326.069    
  12  0.924930     -0.780370E-01  -1.87846       1.87846       306.247       308.125    
  13  0.829670E-01  -2.48931      -59.9212       59.9212       291.268       351.189    
  14  0.330275      -1.10783      -26.6670       26.6670       295.636       322.303    
  15  0.229751      -1.47076      -35.4032       35.4032       314.938       350.341    
  16  0.455737     -0.785839      -18.9162       18.9162       310.438       329.354    
  17  0.830949     -0.185187      -4.45772       4.45772       311.913       316.371    
  18  0.148624      -1.90634      -45.8882       45.8882       308.487       354.375    
  19  0.883001     -0.124429      -2.99518       2.99518       295.168       298.163    
  20  0.668001     -0.403466      -9.71198       9.71198       305.846       315.558    
  21  0.610583     -0.493341      -11.8754       11.8754       294.455       306.330    
  22  0.689050     -0.372441      -8.96517       8.96517       304.687       313.652    
  23  0.124417      -2.08412      -50.1676       50.1676       317.183       367.351    
  24  0.785584E-01  -2.54391      -61.2355       61.2355       286.088       347.323    
  25  0.936565     -0.655366E-01  -1.57756       1.57756       304.685       306.263    
  26  0.483719     -0.726252      -17.4819       17.4819       281.266       298.748    
  27  0.715685     -0.334515      -8.05225       8.05225       305.352       313.404    
  28  0.786437     -0.240243      -5.78298       5.78298       297.677       303.460    
  29  0.361023      -1.01881      -24.5243       24.5243       318.706       343.230    
  30  0.325559      -1.12221      -27.0132       27.0132       298.574       325.587    
  31  0.850460     -0.161978      -3.89903       3.89903       325.466       329.365    
  32  0.301358      -1.19946      -28.8726       28.8726       304.814       333.687    
  33  0.304725      -1.18834      -28.6051       28.6051       308.583       337.188    
  34  0.887065     -0.119838      -2.88466       2.88466       321.570       324.455    
  35  0.762822     -0.270730      -6.51685       6.51685       320.415       326.932    
  36  0.364130      -1.01024      -24.3180       24.3180       309.825       334.143    
  37  0.762041     -0.271754      -6.54150       6.54150       325.176       331.717    
  38  0.941180     -0.606207E-01  -1.45922       1.45922       300.312       301.771    
  39  0.449403     -0.799835      -19.2531       19.2531       324.811       344.064    
  40  0.743855     -0.295910      -7.12295       7.12295       318.875       325.998    
  41  0.743104     -0.296920      -7.14727       7.14727       330.093       337.241    
  42  0.350527      -1.04832      -25.2344       25.2344       304.134       329.369    
  43  0.607240     -0.498831      -12.0076       12.0076       330.113       342.120    
  44  0.557347     -0.584567      -14.0713       14.0713       331.399       345.471    
  45  0.217970      -1.52340      -36.6703       36.6703       320.138       356.808    
  46  0.364570      -1.00904      -24.2889       24.2889       300.320       324.609    
  47  0.330900      -1.10594      -26.6215       26.6215       319.650       346.271    
  48  0.861127     -0.149514      -3.59900       3.59900       311.734       315.333    
  49  0.710764E-01  -2.64400      -63.6447       63.6447       311.308       374.953    
  50  0.264543      -1.32975      -32.0090       32.0090       323.311       355.320    
  51  0.985836     -0.142654E-01 -0.343389      0.343389       318.584       318.927    
  52  0.296563      -1.21550      -29.2587       29.2587       319.349       348.608    
  53  0.875112     -0.133403      -3.21120       3.21120       319.480       322.691    
  54  0.808637     -0.212405      -5.11289       5.11289       323.294       328.407    
  55  0.394372     -0.930461      -22.3975       22.3975       319.432       341.830    
  56  0.209815      -1.56153      -37.5882       37.5882       320.470       358.058    
  57  0.154667      -1.86648      -44.9287       44.9287       313.371       358.300    
  58  0.741232     -0.299442      -7.20798       7.20798       305.275       312.483    
  59  0.386718E-01  -3.25265      -78.2957       78.2957       348.303       426.599    
  60  0.372867     -0.986533      -23.7472       23.7472       298.353       322.100    
  61  0.910828E-01  -2.39599      -57.6747       57.6747       324.833       382.508    
  62  0.660999     -0.414003      -9.96562       9.96562       321.315       331.280    
  63  0.631205E-01  -2.76271      -66.5023       66.5023       326.285       392.787    
  64  0.959104     -0.417554E-01  -1.00511       1.00511       294.730       295.735    
loop,thermsimp(1:2)        8   54.0663       17.8277    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    247        282.44          0.89          1.10         23.06          0.12          0.05         25.23
Just calling func    0   0         25.22


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    248        401.64          0.86          1.09         23.12          0.00          0.04         25.10
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    282.44
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    24.0714               253
loop is:        8
neval is:      247
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        8      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    24.0714               253
loop is:        9
neval is:      247


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      253
neval,tstepnext:      247     253

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.641422     -0.444068      -10.6893       10.6893       294.730       305.419    
   2  0.805197     -0.216668      -5.21550       5.21550       295.168       300.383    
   3  0.976428     -0.238543E-01 -0.574206      0.574206       281.266       281.840    
   4  0.599028     -0.512447      -12.3353       12.3353       300.312       312.647    
   5  0.591081     -0.525802      -12.6568       12.6568       297.677       310.334    
   6  0.151500      -1.88717      -45.4267       45.4267       287.238       332.665    
   7  0.565682     -0.569723      -13.7140       13.7140       291.756       305.470    
   8  0.345258      -1.06346      -25.5990       25.5990       304.685       330.284    
   9  0.658101     -0.418397      -10.0714       10.0714       294.455       304.526    
  10  0.691977E-01  -2.67079      -64.2896       64.2896       306.247       370.536    
  11  0.289062      -1.24111      -29.8753       29.8753       295.939       325.815    
  12  0.949819     -0.514835E-01  -1.23928       1.23928       305.275       306.514    
  13  0.791632     -0.233658      -5.62448       5.62448       305.352       310.977    
  14  0.400532     -0.914962      -22.0244       22.0244       304.687       326.711    
  15  0.241886      -1.41929      -34.1643       34.1643       311.734       345.898    
  16  0.383016     -0.959678      -23.1008       23.1008       305.846       328.947    
  17  0.993978     -0.604041E-02 -0.145401      0.145401       311.913       312.059    
  18  0.807089     -0.214322      -5.15902       5.15902       301.361       306.520    
  19  0.732161     -0.311755      -7.50437       7.50437       318.584       326.088    
  20  0.176507      -1.73440      -41.7493       41.7493       304.975       346.724    
  21  0.628098     -0.465059      -11.1946       11.1946       298.353       309.547    
  22  0.383392     -0.958697      -23.0772       23.0772       295.636       318.713    
  23  0.906421     -0.982517E-01  -2.36506       2.36506       319.480       321.845    
  24  0.329288      -1.11082      -26.7391       26.7391       302.687       329.426    
  25  0.869436     -0.139911      -3.36785       3.36785       321.570       324.938    
  26  0.354994      -1.03565      -24.9296       24.9296       300.320       325.249    
  27  0.127935      -2.05623      -49.4964       49.4964       298.574       348.070    
  28  0.840123     -0.174207      -4.19340       4.19340       318.875       323.068    
  29  0.625861     -0.468627      -11.2805       11.2805       297.624       308.904    
  30  0.488384     -0.716653      -17.2508       17.2508       320.415       337.666    
  31  0.888226E-01  -2.42111      -58.2796       58.2796       290.580       348.859    
  32  0.262955      -1.33577      -32.1539       32.1539       323.294       355.448    
  33  0.153205E-01  -4.17856      -100.584       100.584       310.438       411.022    
  34  0.432355     -0.838509      -20.1841       20.1841       325.466       345.650    
  35  0.225273      -1.49044      -35.8770       35.8770       304.134       340.012    
  36  0.812147     -0.208074      -5.00864       5.00864       321.315       326.323    
  37  0.832805E-01  -2.48554      -59.8304       59.8304       325.176       385.006    
  38  0.442280     -0.815813      -19.6377       19.6377       304.814       324.452    
  39  0.106639      -2.23831      -53.8792       53.8792       309.825       363.704    
  40  0.143053      -1.94454      -46.8077       46.8077       282.492       329.300    
  41  0.871774     -0.137225      -3.30320       3.30320       306.186       309.489    
  42  0.137692      -1.98273      -47.7272       47.7272       308.583       356.310    
  43  0.366512      -1.00372      -24.1610       24.1610       330.093       354.254    
  44  0.617157     -0.482633      -11.6176       11.6176       319.432       331.050    
  45  0.420337     -0.866700      -20.8627       20.8627       330.113       350.975    
  46  0.935846     -0.663044E-01  -1.59604       1.59604       318.706       320.302    
  47  0.979912     -0.202925E-01 -0.488468      0.488468       324.811       325.299    
  48  0.692793     -0.367024      -8.83479       8.83479       331.399       340.234    
  49  0.155424      -1.86160      -44.8113       44.8113       319.650       364.461    
  50  0.703218     -0.352088      -8.47526       8.47526       286.088       294.563    
  51  0.396734     -0.924489      -22.2537       22.2537       319.349       341.603    
  52  0.247863      -1.39488      -33.5767       33.5767       314.938       348.515    
  53  0.176690      -1.73336      -41.7244       41.7244       291.268       332.992    
  54  0.832421     -0.183417      -4.41509       4.41509       308.487       312.902    
  55  0.598900     -0.512660      -12.3404       12.3404       323.311       335.652    
  56  0.940005     -0.618702E-01  -1.48930       1.48930       320.138       321.627    
  57  0.556954     -0.585272      -14.0883       14.0883       320.470       334.558    
  58  0.920495     -0.828436E-01  -1.99416       1.99416       313.371       315.366    
  59  0.896932     -0.108775      -2.61837       2.61837       317.183       319.802    
  60  0.200022      -1.60933      -38.7387       38.7387       311.308       350.047    
  61  0.667904E-01  -2.70620      -65.1419       65.1419       324.833       389.975    
  62  0.146707      -1.91932      -46.2006       46.2006       292.278       338.479    
  63  0.305705      -1.18513      -28.5278       28.5278       326.285       354.813    
  64  0.975058     -0.252587E-01 -0.608012      0.608012       282.445       283.053    
loop,thermsimp(1:2)        9   10.6893       5.21550    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    249        403.34          0.88          1.10         23.11          0.01          0.05         25.14
Just calling func    0   0         25.14


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    250        347.85          0.87          1.09         23.12          0.02          0.04         25.15
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3    347.85
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    24.0714               253
loop is:        9
neval is:      249
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        9      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    24.0714               253
loop is:       10
neval is:      249


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      253
neval,tstepnext:      249     253

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.833163     -0.182525      -4.39364       4.39364       281.266       285.660    
   2  0.367543      -1.00091      -24.0934       24.0934       282.445       306.538    
   3  0.528755     -0.637231      -15.3390       15.3390       286.088       301.427    
   4  0.776829     -0.252535      -6.07888       6.07888       295.168       301.246    
   5  0.149594E-01  -4.20242      -101.158       101.158       294.455       395.613    
   6  0.892228     -0.114033      -2.74493       2.74493       294.730       297.475    
   7  0.191037      -1.65529      -39.8450       39.8450       291.756       331.601    
   8  0.516533     -0.660616      -15.9019       15.9019       305.275       321.177    
   9  0.273230      -1.29744      -31.2313       31.2313       301.361       332.592    
  10  0.822225     -0.195741      -4.71176       4.71176       297.624       302.335    
  11  0.359850      -1.02207      -24.6026       24.6026       306.186       330.788    
  12  0.611658     -0.491581      -11.8330       11.8330       298.353       310.186    
  13  0.249481      -1.38837      -33.4200       33.4200       297.677       331.097    
  14  0.441252     -0.818139      -19.6937       19.6937       305.352       325.046    
  15  0.910514E-01  -2.39633      -57.6830       57.6830       311.913       369.596    
  16  0.745146     -0.294175      -7.08120       7.08120       300.312       307.393    
  17  0.758301     -0.276675      -6.65996       6.65996       308.487       315.147    
  18  0.638521     -0.448601      -10.7984       10.7984       313.371       324.170    
  19  0.150180      -1.89592      -45.6374       45.6374       295.636       341.273    
  20  0.144147      -1.93692      -46.6244       46.6244       317.183       363.808    
  21  0.104928      -2.25448      -54.2684       54.2684       318.706       372.975    
  22  0.398120     -0.921002      -22.1698       22.1698       320.138       342.307    
  23  0.802258     -0.220325      -5.30353       5.30353       319.480       324.784    
  24  0.399299     -0.918044      -22.0986       22.0986       318.875       340.973    
  25  0.493060     -0.707124      -17.0215       17.0215       304.814       321.835    
  26  0.504407     -0.684372      -16.4738       16.4738       321.570       338.044    
  27  0.762058     -0.271733      -6.54099       6.54099       300.320       306.861    
  28  0.430267     -0.843350      -20.3006       20.3006       324.811       345.111    
  29  0.993832     -0.618725E-02 -0.148936      0.148936       295.939       296.088    
  30  0.705390     -0.349005      -8.40104       8.40104       318.584       326.985    
  31  0.969760     -0.307069E-01 -0.739157      0.739157       321.315       322.054    
  32  0.245618      -1.40398      -33.7957       33.7957       304.687       338.482    
  33  0.685790     -0.377184      -9.07935       9.07935       305.846       314.925    
  34  0.905089     -0.997222E-01  -2.40045       2.40045       282.492       284.892    
  35  0.414065     -0.881732      -21.2245       21.2245       302.687       323.911    
  36  0.714747E-01  -2.63841      -63.5102       63.5102       304.685       368.195    
  37  0.694510     -0.364548      -8.77519       8.77519       319.432       328.207    
  38  0.770213E-01  -2.56367      -61.7112       61.7112       287.238       348.949    
  39  0.846173     -0.167031      -4.02067       4.02067       291.268       295.288    
  40  0.485012     -0.723582      -17.4176       17.4176       320.470       337.888    
  41  0.345787      -1.06193      -25.5622       25.5622       323.311       348.874    
  42  0.851861     -0.160332      -3.85941       3.85941       320.415       324.275    
  43  0.774151     -0.255989      -6.16201       6.16201       292.278       298.440    
  44  0.512382     -0.668685      -16.0962       16.0962       304.134       320.231    
  45  0.839798     -0.174594      -4.20273       4.20273       331.399       335.602    
  46  0.430550     -0.842692      -20.2848       20.2848       319.349       339.634    
  47  0.988263     -0.118067E-01 -0.284203      0.284203       325.466       325.750    
  48  0.349495      -1.05127      -25.3054       25.3054       311.734       337.039    
  49  0.290701      -1.23546      -29.7392       29.7392       304.975       334.714    
  50  0.210466      -1.55843      -37.5136       37.5136       298.574       336.087    
  51  0.361038      -1.01877      -24.5232       24.5232       314.938       339.461    
  52  0.168890      -1.77851      -42.8112       42.8112       290.580       333.391    
  53  0.176000      -1.73727      -41.8185       41.8185       311.308       353.127    
  54  0.494423     -0.704364      -16.9550       16.9550       330.113       347.068    
  55  0.887313     -0.119558      -2.87792       2.87792       330.093       332.971    
  56  0.318781      -1.14325      -27.5196       27.5196       326.285       353.804    
  57  0.385435     -0.953382      -22.9492       22.9492       323.294       346.244    
  58  0.557906     -0.583564      -14.0472       14.0472       308.583       322.630    
  59  0.262507      -1.33748      -32.1949       32.1949       309.825       342.020    
  60  0.573408     -0.556157      -13.3875       13.3875       319.650       333.037    
  61  0.334195      -1.09603      -26.3830       26.3830       306.247       332.630    
  62  0.365463      -1.00659      -24.2300       24.2300       325.176       349.406    
  63  0.182452      -1.70127      -40.9518       40.9518       324.833       365.785    
  64  0.224434      -1.49418      -35.9669       35.9669       347.848       383.815    
loop,thermsimp(1:2)       10   4.39364       24.0934    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    251        323.24          0.88          1.10         23.07          0.05          0.05         25.16
Just calling func    0   0         25.15


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    323.24
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    24.0714               253
loop is:       10
neval is:      250
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       10      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    24.0714               253
loop is:       11
neval is:      250


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      253
neval,tstepnext:      250     253

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.919397     -0.840375E-01  -2.02290       2.02290       282.492       284.515    
   2  0.309089      -1.17413      -28.2629       28.2629       281.266       309.529    
   3  0.237901      -1.43590      -34.5641       34.5641       291.268       325.832    
   4  0.542467     -0.611627      -14.7227       14.7227       295.939       310.662    
   5  0.523672     -0.646889      -15.5715       15.5715       294.730       310.302    
   6  0.850058     -0.162450      -3.91040       3.91040       292.278       296.189    
   7  0.589343     -0.528746      -12.7277       12.7277       295.168       307.895    
   8  0.979269     -0.209490E-01 -0.504270      0.504270       286.088       286.592    
   9  0.110419      -2.20347      -53.0407       53.0407       297.624       350.664    
  10  0.557914     -0.583550      -14.0469       14.0469       282.445       296.492    
  11  0.474464     -0.745569      -17.9469       17.9469       300.320       318.267    
  12  0.312482      -1.16321      -28.0000       28.0000       300.312       328.312    
  13  0.297011      -1.21399      -29.2223       29.2223       298.353       327.575    
  14  0.857571     -0.153651      -3.69860       3.69860       305.846       309.544    
  15  0.792567     -0.232479      -5.59608       5.59608       308.487       314.083    
  16  0.963006     -0.376958E-01 -0.907391      0.907391       304.134       305.042    
  17  0.294103      -1.22382      -29.4592       29.4592       305.275       334.734    
  18  0.403484     -0.907618      -21.8476       21.8476       304.814       326.662    
  19  0.449313     -0.800035      -19.2580       19.2580       321.315       340.573    
  20  0.721912     -0.325852      -7.84371       7.84371       308.583       316.427    
  21  0.512488     -0.668479      -16.0912       16.0912       302.687       318.778    
  22  0.885190     -0.121953      -2.93557       2.93557       313.371       316.307    
  23  0.694751E-01  -2.66679      -64.1933       64.1933       320.415       384.609    
  24  0.820879     -0.197380      -4.75121       4.75121       319.480       324.231    
  25  0.211527      -1.55340      -37.3926       37.3926       305.352       342.745    
  26  0.937420     -0.646236E-01  -1.55558       1.55558       325.466       327.021    
  27  0.515756E-01  -2.96471      -71.3646       71.3646       318.584       389.948    
  28  0.695222     -0.363525      -8.75054       8.75054       319.432       328.183    
  29  0.718776     -0.330205      -7.94850       7.94850       306.186       314.134    
  30  0.536080     -0.623471      -15.0078       15.0078       297.677       312.685    
  31  0.585855     -0.534682      -12.8705       12.8705       291.756       304.626    
  32  0.693572     -0.365900      -8.80773       8.80773       301.361       310.169    
  33  0.700823     -0.355500      -8.55737       8.55737       306.247       314.804    
  34  0.250985      -1.38236      -33.2754       33.2754       330.093       363.369    
  35  0.290600      -1.23581      -29.7476       29.7476       319.650       349.397    
  36  0.828609     -0.188007      -4.52560       4.52560       290.580       295.105    
  37  0.225820      -1.48802      -35.8187       35.8187       304.975       340.793    
  38  0.999674     -0.326354E-03 -0.785579E-02  0.785579E-02   331.399       331.407    
  39  0.878216     -0.129862      -3.12597       3.12597       298.574       301.700    
  40  0.685898E-01  -2.67961      -64.5020       64.5020       311.734       376.236    
  41  0.273860      -1.29514      -31.1757       31.1757       320.470       351.646    
  42  0.697655     -0.360030      -8.66643       8.66643       321.570       330.237    
  43  0.293168      -1.22701      -29.5358       29.5358       304.687       334.222    
  44  0.319476      -1.14107      -27.4672       27.4672       314.938       342.405    
  45  0.874681     -0.133896      -3.22307       3.22307       319.349       322.572    
  46  0.408697     -0.894781      -21.5386       21.5386       318.875       340.413    
  47  0.142130E-01  -4.25360      -102.390       102.390       295.636       398.026    
  48  0.164528      -1.80468      -43.4410       43.4410       309.825       353.266    
  49  0.652669     -0.426685      -10.2709       10.2709       320.138       330.409    
  50  0.492107     -0.709060      -17.0681       17.0681       324.811       341.879    
  51  0.542705     -0.611189      -14.7122       14.7122       323.294       338.007    
  52  0.798603     -0.224891      -5.41345       5.41345       330.113       335.526    
  53  0.474092E-01  -3.04894      -73.3922       73.3922       323.311       396.704    
  54  0.425084     -0.855468      -20.5923       20.5923       287.238       307.830    
  55  0.349722      -1.05062      -25.2898       25.2898       325.176       350.466    
  56  0.499235     -0.694678      -16.7219       16.7219       311.308       328.030    
  57  0.193091      -1.64459      -39.5877       39.5877       326.285       365.872    
  58  0.876894     -0.131369      -3.16223       3.16223       317.183       320.346    
  59  0.634591     -0.454774      -10.9470       10.9470       324.833       335.780    
  60  0.571394     -0.559676      -13.4722       13.4722       304.685       318.157    
  61  0.749680     -0.288108      -6.93517       6.93517       311.913       318.848    
  62  0.111050      -2.19777      -52.9035       52.9035       318.706       371.610    
  63  0.456811     -0.783485      -18.8596       18.8596       347.848       366.707    
  64  0.686362     -0.376350      -9.05928       9.05928       323.240       332.299    
loop,thermsimp(1:2)       11   2.02290       28.2629    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    252        350.07          0.88          1.12         23.09          0.04          0.04         25.16
Just calling func    0   0         25.17


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    350.07
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    24.0714               253
loop is:       11
neval is:      251
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       11      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    24.0714               253
loop is:       12
neval is:      251


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      253
neval,tstepnext:      251     253

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.762868     -0.270671      -6.51542       6.51542       282.492       289.007    
   2  0.482922E-01  -3.03048      -72.9480       72.9480       286.088       359.036    
   3  0.612960     -0.489456      -11.7819       11.7819       290.580       302.362    
   4  0.910127     -0.941714E-01  -2.26684       2.26684       292.278       294.545    
   5  0.362433      -1.01492      -24.4305       24.4305       282.445       306.875    
   6  0.476779     -0.740702      -17.8297       17.8297       298.574       316.404    
   7  0.179006E-01  -4.02292      -96.8373       96.8373       291.756       388.593    
   8  0.589646     -0.528233      -12.7153       12.7153       304.134       316.850    
   9  0.926206     -0.766581E-01  -1.84527       1.84527       287.238       289.083    
  10  0.492629     -0.707999      -17.0425       17.0425       295.168       312.210    
  11  0.661123     -0.413815      -9.96110       9.96110       281.266       291.227    
  12  0.542248     -0.612032      -14.7325       14.7325       305.846       320.578    
  13  0.216527      -1.53004      -36.8302       36.8302       301.361       338.191    
  14  0.549832     -0.598143      -14.3981       14.3981       294.730       309.128    
  15  0.429556     -0.845003      -20.3404       20.3404       295.939       316.280    
  16  0.264838      -1.32864      -31.9821       31.9821       297.677       329.659    
  17  0.251706      -1.37949      -33.2063       33.2063       308.487       341.693    
  18  0.701724     -0.354215      -8.52644       8.52644       306.186       314.712    
  19  0.324289      -1.12612      -27.1073       27.1073       306.247       333.354    
  20  0.160749E-02  -6.43308      -154.853       154.853       313.371       468.225    
  21  0.533627     -0.628058      -15.1182       15.1182       308.583       323.701    
  22  0.883065     -0.124357      -2.99344       2.99344       304.685       307.678    
  23  0.484824     -0.723969      -17.4269       17.4269       300.320       317.747    
  24  0.724157     -0.322747      -7.76897       7.76897       302.687       310.456    
  25  0.847375     -0.165612      -3.98652       3.98652       311.913       315.900    
  26  0.167586      -1.78626      -42.9977       42.9977       317.183       360.181    
  27  0.890079     -0.116445      -2.80299       2.80299       319.349       322.152    
  28  0.235223      -1.44722      -34.8367       34.8367       319.480       354.317    
  29  0.206112      -1.57934      -38.0168       38.0168       291.268       329.285    
  30  0.463385     -0.769198      -18.5157       18.5157       304.814       323.330    
  31  0.487880E-01  -3.02027      -72.7021       72.7021       325.466       398.168    
  32  0.244157      -1.40994      -33.9393       33.9393       298.353       332.292    
  33  0.770602     -0.260583      -6.27259       6.27259       311.308       317.581    
  34  0.264159      -1.33120      -32.0439       32.0439       319.432       351.476    
  35  0.189030E-01  -3.96843      -95.5257       95.5257       300.312       395.838    
  36  0.635342     -0.453592      -10.9186       10.9186       321.570       332.489    
  37  0.139550      -1.96933      -47.4045       47.4045       320.138       367.542    
  38  0.561566     -0.577026      -13.8898       13.8898       331.399       345.289    
  39  0.951789     -0.494118E-01  -1.18941       1.18941       323.240       324.429    
  40  0.527693     -0.639242      -15.3874       15.3874       304.687       320.074    
  41  0.925337     -0.775972E-01  -1.86787       1.86787       305.275       307.142    
  42  0.795352     -0.228971      -5.51165       5.51165       330.113       335.624    
  43  0.530799     -0.633371      -15.2461       15.2461       324.833       340.079    
  44  0.642763     -0.441979      -10.6390       10.6390       323.294       333.933    
  45  0.485146     -0.723305      -17.4110       17.4110       318.875       336.286    
  46  0.795896     -0.228287      -5.49519       5.49519       321.315       326.810    
  47  0.519140     -0.655581      -15.7808       15.7808       304.975       320.755    
  48  0.694073E-01  -2.66776      -64.2168       64.2168       324.811       389.028    
  49  0.401486     -0.912583      -21.9671       21.9671       314.938       336.905    
  50  0.587982E-01  -2.83364      -68.2097       68.2097       305.352       373.562    
  51  0.752652     -0.284152      -6.83993       6.83993       319.650       326.490    
  52  0.139929      -1.96662      -47.3394       47.3394       325.176       372.515    
  53  0.136759      -1.98953      -47.8908       47.8908       297.624       345.515    
  54  0.690728     -0.370009      -8.90663       8.90663       320.470       329.377    
  55  0.409546     -0.892705      -21.4887       21.4887       309.825       331.313    
  56  0.422285     -0.862075      -20.7513       20.7513       330.093       350.845    
  57  0.160439      -1.82984      -44.0468       44.0468       326.285       370.332    
  58  0.230463      -1.46767      -35.3288       35.3288       347.848       383.176    
  59  0.836860     -0.178099      -4.28709       4.28709       318.706       322.993    
  60  0.635813     -0.452850      -10.9007       10.9007       311.734       322.635    
  61  0.464135     -0.767580      -18.4767       18.4767       320.415       338.892    
  62  0.999501     -0.498826E-03 -0.120074E-01  0.120074E-01   318.584       318.596    
  63  0.472031     -0.750710      -18.0706       18.0706       323.311       341.382    
  64  0.926290     -0.765681E-01  -1.84310       1.84310       350.071       351.914    
loop,thermsimp(1:2)       12   6.51542       72.9480    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    253        322.54          0.88          1.11         23.06          0.05          0.04         25.14
Just calling func    0   0         25.14


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    254        431.26          0.88          1.10         23.12          0.04          0.04         25.19
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    322.54
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    24.0714               253
loop is:       12
neval is:      253
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       12      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    24.0714               253
loop is:       13
neval is:      253


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      253
neval,tstepnext:      253     253

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.592808     -0.522884      -12.5865       12.5865       282.492       295.078    
   2  0.691791     -0.368472      -8.86962       8.86962       287.238       296.108    
   3  0.688173     -0.373715      -8.99584       8.99584       281.266       290.262    
   4  0.439966     -0.821058      -19.7640       19.7640       292.278       312.042    
   5  0.945690     -0.558403E-01  -1.34415       1.34415       290.580       291.924    
   6  0.238956      -1.43147      -34.4576       34.4576       282.445       316.903    
   7  0.280830E-01  -3.57259      -85.9972       85.9972       305.275       391.272    
   8  0.902031E-01  -2.40569      -57.9083       57.9083       304.685       362.593    
   9  0.198361      -1.61767      -38.9395       38.9395       294.730       333.669    
  10  0.201288      -1.60302      -38.5869       38.5869       302.687       341.274    
  11  0.710033     -0.342444      -8.24310       8.24310       295.168       303.411    
  12  0.182913      -1.69874      -40.8911       40.8911       306.186       347.077    
  13  0.817316     -0.201730      -4.85591       4.85591       311.913       316.769    
  14  0.894732     -0.111231      -2.67748       2.67748       295.939       298.617    
  15  0.854000     -0.157824      -3.79905       3.79905       298.574       302.373    
  16  0.248066      -1.39406      -33.5570       33.5570       304.134       337.691    
  17  0.670877     -0.399170      -9.60857       9.60857       311.308       320.917    
  18  0.701473     -0.354573      -8.53506       8.53506       300.320       308.855    
  19  0.199467      -1.61210      -38.8056       38.8056       318.584       357.389    
  20  0.391533     -0.937685      -22.5714       22.5714       304.687       327.258    
  21  0.586761     -0.533138      -12.8334       12.8334       305.846       318.679    
  22  0.163799      -1.80912      -43.5479       43.5479       304.975       348.522    
  23  0.955964     -0.450353E-01  -1.08406       1.08406       319.349       320.433    
  24  0.365727      -1.00587      -24.2126       24.2126       311.734       335.947    
  25  0.733577     -0.309822      -7.45785       7.45785       318.706       326.164    
  26  0.111597      -2.19286      -52.7852       52.7852       304.814       357.599    
  27  0.714895     -0.335619      -8.07882       8.07882       308.583       316.662    
  28  0.816688     -0.202498      -4.87440       4.87440       323.240       328.114    
  29  0.480603     -0.732714      -17.6374       17.6374       319.650       337.287    
  30  0.573891     -0.555316      -13.3672       13.3672       321.315       334.682    
  31  0.204452      -1.58742      -38.2115       38.2115       291.268       329.479    
  32  0.845356E-01  -2.47058      -59.4703       59.4703       320.470       379.940    
  33  0.524789E-01  -2.94734      -70.9467       70.9467       297.677       368.624    
  34  0.631781     -0.459213      -11.0539       11.0539       309.825       320.878    
  35  0.620363     -0.477450      -11.4929       11.4929       298.353       309.846    
  36  0.553551     -0.591402      -14.2359       14.2359       321.570       335.806    
  37  0.546271     -0.604640      -14.5545       14.5545       306.247       320.801    
  38  0.402204     -0.910797      -21.9241       21.9241       323.294       345.219    
  39  0.735174     -0.307648      -7.40551       7.40551       330.113       337.518    
  40  0.359565      -1.02286      -24.6216       24.6216       318.875       343.496    
  41  0.564111     -0.572504      -13.7810       13.7810       314.938       328.719    
  42  0.412661     -0.885128      -21.3063       21.3063       301.361       322.667    
  43  0.795853     -0.228341      -5.49648       5.49648       320.415       325.912    
  44  0.909991E-01  -2.39691      -57.6968       57.6968       324.833       382.530    
  45  0.830687     -0.185502      -4.46530       4.46530       323.311       327.777    
  46  0.592588     -0.523256      -12.5955       12.5955       308.487       321.082    
  47  0.489472     -0.714427      -17.1973       17.1973       331.399       348.597    
  48  0.992056     -0.797586E-02 -0.191990      0.191990       297.624       297.816    
  49  0.808208     -0.212936      -5.12566       5.12566       330.093       335.219    
  50  0.212569      -1.54849      -37.2743       37.2743       319.432       356.706    
  51  0.214041      -1.54159      -37.1082       37.1082       350.071       387.179    
  52  0.586527     -0.533536      -12.8430       12.8430       319.480       332.323    
  53  0.603460     -0.505075      -12.1579       12.1579       286.088       298.246    
  54  0.819887     -0.198589      -4.78030       4.78030       317.183       321.964    
  55  0.204248      -1.58842      -38.2355       38.2355       320.138       358.373    
  56  0.540917     -0.614489      -14.7916       14.7916       326.285       341.076    
  57  0.430522     -0.842757      -20.2863       20.2863       325.176       345.462    
  58  0.637009E-01  -2.75356      -66.2819       66.2819       305.352       371.634    
  59  0.872387     -0.136522      -3.28627       3.28627       347.848       351.134    
  60  0.740351     -0.300631      -7.23660       7.23660       291.756       298.992    
  61  0.844085     -0.169502      -4.08015       4.08015       324.811       328.891    
  62  0.574613     -0.554058      -13.3370       13.3370       300.312       313.649    
  63  0.382052     -0.962198      -23.1614       23.1614       325.466       348.627    
  64  0.564583     -0.571667      -13.7608       13.7608       322.539       336.300    
loop,thermsimp(1:2)       13   12.5865       8.86962    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    255        311.63          0.88          1.10         23.01          0.08          0.05         25.11
Just calling func    0   0         25.11


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    311.63
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    24.0714               253
loop is:       13
neval is:      254
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       13      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    24.0714               253
loop is:       14
neval is:      254


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 




neval>tstepnex so lower away!t
---> lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
     new SAtemp,tstepnext are :    12.0357               316

 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      316
neval,tstepnext:      254     316

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.338981      -1.08181      -13.0203       13.0203       281.266       294.287    
   2  0.649641     -0.431335      -5.19142       5.19142       290.580       295.771    
   3  0.930116     -0.724456E-01 -0.871933      0.871933       282.492       283.364    
   4  0.297326      -1.21293      -14.5984       14.5984       287.238       301.836    
   5  0.751734     -0.285373      -3.43466       3.43466       297.624       301.058    
   6  0.409056     -0.893902      -10.7587       10.7587       286.088       296.846    
   7  0.115094      -2.16201      -26.0213       26.0213       295.939       321.961    
   8  0.606681     -0.499753      -6.01487       6.01487       291.756       297.771    
   9  0.140571      -1.96204      -23.6146       23.6146       298.574       322.188    
  10  0.447669E-01  -3.10629      -37.3863       37.3863       295.168       332.554    
  11  0.517394     -0.658951      -7.93093       7.93093       300.320       308.251    
  12  0.587057     -0.532633      -6.41061       6.41061       298.353       304.763    
  13  0.384993E-01  -3.25712      -39.2016       39.2016       292.278       331.480    
  14  0.829105E-01  -2.48999      -29.9688       29.9688       300.312       330.281    
  15  0.382179     -0.961866      -11.5767       11.5767       308.583       320.160    
  16  0.269516      -1.31113      -15.7803       15.7803       311.913       327.693    
  17  0.879580     -0.128311      -1.54431       1.54431       282.445       283.989    
  18  0.760503E-01  -2.57636      -31.0083       31.0083       305.846       336.854    
  19  0.482544     -0.728684      -8.77021       8.77021       319.349       328.119    
  20  0.561499     -0.577145      -6.94635       6.94635       306.247       313.193    
  21  0.254621      -1.36798      -16.4646       16.4646       309.825       326.289    
  22  0.479261     -0.735511      -8.85238       8.85238       311.308       320.160    
  23  0.638455     -0.448704      -5.40047       5.40047       308.487       313.887    
  24  0.289082      -1.24105      -14.9368       14.9368       317.183       332.120    
  25  0.656024     -0.421558      -5.07374       5.07374       301.361       306.435    
  26  0.597431     -0.515117      -6.19979       6.19979       320.415       326.615    
  27  0.859562     -0.151333      -1.82140       1.82140       318.706       320.527    
  28  0.554826     -0.589100      -7.09023       7.09023       304.687       311.777    
  29  0.128413      -2.05250      -24.7033       24.7033       323.311       348.015    
  30  0.311170      -1.16742      -14.0507       14.0507       323.240       337.291    
  31  0.606679     -0.499755      -6.01490       6.01490       314.938       320.953    
  32  0.923238     -0.798686E-01 -0.961274      0.961274       324.811       325.772    
  33  0.734154     -0.309037      -3.71948       3.71948       291.268       294.987    
  34  0.988670     -0.113947E-01 -0.137143      0.137143       319.480       319.617    
  35  0.136308      -1.99284      -23.9852       23.9852       294.730       318.715    
  36  0.345839      -1.06178      -12.7793       12.7793       321.315       334.094    
  37  0.349440      -1.05142      -12.6546       12.6546       330.093       342.748    
  38  0.625658E-01  -2.77154      -33.3574       33.3574       321.570       354.928    
  39  0.394804     -0.929365      -11.1855       11.1855       311.734       322.919    
  40  0.899667E-02  -4.71090      -56.6990       56.6990       322.539       379.238    
  41  0.823946     -0.193651      -2.33072       2.33072       319.650       321.981    
  42  0.834235     -0.181240      -2.18135       2.18135       330.113       332.294    
  43  0.777534     -0.251627      -3.02851       3.02851       304.134       307.163    
  44  0.384993     -0.954531      -11.4884       11.4884       326.285       337.773    
  45  0.247443E-01  -3.69916      -44.5220       44.5220       302.687       347.209    
  46  0.810695     -0.209863      -2.52585       2.52585       318.875       321.401    
  47  0.893618     -0.112477      -1.35374       1.35374       323.294       324.648    
  48  0.545617     -0.605837      -7.29167       7.29167       325.176       332.467    
  49  0.587193     -0.532402      -6.40783       6.40783       306.186       312.594    
  50  0.991207     -0.883185E-02 -0.106298      0.106298       304.975       305.081    
  51  0.477440     -0.739316      -8.89819       8.89819       331.399       340.298    
  52  0.444858     -0.810000      -9.74891       9.74891       325.466       335.215    
  53  0.103440      -2.26876      -27.3061       27.3061       347.848       375.154    
  54  0.320718      -1.13719      -13.6869       13.6869       319.432       333.119    
  55  0.161721      -1.82188      -21.9276       21.9276       318.584       340.511    
  56  0.912244     -0.918481E-01  -1.10546       1.10546       304.814       305.919    
  57  0.358583      -1.02559      -12.3437       12.3437       320.138       332.481    
  58  0.263871      -1.33229      -16.0351       16.0351       304.685       320.720    
  59  0.782230     -0.245606      -2.95604       2.95604       297.677       300.633    
  60  0.592946     -0.522652      -6.29048       6.29048       305.352       311.643    
  61  0.652732     -0.426589      -5.13429       5.13429       320.470       325.604    
  62  0.817021     -0.202091      -2.43231       2.43231       324.833       327.265    
  63  0.177213      -1.73040      -20.8266       20.8266       350.071       370.897    
  64  0.263258      -1.33462      -16.0631       16.0631       311.629       327.692    
loop,thermsimp(1:2)       14   13.0203       5.19142    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    256        312.38          0.88          1.09         23.09          0.03          0.05         25.15
Just calling func    0   0         25.15


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    312.38
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    12.0357               316
loop is:       14
neval is:      255
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       14      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    12.0357               316
loop is:       15
neval is:      255


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      316
neval,tstepnext:      255     316

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.219724      -1.51538      -18.2387       18.2387       282.492       300.731    
   2  0.894567E-01  -2.41400      -29.0542       29.0542       282.445       311.499    
   3  0.863615     -0.146628      -1.76477       1.76477       281.266       283.031    
   4  0.807990     -0.213206      -2.56608       2.56608       291.268       293.834    
   5  0.318173      -1.14516      -13.7828       13.7828       290.580       304.363    
   6  0.464606     -0.766566      -9.22615       9.22615       286.088       295.314    
   7  0.574933     -0.553501      -6.66177       6.66177       291.756       298.417    
   8  0.974939     -0.253802E-01 -0.305469      0.305469       297.677       297.982    
   9  0.415757     -0.877653      -10.5632       10.5632       297.624       308.187    
  10  0.187109      -1.67606      -20.1726       20.1726       287.238       307.411    
  11  0.730515E-01  -2.61659      -31.4925       31.4925       298.353       329.845    
  12  0.209185      -1.56454      -18.8303       18.8303       304.975       323.805    
  13  0.496690     -0.699790      -8.42246       8.42246       304.814       313.236    
  14  0.862986     -0.147356      -1.77354       1.77354       301.361       303.135    
  15  0.888200     -0.118558      -1.42693       1.42693       304.134       305.561    
  16  0.380888     -0.965250      -11.6175       11.6175       300.320       311.937    
  17  0.135305      -2.00022      -24.0741       24.0741       305.352       329.426    
  18  0.927079     -0.757167E-01 -0.911303      0.911303       304.687       305.598    
  19  0.603067     -0.505727      -6.08677       6.08677       306.186       312.273    
  20  0.136202      -1.99362      -23.9946       23.9946       306.247       330.241    
  21  0.954653     -0.464076E-01 -0.558548      0.558548       308.487       309.045    
  22  0.151192      -1.88920      -22.7379       22.7379       294.730       317.468    
  23  0.449259     -0.800155      -9.63043       9.63043       319.480       329.110    
  24  0.780874     -0.247341      -2.97693       2.97693       308.583       311.560    
  25  0.456238     -0.784740      -9.44490       9.44490       311.308       320.753    
  26  0.163284      -1.81227      -21.8119       21.8119       318.706       340.518    
  27  0.821444     -0.196692      -2.36732       2.36732       304.685       307.052    
  28  0.861448     -0.149141      -1.79501       1.79501       314.938       316.733    
  29  0.924167     -0.788621E-01 -0.949160      0.949160       318.875       319.824    
  30  0.195059      -1.63445      -19.6718       19.6718       295.939       315.611    
  31  0.375134     -0.980472      -11.8007       11.8007       319.650       331.451    
  32  0.909862     -0.944628E-01  -1.13693       1.13693       298.574       299.711    
  33  0.831459     -0.184574      -2.22147       2.22147       311.734       313.955    
  34  0.627278     -0.466365      -5.61303       5.61303       323.294       328.907    
  35  0.918890     -0.845891E-01  -1.01809       1.01809       320.470       321.488    
  36  0.475784     -0.742791      -8.94000       8.94000       324.811       333.751    
  37  0.344524      -1.06559      -12.8251       12.8251       309.825       322.650    
  38  0.286778      -1.24905      -15.0331       15.0331       320.415       335.449    
  39  0.336148      -1.09020      -13.1213       13.1213       324.833       337.955    
  40  0.709840     -0.342716      -4.12483       4.12483       311.629       315.754    
  41  0.219827      -1.51491      -18.2330       18.2330       311.913       330.146    
  42  0.347594      -1.05672      -12.7184       12.7184       319.349       332.068    
  43  0.905734     -0.990099E-01  -1.19165       1.19165       300.312       301.504    
  44  0.826231     -0.190881      -2.29738       2.29738       292.278       294.576    
  45  0.400277     -0.915599      -11.0199       11.0199       317.183       328.203    
  46  0.555153     -0.588512      -7.08315       7.08315       330.113       337.196    
  47  0.864397     -0.145723      -1.75388       1.75388       325.176       326.930    
  48  0.277380E-01  -3.58495      -43.1474       43.1474       320.138       363.285    
  49  0.993968     -0.605015E-02 -0.728178E-01  0.728178E-01   295.168       295.240    
  50  0.717076     -0.332573      -4.00275       4.00275       319.432       323.435    
  51  0.736253     -0.306182      -3.68511       3.68511       321.315       325.000    
  52  0.278813      -1.27722      -15.3722       15.3722       325.466       340.838    
  53  0.646460     -0.436245      -5.25051       5.25051       305.846       311.096    
  54  0.600312     -0.510306      -6.14189       6.14189       323.240       329.382    
  55  0.295434      -1.21931      -14.6753       14.6753       326.285       340.960    
  56  0.946129     -0.553767E-01 -0.666497      0.666497       331.399       332.066    
  57  0.722008     -0.325719      -3.92026       3.92026       318.584       322.504    
  58  0.789514     -0.236338      -2.84449       2.84449       330.093       332.938    
  59  0.955429     -0.455949E-01 -0.548767      0.548767       302.687       303.236    
  60  0.693546     -0.365938      -4.40431       4.40431       323.311       327.716    
  61  0.979434     -0.207808E-01 -0.250112      0.250112       321.570       321.821    
  62  0.860966     -0.149700      -1.80175       1.80175       350.071       351.872    
  63  0.329063      -1.11151      -13.3778       13.3778       347.848       361.225    
  64  0.839540     -0.174902      -2.10506       2.10506       312.379       314.484    
loop,thermsimp(1:2)       15   18.2387       29.0542    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    257        293.21          0.88          1.09         23.16          0.03          0.05         25.21
Just calling func    0   0         25.21


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    293.21
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    12.0357               316
loop is:       15
neval is:      256
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       15      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    12.0357               316
loop is:       16
neval is:      256


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      316
neval,tstepnext:      256     316

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.231724      -1.46221      -17.5987       17.5987       281.266       298.865    
   2  0.641193     -0.444425      -5.34896       5.34896       291.268       296.617    
   3  0.353033      -1.04119      -12.5315       12.5315       292.278       304.810    
   4  0.928955     -0.736953E-01 -0.886974      0.886974       295.168       296.055    
   5  0.350257      -1.04909      -12.6265       12.6265       286.088       298.714    
   6  0.682617     -0.381821      -4.59548       4.59548       297.677       302.272    
   7  0.162763      -1.81546      -21.8503       21.8503       291.756       313.606    
   8  0.874032     -0.134639      -1.62047       1.62047       298.574       300.194    
   9  0.518909     -0.656027      -7.89574       7.89574       282.492       290.388    
  10  0.461984     -0.772226      -9.29428       9.29428       300.312       309.606    
  11  0.449468     -0.799691      -9.62484       9.62484       301.361       310.986    
  12  0.523281     -0.647637      -7.79477       7.79477       302.687       310.482    
  13  0.637377     -0.450394      -5.42081       5.42081       290.580       296.001    
  14  0.596329     -0.516963      -6.22201       6.22201       304.134       310.356    
  15  0.286246      -1.25090      -15.0555       15.0555       304.687       319.742    
  16  0.590425     -0.526913      -6.34177       6.34177       304.685       311.027    
  17  0.853637     -0.158249      -1.90463       1.90463       287.238       289.143    
  18  0.245572      -1.40416      -16.9001       16.9001       297.624       314.524    
  19  0.375654     -0.979088      -11.7840       11.7840       308.487       320.271    
  20  0.281654      -1.26708      -15.2501       15.2501       305.846       321.096    
  21  0.443392     -0.813302      -9.78865       9.78865       282.445       292.234    
  22  0.442934     -0.814335      -9.80109       9.80109       308.583       318.384    
  23  0.171790      -1.76149      -21.2007       21.2007       300.320       321.521    
  24  0.802582     -0.219921      -2.64691       2.64691       306.186       308.833    
  25  0.162733      -1.81564      -21.8525       21.8525       304.814       326.666    
  26  0.838320     -0.176355      -2.12255       2.12255       311.734       313.856    
  27  0.210754      -1.55706      -18.7403       18.7403       312.379       331.120    
  28  0.240377      -1.42554      -17.1574       17.1574       295.939       313.097    
  29  0.173042E-01  -4.05680      -48.8265       48.8265       311.629       360.455    
  30  0.640146     -0.446059      -5.36863       5.36863       314.938       320.306    
  31  0.749210     -0.288736      -3.47514       3.47514       294.730       298.205    
  32  0.666162     -0.406222      -4.88917       4.88917       318.875       323.764    
  33  0.601746     -0.507920      -6.11317       6.11317       311.308       317.421    
  34  0.677044     -0.390020      -4.69416       4.69416       320.470       325.164    
  35  0.290379      -1.23657      -14.8830       14.8830       321.570       336.453    
  36  0.439723     -0.821610      -9.88865       9.88865       318.584       328.472    
  37  0.680091     -0.385528      -4.64010       4.64010       309.825       314.465    
  38  0.803784     -0.218425      -2.62889       2.62889       319.432       322.061    
  39  0.507823     -0.677622      -8.15566       8.15566       304.975       313.130    
  40  0.894573     -0.111408      -1.34088       1.34088       321.315       322.656    
  41  0.826908     -0.190062      -2.28753       2.28753       325.176       327.463    
  42  0.815562     -0.203878      -2.45382       2.45382       323.311       325.765    
  43  0.352457      -1.04283      -12.5512       12.5512       317.183       329.735    
  44  0.104059      -2.26279      -27.2343       27.2343       323.294       350.529    
  45  0.601892     -0.507677      -6.11024       6.11024       319.480       325.590    
  46  0.988184     -0.118862E-01 -0.143058      0.143058       323.240       323.383    
  47  0.733912     -0.309366      -3.72344       3.72344       305.352       309.076    
  48  0.107394      -2.23125      -26.8546       26.8546       298.353       325.207    
  49  0.592150     -0.523995      -6.30665       6.30665       311.913       318.220    
  50  0.821901     -0.196136      -2.36063       2.36063       306.247       308.607    
  51  0.400070E-01  -3.21870      -38.7393       38.7393       319.650       358.389    
  52  0.271211      -1.30486      -15.7049       15.7049       331.399       347.104    
  53  0.296309      -1.21635      -14.6396       14.6396       319.349       333.989    
  54  0.436334     -0.829346      -9.98176       9.98176       330.093       340.075    
  55  0.372372     -0.987863      -11.8896       11.8896       324.811       336.700    
  56  0.806182     -0.215446      -2.59304       2.59304       320.415       323.008    
  57  0.194087      -1.63945      -19.7319       19.7319       330.113       349.844    
  58  0.739876     -0.301273      -3.62603       3.62603       324.833       328.459    
  59  0.348380      -1.05446      -12.6912       12.6912       318.706       331.397    
  60  0.850149     -0.162343      -1.95392       1.95392       325.466       327.420    
  61  0.123296      -2.09317      -25.1927       25.1927       326.285       351.477    
  62  0.855160     -0.156467      -1.88319       1.88319       350.071       351.954    
  63  0.959969E-01  -2.34344      -28.2049       28.2049       347.848       376.053    
  64  0.739916     -0.301218      -3.62537       3.62537       293.215       296.840    
loop,thermsimp(1:2)       16   17.5987       5.34896    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    258        307.59          0.88          1.10         23.14          0.21          0.04         25.38
Just calling func    0   0         25.38


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    307.59
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    12.0357               316
loop is:       16
neval is:      257
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       16      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    12.0357               316
loop is:       17
neval is:      257


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      316
neval,tstepnext:      257     316

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.776913     -0.252427      -3.03813       3.03813       287.238       290.276    
   2  0.350417      -1.04863      -12.6210       12.6210       282.492       295.113    
   3  0.533846     -0.627648      -7.55418       7.55418       282.445       289.999    
   4  0.622955     -0.473280      -5.69626       5.69626       290.580       296.276    
   5  0.661091E-01  -2.71645      -32.6943       32.6943       295.168       327.862    
   6  0.759206     -0.275482      -3.31562       3.31562       291.268       294.583    
   7  0.430535     -0.842727      -10.1428       10.1428       293.215       303.358    
   8  0.257678      -1.35604      -16.3209       16.3209       294.730       311.051    
   9  0.296561      -1.21550      -14.6294       14.6294       286.088       300.717    
  10  0.805929     -0.215760      -2.59682       2.59682       281.266       283.863    
  11  0.421616     -0.863661      -10.3948       10.3948       298.574       308.969    
  12  0.767803     -0.264223      -3.18010       3.18010       297.677       300.857    
  13  0.605260     -0.502097      -6.04309       6.04309       292.278       298.321    
  14  0.566784     -0.567776      -6.83358       6.83358       306.247       313.080    
  15  0.292740      -1.22847      -14.7855       14.7855       306.186       320.971    
  16  0.898463     -0.107069      -1.28866       1.28866       305.352       306.641    
  17  0.218067      -1.52295      -18.3298       18.3298       300.312       318.642    
  18  0.856756     -0.154603      -1.86075       1.86075       304.134       305.995    
  19  0.338883      -1.08210      -13.0238       13.0238       302.687       315.711    
  20  0.796034     -0.228113      -2.74550       2.74550       301.361       304.107    
  21  0.778636     -0.250212      -3.01147       3.01147       304.685       307.696    
  22  0.575989     -0.551667      -6.63970       6.63970       295.939       302.579    
  23  0.355531      -1.03414      -12.4466       12.4466       304.975       317.421    
  24  0.164949      -1.80212      -21.6898       21.6898       291.756       313.445    
  25  0.315998      -1.15202      -13.8654       13.8654       311.734       325.599    
  26  0.330933      -1.10584      -13.3095       13.3095       309.825       323.134    
  27  0.429436     -0.845283      -10.1736       10.1736       297.624       307.797    
  28  0.464808     -0.766130      -9.22091       9.22091       311.308       320.529    
  29  0.192211      -1.64916      -19.8488       19.8488       311.913       331.762    
  30  0.866849     -0.142891      -1.71979       1.71979       308.583       310.303    
  31  0.474973     -0.744498      -8.96055       8.96055       304.687       313.647    
  32  0.667713     -0.403897      -4.86118       4.86118       308.487       313.348    
  33  0.994155     -0.586200E-02 -0.705533E-01  0.705533E-01   314.938       315.008    
  34  0.577739     -0.548634      -6.60319       6.60319       305.846       312.449    
  35  0.381919     -0.962546      -11.5849       11.5849       300.320       311.905    
  36  0.733204     -0.310331      -3.73505       3.73505       319.432       323.167    
  37  0.492382     -0.708500      -8.52729       8.52729       321.315       329.842    
  38  0.188899E-01  -3.96913      -47.7712       47.7712       320.415       368.187    
  39  0.741920E-01  -2.60110      -31.3060       31.3060       323.240       354.546    
  40  0.210592      -1.55783      -18.7496       18.7496       318.875       337.624    
  41  0.682838     -0.381498      -4.59160       4.59160       320.470       325.062    
  42  0.656831     -0.420328      -5.05894       5.05894       298.353       303.412    
  43  0.444670     -0.810424      -9.75401       9.75401       319.480       329.234    
  44  0.872301     -0.136621      -1.64433       1.64433       323.311       324.956    
  45  0.932741     -0.696282E-01 -0.838024      0.838024       304.814       305.652    
  46  0.601727     -0.507951      -6.11355       6.11355       325.466       331.579    
  47  0.940344     -0.615097E-01 -0.740312      0.740312       325.176       325.916    
  48  0.208477E-01  -3.87051      -46.5843       46.5843       324.833       371.417    
  49  0.257831      -1.35545      -16.3138       16.3138       318.584       334.897    
  50  0.522803     -0.648550      -7.80575       7.80575       317.183       324.989    
  51  0.676437     -0.390915      -4.70494       4.70494       312.379       317.084    
  52  0.612346     -0.490458      -5.90300       5.90300       318.706       324.609    
  53  0.206854      -1.57574      -18.9652       18.9652       319.349       338.314    
  54  0.201156      -1.60367      -19.3013       19.3013       321.570       340.872    
  55  0.785118     -0.241921      -2.91168       2.91168       324.811       327.722    
  56  0.534951     -0.625580      -7.52929       7.52929       330.093       337.623    
  57  0.147432      -1.91439      -23.0410       23.0410       331.399       354.440    
  58  0.696605     -0.361537      -4.35135       4.35135       330.113       334.464    
  59  0.711810     -0.339944      -4.09146       4.09146       323.294       327.386    
  60  0.934269     -0.679906E-01 -0.818313      0.818313       326.285       327.103    
  61  0.821040     -0.197183      -2.37323       2.37323       350.071       352.444    
  62  0.682914     -0.381386      -4.59024       4.59024       319.650       324.240    
  63  0.660876     -0.414189      -4.98505       4.98505       311.629       316.614    
  64  0.653213     -0.425852      -5.12542       5.12542       307.590       312.716    
loop,thermsimp(1:2)       17   3.03813       12.6210    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    259        289.74          0.88          1.09         23.11          0.02          0.05         25.14
Just calling func    0   0         25.14


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    260        286.52          0.88          1.09         23.09          0.10          0.05         25.20
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    286.52
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    12.0357               316
loop is:       17
neval is:      259
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       17      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    12.0357               316
loop is:       18
neval is:      259


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      316
neval,tstepnext:      259     316

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.240395      -1.42547      -17.1565       17.1565       281.266       298.423    
   2  0.711556E-02  -4.94547      -59.5222       59.5222       282.445       341.967    
   3  0.909796     -0.945347E-01  -1.13779       1.13779       287.238       288.376    
   4  0.659218     -0.416702      -5.01529       5.01529       291.268       296.283    
   5  0.833482     -0.182144      -2.19223       2.19223       282.492       284.684    
   6  0.726295E-01  -2.62238      -31.5622       31.5622       290.580       322.142    
   7  0.687091     -0.375288      -4.51685       4.51685       292.278       296.795    
   8  0.860775     -0.149922      -1.80441       1.80441       286.088       287.892    
   9  0.846215     -0.166982      -2.00974       2.00974       297.677       299.687    
  10  0.398551     -0.919919      -11.0719       11.0719       295.939       307.011    
  11  0.416092     -0.876849      -10.5535       10.5535       293.215       303.768    
  12  0.463389     -0.769189      -9.25772       9.25772       298.353       307.610    
  13  0.207356      -1.57332      -18.9360       18.9360       301.361       320.297    
  14  0.133003      -2.01738      -24.2806       24.2806       304.814       329.095    
  15  0.464971     -0.765779      -9.21668       9.21668       304.134       313.351    
  16  0.568281     -0.565140      -6.80185       6.80185       305.352       312.154    
  17  0.638811     -0.448147      -5.39376       5.39376       304.685       310.079    
  18  0.865664     -0.144259      -1.73626       1.73626       297.624       299.360    
  19  0.475002     -0.744436      -8.95981       8.95981       298.574       307.534    
  20  0.537086     -0.621597      -7.48135       7.48135       308.583       316.064    
  21  0.782345     -0.245459      -2.95427       2.95427       294.730       297.684    
  22  0.725469     -0.320937      -3.86270       3.86270       300.320       304.183    
  23  0.701426E-01  -2.65723      -31.9816       31.9816       305.846       337.827    
  24  0.297043      -1.21388      -14.6099       14.6099       307.590       322.200    
  25  0.444870     -0.809973      -9.74859       9.74859       306.247       315.995    
  26  0.685684     -0.377338      -4.54153       4.54153       308.487       313.028    
  27  0.651244     -0.428871      -5.16176       5.16176       291.756       296.917    
  28  0.269082      -1.31274      -15.7997       15.7997       304.687       320.486    
  29  0.177107      -1.73100      -20.8338       20.8338       314.938       335.772    
  30  0.766464     -0.265968      -3.20111       3.20111       302.687       305.888    
  31  0.801833     -0.220855      -2.65814       2.65814       311.629       314.287    
  32  0.759414     -0.275209      -3.31233       3.31233       312.379       315.692    
  33  0.566307     -0.568618      -6.84371       6.84371       304.975       311.818    
  34  0.297948      -1.21084      -14.5732       14.5732       300.312       314.885    
  35  0.430097E-01  -3.14633      -37.8683       37.8683       311.308       349.176    
  36  0.529414     -0.635984      -7.65450       7.65450       306.186       313.840    
  37  0.717133     -0.332494      -4.00179       4.00179       309.825       313.826    
  38  0.209457      -1.56323      -18.8146       18.8146       319.432       338.247    
  39  0.732428     -0.311390      -3.74780       3.74780       319.650       323.398    
  40  0.697782     -0.359849      -4.33103       4.33103       318.706       323.037    
  41  0.977227     -0.230362E-01 -0.277256      0.277256       323.311       323.589    
  42  0.744700     -0.294773      -3.54780       3.54780       317.183       320.731    
  43  0.713341     -0.337796      -4.06561       4.06561       320.470       324.536    
  44  0.497823     -0.697510      -8.39502       8.39502       311.734       320.129    
  45  0.968758     -0.317404E-01 -0.382017      0.382017       325.176       325.558    
  46  0.287665      -1.24596      -14.9960       14.9960       326.285       341.281    
  47  0.964672     -0.359674E-01 -0.432892      0.432892       323.294       323.727    
  48  0.733769     -0.309561      -3.72579       3.72579       324.811       328.537    
  49  0.692680     -0.367187      -4.41936       4.41936       295.168       299.587    
  50  0.328873      -1.11208      -13.3847       13.3847       319.480       332.865    
  51  0.744920     -0.294478      -3.54425       3.54425       321.315       324.859    
  52  0.655188     -0.422834      -5.08910       5.08910       325.466       330.555    
  53  0.255467      -1.36466      -16.4246       16.4246       311.913       328.338    
  54  0.262199E-02  -5.94382      -71.5380       71.5380       330.113       401.651    
  55  0.538310     -0.619321      -7.45395       7.45395       318.584       326.038    
  56  0.456270     -0.784671      -9.44406       9.44406       330.093       339.538    
  57  0.990209     -0.983957E-02 -0.118426      0.118426       318.875       318.993    
  58  0.262373      -1.33799      -16.1036       16.1036       319.349       335.453    
  59  0.645275     -0.438079      -5.27259       5.27259       321.570       326.843    
  60  0.423351     -0.859554      -10.3453       10.3453       350.071       360.416    
  61  0.353204      -1.04071      -12.5256       12.5256       331.399       343.925    
  62  0.721881     -0.325895      -3.92237       3.92237       323.240       327.162    
  63  0.213966      -1.54194      -18.5583       18.5583       320.415       338.974    
  64  0.176516      -1.73434      -20.8740       20.8740       286.521       307.395    
loop,thermsimp(1:2)       18   17.1565       59.5222    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    261        297.82          0.88          1.10         23.12          0.02          0.04         25.15
Just calling func    0   0         25.15


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  260    297.82        4.128     -1.106      3.911     -100.0     0.2745    
                      -1.007      2.453     -100.0      2.652     0.6886    
                       1.205    -0.1307E-01  2.400      0.000      0.000    
                     -0.7391      0.000      0.000      0.000     -1.221    

                      -2.500      9545.     0.1446E+05 -860.6     -2676.    
                      -2.000     -6.264     -2.992     -4.861     -2.467    
                      -12.61     -2.363      1359.      0.000      3354.    

                       4764.      3323.      5073.      5329.      2500.    
                       4298.     0.2021E-01-0.6423E-01  0.000    -0.3544E-01
                      0.2159E-01-0.1081    -0.3499    -0.1130    -0.2963E-01

                     -0.3729    -0.8176      0.000     0.2654     0.7630E-01
                      0.8541E-01 0.6762E-01 0.8333E-01 0.6875E-01 0.6536E-01
                      0.6288E-02 0.1231E-01-0.1994    -0.6886      0.000    

                      -1.322     -2.726      3.599     -1.299      0.000    
                       0.000      9.089      9.130     -5701.     -4.000    
                     -0.4424E-01-0.2528      8.856      8.553     -8012.    

                      -4.000     0.2871      1.155      9.283      9.156    
                      -5523.     -4.000     0.1868     0.4671      9.446    
                       8.956     -3443.     -2.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    297.82
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    12.0357               316
loop is:       18
neval is:      260
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       18      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    12.0357               316
loop is:       19
neval is:      260


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      316
neval,tstepnext:      260     316

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.722200     -0.325453      -3.91705       3.91705       282.492       286.409    
   2  0.240049      -1.42691      -17.1739       17.1739       286.088       303.262    
   3  0.365543      -1.00637      -12.1124       12.1124       287.238       299.350    
   4  0.399010     -0.918769      -11.0580       11.0580       291.268       302.326    
   5  0.685268     -0.377945      -4.54883       4.54883       292.278       296.827    
   6  0.335805E-01  -3.39381      -40.8469       40.8469       291.756       332.603    
   7  0.820520     -0.197817      -2.38086       2.38086       294.730       297.111    
   8  0.756560     -0.278973      -3.35764       3.35764       281.266       284.624    
   9  0.869461     -0.139882      -1.68358       1.68358       297.624       299.307    
  10  0.787378     -0.239047      -2.87709       2.87709       295.168       298.045    
  11  0.330926      -1.10586      -13.3098       13.3098       297.677       310.987    
  12  0.339084E-01  -3.38409      -40.7299       40.7299       293.215       333.945    
  13  0.672805     -0.396300      -4.76974       4.76974       300.320       305.090    
  14  0.822413     -0.195513      -2.35313       2.35313       302.687       305.040    
  15  0.928870     -0.737865E-01 -0.888071      0.888071       295.939       296.827    
  16  0.778944     -0.249816      -3.00671       3.00671       286.521       289.528    
  17  0.301602E-01  -3.50123      -42.1398       42.1398       298.574       340.714    
  18  0.292626      -1.22886      -14.7902       14.7902       298.353       313.143    
  19  0.149515      -1.90036      -22.8721       22.8721       304.685       327.557    
  20  0.500330E-01  -2.99507      -36.0478       36.0478       304.975       341.022    
  21  0.759114E-01  -2.57819      -31.0303       31.0303       305.352       336.382    
  22  0.613440     -0.488673      -5.88151       5.88151       308.487       314.368    
  23  0.132502      -2.02116      -24.3260       24.3260       304.134       328.461    
  24  0.189750E-02  -6.26722      -75.4304       75.4304       309.825       385.255    
  25  0.507622     -0.678018      -8.16042       8.16042       306.186       314.346    
  26  0.378733     -0.970924      -11.6857       11.6857       311.629       323.315    
  27  0.139411      -1.97033      -23.7142       23.7142       300.312       324.026    
  28  0.298599      -1.20865      -14.5470       14.5470       312.379       326.926    
  29  0.767617     -0.264464      -3.18301       3.18301       306.247       309.430    
  30  0.656077     -0.421478      -5.07278       5.07278       308.583       313.656    
  31  0.701883     -0.353988      -4.26049       4.26049       318.875       323.135    
  32  0.940950     -0.608655E-01 -0.732558      0.732558       311.734       312.466    
  33  0.621043     -0.476355      -5.73326       5.73326       301.361       307.094    
  34  0.622910     -0.473353      -5.69713       5.69713       304.687       310.384    
  35  0.525019     -0.644320      -7.75484       7.75484       317.183       324.938    
  36  0.871126     -0.137969      -1.66055       1.66055       290.580       292.240    
  37  0.475532     -0.743322      -8.94639       8.94639       307.590       316.537    
  38  0.320094      -1.13914      -13.7103       13.7103       318.706       332.416    
  39  0.688986     -0.372534      -4.48371       4.48371       319.650       324.134    
  40  0.831218     -0.184863      -2.22496       2.22496       323.311       325.536    
  41  0.639633     -0.446861      -5.37828       5.37828       323.294       328.673    
  42  0.628257     -0.464807      -5.59427       5.59427       320.470       326.064    
  43  0.925835     -0.770596E-01 -0.927465      0.927465       321.315       322.242    
  44  0.611089     -0.492512      -5.92772       5.92772       325.176       331.103    
  45  0.423003E-01  -3.16296      -38.0684       38.0684       318.584       356.652    
  46  0.430763     -0.842198      -10.1364       10.1364       321.570       331.707    
  47  0.374764     -0.981459      -11.8125       11.8125       323.240       335.053    
  48  0.109336      -2.21333      -26.6389       26.6389       311.913       338.552    
  49  0.642636E-02  -5.04735      -60.7483       60.7483       324.811       385.559    
  50  0.232984      -1.45679      -17.5334       17.5334       304.814       322.347    
  51  0.169005E-01  -4.08041      -49.1106       49.1106       325.466       374.576    
  52  0.183441      -1.69586      -20.4109       20.4109       319.480       339.891    
  53  0.257429      -1.35701      -16.3326       16.3326       319.349       335.682    
  54  0.784332     -0.242922      -2.92374       2.92374       314.938       317.862    
  55  0.417881     -0.872558      -10.5018       10.5018       305.846       316.348    
  56  0.597408E-01  -2.81774      -33.9135       33.9135       319.432       353.345    
  57  0.854186E-01  -2.46019      -29.6101       29.6101       320.415       350.026    
  58  0.484163     -0.725335      -8.72991       8.72991       330.093       338.823    
  59  0.392210     -0.935958      -11.2649       11.2649       326.285       337.550    
  60  0.544229     -0.608385      -7.32233       7.32233       282.445       289.767    
  61  0.846696     -0.166413      -2.00290       2.00290       331.399       333.402    
  62  0.273327      -1.29709      -15.6114       15.6114       311.308       326.919    
  63  0.253790      -1.37125      -16.5039       16.5039       350.071       366.575    
  64  0.683640     -0.380324      -4.57747       4.57747       297.817       302.394    
loop,thermsimp(1:2)       19   3.91705       17.1739    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    262        284.23          0.88          1.09         23.11          0.15          0.05         25.27
Just calling func    0   0         25.27


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    263        296.66          0.86          1.08         23.07          0.04          0.05         25.09
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    284.23
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    12.0357               316
loop is:       19
neval is:      262
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       19      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    12.0357               316
loop is:       20
neval is:      262


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      316
neval,tstepnext:      262     316

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.311857      -1.16521      -14.0241       14.0241       281.266       295.290    
   2  0.362384      -1.01505      -12.2168       12.2168       282.492       294.709    
   3  0.900627     -0.104664      -1.25971       1.25971       286.521       287.781    
   4  0.233893      -1.45289      -17.4865       17.4865       282.445       299.932    
   5  0.183338      -1.69642      -20.4176       20.4176       290.580       310.997    
   6  0.351708      -1.04495      -12.5767       12.5767       292.278       304.855    
   7  0.979617     -0.205938E-01 -0.247860      0.247860       295.939       296.187    
   8  0.801294     -0.221527      -2.66624       2.66624       294.730       297.396    
   9  0.423893     -0.858275      -10.3299       10.3299       295.168       305.498    
  10  0.486446     -0.720630      -8.67329       8.67329       297.624       306.297    
  11  0.430531     -0.842736      -10.1429       10.1429       287.238       297.381    
  12  0.214629      -1.53884      -18.5210       18.5210       291.268       309.789    
  13  0.860310     -0.150463      -1.81093       1.81093       297.817       299.627    
  14  0.450659     -0.797045      -9.59299       9.59299       286.088       295.681    
  15  0.867432     -0.142218      -1.71169       1.71169       302.687       304.399    
  16  0.850327     -0.162134      -1.95139       1.95139       300.320       302.271    
  17  0.914193     -0.897130E-01  -1.07976       1.07976       301.361       302.441    
  18  0.908448     -0.960172E-01  -1.15563       1.15563       306.247       307.402    
  19  0.349788E-01  -3.35301      -40.3558       40.3558       304.687       345.042    
  20  0.825048     -0.192314      -2.31464       2.31464       297.677       299.992    
  21  0.628933     -0.463730      -5.58131       5.58131       311.734       317.315    
  22  0.756366     -0.279229      -3.36072       3.36072       298.353       301.713    
  23  0.545707     -0.605674      -7.28970       7.28970       308.583       315.873    
  24  0.653619     -0.425231      -5.11795       5.11795       306.186       311.304    
  25  0.781643     -0.246357      -2.96507       2.96507       308.487       311.452    
  26  0.444411     -0.811005      -9.76101       9.76101       305.846       315.607    
  27  0.223111      -1.50008      -18.0546       18.0546       307.590       325.645    
  28  0.143901      -1.93863      -23.3328       23.3328       314.938       338.271    
  29  0.419282E-01  -3.17180      -38.1748       38.1748       321.315       359.489    
  30  0.407367     -0.898040      -10.8085       10.8085       304.814       315.622    
  31  0.722138     -0.325538      -3.91808       3.91808       318.875       322.793    
  32  0.290143      -1.23738      -14.8927       14.8927       311.629       326.521    
  33  0.236931E-01  -3.74257      -45.0444       45.0444       300.312       345.357    
  34  0.198981      -1.61454      -19.4322       19.4322       319.650       339.082    
  35  0.765966     -0.266617      -3.20892       3.20892       317.183       320.392    
  36  0.522733     -0.648684      -7.80736       7.80736       323.311       331.119    
  37  0.297579E-01  -3.51466      -42.3014       42.3014       320.470       362.771    
  38  0.175475      -1.74026      -20.9452       20.9452       311.308       332.253    
  39  0.311931      -1.16497      -14.0212       14.0212       312.379       326.401    
  40  0.310920      -1.16822      -14.0603       14.0603       304.685       318.745    
  41  0.122272      -2.10150      -25.2931       25.2931       304.134       329.428    
  42  0.949359     -0.519686E-01 -0.625478      0.625478       323.294       323.920    
  43  0.500750     -0.691648      -8.32446       8.32446       325.176       333.500    
  44  0.729401E-01  -2.61812      -31.5108       31.5108       321.570       353.081    
  45  0.952528     -0.486360E-01 -0.585368      0.585368       318.706       319.291    
  46  0.718842     -0.330114      -3.97315       3.97315       291.756       295.729    
  47  0.529396     -0.636019      -7.65493       7.65493       331.399       339.054    
  48  0.314661      -1.15626      -13.9164       13.9164       293.215       307.131    
  49  0.947465     -0.539649E-01 -0.649505      0.649505       323.240       323.890    
  50  0.613869     -0.487974      -5.87311       5.87311       319.349       325.222    
  51  0.303056      -1.19384      -14.3687       14.3687       305.352       319.721    
  52  0.749186     -0.288769      -3.47553       3.47553       326.285       329.760    
  53  0.671119E-01  -2.70139      -32.5132       32.5132       311.913       344.426    
  54  0.545553E-02  -5.21113      -62.7195       62.7195       330.093       392.813    
  55  0.866985     -0.142734      -1.71790       1.71790       319.480       321.198    
  56  0.622088     -0.474673      -5.71302       5.71302       298.574       304.287    
  57  0.471050     -0.752790      -9.06036       9.06036       304.975       314.035    
  58  0.433456     -0.835964      -10.0614       10.0614       320.415       330.477    
  59  0.946573     -0.549070E-01 -0.660844      0.660844       319.432       320.093    
  60  0.795665     -0.228577      -2.75108       2.75108       318.584       321.335    
  61  0.536872E-01  -2.92458      -35.1994       35.1994       350.071       385.270    
  62  0.761403     -0.272592      -3.28084       3.28084       325.466       328.746    
  63  0.615271     -0.485692      -5.84564       5.84564       309.825       315.670    
  64  0.585500     -0.535288      -6.44257       6.44257       284.234       290.677    
loop,thermsimp(1:2)       20   14.0241       12.2168    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    264        278.06          0.88          1.09         23.09          0.02          0.05         25.13
Just calling func    0   0         25.13


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    265        284.80          0.85          1.07         23.07          0.15          0.04         25.18
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    278.06
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    12.0357               316
loop is:       20
neval is:      264
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       20      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    12.0357               316
loop is:       21
neval is:      264


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      316
neval,tstepnext:      264     316

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.307193      -1.18028      -14.2055       14.2055       286.521       300.726    
   2  0.575213     -0.553015      -6.65591       6.65591       284.234       290.890    
   3  0.632244     -0.458480      -5.51813       5.51813       282.492       288.010    
   4  0.819203     -0.199424      -2.40020       2.40020       281.266       283.666    
   5  0.137693E-02  -6.58790      -79.2899       79.2899       286.088       365.378    
   6  0.367814      -1.00018      -12.0378       12.0378       291.756       303.794    
   7  0.452636     -0.792666      -9.54029       9.54029       295.939       305.480    
   8  0.278102      -1.27977      -15.4029       15.4029       287.238       302.641    
   9  0.417803     -0.872745      -10.5041       10.5041       294.730       305.234    
  10  0.682140     -0.382521      -4.60391       4.60391       297.817       302.420    
  11  0.204733      -1.58605      -19.0892       19.0892       282.445       301.534    
  12  0.637442     -0.450292      -5.41958       5.41958       297.677       303.096    
  13  0.114518      -2.16702      -26.0816       26.0816       298.353       324.434    
  14  0.724207     -0.322678      -3.88366       3.88366       300.320       304.204    
  15  0.461399     -0.773492      -9.30952       9.30952       301.361       310.671    
  16  0.731739     -0.312332      -3.75913       3.75913       298.574       302.333    
  17  0.773272     -0.257124      -3.09467       3.09467       302.687       305.782    
  18  0.789195     -0.236742      -2.84935       2.84935       292.278       295.128    
  19  0.762001     -0.271807      -3.27138       3.27138       295.168       298.439    
  20  0.933384     -0.689386E-01 -0.829724      0.829724       297.624       298.453    
  21  0.694037     -0.365230      -4.39580       4.39580       293.215       297.611    
  22  0.423570     -0.859038      -10.3391       10.3391       306.247       316.586    
  23  0.272919      -1.29858      -15.6293       15.6293       291.268       306.897    
  24  0.535843     -0.623914      -7.50924       7.50924       290.580       298.089    
  25  0.902288     -0.102822      -1.23753       1.23753       306.186       307.423    
  26  0.479374     -0.735275      -8.84954       8.84954       308.487       317.336    
  27  0.494900E-01  -3.00599      -36.1791       36.1791       304.975       341.154    
  28  0.921867     -0.813539E-01 -0.979151      0.979151       305.846       306.825    
  29  0.132425      -2.02174      -24.3330       24.3330       304.814       329.147    
  30  0.640539     -0.445446      -5.36125       5.36125       309.825       315.186    
  31  0.215363      -1.53543      -18.4800       18.4800       308.583       327.063    
  32  0.437204E-01  -3.12994      -37.6710       37.6710       311.734       349.405    
  33  0.166028      -1.79560      -21.6113       21.6113       304.685       326.296    
  34  0.425825     -0.853727      -10.2752       10.2752       318.706       328.981    
  35  0.810393     -0.210235      -2.53033       2.53033       305.352       307.882    
  36  0.855958     -0.155534      -1.87196       1.87196       319.432       321.304    
  37  0.830452     -0.185786      -2.23606       2.23606       317.183       319.420    
  38  0.658784     -0.417359      -5.02321       5.02321       319.480       324.503    
  39  0.910965     -0.932509E-01  -1.12234       1.12234       318.584       319.706    
  40  0.603480     -0.505043      -6.07854       6.07854       318.875       324.953    
  41  0.702610     -0.352953      -4.24804       4.24804       323.240       327.488    
  42  0.329065      -1.11150      -13.3777       13.3777       323.294       336.672    
  43  0.790497     -0.235094      -2.82952       2.82952       319.349       322.179    
  44  0.641572     -0.443834      -5.34185       5.34185       307.590       312.932    
  45  0.650683     -0.429733      -5.17214       5.17214       312.379       317.552    
  46  0.194049E-02  -6.24481      -75.1607       75.1607       311.629       386.789    
  47  0.662053     -0.412409      -4.96363       4.96363       325.466       330.429    
  48  0.294846      -1.22130      -14.6992       14.6992       304.134       318.834    
  49  0.709874     -0.342668      -4.12425       4.12425       326.285       330.409    
  50  0.700314     -0.356226      -4.28743       4.28743       320.415       324.703    
  51  0.639811E-01  -2.74917      -33.0881       33.0881       323.311       356.399    
  52  0.251451      -1.38051      -16.6154       16.6154       311.308       327.923    
  53  0.828691     -0.187907      -2.26160       2.26160       325.176       327.437    
  54  0.962710     -0.380034E-01 -0.457398      0.457398       314.938       315.395    
  55  0.429583     -0.844940      -10.1694       10.1694       331.399       341.569    
  56  0.871108     -0.137990      -1.66080       1.66080       319.650       321.311    
  57  0.328516      -1.11317      -13.3978       13.3978       311.913       325.311    
  58  0.401423     -0.912741      -10.9855       10.9855       304.687       315.672    
  59  0.671285     -0.398562      -4.79697       4.79697       300.312       305.109    
  60  0.919587     -0.838302E-01  -1.00896       1.00896       321.570       322.579    
  61  0.209634      -1.56239      -18.8045       18.8045       321.315       340.119    
  62  0.894137     -0.111896      -1.34674       1.34674       320.470       321.817    
  63  0.623590     -0.472262      -5.68400       5.68400       350.071       355.755    
  64  0.469722     -0.755615      -9.09435       9.09435       278.061       287.156    
loop,thermsimp(1:2)       21   14.2055       6.65591    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    266        296.36          0.88          1.09         23.11          0.02          0.04         25.14
Just calling func    0   0         25.14


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    296.36
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    12.0357               316
loop is:       21
neval is:      265
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       21      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    12.0357               316
loop is:       22
neval is:      265


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      316
neval,tstepnext:      265     316

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.838898     -0.175666      -2.11426       2.11426       281.266       283.380    
   2  0.801853     -0.220830      -2.65784       2.65784       278.061       280.719    
   3  0.768645     -0.263126      -3.16690       3.16690       282.492       285.659    
   4  0.855557     -0.156003      -1.87760       1.87760       284.234       286.112    
   5  0.845591     -0.167720      -2.01862       2.01862       292.278       294.297    
   6  0.350050      -1.04968      -12.6336       12.6336       293.215       305.848    
   7  0.927608     -0.751463E-01 -0.904437      0.904437       290.580       291.484    
   8  0.655345E-01  -2.72518      -32.7994       32.7994       295.168       327.967    
   9  0.355481      -1.03428      -12.4483       12.4483       297.624       310.072    
  10  0.728523     -0.316737      -3.81215       3.81215       286.521       290.333    
  11  0.573220     -0.556486      -6.69769       6.69769       282.445       289.143    
  12  0.112478      -2.18499      -26.2979       26.2979       298.574       324.872    
  13  0.338739      -1.08253      -13.0290       13.0290       297.817       310.846    
  14  0.239648      -1.42858      -17.1940       17.1940       287.238       304.432    
  15  0.918959     -0.845134E-01  -1.01718       1.01718       297.677       298.694    
  16  0.283771      -1.25959      -15.1600       15.1600       291.756       306.916    
  17  0.414404     -0.880913      -10.6024       10.6024       300.320       310.922    
  18  0.716403     -0.333512      -4.01405       4.01405       300.312       304.326    
  19  0.317726      -1.14657      -13.7997       13.7997       294.730       308.530    
  20  0.339005      -1.08174      -13.0195       13.0195       295.939       308.959    
  21  0.163059      -1.81364      -21.8285       21.8285       302.687       324.515    
  22  0.477081     -0.740069      -8.90724       8.90724       305.846       314.753    
  23  0.105851      -2.24573      -27.0289       27.0289       291.268       318.297    
  24  0.840431     -0.173840      -2.09229       2.09229       306.186       308.278    
  25  0.235315      -1.44683      -17.4136       17.4136       305.352       322.766    
  26  0.865464     -0.144489      -1.73903       1.73903       301.361       303.100    
  27  0.909462     -0.949026E-01  -1.14222       1.14222       307.590       308.733    
  28  0.152105E-01  -4.18577      -50.3786       50.3786       309.825       360.203    
  29  0.962485     -0.382371E-01 -0.460210      0.460210       314.938       315.398    
  30  0.259410      -1.34934      -16.2403       16.2403       304.687       320.927    
  31  0.364880      -1.00819      -12.1342       12.1342       306.247       318.381    
  32  0.467235     -0.760923      -9.15823       9.15823       308.487       317.645    
  33  0.844908     -0.168527      -2.02834       2.02834       312.379       314.408    
  34  0.188232      -1.67008      -20.1006       20.1006       304.134       324.235    
  35  0.496585     -0.700000      -8.42499       8.42499       317.183       325.608    
  36  0.410505     -0.890367      -10.7162       10.7162       318.584       329.300    
  37  0.533875     -0.627594      -7.55353       7.55353       319.432       326.986    
  38  0.610668     -0.493202      -5.93602       5.93602       319.650       325.586    
  39  0.241933      -1.41910      -17.0798       17.0798       320.470       337.550    
  40  0.642629     -0.442188      -5.32203       5.32203       319.349       324.671    
  41  0.775072     -0.254799      -3.06668       3.06668       321.570       324.637    
  42  0.345343      -1.06322      -12.7965       12.7965       298.353       311.149    
  43  0.844097     -0.169488      -2.03990       2.03990       319.480       321.520    
  44  0.426886     -0.851239      -10.2453       10.2453       320.415       330.661    
  45  0.594109     -0.520693      -6.26690       6.26690       318.875       325.142    
  46  0.489527     -0.714316      -8.59729       8.59729       311.913       320.510    
  47  0.313882      -1.15874      -13.9462       13.9462       304.685       318.631    
  48  0.687066     -0.375325      -4.51730       4.51730       308.583       313.100    
  49  0.394505     -0.930124      -11.1947       11.1947       325.176       336.370    
  50  0.971200     -0.292233E-01 -0.351722      0.351722       323.240       323.592    
  51  0.916939     -0.867145E-01  -1.04367       1.04367       311.308       312.352    
  52  0.968457     -0.320511E-01 -0.385758      0.385758       318.706       319.092    
  53  0.437414     -0.826876      -9.95203       9.95203       304.814       314.766    
  54  0.647516     -0.434611      -5.23085       5.23085       326.285       331.516    
  55  0.181293      -1.70764      -20.5526       20.5526       325.466       346.018    
  56  0.836714     -0.178273      -2.14563       2.14563       323.294       325.440    
  57  0.940459     -0.613876E-01 -0.738842      0.738842       321.315       322.053    
  58  0.141896      -1.95266      -23.5016       23.5016       304.975       328.476    
  59  0.111323      -2.19532      -26.4222       26.4222       331.399       357.822    
  60  0.721494E-01  -2.62902      -31.6420       31.6420       311.734       343.376    
  61  0.618358     -0.480687      -5.78541       5.78541       350.071       355.856    
  62  0.825766     -0.191444      -2.30416       2.30416       323.311       325.615    
  63  0.438611     -0.824143      -9.91914       9.91914       286.088       296.007    
  64  0.158533      -1.84179      -22.1672       22.1672       296.364       318.532    
loop,thermsimp(1:2)       22   2.11426       2.65784    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    267        339.07          0.88          1.09         23.09          0.14          0.04         25.23
Just calling func    0   0         25.24


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    339.07
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    12.0357               316
loop is:       22
neval is:      266
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       22      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    12.0357               316
loop is:       23
neval is:      266


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      316
neval,tstepnext:      266     316

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.848355     -0.164456      -1.97934       1.97934       278.061       280.041    
   2  0.848474     -0.164316      -1.97766       1.97766       281.266       283.244    
   3  0.146795      -1.91872      -23.0931       23.0931       282.492       305.585    
   4  0.398624     -0.919738      -11.0697       11.0697       284.234       295.304    
   5  0.888093     -0.118679      -1.42838       1.42838       282.445       283.873    
   6  0.475009     -0.744421      -8.95963       8.95963       286.521       295.481    
   7  0.120824      -2.11342      -25.4365       25.4365       290.580       316.016    
   8  0.270052      -1.30914      -15.7564       15.7564       292.278       308.035    
   9  0.201748E-01  -3.90332      -46.9792       46.9792       286.088       333.067    
  10  0.999386     -0.614559E-03 -0.739664E-02  0.739664E-02   297.677       297.684    
  11  0.212655      -1.54808      -18.6323       18.6323       301.361       319.993    
  12  0.197911      -1.61994      -19.4971       19.4971       300.312       319.809    
  13  0.786394     -0.240297      -2.89215       2.89215       287.238       290.130    
  14  0.781263     -0.246844      -2.97094       2.97094       293.215       296.186    
  15  0.788011     -0.238244      -2.86743       2.86743       291.756       294.623    
  16  0.956387     -0.445927E-01 -0.536704      0.536704       306.186       306.722    
  17  0.717415     -0.332100      -3.99706       3.99706       294.730       298.727    
  18  0.808756     -0.212258      -2.55467       2.55467       307.590       310.145    
  19  0.756838     -0.278606      -3.35322       3.35322       295.939       299.293    
  20  0.570684     -0.560919      -6.75105       6.75105       297.624       304.375    
  21  0.946031     -0.554796E-01 -0.667736      0.667736       297.817       298.484    
  22  0.678634E-01  -2.69026      -32.3791       32.3791       300.320       332.699    
  23  0.631502     -0.459654      -5.53225       5.53225       298.353       303.885    
  24  0.114784E-01  -4.46729      -53.7669       53.7669       311.308       365.075    
  25  0.549681     -0.598417      -7.20237       7.20237       308.583       315.785    
  26  0.846433     -0.166725      -2.00665       2.00665       312.379       314.386    
  27  0.441841     -0.816805      -9.83082       9.83082       305.846       315.677    
  28  0.299100      -1.20698      -14.5268       14.5268       304.814       319.341    
  29  0.378130     -0.972517      -11.7049       11.7049       314.938       326.643    
  30  0.830469     -0.185764      -2.23580       2.23580       308.487       310.723    
  31  0.675108     -0.392883      -4.72862       4.72862       291.268       295.996    
  32  0.997619     -0.238377E-02 -0.286903E-01  0.286903E-01   306.247       306.275    
  33  0.897623     -0.108005      -1.29991       1.29991       296.364       297.664    
  34  0.591811E-01  -2.82715      -34.0267       34.0267       304.685       338.712    
  35  0.229825      -1.47044      -17.6977       17.6977       318.706       336.404    
  36  0.654017     -0.424622      -5.11062       5.11062       311.913       317.024    
  37  0.305777      -1.18490      -14.2611       14.2611       304.687       318.948    
  38  0.936135     -0.659954E-01 -0.794301      0.794301       319.480       320.274    
  39  0.698153     -0.359317      -4.32463       4.32463       321.315       325.639    
  40  0.829975     -0.186360      -2.24297       2.24297       305.352       307.595    
  41  0.951351     -0.498721E-01 -0.600245      0.600245       323.240       323.840    
  42  0.883299     -0.124092      -1.49353       1.49353       304.134       305.628    
  43  0.910087     -0.942154E-01  -1.13395       1.13395       302.687       303.821    
  44  0.590840     -0.526210      -6.33330       6.33330       321.570       327.904    
  45  0.146785      -1.91879      -23.0939       23.0939       319.349       342.443    
  46  0.830381E-01  -2.48846      -29.9503       29.9503       298.574       328.524    
  47  0.289482      -1.23966      -14.9202       14.9202       318.875       333.795    
  48  0.594462     -0.520098      -6.25974       6.25974       323.294       329.554    
  49  0.241311      -1.42167      -17.1107       17.1107       319.650       336.761    
  50  0.612368     -0.490422      -5.90257       5.90257       317.183       323.086    
  51  0.952207     -0.489727E-01 -0.589420      0.589420       323.311       323.901    
  52  0.857144     -0.154149      -1.85529       1.85529       319.432       321.287    
  53  0.221746      -1.50622      -18.1284       18.1284       295.168       313.296    
  54  0.874757     -0.133809      -1.61049       1.61049       304.975       306.585    
  55  0.474241     -0.746040      -8.97910       8.97910       318.584       327.563    
  56  0.679995E-01  -2.68826      -32.3550       32.3550       320.415       352.770    
  57  0.276977      -1.28382      -15.4517       15.4517       326.285       341.736    
  58  0.308562      -1.17583      -14.1520       14.1520       325.176       339.328    
  59  0.910099     -0.942023E-01  -1.13379       1.13379       320.470       321.604    
  60  0.189281      -1.66452      -20.0337       20.0337       311.734       331.768    
  61  0.759386     -0.275245      -3.31277       3.31277       325.466       328.778    
  62  0.464823     -0.766099      -9.22054       9.22054       350.071       359.291    
  63  0.428490     -0.847488      -10.2001       10.2001       331.399       341.600    
  64  0.377334     -0.974624      -11.7303       11.7303       339.068       350.798    
loop,thermsimp(1:2)       23   1.97934       1.97766    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    268        300.45          0.88          1.10         23.12          0.02          0.05         25.16
Just calling func    0   0         25.16


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    300.45
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    12.0357               316
loop is:       23
neval is:      267
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       23      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    12.0357               316
loop is:       24
neval is:      267


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      316
neval,tstepnext:      267     316

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.102026      -2.28253      -27.4719       27.4719       278.061       305.533    
   2  0.372115     -0.988552      -11.8979       11.8979       281.266       293.164    
   3  0.732875     -0.310780      -3.74045       3.74045       282.445       286.185    
   4  0.341646      -1.07398      -12.9261       12.9261       287.238       300.164    
   5  0.406512     -0.900141      -10.8338       10.8338       291.756       302.590    
   6  0.271848      -1.30251      -15.6766       15.6766       284.234       299.911    
   7  0.738418     -0.303245      -3.64976       3.64976       286.521       290.171    
   8  0.903199     -0.101813      -1.22539       1.22539       291.268       292.493    
   9  0.511789     -0.669842      -8.06201       8.06201       293.215       301.277    
  10  0.202674      -1.59616      -19.2109       19.2109       296.364       315.575    
  11  0.325695      -1.12179      -13.5016       13.5016       297.677       311.178    
  12  0.719720     -0.328893      -3.95845       3.95845       297.817       301.775    
  13  0.715609     -0.334622      -4.02741       4.02741       294.730       298.757    
  14  0.973328     -0.270339E-01 -0.325372      0.325372       295.939       296.265    
  15  0.373998     -0.983504      -11.8372       11.8372       302.687       314.524    
  16  0.977965     -0.222815E-01 -0.268173      0.268173       298.353       298.621    
  17  0.105495      -2.24909      -27.0694       27.0694       297.624       324.693    
  18  0.729809     -0.314973      -3.79092       3.79092       282.492       286.283    
  19  0.378008     -0.972839      -11.7088       11.7088       304.134       315.843    
  20  0.678326     -0.388127      -4.67138       4.67138       306.247       310.918    
  21  0.671993     -0.397507      -4.78428       4.78428       304.975       309.759    
  22  0.515926     -0.661792      -7.96513       7.96513       306.186       314.151    
  23  0.363490      -1.01200      -12.1802       12.1802       305.352       317.532    
  24  0.206319      -1.57833      -18.9963       18.9963       292.278       311.274    
  25  0.755157E-01  -2.58341      -31.0932       31.0932       307.590       338.684    
  26  0.413763     -0.882461      -10.6210       10.6210       308.487       319.108    
  27  0.279023      -1.27646      -15.3631       15.3631       295.168       310.531    
  28  0.506422     -0.680385      -8.18891       8.18891       312.379       320.568    
  29  0.643082E-02  -5.04665      -60.7400       60.7400       305.846       366.586    
  30  0.285888E-01  -3.55474      -42.7838       42.7838       308.583       351.367    
  31  0.660419     -0.414880      -4.99337       4.99337       290.580       295.573    
  32  0.739369     -0.301959      -3.63428       3.63428       311.913       315.547    
  33  0.270269      -1.30834      -15.7468       15.7468       304.687       320.433    
  34  0.663889     -0.409640      -4.93030       4.93030       304.814       309.744    
  35  0.898739E-01  -2.40935      -28.9982       28.9982       300.312       329.310    
  36  0.832427     -0.183410      -2.20747       2.20747       301.361       303.569    
  37  0.723106     -0.324200      -3.90197       3.90197       319.480       323.382    
  38  0.986274     -0.138207E-01 -0.166342      0.166342       319.432       319.598    
  39  0.812861     -0.207195      -2.49374       2.49374       320.470       322.964    
  40  0.553236     -0.591971      -7.12478       7.12478       317.183       324.308    
  41  0.693785E-01  -2.66818      -32.1134       32.1134       323.240       355.353    
  42  0.117256      -2.14340      -25.7973       25.7973       323.311       349.109    
  43  0.807809     -0.213430      -2.56877       2.56877       321.315       323.883    
  44  0.900249     -0.105084      -1.26476       1.26476       314.938       316.203    
  45  0.753470     -0.283066      -3.40689       3.40689       318.584       321.991    
  46  0.127159      -2.06232      -24.8214       24.8214       321.570       346.392    
  47  0.535389     -0.624762      -7.51945       7.51945       298.574       306.093    
  48  0.957281     -0.436582E-01 -0.525456      0.525456       325.466       325.991    
  49  0.227700      -1.47973      -17.8095       17.8095       323.294       341.104    
  50  0.636404     -0.451921      -5.43919       5.43919       311.734       317.173    
  51  0.905015     -0.998042E-01  -1.20121       1.20121       300.320       301.521    
  52  0.555191     -0.588444      -7.08233       7.08233       286.088       293.170    
  53  0.687780     -0.374286      -4.50480       4.50480       318.875       323.380    
  54  0.759422E-01  -2.57778      -31.0254       31.0254       318.706       349.731    
  55  0.374598     -0.981902      -11.8179       11.8179       319.650       331.468    
  56  0.399521     -0.917488      -11.0426       11.0426       304.685       315.728    
  57  0.997363     -0.264016E-02 -0.317761E-01  0.317761E-01   325.176       325.207    
  58  0.164658      -1.80389      -21.7110       21.7110       331.399       353.110    
  59  0.697359     -0.360454      -4.33832       4.33832       326.285       330.623    
  60  0.822795     -0.195048      -2.34754       2.34754       319.349       321.697    
  61  0.755086     -0.280923      -3.38111       3.38111       339.068       342.449    
  62  0.912857     -0.911765E-01  -1.09737       1.09737       320.415       321.513    
  63  0.891590     -0.114749      -1.38109       1.38109       350.071       351.452    
  64  0.461859     -0.772496      -9.29753       9.29753       300.448       309.746    
loop,thermsimp(1:2)       24   27.4719       11.8979    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    269        298.41          0.88          1.10         23.12          0.01          0.05         25.15
Just calling func    0   0         25.15


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    270        538.67          0.87          1.09         23.15          0.02          0.05         25.16
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    298.41
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    12.0357               316
loop is:       24
neval is:      269
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       24      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    12.0357               316
loop is:       25
neval is:      269


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      316
neval,tstepnext:      269     316

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.962782     -0.379284E-01 -0.456495      0.456495       282.445       282.901    
   2  0.355374      -1.03458      -12.4519       12.4519       282.492       294.944    
   3  0.294461      -1.22261      -14.7149       14.7149       286.521       301.236    
   4  0.644538     -0.439222      -5.28634       5.28634       291.268       296.554    
   5  0.741622     -0.298915      -3.59765       3.59765       281.266       284.864    
   6  0.805913E-01  -2.51837      -30.3103       30.3103       286.088       316.398    
   7  0.498180     -0.696794      -8.38640       8.38640       290.580       298.966    
   8  0.771004     -0.260061      -3.13002       3.13002       295.939       299.069    
   9  0.753480     -0.283053      -3.40674       3.40674       298.353       301.759    
  10  0.460525     -0.775387      -9.33232       9.33232       294.730       304.062    
  11  0.918626     -0.848759E-01  -1.02154       1.02154       284.234       285.256    
  12  0.355379      -1.03457      -12.4518       12.4518       287.238       299.690    
  13  0.664646     -0.408501      -4.91659       4.91659       293.215       298.131    
  14  0.328018      -1.11469      -13.4160       13.4160       300.320       313.736    
  15  0.529583     -0.635665      -7.65067       7.65067       297.817       305.467    
  16  0.259823      -1.34775      -16.2211       16.2211       291.756       307.977    
  17  0.463690E-01  -3.07112      -36.9631       36.9631       301.361       338.324    
  18  0.366509      -1.00373      -12.0806       12.0806       278.061       290.142    
  19  0.794534     -0.229999      -2.76820       2.76820       298.574       301.342    
  20  0.669373     -0.401413      -4.83129       4.83129       304.814       309.645    
  21  0.798901     -0.224518      -2.70224       2.70224       300.448       303.150    
  22  0.610403     -0.493636      -5.94126       5.94126       304.975       310.916    
  23  0.267818      -1.31745      -15.8564       15.8564       295.168       311.024    
  24  0.663049     -0.410906      -4.94554       4.94554       306.247       311.192    
  25  0.782871     -0.244788      -2.94619       2.94619       297.677       300.623    
  26  0.706545     -0.347368      -4.18082       4.18082       292.278       296.459    
  27  0.120119      -2.11927      -25.5069       25.5069       306.186       331.693    
  28  0.270575      -1.30721      -15.7331       15.7331       302.687       318.420    
  29  0.505391     -0.682422      -8.21342       8.21342       311.913       320.127    
  30  0.665734     -0.406865      -4.89690       4.89690       296.364       301.261    
  31  0.836788     -0.178185      -2.14458       2.14458       304.685       306.830    
  32  0.866983     -0.142736      -1.71793       1.71793       304.134       305.852    
  33  0.552904     -0.592571      -7.13200       7.13200       314.938       322.070    
  34  0.554153     -0.590314      -7.10484       7.10484       311.734       318.839    
  35  0.592407E-01  -2.82615      -34.0146       34.0146       305.352       339.367    
  36  0.902163     -0.102960      -1.23919       1.23919       308.487       309.726    
  37  0.266638E-01  -3.62445      -43.6227       43.6227       319.432       363.055    
  38  0.897053     -0.108640      -1.30756       1.30756       304.687       305.994    
  39  0.840496     -0.173763      -2.09136       2.09136       312.379       314.471    
  40  0.288358      -1.24355      -14.9670       14.9670       320.415       335.382    
  41  0.835972E-01  -2.48175      -29.8695       29.8695       319.349       349.219    
  42  0.412070     -0.886563      -10.6704       10.6704       318.584       329.254    
  43  0.725010     -0.321570      -3.87032       3.87032       320.470       324.340    
  44  0.316556      -1.15026      -13.8441       13.8441       318.875       332.719    
  45  0.486178     -0.721181      -8.67992       8.67992       319.480       328.160    
  46  0.143341      -1.94253      -23.3797       23.3797       321.315       344.694    
  47  0.956913     -0.440430E-01 -0.530088      0.530088       317.183       317.714    
  48  0.362697      -1.01419      -12.2064       12.2064       297.624       309.830    
  49  0.951746     -0.494572E-01 -0.595252      0.595252       325.176       325.771    
  50  0.511140     -0.671112      -8.07730       8.07730       325.466       333.543    
  51  0.364891E-01  -3.31074      -39.8471       39.8471       300.312       340.159    
  52  0.377076     -0.975308      -11.7385       11.7385       326.285       338.023    
  53  0.670030E-01  -2.70302      -32.5327       32.5327       319.650       352.183    
  54  0.448832     -0.801107      -9.64188       9.64188       307.590       317.232    
  55  0.252392      -1.37677      -16.5704       16.5704       323.294       339.865    
  56  0.910592     -0.936608E-01  -1.12727       1.12727       339.068       340.195    
  57  0.801917     -0.220751      -2.65689       2.65689       321.570       324.227    
  58  0.473432     -0.747746      -8.99965       8.99965       323.311       332.311    
  59  0.431618     -0.840214      -10.1126       10.1126       318.706       328.819    
  60  0.886774     -0.120166      -1.44628       1.44628       308.583       310.029    
  61  0.880132     -0.127683      -1.53676       1.53676       350.071       351.607    
  62  0.962190     -0.385439E-01 -0.463902      0.463902       331.399       331.863    
  63  0.618144     -0.481034      -5.78957       5.78957       323.240       329.030    
  64  0.169887      -1.77262      -21.3348       21.3348       298.406       319.741    
loop,thermsimp(1:2)       25  0.456495       12.4519    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    271        291.53          0.88          1.09         23.15          0.23          0.04         25.39
Just calling func    0   0         25.40


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    291.53
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    12.0357               316
loop is:       25
neval is:      270
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       25      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    12.0357               316
loop is:       26
neval is:      270


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      316
neval,tstepnext:      270     316

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.987524     -0.125549E-01 -0.151107      0.151107       282.445       282.596    
   2  0.516099     -0.661457      -7.96110       7.96110       281.266       289.227    
   3  0.202206      -1.59847      -19.2387       19.2387       284.234       303.473    
   4  0.240260      -1.42603      -17.1633       17.1633       278.061       295.225    
   5  0.717263E-01  -2.63490      -31.7128       31.7128       282.492       314.205    
   6  0.395382     -0.927902      -11.1679       11.1679       292.278       303.446    
   7  0.494348     -0.704516      -8.47934       8.47934       291.268       299.747    
   8  0.970815     -0.296196E-01 -0.356493      0.356493       293.215       293.571    
   9  0.992795     -0.723105E-02 -0.870308E-01  0.870308E-01   290.580       290.667    
  10  0.387320     -0.948503      -11.4159       11.4159       295.939       307.355    
  11  0.586568     -0.533466      -6.42063       6.42063       287.238       293.659    
  12  0.119144      -2.12742      -25.6050       25.6050       297.677       323.282    
  13  0.145144      -1.93003      -23.2292       23.2292       286.521       309.750    
  14  0.767931     -0.264056      -3.17809       3.17809       296.364       299.542    
  15  0.415014     -0.879442      -10.5847       10.5847       298.574       309.158    
  16  0.994477     -0.553801E-02 -0.666537E-01  0.666537E-01   298.353       298.419    
  17  0.757243     -0.278071      -3.34678       3.34678       300.448       303.795    
  18  0.669290     -0.401537      -4.83278       4.83278       294.730       299.563    
  19  0.112026      -2.18903      -26.3464       26.3464       297.817       324.163    
  20  0.434244     -0.834148      -10.0396       10.0396       304.134       314.174    
  21  0.491828     -0.709627      -8.54085       8.54085       304.687       313.227    
  22  0.517535     -0.658677      -7.92764       7.92764       304.685       312.613    
  23  0.411147     -0.888804      -10.6974       10.6974       291.756       302.453    
  24  0.250164      -1.38564      -16.6771       16.6771       304.814       321.491    
  25  0.109742E-01  -4.51221      -54.3076       54.3076       308.487       362.794    
  26  0.559459     -0.580786      -6.99016       6.99016       297.624       304.614    
  27  0.289677      -1.23899      -14.9121       14.9121       308.583       323.495    
  28  0.835809     -0.179356      -2.15867       2.15867       304.975       307.133    
  29  0.236182      -1.44315      -17.3693       17.3693       295.168       312.537    
  30  0.700988     -0.355264      -4.27585       4.27585       306.247       310.522    
  31  0.886914     -0.120007      -1.44437       1.44437       300.320       301.764    
  32  0.182911      -1.69875      -20.4457       20.4457       312.379       332.825    
  33  0.693089     -0.366597      -4.41225       4.41225       286.088       290.500    
  34  0.108523      -2.22079      -26.7287       26.7287       307.590       334.319    
  35  0.141600      -1.95475      -23.5267       23.5267       317.183       340.710    
  36  0.168348E-01  -4.08431      -49.1575       49.1575       302.687       351.844    
  37  0.419419E-01  -3.17147      -38.1708       38.1708       311.734       349.905    
  38  0.244896      -1.40692      -16.9333       16.9333       298.406       315.339    
  39  0.360662      -1.01981      -12.2742       12.2742       311.913       324.187    
  40  0.927013     -0.757879E-01 -0.912160      0.912160       314.938       315.850    
  41  0.869067     -0.140335      -1.68903       1.68903       321.570       323.259    
  42  0.827083     -0.189851      -2.28499       2.28499       320.470       322.755    
  43  0.928403     -0.742893E-01 -0.894123      0.894123       325.176       326.070    
  44  0.513193     -0.667103      -8.02905       8.02905       319.480       327.509    
  45  0.809080     -0.211858      -2.54986       2.54986       318.706       321.256    
  46  0.341224E-02  -5.68039      -68.3674       68.3674       323.240       391.607    
  47  0.734431     -0.308659      -3.71493       3.71493       318.584       322.299    
  48  0.688454     -0.373307      -4.49301       4.49301       306.186       310.679    
  49  0.990614     -0.943067E-02 -0.113505      0.113505       331.399       331.513    
  50  0.143408      -1.94206      -23.3740       23.3740       323.311       346.685    
  51  0.868596     -0.140878      -1.69556       1.69556       318.875       320.570    
  52  0.244103      -1.41016      -16.9723       16.9723       325.466       342.438    
  53  0.207986      -1.57029      -18.8995       18.8995       320.415       339.315    
  54  0.426578E-01  -3.15455      -37.9671       37.9671       326.285       364.252    
  55  0.111938      -2.18981      -26.3559       26.3559       301.361       327.717    
  56  0.304345      -1.18959      -14.3176       14.3176       305.352       319.670    
  57  0.911041     -0.931671E-01  -1.12133       1.12133       323.294       324.416    
  58  0.144299      -1.93587      -23.2995       23.2995       300.312       323.612    
  59  0.306010      -1.18414      -14.2519       14.2519       339.068       353.320    
  60  0.633032     -0.457234      -5.50313       5.50313       321.315       326.818    
  61  0.737469E-02  -4.90970      -59.0917       59.0917       319.349       378.441    
  62  0.794623     -0.229887      -2.76685       2.76685       350.071       352.838    
  63  0.200033      -1.60927      -19.3687       19.3687       319.650       339.019    
  64  0.543825     -0.609128      -7.33128       7.33128       291.528       298.859    
loop,thermsimp(1:2)       26  0.151107       7.96110    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    272        290.02          0.89          1.09         23.10          0.02          0.05         25.14
Just calling func    0   0         25.14


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    273        387.09          0.85          1.08         23.12          0.16          0.05         25.26
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    290.02
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    12.0357               316
loop is:       26
neval is:      272
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       26      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    12.0357               316
loop is:       27
neval is:      272


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      316
neval,tstepnext:      272     316

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.199609      -1.61140      -19.3943       19.3943       282.445       301.839    
   2  0.983274     -0.168677E-01 -0.203014      0.203014       281.266       281.469    
   3  0.569108     -0.563685      -6.78434       6.78434       286.088       292.872    
   4  0.411179     -0.888728      -10.6965       10.6965       290.580       301.276    
   5  0.889241     -0.117387      -1.41283       1.41283       293.215       294.628    
   6  0.109537      -2.21149      -26.6169       26.6169       287.238       313.855    
   7  0.658027     -0.418509      -5.03705       5.03705       278.061       283.098    
   8  0.427534     -0.849722      -10.2270       10.2270       298.353       308.580    
   9  0.277803      -1.28084      -15.4158       15.4158       291.528       306.944    
  10  0.568421     -0.564892      -6.79887       6.79887       296.364       303.163    
  11  0.368489     -0.998346      -12.0158       12.0158       294.730       306.746    
  12  0.100945E-01  -4.59576      -55.3132       55.3132       291.268       346.581    
  13  0.811445     -0.208939      -2.51472       2.51472       300.320       302.835    
  14  0.135138      -2.00146      -24.0889       24.0889       291.756       315.845    
  15  0.600340     -0.510258      -6.14131       6.14131       292.278       298.419    
  16  0.537538     -0.620755      -7.47122       7.47122       284.234       291.705    
  17  0.923261     -0.798434E-01 -0.960970      0.960970       300.448       301.409    
  18  0.296505      -1.21569      -14.6317       14.6317       297.624       312.255    
  19  0.975666     -0.246348E-01 -0.296497      0.296497       304.975       305.271    
  20  0.102971      -2.27331      -27.3609       27.3609       295.939       323.300    
  21  0.110137      -2.20603      -26.5511       26.5511       298.574       325.125    
  22  0.874539     -0.134058      -1.61348       1.61348       286.521       288.134    
  23  0.887507     -0.119339      -1.43633       1.43633       306.247       307.683    
  24  0.811767     -0.208543      -2.50995       2.50995       306.186       308.696    
  25  0.304283      -1.18980      -14.3200       14.3200       295.168       309.488    
  26  0.304144      -1.19025      -14.3255       14.3255       304.685       319.010    
  27  0.854538     -0.157194      -1.89194       1.89194       304.687       306.579    
  28  0.543001     -0.610645      -7.34953       7.34953       304.134       311.484    
  29  0.808766     -0.212246      -2.55453       2.55453       282.492       285.046    
  30  0.286176      -1.25115      -15.0584       15.0584       298.406       313.464    
  31  0.328161      -1.11425      -13.4108       13.4108       314.938       328.349    
  32  0.563264     -0.574006      -6.90856       6.90856       305.352       312.261    
  33  0.180895      -1.70984      -20.5791       20.5791       318.875       339.454    
  34  0.977796     -0.224538E-01 -0.270247      0.270247       318.706       318.976    
  35  0.650784     -0.429577      -5.17026       5.17026       304.814       309.984    
  36  0.350586      -1.04815      -12.6152       12.6152       318.584       331.199    
  37  0.852996E-01  -2.46159      -29.6269       29.6269       320.470       350.097    
  38  0.363921      -1.01082      -12.1659       12.1659       321.570       333.736    
  39  0.715496E-01  -2.63737      -31.7425       31.7425       297.677       329.419    
  40  0.540542     -0.615184      -7.40416       7.40416       308.583       315.987    
  41  0.458744E-02  -5.38443      -64.8054       64.8054       300.312       365.118    
  42  0.684509     -0.379054      -4.56217       4.56217       297.817       302.379    
  43  0.827193     -0.189717      -2.28338       2.28338       311.913       314.197    
  44  0.430712     -0.842315      -10.1378       10.1378       323.294       333.432    
  45  0.925073     -0.778822E-01 -0.937367      0.937367       325.176       326.113    
  46  0.139567      -1.96921      -23.7009       23.7009       321.315       345.016    
  47  0.905138     -0.996680E-01  -1.19957       1.19957       319.480       320.680    
  48  0.230323      -1.46827      -17.6717       17.6717       301.361       319.033    
  49  0.854981     -0.156676      -1.88570       1.88570       331.399       333.285    
  50  0.526676     -0.641170      -7.71693       7.71693       312.379       320.096    
  51  0.425904     -0.853542      -10.2730       10.2730       307.590       317.863    
  52  0.770395     -0.260852      -3.13954       3.13954       319.650       322.789    
  53  0.222399      -1.50328      -18.0930       18.0930       320.415       338.508    
  54  0.849203     -0.163457      -1.96732       1.96732       317.183       319.151    
  55  0.409521     -0.892766      -10.7451       10.7451       325.466       336.211    
  56  0.526161     -0.642147      -7.72869       7.72869       323.311       331.040    
  57  0.705716     -0.348543      -4.19496       4.19496       311.734       315.929    
  58  0.548845E-03  -7.50769      -90.3603       90.3603       302.687       393.047    
  59  0.498314     -0.696524      -8.38315       8.38315       350.071       358.454    
  60  0.774749     -0.255216      -3.07170       3.07170       339.068       342.140    
  61  0.537402E-01  -2.92359      -35.1875       35.1875       308.487       343.674    
  62  0.708174     -0.345066      -4.15310       4.15310       326.285       330.438    
  63  0.272932      -1.29853      -15.6287       15.6287       319.349       334.978    
  64  0.701294     -0.354828      -4.27060       4.27060       290.025       294.295    
loop,thermsimp(1:2)       27   19.3943      0.203014    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    274        302.90          0.88          1.09         23.09          0.17          0.05         25.27
Just calling func    0   0         25.27


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    302.90
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    12.0357               316
loop is:       27
neval is:      273
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       27      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    12.0357               316
loop is:       28
neval is:      273


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      316
neval,tstepnext:      273     316

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.231666      -1.46246      -17.6017       17.6017       281.266       298.868    
   2  0.922423     -0.807516E-01 -0.971902      0.971902       278.061       279.033    
   3  0.556007     -0.586974      -7.06464       7.06464       282.492       289.557    
   4  0.921345     -0.819211E-01 -0.985978      0.985978       286.521       287.507    
   5  0.623358     -0.472635      -5.68849       5.68849       284.234       289.923    
   6  0.967150     -0.334012E-01 -0.402006      0.402006       286.088       286.490    
   7  0.239844      -1.42777      -17.1842       17.1842       290.025       307.209    
   8  0.707370     -0.346201      -4.16677       4.16677       293.215       297.382    
   9  0.375591     -0.979256      -11.7860       11.7860       292.278       304.064    
  10  0.164915      -1.80233      -21.6922       21.6922       290.580       312.272    
  11  0.634729     -0.454558      -5.47092       5.47092       300.448       305.919    
  12  0.956585     -0.443852E-01 -0.534206      0.534206       282.445       282.979    
  13  0.281051      -1.26922      -15.2759       15.2759       297.817       313.092    
  14  0.332446      -1.10128      -13.2546       13.2546       300.320       313.574    
  15  0.417901     -0.872510      -10.5013       10.5013       296.364       306.866    
  16  0.454459     -0.788647      -9.49191       9.49191       304.975       314.466    
  17  0.163150      -1.81309      -21.8218       21.8218       304.687       326.508    
  18  0.412675     -0.885095      -10.6527       10.6527       294.730       305.383    
  19  0.510076     -0.673195      -8.10237       8.10237       291.528       299.630    
  20  0.159872E-02  -6.43855      -77.4924       77.4924       306.247       383.739    
  21  0.279094      -1.27620      -15.3600       15.3600       298.353       313.713    
  22  0.229843E-01  -3.77294      -45.4100       45.4100       306.186       351.596    
  23  0.829240E-02  -4.79242      -57.6801       57.6801       295.168       352.848    
  24  0.722732     -0.324717      -3.90820       3.90820       304.814       308.722    
  25  0.399402     -0.917787      -11.0462       11.0462       304.134       315.181    
  26  0.321457      -1.13489      -13.6592       13.6592       297.624       311.283    
  27  0.103147      -2.27160      -27.3402       27.3402       305.352       332.692    
  28  0.488570     -0.716273      -8.62085       8.62085       298.406       307.027    
  29  0.775391     -0.254388      -3.06173       3.06173       287.238       290.300    
  30  0.264831      -1.32866      -15.9914       15.9914       311.913       327.905    
  31  0.291634      -1.23225      -14.8310       14.8310       291.756       306.587    
  32  0.754799E-02  -4.88647      -58.8121       58.8121       311.734       370.546    
  33  0.403715     -0.907047      -10.9169       10.9169       308.583       319.500    
  34  0.794963     -0.229460      -2.76171       2.76171       307.590       310.352    
  35  0.482612E-01  -3.03113      -36.4817       36.4817       318.706       355.188    
  36  0.309506      -1.17278      -14.1152       14.1152       304.685       318.800    
  37  0.265676      -1.32548      -15.9530       15.9530       301.361       317.314    
  38  0.793358     -0.231480      -2.78602       2.78602       317.183       319.969    
  39  0.603192E-01  -2.80811      -33.7975       33.7975       312.379       346.177    
  40  0.516664     -0.660363      -7.94793       7.94793       319.480       327.428    
  41  0.524892E-01  -2.94715      -35.4710       35.4710       319.650       355.121    
  42  0.581500     -0.542144      -6.52508       6.52508       295.939       302.464    
  43  0.403805     -0.906823      -10.9142       10.9142       298.574       309.488    
  44  0.447829     -0.803344      -9.66880       9.66880       325.176       334.844    
  45  0.470604     -0.753737      -9.07175       9.07175       314.938       324.010    
  46  0.479088     -0.735871      -8.85671       8.85671       297.677       306.534    
  47  0.959223     -0.416322E-01 -0.501072      0.501072       326.285       326.786    
  48  0.527403     -0.639789      -7.70031       7.70031       323.311       331.012    
  49  0.731687     -0.312402      -3.75998       3.75998       318.584       322.344    
  50  0.682707     -0.381689      -4.59390       4.59390       331.399       335.993    
  51  0.386616     -0.950322      -11.4378       11.4378       323.294       334.732    
  52  0.120332      -2.11750      -25.4856       25.4856       321.570       347.056    
  53  0.285899      -1.25212      -15.0701       15.0701       319.349       334.419    
  54  0.798593     -0.224904      -2.70688       2.70688       325.466       328.173    
  55  0.305098      -1.18712      -14.2878       14.2878       320.415       334.703    
  56  0.274289      -1.29357      -15.5690       15.5690       318.875       334.444    
  57  0.805459     -0.216343      -2.60384       2.60384       339.068       341.672    
  58  0.665552     -0.407139      -4.90020       4.90020       308.487       313.387    
  59  0.721477     -0.326454      -3.92910       3.92910       321.315       325.244    
  60  0.563306     -0.573931      -6.90766       6.90766       291.268       298.175    
  61  0.253697      -1.37162      -16.5084       16.5084       320.470       336.978    
  62  0.714468     -0.336217      -4.04660       4.04660       350.071       354.117    
  63  0.106618      -2.23850      -26.9419       26.9419       300.312       327.254    
  64  0.116686      -2.14827      -25.8559       25.8559       302.903       328.759    
loop,thermsimp(1:2)       28   17.6017      0.971902    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    275        292.43          0.88          1.10         23.12          0.02          0.04         25.16
Just calling func    0   0         25.16


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    292.43
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    12.0357               316
loop is:       28
neval is:      274
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       28      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    12.0357               316
loop is:       29
neval is:      274


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      316
neval,tstepnext:      274     316

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.332051      -1.10247      -13.2690       13.2690       278.061       291.330    
   2  0.991191     -0.884791E-02 -0.106491      0.106491       282.445       282.551    
   3  0.752830     -0.283916      -3.41713       3.41713       286.088       289.505    
   4  0.718872     -0.330071      -3.97264       3.97264       286.521       290.494    
   5  0.362244      -1.01544      -12.2215       12.2215       282.492       294.713    
   6  0.993342E-01  -2.30927      -27.7936       27.7936       284.234       312.028    
   7  0.734379     -0.308729      -3.71577       3.71577       287.238       290.954    
   8  0.190509      -1.65806      -19.9558       19.9558       293.215       313.171    
   9  0.113713      -2.17408      -26.1665       26.1665       291.268       317.434    
  10  0.582158     -0.541014      -6.51148       6.51148       281.266       287.778    
  11  0.100405E-01  -4.60113      -55.3778       55.3778       291.528       346.906    
  12  0.614877     -0.486333      -5.85335       5.85335       295.939       301.793    
  13  0.996806     -0.319890E-02 -0.385010E-01  0.385010E-01   292.278       292.317    
  14  0.439871E-01  -3.12386      -37.5978       37.5978       294.730       332.328    
  15  0.610456     -0.493549      -5.94020       5.94020       300.448       306.388    
  16  0.676471     -0.390866      -4.70434       4.70434       297.677       302.381    
  17  0.263829      -1.33246      -16.0370       16.0370       291.756       307.793    
  18  0.761962     -0.271858      -3.27200       3.27200       296.364       299.636    
  19  0.405295     -0.903140      -10.8699       10.8699       298.406       309.276    
  20  0.184680      -1.68913      -20.3299       20.3299       290.025       310.355    
  21  0.695434     -0.363219      -4.37160       4.37160       304.814       309.186    
  22  0.597154     -0.515580      -6.20536       6.20536       298.574       304.779    
  23  0.254276      -1.36933      -16.4809       16.4809       307.590       324.071    
  24  0.777974     -0.251062      -3.02171       3.02171       297.624       300.645    
  25  0.597236     -0.515443      -6.20371       6.20371       290.580       296.783    
  26  0.658168     -0.418295      -5.03447       5.03447       297.817       302.851    
  27  0.917953     -0.856086E-01  -1.03036       1.03036       308.487       309.517    
  28  0.167567      -1.78637      -21.5003       21.5003       300.320       321.820    
  29  0.867739E-02  -4.74703      -57.1339       57.1339       298.353       355.487    
  30  0.157469      -1.84853      -22.2483       22.2483       304.975       327.223    
  31  0.947458     -0.539724E-01 -0.649595      0.649595       304.134       304.784    
  32  0.883772     -0.123556      -1.48708       1.48708       301.361       302.848    
  33  0.873100     -0.135705      -1.63330       1.63330       304.685       306.318    
  34  0.138043      -1.98019      -23.8329       23.8329       308.583       332.416    
  35  0.833185     -0.182500      -2.19651       2.19651       317.183       319.380    
  36  0.907894     -0.966275E-01  -1.16298       1.16298       318.584       319.747    
  37  0.858432     -0.152648      -1.83722       1.83722       314.938       316.775    
  38  0.192050      -1.65000      -19.8589       19.8589       321.315       341.174    
  39  0.890666     -0.115786      -1.39356       1.39356       304.687       306.080    
  40  0.389935     -0.941775      -11.3349       11.3349       326.285       337.620    
  41  0.842362     -0.171545      -2.06467       2.06467       300.312       302.377    
  42  0.143912      -1.93855      -23.3318       23.3318       319.480       342.812    
  43  0.678545     -0.387804      -4.66749       4.66749       311.913       316.581    
  44  0.621021     -0.476390      -5.73369       5.73369       325.466       331.199    
  45  0.533199     -0.628861      -7.56878       7.56878       302.903       310.472    
  46  0.891703     -0.114623      -1.37956       1.37956       323.311       324.691    
  47  0.675469     -0.392349      -4.72219       4.72219       305.352       310.074    
  48  0.757471     -0.277770      -3.34316       3.34316       319.349       322.692    
  49  0.855441     -0.156139      -1.87924       1.87924       318.875       320.754    
  50  0.737982     -0.303836      -3.65688       3.65688       320.415       324.072    
  51  0.630328     -0.461515      -5.55465       5.55465       323.294       328.849    
  52  0.701612     -0.354375      -4.26515       4.26515       325.176       329.441    
  53  0.161537E-01  -4.12561      -49.6545       49.6545       331.399       381.054    
  54  0.716145     -0.333873      -4.01839       4.01839       320.470       324.488    
  55  0.644842     -0.438751      -5.28067       5.28067       339.068       344.349    
  56  0.465420E-01  -3.06740      -36.9183       36.9183       312.379       349.298    
  57  0.644178     -0.439780      -5.29306       5.29306       321.570       326.864    
  58  0.297766      -1.21145      -14.5806       14.5806       306.186       320.766    
  59  0.877956     -0.130159      -1.56655       1.56655       295.168       296.734    
  60  0.373410     -0.985078      -11.8561       11.8561       350.071       361.927    
  61  0.162588      -1.81653      -21.8632       21.8632       319.650       341.513    
  62  0.634599     -0.454761      -5.47337       5.47337       318.706       324.179    
  63  0.762468     -0.271195      -3.26402       3.26402       311.734       314.998    
  64  0.237905      -1.43588      -17.2819       17.2819       292.428       309.709    
loop,thermsimp(1:2)       29   13.2690      0.106491    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    276        281.73          0.89          1.10         23.07          0.02          0.05         25.13
Just calling func    0   0         25.13


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    277        358.10          0.86          1.08         23.09          0.13          0.04         25.20
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    281.73
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    12.0357               316
loop is:       29
neval is:      276
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       29      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    12.0357               316
loop is:       30
neval is:      276


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      316
neval,tstepnext:      276     316

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.157557      -1.84797      -22.2416       22.2416       282.445       304.687    
   2  0.553200     -0.592035      -7.12555       7.12555       281.266       288.392    
   3  0.825049     -0.192313      -2.31462       2.31462       286.088       288.402    
   4  0.767336     -0.264830      -3.18741       3.18741       286.521       289.708    
   5  0.966534     -0.340385E-01 -0.409677      0.409677       287.238       287.648    
   6  0.954430     -0.466410E-01 -0.561357      0.561357       278.061       278.623    
   7  0.780674     -0.247598      -2.98001       2.98001       292.278       295.258    
   8  0.312863      -1.16199      -13.9854       13.9854       282.492       296.477    
   9  0.990226     -0.982218E-02 -0.118217      0.118217       295.168       295.286    
  10  0.893872     -0.112193      -1.35032       1.35032       290.580       291.930    
  11  0.322320      -1.13221      -13.6269       13.6269       296.364       309.991    
  12  0.927465     -0.752997E-01 -0.906284      0.906284       297.624       298.530    
  13  0.539466     -0.617176      -7.42814       7.42814       295.939       303.367    
  14  0.461474     -0.773330      -9.30757       9.30757       300.312       309.620    
  15  0.745701     -0.293430      -3.53164       3.53164       297.677       301.209    
  16  0.703580     -0.351573      -4.23143       4.23143       301.361       305.593    
  17  0.917420E-01  -2.38878      -28.7506       28.7506       297.817       326.567    
  18  0.671661     -0.398001      -4.79022       4.79022       298.574       303.364    
  19  0.845179     -0.168207      -2.02449       2.02449       304.134       306.159    
  20  0.283605E-01  -3.56276      -42.8803       42.8803       304.687       347.567    
  21  0.108883E-01  -4.52006      -54.4021       54.4021       304.685       359.087    
  22  0.506006     -0.681208      -8.19881       8.19881       300.448       308.647    
  23  0.353918      -1.03869      -12.5014       12.5014       291.756       304.257    
  24  0.656862     -0.420282      -5.05838       5.05838       304.814       309.872    
  25  0.691560     -0.368806      -4.43883       4.43883       298.406       302.845    
  26  0.445402     -0.808779      -9.73421       9.73421       308.487       318.221    
  27  0.832700     -0.183081      -2.20351       2.20351       292.428       294.631    
  28  0.963063     -0.376360E-01 -0.452976      0.452976       305.352       305.805    
  29  0.422212     -0.862247      -10.3777       10.3777       290.025       300.403    
  30  0.917895     -0.856720E-01  -1.03112       1.03112       302.903       303.934    
  31  0.767210     -0.264994      -3.18939       3.18939       284.234       287.424    
  32  0.360836      -1.01933      -12.2684       12.2684       293.215       305.483    
  33  0.635930     -0.452667      -5.44816       5.44816       311.734       317.182    
  34  0.687292     -0.374995      -4.51333       4.51333       311.913       316.426    
  35  0.833832     -0.181724      -2.18717       2.18717       314.938       317.125    
  36  0.362075      -1.01590      -12.2271       12.2271       291.268       303.495    
  37  0.385764     -0.952530      -11.4644       11.4644       317.183       328.648    
  38  0.752556     -0.284279      -3.42150       3.42150       318.584       322.005    
  39  0.547433     -0.602515      -7.25168       7.25168       318.875       326.126    
  40  0.171004      -1.76607      -21.2559       21.2559       306.186       327.442    
  41  0.159022      -1.83871      -22.1302       22.1302       300.320       322.450    
  42  0.850806     -0.161571      -1.94461       1.94461       319.349       321.294    
  43  0.926075     -0.768001E-01 -0.924343      0.924343       307.590       308.515    
  44  0.584885     -0.536340      -6.45522       6.45522       320.415       326.871    
  45  0.547650     -0.602120      -7.24693       7.24693       318.706       325.953    
  46  0.864296     -0.145840      -1.75529       1.75529       320.470       322.225    
  47  0.384639     -0.955450      -11.4995       11.4995       323.311       334.811    
  48  0.359776      -1.02227      -12.3038       12.3038       321.570       333.874    
  49  0.147032      -1.91711      -23.0737       23.0737       304.975       328.048    
  50  0.649806     -0.431082      -5.18837       5.18837       323.294       328.483    
  51  0.909946     -0.943695E-01  -1.13580       1.13580       325.176       326.311    
  52  0.740699     -0.300161      -3.61265       3.61265       325.466       329.078    
  53  0.959446     -0.413992E-01 -0.498268      0.498268       294.730       295.228    
  54  0.993892     -0.612654E-02 -0.737371E-01  0.737371E-01   308.583       308.657    
  55  0.499875     -0.693397      -8.34551       8.34551       326.285       334.630    
  56  0.716813     -0.332941      -4.00717       4.00717       321.315       325.322    
  57  0.586555     -0.533488      -6.42090       6.42090       319.650       326.071    
  58  0.687999     -0.373968      -4.50096       4.50096       319.480       323.981    
  59  0.238056      -1.43525      -17.2742       17.2742       339.068       356.342    
  60  0.842319     -0.171596      -2.06528       2.06528       291.528       293.593    
  61  0.559244     -0.581169      -6.99477       6.99477       312.379       319.374    
  62  0.596920     -0.515973      -6.21009       6.21009       298.353       304.563    
  63  0.266753      -1.32143      -15.9044       15.9044       350.071       365.975    
  64  0.681727     -0.383126      -4.61119       4.61119       281.731       286.343    
loop,thermsimp(1:2)       30   22.2416       7.12555    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    278        297.53          0.88          1.08         23.14          0.00          0.04         25.14
Just calling func    0   0         25.14


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    297.53
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    12.0357               316
loop is:       30
neval is:      277
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       30      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    12.0357               316
loop is:       31
neval is:      277


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      316
neval,tstepnext:      277     316

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.277512      -1.28189      -15.4284       15.4284       278.061       293.490    
   2  0.202445      -1.59728      -19.2244       19.2244       281.731       300.956    
   3  0.927152     -0.756373E-01 -0.910348      0.910348       284.234       285.144    
   4  0.403144     -0.908460      -10.9340       10.9340       287.238       298.172    
   5  0.791838     -0.233398      -2.80911       2.80911       281.266       284.075    
   6  0.292576      -1.22903      -14.7922       14.7922       286.088       300.880    
   7  0.135578      -1.99821      -24.0498       24.0498       286.521       310.571    
   8  0.516570     -0.660545      -7.95012       7.95012       290.580       298.530    
   9  0.730579     -0.313918      -3.77822       3.77822       291.528       295.306    
  10  0.508248     -0.676786      -8.14559       8.14559       292.428       300.573    
  11  0.928455     -0.742338E-01 -0.893455      0.893455       294.730       295.623    
  12  0.696477     -0.361721      -4.35356       4.35356       292.278       296.632    
  13  0.465556     -0.764522      -9.20155       9.20155       295.168       304.369    
  14  0.194653      -1.63654      -19.6969       19.6969       282.492       302.189    
  15  0.650312     -0.430303      -5.17900       5.17900       297.624       302.803    
  16  0.555802     -0.587343      -7.06908       7.06908       290.025       297.094    
  17  0.985517     -0.145893E-01 -0.175592      0.175592       297.677       297.852    
  18  0.923066     -0.800544E-01 -0.963510      0.963510       298.406       299.369    
  19  0.658765     -0.417388      -5.02355       5.02355       298.574       303.597    
  20  0.197878      -1.62010      -19.4991       19.4991       295.939       315.438    
  21  0.449673     -0.799236      -9.61936       9.61936       291.268       300.887    
  22  0.208093      -1.56977      -18.8933       18.8933       302.903       321.797    
  23  0.102791      -2.27506      -27.3819       27.3819       291.756       319.138    
  24  0.650538     -0.429955      -5.17481       5.17481       298.353       303.528    
  25  0.223365      -1.49895      -18.0409       18.0409       282.445       300.486    
  26  0.520729     -0.652525      -7.85359       7.85359       293.215       301.068    
  27  0.919707E-01  -2.38629      -28.7206       28.7206       301.361       330.082    
  28  0.788427     -0.237716      -2.86107       2.86107       305.352       308.213    
  29  0.395754     -0.926961      -11.1566       11.1566       304.134       315.291    
  30  0.903388     -0.101603      -1.22287       1.22287       307.590       308.813    
  31  0.569415     -0.563145      -6.77784       6.77784       300.448       307.226    
  32  0.974677     -0.256496E-01 -0.308711      0.308711       308.583       308.892    
  33  0.376411     -0.977073      -11.7598       11.7598       300.312       312.072    
  34  0.309090      -1.17412      -14.1314       14.1314       304.814       318.945    
  35  0.248039      -1.39417      -16.7798       16.7798       296.364       313.144    
  36  0.941329     -0.604621E-01 -0.727704      0.727704       311.913       312.641    
  37  0.131879      -2.02587      -24.3828       24.3828       314.938       339.321    
  38  0.188022      -1.67120      -20.1140       20.1140       311.734       331.848    
  39  0.898649E-01  -2.40945      -28.9994       28.9994       308.487       337.486    
  40  0.853893     -0.157949      -1.90103       1.90103       312.379       314.280    
  41  0.643577     -0.440714      -5.30430       5.30430       319.349       324.654    
  42  0.664391     -0.408885      -4.92121       4.92121       318.584       323.505    
  43  0.825262     -0.192054      -2.31151       2.31151       320.470       322.782    
  44  0.611498     -0.491843      -5.91967       5.91967       300.320       306.240    
  45  0.284000      -1.25878      -15.1503       15.1503       319.480       334.630    
  46  0.108174      -2.22402      -26.7676       26.7676       321.315       348.082    
  47  0.293070      -1.22734      -14.7719       14.7719       318.706       333.478    
  48  0.412045     -0.886623      -10.6711       10.6711       319.650       330.321    
  49  0.464041     -0.767783      -9.24080       9.24080       318.875       328.116    
  50  0.711768     -0.340003      -4.09217       4.09217       325.176       329.268    
  51  0.919970     -0.834138E-01  -1.00394       1.00394       297.817       298.821    
  52  0.551321     -0.595437      -7.16650       7.16650       320.415       327.582    
  53  0.720690E-01  -2.63013      -31.6555       31.6555       306.186       337.841    
  54  0.788823     -0.237213      -2.85502       2.85502       304.975       307.830    
  55  0.339304      -1.08086      -13.0089       13.0089       323.294       336.303    
  56  0.824115     -0.193445      -2.32825       2.32825       317.183       319.512    
  57  0.564535     -0.571754      -6.88145       6.88145       325.466       332.347    
  58  0.608050     -0.497498      -5.98774       5.98774       321.570       327.558    
  59  0.696797     -0.361262      -4.34804       4.34804       326.285       330.633    
  60  0.287274      -1.24732      -15.0123       15.0123       323.311       338.324    
  61  0.302150E-01  -3.49942      -42.1179       42.1179       304.687       346.805    
  62  0.896370     -0.109402      -1.31673       1.31673       339.068       340.385    
  63  0.289059      -1.24112      -14.9378       14.9378       304.685       319.623    
  64  0.476596     -0.741086      -8.91948       8.91948       297.530       306.450    
loop,thermsimp(1:2)       31   15.4284       19.2244    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    279        282.57          0.88          1.09         23.13          0.00          0.04         25.14
Just calling func    0   0         25.14


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    280        307.44          0.88          1.09         23.09          0.17          0.04         25.27
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    282.57
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    12.0357               316
loop is:       31
neval is:      279
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       31      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    12.0357               316
loop is:       32
neval is:      279


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      316
neval,tstepnext:      279     316

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.701343     -0.354759      -4.26977       4.26977       281.266       285.536    
   2  0.779682     -0.248869      -2.99531       2.99531       284.234       287.229    
   3  0.611645     -0.491604      -5.91679       5.91679       278.061       283.978    
   4  0.380626     -0.965937      -11.6257       11.6257       291.528       303.153    
   5  0.986599     -0.134915E-01 -0.162379      0.162379       294.730       294.892    
   6  0.699021     -0.358075      -4.30968       4.30968       292.278       296.588    
   7  0.981217E-01  -2.32155      -27.9414       27.9414       290.025       317.966    
   8  0.221199      -1.50869      -18.1582       18.1582       297.677       315.835    
   9  0.802460     -0.220073      -2.64873       2.64873       287.238       289.887    
  10  0.623430     -0.472519      -5.68709       5.68709       290.580       296.267    
  11  0.669862     -0.400684      -4.82251       4.82251       297.817       302.639    
  12  0.957999     -0.429090E-01 -0.516439      0.516439       298.406       298.922    
  13  0.569879E-01  -2.86492      -34.4813       34.4813       282.445       316.926    
  14  0.245244      -1.40550      -16.9162       16.9162       292.428       309.344    
  15  0.870123     -0.139121      -1.67442       1.67442       286.088       287.762    
  16  0.429679     -0.844716      -10.1667       10.1667       291.268       301.434    
  17  0.369880     -0.994577      -11.9704       11.9704       281.731       293.702    
  18  0.964882     -0.357490E-01 -0.430264      0.430264       293.215       293.645    
  19  0.625983     -0.468432      -5.63790       5.63790       282.492       288.130    
  20  0.508652     -0.675991      -8.13602       8.13602       297.624       305.760    
  21  0.694697     -0.364279      -4.38435       4.38435       298.353       302.737    
  22  0.817819     -0.201114      -2.42054       2.42054       298.574       300.994    
  23  0.655732     -0.422003      -5.07910       5.07910       295.168       300.247    
  24  0.658757     -0.417401      -5.02371       5.02371       300.320       305.344    
  25  0.325934      -1.12106      -13.4927       13.4927       297.530       311.023    
  26  0.849137     -0.163535      -1.96825       1.96825       300.448       302.416    
  27  0.953435     -0.476843E-01 -0.573914      0.573914       304.975       305.548    
  28  0.435049     -0.832297      -10.0173       10.0173       305.352       315.369    
  29  0.155341E-01  -4.16472      -50.1253       50.1253       307.590       357.716    
  30  0.390095     -0.941364      -11.3300       11.3300       308.583       319.913    
  31  0.400867E-02  -5.51929      -66.4285       66.4285       286.521       352.950    
  32  0.989750     -0.103025E-01 -0.123998      0.123998       300.312       300.436    
  33  0.194149      -1.63913      -19.7280       19.7280       311.913       331.641    
  34  0.573547     -0.555915      -6.69082       6.69082       296.364       303.055    
  35  0.570216     -0.561740      -6.76093       6.76093       312.379       319.140    
  36  0.802122     -0.220494      -2.65380       2.65380       304.134       306.788    
  37  0.831214E-01  -2.48745      -29.9382       29.9382       295.939       325.878    
  38  0.280368      -1.27165      -15.3052       15.3052       304.814       320.119    
  39  0.568263     -0.565171      -6.80222       6.80222       291.756       298.558    
  40  0.570544     -0.561165      -6.75401       6.75401       317.183       323.937    
  41  0.524202     -0.645877      -7.77358       7.77358       304.685       312.459    
  42  0.625335E-01  -2.77205      -33.3636       33.3636       302.903       336.267    
  43  0.717146     -0.332476      -4.00158       4.00158       320.470       324.472    
  44  0.234175      -1.45169      -17.4721       17.4721       318.584       336.056    
  45  0.366320      -1.00425      -12.0868       12.0868       319.349       331.436    
  46  0.458915     -0.778891      -9.37450       9.37450       321.570       330.945    
  47  0.379536     -0.968806      -11.6603       11.6603       320.415       332.076    
  48  0.854466     -0.157278      -1.89296       1.89296       318.875       320.768    
  49  0.452738E-01  -3.09503      -37.2508       37.2508       325.176       362.426    
  50  0.966525     -0.340477E-01 -0.409788      0.409788       301.361       301.771    
  51  0.400949     -0.913920      -10.9997       10.9997       319.650       330.650    
  52  0.563096     -0.574305      -6.91216       6.91216       326.285       333.197    
  53  0.612298     -0.490536      -5.90394       5.90394       311.734       317.638    
  54  0.395518     -0.927559      -11.1638       11.1638       325.466       336.629    
  55  0.693522     -0.365972      -4.40472       4.40472       318.706       323.111    
  56  0.270894      -1.30603      -15.7190       15.7190       319.480       335.199    
  57  0.885600     -0.121490      -1.46221       1.46221       323.294       324.757    
  58  0.862297     -0.148155      -1.78315       1.78315       308.487       310.270    
  59  0.483017     -0.727702      -8.75840       8.75840       306.186       314.944    
  60  0.594400     -0.520203      -6.26101       6.26101       323.311       329.572    
  61  0.351664      -1.04508      -12.5783       12.5783       314.938       327.516    
  62  0.402505     -0.910048      -10.9531       10.9531       339.068       350.021    
  63  0.272240      -1.30107      -15.6593       15.6593       304.687       320.346    
  64  0.234792      -1.44906      -17.4404       17.4404       282.567       300.008    
loop,thermsimp(1:2)       32   4.26977       2.99531    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    281        275.41          0.88          1.09         23.15          0.27          0.05         25.45
Just calling func    0   0         25.45


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    282        312.82          0.86          1.08         23.05          0.16          0.04         25.19
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  280    275.41        4.428     -1.245      4.213     -100.0     0.2784    
                      -1.197      2.353     -100.0      2.823     0.4950    
                       1.247    -0.1654      2.400      0.000      0.000    
                     -0.5901      0.000      0.000      0.000     -1.221    

                      -2.500     0.1019E+05 0.1567E+05 -1095.     -3125.    
                      -2.000     -7.704     -2.709     -3.419     -1.132    
                      -13.72     -2.170      1359.      0.000      3354.    

                       4764.      3323.      5073.      5329.      2500.    
                       4298.     0.7989E-01-0.3611E-01  0.000    -0.6440E-01
                      0.1057    -0.4517E-01 0.1672    -0.4281E-01-0.5221E-01

                     -0.6905    -0.6948      0.000     0.2794     0.1310    
                      0.8541E-01 0.1021     0.1801     0.1476     0.4825E-01
                      0.6298E-02-0.1417E-01-0.2709    -0.4950      0.000    

                      -1.845     -3.709      5.047     -1.167      0.000    
                       0.000      9.042      9.072     -5080.     -4.000    
                     -0.1651    -0.4563      8.804      8.410    -0.1246E+05

                      -4.000     0.5421      1.508      9.332      9.252    
                      -5919.     -4.000     0.3938     0.6607      9.426    
                       8.537     -2475.     -2.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    275.41
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    12.0357               316
loop is:       32
neval is:      281
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       32      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    12.0357               316
loop is:       33
neval is:      281


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      316
neval,tstepnext:      281     316

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.403971     -0.906412      -10.9093       10.9093       278.061       288.971    
   2  0.598662     -0.513057      -6.17500       6.17500       281.266       287.441    
   3  0.165178      -1.80073      -21.6730       21.6730       284.234       305.907    
   4  0.785331     -0.241651      -2.90843       2.90843       286.088       288.996    
   5  0.422061     -0.862604      -10.3820       10.3820       282.492       292.874    
   6  0.343624      -1.06821      -12.8566       12.8566       287.238       300.095    
   7  0.988862     -0.112001E-01 -0.134801      0.134801       293.215       293.350    
   8  0.586093E-01  -2.83686      -34.1436       34.1436       281.731       315.875    
   9  0.324880      -1.12430      -13.5317       13.5317       294.730       308.262    
  10  0.869373     -0.139983      -1.68479       1.68479       290.580       292.265    
  11  0.314362      -1.15721      -13.9278       13.9278       292.278       306.206    
  12  0.635265     -0.453712      -5.46074       5.46074       291.756       297.216    
  13  0.800738     -0.222221      -2.67458       2.67458       298.406       301.080    
  14  0.234515      -1.45024      -17.4546       17.4546       282.567       300.022    
  15  0.818766     -0.199957      -2.40662       2.40662       295.168       297.574    
  16  0.480807     -0.732289      -8.81360       8.81360       300.312       309.126    
  17  0.173083      -1.75398      -21.1104       21.1104       298.574       319.684    
  18  0.544835     -0.607272      -7.30894       7.30894       291.268       298.577    
  19  0.955728     -0.452816E-01 -0.544995      0.544995       301.361       301.906    
  20  0.909631     -0.947157E-01  -1.13997       1.13997       300.448       301.588    
  21  0.538276     -0.619384      -7.45471       7.45471       297.817       305.271    
  22  0.640373     -0.445705      -5.36437       5.36437       298.353       303.717    
  23  0.588429     -0.530300      -6.38253       6.38253       296.364       302.747    
  24  0.954392     -0.466804E-01 -0.561830      0.561830       291.528       292.090    
  25  0.976738     -0.235363E-01 -0.283276      0.283276       300.320       300.603    
  26  0.801897     -0.220775      -2.65718       2.65718       304.975       307.632    
  27  0.679499     -0.386400      -4.65060       4.65060       297.624       302.274    
  28  0.303686      -1.19176      -14.3437       14.3437       304.134       318.478    
  29  0.907562     -0.969936E-01  -1.16739       1.16739       292.428       293.595    
  30  0.117971E-01  -4.43990      -53.4373       53.4373       308.487       361.924    
  31  0.324683      -1.12491      -13.5390       13.5390       297.530       311.069    
  32  0.662106     -0.412329      -4.96267       4.96267       304.685       309.648    
  33  0.334080      -1.09637      -13.1956       13.1956       306.186       319.381    
  34  0.307577      -1.17903      -14.1904       14.1904       305.352       319.543    
  35  0.539029     -0.617986      -7.43789       7.43789       297.677       305.115    
  36  0.822737     -0.195119      -2.34839       2.34839       282.445       284.793    
  37  0.973480     -0.268776E-01 -0.323491      0.323491       311.734       312.057    
  38  0.918970     -0.845018E-01  -1.01704       1.01704       290.025       291.042    
  39  0.203072      -1.59419      -19.1872       19.1872       312.379       331.567    
  40  0.467655     -0.760024      -9.14742       9.14742       308.583       317.730    
  41  0.323145      -1.12965      -13.5962       13.5962       304.814       318.410    
  42  0.505961     -0.681295      -8.19986       8.19986       304.687       312.886    
  43  0.699853E-01  -2.65947      -32.0086       32.0086       318.875       350.883    
  44  0.188263      -1.66991      -20.0986       20.0986       318.706       338.805    
  45  0.663178     -0.410711      -4.94319       4.94319       317.183       322.127    
  46  0.680233     -0.385320      -4.63759       4.63759       320.470       325.108    
  47  0.717812     -0.331548      -3.99041       3.99041       323.294       327.285    
  48  0.319374      -1.14139      -13.7375       13.7375       295.939       309.677    
  49  0.667076     -0.404851      -4.87266       4.87266       314.938       319.810    
  50  0.755360     -0.280560      -3.37674       3.37674       323.311       326.688    
  51  0.105804      -2.24617      -27.0342       27.0342       319.650       346.684    
  52  0.432752     -0.837590      -10.0810       10.0810       321.570       331.651    
  53  0.258710      -1.35205      -16.2728       16.2728       319.349       335.622    
  54  0.826410     -0.190665      -2.29478       2.29478       311.913       314.208    
  55  0.958430     -0.424590E-01 -0.511023      0.511023       320.415       320.926    
  56  0.898442     -0.107093      -1.28894       1.28894       326.285       327.574    
  57  0.794924     -0.229509      -2.76230       2.76230       319.480       322.242    
  58  0.191148      -1.65471      -19.9155       19.9155       318.584       338.499    
  59  0.920959     -0.823397E-01 -0.991016      0.991016       302.903       303.894    
  60  0.239714      -1.42831      -17.1907       17.1907       325.466       342.656    
  61  0.337561      -1.08601      -13.0709       13.0709       339.068       352.139    
  62  0.229537      -1.47169      -17.7128       17.7128       286.521       304.234    
  63  0.518941     -0.655965      -7.89499       7.89499       307.590       315.485    
  64  0.565096     -0.570759      -6.86949       6.86949       275.413       282.283    
loop,thermsimp(1:2)       33   10.9093       6.17500    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    283        386.85          0.88          1.09         23.03          0.16          0.04         25.21
Just calling func    0   0         25.21


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    284        313.95          0.88          1.10         23.08          0.02          0.04         25.12
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3    313.95
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    12.0357               316
loop is:       33
neval is:      283
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       33      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    12.0357               316
loop is:       34
neval is:      283


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      316
neval,tstepnext:      283     316

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.228924      -1.47437      -17.7450       17.7450       275.413       293.158    
   2  0.299376      -1.20605      -14.5157       14.5157       282.445       296.961    
   3  0.220114      -1.51361      -18.2173       18.2173       281.266       299.484    
   4  0.229209      -1.47312      -17.7301       17.7301       278.061       295.791    
   5  0.902477     -0.102612      -1.23501       1.23501       286.088       287.323    
   6  0.659052     -0.416953      -5.01832       5.01832       290.025       295.043    
   7  0.100321E-01  -4.60197      -55.3879       55.3879       291.528       346.916    
   8  0.588837     -0.529606      -6.37417       6.37417       290.580       296.954    
   9  0.270943      -1.30585      -15.7168       15.7168       282.492       298.209    
  10  0.505518     -0.682171      -8.21041       8.21041       293.215       301.425    
  11  0.264565      -1.32967      -16.0035       16.0035       292.428       308.431    
  12  0.806386     -0.215193      -2.59000       2.59000       291.756       294.346    
  13  0.340560      -1.07716      -12.9644       12.9644       295.168       308.132    
  14  0.906186     -0.985106E-01  -1.18564       1.18564       291.268       292.453    
  15  0.786070     -0.240709      -2.89710       2.89710       282.567       285.464    
  16  0.540508     -0.615247      -7.40492       7.40492       287.238       294.643    
  17  0.935065     -0.671392E-01 -0.808067      0.808067       300.320       301.128    
  18  0.915359     -0.884391E-01  -1.06443       1.06443       298.406       299.470    
  19  0.958261     -0.426353E-01 -0.513145      0.513145       300.448       300.961    
  20  0.935110     -0.670907E-01 -0.807484      0.807484       301.361       302.169    
  21  0.637755     -0.449800      -5.41366       5.41366       297.624       303.037    
  22  0.975714     -0.245861E-01 -0.295911      0.295911       296.364       296.660    
  23  0.797424     -0.226369      -2.72451       2.72451       298.353       301.077    
  24  0.214179      -1.54094      -18.5463       18.5463       302.903       321.450    
  25  0.372145     -0.988472      -11.8969       11.8969       286.521       298.418    
  26  0.925208     -0.777367E-01 -0.935615      0.935615       297.677       298.612    
  27  0.175897      -1.73786      -20.9163       20.9163       297.817       318.733    
  28  0.952033     -0.491554E-01 -0.591619      0.591619       284.234       284.826    
  29  0.158274E-01  -4.14601      -49.9001       49.9001       292.278       342.178    
  30  0.799308     -0.224008      -2.69610       2.69610       304.975       307.671    
  31  0.248227      -1.39341      -16.7707       16.7707       294.730       311.501    
  32  0.244914      -1.40685      -16.9324       16.9324       300.312       317.245    
  33  0.390842     -0.939452      -11.3070       11.3070       304.685       315.992    
  34  0.146784      -1.91879      -23.0940       23.0940       295.939       319.033    
  35  0.500975     -0.691199      -8.31906       8.31906       297.530       305.849    
  36  0.480131E-01  -3.03628      -36.5438       36.5438       311.734       348.278    
  37  0.124503      -2.08343      -25.0755       25.0755       304.687       329.762    
  38  0.670304     -0.400024      -4.81457       4.81457       311.913       316.728    
  39  0.997449     -0.255468E-02 -0.307473E-01  0.307473E-01   307.590       307.621    
  40  0.681761     -0.383076      -4.61058       4.61058       281.731       286.342    
  41  0.440529     -0.819778      -9.86660       9.86660       308.583       318.450    
  42  0.342489      -1.07152      -12.8964       12.8964       304.814       317.710    
  43  0.735753     -0.306861      -3.69328       3.69328       304.134       307.828    
  44  0.614752     -0.486537      -5.85581       5.85581       306.186       312.042    
  45  0.351660      -1.04509      -12.5784       12.5784       305.352       317.931    
  46  0.777165     -0.252103      -3.03423       3.03423       298.574       301.608    
  47  0.392618     -0.934919      -11.2524       11.2524       314.938       326.190    
  48  0.385647     -0.952832      -11.4680       11.4680       320.415       331.883    
  49  0.834392     -0.181052      -2.17909       2.17909       317.183       319.363    
  50  0.469158     -0.756815      -9.10880       9.10880       319.480       328.589    
  51  0.697320     -0.360511      -4.33900       4.33900       320.470       324.809    
  52  0.987150     -0.129333E-01 -0.155661      0.155661       323.311       323.467    
  53  0.512413     -0.668624      -8.04736       8.04736       323.294       331.342    
  54  0.781282     -0.246819      -2.97064       2.97064       326.285       329.255    
  55  0.290579      -1.23588      -14.8747       14.8747       312.379       327.254    
  56  0.921499     -0.817534E-01 -0.983959      0.983959       321.570       322.554    
  57  0.198558      -1.61668      -19.4578       19.4578       319.349       338.807    
  58  0.488340     -0.716743      -8.62650       8.62650       318.584       327.210    
  59  0.874587     -0.134003      -1.61282       1.61282       318.706       320.319    
  60  0.165334      -1.79979      -21.6617       21.6617       325.466       347.127    
  61  0.712283     -0.339280      -4.08347       4.08347       319.650       323.733    
  62  0.578012E-01  -2.85075      -34.3107       34.3107       318.875       353.185    
  63  0.700556     -0.355880      -4.28327       4.28327       339.068       343.351    
  64  0.502101     -0.688954      -8.29204       8.29204       313.947       322.239    
loop,thermsimp(1:2)       34   17.7450       14.5157    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    285        282.30          0.88          1.09         23.06          0.06          0.04         25.14
Just calling func    0   0         25.14


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    286        301.93          0.88          1.08         23.10          0.11          0.05         25.21
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    282.30
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    12.0357               316
loop is:       34
neval is:      285
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       34      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    12.0357               316
loop is:       35
neval is:      285


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      316
neval,tstepnext:      285     316

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.347237      -1.05775      -12.7307       12.7307       284.234       296.965    
   2  0.621479     -0.475653      -5.72482       5.72482       282.567       288.292    
   3  0.221273      -1.50836      -18.1541       18.1541       281.731       299.886    
   4  0.180626E-01  -4.01391      -48.3102       48.3102       286.088       334.398    
   5  0.216093      -1.53205      -18.4393       18.4393       291.268       309.707    
   6  0.351343      -1.04599      -12.5892       12.5892       275.413       288.002    
   7  0.360847      -1.01930      -12.2680       12.2680       291.756       304.024    
   8  0.439525     -0.822061      -9.89407       9.89407       287.238       297.132    
   9  0.910616E-01  -2.39622      -28.8402       28.8402       290.025       318.865    
  10  0.549745     -0.598300      -7.20096       7.20096       278.061       285.262    
  11  0.619825     -0.478318      -5.75689       5.75689       296.364       302.121    
  12  0.548169E-01  -2.90376      -34.9487       34.9487       290.580       325.529    
  13  0.947163     -0.542842E-01 -0.653349      0.653349       282.445       283.098    
  14  0.725459     -0.320951      -3.86286       3.86286       282.492       286.355    
  15  0.481613     -0.730615      -8.79346       8.79346       286.521       295.314    
  16  0.866286     -0.143540      -1.72761       1.72761       297.677       299.404    
  17  0.221988E-01  -3.80772      -45.8285       45.8285       298.406       344.234    
  18  0.980823     -0.193630E-01 -0.233048      0.233048       281.266       281.499    
  19  0.332549      -1.10097      -13.2509       13.2509       300.448       313.699    
  20  0.989035     -0.110256E-01 -0.132701      0.132701       298.353       298.485    
  21  0.364016      -1.01056      -12.1628       12.1628       300.320       312.483    
  22  0.861799     -0.148733      -1.79011       1.79011       293.215       295.005    
  23  0.622306     -0.474324      -5.70882       5.70882       298.574       304.283    
  24  0.575476     -0.552558      -6.65042       6.65042       301.361       308.012    
  25  0.205536      -1.58213      -19.0421       19.0421       297.624       316.666    
  26  0.124037      -2.08718      -25.1206       25.1206       297.530       322.651    
  27  0.467008     -0.761408      -9.16408       9.16408       307.590       316.754    
  28  0.273870      -1.29510      -15.5874       15.5874       304.975       320.562    
  29  0.842780     -0.171050      -2.05870       2.05870       304.134       306.193    
  30  0.709315     -0.343455      -4.13372       4.13372       295.168       299.301    
  31  0.677144     -0.389871      -4.69237       4.69237       292.428       297.120    
  32  0.656062     -0.421500      -5.07305       5.07305       294.730       299.803    
  33  0.721592     -0.326295      -3.92719       3.92719       306.186       310.113    
  34  0.120172      -2.11883      -25.5016       25.5016       304.685       330.187    
  35  0.832403     -0.183439      -2.20781       2.20781       311.913       314.121    
  36  0.607577     -0.498276      -5.99710       5.99710       300.312       306.309    
  37  0.169814      -1.77305      -21.3399       21.3399       304.814       326.154    
  38  0.578085     -0.548034      -6.59597       6.59597       305.352       311.948    
  39  0.201144      -1.60373      -19.3021       19.3021       308.583       327.885    
  40  0.922823     -0.803178E-01 -0.966681      0.966681       297.817       298.783    
  41  0.136644      -1.99038      -23.9556       23.9556       295.939       319.895    
  42  0.836366     -0.178689      -2.15064       2.15064       317.183       319.334    
  43  0.590669     -0.526499      -6.33678       6.33678       318.706       325.043    
  44  0.745946     -0.293102      -3.52768       3.52768       302.903       306.431    
  45  0.874736     -0.133833      -1.61077       1.61077       313.947       315.558    
  46  0.370232     -0.993625      -11.9590       11.9590       321.570       333.529    
  47  0.832293     -0.183570      -2.20940       2.20940       323.311       325.521    
  48  0.351566      -1.04536      -12.5816       12.5816       319.650       332.231    
  49  0.705870     -0.348324      -4.19232       4.19232       320.470       324.662    
  50  0.323816      -1.12758      -13.5712       13.5712       314.938       328.509    
  51  0.197269      -1.62319      -19.5362       19.5362       318.584       338.120    
  52  0.140686      -1.96123      -23.6047       23.6047       312.379       335.984    
  53  0.913651     -0.903067E-01  -1.08690       1.08690       319.480       320.567    
  54  0.515699     -0.662233      -7.97043       7.97043       326.285       334.255    
  55  0.217669      -1.52478      -18.3518       18.3518       304.687       323.038    
  56  0.234146      -1.45181      -17.4735       17.4735       323.294       340.768    
  57  0.948303     -0.530813E-01 -0.638870      0.638870       320.415       321.054    
  58  0.165683      -1.79768      -21.6363       21.6363       319.349       340.986    
  59  0.506186     -0.680851      -8.19451       8.19451       292.278       300.473    
  60  0.644381     -0.439466      -5.28928       5.28928       339.068       344.357    
  61  0.790610     -0.234950      -2.82778       2.82778       291.528       294.356    
  62  0.945427     -0.561185E-01 -0.675425      0.675425       325.466       326.141    
  63  0.195494      -1.63222      -19.6449       19.6449       311.734       331.379    
  64  0.478914     -0.736235      -8.86110       8.86110       282.302       291.163    
loop,thermsimp(1:2)       35   12.7307       5.72482    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    287        300.52          0.88          1.09         23.06          0.05          0.04         25.13
Just calling func    0   0         25.14


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    288        381.97          0.88          1.10         23.13          0.04          0.04         25.20
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    300.52
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    12.0357               316
loop is:       35
neval is:      287
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       35      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    12.0357               316
loop is:       36
neval is:      287


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      316
neval,tstepnext:      287     316

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.233712      -1.45367      -17.4959       17.4959       281.266       298.762    
   2  0.607568     -0.498291      -5.99728       5.99728       282.445       288.442    
   3  0.905785     -0.989529E-01  -1.19097       1.19097       278.061       279.252    
   4  0.995938E-01  -2.30666      -27.7622       27.7622       282.492       310.254    
   5  0.851360     -0.160920      -1.93679       1.93679       275.413       277.350    
   6  0.730583     -0.313913      -3.77816       3.77816       282.567       286.345    
   7  0.426216     -0.852810      -10.2642       10.2642       282.302       292.566    
   8  0.285108      -1.25489      -15.1035       15.1035       291.528       306.631    
   9  0.839246     -0.175251      -2.10927       2.10927       293.215       295.324    
  10  0.217639      -1.52492      -18.3534       18.3534       286.521       304.874    
  11  0.183996E-02  -6.29801      -75.8010       75.8010       284.234       360.035    
  12  0.682631     -0.381801      -4.59524       4.59524       292.428       297.023    
  13  0.203596      -1.59162      -19.1562       19.1562       287.238       306.394    
  14  0.881164     -0.126512      -1.52266       1.52266       298.353       299.875    
  15  0.711431     -0.340477      -4.09787       4.09787       297.817       301.914    
  16  0.874326     -0.134302      -1.61642       1.61642       295.168       296.784    
  17  0.814222     -0.205523      -2.47361       2.47361       297.677       300.150    
  18  0.995668     -0.434126E-02 -0.522501E-01  0.522501E-01   294.730       294.782    
  19  0.693805     -0.365564      -4.39982       4.39982       281.731       286.131    
  20  0.958584     -0.422984E-01 -0.509091      0.509091       292.278       292.787    
  21  0.748022     -0.290323      -3.49424       3.49424       296.364       299.859    
  22  0.696703     -0.361396      -4.34965       4.34965       291.756       296.105    
  23  0.732990     -0.310623      -3.73857       3.73857       298.574       302.312    
  24  0.534749     -0.625958      -7.53383       7.53383       304.134       311.668    
  25  0.691641     -0.368688      -4.43742       4.43742       300.312       304.750    
  26  0.300458      -1.20245      -14.4723       14.4723       302.903       317.376    
  27  0.977116     -0.231502E-01 -0.278629      0.278629       301.361       301.640    
  28  0.542581     -0.611418      -7.35884       7.35884       291.268       298.627    
  29  0.266111      -1.32384      -15.9333       15.9333       306.186       322.119    
  30  0.692298     -0.367738      -4.42598       4.42598       305.352       309.778    
  31  0.664047     -0.409403      -4.92745       4.92745       300.320       305.247    
  32  0.542186     -0.612146      -7.36761       7.36761       300.448       307.816    
  33  0.362243      -1.01544      -12.2215       12.2215       311.913       324.135    
  34  0.578658     -0.547044      -6.58405       6.58405       313.947       320.531    
  35  0.489298     -0.714783      -8.60291       8.60291       297.624       306.227    
  36  0.617485     -0.482100      -5.80241       5.80241       307.590       313.393    
  37  0.368651     -0.997905      -12.0105       12.0105       290.025       302.035    
  38  0.198936      -1.61477      -19.4349       19.4349       317.183       336.618    
  39  0.505263     -0.682676      -8.21648       8.21648       295.939       304.156    
  40  0.983997     -0.161325E-01 -0.194166      0.194166       304.975       305.169    
  41  0.630553     -0.461159      -5.55037       5.55037       319.480       325.030    
  42  0.423821E-01  -3.16103      -38.0452       38.0452       320.415       358.461    
  43  0.488935     -0.715526      -8.61186       8.61186       297.530       306.142    
  44  0.402078     -0.911110      -10.9658       10.9658       304.687       315.652    
  45  0.380878     -0.965277      -11.6178       11.6178       320.470       332.088    
  46  0.260585E-01  -3.64741      -43.8991       43.8991       318.706       362.605    
  47  0.681660     -0.383224      -4.61237       4.61237       323.311       327.924    
  48  0.489074     -0.715241      -8.60842       8.60842       290.580       299.188    
  49  0.752363     -0.284536      -3.42459       3.42459       325.466       328.890    
  50  0.978934     -0.212911E-01 -0.256254      0.256254       304.814       305.070    
  51  0.297789      -1.21137      -14.5797       14.5797       308.583       323.163    
  52  0.551604     -0.594926      -7.16034       7.16034       314.938       322.098    
  53  0.546413     -0.604381      -7.27415       7.27415       304.685       311.959    
  54  0.831880     -0.184067      -2.21537       2.21537       311.734       313.949    
  55  0.873708     -0.135010      -1.62493       1.62493       319.650       321.275    
  56  0.169447      -1.77521      -21.3659       21.3659       321.570       342.936    
  57  0.434000     -0.834712      -10.0463       10.0463       326.285       336.331    
  58  0.506119     -0.680984      -8.19611       8.19611       286.088       294.284    
  59  0.168470      -1.78100      -21.4355       21.4355       312.379       333.815    
  60  0.820014     -0.198433      -2.38828       2.38828       318.584       320.972    
  61  0.973689     -0.266631E-01 -0.320908      0.320908       323.294       323.615    
  62  0.438579     -0.824215      -9.92000       9.92000       319.349       329.269    
  63  0.725095     -0.321452      -3.86890       3.86890       298.406       302.275    
  64  0.857338     -0.153923      -1.85257       1.85257       300.522       302.375    
loop,thermsimp(1:2)       36   17.4959       5.99728    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    289        281.25          0.88          1.09         23.14          0.20          0.04         25.35
Just calling func    0   0         25.35


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    281.25
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    12.0357               316
loop is:       36
neval is:      288
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       36      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    12.0357               316
loop is:       37
neval is:      288


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      316
neval,tstepnext:      288     316

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.411300     -0.888432      -10.6929       10.6929       275.413       286.106    
   2  0.697205     -0.360676      -4.34099       4.34099       278.061       282.402    
   3  0.314648E-01  -3.45889      -41.6301       41.6301       281.731       323.362    
   4  0.857269     -0.154003      -1.85353       1.85353       282.567       284.421    
   5  0.652165     -0.427457      -5.14475       5.14475       282.445       287.590    
   6  0.510145     -0.673060      -8.10074       8.10074       282.302       290.403    
   7  0.175175      -1.74197      -20.9658       20.9658       292.278       313.244    
   8  0.373803     -0.984025      -11.8434       11.8434       286.088       297.931    
   9  0.514972     -0.663642      -7.98740       7.98740       294.730       302.717    
  10  0.548235     -0.601051      -7.23406       7.23406       293.215       300.449    
  11  0.541310     -0.613763      -7.38707       7.38707       291.756       299.143    
  12  0.734083     -0.309133      -3.72063       3.72063       295.168       298.888    
  13  0.422599     -0.861332      -10.3667       10.3667       292.428       302.794    
  14  0.287055      -1.24808      -15.0215       15.0215       291.268       306.289    
  15  0.885133     -0.122017      -1.46856       1.46856       281.266       282.735    
  16  0.391075     -0.938857      -11.2998       11.2998       290.580       301.880    
  17  0.473784     -0.747003      -8.99070       8.99070       296.364       305.355    
  18  0.691812     -0.368440      -4.43444       4.43444       298.353       302.787    
  19  0.644447     -0.439363      -5.28804       5.28804       297.677       302.965    
  20  0.805933     -0.215754      -2.59675       2.59675       301.361       303.958    
  21  0.393766     -0.931998      -11.2172       11.2172       297.817       309.034    
  22  0.907098E-01  -2.40009      -28.8867       28.8867       290.025       318.912    
  23  0.376515     -0.976796      -11.7564       11.7564       298.406       310.162    
  24  0.819190     -0.199439      -2.40039       2.40039       298.574       300.974    
  25  0.692438     -0.367536      -4.42355       4.42355       300.522       304.946    
  26  0.188370      -1.66935      -20.0918       20.0918       295.939       316.031    
  27  0.500532     -0.692083      -8.32970       8.32970       300.312       308.642    
  28  0.282311      -1.26475      -15.2221       15.2221       286.521       301.743    
  29  0.338061      -1.08453      -13.0530       13.0530       304.814       317.867    
  30  0.466208     -0.763123      -9.18472       9.18472       304.975       314.159    
  31  0.893084     -0.113075      -1.36093       1.36093       300.320       301.681    
  32  0.818806     -0.199908      -2.40604       2.40604       297.530       299.936    
  33  0.585066     -0.536031      -6.45151       6.45151       297.624       304.075    
  34  0.527412     -0.639774      -7.70013       7.70013       287.238       294.938    
  35  0.994295     -0.572143E-02 -0.688614E-01  0.688614E-01   291.528       291.597    
  36  0.739278     -0.302082      -3.63576       3.63576       300.448       304.084    
  37  0.230995      -1.46536      -17.6366       17.6366       305.352       322.989    
  38  0.414929     -0.879648      -10.5872       10.5872       282.492       293.079    
  39  0.378446     -0.971682      -11.6949       11.6949       304.134       315.829    
  40  0.368620     -0.997990      -12.0115       12.0115       304.685       316.696    
  41  0.301312      -1.19961      -14.4381       14.4381       307.590       322.028    
  42  0.105882E-01  -4.54801      -54.7385       54.7385       311.734       366.472    
  43  0.481885     -0.730049      -8.78665       8.78665       304.687       313.473    
  44  0.446716     -0.805833      -9.69876       9.69876       302.903       312.602    
  45  0.482098     -0.729608      -8.78134       8.78134       313.947       322.728    
  46  0.278892      -1.27693      -15.3688       15.3688       318.584       333.952    
  47  0.756484     -0.279074      -3.35885       3.35885       319.650       323.009    
  48  0.662766     -0.411334      -4.95069       4.95069       314.938       319.888    
  49  0.433861E-01  -3.13762      -37.7634       37.7634       306.186       343.949    
  50  0.825649E-02  -4.79676      -57.7323       57.7323       308.583       366.315    
  51  0.476679     -0.740911      -8.91738       8.91738       323.294       332.212    
  52  0.128614      -2.05094      -24.6845       24.6845       311.913       336.598    
  53  0.609086     -0.495797      -5.96726       5.96726       319.480       325.447    
  54  0.484878E-01  -3.02644      -36.4254       36.4254       323.311       359.737    
  55  0.287383E-02  -5.85211      -70.4342       70.4342       325.466       395.900    
  56  0.699724     -0.357070      -4.29758       4.29758       319.349       323.647    
  57  0.407524     -0.897655      -10.8039       10.8039       320.470       331.274    
  58  0.530107     -0.634677      -7.63878       7.63878       312.379       320.018    
  59  0.589469E-01  -2.83112      -34.0745       34.0745       326.285       360.359    
  60  0.357066E-01  -3.33242      -40.1080       40.1080       317.183       357.291    
  61  0.726760     -0.319159      -3.84130       3.84130       321.570       325.412    
  62  0.486103     -0.721334      -8.68176       8.68176       320.415       329.097    
  63  0.212811      -1.54735      -18.6234       18.6234       284.234       302.858    
  64  0.264725      -1.32906      -15.9962       15.9962       281.252       297.248    
loop,thermsimp(1:2)       37   10.6929       4.34099    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    290        268.37          0.88          1.09         23.13          0.14          0.05         25.30
Just calling func    0   0         25.30


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    291        294.93          0.86          1.08         23.06          0.12          0.04         25.16
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    268.37
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    12.0357               316
loop is:       37
neval is:      290
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       37      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    12.0357               316
loop is:       38
neval is:      290


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      316
neval,tstepnext:      290     316

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.408852     -0.894401      -10.7647       10.7647       278.061       288.826    
   2  0.259700      -1.34823      -16.2268       16.2268       281.266       297.493    
   3  0.681144E-01  -2.68657      -32.3347       32.3347       282.567       314.902    
   4  0.158140      -1.84427      -22.1971       22.1971       275.413       297.610    
   5  0.497681     -0.697796      -8.39846       8.39846       282.445       290.843    
   6  0.800218     -0.222871      -2.68240       2.68240       282.302       284.985    
   7  0.831967     -0.183962      -2.21411       2.21411       291.528       293.742    
   8  0.707345     -0.346237      -4.16720       4.16720       282.492       286.659    
   9  0.265927      -1.32454      -15.9417       15.9417       287.238       303.180    
  10  0.659046     -0.416962      -5.01842       5.01842       281.252       286.270    
  11  0.654587E-01  -2.72634      -32.8133       32.8133       286.088       318.901    
  12  0.223329      -1.49911      -18.0428       18.0428       295.168       313.210    
  13  0.996019     -0.398855E-02 -0.480050E-01  0.480050E-01   291.756       291.804    
  14  0.553910     -0.590753      -7.11012       7.11012       297.530       304.640    
  15  0.218863      -1.51931      -18.2859       18.2859       293.215       311.501    
  16  0.414020     -0.881841      -10.6136       10.6136       298.574       309.187    
  17  0.229117      -1.47352      -17.7349       17.7349       300.320       318.055    
  18  0.341764      -1.07363      -12.9219       12.9219       286.521       299.443    
  19  0.357052      -1.02987      -12.3952       12.3952       290.580       302.975    
  20  0.780779     -0.247463      -2.97839       2.97839       294.730       297.708    
  21  0.382234     -0.961721      -11.5750       11.5750       298.353       309.928    
  22  0.123899      -2.08829      -25.1340       25.1340       292.428       317.562    
  23  0.393312     -0.933152      -11.2311       11.2311       284.234       295.465    
  24  0.481741     -0.730349      -8.79026       8.79026       297.677       306.467    
  25  0.120001      -2.12026      -25.5188       25.5188       301.361       326.880    
  26  0.506023     -0.681173      -8.19839       8.19839       297.624       305.822    
  27  0.891157     -0.115235      -1.38694       1.38694       300.448       301.835    
  28  0.584674     -0.536701      -6.45957       6.45957       300.522       306.982    
  29  0.313196      -1.16093      -13.9725       13.9725       296.364       310.337    
  30  0.507340     -0.678574      -8.16711       8.16711       291.268       299.435    
  31  0.985030     -0.150835E-01 -0.181541      0.181541       300.312       300.494    
  32  0.186570      -1.67895      -20.2073       20.2073       297.817       318.024    
  33  0.992622     -0.740493E-02 -0.891235E-01  0.891235E-01   298.406       298.495    
  34  0.344152      -1.06667      -12.8381       12.8381       302.903       315.741    
  35  0.327214      -1.11714      -13.4456       13.4456       292.278       305.724    
  36  0.722008     -0.325719      -3.92026       3.92026       304.687       308.607    
  37  0.471441     -0.751960      -9.05037       9.05037       304.975       314.025    
  38  0.483594     -0.726510      -8.74405       8.74405       304.134       312.879    
  39  0.799410     -0.223881      -2.69456       2.69456       295.939       298.634    
  40  0.864070     -0.146101      -1.75843       1.75843       304.685       306.443    
  41  0.326419      -1.11957      -13.4749       13.4749       304.814       318.289    
  42  0.970166E-01  -2.33287      -28.0777       28.0777       290.025       318.103    
  43  0.822479     -0.195432      -2.35217       2.35217       314.938       317.290    
  44  0.719858     -0.328701      -3.95615       3.95615       312.379       316.336    
  45  0.359763      -1.02231      -12.3042       12.3042       307.590       319.895    
  46  0.879180     -0.128765      -1.54978       1.54978       313.947       315.497    
  47  0.152514      -1.88050      -22.6331       22.6331       305.352       327.985    
  48  0.379430     -0.969085      -11.6636       11.6636       319.650       331.313    
  49  0.444703     -0.810349      -9.75312       9.75312       281.731       291.485    
  50  0.240485      -1.42510      -17.1520       17.1520       319.349       336.501    
  51  0.682479     -0.382024      -4.59792       4.59792       321.570       326.168    
  52  0.989508     -0.105479E-01 -0.126951      0.126951       319.480       319.607    
  53  0.626329E-01  -2.77046      -33.3445       33.3445       320.415       353.760    
  54  0.217806      -1.52415      -18.3442       18.3442       320.470       338.814    
  55  0.297102      -1.21368      -14.6075       14.6075       323.294       337.902    
  56  0.447982     -0.803002      -9.66468       9.66468       318.584       328.248    
  57  0.343456      -1.06870      -12.8625       12.8625       311.913       324.776    
  58  0.737340     -0.304706      -3.66734       3.66734       306.186       309.853    
  59  0.863080     -0.147248      -1.77223       1.77223       317.183       318.956    
  60  0.463462     -0.769030      -9.25581       9.25581       323.311       332.567    
  61  0.120067      -2.11970      -25.5121       25.5121       326.285       351.797    
  62  0.758415     -0.276525      -3.32817       3.32817       308.583       311.911    
  63  0.356867      -1.03039      -12.4015       12.4015       311.734       324.135    
  64  0.811695     -0.208631      -2.51102       2.51102       268.366       270.877    
loop,thermsimp(1:2)       38   10.7647       16.2268    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    292        277.86          0.88          1.09         23.12          0.00          0.04         25.13
Just calling func    0   0         25.13


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    293        329.87          0.87          1.07         23.07          0.16          0.05         25.21
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    277.86
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    12.0357               316
loop is:       38
neval is:      292
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       38      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    12.0357               316
loop is:       39
neval is:      292


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      316
neval,tstepnext:      292     316

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.125069      -2.07889      -25.0209       25.0209       268.366       293.387    
   2  0.274837      -1.29158      -15.5450       15.5450       282.302       297.847    
   3  0.305931E-01  -3.48698      -41.9682       41.9682       281.252       323.220    
   4  0.929157     -0.734779E-01 -0.884358      0.884358       282.492       283.376    
   5  0.995956     -0.405208E-02 -0.487696E-01  0.487696E-01   278.061       278.110    
   6  0.904971     -0.998521E-01  -1.20179       1.20179       282.445       283.647    
   7  0.189758      -1.66200      -20.0034       20.0034       281.731       301.735    
   8  0.134931      -2.00299      -24.1074       24.1074       291.756       315.863    
   9  0.302412      -1.19596      -14.3943       14.3943       291.528       305.922    
  10  0.389155     -0.943777      -11.3590       11.3590       284.234       295.593    
  11  0.947428     -0.540040E-01 -0.649976      0.649976       281.266       281.916    
  12  0.338357      -1.08365      -13.0425       13.0425       275.413       288.456    
  13  0.937476     -0.645645E-01 -0.777079      0.777079       294.730       295.507    
  14  0.399493     -0.917560      -11.0435       11.0435       298.406       309.449    
  15  0.527586     -0.639444      -7.69615       7.69615       295.939       303.635    
  16  0.297740      -1.21153      -14.5817       14.5817       291.268       305.849    
  17  0.557978     -0.583436      -7.02206       7.02206       286.521       293.543    
  18  0.267521      -1.31856      -15.8697       15.8697       300.312       316.182    
  19  0.637637     -0.449986      -5.41589       5.41589       300.448       305.864    
  20  0.838569     -0.176059      -2.11899       2.11899       290.580       292.699    
  21  0.132199E-01  -4.32603      -52.0668       52.0668       287.238       339.305    
  22  0.745606     -0.293557      -3.53317       3.53317       297.530       301.064    
  23  0.334504      -1.09511      -13.1804       13.1804       292.278       305.459    
  24  0.118852      -2.12987      -25.6345       25.6345       297.624       323.258    
  25  0.319911      -1.13971      -13.7172       13.7172       304.685       318.402    
  26  0.638302E-01  -2.75153      -33.1166       33.1166       297.677       330.793    
  27  0.173204      -1.75329      -21.1020       21.1020       300.522       321.624    
  28  0.885640     -0.121444      -1.46167       1.46167       304.687       306.148    
  29  0.710758     -0.341423      -4.10926       4.10926       298.574       302.683    
  30  0.938919     -0.630265E-01 -0.758568      0.758568       306.186       306.944    
  31  0.217740      -1.52445      -18.3478       18.3478       298.353       316.701    
  32  0.130036      -2.03994      -24.5521       24.5521       296.364       320.916    
  33  0.331090      -1.10537      -13.3039       13.3039       293.215       306.519    
  34  0.453525E-01  -3.09329      -37.2299       37.2299       308.583       345.813    
  35  0.494600     -0.704006      -8.47320       8.47320       304.134       312.608    
  36  0.488771E-01  -3.01845      -36.3291       36.3291       295.168       331.497    
  37  0.262916E-01  -3.63850      -43.7919       43.7919       304.975       348.766    
  38  0.975293     -0.250177E-01 -0.301106      0.301106       282.567       282.868    
  39  0.521026     -0.651955      -7.84673       7.84673       313.947       321.794    
  40  0.210960      -1.55609      -18.7286       18.7286       302.903       321.632    
  41  0.475166E-02  -5.34926      -64.3821       64.3821       312.379       376.762    
  42  0.675859     -0.391771      -4.71523       4.71523       314.938       319.653    
  43  0.691418     -0.369011      -4.44130       4.44130       292.428       296.869    
  44  0.425152     -0.855309      -10.2942       10.2942       297.817       308.111    
  45  0.141313      -1.95678      -23.5512       23.5512       300.320       323.871    
  46  0.902170     -0.102952      -1.23910       1.23910       290.025       291.264    
  47  0.794321     -0.230268      -2.77144       2.77144       304.814       307.585    
  48  0.685387     -0.377772      -4.54675       4.54675       286.088       290.634    
  49  0.273223      -1.29747      -15.6159       15.6159       317.183       332.799    
  50  0.784111     -0.243205      -2.92714       2.92714       319.480       322.407    
  51  0.824524     -0.192949      -2.32228       2.32228       307.590       309.913    
  52  0.855082     -0.156558      -1.88429       1.88429       311.734       313.618    
  53  0.744692E-01  -2.59737      -31.2612       31.2612       311.913       343.174    
  54  0.294857E-01  -3.52385      -42.4120       42.4120       321.570       363.982    
  55  0.225962      -1.48739      -17.9017       17.9017       301.361       319.263    
  56  0.211073      -1.55555      -18.7221       18.7221       305.352       324.074    
  57  0.525673E-01  -2.94566      -35.4531       35.4531       318.584       354.037    
  58  0.855455     -0.156122      -1.87904       1.87904       319.650       321.529    
  59  0.169262E-01  -4.07890      -49.0923       49.0923       323.311       372.404    
  60  0.578360     -0.547559      -6.59025       6.59025       319.349       325.940    
  61  0.753083     -0.283580      -3.41309       3.41309       323.294       326.707    
  62  0.942983     -0.587068E-01 -0.706577      0.706577       320.470       321.177    
  63  0.164299      -1.80607      -21.7373       21.7373       326.285       348.022    
  64  0.964876     -0.357557E-01 -0.430345      0.430345       277.861       278.291    
loop,thermsimp(1:2)       39   25.0209       15.5450    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    294        301.60          0.88          1.10         23.05          0.04          0.05         25.11
Just calling func    0   0         25.11


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    295        351.09          0.88          1.09         23.10          0.00          0.04         25.11
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    301.60
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    12.0357               316
loop is:       39
neval is:      294
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       39      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    12.0357               316
loop is:       40
neval is:      294


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      316
neval,tstepnext:      294     316

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.465620     -0.764385      -9.19990       9.19990       278.061       287.261    
   2  0.310178      -1.17061      -14.0891       14.0891       277.861       291.950    
   3  0.883713     -0.123623      -1.48789       1.48789       281.266       282.754    
   4  0.641465     -0.444001      -5.34386       5.34386       282.567       287.911    
   5  0.458576E-01  -3.08222      -37.0966       37.0966       282.492       319.589    
   6  0.611421     -0.491970      -5.92120       5.92120       282.445       288.366    
   7  0.292603      -1.22894      -14.7911       14.7911       275.413       290.204    
   8  0.180818      -1.71026      -20.5842       20.5842       286.088       306.672    
   9  0.490648     -0.712028      -8.56976       8.56976       290.025       298.595    
  10  0.538601     -0.618781      -7.44746       7.44746       290.580       298.027    
  11  0.451209     -0.795824      -9.57829       9.57829       268.366       277.944    
  12  0.610260     -0.493870      -5.94407       5.94407       286.521       292.465    
  13  0.425113     -0.855401      -10.2953       10.2953       294.730       305.025    
  14  0.647858     -0.434084      -5.22450       5.22450       284.234       289.459    
  15  0.394937     -0.929029      -11.1815       11.1815       292.428       303.609    
  16  0.452279E-01  -3.09604      -37.2630       37.2630       282.302       319.565    
  17  0.954905     -0.461437E-01 -0.555371      0.555371       297.530       298.086    
  18  0.362548      -1.01460      -12.2114       12.2114       281.731       293.943    
  19  0.808078     -0.213097      -2.56477       2.56477       298.574       301.139    
  20  0.219348      -1.51709      -18.2593       18.2593       295.939       314.199    
  21  0.206981      -1.57513      -18.9577       18.9577       292.278       311.236    
  22  0.719933     -0.328597      -3.95490       3.95490       291.268       295.223    
  23  0.950238     -0.510432E-01 -0.614340      0.614340       300.448       301.063    
  24  0.845993     -0.167244      -2.01290       2.01290       291.528       293.541    
  25  0.157926      -1.84563      -22.2134       22.2134       304.687       326.900    
  26  0.430020     -0.843924      -10.1572       10.1572       293.215       303.372    
  27  0.624159     -0.471350      -5.67302       5.67302       306.186       311.859    
  28  0.355386      -1.03455      -12.4515       12.4515       304.814       317.265    
  29  0.297353      -1.21284      -14.5973       14.5973       297.817       312.414    
  30  0.185476      -1.68483      -20.2781       20.2781       298.406       318.684    
  31  0.406569     -0.900002      -10.8321       10.8321       307.590       318.422    
  32  0.147052      -1.91697      -23.0721       23.0721       304.134       327.207    
  33  0.205955      -1.58010      -19.0175       19.0175       311.734       330.751    
  34  0.383503     -0.958409      -11.5351       11.5351       291.756       303.291    
  35  0.514677E-01  -2.96680      -35.7075       35.7075       300.312       336.020    
  36  0.499194     -0.694760      -8.36191       8.36191       298.353       306.715    
  37  0.103172E-01  -4.57394      -55.0506       55.0506       304.685       359.736    
  38  0.470163     -0.754676      -9.08305       9.08305       301.361       310.444    
  39  0.983694     -0.164404E-01 -0.197871      0.197871       314.938       315.136    
  40  0.880425     -0.127351      -1.53275       1.53275       296.364       297.897    
  41  0.969759     -0.307072E-01 -0.369582      0.369582       320.470       320.840    
  42  0.761826E-01  -2.57462      -30.9874       30.9874       319.650       350.637    
  43  0.124427      -2.08404      -25.0828       25.0828       300.522       325.605    
  44  0.997702     -0.230032E-02 -0.276860E-01  0.276860E-01   302.903       302.931    
  45  0.213939      -1.54206      -18.5598       18.5598       313.947       332.507    
  46  0.471369     -0.752113      -9.05220       9.05220       319.480       328.532    
  47  0.421561E-01  -3.16638      -38.1095       38.1095       281.252       319.361    
  48  0.693092     -0.366592      -4.41219       4.41219       297.624       302.036    
  49  0.375157     -0.980409      -11.7999       11.7999       300.320       312.120    
  50  0.285659      -1.25296      -15.0802       15.0802       305.352       320.432    
  51  0.338951      -1.08190      -13.0214       13.0214       319.349       332.371    
  52  0.930127E-01  -2.37502      -28.5850       28.5850       323.294       351.879    
  53  0.840878     -0.173309      -2.08589       2.08589       297.677       299.763    
  54  0.384591     -0.955575      -11.5010       11.5010       295.168       306.669    
  55  0.212856      -1.54714      -18.6209       18.6209       317.183       335.804    
  56  0.878356     -0.129704      -1.56108       1.56108       287.238       288.799    
  57  0.623236E-01  -2.77542      -33.4040       33.4040       311.913       345.317    
  58  0.374221E-02  -5.58808      -67.2564       67.2564       308.583       375.839    
  59  0.851985     -0.160186      -1.92795       1.92795       326.285       328.213    
  60  0.779613     -0.248958      -2.99638       2.99638       304.975       307.971    
  61  0.991658     -0.837700E-02 -0.100823      0.100823       318.584       318.685    
  62  0.425290     -0.854985      -10.2903       10.2903       321.570       331.861    
  63  0.613403     -0.488733      -5.88225       5.88225       323.311       329.194    
  64  0.487347E-01  -3.02136      -36.3642       36.3642       301.595       337.960    
loop,thermsimp(1:2)       40   9.19990       14.0891    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    296        283.40          0.88          1.09         23.08          0.06          0.05         25.16
Just calling func    0   0         25.15


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    297        304.54          0.88          1.08         23.12          0.01          0.05         25.12
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    283.40
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    12.0357               316
loop is:       40
neval is:      296
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       40      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    12.0357               316
loop is:       41
neval is:      296


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      316
neval,tstepnext:      296     316

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.231075      -1.46501      -17.6324       17.6324       268.366       285.998    
   2  0.984723     -0.153953E-01 -0.185294      0.185294       281.266       281.451    
   3  0.689569     -0.371688      -4.47352       4.47352       278.061       282.535    
   4  0.539532     -0.617054      -7.42667       7.42667       282.567       289.994    
   5  0.103859      -2.26472      -27.2575       27.2575       282.445       309.702    
   6  0.403261     -0.908171      -10.9305       10.9305       287.238       298.169    
   7  0.545138     -0.606716      -7.30225       7.30225       284.234       291.536    
   8  0.211198      -1.55496      -18.7150       18.7150       275.413       294.128    
   9  0.533123     -0.629004      -7.57050       7.57050       277.861       285.431    
  10  0.891214     -0.115171      -1.38616       1.38616       286.521       287.907    
  11  0.604806     -0.502847      -6.05211       6.05211       291.528       297.580    
  12  0.176166      -1.73633      -20.8979       20.8979       281.731       302.629    
  13  0.733693     -0.309664      -3.72702       3.72702       291.268       294.995    
  14  0.248504      -1.39230      -16.7573       16.7573       296.364       313.122    
  15  0.183808      -1.69387      -20.3868       20.3868       290.580       310.967    
  16  0.308674E-02  -5.78064      -69.5740       69.5740       297.530       367.104    
  17  0.651025     -0.429207      -5.16580       5.16580       290.025       295.191    
  18  0.864353     -0.145775      -1.75450       1.75450       297.677       299.431    
  19  0.547352     -0.602664      -7.25347       7.25347       300.448       307.702    
  20  0.631248     -0.460057      -5.53711       5.53711       298.574       304.111    
  21  0.344368E-01  -3.36863      -40.5438       40.5438       297.624       338.168    
  22  0.876828     -0.131444      -1.58202       1.58202       302.903       304.485    
  23  0.884538     -0.122690      -1.47666       1.47666       291.756       293.232    
  24  0.926808     -0.760084E-01 -0.914814      0.914814       293.215       294.130    
  25  0.823462     -0.194237      -2.33778       2.33778       292.428       294.765    
  26  0.852580     -0.159489      -1.91956       1.91956       294.730       296.650    
  27  0.577707     -0.548689      -6.60385       6.60385       295.168       301.771    
  28  0.510093     -0.673163      -8.10198       8.10198       286.088       294.190    
  29  0.890288     -0.116210      -1.39867       1.39867       298.353       299.751    
  30  0.304875      -1.18785      -14.2966       14.2966       304.975       319.271    
  31  0.152164      -1.88279      -22.6607       22.6607       301.361       324.022    
  32  0.718687     -0.330329      -3.97574       3.97574       292.278       296.254    
  33  0.488128     -0.717177      -8.63173       8.63173       306.186       314.817    
  34  0.373052     -0.986038      -11.8677       11.8677       300.320       312.188    
  35  0.247351      -1.39695      -16.8132       16.8132       297.817       314.630    
  36  0.532108     -0.630909      -7.59343       7.59343       295.939       303.533    
  37  0.828879E-02  -4.79285      -57.6853       57.6853       314.938       372.623    
  38  0.168277      -1.78214      -21.4493       21.4493       304.814       326.263    
  39  0.253216      -1.37351      -16.5312       16.5312       307.590       324.122    
  40  0.458588     -0.779602      -9.38305       9.38305       298.406       307.789    
  41  0.725692     -0.320630      -3.85900       3.85900       318.584       322.443    
  42  0.283543      -1.26039      -15.1697       15.1697       281.252       296.421    
  43  0.798055     -0.225578      -2.71499       2.71499       282.302       285.017    
  44  0.805371     -0.216453      -2.60516       2.60516       282.492       285.097    
  45  0.580747     -0.543441      -6.54069       6.54069       305.352       311.893    
  46  0.581119     -0.542799      -6.53297       6.53297       320.470       327.003    
  47  0.305196      -1.18680      -14.2840       14.2840       300.522       314.806    
  48  0.905702     -0.990454E-01  -1.19208       1.19208       304.687       305.879    
  49  0.265633E-01  -3.62822      -43.6682       43.6682       304.134       347.803    
  50  0.114529E-01  -4.46951      -53.7937       53.7937       326.285       380.078    
  51  0.990634     -0.941033E-02 -0.113260      0.113260       319.480       319.593    
  52  0.609564     -0.495011      -5.95780       5.95780       323.311       329.269    
  53  0.380905     -0.965204      -11.6169       11.6169       311.734       323.351    
  54  0.902244     -0.102870      -1.23812       1.23812       321.570       322.809    
  55  0.841859     -0.172142      -2.07185       2.07185       319.349       321.421    
  56  0.954561     -0.465036E-01 -0.559703      0.559703       313.947       314.507    
  57  0.637314     -0.450492      -5.42199       5.42199       317.183       322.605    
  58  0.224695      -1.49301      -17.9694       17.9694       300.312       318.282    
  59  0.537548     -0.620738      -7.47101       7.47101       301.595       309.066    
  60  0.271295      -1.30455      -15.7012       15.7012       311.913       327.614    
  61  0.524725E-02  -5.25005      -63.1880       63.1880       319.650       382.838    
  62  0.194770      -1.63594      -19.6896       19.6896       323.294       342.984    
  63  0.833225E-01  -2.48504      -29.9091       29.9091       304.685       334.594    
  64  0.195984      -1.62972      -19.6148       19.6148       283.403       303.018    
loop,thermsimp(1:2)       41   17.6324      0.185294    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    298        277.28          0.88          1.09         23.13          0.02          0.05         25.16
Just calling func    0   0         25.16


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    299        339.47          0.88          1.07         23.09          0.13          0.04         25.20
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    277.28
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    12.0357               316
loop is:       41
neval is:      298
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       41      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    12.0357               316
loop is:       42
neval is:      298


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      316
neval,tstepnext:      298     316

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.442958E-01  -3.11686      -37.5136       37.5136       281.266       318.780    
   2  0.196215      -1.62854      -19.6006       19.6006       278.061       297.662    
   3  0.501152     -0.690846      -8.31482       8.31482       282.302       290.617    
   4  0.288339      -1.24362      -14.9678       14.9678       282.492       297.460    
   5  0.773132     -0.257306      -3.09686       3.09686       277.861       280.957    
   6  0.417683     -0.873033      -10.5076       10.5076       268.366       278.873    
   7  0.229479      -1.47195      -17.7159       17.7159       286.521       304.237    
   8  0.964123     -0.365367E-01 -0.439744      0.439744       282.567       283.007    
   9  0.263782      -1.33263      -16.0392       16.0392       284.234       300.273    
  10  0.102960      -2.27342      -27.3621       27.3621       291.756       319.118    
  11  0.828790     -0.187788      -2.26016       2.26016       275.413       277.673    
  12  0.738697     -0.302868      -3.64522       3.64522       293.215       296.860    
  13  0.458595     -0.779589      -9.38289       9.38289       286.088       295.471    
  14  0.905176     -0.996260E-01  -1.19907       1.19907       292.428       293.627    
  15  0.147067      -1.91687      -23.0708       23.0708       291.268       314.339    
  16  0.142365      -1.94936      -23.4619       23.4619       290.025       313.487    
  17  0.483147     -0.727435      -8.75519       8.75519       292.278       301.033    
  18  0.640417     -0.445636      -5.36354       5.36354       281.252       286.615    
  19  0.719349     -0.329408      -3.96466       3.96466       294.730       298.695    
  20  0.714234     -0.336545      -4.05055       4.05055       291.528       295.578    
  21  0.825507     -0.191757      -2.30793       2.30793       287.238       289.546    
  22  0.155188      -1.86312      -22.4239       22.4239       297.677       320.101    
  23  0.248874      -1.39081      -16.7394       16.7394       298.353       315.092    
  24  0.107953      -2.22606      -26.7922       26.7922       295.168       321.960    
  25  0.349169      -1.05220      -12.6639       12.6639       281.731       294.395    
  26  0.967311     -0.332356E-01 -0.400013      0.400013       283.403       283.803    
  27  0.519506     -0.654877      -7.88190       7.88190       295.939       303.821    
  28  0.462662     -0.770758      -9.27661       9.27661       298.574       307.850    
  29  0.811438     -0.208948      -2.51483       2.51483       302.903       305.418    
  30  0.394710E-01  -3.23219      -38.9016       38.9016       304.687       343.588    
  31  0.482930     -0.727884      -8.76059       8.76059       300.448       309.209    
  32  0.520883     -0.652231      -7.85005       7.85005       298.406       306.256    
  33  0.980978E-01  -2.32179      -27.9444       27.9444       301.595       329.540    
  34  0.626549     -0.467529      -5.62703       5.62703       282.445       288.072    
  35  0.618402     -0.480616      -5.78455       5.78455       290.580       296.364    
  36  0.681438     -0.383550      -4.61629       4.61629       305.352       309.968    
  37  0.816820     -0.202336      -2.43525       2.43525       300.320       302.755    
  38  0.578487     -0.547340      -6.58761       6.58761       296.364       302.952    
  39  0.349734      -1.05058      -12.6445       12.6445       313.947       326.591    
  40  0.945672     -0.558596E-01 -0.672309      0.672309       297.817       298.489    
  41  0.767680     -0.264382      -3.18202       3.18202       300.522       303.704    
  42  0.122064      -2.10321      -25.3136       25.3136       306.186       331.499    
  43  0.211623      -1.55295      -18.6908       18.6908       300.312       319.003    
  44  0.969992E-01  -2.33305      -28.0799       28.0799       304.975       333.054    
  45  0.877482     -0.130699      -1.57306       1.57306       319.480       321.053    
  46  0.448991     -0.800752      -9.63760       9.63760       319.349       328.987    
  47  0.833113     -0.182586      -2.19755       2.19755       318.584       320.781    
  48  0.691765     -0.368508      -4.43525       4.43525       317.183       321.619    
  49  0.310664      -1.16904      -14.0703       14.0703       321.570       335.641    
  50  0.422283     -0.862080      -10.3757       10.3757       311.734       322.110    
  51  0.382184E-01  -3.26444      -39.2898       39.2898       301.361       340.651    
  52  0.679614E-01  -2.68882      -32.3618       32.3618       307.590       339.952    
  53  0.580404     -0.544031      -6.54779       6.54779       304.814       311.362    
  54  0.887981     -0.118805      -1.42990       1.42990       320.470       321.900    
  55  0.540749     -0.614799      -7.39953       7.39953       311.913       319.313    
  56  0.749712     -0.288066      -3.46707       3.46707       323.311       326.778    
  57  0.428385     -0.847733      -10.2031       10.2031       304.685       314.888    
  58  0.271790      -1.30272      -15.6792       15.6792       297.624       313.303    
  59  0.317865      -1.14613      -13.7944       13.7944       323.294       337.089    
  60  0.855566     -0.155992      -1.87747       1.87747       304.134       306.012    
  61  0.153120      -1.87653      -22.5854       22.5854       297.530       320.116    
  62  0.507684     -0.677896      -8.15895       8.15895       314.938       323.097    
  63  0.270723      -1.30666      -15.7265       15.7265       326.285       342.011    
  64  0.721736     -0.326096      -3.92479       3.92479       277.280       281.205    
loop,thermsimp(1:2)       42   37.5136       19.6006    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    300        317.72          0.88          1.09         23.07          0.06          0.04         25.14
Just calling func    0   0         25.14


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    317.72
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    12.0357               316
loop is:       42
neval is:      299
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       42      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    12.0357               316
loop is:       43
neval is:      299


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      316
neval,tstepnext:      299     316

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.298594      -1.20867      -14.5472       14.5472       275.413       289.960    
   2  0.383173     -0.959268      -11.5455       11.5455       268.366       279.911    
   3  0.386205     -0.951387      -11.4506       11.4506       277.861       289.311    
   4  0.362178      -1.01562      -12.2237       12.2237       277.280       289.504    
   5  0.394462     -0.930233      -11.1960       11.1960       282.567       293.763    
   6  0.883072     -0.124349      -1.49662       1.49662       283.403       284.900    
   7  0.571477     -0.559531      -6.73434       6.73434       281.252       287.986    
   8  0.944036     -0.575912E-01 -0.693150      0.693150       282.445       283.138    
   9  0.326573      -1.11910      -13.4692       13.4692       287.238       300.707    
  10  0.467297     -0.760791      -9.15664       9.15664       282.302       291.459    
  11  0.828365     -0.188301      -2.26633       2.26633       292.428       294.694    
  12  0.826991     -0.189962      -2.28632       2.28632       281.731       284.018    
  13  0.675447E-01  -2.69497      -32.4358       32.4358       286.088       318.524    
  14  0.924113     -0.789214E-01 -0.949873      0.949873       291.528       292.478    
  15  0.810131     -0.210560      -2.53423       2.53423       290.580       293.114    
  16  0.410286     -0.890900      -10.7226       10.7226       293.215       303.937    
  17  0.334977      -1.09369      -13.1634       13.1634       282.492       295.655    
  18  0.119017      -2.12849      -25.6178       25.6178       278.061       303.679    
  19  0.447328     -0.804463      -9.68228       9.68228       297.817       307.499    
  20  0.324388E-02  -5.73098      -68.9764       68.9764       294.730       363.706    
  21  0.158272      -1.84344      -22.1871       22.1871       284.234       306.421    
  22  0.241219      -1.42205      -17.1154       17.1154       292.278       309.394    
  23  0.259790      -1.34788      -16.2227       16.2227       300.320       316.543    
  24  0.521973     -0.650139      -7.82487       7.82487       296.364       304.189    
  25  0.336335      -1.08965      -13.1147       13.1147       300.522       313.637    
  26  0.642248     -0.442780      -5.32917       5.32917       295.939       301.268    
  27  0.984615     -0.155047E-01 -0.186610      0.186610       286.521       286.708    
  28  0.373782     -0.984082      -11.8441       11.8441       302.903       314.747    
  29  0.932479     -0.699087E-01 -0.841399      0.841399       304.134       304.976    
  30  0.711360     -0.340577      -4.09908       4.09908       298.406       302.505    
  31  0.315363      -1.15403      -13.8896       13.8896       298.574       312.463    
  32  0.528583     -0.637556      -7.67343       7.67343       300.448       308.122    
  33  0.622355E-01  -2.77683      -33.4211       33.4211       305.352       338.773    
  34  0.144849      -1.93206      -23.2537       23.2537       304.814       328.068    
  35  0.868928     -0.140495      -1.69095       1.69095       297.624       299.315    
  36  0.243398      -1.41306      -17.0071       17.0071       290.025       307.032    
  37  0.936928     -0.651491E-01 -0.784115      0.784115       291.268       292.052    
  38  0.979804E-01  -2.32299      -27.9588       27.9588       304.685       332.644    
  39  0.805773     -0.215953      -2.59914       2.59914       298.353       300.952    
  40  0.210751      -1.55708      -18.7405       18.7405       281.266       300.007    
  41  0.497104     -0.698956      -8.41242       8.41242       300.312       308.725    
  42  0.532106     -0.630913      -7.59348       7.59348       291.756       299.349    
  43  0.898420     -0.107117      -1.28923       1.28923       311.913       313.202    
  44  0.579370     -0.545814      -6.56925       6.56925       297.677       304.246    
  45  0.191213      -1.65437      -19.9114       19.9114       297.530       317.442    
  46  0.491633     -0.710023      -8.54562       8.54562       318.584       327.129    
  47  0.989123     -0.109370E-01 -0.131634      0.131634       319.480       319.612    
  48  0.576855     -0.550164      -6.62160       6.62160       317.183       323.805    
  49  0.133368      -2.01464      -24.2476       24.2476       320.470       344.718    
  50  0.708426     -0.344710      -4.14882       4.14882       295.168       299.316    
  51  0.183469      -1.69571      -20.4091       20.4091       311.734       332.143    
  52  0.951201     -0.500300E-01 -0.602146      0.602146       314.938       315.540    
  53  0.380646E-01  -3.26847      -39.3383       39.3383       313.947       353.285    
  54  0.575108     -0.553198      -6.65812       6.65812       323.311       329.969    
  55  0.136357E-01  -4.29506      -51.6941       51.6941       319.349       371.043    
  56  0.665821E-01  -2.70932      -32.6085       32.6085       301.595       334.204    
  57  0.885471     -0.121635      -1.46396       1.46396       306.186       307.650    
  58  0.213600E-01  -3.84624      -46.2921       46.2921       304.975       351.267    
  59  0.740349     -0.300634      -3.61834       3.61834       321.570       325.189    
  60  0.290679      -1.23553      -14.8705       14.8705       323.294       338.165    
  61  0.895680     -0.110173      -1.32600       1.32600       307.590       308.916    
  62  0.956670     -0.442971E-01 -0.533146      0.533146       301.361       301.894    
  63  0.196231      -1.62846      -19.5997       19.5997       326.285       345.884    
  64  0.279139      -1.27605      -15.3581       15.3581       317.716       333.075    
loop,thermsimp(1:2)       43   14.5472       11.5455    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    301        277.60          0.88          1.09         23.12          0.00          0.04         25.12
Just calling func    0   0         25.13


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    302        361.67          0.86          1.08         23.07          0.15          0.04         25.20
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  300    277.60        4.592     -1.257      4.451     -100.0     0.3134    
                      -1.293      2.337     -100.0      2.981     0.4432    
                       1.321    -0.2329      2.400      0.000      0.000    
                     -0.3790      0.000      0.000      0.000     -1.221    

                      -2.500     0.1085E+05 0.1648E+05 -1163.     -3530.    
                      -2.000     -8.007     -2.683     -2.945    -0.4676    
                      -13.78     -3.072      1359.      0.000      3354.    

                       4764.      3323.      5073.      5329.      2500.    
                       4298.     0.9133E-01-0.2737E-01  0.000    -0.3506E-01
                      0.1524    -0.2900E-01 0.2007    -0.5263E-02-0.1212    

                     -0.6777    -0.6332      0.000     0.3027     0.1593    
                      0.8541E-01 0.1341     0.2450     0.1865     0.7425E-01
                      0.2600E-01-0.3904E-01-0.2813    -0.3654      0.000    

                      -2.013     -4.429      5.643     -1.184      0.000    
                       0.000      9.028      9.039     -5065.     -4.000    
                     -0.1759    -0.5746      8.745      8.304    -0.1455E+05

                      -4.000     0.6599      1.853      9.363      9.280    
                      -6175.     -4.000     0.4829     0.8166      9.429    
                       9.074     -1827.     -2.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    277.60
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    12.0357               316
loop is:       43
neval is:      301
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       43      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    12.0357               316
loop is:       44
neval is:      301


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      316
neval,tstepnext:      301     316

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.287044      -1.24812      -15.0220       15.0220       268.366       283.388    
   2  0.260243      -1.34614      -16.2017       16.2017       282.445       298.647    
   3  0.646915     -0.435540      -5.24202       5.24202       281.731       286.973    
   4  0.572447     -0.557835      -6.71393       6.71393       283.403       290.117    
   5  0.105907      -2.24520      -27.0225       27.0225       286.521       313.544    
   6  0.693038     -0.366671      -4.41314       4.41314       281.252       285.665    
   7  0.329408      -1.11046      -13.3651       13.3651       277.861       291.226    
   8  0.187221      -1.67546      -20.1654       20.1654       277.280       297.445    
   9  0.545731     -0.605630      -7.28917       7.28917       275.413       282.702    
  10  0.752820     -0.283930      -3.41729       3.41729       282.302       285.719    
  11  0.153542      -1.87378      -22.5522       22.5522       291.268       313.820    
  12  0.400659     -0.914645      -11.0084       11.0084       291.528       302.536    
  13  0.306182      -1.18357      -14.2451       14.2451       290.580       304.825    
  14  0.270957E-01  -3.60838      -43.4294       43.4294       282.567       325.997    
  15  0.776765     -0.252618      -3.04043       3.04043       292.428       295.468    
  16  0.711945     -0.339755      -4.08919       4.08919       282.492       286.581    
  17  0.217190      -1.52698      -18.3783       18.3783       297.624       316.002    
  18  0.285226      -1.25447      -15.0985       15.0985       295.168       310.266    
  19  0.348904      -1.05296      -12.6731       12.6731       291.756       304.429    
  20  0.686414     -0.376275      -4.52873       4.52873       281.266       285.795    
  21  0.212825      -1.54729      -18.6227       18.6227       287.238       305.861    
  22  0.501697     -0.689760      -8.30173       8.30173       298.353       306.654    
  23  0.363771      -1.01123      -12.1709       12.1709       295.939       308.110    
  24  0.789273     -0.236642      -2.84816       2.84816       301.361       304.209    
  25  0.232884      -1.45721      -17.5386       17.5386       298.406       315.944    
  26  0.754896     -0.281175      -3.38413       3.38413       278.061       281.445    
  27  0.639358     -0.447290      -5.38345       5.38345       293.215       298.598    
  28  0.532505     -0.630163      -7.58445       7.58445       296.364       303.949    
  29  0.759813     -0.274683      -3.30600       3.30600       297.677       300.983    
  30  0.768360     -0.263497      -3.17137       3.17137       304.134       307.306    
  31  0.245116      -1.40602      -16.9225       16.9225       284.234       301.157    
  32  0.672517     -0.396727      -4.77489       4.77489       290.025       294.800    
  33  0.910675     -0.935691E-01  -1.12617       1.12617       297.817       298.943    
  34  0.441618     -0.817310      -9.83690       9.83690       306.186       316.023    
  35  0.212980      -1.54656      -18.6139       18.6139       300.448       319.062    
  36  0.471690     -0.751434      -9.04403       9.04403       300.312       309.356    
  37  0.968545     -0.319606E-01 -0.384668      0.384668       307.590       307.975    
  38  0.711169     -0.340845      -4.10230       4.10230       292.278       296.380    
  39  0.222170      -1.50431      -18.1055       18.1055       298.574       316.679    
  40  0.896100     -0.109703      -1.32036       1.32036       311.913       313.233    
  41  0.898054     -0.107525      -1.29414       1.29414       300.522       301.816    
  42  0.981364     -0.188122E-01 -0.226418      0.226418       302.903       303.130    
  43  0.238126      -1.43496      -17.2707       17.2707       314.938       332.208    
  44  0.884882     -0.122301      -1.47198       1.47198       300.320       301.792    
  45  0.206421      -1.57784      -18.9904       18.9904       297.530       316.521    
  46  0.421939     -0.862894      -10.3855       10.3855       286.088       296.473    
  47  0.334170E-01  -3.39869      -40.9056       40.9056       319.480       360.386    
  48  0.940374     -0.614772E-01 -0.739920      0.739920       317.183       317.923    
  49  0.119361      -2.12561      -25.5832       25.5832       321.570       347.154    
  50  0.493355     -0.706527      -8.50355       8.50355       318.584       327.087    
  51  0.239498      -1.42921      -17.2016       17.2016       304.814       322.015    
  52  0.779094     -0.249623      -3.00439       3.00439       323.311       326.316    
  53  0.993851     -0.616759E-02 -0.742313E-01  0.742313E-01   311.734       311.808    
  54  0.680666     -0.384683      -4.62993       4.62993       304.685       309.315    
  55  0.861145     -0.149492      -1.79924       1.79924       317.716       319.516    
  56  0.679030     -0.387090      -4.65889       4.65889       301.595       306.254    
  57  0.568731E-01  -2.86693      -34.5055       34.5055       323.294       357.800    
  58  0.342751      -1.07075      -12.8872       12.8872       305.352       318.239    
  59  0.929483     -0.731270E-01 -0.880134      0.880134       320.470       321.350    
  60  0.287616      -1.24613      -14.9980       14.9980       326.285       341.283    
  61  0.622582     -0.473881      -5.70348       5.70348       304.975       310.678    
  62  0.449193     -0.800303      -9.63221       9.63221       313.947       323.579    
  63  0.746100     -0.292896      -3.52521       3.52521       294.730       298.255    
  64  0.783595     -0.243863      -2.93506       2.93506       277.598       280.533    
loop,thermsimp(1:2)       44   15.0220       16.2017    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    303        294.89          0.88          1.09         23.14          0.32          0.04         25.48
Just calling func    0   0         25.48


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    294.89
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    12.0357               316
loop is:       44
neval is:      302
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       44      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    12.0357               316
loop is:       45
neval is:      302


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      316
neval,tstepnext:      302     316

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.204302      -1.58816      -19.1146       19.1146       277.598       296.712    
   2  0.455846E-01  -3.08818      -37.1685       37.1685       278.061       315.230    
   3  0.655807     -0.421889      -5.07772       5.07772       275.413       280.491    
   4  0.902989     -0.102045      -1.22818       1.22818       268.366       269.594    
   5  0.826012     -0.191146      -2.30057       2.30057       281.252       283.552    
   6  0.160871      -1.82715      -21.9911       21.9911       282.302       304.293    
   7  0.516410     -0.660854      -7.95384       7.95384       281.266       289.220    
   8  0.506939     -0.679364      -8.17662       8.17662       282.492       290.669    
   9  0.728359     -0.316962      -3.81485       3.81485       281.731       285.546    
  10  0.453162     -0.791506      -9.52632       9.52632       283.403       292.929    
  11  0.837994     -0.176745      -2.12724       2.12724       277.861       279.988    
  12  0.118024      -2.13686      -25.7186       25.7186       290.025       315.743    
  13  0.274030      -1.29452      -15.5804       15.5804       292.428       308.008    
  14  0.402227     -0.910738      -10.9614       10.9614       292.278       303.240    
  15  0.444245     -0.811380      -9.76552       9.76552       286.088       295.853    
  16  0.594880     -0.519396      -6.25129       6.25129       277.280       283.531    
  17  0.548806     -0.600010      -7.22154       7.22154       294.730       301.952    
  18  0.222827      -1.50136      -18.0699       18.0699       293.215       311.285    
  19  0.152541      -1.88032      -22.6310       22.6310       282.445       305.076    
  20  0.816533     -0.202688      -2.43949       2.43949       297.817       300.256    
  21  0.525417     -0.643564      -7.74574       7.74574       297.677       305.423    
  22  0.661450     -0.413320      -4.97460       4.97460       284.234       289.209    
  23  0.437535     -0.826598      -9.94868       9.94868       300.320       310.269    
  24  0.464442     -0.766918      -9.23039       9.23039       300.522       309.752    
  25  0.683975     -0.379834      -4.57156       4.57156       291.528       296.099    
  26  0.407919     -0.896688      -10.7923       10.7923       302.903       313.696    
  27  0.934669     -0.675632E-01 -0.813170      0.813170       296.364       297.178    
  28  0.866891     -0.142842      -1.71920       1.71920       301.361       303.080    
  29  0.145435E-01  -4.23061      -50.9184       50.9184       291.756       342.674    
  30  0.514599     -0.664368      -7.99613       7.99613       290.580       298.576    
  31  0.370591     -0.992656      -11.9473       11.9473       287.238       299.185    
  32  0.251726      -1.37941      -16.6022       16.6022       301.595       318.198    
  33  0.959470     -0.413742E-01 -0.497967      0.497967       298.353       298.851    
  34  0.344885E-01  -3.36713      -40.5257       40.5257       304.134       344.660    
  35  0.348690      -1.05357      -12.6805       12.6805       307.590       320.271    
  36  0.610898     -0.492826      -5.93150       5.93150       295.939       301.871    
  37  0.440567     -0.819693      -9.86558       9.86558       304.685       314.551    
  38  0.340409      -1.07761      -12.9698       12.9698       300.312       313.282    
  39  0.345015E-01  -3.36675      -40.5212       40.5212       295.168       335.689    
  40  0.667224     -0.404630      -4.87000       4.87000       304.975       309.845    
  41  0.138336      -1.97807      -23.8075       23.8075       311.734       335.541    
  42  0.412023     -0.886676      -10.6718       10.6718       311.913       322.585    
  43  0.578410     -0.547473      -6.58921       6.58921       286.521       293.110    
  44  0.972817     -0.275594E-01 -0.331697      0.331697       291.268       291.599    
  45  0.152341      -1.88163      -22.6468       22.6468       298.406       321.053    
  46  0.764264     -0.268842      -3.23570       3.23570       297.624       300.859    
  47  0.898082E-01  -2.41008      -29.0070       29.0070       306.186       335.193    
  48  0.205097      -1.58427      -19.0678       19.0678       297.530       316.598    
  49  0.249611E-01  -3.69044      -44.4170       44.4170       298.574       342.991    
  50  0.999211     -0.789000E-03 -0.949616E-02  0.949616E-02   317.183       317.193    
  51  0.622898E-01  -2.77596      -33.4106       33.4106       305.352       338.763    
  52  0.588779     -0.529705      -6.37537       6.37537       300.448       306.824    
  53  0.395562     -0.927447      -11.1625       11.1625       317.716       328.879    
  54  0.213371      -1.54472      -18.5918       18.5918       320.470       339.062    
  55  0.801544     -0.221215      -2.66248       2.66248       304.814       307.476    
  56  0.392036     -0.936401      -11.2702       11.2702       313.947       325.217    
  57  0.504835     -0.683524      -8.22669       8.22669       282.567       290.794    
  58  0.389514     -0.942856      -11.3479       11.3479       323.311       334.659    
  59  0.694006     -0.365275      -4.39634       4.39634       318.584       322.980    
  60  0.220113      -1.51361      -18.2174       18.2174       314.938       333.155    
  61  0.548334     -0.600870      -7.23189       7.23189       326.285       333.517    
  62  0.490082     -0.713183      -8.58366       8.58366       321.570       330.154    
  63  0.315187      -1.15459      -13.8963       13.8963       323.294       337.191    
  64  0.454028     -0.789596      -9.50334       9.50334       294.889       304.392    
loop,thermsimp(1:2)       45   19.1146       37.1685    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    304        287.34          0.88          1.09         23.12          0.02          0.04         25.15
Just calling func    0   0         25.15


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    287.34
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    12.0357               316
loop is:       45
neval is:      303
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       45      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    12.0357               316
loop is:       46
neval is:      303


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      316
neval,tstepnext:      303     316

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.794521     -0.230016      -2.76841       2.76841       268.366       271.134    
   2  0.338444      -1.08340      -13.0394       13.0394       277.861       290.900    
   3  0.563800     -0.573055      -6.89712       6.89712       275.413       282.310    
   4  0.295284      -1.21982      -14.6813       14.6813       277.280       291.961    
   5  0.506481     -0.680269      -8.18751       8.18751       281.252       289.439    
   6  0.345803      -1.06189      -12.7805       12.7805       281.731       294.512    
   7  0.741641     -0.298890      -3.59734       3.59734       284.234       287.831    
   8  0.182310      -1.70204      -20.4853       20.4853       281.266       301.751    
   9  0.315187      -1.15459      -13.8963       13.8963       282.492       296.388    
  10  0.598844     -0.512755      -6.17136       6.17136       282.567       288.739    
  11  0.659119     -0.416852      -5.01710       5.01710       291.268       296.285    
  12  0.247481      -1.39642      -16.8069       16.8069       283.403       300.210    
  13  0.255298      -1.36532      -16.4326       16.4326       286.521       302.954    
  14  0.876488     -0.131833      -1.58670       1.58670       286.088       287.674    
  15  0.358010      -1.02719      -12.3630       12.3630       291.528       303.891    
  16  0.317480      -1.14734      -13.8091       13.8091       277.598       291.407    
  17  0.153422      -1.87456      -22.5617       22.5617       296.364       318.926    
  18  0.296162      -1.21685      -14.6456       14.6456       290.580       305.225    
  19  0.629760     -0.462417      -5.56551       5.56551       298.353       303.918    
  20  0.458345E-01  -3.08272      -37.1027       37.1027       287.238       324.341    
  21  0.209534      -1.56287      -18.8102       18.8102       297.817       316.627    
  22  0.490210E-01  -3.01551      -36.2937       36.2937       297.624       333.917    
  23  0.144817      -1.93229      -23.2564       23.2564       295.939       319.196    
  24  0.764061     -0.269107      -3.23890       3.23890       294.730       297.969    
  25  0.158664      -1.84097      -22.1573       22.1573       301.361       323.519    
  26  0.242818      -1.41544      -17.0358       17.0358       292.278       309.314    
  27  0.779950     -0.248525      -2.99117       2.99117       282.302       285.293    
  28  0.763580     -0.269737      -3.24647       3.24647       294.889       298.135    
  29  0.817639     -0.201335      -2.42320       2.42320       282.445       284.868    
  30  0.656802     -0.420373      -5.05949       5.05949       297.677       302.736    
  31  0.202192      -1.59854      -19.2395       19.2395       300.448       319.688    
  32  0.469647     -0.755773      -9.09626       9.09626       304.814       313.910    
  33  0.107456      -2.23067      -26.8477       26.8477       292.428       319.275    
  34  0.709118     -0.343734      -4.13708       4.13708       300.522       304.659    
  35  0.988480     -0.115868E-01 -0.139456      0.139456       304.975       305.114    
  36  0.645173     -0.438236      -5.27448       5.27448       300.320       305.594    
  37  0.583143     -0.539322      -6.49112       6.49112       293.215       299.706    
  38  0.276552E-01  -3.58794      -43.1834       43.1834       300.312       343.496    
  39  0.560517     -0.578896      -6.96742       6.96742       302.903       309.871    
  40  0.292779      -1.22834      -14.7839       14.7839       304.685       319.469    
  41  0.486207     -0.721121      -8.67919       8.67919       278.061       286.740    
  42  0.379142E-01  -3.27243      -39.3859       39.3859       290.025       329.411    
  43  0.459895     -0.776757      -9.34881       9.34881       297.530       306.879    
  44  0.810771     -0.209769      -2.52472       2.52472       317.183       319.708    
  45  0.189138      -1.66528      -20.0428       20.0428       301.595       321.638    
  46  0.509870     -0.673599      -8.10723       8.10723       307.590       315.698    
  47  0.468020E-01  -3.06183      -36.8512       36.8512       298.406       335.257    
  48  0.568404     -0.564922      -6.79923       6.79923       311.913       318.712    
  49  0.891250     -0.115130      -1.38567       1.38567       318.584       319.969    
  50  0.415261     -0.878849      -10.5776       10.5776       313.947       324.524    
  51  0.714019     -0.336846      -4.05417       4.05417       317.716       321.771    
  52  0.606207     -0.500534      -6.02427       6.02427       321.570       327.595    
  53  0.106011      -2.24421      -27.0106       27.0106       314.938       341.948    
  54  0.330348      -1.10761      -13.3309       13.3309       326.285       339.616    
  55  0.773475     -0.256862      -3.09152       3.09152       323.311       326.403    
  56  0.721841     -0.325951      -3.92305       3.92305       306.186       310.109    
  57  0.714980     -0.335501      -4.03799       4.03799       311.734       315.772    
  58  0.616486     -0.483719      -5.82189       5.82189       295.168       300.989    
  59  0.885098     -0.122057      -1.46904       1.46904       323.294       324.763    
  60  0.463686     -0.768549      -9.25002       9.25002       305.352       314.602    
  61  0.912951     -0.910727E-01  -1.09612       1.09612       320.470       321.566    
  62  0.819534     -0.199020      -2.39534       2.39534       291.756       294.151    
  63  0.771708     -0.259149      -3.11904       3.11904       298.574       301.693    
  64  0.812091E-03  -7.11590      -85.6448       85.6448       287.343       372.988    
loop,thermsimp(1:2)       46   2.76841       13.0394    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    305        304.13          0.88          1.10         23.12          0.01          0.05         25.16
Just calling func    0   0         25.16


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    304.13
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    12.0357               316
loop is:       46
neval is:      304
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       46      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    12.0357               316
loop is:       47
neval is:      304


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      316
neval,tstepnext:      304     316

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.652512     -0.426926      -5.13835       5.13835       268.366       273.504    
   2  0.474910     -0.744630      -8.96214       8.96214       275.413       284.375    
   3  0.125725      -2.07366      -24.9579       24.9579       282.445       307.403    
   4  0.950967     -0.502756E-01 -0.605101      0.605101       282.302       282.907    
   5  0.562475     -0.575409      -6.92545       6.92545       278.061       284.987    
   6  0.728528     -0.316729      -3.81205       3.81205       286.088       289.900    
   7  0.326058      -1.12068      -13.4882       13.4882       284.234       297.722    
   8  0.460979     -0.774402      -9.32047       9.32047       282.567       291.888    
   9  0.186861      -1.67739      -20.1886       20.1886       281.252       301.440    
  10  0.737773     -0.304119      -3.66029       3.66029       277.861       281.521    
  11  0.254524      -1.36836      -16.4692       16.4692       277.598       294.067    
  12  0.475390     -0.743621      -8.94999       8.94999       277.280       286.230    
  13  0.783107     -0.244486      -2.94255       2.94255       291.756       294.698    
  14  0.615536     -0.485261      -5.84046       5.84046       281.731       287.572    
  15  0.600710E-01  -2.81223      -33.8471       33.8471       291.268       325.115    
  16  0.834417     -0.181022      -2.17873       2.17873       282.492       284.671    
  17  0.270355      -1.30802      -15.7429       15.7429       294.730       310.473    
  18  0.408387     -0.895540      -10.7784       10.7784       294.889       305.667    
  19  0.248286      -1.39318      -16.7678       16.7678       293.215       309.983    
  20  0.586808E-01  -2.83564      -34.1289       34.1289       283.403       317.532    
  21  0.747050     -0.291623      -3.50989       3.50989       295.168       298.677    
  22  0.261869E-01  -3.64250      -43.8400       43.8400       298.574       342.414    
  23  0.495813     -0.701557      -8.44372       8.44372       281.266       289.710    
  24  0.600032     -0.510772      -6.14749       6.14749       297.677       303.824    
  25  0.936456     -0.656531E-01 -0.790181      0.790181       286.521       287.311    
  26  0.583260     -0.539121      -6.48870       6.48870       291.528       298.016    
  27  0.994266     -0.575021E-02 -0.692078E-01  0.692078E-01   298.353       298.422    
  28  0.149755      -1.89876      -22.8528       22.8528       300.522       323.375    
  29  0.751239     -0.286032      -3.44259       3.44259       304.975       308.417    
  30  0.703931     -0.351075      -4.22543       4.22543       290.580       294.805    
  31  0.998476     -0.152564E-02 -0.183621E-01  0.183621E-01   300.320       300.338    
  32  0.501495     -0.690161      -8.30657       8.30657       297.530       305.837    
  33  0.446468     -0.806387      -9.70542       9.70542       292.278       301.984    
  34  0.321376      -1.13514      -13.6623       13.6623       302.903       316.566    
  35  0.850901     -0.161459      -1.94328       1.94328       306.186       308.129    
  36  0.975881     -0.244142E-01 -0.293842      0.293842       304.814       305.108    
  37  0.386316     -0.951100      -11.4471       11.4471       305.352       316.799    
  38  0.782734     -0.244962      -2.94829       2.94829       307.590       310.539    
  39  0.142678      -1.94716      -23.4355       23.4355       311.734       335.169    
  40  0.509914     -0.673514      -8.10621       8.10621       297.817       305.923    
  41  0.211111      -1.55537      -18.7200       18.7200       311.913       330.633    
  42  0.212538      -1.54864      -18.6389       18.6389       296.364       315.003    
  43  0.889982     -0.116555      -1.40282       1.40282       295.939       297.342    
  44  0.769070     -0.262573      -3.16025       3.16025       292.428       295.588    
  45  0.792434     -0.232646      -2.80006       2.80006       304.685       307.485    
  46  0.250220E-01  -3.68800      -44.3876       44.3876       300.448       344.836    
  47  0.190304      -1.65913      -19.9688       19.9688       317.183       337.152    
  48  0.579595     -0.545425      -6.56457       6.56457       318.584       325.148    
  49  0.373376     -0.985170      -11.8572       11.8572       320.470       332.327    
  50  0.933620E-01  -2.37127      -28.5399       28.5399       301.595       330.135    
  51  0.628243     -0.464828      -5.59452       5.59452       317.716       323.311    
  52  0.737857     -0.304005      -3.65891       3.65891       301.361       305.020    
  53  0.430189     -0.843530      -10.1525       10.1525       287.238       297.391    
  54  0.957397     -0.435375E-01 -0.524004      0.524004       313.947       314.471    
  55  0.388126     -0.946424      -11.3909       11.3909       323.294       334.685    
  56  0.989586     -0.104686E-01 -0.125997      0.125997       323.311       323.437    
  57  0.754642     -0.281511      -3.38818       3.38818       321.570       324.959    
  58  0.404023E-01  -3.20887      -38.6209       38.6209       290.025       328.646    
  59  0.298112      -1.21029      -14.5667       14.5667       297.624       312.190    
  60  0.915557     -0.882223E-01  -1.06182       1.06182       298.406       299.468    
  61  0.205580E-01  -3.88450      -46.7527       46.7527       326.285       373.037    
  62  0.883530     -0.123830      -1.49039       1.49039       314.938       316.428    
  63  0.776014     -0.253585      -3.05207       3.05207       300.312       303.364    
  64  0.755316     -0.280619      -3.37744       3.37744       304.134       307.512    
loop,thermsimp(1:2)       47   5.13835       8.96214    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    306        270.22          0.88          1.09         23.12          0.02          0.04         25.15
Just calling func    0   0         25.15


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    307        316.97          0.86          1.06         23.09          0.15          0.04         25.20
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    270.22
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    12.0357               316
loop is:       47
neval is:      306
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       47      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    12.0357               316
loop is:       48
neval is:      306


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      316
neval,tstepnext:      306     316

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.316013      -1.15197      -13.8648       13.8648       268.366       282.230    
   2  0.452730     -0.792459      -9.53779       9.53779       277.861       287.398    
   3  0.463916     -0.768051      -9.24403       9.24403       282.302       291.546    
   4  0.531172E-01  -2.93526      -35.3278       35.3278       275.413       310.741    
   5  0.933113     -0.692290E-01 -0.833219      0.833219       282.492       283.325    
   6  0.107612      -2.22922      -26.8302       26.8302       278.061       304.891    
   7  0.228017      -1.47833      -17.7928       17.7928       277.280       295.073    
   8  0.766526     -0.265887      -3.20014       3.20014       286.521       289.721    
   9  0.676418     -0.390944      -4.70528       4.70528       281.731       286.437    
  10  0.220696      -1.51097      -18.1856       18.1856       281.266       299.452    
  11  0.959946E-01  -2.34346      -28.2052       28.2052       286.088       314.293    
  12  0.570655     -0.560971      -6.75168       6.75168       282.567       289.319    
  13  0.736426     -0.305947      -3.68228       3.68228       277.598       281.280    
  14  0.966377     -0.342013E-01 -0.411637      0.411637       291.756       292.167    
  15  0.797662     -0.226070      -2.72091       2.72091       290.580       293.301    
  16  0.413688     -0.882643      -10.6232       10.6232       292.428       303.051    
  17  0.200670      -1.60609      -19.3304       19.3304       295.939       315.270    
  18  0.843958E-01  -2.47224      -29.7551       29.7551       287.238       316.993    
  19  0.375580     -0.979284      -11.7864       11.7864       284.234       296.021    
  20  0.968669     -0.318322E-01 -0.383122      0.383122       291.528       291.911    
  21  0.379263     -0.969525      -11.6689       11.6689       298.353       310.022    
  22  0.421746     -0.863352      -10.3910       10.3910       295.168       305.559    
  23  0.639909     -0.446429      -5.37309       5.37309       298.406       303.779    
  24  0.549878     -0.598059      -7.19806       7.19806       300.320       307.518    
  25  0.226469      -1.48515      -17.8748       17.8748       281.252       299.126    
  26  0.547044E-02  -5.20840      -62.6867       62.6867       292.278       354.965    
  27  0.372808     -0.986692      -11.8755       11.8755       300.312       312.188    
  28  0.406819E-01  -3.20197      -38.5379       38.5379       297.677       336.215    
  29  0.664564     -0.408624      -4.91807       4.91807       301.361       306.279    
  30  0.708700     -0.344323      -4.14416       4.14416       304.814       308.958    
  31  0.863329     -0.146959      -1.76875       1.76875       294.889       296.657    
  32  0.406109     -0.901134      -10.8458       10.8458       297.530       308.376    
  33  0.101947      -2.28330      -27.4811       27.4811       297.817       325.298    
  34  0.660574     -0.414646      -4.99055       4.99055       282.445       287.436    
  35  0.839002     -0.175542      -2.11277       2.11277       304.685       306.798    
  36  0.735312E-01  -2.61005      -31.4137       31.4137       304.134       335.548    
  37  0.559917     -0.579967      -6.98030       6.98030       306.186       313.166    
  38  0.922004     -0.812055E-01 -0.977364      0.977364       304.975       305.952    
  39  0.891471     -0.114882      -1.38269       1.38269       293.215       294.597    
  40  0.489346     -0.714686      -8.60175       8.60175       294.730       303.332    
  41  0.583196     -0.539231      -6.49002       6.49002       307.590       314.080    
  42  0.989235     -0.108230E-01 -0.130263      0.130263       297.624       297.754    
  43  0.844741     -0.168725      -2.03073       2.03073       313.947       315.978    
  44  0.734982     -0.307909      -3.70590       3.70590       296.364       300.070    
  45  0.913246     -0.907495E-01  -1.09223       1.09223       314.938       316.030    
  46  0.605096     -0.502369      -6.04636       6.04636       302.903       308.950    
  47  0.623739     -0.472024      -5.68113       5.68113       305.352       311.033    
  48  0.780990     -0.247193      -2.97514       2.97514       283.403       286.378    
  49  0.615662E-01  -2.78764      -33.5512       33.5512       317.716       351.268    
  50  0.646443E-02  -5.04144      -60.6772       60.6772       300.522       361.199    
  51  0.848055     -0.164809      -1.98359       1.98359       323.311       325.295    
  52  0.740886     -0.299909      -3.60961       3.60961       321.570       325.180    
  53  0.350650      -1.04797      -12.6130       12.6130       291.268       303.881    
  54  0.873328     -0.135444      -1.63016       1.63016       318.584       320.214    
  55  0.353091      -1.04103      -12.5295       12.5295       290.025       302.554    
  56  0.867938     -0.141635      -1.70468       1.70468       301.595       303.300    
  57  0.746706     -0.292084      -3.51544       3.51544       311.913       315.429    
  58  0.701641     -0.354333      -4.26464       4.26464       320.470       324.735    
  59  0.454866     -0.787753      -9.48115       9.48115       323.294       332.776    
  60  0.172086      -1.75976      -21.1799       21.1799       311.734       332.914    
  61  0.633774     -0.456062      -5.48903       5.48903       317.183       322.672    
  62  0.321574      -1.13453      -13.6548       13.6548       298.574       312.229    
  63  0.171612      -1.76252      -21.2131       21.2131       300.448       321.661    
  64  0.417516     -0.873431      -10.5124       10.5124       270.221       280.733    
loop,thermsimp(1:2)       48   13.8648       9.53779    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    308        330.45          0.88          1.09         23.12          0.02          0.04         25.15
Just calling func    0   0         25.15


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    330.45
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    12.0357               316
loop is:       48
neval is:      307
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       48      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    12.0357               316
loop is:       49
neval is:      307


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      316
neval,tstepnext:      307     316

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.991535     -0.850114E-02 -0.102317      0.102317       270.221       270.323    
   2  0.120199      -2.11861      -25.4989       25.4989       277.598       303.097    
   3  0.825835     -0.191360      -2.30315       2.30315       268.366       270.669    
   4  0.769690     -0.261767      -3.15055       3.15055       282.492       285.642    
   5  0.206534      -1.57729      -18.9838       18.9838       283.403       302.387    
   6  0.435455     -0.831363      -10.0060       10.0060       281.731       291.737    
   7  0.408718     -0.894731      -10.7687       10.7687       277.861       288.629    
   8  0.504170E-01  -2.98743      -35.9558       35.9558       282.445       318.401    
   9  0.943874     -0.577631E-01 -0.695219      0.695219       282.567       283.262    
  10  0.161493      -1.82330      -21.9446       21.9446       286.521       308.466    
  11  0.248560      -1.39207      -16.7546       16.7546       282.302       299.057    
  12  0.952734     -0.484195E-01 -0.582763      0.582763       291.528       292.111    
  13  0.349224      -1.05204      -12.6621       12.6621       291.756       304.418    
  14  0.245013      -1.40644      -16.9275       16.9275       290.580       307.507    
  15  0.713805     -0.337146      -4.05778       4.05778       293.215       297.273    
  16  0.206995      -1.57506      -18.9570       18.9570       277.280       296.237    
  17  0.573984     -0.555154      -6.68166       6.68166       284.234       290.916    
  18  0.791297     -0.234082      -2.81734       2.81734       294.889       297.706    
  19  0.599323     -0.511955      -6.16174       6.16174       297.624       303.785    
  20  0.632893     -0.457454      -5.50578       5.50578       281.252       286.757    
  21  0.920472     -0.828688E-01 -0.997383      0.997383       281.266       282.264    
  22  0.650695     -0.429713      -5.17190       5.17190       296.364       301.536    
  23  0.759327     -0.275322      -3.31369       3.31369       290.025       293.338    
  24  0.547563     -0.602278      -7.24883       7.24883       292.428       299.676    
  25  0.375945     -0.978312      -11.7747       11.7747       301.595       313.370    
  26  0.436593     -0.828753      -9.97462       9.97462       294.730       304.705    
  27  0.226348      -1.48568      -17.8812       17.8812       298.406       316.287    
  28  0.889061     -0.117589      -1.41527       1.41527       291.268       292.683    
  29  0.294563      -1.22226      -14.7108       14.7108       278.061       292.772    
  30  0.760606     -0.273640      -3.29345       3.29345       295.168       298.461    
  31  0.131934      -2.02545      -24.3777       24.3777       304.975       329.352    
  32  0.150887      -1.89123      -22.7622       22.7622       301.361       324.123    
  33  0.108814      -2.21811      -26.6965       26.6965       304.685       331.381    
  34  0.392982     -0.933991      -11.2412       11.2412       300.320       311.561    
  35  0.524209     -0.645865      -7.77343       7.77343       297.530       305.304    
  36  0.779329     -0.249322      -3.00076       3.00076       302.903       305.904    
  37  0.684136     -0.379599      -4.56874       4.56874       304.814       309.383    
  38  0.898629     -0.106885      -1.28644       1.28644       298.353       299.639    
  39  0.885947E-01  -2.42368      -29.1707       29.1707       275.413       304.584    
  40  0.865042     -0.144977      -1.74490       1.74490       305.352       307.097    
  41  0.953799     -0.473027E-01 -0.569321      0.569321       300.312       300.881    
  42  0.264945      -1.32823      -15.9862       15.9862       298.574       314.560    
  43  0.931660     -0.707875E-01 -0.851977      0.851977       306.186       307.038    
  44  0.273150      -1.29773      -15.6191       15.6191       307.590       323.209    
  45  0.773196     -0.257223      -3.09586       3.09586       286.088       289.184    
  46  0.936342     -0.657743E-01 -0.791639      0.791639       295.939       296.731    
  47  0.367272      -1.00165      -12.0556       12.0556       311.913       323.969    
  48  0.970907     -0.295243E-01 -0.355345      0.355345       313.947       314.302    
  49  0.722669     -0.324804      -3.90925       3.90925       314.938       318.847    
  50  0.247966      -1.39446      -16.7833       16.7833       287.238       304.021    
  51  0.730821     -0.313587      -3.77423       3.77423       318.584       322.358    
  52  0.379134     -0.969864      -11.6730       11.6730       300.448       312.121    
  53  0.326173      -1.12033      -13.4839       13.4839       317.183       330.667    
  54  0.555872     -0.587218      -7.06758       7.06758       320.470       327.538    
  55  0.600838     -0.509431      -6.13135       6.13135       321.570       327.702    
  56  0.714504     -0.336167      -4.04600       4.04600       323.311       327.357    
  57  0.190775      -1.65666      -19.9391       19.9391       297.817       317.756    
  58  0.206210      -1.57886      -19.0027       19.0027       323.294       342.297    
  59  0.855348     -0.156247      -1.88054       1.88054       311.734       313.614    
  60  0.886753     -0.120189      -1.44656       1.44656       304.134       305.581    
  61  0.391830     -0.936926      -11.2766       11.2766       297.677       308.953    
  62  0.986898     -0.131885E-01 -0.158733      0.158733       317.716       317.875    
  63  0.153388      -1.87479      -22.5643       22.5643       292.278       314.842    
  64  0.416027     -0.877006      -10.5554       10.5554       330.450       341.005    
loop,thermsimp(1:2)       49  0.102317       25.4989    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    309        276.84          0.87          1.08         23.11          0.05          0.05         25.16
Just calling func    0   0         25.15


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    310        375.55          0.88          1.08         23.08          0.15          0.04         25.22
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    276.84
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    12.0357               316
loop is:       49
neval is:      309
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       49      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    12.0357               316
loop is:       50
neval is:      309


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      316
neval,tstepnext:      309     316

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.919134E-02  -4.68949      -56.4413       56.4413       270.221       326.662    
   2  0.902150     -0.102974      -1.23937       1.23937       268.366       269.605    
   3  0.375868     -0.978517      -11.7771       11.7771       281.266       293.043    
   4  0.136549E-01  -4.29366      -51.6772       51.6772       282.567       334.244    
   5  0.948329     -0.530533E-01 -0.638533      0.638533       282.492       283.130    
   6  0.489379E-01  -3.01720      -36.3141       36.3141       281.252       317.566    
   7  0.319400      -1.14131      -13.7365       13.7365       277.861       291.597    
   8  0.748008     -0.290342      -3.49446       3.49446       286.088       289.582    
   9  0.468015     -0.759255      -9.13816       9.13816       284.234       293.372    
  10  0.467420     -0.760527      -9.15347       9.15347       281.731       290.885    
  11  0.345085      -1.06396      -12.8055       12.8055       291.528       304.333    
  12  0.598981     -0.512526      -6.16861       6.16861       291.268       297.436    
  13  0.231496      -1.46319      -17.6105       17.6105       278.061       295.672    
  14  0.685496     -0.377613      -4.54483       4.54483       290.025       294.570    
  15  0.225803      -1.48809      -17.9102       17.9102       277.280       295.190    
  16  0.744991E-01  -2.59697      -31.2563       31.2563       295.939       327.196    
  17  0.436777     -0.828332      -9.96955       9.96955       293.215       303.184    
  18  0.241074      -1.42265      -17.1226       17.1226       294.889       312.011    
  19  0.728071     -0.317357      -3.81962       3.81962       295.168       298.987    
  20  0.228500      -1.47622      -17.7673       17.7673       282.302       300.070    
  21  0.423678     -0.858781      -10.3360       10.3360       298.353       308.689    
  22  0.812855     -0.207202      -2.49382       2.49382       292.428       294.921    
  23  0.810546     -0.210047      -2.52806       2.52806       300.312       302.840    
  24  0.113500      -2.17595      -26.1891       26.1891       296.364       322.553    
  25  0.197385      -1.62260      -19.5291       19.5291       283.403       302.932    
  26  0.101018      -2.29246      -27.5914       27.5914       277.598       305.189    
  27  0.857009E-01  -2.45689      -29.5704       29.5704       297.624       327.194    
  28  0.693668     -0.365762      -4.40220       4.40220       287.238       291.640    
  29  0.705918     -0.348256      -4.19150       4.19150       291.756       295.947    
  30  0.309793      -1.17185      -14.1040       14.1040       275.413       289.517    
  31  0.144843      -1.93210      -23.2542       23.2542       294.730       317.984    
  32  0.412916     -0.884511      -10.6457       10.6457       297.530       308.176    
  33  0.916661     -0.870180E-01  -1.04732       1.04732       304.134       305.182    
  34  0.933384E-01  -2.37152      -28.5429       28.5429       302.903       331.446    
  35  0.937330     -0.647200E-01 -0.778950      0.778950       306.186       306.965    
  36  0.958012     -0.428952E-01 -0.516273      0.516273       305.352       305.868    
  37  0.692877E-01  -2.66949      -32.1291       32.1291       290.580       322.709    
  38  0.228520E-01  -3.77872      -45.4795       45.4795       286.521       332.001    
  39  0.188135      -1.67060      -20.1068       20.1068       297.677       317.784    
  40  0.122595E-01  -4.40146      -52.9746       52.9746       304.814       357.789    
  41  0.776693     -0.252710      -3.04155       3.04155       300.320       303.361    
  42  0.571957     -0.558691      -6.72424       6.72424       300.448       307.172    
  43  0.313016      -1.16150      -13.9795       13.9795       301.595       315.575    
  44  0.512360     -0.668728      -8.04861       8.04861       311.734       319.783    
  45  0.874954     -0.133584      -1.60778       1.60778       313.947       315.555    
  46  0.617920     -0.481397      -5.79394       5.79394       298.574       304.368    
  47  0.529196     -0.636396      -7.65947       7.65947       292.278       299.938    
  48  0.389261E-02  -5.54867      -66.7822       66.7822       298.406       365.188    
  49  0.323386E-01  -3.43149      -41.3004       41.3004       297.817       339.117    
  50  0.900641     -0.104648      -1.25952       1.25952       317.716       318.976    
  51  0.872638     -0.136235      -1.63968       1.63968       282.445       284.085    
  52  0.965349     -0.352660E-01 -0.424451      0.424451       314.938       315.362    
  53  0.679490     -0.386413      -4.65075       4.65075       318.584       323.234    
  54  0.101129      -2.29136      -27.5781       27.5781       307.590       335.168    
  55  0.885746     -0.121326      -1.46024       1.46024       311.913       313.373    
  56  0.307763      -1.17843      -14.1832       14.1832       301.361       315.544    
  57  0.978164     -0.220781E-01 -0.265725      0.265725       323.311       323.577    
  58  0.678582     -0.387750      -4.66684       4.66684       320.470       325.137    
  59  0.573317     -0.556317      -6.69566       6.69566       321.570       328.266    
  60  0.541891     -0.612690      -7.37415       7.37415       304.975       312.349    
  61  0.110478      -2.20294      -26.5139       26.5139       317.183       343.697    
  62  0.125637      -2.07436      -24.9663       24.9663       304.685       329.651    
  63  0.580733     -0.543464      -6.54097       6.54097       330.450       336.991    
  64  0.261777      -1.34026      -16.1310       16.1310       276.843       292.974    
loop,thermsimp(1:2)       50   56.4413       1.23937    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    311        285.03          0.88          1.09         23.11          0.01          0.05         25.13
Just calling func    0   0         25.14


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    285.03
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    12.0357               316
loop is:       50
neval is:      310
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       50      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    12.0357               316
loop is:       51
neval is:      310


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      316
neval,tstepnext:      310     316

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.903412     -0.101577      -1.22255       1.22255       268.366       269.588    
   2  0.808902     -0.212077      -2.55250       2.55250       282.492       285.044    
   3  0.762147     -0.271616      -3.26909       3.26909       282.445       285.714    
   4  0.287851      -1.24531      -14.9882       14.9882       275.413       290.401    
   5  0.212418      -1.54920      -18.6457       18.6457       286.088       304.733    
   6  0.380717     -0.965699      -11.6229       11.6229       281.731       293.354    
   7  0.877795     -0.130342      -1.56876       1.56876       277.861       279.429    
   8  0.836834     -0.178130      -2.14391       2.14391       287.238       289.382    
   9  0.435183     -0.831988      -10.0136       10.0136       276.843       286.857    
  10  0.900166     -0.105177      -1.26587       1.26587       281.266       282.532    
  11  0.175095      -1.74242      -20.9713       20.9713       284.234       305.205    
  12  0.322232      -1.13248      -13.6302       13.6302       290.025       303.655    
  13  0.706662     -0.347203      -4.17883       4.17883       292.428       296.606    
  14  0.494297     -0.704618      -8.48057       8.48057       277.280       285.761    
  15  0.324383      -1.12583      -13.5502       13.5502       278.061       291.611    
  16  0.777122     -0.252157      -3.03489       3.03489       291.756       294.791    
  17  0.499054E-01  -2.99763      -36.0785       36.0785       291.268       327.346    
  18  0.489193E-01  -3.01758      -36.3187       36.3187       295.168       331.486    
  19  0.480140     -0.733678      -8.83032       8.83032       292.278       301.108    
  20  0.914126     -0.897865E-01  -1.08064       1.08064       282.302       283.383    
  21  0.613008     -0.489378      -5.89000       5.89000       300.312       306.202    
  22  0.470573     -0.753804      -9.07255       9.07255       283.403       292.476    
  23  0.614279     -0.487307      -5.86508       5.86508       293.215       299.080    
  24  0.410529     -0.890308      -10.7155       10.7155       300.320       311.035    
  25  0.582759     -0.539981      -6.49905       6.49905       291.528       298.027    
  26  0.422753E-01  -3.16355      -38.0755       38.0755       298.574       336.649    
  27  0.717044     -0.332618      -4.00329       4.00329       304.134       308.138    
  28  0.420765     -0.865682      -10.4191       10.4191       277.598       288.017    
  29  0.801392     -0.221405      -2.66476       2.66476       305.352       308.017    
  30  0.426188     -0.852875      -10.2649       10.2649       306.186       316.451    
  31  0.338881      -1.08211      -13.0239       13.0239       300.448       313.472    
  32  0.398160     -0.920902      -11.0837       11.0837       297.530       308.614    
  33  0.938837     -0.631132E-01 -0.759611      0.759611       298.353       299.112    
  34  0.411860E-01  -3.18966      -38.3897       38.3897       294.889       333.278    
  35  0.180703      -1.71090      -20.5919       20.5919       304.975       325.566    
  36  0.617012     -0.482867      -5.81164       5.81164       311.913       317.725    
  37  0.788612     -0.237480      -2.85824       2.85824       314.938       317.796    
  38  0.381719     -0.963071      -11.5912       11.5912       301.361       312.952    
  39  0.376038     -0.978064      -11.7717       11.7717       313.947       325.719    
  40  0.105996      -2.24435      -27.0124       27.0124       301.595       328.608    
  41  0.769932E-01  -2.56404      -30.8600       30.8600       281.252       312.112    
  42  0.365987      -1.00516      -12.0978       12.0978       297.677       309.775    
  43  0.731763     -0.312298      -3.75872       3.75872       294.730       298.489    
  44  0.447137     -0.804891      -9.68742       9.68742       317.716       327.404    
  45  0.273519      -1.29638      -15.6029       15.6029       311.734       327.337    
  46  0.870614     -0.138556      -1.66762       1.66762       296.364       298.032    
  47  0.822463     -0.195452      -2.35240       2.35240       290.580       292.932    
  48  0.456061     -0.785129      -9.44957       9.44957       318.584       328.033    
  49  0.603947     -0.504269      -6.06923       6.06923       323.311       329.381    
  50  0.342037      -1.07284      -12.9123       12.9123       320.470       333.382    
  51  0.693527     -0.365965      -4.40465       4.40465       270.221       274.626    
  52  0.958323     -0.425703E-01 -0.512363      0.512363       297.624       298.136    
  53  0.587360     -0.532117      -6.40440       6.40440       295.939       302.344    
  54  0.364787      -1.00844      -12.1373       12.1373       321.570       333.708    
  55  0.878785     -0.129215      -1.55519       1.55519       304.685       306.240    
  56  0.273053      -1.29809      -15.6234       15.6234       302.903       318.527    
  57  0.896174     -0.109620      -1.31936       1.31936       286.521       287.840    
  58  0.239994      -1.42714      -17.1766       17.1766       282.567       299.744    
  59  0.595505E-01  -2.82093      -33.9519       33.9519       307.590       341.542    
  60  0.353403      -1.04015      -12.5189       12.5189       330.450       342.969    
  61  0.729282     -0.315695      -3.79961       3.79961       297.817       301.616    
  62  0.231928      -1.46133      -17.5881       17.5881       317.183       334.772    
  63  0.107599      -2.22934      -26.8317       26.8317       304.814       331.646    
  64  0.641905     -0.443315      -5.33560       5.33560       285.029       290.365    
loop,thermsimp(1:2)       51   1.22255       2.55250    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    312        297.87          0.88          1.10         23.10          0.02          0.05         25.16
Just calling func    0   0         25.15


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    297.87
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    12.0357               316
loop is:       51
neval is:      311
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       51      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    12.0357               316
loop is:       52
neval is:      311


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      316
neval,tstepnext:      311     316

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.421091     -0.864906      -10.4097       10.4097       268.366       278.775    
   2  0.315135      -1.15476      -13.8983       13.8983       270.221       284.119    
   3  0.696708     -0.361389      -4.34957       4.34957       277.861       282.210    
   4  0.922116     -0.810842E-01 -0.975905      0.975905       281.266       282.242    
   5  0.908133     -0.963648E-01  -1.15982       1.15982       282.302       283.462    
   6  0.174132      -1.74794      -21.0377       21.0377       282.492       303.530    
   7  0.490629     -0.712068      -8.57023       8.57023       282.445       291.015    
   8  0.382604     -0.960755      -11.5633       11.5633       277.280       288.843    
   9  0.985159     -0.149527E-01 -0.179966      0.179966       276.843       277.023    
  10  0.182634      -1.70027      -20.4639       20.4639       286.521       306.985    
  11  0.554568     -0.589565      -7.09583       7.09583       277.598       284.693    
  12  0.999791     -0.209153E-03 -0.251730E-02  0.251730E-02   287.238       287.241    
  13  0.284621      -1.25660      -15.1240       15.1240       285.029       300.153    
  14  0.920706E-01  -2.38520      -28.7075       28.7075       275.413       304.121    
  15  0.243911      -1.41095      -16.9818       16.9818       278.061       295.043    
  16  0.866829     -0.142914      -1.72006       1.72006       283.403       285.123    
  17  0.640039     -0.446225      -5.37063       5.37063       290.580       295.950    
  18  0.737488E-01  -2.60709      -31.3781       31.3781       281.731       313.110    
  19  0.511916     -0.669594      -8.05903       8.05903       291.756       299.815    
  20  0.870220     -0.139009      -1.67307       1.67307       292.428       294.101    
  21  0.594690     -0.519714      -6.25512       6.25512       291.528       297.783    
  22  0.659508     -0.416262      -5.01000       5.01000       296.364       301.374    
  23  0.702023     -0.353789      -4.25810       4.25810       297.624       301.882    
  24  0.178121      -1.72529      -20.7651       20.7651       294.730       315.495    
  25  0.622271     -0.474379      -5.70948       5.70948       293.215       298.924    
  26  0.877027     -0.131217      -1.57929       1.57929       298.353       299.932    
  27  0.206753      -1.57623      -18.9711       18.9711       282.567       301.538    
  28  0.927381     -0.753912E-01 -0.907386      0.907386       292.278       293.186    
  29  0.610274     -0.493848      -5.94380       5.94380       297.817       303.760    
  30  0.453676     -0.790373      -9.51269       9.51269       295.939       305.452    
  31  0.203335      -1.59290      -19.1717       19.1717       290.025       309.196    
  32  0.558786     -0.581989      -7.00464       7.00464       286.088       293.092    
  33  0.685013     -0.378317      -4.55331       4.55331       284.234       288.787    
  34  0.753574     -0.282929      -3.40524       3.40524       300.312       303.717    
  35  0.736990E-01  -2.60777      -31.3863       31.3863       304.685       336.071    
  36  0.719848     -0.328716      -3.95632       3.95632       305.352       309.308    
  37  0.177345E-01  -4.03224      -48.5308       48.5308       304.134       352.665    
  38  0.277334E-01  -3.58512      -43.1494       43.1494       297.530       340.680    
  39  0.228604      -1.47576      -17.7618       17.7618       297.677       315.439    
  40  0.874609     -0.133979      -1.61253       1.61253       300.320       301.932    
  41  0.875699     -0.132733      -1.59753       1.59753       281.252       282.849    
  42  0.540874     -0.614569      -7.39676       7.39676       301.361       308.758    
  43  0.343108E-01  -3.37230      -40.5879       40.5879       300.448       341.036    
  44  0.982551     -0.176027E-01 -0.211861      0.211861       306.186       306.398    
  45  0.201823      -1.60037      -19.2615       19.2615       311.913       331.175    
  46  0.116838      -2.14697      -25.8403       25.8403       314.938       340.778    
  47  0.520586     -0.652800      -7.85690       7.85690       302.903       310.760    
  48  0.515528     -0.662563      -7.97441       7.97441       304.975       312.949    
  49  0.814407     -0.205295      -2.47087       2.47087       313.947       316.418    
  50  0.436930     -0.827981      -9.96533       9.96533       311.734       321.699    
  51  0.802441     -0.220097      -2.64901       2.64901       291.268       293.917    
  52  0.366662      -1.00331      -12.0756       12.0756       317.716       329.792    
  53  0.915349     -0.884494E-01  -1.06455       1.06455       318.584       319.648    
  54  0.619345     -0.479093      -5.76622       5.76622       301.595       307.362    
  55  0.984856     -0.152594E-01 -0.183657      0.183657       323.311       323.495    
  56  0.594834     -0.519472      -6.25221       6.25221       295.168       301.420    
  57  0.295281      -1.21983      -14.6815       14.6815       304.814       319.495    
  58  0.363721      -1.01137      -12.1725       12.1725       294.889       307.061    
  59  0.113237      -2.17827      -26.2170       26.2170       320.470       346.687    
  60  0.684322     -0.379327      -4.56546       4.56546       321.570       326.136    
  61  0.172853E-01  -4.05790      -48.8396       48.8396       317.183       366.023    
  62  0.910904     -0.933174E-01  -1.12314       1.12314       298.574       299.697    
  63  0.792218     -0.232919      -2.80334       2.80334       307.590       310.394    
  64  0.644894E-02  -5.04384      -60.7061       60.7061       297.865       358.571    
loop,thermsimp(1:2)       52   10.4097       13.8983    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    313        296.12          0.88          1.09         23.11          0.00          0.05         25.12
Just calling func    0   0         25.12


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    296.12
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    12.0357               316
loop is:       52
neval is:      312
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       52      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    12.0357               316
loop is:       53
neval is:      312


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      316
neval,tstepnext:      312     316

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.340866E-01  -3.37885      -40.6668       40.6668       276.843       317.510    
   2  0.714674     -0.335928      -4.04313       4.04313       268.366       272.409    
   3  0.977792     -0.224587E-01 -0.270306      0.270306       277.861       278.131    
   4  0.771231     -0.259767      -3.12648       3.12648       281.266       284.393    
   5  0.265148      -1.32747      -15.9770       15.9770       281.252       297.229    
   6  0.559491     -0.580728      -6.98947       6.98947       282.302       289.292    
   7  0.934824E-01  -2.36998      -28.5244       28.5244       270.221       298.745    
   8  0.928182     -0.745278E-01 -0.896994      0.896994       277.598       278.495    
   9  0.464905     -0.765922      -9.21840       9.21840       283.403       292.622    
  10  0.871919     -0.137059      -1.64959       1.64959       287.238       288.888    
  11  0.982233     -0.179265E-01 -0.215757      0.215757       284.234       284.450    
  12  0.426376     -0.852433      -10.2596       10.2596       277.280       287.540    
  13  0.471128E-01  -3.05521      -36.7716       36.7716       282.445       319.217    
  14  0.686439     -0.376238      -4.52829       4.52829       286.088       290.616    
  15  0.117826      -2.13855      -25.7389       25.7389       292.278       318.017    
  16  0.756878E-01  -2.58114      -31.0658       31.0658       291.268       322.334    
  17  0.196211      -1.62856      -19.6009       19.6009       292.428       312.029    
  18  0.431930     -0.839491      -10.1039       10.1039       278.061       288.165    
  19  0.707794     -0.345602      -4.15957       4.15957       290.580       294.739    
  20  0.174358E-01  -4.04923      -48.7353       48.7353       291.528       340.263    
  21  0.267976      -1.31686      -15.8493       15.8493       293.215       309.064    
  22  0.793866     -0.230841      -2.77833       2.77833       298.574       301.352    
  23  0.135848      -1.99622      -24.0259       24.0259       291.756       315.782    
  24  0.663958     -0.409536      -4.92905       4.92905       298.353       303.282    
  25  0.281101      -1.26904      -15.2738       15.2738       285.029       300.303    
  26  0.606466     -0.500106      -6.01912       6.01912       296.364       302.384    
  27  0.940056     -0.618158E-01 -0.743997      0.743997       295.168       295.912    
  28  0.124106      -2.08662      -25.1139       25.1139       282.567       307.681    
  29  0.205090      -1.58431      -19.0682       19.0682       297.624       316.692    
  30  0.852960     -0.159043      -1.91419       1.91419       300.320       302.234    
  31  0.241701      -1.42005      -17.0913       17.0913       282.492       299.583    
  32  0.744368     -0.295220      -3.55318       3.55318       300.312       303.865    
  33  0.279909      -1.27329      -15.3250       15.3250       297.817       313.142    
  34  0.142971      -1.94511      -23.4108       23.4108       275.413       298.824    
  35  0.367233      -1.00176      -12.0569       12.0569       295.939       307.996    
  36  0.839044     -0.175493      -2.11217       2.11217       306.186       308.298    
  37  0.762369     -0.271325      -3.26559       3.26559       286.521       289.787    
  38  0.414704     -0.880189      -10.5937       10.5937       294.889       305.482    
  39  0.294445      -1.22266      -14.7156       14.7156       301.595       316.311    
  40  0.296874      -1.21445      -14.6167       14.6167       301.361       315.978    
  41  0.834777     -0.180590      -2.17353       2.17353       290.025       292.198    
  42  0.399354     -0.917907      -11.0476       11.0476       305.352       316.400    
  43  0.948666     -0.526981E-01 -0.634258      0.634258       307.590       308.225    
  44  0.306553E-01  -3.48495      -41.9438       41.9438       302.903       344.847    
  45  0.768324E-01  -2.56613      -30.8851       30.8851       304.975       335.860    
  46  0.723813     -0.323222      -3.89020       3.89020       281.731       285.622    
  47  0.912222     -0.918720E-01  -1.10574       1.10574       297.677       298.783    
  48  0.846322     -0.166855      -2.00821       2.00821       294.730       296.738    
  49  0.704090     -0.350850      -4.22272       4.22272       313.947       318.170    
  50  0.443839     -0.812294      -9.77652       9.77652       304.814       314.590    
  51  0.790462     -0.235137      -2.83004       2.83004       318.584       321.414    
  52  0.134239      -2.00813      -24.1692       24.1692       311.734       335.903    
  53  0.720618     -0.327646      -3.94345       3.94345       323.311       327.255    
  54  0.489652     -0.714061      -8.59422       8.59422       321.570       330.165    
  55  0.493891E-01  -3.00802      -36.2037       36.2037       317.716       353.920    
  56  0.524875     -0.644595      -7.75815       7.75815       311.913       319.671    
  57  0.919627     -0.837868E-01  -1.00843       1.00843       304.685       305.693    
  58  0.372709     -0.986956      -11.8787       11.8787       297.530       309.409    
  59  0.121203      -2.11029      -25.3988       25.3988       314.938       340.337    
  60  0.195183      -1.63382      -19.6641       19.6641       300.448       320.112    
  61  0.325168      -1.12341      -13.5211       13.5211       320.470       333.991    
  62  0.248863      -1.39085      -16.7399       16.7399       304.134       320.874    
  63  0.910643     -0.936046E-01  -1.12660       1.12660       297.865       298.992    
  64  0.131372E-01  -4.33230      -52.1423       52.1423       296.122       348.264    
loop,thermsimp(1:2)       53   40.6668       4.04313    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    314        296.58          0.88          1.10         23.13          0.02          0.04         25.16
Just calling func    0   0         25.16


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    296.58
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    12.0357               316
loop is:       53
neval is:      313
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       53      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    12.0357               316
loop is:       54
neval is:      313


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      316
neval,tstepnext:      313     316

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.615000     -0.486133      -5.85095       5.85095       268.366       274.217    
   2  0.438442     -0.824528      -9.92377       9.92377       277.861       287.784    
   3  0.666371     -0.405908      -4.88539       4.88539       277.598       282.483    
   4  0.419797     -0.867984      -10.4468       10.4468       281.266       291.713    
   5  0.662493     -0.411746      -4.95564       4.95564       284.234       289.190    
   6  0.261021      -1.34315      -16.1658       16.1658       281.731       297.897    
   7  0.451731     -0.794667      -9.56437       9.56437       277.280       286.844    
   8  0.858047     -0.153096      -1.84262       1.84262       278.061       279.904    
   9  0.678039     -0.388550      -4.67647       4.67647       287.238       291.915    
  10  0.257304      -1.35750      -16.3384       16.3384       282.302       298.641    
  11  0.379774     -0.968178      -11.6527       11.6527       286.521       298.174    
  12  0.200314      -1.60787      -19.3518       19.3518       286.088       305.440    
  13  0.702955E-01  -2.65505      -31.9553       31.9553       290.025       321.980    
  14  0.846007     -0.167228      -2.01270       2.01270       283.403       285.416    
  15  0.692217     -0.367856      -4.42740       4.42740       290.580       295.007    
  16  0.830541     -0.185678      -2.23476       2.23476       295.168       297.402    
  17  0.162133E-02  -6.42451      -77.3234       77.3234       294.730       372.053    
  18  0.829216     -0.187275      -2.25398       2.25398       281.252       283.506    
  19  0.464918     -0.765894      -9.21807       9.21807       270.221       279.439    
  20  0.204157      -1.58887      -19.1231       19.1231       297.677       316.800    
  21  0.203429      -1.59244      -19.1661       19.1661       275.413       294.579    
  22  0.403935     -0.906500      -10.9104       10.9104       297.865       308.775    
  23  0.508037     -0.677201      -8.15058       8.15058       282.492       290.643    
  24  0.337702      -1.08559      -13.0658       13.0658       285.029       298.095    
  25  0.375672     -0.979039      -11.7834       11.7834       298.574       310.357    
  26  0.218755      -1.51980      -18.2919       18.2919       300.320       318.612    
  27  0.803422     -0.218876      -2.63432       2.63432       296.364       298.999    
  28  0.324101      -1.12670      -13.5606       13.5606       298.353       311.913    
  29  0.804001     -0.218155      -2.62564       2.62564       300.312       302.938    
  30  0.727676     -0.317899      -3.82614       3.82614       294.889       298.715    
  31  0.769479     -0.262042      -3.15386       3.15386       304.685       307.839    
  32  0.632293     -0.458402      -5.51719       5.51719       282.567       288.084    
  33  0.300459      -1.20244      -14.4722       14.4722       295.939       310.412    
  34  0.567362     -0.566759      -6.82133       6.82133       307.590       314.412    
  35  0.803345     -0.218971      -2.63547       2.63547       306.186       308.821    
  36  0.764706     -0.268264      -3.22875       3.22875       293.215       296.444    
  37  0.159444      -1.83606      -22.0983       22.0983       297.530       319.629    
  38  0.951670     -0.495367E-01 -0.596208      0.596208       292.428       293.024    
  39  0.769198     -0.262407      -3.15825       3.15825       297.817       300.975    
  40  0.916532     -0.871588E-01  -1.04902       1.04902       304.814       305.863    
  41  0.146117E-01  -4.22593      -50.8620       50.8620       291.756       342.618    
  42  0.196164      -1.62880      -19.6038       19.6038       301.361       320.965    
  43  0.399482     -0.917586      -11.0438       11.0438       301.595       312.639    
  44  0.646732     -0.435823      -5.24544       5.24544       305.352       310.598    
  45  0.207790      -1.57122      -18.9108       18.9108       297.624       316.534    
  46  0.276388      -1.28595      -15.4773       15.4773       276.843       292.320    
  47  0.410494     -0.890394      -10.7165       10.7165       292.278       302.995    
  48  0.437747     -0.826115      -9.94286       9.94286       313.947       323.890    
  49  0.414886     -0.879752      -10.5884       10.5884       282.445       293.033    
  50  0.453890     -0.789901      -9.50701       9.50701       311.913       321.420    
  51  0.141383      -1.95628      -23.5452       23.5452       300.448       323.993    
  52  0.264375      -1.33039      -16.0122       16.0122       304.134       320.147    
  53  0.598599     -0.513163      -6.17628       6.17628       318.584       324.760    
  54  0.716868     -0.332864      -4.00625       4.00625       291.268       295.274    
  55  0.547773     -0.601894      -7.24421       7.24421       323.311       330.556    
  56  0.920744     -0.825729E-01 -0.993822      0.993822       321.570       322.564    
  57  0.394656     -0.929742      -11.1901       11.1901       320.470       331.660    
  58  0.439395     -0.822357      -9.89764       9.89764       304.975       314.872    
  59  0.890216     -0.116291      -1.39964       1.39964       311.734       313.134    
  60  0.693208     -0.366425      -4.41018       4.41018       291.528       295.938    
  61  0.747783     -0.290642      -3.49808       3.49808       314.938       318.436    
  62  0.408813     -0.894498      -10.7659       10.7659       302.903       313.669    
  63  0.175963E-03  -8.64523      -104.051       104.051       296.122       400.173    
  64  0.715035     -0.335424      -4.03707       4.03707       296.577       300.614    
loop,thermsimp(1:2)       54   5.85095       9.92377    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    315        317.07          0.88          1.07         23.12          0.04          0.05         25.16
Just calling func    0   0         25.16


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    317.07
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    12.0357               316
loop is:       54
neval is:      314
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       54      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    12.0357               316
loop is:       55
neval is:      314


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      316
neval,tstepnext:      314     316

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.626103     -0.468241      -5.63560       5.63560       268.366       274.001    
   2  0.909442     -0.949244E-01  -1.14248       1.14248       270.221       271.364    
   3  0.449837     -0.798870      -9.61496       9.61496       278.061       287.676    
   4  0.761598     -0.272336      -3.27775       3.27775       277.598       280.875    
   5  0.706800     -0.347007      -4.17648       4.17648       281.252       285.428    
   6  0.214343      -1.54018      -18.5371       18.5371       283.403       301.940    
   7  0.855661     -0.155881      -1.87613       1.87613       277.280       279.156    
   8  0.432924E-01  -3.13978      -37.7894       37.7894       277.861       315.650    
   9  0.902784     -0.102271      -1.23091       1.23091       282.567       283.798    
  10  0.706965     -0.346774      -4.17366       4.17366       284.234       288.408    
  11  0.826667     -0.190354      -2.29104       2.29104       282.492       284.783    
  12  0.824436     -0.193055      -2.32356       2.32356       281.266       283.590    
  13  0.442772     -0.814700      -9.80548       9.80548       287.238       297.044    
  14  0.416355     -0.876217      -10.5459       10.5459       276.843       287.389    
  15  0.268464      -1.31504      -15.8274       15.8274       292.428       308.255    
  16  0.779742     -0.248792      -2.99438       2.99438       282.445       285.439    
  17  0.406799E-01  -3.20202      -38.5386       38.5386       275.413       313.952    
  18  0.975397     -0.249106E-01 -0.299817      0.299817       290.580       290.880    
  19  0.425150E-01  -3.15790      -38.0075       38.0075       291.268       329.275    
  20  0.302481      -1.19574      -14.3915       14.3915       291.528       305.919    
  21  0.732033     -0.311930      -3.75429       3.75429       293.215       296.969    
  22  0.774561     -0.255459      -3.07463       3.07463       295.168       298.242    
  23  0.899897     -0.105475      -1.26946       1.26946       281.731       283.001    
  24  0.549624     -0.598520      -7.20361       7.20361       285.029       292.233    
  25  0.143543      -1.94112      -23.3627       23.3627       286.521       309.884    
  26  0.229055      -1.47379      -17.7381       17.7381       282.302       300.040    
  27  0.334206      -1.09600      -13.1911       13.1911       294.889       308.080    
  28  0.301620      -1.19859      -14.4258       14.4258       296.364       310.790    
  29  0.856030     -0.155449      -1.87094       1.87094       296.577       298.448    
  30  0.978878     -0.213482E-01 -0.256940      0.256940       297.817       298.073    
  31  0.890790E-01  -2.41823      -29.1051       29.1051       300.312       329.417    
  32  0.275076      -1.29071      -15.5345       15.5345       292.278       307.813    
  33  0.506865     -0.679511      -8.17839       8.17839       286.088       294.266    
  34  0.628553     -0.464334      -5.58859       5.58859       304.814       310.403    
  35  0.787972     -0.238293      -2.86802       2.86802       304.685       307.553    
  36  0.746168     -0.292804      -3.52410       3.52410       297.865       301.389    
  37  0.116954      -2.14598      -25.8283       25.8283       306.186       332.014    
  38  0.245368      -1.40500      -16.9101       16.9101       298.574       315.484    
  39  0.873952     -0.134729      -1.62156       1.62156       295.939       297.561    
  40  0.850596     -0.161818      -1.94759       1.94759       305.352       307.300    
  41  0.455763     -0.785783      -9.45744       9.45744       298.353       307.810    
  42  0.984333     -0.157910E-01 -0.190056      0.190056       301.595       301.785    
  43  0.956700     -0.442655E-01 -0.532766      0.532766       311.734       312.267    
  44  0.186161      -1.68114      -20.2337       20.2337       302.903       323.137    
  45  0.791379     -0.233979      -2.81609       2.81609       307.590       310.406    
  46  0.262937      -1.33584      -16.0778       16.0778       304.975       321.052    
  47  0.115228E-01  -4.46342      -53.7204       53.7204       297.624       351.344    
  48  0.324912      -1.12420      -13.5305       13.5305       297.677       311.207    
  49  0.164288      -1.80613      -21.7381       21.7381       314.938       336.676    
  50  0.334193E-02  -5.70121      -68.6180       68.6180       300.320       368.938    
  51  0.189130      -1.66532      -20.0433       20.0433       297.530       317.574    
  52  0.157956      -1.84544      -22.2111       22.2111       304.134       326.346    
  53  0.414399     -0.880925      -10.6025       10.6025       301.361       311.964    
  54  0.445375     -0.808838      -9.73493       9.73493       311.913       321.648    
  55  0.674924     -0.393155      -4.73189       4.73189       290.025       294.757    
  56  0.204431      -1.58752      -19.1070       19.1070       321.570       340.677    
  57  0.741769     -0.298718      -3.59528       3.59528       313.947       317.542    
  58  0.662845     -0.411215      -4.94925       4.94925       300.448       305.397    
  59  0.716249     -0.333728      -4.01665       4.01665       318.584       322.600    
  60  0.503649     -0.685876      -8.25500       8.25500       323.311       331.566    
  61  0.525560     -0.643292      -7.74246       7.74246       320.470       328.213    
  62  0.981258     -0.189199E-01 -0.227714      0.227714       291.756       291.983    
  63  0.892133     -0.114140      -1.37376       1.37376       294.730       296.104    
  64  0.239527E-01  -3.73167      -44.9133       44.9133       317.072       361.985    
loop,thermsimp(1:2)       55   5.63560       1.14248    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    316        381.65          0.88          1.11         23.00          0.09          0.05         25.12
Just calling func    0   0         25.12


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    381.65
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    12.0357               316
loop is:       55
neval is:      315
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       55      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    12.0357               316
loop is:       56
neval is:      315


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      316
neval,tstepnext:      315     316

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.245842      -1.40307      -16.8869       16.8869       270.221       287.108    
   2  0.963480     -0.372033E-01 -0.447768      0.447768       268.366       268.813    
   3  0.633143     -0.457059      -5.50102       5.50102       277.280       282.781    
   4  0.939850E-02  -4.66721      -56.1731       56.1731       277.598       333.771    
   5  0.796978     -0.226928      -2.73124       2.73124       281.731       284.463    
   6  0.229125      -1.47349      -17.7345       17.7345       281.266       299.001    
   7  0.926958     -0.758467E-01 -0.912868      0.912868       282.567       283.480    
   8  0.687512     -0.374676      -4.50949       4.50949       282.492       287.001    
   9  0.695030     -0.363800      -4.37858       4.37858       281.252       285.630    
  10  0.900736     -0.104543      -1.25824       1.25824       282.445       283.703    
  11  0.867179     -0.142510      -1.71520       1.71520       276.843       278.558    
  12  0.879271     -0.128662      -1.54854       1.54854       278.061       279.610    
  13  0.197557      -1.62173      -19.5186       19.5186       284.234       303.753    
  14  0.790701     -0.234835      -2.82640       2.82640       290.580       293.406    
  15  0.807456     -0.213867      -2.57403       2.57403       291.756       294.330    
  16  0.688117     -0.373796      -4.49890       4.49890       285.029       289.528    
  17  0.227000      -1.48280      -17.8466       17.8466       286.088       303.934    
  18  0.374715     -0.981589      -11.8141       11.8141       290.025       301.839    
  19  0.176077      -1.73683      -20.9040       20.9040       294.730       315.634    
  20  0.446126E-01  -3.10974      -37.4279       37.4279       293.215       330.643    
  21  0.997763E-01  -2.30482      -27.7402       27.7402       287.238       314.978    
  22  0.142978E-01  -4.24765      -51.1234       51.1234       295.939       347.063    
  23  0.652216     -0.427379      -5.14381       5.14381       297.817       302.960    
  24  0.909797     -0.945339E-01  -1.13778       1.13778       295.168       296.305    
  25  0.145015      -1.93092      -23.2400       23.2400       296.577       319.817    
  26  0.189723      -1.66219      -20.0056       20.0056       282.302       302.308    
  27  0.260997      -1.34324      -16.1669       16.1669       297.865       314.032    
  28  0.167755      -1.78525      -21.4867       21.4867       301.595       323.082    
  29  0.148939      -1.90422      -22.9186       22.9186       283.403       306.322    
  30  0.209474      -1.56315      -18.8137       18.8137       300.448       319.262    
  31  0.594522     -0.519998      -6.25853       6.25853       291.528       297.786    
  32  0.401703     -0.912043      -10.9771       10.9771       305.352       316.329    
  33  0.306469      -1.18264      -14.2339       14.2339       304.685       318.919    
  34  0.879335     -0.128589      -1.54766       1.54766       298.353       299.900    
  35  0.920707     -0.826134E-01 -0.994310      0.994310       292.278       293.272    
  36  0.215616      -1.53425      -18.4658       18.4658       294.889       313.354    
  37  0.821708     -0.196370      -2.36346       2.36346       292.428       294.791    
  38  0.935240     -0.669517E-01 -0.805810      0.805810       286.521       287.327    
  39  0.691932     -0.368268      -4.43236       4.43236       304.814       309.246    
  40  0.493152     -0.706938      -8.50848       8.50848       307.590       316.099    
  41  0.362160      -1.01567      -12.2243       12.2243       296.364       308.589    
  42  0.636318     -0.452056      -5.44081       5.44081       297.677       303.118    
  43  0.178369      -1.72390      -20.7483       20.7483       301.361       322.110    
  44  0.987372     -0.127089E-01 -0.152960      0.152960       311.734       311.887    
  45  0.557690     -0.583953      -7.02828       7.02828       275.413       282.442    
  46  0.434391     -0.833811      -10.0355       10.0355       298.574       308.609    
  47  0.759572     -0.275001      -3.30982       3.30982       277.861       281.170    
  48  0.578559     -0.547214      -6.58610       6.58610       313.947       320.533    
  49  0.262392      -1.33792      -16.1027       16.1027       297.530       313.633    
  50  0.615619     -0.485127      -5.83884       5.83884       304.975       310.813    
  51  0.580502     -0.543861      -6.54575       6.54575       311.913       318.459    
  52  0.434749     -0.832986      -10.0256       10.0256       318.584       328.609    
  53  0.741569     -0.298987      -3.59852       3.59852       302.903       306.502    
  54  0.207475      -1.57274      -18.9291       18.9291       304.134       323.064    
  55  0.610742     -0.493081      -5.93457       5.93457       320.470       326.405    
  56  0.746759     -0.292013      -3.51458       3.51458       291.268       294.782    
  57  0.846394     -0.166771      -2.00720       2.00720       300.312       302.319    
  58  0.114011      -2.17146      -26.1350       26.1350       323.311       349.446    
  59  0.148375      -1.90801      -22.9642       22.9642       306.186       329.150    
  60  0.610037     -0.494236      -5.94847       5.94847       314.938       320.886    
  61  0.104069      -2.26270      -27.2332       27.2332       321.570       348.804    
  62  0.570721     -0.560855      -6.75028       6.75028       297.624       304.374    
  63  0.154528      -1.86738      -22.4752       22.4752       317.072       339.547    
  64  0.365341      -1.00692      -12.1190       12.1190       381.647       393.766    
loop,thermsimp(1:2)       56   16.8869      0.447768    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    317        300.32          0.88          1.09         23.12          0.08          0.04         25.20
Just calling func    0   0         25.21


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    300.32
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    12.0357               316
loop is:       56
neval is:      316
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       56      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    12.0357               316
loop is:       57
neval is:      316


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      316
neval,tstepnext:      316     316

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.303901      -1.19105      -14.3352       14.3352       268.366       282.701    
   2  0.729962     -0.314762      -3.78838       3.78838       276.843       280.631    
   3  0.788140     -0.238080      -2.86546       2.86546       278.061       280.927    
   4  0.718031     -0.331242      -3.98673       3.98673       277.861       281.847    
   5  0.603575     -0.504885      -6.07664       6.07664       275.413       281.490    
   6  0.287757      -1.24564      -14.9921       14.9921       277.280       292.272    
   7  0.690986     -0.369635      -4.44881       4.44881       282.567       287.016    
   8  0.976315     -0.239695E-01 -0.288490      0.288490       282.445       282.733    
   9  0.983892     -0.162393E-01 -0.195451      0.195451       281.731       281.927    
  10  0.858769     -0.152255      -1.83249       1.83249       281.252       283.084    
  11  0.968889     -0.316048E-01 -0.380386      0.380386       282.492       282.872    
  12  0.364921      -1.00807      -12.1329       12.1329       270.221       282.354    
  13  0.540930     -0.614466      -7.39553       7.39553       286.521       293.917    
  14  0.812278E-01  -2.51050      -30.2156       30.2156       285.029       315.245    
  15  0.919841     -0.835539E-01  -1.00563       1.00563       292.278       293.284    
  16  0.275462      -1.28930      -15.5177       15.5177       290.580       306.097    
  17  0.704362     -0.350463      -4.21807       4.21807       291.756       295.974    
  18  0.896809     -0.108913      -1.31084       1.31084       291.268       292.579    
  19  0.166873      -1.79052      -21.5502       21.5502       292.428       313.978    
  20  0.927791E-02  -4.68012      -56.3285       56.3285       295.168       351.496    
  21  0.906733     -0.979074E-01  -1.17838       1.17838       291.528       292.706    
  22  0.575421     -0.552654      -6.65157       6.65157       281.266       287.918    
  23  0.975069     -0.252469E-01 -0.303865      0.303865       298.353       298.657    
  24  0.610094     -0.494143      -5.94735       5.94735       290.025       295.972    
  25  0.823028     -0.194765      -2.34413       2.34413       282.302       284.646    
  26  0.709022     -0.343869      -4.13870       4.13870       300.312       304.451    
  27  0.956893     -0.440633E-01 -0.530333      0.530333       297.817       298.347    
  28  0.897850E-01  -2.41034      -29.0101       29.0101       297.677       326.687    
  29  0.836996     -0.177936      -2.14159       2.14159       284.234       286.376    
  30  0.688664     -0.373001      -4.48933       4.48933       286.088       290.577    
  31  0.587454     -0.531957      -6.40247       6.40247       297.624       304.026    
  32  0.880970     -0.126731      -1.52530       1.52530       283.403       284.928    
  33  0.506724     -0.679789      -8.18173       8.18173       302.903       311.085    
  34  0.802262     -0.220320      -2.65170       2.65170       296.364       299.016    
  35  0.764787E-01  -2.57074      -30.9407       30.9407       298.574       329.514    
  36  0.907101     -0.975014E-01  -1.17350       1.17350       304.814       305.987    
  37  0.797350     -0.226461      -2.72562       2.72562       304.975       307.700    
  38  0.257375      -1.35722      -16.3351       16.3351       311.734       328.069    
  39  0.643190     -0.441315      -5.31153       5.31153       294.889       300.200    
  40  0.513768     -0.665984      -8.01558       8.01558       297.530       305.546    
  41  0.850264     -0.162208      -1.95229       1.95229       297.865       299.817    
  42  0.200819      -1.60535      -19.3215       19.3215       287.238       306.560    
  43  0.331940      -1.10280      -13.2730       13.2730       294.730       308.003    
  44  0.900490     -0.104816      -1.26153       1.26153       307.590       308.852    
  45  0.618957     -0.479719      -5.77376       5.77376       305.352       311.126    
  46  0.395756     -0.926956      -11.1566       11.1566       311.913       323.070    
  47  0.528166     -0.638345      -7.68293       7.68293       304.685       312.368    
  48  0.586635     -0.533352      -6.41926       6.41926       300.448       306.867    
  49  0.705559     -0.348765      -4.19763       4.19763       296.577       300.775    
  50  0.191018      -1.65539      -19.9237       19.9237       313.947       333.871    
  51  0.581133     -0.542775      -6.53267       6.53267       314.938       321.470    
  52  0.297529      -1.21224      -14.5902       14.5902       301.361       315.951    
  53  0.532486     -0.630198      -7.58487       7.58487       304.134       311.719    
  54  0.396084     -0.926129      -11.1466       11.1466       301.595       312.742    
  55  0.209334      -1.56382      -18.8217       18.8217       320.470       339.292    
  56  0.632068     -0.458758      -5.52147       5.52147       318.584       324.105    
  57  0.941424     -0.603613E-01 -0.726490      0.726490       306.186       306.912    
  58  0.875379     -0.133099      -1.60194       1.60194       293.215       294.817    
  59  0.497903     -0.697350      -8.39309       8.39309       277.598       285.991    
  60  0.840483     -0.173779      -2.09155       2.09155       317.072       319.164    
  61  0.230101      -1.46924      -17.6833       17.6833       295.939       313.623    
  62  0.213210      -1.54548      -18.6009       18.6009       321.570       340.171    
  63  0.412073     -0.886554      -10.6703       10.6703       323.311       333.982    
  64  0.264912      -1.32836      -15.9877       15.9877       300.320       316.308    
loop,thermsimp(1:2)       57   14.3352       3.78838    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    318        289.36          0.88          1.09         23.09          0.02          0.05         25.12
Just calling func    0   0         25.12


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    319        631.64          0.88          1.09         23.12          0.02          0.05         25.15
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    289.36
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    12.0357               316
loop is:       57
neval is:      318
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       57      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    12.0357               316
loop is:       58
neval is:      318


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 




neval>tstepnex so lower away!t
---> lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
     new SAtemp,tstepnext are :    6.01785               379

 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      379
neval,tstepnext:      318     379

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.530208     -0.634486      -3.81824       3.81824       276.843       280.661    
   2  0.175946E-01  -4.04016      -24.3131       24.3131       278.061       302.374    
   3  0.419998     -0.867504      -5.22051       5.22051       275.413       280.634    
   4  0.448197E-01  -3.10511      -18.6861       18.6861       277.861       296.547    
   5  0.501784     -0.689586      -4.14982       4.14982       281.731       285.881    
   6  0.858173     -0.152949     -0.920426      0.920426       270.221       271.142    
   7  0.101932      -2.28345      -13.7415       13.7415       268.366       282.107    
   8  0.453268     -0.791273      -4.76176       4.76176       282.445       287.207    
   9  0.128092      -2.05501      -12.3667       12.3667       282.492       294.859    
  10  0.779644     -0.248918      -1.49795       1.49795       281.252       282.750    
  11  0.769943E-01  -2.56402      -15.4299       15.4299       282.302       297.732    
  12  0.140214      -1.96458      -11.8226       11.8226       283.403       295.226    
  13  0.571588     -0.559337      -3.36600       3.36600       277.598       280.964    
  14  0.455096     -0.787247      -4.73753       4.73753       284.234       288.972    
  15  0.594240     -0.520471      -3.13212       3.13212       282.567       285.699    
  16  0.833288     -0.182376      -1.09751       1.09751       281.266       282.364    
  17  0.807090E-01  -2.51691      -15.1464       15.1464       286.088       301.234    
  18  0.430313     -0.843242      -5.07450       5.07450       277.280       282.355    
  19  0.990463     -0.958277E-02 -0.576676E-01  0.576676E-01   291.268       291.325    
  20  0.907906     -0.966144E-01 -0.581410      0.581410       291.528       292.109    
  21  0.607469     -0.498455      -2.99962       2.99962       292.278       295.278    
  22  0.927102     -0.756916E-01 -0.455501      0.455501       286.521       286.977    
  23  0.379122     -0.969896      -5.83669       5.83669       293.215       299.051    
  24  0.183121E-01  -4.00019      -24.0725       24.0725       290.025       314.097    
  25  0.561966     -0.576313      -3.46816       3.46816       291.756       295.224    
  26  0.638772     -0.448208      -2.69725       2.69725       297.817       300.514    
  27  0.234202      -1.45157      -8.73533       8.73533       298.353       307.088    
  28  0.257221      -1.35782      -8.17114       8.17114       296.364       304.536    
  29  0.688379     -0.373416      -2.24716       2.24716       297.865       300.112    
  30  0.360237E-01  -3.32358      -20.0008       20.0008       294.889       314.889    
  31  0.849177     -0.163487     -0.983841      0.983841       296.577       297.561    
  32  0.324868E-01  -3.42692      -20.6227       20.6227       297.624       318.246    
  33  0.216483E-01  -3.83283      -23.0654       23.0654       300.312       323.378    
  34  0.794095     -0.230552      -1.38742       1.38742       297.530       298.918    
  35  0.453180     -0.791465      -4.76291       4.76291       304.814       309.577    
  36  0.286278      -1.25079      -7.52708       7.52708       290.580       298.107    
  37  0.931500     -0.709590E-01 -0.427021      0.427021       287.238       287.665    
  38  0.483424     -0.726861      -4.37414       4.37414       300.448       304.822    
  39  0.782276     -0.245547      -1.47767       1.47767       306.186       307.663    
  40  0.976661     -0.236156E-01 -0.142115      0.142115       304.975       305.117    
  41  0.707981     -0.345338      -2.07819       2.07819       294.730       296.808    
  42  0.101993      -2.28285      -13.7379       13.7379       307.590       321.328    
  43  0.690974E-01  -2.67224      -16.0811       16.0811       302.903       318.984    
  44  0.767576E-01  -2.56710      -15.4484       15.4484       305.352       320.801    
  45  0.584825     -0.536443      -3.22823       3.22823       304.134       307.363    
  46  0.588828     -0.529621      -3.18718       3.18718       304.685       307.872    
  47  0.894562     -0.111421     -0.670514      0.670514       301.595       302.266    
  48  0.260723      -1.34430      -8.08977       8.08977       295.939       304.029    
  49  0.773456E-01  -2.55947      -15.4025       15.4025       292.428       307.830    
  50  0.848651E-01  -2.46669      -14.8442       14.8442       285.029       299.873    
  51  0.992803     -0.722305E-02 -0.434672E-01  0.434672E-01   301.361       301.405    
  52  0.529202     -0.636386      -3.82967       3.82967       300.320       304.150    
  53  0.540374     -0.615494      -3.70395       3.70395       317.072       320.776    
  54  0.185914      -1.68247      -10.1249       10.1249       314.938       325.063    
  55  0.764153     -0.268988      -1.61873       1.61873       311.913       313.532    
  56  0.931974E-01  -2.37304      -14.2806       14.2806       318.584       332.864    
  57  0.753946     -0.282434      -1.69965       1.69965       297.677       299.377    
  58  0.279731      -1.27393      -7.66629       7.66629       311.734       319.400    
  59  0.790083     -0.235617      -1.41791       1.41791       298.574       299.992    
  60  0.179541      -1.71735      -10.3348       10.3348       313.947       324.282    
  61  0.424504     -0.856835      -5.15630       5.15630       323.311       328.468    
  62  0.359861      -1.02204      -6.15046       6.15046       320.470       326.621    
  63  0.234475      -1.45041      -8.72833       8.72833       321.570       330.299    
  64  0.320303      -1.13849      -6.85125       6.85125       289.360       296.212    
loop,thermsimp(1:2)       58   3.81824       24.3131    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    320        277.73          0.88          1.09         23.17          0.25          0.04         25.42
Just calling func    0   0         25.42


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    277.73
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    6.01785               379
loop is:       58
neval is:      319
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       58      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    6.01785               379
loop is:       59
neval is:      319


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      379
neval,tstepnext:      319     379

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.946919     -0.545412E-01 -0.328221      0.328221       270.221       270.549    
   2  0.224221      -1.49512      -8.99742       8.99742       275.413       284.411    
   3  0.699642     -0.357186      -2.14949       2.14949       276.843       278.993    
   4  0.490916     -0.711482      -4.28159       4.28159       277.598       281.879    
   5  0.204251      -1.58840      -9.55877       9.55877       268.366       277.924    
   6  0.356522      -1.03136      -6.20656       6.20656       277.280       283.487    
   7  0.745938     -0.293113      -1.76391       1.76391       281.266       283.030    
   8  0.451533     -0.795107      -4.78483       4.78483       281.252       286.037    
   9  0.101038      -2.29226      -13.7945       13.7945       282.567       296.362    
  10  0.826978     -0.189977      -1.14325       1.14325       281.731       282.875    
  11  0.212337      -1.54958      -9.32514       9.32514       286.521       295.846    
  12  0.490540     -0.712248      -4.28620       4.28620       282.445       286.731    
  13  0.672078     -0.397381      -2.39138       2.39138       287.238       289.629    
  14  0.690580     -0.370223      -2.22795       2.22795       284.234       286.462    
  15  0.513190     -0.667108      -4.01456       4.01456       291.268       295.282    
  16  0.268393      -1.31530      -7.91530       7.91530       291.528       299.443    
  17  0.896898     -0.108813     -0.654820      0.654820       282.492       283.147    
  18  0.911953     -0.921674E-01 -0.554649      0.554649       291.756       292.310    
  19  0.355703      -1.03366      -6.22039       6.22039       283.403       289.624    
  20  0.293818      -1.22479      -7.37062       7.37062       292.278       299.649    
  21  0.713392     -0.337724      -2.03237       2.03237       289.360       291.393    
  22  0.660627     -0.414565      -2.49479       2.49479       277.861       280.355    
  23  0.795097     -0.229291      -1.37984       1.37984       294.730       296.110    
  24  0.919484     -0.839428E-01 -0.505155      0.505155       296.577       297.083    
  25  0.976382     -0.239014E-01 -0.143835      0.143835       282.302       282.446    
  26  0.922195     -0.809991E-01 -0.487440      0.487440       290.580       291.067    
  27  0.436062     -0.829970      -4.99463       4.99463       297.530       302.525    
  28  0.271848      -1.30251      -7.83832       7.83832       293.215       301.053    
  29  0.389360     -0.943252      -5.67635       5.67635       297.677       303.353    
  30  0.314178E-01  -3.46038      -20.8240       20.8240       285.029       305.853    
  31  0.545460     -0.606126      -3.64757       3.64757       298.574       302.221    
  32  0.925479E-01  -2.38003      -14.3227       14.3227       297.865       312.188    
  33  0.971973     -0.284273E-01 -0.171071      0.171071       297.817       297.988    
  34  0.403500     -0.907578      -5.46166       5.46166       286.088       291.549    
  35  0.392926     -0.934133      -5.62147       5.62147       301.361       306.983    
  36  0.718758     -0.330230      -1.98727       1.98727       301.595       303.583    
  37  0.746082     -0.292920      -1.76275       1.76275       278.061       279.824    
  38  0.353478      -1.03993      -6.25816       6.25816       295.939       302.197    
  39  0.843229     -0.170517      -1.02614       1.02614       300.320       301.346    
  40  0.388011     -0.946720      -5.69722       5.69722       296.364       302.062    
  41  0.969569     -0.309034E-01 -0.185972      0.185972       300.448       300.634    
  42  0.441380E-01  -3.12043      -18.7783       18.7783       304.975       323.753    
  43  0.533000     -0.629233      -3.78663       3.78663       298.353       302.139    
  44  0.288396      -1.24342      -7.48272       7.48272       304.134       311.617    
  45  0.683115     -0.381092      -2.29335       2.29335       306.186       308.479    
  46  0.339511      -1.08025      -6.50078       6.50078       292.428       298.928    
  47  0.150420E-01  -4.19691      -25.2563       25.2563       304.685       329.941    
  48  0.141026      -1.95881      -11.7878       11.7878       304.814       316.602    
  49  0.421666     -0.863541      -5.19666       5.19666       311.913       317.110    
  50  0.953496     -0.476201E-01 -0.286571      0.286571       290.025       290.311    
  51  0.966647     -0.339215E-01 -0.204134      0.204134       294.889       295.093    
  52  0.365434      -1.00667      -6.05799       6.05799       297.624       303.682    
  53  0.314209      -1.15770      -6.96684       6.96684       302.903       309.870    
  54  0.612536     -0.490148      -2.94963       2.94963       311.734       314.684    
  55  0.962603     -0.381139E-01 -0.229364      0.229364       317.072       317.301    
  56  0.518973     -0.655904      -3.94713       3.94713       305.352       309.299    
  57  0.963657     -0.370202E-01 -0.222782      0.222782       307.590       307.813    
  58  0.423866     -0.858338      -5.16535       5.16535       300.312       305.477    
  59  0.195959      -1.62985      -9.80819       9.80819       313.947       323.755    
  60  0.108838      -2.21789      -13.3469       13.3469       314.938       328.285    
  61  0.196446      -1.62737      -9.79325       9.79325       320.470       330.263    
  62  0.950303     -0.509747E-01 -0.306758      0.306758       323.311       323.618    
  63  0.363538      -1.01187      -6.08929       6.08929       321.570       327.660    
  64  0.834223     -0.181254      -1.09076       1.09076       277.729       278.820    
loop,thermsimp(1:2)       59  0.328221       8.99742    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    321        258.73          0.88          1.09         23.10          0.01          0.05         25.14
Just calling func    0   0         25.14


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    322        246.71          0.85          1.09         23.14          0.09          0.04         25.21
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  320    258.73        4.431     -1.149      4.095     -100.0     0.4616    
                      -1.172      2.334     -100.0      2.739     0.6038    
                       1.204     -1.122      2.400      0.000      0.000    
                     -0.8487      0.000      0.000      0.000     -1.221    

                      -2.500     0.1025E+05 0.1518E+05 -970.2     -2051.    
                      -2.000     -6.791     -2.647     -4.259     -1.463    
                      -13.69     -2.264      1359.      0.000      3354.    

                       4764.      3323.      5073.      5329.      2500.    
                       4298.     0.8562E-01-0.6382E-01  0.000    -0.5222E-01
                      0.1018    -0.4056E-01 0.1077    -0.4499E-01-0.7899E-01

                     -0.8727    -0.8245      0.000     0.2992     0.8970E-01
                      0.8541E-01 0.1473     0.1733     0.1468     0.1299E-01
                     -0.1219E-01 0.1038E-01-0.2008    -0.5845      0.000    

                      -1.584     -3.454      5.916    -0.9423      0.000    
                       0.000      9.041      9.037     -5255.     -4.000    
                     -0.8501E-01-0.5673      8.831      8.396    -0.1092E+05

                      -4.000    -0.1224E-01  1.165      9.297      9.200    
                      -5494.     -4.000     0.3715     0.5719      9.452    
                       8.992     -2543.     -2.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    246.71
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    6.01785               379
loop is:       59
neval is:      321
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       59      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    6.01785               379
loop is:       60
neval is:      321


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      379
neval,tstepnext:      321     379

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.347122      -1.05808      -6.36736       6.36736       270.221       276.588    
   2  0.605757     -0.501276      -3.01660       3.01660       268.366       271.382    
   3  0.690633     -0.370146      -2.22748       2.22748       277.729       279.956    
   4  0.400665     -0.914628      -5.50409       5.50409       276.843       282.347    
   5  0.862165     -0.148309     -0.892500      0.892500       278.061       278.954    
   6  0.874011     -0.134662     -0.810376      0.810376       277.861       278.671    
   7  0.389525     -0.942826      -5.67378       5.67378       277.598       283.271    
   8  0.102225E-01  -4.58317      -27.5808       27.5808       282.302       309.883    
   9  0.102697      -2.27597      -13.6964       13.6964       281.731       295.428    
  10  0.818271     -0.200561      -1.20695       1.20695       281.266       282.473    
  11  0.888768     -0.117920     -0.709622      0.709622       282.492       283.202    
  12  0.539210     -0.617651      -3.71693       3.71693       277.280       280.997    
  13  0.317914      -1.14597      -6.89630       6.89630       275.413       282.310    
  14  0.437422     -0.826857      -4.97590       4.97590       281.252       286.228    
  15  0.925263     -0.776773E-01 -0.467450      0.467450       284.234       284.702    
  16  0.422436     -0.861717      -5.18568       5.18568       282.445       287.631    
  17  0.965248     -0.353697E-01 -0.212849      0.212849       283.403       283.616    
  18  0.771278     -0.259706      -1.56287       1.56287       287.238       288.801    
  19  0.902488     -0.102600     -0.617432      0.617432       290.025       290.642    
  20  0.512816     -0.667839      -4.01895       4.01895       290.580       294.599    
  21  0.915966     -0.877758E-01 -0.528221      0.528221       289.360       289.889    
  22  0.612605     -0.490035      -2.94896       2.94896       286.088       289.037    
  23  0.323528      -1.12847      -6.79095       6.79095       291.756       298.547    
  24  0.206646      -1.57675      -9.48864       9.48864       294.889       304.377    
  25  0.481057     -0.731769      -4.40367       4.40367       291.268       295.671    
  26  0.287887E-01  -3.54777      -21.3500       21.3500       286.521       307.871    
  27  0.996968     -0.303648E-02 -0.182731E-01  0.182731E-01   294.730       294.748    
  28  0.132770      -2.01914      -12.1509       12.1509       282.567       294.718    
  29  0.716038     -0.334023      -2.01010       2.01010       296.577       298.588    
  30  0.229552      -1.47162      -8.85601       8.85601       297.817       306.673    
  31  0.236358      -1.44241      -8.68018       8.68018       292.428       301.108    
  32  0.542780     -0.611051      -3.67721       3.67721       291.528       295.205    
  33  0.875156     -0.133353     -0.802496      0.802496       292.278       293.081    
  34  0.988730     -0.113343E-01 -0.682082E-01  0.682082E-01   300.448       300.516    
  35  0.244332      -1.40923      -8.48052       8.48052       293.215       301.695    
  36  0.659246     -0.416659      -2.50739       2.50739       300.320       302.827    
  37  0.457872     -0.781166      -4.70094       4.70094       296.364       301.065    
  38  0.380652E-01  -3.26846      -19.6691       19.6691       298.353       318.022    
  39  0.358843      -1.02487      -6.16751       6.16751       295.939       302.107    
  40  0.846233     -0.166960      -1.00474       1.00474       298.574       299.579    
  41  0.359308      -1.02358      -6.15973       6.15973       297.530       303.690    
  42  0.533329     -0.628617      -3.78292       3.78292       297.677       301.460    
  43  0.645289     -0.438058      -2.63616       2.63616       301.595       304.232    
  44  0.311850      -1.16523      -7.01219       7.01219       297.624       304.636    
  45  0.270084      -1.30902      -7.87749       7.87749       300.312       308.190    
  46  0.530313     -0.634287      -3.81704       3.81704       285.029       288.846    
  47  0.975874     -0.244213E-01 -0.146964      0.146964       301.361       301.508    
  48  0.313811      -1.15896      -6.97447       6.97447       307.590       314.565    
  49  0.932688     -0.696844E-01 -0.419350      0.419350       306.186       306.605    
  50  0.357359      -1.02901      -6.19245       6.19245       305.352       311.545    
  51  0.545837     -0.605435      -3.64341       3.64341       302.903       306.547    
  52  0.954982     -0.460626E-01 -0.277198      0.277198       304.134       304.412    
  53  0.470912     -0.753083      -4.53194       4.53194       297.865       302.397    
  54  0.719568     -0.329104      -1.98050       1.98050       311.734       313.714    
  55  0.859620     -0.151265     -0.910287      0.910287       304.814       305.724    
  56  0.544817     -0.607304      -3.65467       3.65467       311.913       315.568    
  57  0.505571E-02  -5.28724      -31.8178       31.8178       317.072       348.890    
  58  0.412350     -0.885884      -5.33111       5.33111       323.311       328.642    
  59  0.335424      -1.09236      -6.57366       6.57366       304.975       311.548    
  60  0.908603     -0.958472E-01 -0.576794      0.576794       313.947       314.524    
  61  0.434554     -0.833434      -5.01548       5.01548       321.570       326.586    
  62  0.801863     -0.220817      -1.32884       1.32884       314.938       316.267    
  63  0.567796     -0.565993      -3.40606       3.40606       304.685       308.091    
  64  0.818165     -0.200691      -1.20773       1.20773       246.707       247.915    
loop,thermsimp(1:2)       60   6.36736       3.01660    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    323        293.46          0.88          1.09         23.12          0.00          0.05         25.14
Just calling func    0   0         25.14


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    293.46
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    6.01785               379
loop is:       60
neval is:      322
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       60      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    6.01785               379
loop is:       61
neval is:      322


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      379
neval,tstepnext:      322     379

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.663917     -0.409597      -2.46489       2.46489       246.707       249.172    
   2  0.718953     -0.329960      -1.98565       1.98565       268.366       270.351    
   3  0.454275     -0.789053      -4.74840       4.74840       270.221       274.970    
   4  0.253407E-01  -3.67534      -22.1177       22.1177       277.861       299.978    
   5  0.611947     -0.491110      -2.95543       2.95543       278.061       281.017    
   6  0.234016      -1.45237      -8.74012       8.74012       277.729       286.469    
   7  0.359481E-01  -3.32568      -20.0134       20.0134       277.280       297.293    
   8  0.222118E-01  -3.80713      -22.9107       22.9107       275.413       298.324    
   9  0.905838E-01  -2.40148      -14.4517       14.4517       276.843       291.295    
  10  0.791683     -0.233594      -1.40573       1.40573       281.266       282.672    
  11  0.557734     -0.583873      -3.51366       3.51366       282.492       286.006    
  12  0.936048E-01  -2.36867      -14.2543       14.2543       277.598       291.852    
  13  0.431059     -0.841510      -5.06408       5.06408       283.403       288.467    
  14  0.225758      -1.48829      -8.95632       8.95632       284.234       293.190    
  15  0.275181E-01  -3.59291      -21.6216       21.6216       281.252       302.873    
  16  0.802517     -0.220002      -1.32394       1.32394       282.445       283.769    
  17  0.423872     -0.858323      -5.16526       5.16526       287.238       292.403    
  18  0.300971      -1.20074      -7.22588       7.22588       285.029       292.255    
  19  0.479556     -0.734895      -4.42249       4.42249       286.088       290.510    
  20  0.621838     -0.475076      -2.85894       2.85894       289.360       292.219    
  21  0.397654     -0.922172      -5.54949       5.54949       290.025       295.574    
  22  0.664976     -0.408004      -2.45531       2.45531       292.278       294.733    
  23  0.288358      -1.24355      -7.48350       7.48350       290.580       298.063    
  24  0.442017     -0.816406      -4.91301       4.91301       282.567       287.480    
  25  0.150763E-01  -4.19463      -25.2427       25.2427       294.730       319.973    
  26  0.600886     -0.509350      -3.06519       3.06519       291.528       294.593    
  27  0.162927      -1.81446      -10.9191       10.9191       281.731       292.651    
  28  0.932743     -0.696251E-01 -0.418994      0.418994       291.268       291.687    
  29  0.997186     -0.281799E-02 -0.169583E-01  0.169583E-01   291.756       291.773    
  30  0.418339     -0.871463      -5.24433       5.24433       296.577       301.822    
  31  0.694800     -0.364132      -2.19129       2.19129       298.574       300.765    
  32  0.852711     -0.159334     -0.958851      0.958851       300.448       301.407    
  33  0.624847     -0.470249      -2.82988       2.82988       296.364       299.194    
  34  0.427649     -0.849453      -5.11188       5.11188       292.428       297.540    
  35  0.149871      -1.89798      -11.4218       11.4218       297.677       309.099    
  36  0.563430     -0.573713      -3.45252       3.45252       301.361       304.814    
  37  0.860100     -0.150706     -0.906927      0.906927       293.215       294.122    
  38  0.867090E-01  -2.44520      -14.7148       14.7148       295.939       310.654    
  39  0.847848     -0.165054     -0.993268      0.993268       297.865       298.858    
  40  0.782599E-01  -2.54772      -15.3318       15.3318       300.320       315.652    
  41  0.697889E-01  -2.66228      -16.0212       16.0212       297.530       313.552    
  42  0.422765     -0.860939      -5.18100       5.18100       301.595       306.776    
  43  0.158365      -1.84286      -11.0900       11.0900       294.889       305.979    
  44  0.518935     -0.655976      -3.94756       3.94756       304.134       308.082    
  45  0.430406     -0.843027      -5.07321       5.07321       297.624       302.697    
  46  0.639805     -0.446592      -2.68752       2.68752       304.814       307.501    
  47  0.830453E-01  -2.48837      -14.9746       14.9746       302.903       317.878    
  48  0.639384     -0.447250      -2.69148       2.69148       306.186       308.877    
  49  0.833791     -0.181773      -1.09388       1.09388       297.817       298.910    
  50  0.453972     -0.789720      -4.75241       4.75241       286.521       291.273    
  51  0.542088     -0.612327      -3.68489       3.68489       304.685       308.370    
  52  0.271321      -1.30445      -7.84999       7.84999       300.312       308.162    
  53  0.176790      -1.73279      -10.4277       10.4277       282.302       292.730    
  54  0.511778     -0.669865      -4.03115       4.03115       305.352       309.383    
  55  0.632948     -0.457366      -2.75236       2.75236       304.975       307.727    
  56  0.252444      -1.37657      -8.28396       8.28396       311.734       320.018    
  57  0.726388     -0.319671      -1.92373       1.92373       313.947       315.871    
  58  0.483977     -0.725718      -4.36726       4.36726       307.590       311.958    
  59  0.497846     -0.697465      -4.19724       4.19724       311.913       316.110    
  60  0.369093     -0.996706      -5.99802       5.99802       314.938       320.936    
  61  0.225129      -1.49108      -8.97311       8.97311       298.353       307.326    
  62  0.908331E-01  -2.39873      -14.4352       14.4352       321.570       336.006    
  63  0.196370      -1.62776      -9.79559       9.79559       323.311       333.107    
  64  0.448748     -0.801293      -4.82206       4.82206       293.460       298.282    
loop,thermsimp(1:2)       61   2.46489       1.98565    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    324        275.87          0.88          1.09         23.12          0.09          0.04         25.22
Just calling func    0   0         25.22


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    275.87
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    6.01785               379
loop is:       61
neval is:      323
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       61      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    6.01785               379
loop is:       62
neval is:      323


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      379
neval,tstepnext:      323     379

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.985932     -0.141675E-01 -0.852577E-01  0.852577E-01   246.707       246.792    
   2  0.420912     -0.865330      -5.20743       5.20743       268.366       273.573    
   3  0.617210     -0.482545      -2.90388       2.90388       270.221       273.125    
   4  0.787846     -0.238453      -1.43498       1.43498       278.061       279.496    
   5  0.608770     -0.496315      -2.98675       2.98675       281.266       284.253    
   6  0.925975     -0.769083E-01 -0.462822      0.462822       282.445       282.908    
   7  0.545822     -0.605462      -3.64358       3.64358       282.492       286.136    
   8  0.240142      -1.42653      -8.58461       8.58461       277.729       286.314    
   9  0.800257     -0.222822      -1.34091       1.34091       282.567       283.908    
  10  0.250149      -1.38570      -8.33893       8.33893       283.403       291.742    
  11  0.814044     -0.205741      -1.23812       1.23812       286.088       287.326    
  12  0.897552     -0.108084     -0.650433      0.650433       286.521       287.171    
  13  0.807530     -0.213775      -1.28647       1.28647       276.843       278.129    
  14  0.369031     -0.996874      -5.99903       5.99903       291.268       297.267    
  15  0.892620     -0.113594     -0.683592      0.683592       291.756       292.439    
  16  0.992736     -0.729054E-02 -0.438734E-01  0.438734E-01   277.598       277.641    
  17  0.264259      -1.33083      -8.00871       8.00871       289.360       297.369    
  18  0.164586      -1.80432      -10.8581       10.8581       285.029       295.887    
  19  0.594739     -0.519633      -3.12707       3.12707       287.238       290.365    
  20  0.766319     -0.266156      -1.60169       1.60169       281.731       283.333    
  21  0.392663     -0.934804      -5.62550       5.62550       282.302       287.928    
  22  0.900399     -0.104917     -0.631377      0.631377       284.234       284.866    
  23  0.853164E-01  -2.46139      -14.8123       14.8123       293.215       308.027    
  24  0.753181     -0.283450      -1.70576       1.70576       291.528       293.234    
  25  0.801958     -0.220699      -1.32813       1.32813       292.278       293.606    
  26  0.840206     -0.174108      -1.04776       1.04776       290.025       291.073    
  27  0.899787     -0.105597     -0.635469      0.635469       277.280       277.916    
  28  0.555629     -0.587654      -3.53641       3.53641       292.428       295.964    
  29  0.117481E-01  -4.44406      -26.7437       26.7437       290.580       317.323    
  30  0.228476      -1.47632      -8.88428       8.88428       293.460       302.344    
  31  0.121877      -2.10474      -12.6660       12.6660       275.413       288.079    
  32  0.475375     -0.743652      -4.47518       4.47518       297.865       302.340    
  33  0.208734      -1.56669      -9.42812       9.42812       297.817       307.245    
  34  0.680231     -0.385322      -2.31881       2.31881       296.364       298.683    
  35  0.211647      -1.55284      -9.34474       9.34474       277.861       287.205    
  36  0.982763     -0.173870E-01 -0.104633      0.104633       298.574       298.678    
  37  0.819904     -0.198568      -1.19495       1.19495       300.448       301.643    
  38  0.282339      -1.26465      -7.61046       7.61046       296.577       304.188    
  39  0.391986     -0.936529      -5.63589       5.63589       297.624       303.260    
  40  0.218050      -1.52303      -9.16537       9.16537       281.252       290.417    
  41  0.236244      -1.44289      -8.68310       8.68310       301.361       310.044    
  42  0.544673     -0.607570      -3.65626       3.65626       294.889       298.545    
  43  0.721937     -0.325818      -1.96072       1.96072       301.595       303.556    
  44  0.649728     -0.431202      -2.59491       2.59491       298.353       300.948    
  45  0.641823     -0.443443      -2.66857       2.66857       304.814       307.483    
  46  0.597293     -0.515347      -3.10128       3.10128       304.975       308.076    
  47  0.467405     -0.760558      -4.57692       4.57692       304.134       308.711    
  48  0.676900     -0.390232      -2.34836       2.34836       300.312       302.661    
  49  0.925913     -0.769750E-01 -0.463224      0.463224       304.685       305.148    
  50  0.692551     -0.367374      -2.21080       2.21080       306.186       308.397    
  51  0.161390      -1.82393      -10.9761       10.9761       297.677       308.653    
  52  0.513279     -0.666936      -4.01352       4.01352       305.352       309.366    
  53  0.379540     -0.968796      -5.83007       5.83007       295.939       301.769    
  54  0.557165     -0.584894      -3.51980       3.51980       307.590       311.110    
  55  0.459054     -0.778587      -4.68542       4.68542       297.530       302.216    
  56  0.466253     -0.763026      -4.59177       4.59177       300.320       304.912    
  57  0.635692E-01  -2.75563      -16.5829       16.5829       313.947       330.530    
  58  0.591279     -0.525467      -3.16218       3.16218       311.913       315.075    
  59  0.344168      -1.06663      -6.41879       6.41879       302.903       309.322    
  60  0.119291      -2.12619      -12.7951       12.7951       294.730       307.525    
  61  0.399057E-01  -3.22124      -19.3849       19.3849       311.734       331.119    
  62  0.737545     -0.304428      -1.83200       1.83200       314.938       316.770    
  63  0.855773     -0.155750     -0.937280      0.937280       323.311       324.249    
  64  0.604062E-01  -2.80666      -16.8901       16.8901       275.872       292.762    
loop,thermsimp(1:2)       62  0.852577E-01   5.20743    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    325        273.89          0.88          1.09         23.12          0.00          0.04         25.13
Just calling func    0   0         25.13


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    273.89
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    6.01785               379
loop is:       62
neval is:      324
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       62      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    6.01785               379
loop is:       63
neval is:      324


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      379
neval,tstepnext:      324     379

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.984982     -0.151315E-01 -0.910591E-01  0.910591E-01   246.707       246.798    
   2  0.760415     -0.273890      -1.64823       1.64823       270.221       271.869    
   3  0.328612      -1.11288      -6.69712       6.69712       268.366       275.063    
   4  0.164880      -1.80254      -10.8474       10.8474       277.598       288.445    
   5  0.706606     -0.347282      -2.08989       2.08989       277.280       279.370    
   6  0.832070     -0.183839      -1.10632       1.10632       276.843       277.949    
   7  0.231505      -1.46315      -8.80503       8.80503       278.061       286.866    
   8  0.802671E-01  -2.52240      -15.1794       15.1794       282.445       297.624    
   9  0.116349      -2.15116      -12.9454       12.9454       281.731       294.677    
  10  0.874222     -0.134421     -0.808927      0.808927       282.567       283.376    
  11  0.729333     -0.315625      -1.89939       1.89939       281.266       283.166    
  12  0.301675      -1.19841      -7.21182       7.21182       284.234       291.446    
  13  0.496896     -0.699375      -4.20873       4.20873       282.492       286.701    
  14  0.692174     -0.367918      -2.21408       2.21408       277.729       279.943    
  15  0.717718     -0.331678      -1.99599       1.99599       286.521       288.517    
  16  0.867334E-01  -2.44492      -14.7131       14.7131       277.861       292.574    
  17  0.762934     -0.270584      -1.62833       1.62833       286.088       287.716    
  18  0.966741     -0.338246E-01 -0.203551      0.203551       282.302       282.506    
  19  0.375386     -0.979801      -5.89630       5.89630       275.413       281.310    
  20  0.878716     -0.129293     -0.778066      0.778066       287.238       288.016    
  21  0.238969      -1.43142      -8.61408       8.61408       281.252       289.866    
  22  0.939578     -0.623249E-01 -0.375062      0.375062       290.025       290.400    
  23  0.694828     -0.364091      -2.19104       2.19104       283.403       285.594    
  24  0.869149     -0.140241     -0.843946      0.843946       291.756       292.600    
  25  0.310010      -1.17115      -7.04781       7.04781       275.872       282.920    
  26  0.831753     -0.184219      -1.10860       1.10860       291.528       292.636    
  27  0.621050     -0.476344      -2.86656       2.86656       292.278       295.145    
  28  0.902274     -0.102837     -0.618859      0.618859       285.029       285.648    
  29  0.341345      -1.07486      -6.46836       6.46836       292.428       298.896    
  30  0.718647     -0.330385      -1.98820       1.98820       291.268       293.256    
  31  0.489532     -0.714305      -4.29858       4.29858       289.360       293.659    
  32  0.387793     -0.947282      -5.70060       5.70060       294.889       300.589    
  33  0.576785     -0.550285      -3.31153       3.31153       298.574       301.885    
  34  0.454048     -0.789552      -4.75140       4.75140       296.364       301.116    
  35  0.532728     -0.629744      -3.78971       3.78971       298.353       302.142    
  36  0.459832     -0.776895      -4.67523       4.67523       300.448       305.123    
  37  0.784910     -0.242187      -1.45744       1.45744       295.939       297.397    
  38  0.842297     -0.171622      -1.03280       1.03280       297.530       298.563    
  39  0.967556     -0.329823E-01 -0.198483      0.198483       297.865       298.064    
  40  0.126414      -2.06819      -12.4461       12.4461       293.460       305.906    
  41  0.407002     -0.898938      -5.40967       5.40967       300.312       305.722    
  42  0.903435     -0.101551     -0.611121      0.611121       297.624       298.235    
  43  0.430116     -0.843701      -5.07726       5.07726       301.595       306.673    
  44  0.675859     -0.391771      -2.35762       2.35762       296.577       298.935    
  45  0.444470     -0.810872      -4.87970       4.87970       300.320       305.200    
  46  0.728661     -0.316547      -1.90493       1.90493       304.685       306.590    
  47  0.143617      -1.94060      -11.6782       11.6782       297.817       309.495    
  48  0.729467E-01  -2.61803      -15.7549       15.7549       304.814       320.569    
  49  0.720547     -0.327745      -1.97232       1.97232       294.730       296.702    
  50  0.742905     -0.297187      -1.78842       1.78842       293.215       295.003    
  51  0.807330     -0.214023      -1.28796       1.28796       304.975       306.262    
  52  0.387442     -0.948190      -5.70606       5.70606       306.186       311.892    
  53  0.207045      -1.57482      -9.47702       9.47702       297.677       307.154    
  54  0.823983     -0.193606      -1.16509       1.16509       304.134       305.300    
  55  0.950173E-01  -2.35370      -14.1642       14.1642       302.903       317.067    
  56  0.662008     -0.412478      -2.48223       2.48223       305.352       307.834    
  57  0.640494E-01  -2.74810      -16.5377       16.5377       301.361       317.899    
  58  0.772515     -0.258104      -1.55323       1.55323       307.590       309.144    
  59  0.204175      -1.58878      -9.56103       9.56103       311.913       321.474    
  60  0.193223      -1.64391      -9.89279       9.89279       314.938       324.831    
  61  0.846602     -0.166525      -1.00212       1.00212       290.580       291.582    
  62  0.699262E-01  -2.66031      -16.0094       16.0094       323.311       339.321    
  63  0.581483     -0.542173      -3.26272       3.26272       313.947       317.210    
  64  0.497263     -0.698636      -4.20429       4.20429       273.892       278.096    
loop,thermsimp(1:2)       63  0.910591E-01   1.64823    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    326        274.15          0.88          1.09         23.09          0.05          0.05         25.16
Just calling func    0   0         25.15


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    274.15
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    6.01785               379
loop is:       63
neval is:      325
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       63      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    6.01785               379
loop is:       64
neval is:      325


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      379
neval,tstepnext:      325     379

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.964311     -0.363416E-01 -0.218698      0.218698       246.707       246.926    
   2  0.186231      -1.68077      -10.1146       10.1146       270.221       280.336    
   3  0.127308      -2.06115      -12.4037       12.4037       268.366       280.769    
   4  0.305661      -1.18528      -7.13283       7.13283       276.843       283.976    
   5  0.685804     -0.377164      -2.26971       2.26971       273.892       276.162    
   6  0.713250     -0.337923      -2.03357       2.03357       277.280       279.314    
   7  0.562604     -0.575180      -3.46135       3.46135       277.729       281.190    
   8  0.410540     -0.890283      -5.35759       5.35759       275.413       280.771    
   9  0.667633     -0.404017      -2.43131       2.43131       282.302       284.734    
  10  0.111237      -2.19609      -13.2157       13.2157       275.872       289.088    
  11  0.987129     -0.129550E-01 -0.779611E-01  0.779611E-01   281.266       281.344    
  12  0.525481     -0.643442      -3.87214       3.87214       282.567       286.439    
  13  0.740553     -0.300358      -1.80751       1.80751       283.403       285.211    
  14  0.456748E-01  -3.08621      -18.5723       18.5723       285.029       303.602    
  15  0.831796     -0.184168      -1.10830       1.10830       282.492       283.600    
  16  0.798422     -0.225118      -1.35473       1.35473       278.061       279.416    
  17  0.985535     -0.145708E-01 -0.876846E-01  0.876846E-01   286.088       286.175    
  18  0.323340      -1.12905      -6.79445       6.79445       287.238       294.033    
  19  0.745026     -0.294336      -1.77127       1.77127       277.598       279.369    
  20  0.711871     -0.339858      -2.04522       2.04522       286.521       288.566    
  21  0.232875      -1.45725      -8.76952       8.76952       281.252       290.021    
  22  0.118192      -2.13545      -12.8508       12.8508       290.025       302.876    
  23  0.310641      -1.16912      -7.03556       7.03556       284.234       291.270    
  24  0.220899      -1.51005      -9.08726       9.08726       290.580       299.667    
  25  0.487797     -0.717856      -4.31995       4.31995       277.861       282.181    
  26  0.278848      -1.27709      -7.68532       7.68532       291.756       299.441    
  27  0.159355      -1.83662      -11.0525       11.0525       291.528       302.580    
  28  0.473156     -0.748329      -4.50333       4.50333       291.268       295.771    
  29  0.358980      -1.02449      -6.16521       6.16521       289.360       295.526    
  30  0.873266     -0.135515     -0.815507      0.815507       281.731       282.547    
  31  0.168201      -1.78260      -10.7274       10.7274       293.215       303.942    
  32  0.492581     -0.708096      -4.26121       4.26121       292.278       296.539    
  33  0.878329     -0.129734     -0.780721      0.780721       294.730       295.511    
  34  0.266147      -1.32371      -7.96587       7.96587       295.939       303.905    
  35  0.510485     -0.672394      -4.04637       4.04637       282.445       286.491    
  36  0.810074     -0.210630      -1.26754       1.26754       297.865       299.133    
  37  0.950614     -0.506467E-01 -0.304784      0.304784       297.624       297.928    
  38  0.329006      -1.11168      -6.68992       6.68992       297.530       304.220    
  39  0.934893E-01  -2.36991      -14.2617       14.2617       292.428       306.689    
  40  0.686671     -0.375900      -2.26211       2.26211       296.577       298.840    
  41  0.888060     -0.118716     -0.714417      0.714417       294.889       295.603    
  42  0.749618     -0.288192      -1.73429       1.73429       296.364       298.099    
  43  0.433754     -0.835279      -5.02658       5.02658       298.574       303.600    
  44  0.630341     -0.461494      -2.77720       2.77720       298.353       301.130    
  45  0.569388     -0.563194      -3.38921       3.38921       300.448       303.837    
  46  0.965872     -0.347242E-01 -0.208965      0.208965       300.320       300.529    
  47  0.797995     -0.225653      -1.35795       1.35795       304.134       305.492    
  48  0.716091     -0.333948      -2.00965       2.00965       300.312       302.322    
  49  0.339849      -1.07925      -6.49479       6.49479       293.460       299.955    
  50  0.202757      -1.59575      -9.60296       9.60296       304.975       314.577    
  51  0.266068      -1.32400      -7.96765       7.96765       304.685       312.653    
  52  0.985546E-01  -2.31715      -13.9442       13.9442       301.595       315.540    
  53  0.751309     -0.285938      -1.72073       1.72073       297.677       299.398    
  54  0.846042     -0.167187      -1.00610       1.00610       305.352       306.358    
  55  0.714380     -0.336340      -2.02404       2.02404       307.590       309.614    
  56  0.873273     -0.135507     -0.815461      0.815461       297.817       298.632    
  57  0.373211     -0.985610      -5.93125       5.93125       306.186       312.117    
  58  0.618869     -0.479862      -2.88773       2.88773       302.903       305.791    
  59  0.529025     -0.636720      -3.83168       3.83168       313.947       317.779    
  60  0.659913E-01  -2.71823      -16.3579       16.3579       301.361       317.719    
  61  0.541361E-01  -2.91625      -17.5496       17.5496       304.814       322.364    
  62  0.785735E-01  -2.54372      -15.3077       15.3077       311.913       327.221    
  63  0.569382     -0.563203      -3.38927       3.38927       314.938       318.327    
  64  0.564569     -0.571693      -3.44036       3.44036       274.154       277.594    
loop,thermsimp(1:2)       64  0.218698       10.1146    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    327        285.00          0.86          1.08         23.02          0.16          0.05         25.17
Just calling func    0   0         25.17


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    285.00
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    6.01785               379
loop is:       64
neval is:      326
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       64      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    6.01785               379
loop is:       65
neval is:      326


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      379
neval,tstepnext:      326     379

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.424550     -0.856726      -5.15565       5.15565       246.707       251.863    
   2  0.350039      -1.04971      -6.31699       6.31699       273.892       280.209    
   3  0.872911     -0.135921     -0.817953      0.817953       274.154       274.972    
   4  0.829005     -0.187529      -1.12852       1.12852       277.280       278.409    
   5  0.201827      -1.60035      -9.63064       9.63064       277.598       287.228    
   6  0.735791     -0.306809      -1.84633       1.84633       278.061       279.908    
   7  0.985788     -0.143135E-01 -0.861363E-01  0.861363E-01   270.221       270.307    
   8  0.962727     -0.379858E-01 -0.228593      0.228593       268.366       268.594    
   9  0.796954     -0.226958      -1.36580       1.36580       275.413       276.779    
  10  0.563149     -0.574211      -3.45551       3.45551       277.729       281.184    
  11  0.776846     -0.252513      -1.51959       1.51959       281.266       282.786    
  12  0.921010     -0.822839E-01 -0.495172      0.495172       277.861       278.356    
  13  0.884938     -0.122238     -0.735611      0.735611       281.731       282.467    
  14  0.850974     -0.161373     -0.971119      0.971119       282.492       283.463    
  15  0.391065     -0.938882      -5.65005       5.65005       276.843       282.493    
  16  0.150921      -1.89100      -11.3797       11.3797       282.302       293.682    
  17  0.295162      -1.22023      -7.34316       7.34316       283.403       290.746    
  18  0.662567     -0.411634      -2.47715       2.47715       286.088       288.565    
  19  0.893994     -0.112056     -0.674335      0.674335       282.567       283.242    
  20  0.103282      -2.27029      -13.6623       13.6623       282.445       296.107    
  21  0.416341     -0.876251      -5.27314       5.27314       286.521       291.794    
  22  0.986101E-01  -2.31658      -13.9408       13.9408       275.872       289.813    
  23  0.617817E-01  -2.78415      -16.7546       16.7546       281.252       298.006    
  24  0.371945     -0.989010      -5.95171       5.95171       284.234       290.186    
  25  0.884755     -0.122444     -0.736851      0.736851       287.238       287.975    
  26  0.584237     -0.537449      -3.23429       3.23429       294.730       297.964    
  27  0.239981      -1.42719      -8.58864       8.58864       289.360       297.949    
  28  0.106477      -2.23982      -13.4789       13.4789       294.889       308.368    
  29  0.142954      -1.94523      -11.7061       11.7061       291.268       302.974    
  30  0.802284     -0.220292      -1.32568       1.32568       292.278       293.604    
  31  0.373571     -0.984648      -5.92546       5.92546       297.624       303.549    
  32  0.617091     -0.482739      -2.90505       2.90505       296.364       299.269    
  33  0.813617     -0.206266      -1.24128       1.24128       297.817       299.058    
  34  0.219787E-01  -3.81768      -22.9742       22.9742       296.577       319.552    
  35  0.398995     -0.918807      -5.52924       5.52924       297.865       303.394    
  36  0.906985     -0.976296E-01 -0.587520      0.587520       297.677       298.264    
  37  0.259146E-01  -3.65295      -21.9829       21.9829       291.756       313.739    
  38  0.347543      -1.05687      -6.36007       6.36007       290.580       296.940    
  39  0.879549     -0.128346     -0.772365      0.772365       293.460       294.233    
  40  0.618015     -0.481242      -2.89604       2.89604       300.320       303.216    
  41  0.173348      -1.75246      -10.5460       10.5460       298.353       308.899    
  42  0.324418      -1.12572      -6.77442       6.77442       300.312       307.087    
  43  0.426503     -0.852135      -5.12802       5.12802       291.528       296.656    
  44  0.672650     -0.396530      -2.38626       2.38626       290.025       292.411    
  45  0.500711     -0.691727      -4.16271       4.16271       298.574       302.737    
  46  0.457446     -0.782097      -4.70654       4.70654       285.029       289.736    
  47  0.408507     -0.895245      -5.38745       5.38745       300.448       305.836    
  48  0.649058     -0.432234      -2.60112       2.60112       295.939       298.540    
  49  0.275220      -1.29018      -7.76413       7.76413       293.215       300.979    
  50  0.706820     -0.346979      -2.08807       2.08807       297.530       299.618    
  51  0.596044     -0.517441      -3.11388       3.11388       304.134       307.248    
  52  0.362601      -1.01445      -6.10482       6.10482       302.903       309.008    
  53  0.934637     -0.675969E-01 -0.406788      0.406788       305.352       305.759    
  54  0.724055     -0.322888      -1.94309       1.94309       292.428       294.371    
  55  0.871040     -0.138067     -0.830866      0.830866       307.590       308.421    
  56  0.722457     -0.325097      -1.95638       1.95638       306.186       308.142    
  57  0.840721     -0.173495      -1.04407       1.04407       304.685       305.729    
  58  0.702714     -0.352805      -2.12313       2.12313       304.975       307.098    
  59  0.436737     -0.828424      -4.98533       4.98533       301.595       306.581    
  60  0.419753E-01  -3.17067      -19.0806       19.0806       301.361       320.442    
  61  0.588078     -0.530895      -3.19485       3.19485       313.947       317.142    
  62  0.762320     -0.271389      -1.63318       1.63318       314.938       316.571    
  63  0.646142     -0.436736      -2.62821       2.62821       304.814       307.442    
  64  0.940150     -0.617158E-01 -0.371396      0.371396       284.996       285.367    
loop,thermsimp(1:2)       65   5.15565       6.31699    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    328        283.13          0.88          1.09         23.10          0.07          0.04         25.19
Just calling func    0   0         25.19


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    283.13
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    6.01785               379
loop is:       65
neval is:      327
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       65      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    6.01785               379
loop is:       66
neval is:      327


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      379
neval,tstepnext:      327     379

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.474155     -0.746220      -4.49064       4.49064       246.707       251.198    
   2  0.162949E-01  -4.11691      -24.7749       24.7749       268.366       293.141    
   3  0.560104     -0.579632      -3.48814       3.48814       270.221       273.709    
   4  0.583629     -0.538490      -3.24055       3.24055       274.154       277.395    
   5  0.794243     -0.230366      -1.38631       1.38631       275.413       276.800    
   6  0.183626E-01  -3.99744      -24.0560       24.0560       277.861       301.917    
   7  0.642495     -0.442397      -2.66228       2.66228       277.280       279.942    
   8  0.611061E-02  -5.09773      -30.6773       30.6773       278.061       308.739    
   9  0.974115E-01  -2.32881      -14.0144       14.0144       273.892       287.906    
  10  0.817249E-01  -2.50440      -15.0711       15.0711       277.729       292.800    
  11  0.644422     -0.439401      -2.64425       2.64425       281.731       284.376    
  12  0.378181     -0.972383      -5.85165       5.85165       276.843       282.695    
  13  0.105422      -2.24978      -13.5388       13.5388       281.266       294.805    
  14  0.713647     -0.337367      -2.03022       2.03022       282.567       284.597    
  15  0.602100     -0.507333      -3.05305       3.05305       282.492       285.545    
  16  0.746624     -0.292194      -1.75838       1.75838       284.996       286.754    
  17  0.687673     -0.374442      -2.25334       2.25334       277.598       279.851    
  18  0.356323      -1.03192      -6.20993       6.20993       287.238       293.448    
  19  0.631203     -0.460128      -2.76898       2.76898       286.088       288.857    
  20  0.348432      -1.05431      -6.34469       6.34469       285.029       291.374    
  21  0.200848      -1.60521      -9.65989       9.65989       275.872       285.532    
  22  0.863860     -0.146345     -0.880680      0.880680       284.234       285.115    
  23  0.278415      -1.27864      -7.69467       7.69467       283.403       291.098    
  24  0.871038     -0.138069     -0.830881      0.830881       286.521       287.352    
  25  0.581010     -0.542987      -3.26761       3.26761       290.025       293.292    
  26  0.960519     -0.402815E-01 -0.242408      0.242408       292.278       292.521    
  27  0.104828      -2.25543      -13.5728       13.5728       282.302       295.875    
  28  0.907238     -0.973501E-01 -0.585838      0.585838       293.460       294.046    
  29  0.685005     -0.378330      -2.27673       2.27673       292.428       294.704    
  30  0.239566E-01  -3.73151      -22.4557       22.4557       282.445       304.901    
  31  0.643900     -0.440211      -2.64912       2.64912       291.528       294.177    
  32  0.526819     -0.640898      -3.85683       3.85683       290.580       294.437    
  33  0.463387     -0.769192      -4.62888       4.62888       289.360       293.989    
  34  0.847158E-01  -2.46845      -14.8548       14.8548       294.730       309.585    
  35  0.134368E-01  -4.30976      -25.9355       25.9355       281.252       307.187    
  36  0.141068      -1.95851      -11.7860       11.7860       297.677       309.463    
  37  0.239867      -1.42767      -8.59150       8.59150       295.939       304.531    
  38  0.317049      -1.14870      -6.91269       6.91269       297.817       304.729    
  39  0.925847     -0.770459E-01 -0.463651      0.463651       296.364       296.828    
  40  0.939258     -0.626649E-01 -0.377108      0.377108       297.530       297.907    
  41  0.111598      -2.19286      -13.1963       13.1963       293.215       306.411    
  42  0.357545      -1.02849      -6.18931       6.18931       298.574       304.763    
  43  0.902640     -0.102432     -0.616419      0.616419       291.268       291.884    
  44  0.914421     -0.894640E-01 -0.538381      0.538381       300.320       300.858    
  45  0.320420      -1.13812      -6.84904       6.84904       297.865       304.714    
  46  0.341333      -1.07490      -6.46857       6.46857       297.624       304.092    
  47  0.509727     -0.673879      -4.05530       4.05530       304.685       308.740    
  48  0.130581E-02  -6.64093      -39.9641       39.9641       305.352       345.316    
  49  0.105413      -2.24987      -13.5393       13.5393       300.448       313.988    
  50  0.743306     -0.296647      -1.78518       1.78518       301.595       303.381    
  51  0.114013      -2.17144      -13.0674       13.0674       300.312       313.380    
  52  0.225326      -1.49021      -8.96783       8.96783       304.975       313.942    
  53  0.131158      -2.03135      -12.2244       12.2244       304.134       316.359    
  54  0.886877     -0.120049     -0.722435      0.722435       304.814       305.536    
  55  0.202581      -1.59661      -9.60818       9.60818       306.186       315.794    
  56  0.890722     -0.115722     -0.696400      0.696400       294.889       295.585    
  57  0.154728      -1.86608      -11.2298       11.2298       307.590       318.820    
  58  0.246051      -1.40222      -8.43832       8.43832       298.353       306.791    
  59  0.936822     -0.652622E-01 -0.392738      0.392738       302.903       303.296    
  60  0.803405     -0.218896      -1.31728       1.31728       291.756       293.073    
  61  0.621921E-01  -2.77753      -16.7147       16.7147       314.938       331.653    
  62  0.114098      -2.17070      -13.0630       13.0630       313.947       327.010    
  63  0.750290     -0.287295      -1.72890       1.72890       296.577       298.306    
  64  0.946840     -0.546256E-01 -0.328729      0.328729       283.134       283.463    
loop,thermsimp(1:2)       66   4.49064       24.7749    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    329        273.63          0.88          1.09         23.12          0.02          0.04         25.16
Just calling func    0   0         25.17


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    273.63
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    6.01785               379
loop is:       66
neval is:      328
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       66      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    6.01785               379
loop is:       67
neval is:      328


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      379
neval,tstepnext:      328     379

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.711215     -0.340780      -2.05076       2.05076       246.707       248.758    
   2  0.492413     -0.708438      -4.26327       4.26327       270.221       274.484    
   3  0.156563      -1.85430      -11.1589       11.1589       275.413       286.572    
   4  0.185270      -1.68594      -10.1457       10.1457       274.154       284.300    
   5  0.685983     -0.376903      -2.26814       2.26814       277.598       279.866    
   6  0.518581     -0.656659      -3.95167       3.95167       277.280       281.232    
   7  0.430667     -0.842421      -5.06956       5.06956       276.843       281.913    
   8  0.748228     -0.290047      -1.74546       1.74546       283.134       284.880    
   9  0.348167      -1.05507      -6.34927       6.34927       281.731       288.081    
  10  0.281980E-01  -3.56850      -21.4747       21.4747       282.567       304.042    
  11  0.670749     -0.399360      -2.40329       2.40329       284.234       286.637    
  12  0.225031      -1.49152      -8.97573       8.97573       275.872       284.848    
  13  0.258016      -1.35474      -8.15259       8.15259       282.492       290.645    
  14  0.122388      -2.10056      -12.6408       12.6408       284.996       297.637    
  15  0.556210     -0.586609      -3.53012       3.53012       286.521       290.051    
  16  0.938933     -0.630108E-01 -0.379190      0.379190       273.892       274.271    
  17  0.440352     -0.820180      -4.93572       4.93572       286.088       291.023    
  18  0.779048     -0.249683      -1.50256       1.50256       283.403       284.906    
  19  0.929725     -0.728667E-01 -0.438500      0.438500       285.029       285.468    
  20  0.330740      -1.10642      -6.65829       6.65829       291.268       297.926    
  21  0.214890      -1.53763      -9.25322       9.25322       292.278       301.531    
  22  0.363221      -1.01274      -6.09454       6.09454       277.729       283.823    
  23  0.681309     -0.383740      -2.30929       2.30929       291.756       294.065    
  24  0.107313      -2.23200      -13.4319       13.4319       268.366       281.798    
  25  0.622524     -0.473973      -2.85230       2.85230       290.025       292.877    
  26  0.532378     -0.630402      -3.79366       3.79366       287.238       291.032    
  27  0.298562      -1.20878      -7.27424       7.27424       289.360       296.635    
  28  0.432099     -0.839100      -5.04958       5.04958       293.460       298.510    
  29  0.243978      -1.41068      -8.48925       8.48925       291.528       300.017    
  30  0.581243     -0.542587      -3.26520       3.26520       290.580       293.845    
  31  0.897127E-01  -2.41114      -14.5099       14.5099       292.428       306.938    
  32  0.738124     -0.303644      -1.82728       1.82728       281.266       283.093    
  33  0.462727     -0.770619      -4.63746       4.63746       294.889       299.526    
  34  0.984641E-01  -2.31806      -13.9497       13.9497       282.302       296.252    
  35  0.641923     -0.443287      -2.66763       2.66763       296.364       299.032    
  36  0.334628      -1.09474      -6.58796       6.58796       297.530       304.118    
  37  0.482851     -0.728048      -4.38128       4.38128       296.577       300.959    
  38  0.826279     -0.190822      -1.14834       1.14834       300.320       301.468    
  39  0.966417     -0.341596E-01 -0.205567      0.205567       277.861       278.066    
  40  0.236833      -1.44040      -8.66811       8.66811       302.903       311.571    
  41  0.274744      -1.29192      -7.77455       7.77455       301.595       309.370    
  42  0.310307      -1.17019      -7.04204       7.04204       297.624       304.666    
  43  0.697298     -0.360543      -2.16969       2.16969       295.939       298.109    
  44  0.239072      -1.43099      -8.61148       8.61148       297.865       306.477    
  45  0.809729     -0.211055      -1.27010       1.27010       297.817       299.087    
  46  0.651880     -0.427895      -2.57500       2.57500       298.574       301.149    
  47  0.515020     -0.663550      -3.99314       3.99314       282.445       286.438    
  48  0.359059      -1.02427      -6.16389       6.16389       304.814       310.978    
  49  0.516010E-02  -5.26680      -31.6948       31.6948       293.215       324.910    
  50  0.321807      -1.13380      -6.82305       6.82305       298.353       305.176    
  51  0.787972     -0.238293      -1.43401       1.43401       281.252       282.686    
  52  0.842264     -0.171662      -1.03304       1.03304       278.061       279.094    
  53  0.201829      -1.60034      -9.63058       9.63058       304.685       314.316    
  54  0.650136     -0.430573      -2.59112       2.59112       297.677       300.268    
  55  0.498155     -0.696844      -4.19350       4.19350       294.730       298.923    
  56  0.780214E-01  -2.55077      -15.3502       15.3502       300.312       315.662    
  57  0.840777     -0.173429      -1.04367       1.04367       304.975       306.018    
  58  0.514128     -0.665282      -4.00357       4.00357       300.448       304.452    
  59  0.683522E-01  -2.68308      -16.1464       16.1464       306.186       322.332    
  60  0.376137E-01  -3.28039      -19.7409       19.7409       304.134       323.875    
  61  0.284022      -1.25870      -7.57469       7.57469       307.590       315.165    
  62  0.136027      -1.99490      -12.0050       12.0050       313.947       325.952    
  63  0.698137     -0.359341      -2.16246       2.16246       314.938       317.100    
  64  0.436751     -0.828392      -4.98514       4.98514       273.626       278.611    
loop,thermsimp(1:2)       67   2.05076       4.26327    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    330        279.66          0.88          1.09         23.11          0.03          0.04         25.15
Just calling func    0   0         25.15


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    279.66
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    6.01785               379
loop is:       67
neval is:      329
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       67      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    6.01785               379
loop is:       68
neval is:      329


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      379
neval,tstepnext:      329     379

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.595062     -0.519089      -3.12380       3.12380       246.707       249.831    
   2  0.204294      -1.58819      -9.55751       9.55751       273.892       283.449    
   3  0.902141     -0.102985     -0.619745      0.619745       270.221       270.841    
   4  0.317306      -1.14789      -6.90783       6.90783       277.861       284.768    
   5  0.914914E-01  -2.39151      -14.3917       14.3917       273.626       288.018    
   6  0.362439      -1.01490      -6.10750       6.10750       278.061       284.169    
   7  0.284546      -1.25686      -7.56358       7.56358       277.598       285.161    
   8  0.752727     -0.284053      -1.70939       1.70939       277.280       278.989    
   9  0.972148     -0.282475E-01 -0.169989      0.169989       268.366       268.536    
  10  0.312417      -1.16342      -7.00125       7.00125       276.843       283.844    
  11  0.772549E-01  -2.56064      -15.4096       15.4096       281.252       296.661    
  12  0.190763      -1.65672      -9.96991       9.96991       281.266       291.236    
  13  0.829036     -0.187492      -1.12830       1.12830       277.729       278.857    
  14  0.309766      -1.17194      -7.05255       7.05255       274.154       281.207    
  15  0.691616     -0.368724      -2.21893       2.21893       275.872       278.091    
  16  0.177510      -1.72873      -10.4032       10.4032       283.134       293.538    
  17  0.848561     -0.164214     -0.988213      0.988213       283.403       284.391    
  18  0.464945     -0.765836      -4.60868       4.60868       285.029       289.638    
  19  0.626682     -0.467316      -2.81224       2.81224       282.445       285.257    
  20  0.451266     -0.795699      -4.78840       4.78840       275.413       280.202    
  21  0.161179E-01  -4.12783      -24.8406       24.8406       284.234       309.075    
  22  0.848853     -0.163869     -0.986141      0.986141       281.731       282.718    
  23  0.565946     -0.569256      -3.42570       3.42570       286.521       289.947    
  24  0.798567     -0.224937      -1.35364       1.35364       282.492       283.846    
  25  0.282371      -1.26453      -7.60977       7.60977       286.088       293.698    
  26  0.887219     -0.119663     -0.720116      0.720116       287.238       287.958    
  27  0.311981      -1.16481      -7.00966       7.00966       290.025       297.034    
  28  0.454937     -0.787596      -4.73963       4.73963       290.580       295.319    
  29  0.200774E-01  -3.90816      -23.5187       23.5187       291.756       315.274    
  30  0.549692     -0.598397      -3.60106       3.60106       282.302       285.903    
  31  0.928164     -0.745470E-01 -0.448612      0.448612       289.360       289.809    
  32  0.876026     -0.132360     -0.796521      0.796521       284.996       285.792    
  33  0.360538      -1.02016      -6.13915       6.13915       291.268       297.407    
  34  0.810484     -0.210124      -1.26449       1.26449       295.939       297.204    
  35  0.350387      -1.04872      -6.31102       6.31102       293.460       299.771    
  36  0.609257     -0.495514      -2.98193       2.98193       294.730       297.712    
  37  0.847473     -0.165497     -0.995933      0.995933       296.364       297.360    
  38  0.459433     -0.777763      -4.68046       4.68046       297.817       302.497    
  39  0.213778      -1.54282      -9.28445       9.28445       294.889       304.173    
  40  0.983077     -0.170677E-01 -0.102711      0.102711       291.528       291.630    
  41  0.719533     -0.329153      -1.98079       1.98079       297.677       299.658    
  42  0.317292      -1.14793      -6.90809       6.90809       296.577       303.486    
  43  0.300670      -1.20174      -7.23190       7.23190       298.574       305.806    
  44  0.486388     -0.720748      -4.33735       4.33735       300.320       304.657    
  45  0.309580      -1.17254      -7.05615       7.05615       292.278       299.334    
  46  0.111802      -2.19103      -13.1853       13.1853       282.567       295.752    
  47  0.913484     -0.904897E-01 -0.544553      0.544553       297.530       298.075    
  48  0.438377     -0.824676      -4.96278       4.96278       300.448       305.411    
  49  0.773114     -0.257329      -1.54857       1.54857       297.624       299.172    
  50  0.248259      -1.39328      -8.38457       8.38457       298.353       306.737    
  51  0.502855     -0.687454      -4.13699       4.13699       304.975       309.112    
  52  0.827610E-01  -2.49180      -14.9953       14.9953       297.865       312.860    
  53  0.528759     -0.637222      -3.83471       3.83471       292.428       296.262    
  54  0.711957     -0.339738      -2.04449       2.04449       301.595       303.640    
  55  0.703963     -0.351029      -2.11244       2.11244       304.814       306.926    
  56  0.419247     -0.869295      -5.23129       5.23129       302.903       308.135    
  57  0.939830     -0.620566E-01 -0.373447      0.373447       304.685       305.058    
  58  0.401337     -0.912955      -5.49402       5.49402       307.590       313.084    
  59  0.547477     -0.602435      -3.62536       3.62536       300.312       303.938    
  60  0.237364      -1.43816      -8.65464       8.65464       314.938       323.592    
  61  0.619970E-01  -2.78067      -16.7336       16.7336       306.186       322.919    
  62  0.662658     -0.411496      -2.47632       2.47632       304.134       306.611    
  63  0.891998     -0.114291     -0.687786      0.687786       293.215       293.903    
  64  0.830370     -0.185883      -1.11862       1.11862       279.661       280.779    
loop,thermsimp(1:2)       68   3.12380       9.55751    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    331        284.16          0.88          1.09         23.17          0.28          0.04         25.46
Just calling func    0   0         25.46


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    284.16
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    6.01785               379
loop is:       68
neval is:      330
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       68      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    6.01785               379
loop is:       69
neval is:      330


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      379
neval,tstepnext:      330     379

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.440626     -0.819560      -4.93198       4.93198       246.707       251.639    
   2  0.752309     -0.284608      -1.71272       1.71272       268.366       270.078    
   3  0.209108      -1.56490      -9.41735       9.41735       270.221       279.638    
   4  0.842922     -0.170881      -1.02834       1.02834       275.872       276.901    
   5  0.161148      -1.82543      -10.9852       10.9852       277.729       288.714    
   6  0.601748     -0.507917      -3.05657       3.05657       277.280       280.337    
   7  0.890912     -0.115510     -0.695121      0.695121       275.413       276.108    
   8  0.631939     -0.458963      -2.76197       2.76197       279.661       282.423    
   9  0.144759E-01  -4.23527      -25.4872       25.4872       274.154       299.641    
  10  0.653698     -0.425110      -2.55825       2.55825       281.731       284.290    
  11  0.401463     -0.912639      -5.49212       5.49212       273.892       279.384    
  12  0.906126     -0.985765E-01 -0.593219      0.593219       276.843       277.436    
  13  0.480601E-01  -3.03530      -18.2660       18.2660       282.492       300.758    
  14  0.264260      -1.33082      -8.00868       8.00868       278.061       286.070    
  15  0.586033     -0.534379      -3.21581       3.21581       283.403       286.619    
  16  0.323072      -1.12988      -6.79944       6.79944       277.861       284.660    
  17  0.785147     -0.241884      -1.45562       1.45562       277.598       279.053    
  18  0.139165      -1.97210      -11.8678       11.8678       282.445       294.313    
  19  0.105818E-01  -4.54862      -27.3729       27.3729       284.996       312.369    
  20  0.896943     -0.108763     -0.654521      0.654521       282.302       282.957    
  21  0.854239     -0.157544     -0.948074      0.948074       287.238       288.186    
  22  0.566003     -0.569157      -3.42510       3.42510       273.626       277.051    
  23  0.566387     -0.568477      -3.42101       3.42101       285.029       288.450    
  24  0.414905     -0.879707      -5.29394       5.29394       289.360       294.654    
  25  0.173772      -1.75001      -10.5313       10.5313       286.521       297.052    
  26  0.884308E-01  -2.42554      -14.5965       14.5965       281.266       295.863    
  27  0.417457     -0.873573      -5.25703       5.25703       291.528       296.785    
  28  0.334615      -1.09477      -6.58818       6.58818       283.134       289.723    
  29  0.706024E-01  -2.65069      -15.9515       15.9515       286.088       302.039    
  30  0.996422     -0.358418E-02 -0.215690E-01  0.215690E-01   293.215       293.236    
  31  0.894500     -0.111491     -0.670934      0.670934       290.580       291.251    
  32  0.827855     -0.188917      -1.13687       1.13687       282.567       283.704    
  33  0.434964     -0.832492      -5.00981       5.00981       292.428       297.437    
  34  0.121450      -2.10825      -12.6871       12.6871       281.252       293.939    
  35  0.498977     -0.695195      -4.18358       4.18358       290.025       294.208    
  36  0.117961      -2.13740      -12.8626       12.8626       295.939       308.802    
  37  0.309211      -1.17373      -7.06333       7.06333       296.364       303.428    
  38  0.786265     -0.240461      -1.44706       1.44706       291.268       292.715    
  39  0.614330     -0.487222      -2.93203       2.93203       294.730       297.662    
  40  0.820857     -0.197407      -1.18796       1.18796       297.530       298.718    
  41  0.670448     -0.399809      -2.40599       2.40599       297.624       300.030    
  42  0.742403     -0.297863      -1.79249       1.79249       292.278       294.071    
  43  0.760912E-01  -2.57582      -15.5009       15.5009       297.677       313.178    
  44  0.709677     -0.342945      -2.06379       2.06379       293.460       295.524    
  45  0.943449     -0.582133E-01 -0.350319      0.350319       297.817       298.167    
  46  0.176370      -1.73517      -10.4420       10.4420       296.577       307.019    
  47  0.866890     -0.142843     -0.859609      0.859609       301.595       302.455    
  48  0.711056     -0.341004      -2.05211       2.05211       300.312       302.364    
  49  0.929667E-01  -2.37551      -14.2955       14.2955       294.889       309.184    
  50  0.960091     -0.407270E-01 -0.245089      0.245089       300.320       300.565    
  51  0.948380     -0.530000E-01 -0.318946      0.318946       304.685       305.004    
  52  0.257449      -1.35693      -8.16581       8.16581       300.448       308.614    
  53  0.117236      -2.14357      -12.8997       12.8997       298.574       311.473    
  54  0.218340E-01  -3.82429      -23.0140       23.0140       304.134       327.148    
  55  0.523421     -0.647370      -3.89577       3.89577       298.353       302.249    
  56  0.577211     -0.549547      -3.30709       3.30709       304.814       308.121    
  57  0.288682      -1.24243      -7.47676       7.47676       302.903       310.380    
  58  0.672927E-01  -2.69870      -16.2404       16.2404       284.234       300.475    
  59  0.530586     -0.633774      -3.81395       3.81395       304.975       308.788    
  60  0.511831     -0.669760      -4.03051       4.03051       297.865       301.896    
  61  0.658851     -0.417258      -2.51100       2.51100       307.590       310.101    
  62  0.108719E-01  -4.52157      -27.2101       27.2101       291.756       318.966    
  63  0.252985      -1.37443      -8.27109       8.27109       306.186       314.457    
  64  0.741974     -0.298440      -1.79597       1.79597       284.162       285.958    
loop,thermsimp(1:2)       69   4.93198       1.71272    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    332        280.14          0.88          1.09         23.12          0.02          0.04         25.15
Just calling func    0   0         25.15


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    280.14
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    6.01785               379
loop is:       69
neval is:      331
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       69      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    6.01785               379
loop is:       70
neval is:      331


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      379
neval,tstepnext:      331     379

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.988390     -0.116781E-01 -0.702772E-01  0.702772E-01   246.707       246.777    
   2  0.482301     -0.729186      -4.38813       4.38813       268.366       272.754    
   3  0.546964     -0.603372      -3.63100       3.63100       275.413       279.044    
   4  0.543918     -0.608957      -3.66461       3.66461       275.872       279.537    
   5  0.427641     -0.849472      -5.11199       5.11199       273.626       278.738    
   6  0.498345     -0.696462      -4.19120       4.19120       276.843       281.034    
   7  0.989308     -0.107494E-01 -0.646880E-01  0.646880E-01   277.598       277.662    
   8  0.658822     -0.417302      -2.51126       2.51126       273.892       276.403    
   9  0.917808     -0.857673E-01 -0.516135      0.516135       270.221       270.737    
  10  0.914490E-04  -9.29973      -55.9643       55.9643       277.280       333.244    
  11  0.989901     -0.101499E-01 -0.610805E-01  0.610805E-01   279.661       279.722    
  12  0.558183     -0.583069      -3.50882       3.50882       282.302       285.811    
  13  0.706994     -0.346733      -2.08659       2.08659       282.567       284.654    
  14  0.599152     -0.512240      -3.08258       3.08258       281.731       284.814    
  15  0.845909     -0.167343      -1.00704       1.00704       277.861       278.868    
  16  0.655384     -0.422534      -2.54274       2.54274       284.162       286.704    
  17  0.412232E-01  -3.18875      -19.1894       19.1894       278.061       297.251    
  18  0.495401     -0.702387      -4.22686       4.22686       283.403       287.630    
  19  0.378829     -0.970671      -5.84135       5.84135       287.238       293.079    
  20  0.653665E-02  -5.03033      -30.2718       30.2718       285.029       315.301    
  21  0.782670     -0.245045      -1.47464       1.47464       277.729       279.204    
  22  0.945547     -0.559921E-01 -0.336952      0.336952       283.134       283.471    
  23  0.969857     -0.306063E-01 -0.184184      0.184184       290.580       290.764    
  24  0.822249     -0.195712      -1.17776       1.17776       291.268       292.446    
  25  0.265012E-01  -3.63056      -21.8482       21.8482       293.215       315.063    
  26  0.360432E-01  -3.32304      -19.9975       19.9975       281.252       301.249    
  27  0.796418     -0.227631      -1.36985       1.36985       292.278       293.648    
  28  0.292313E-01  -3.53252      -21.2581       21.2581       290.025       311.283    
  29  0.227321      -1.48139      -8.91479       8.91479       282.445       291.360    
  30  0.812637     -0.207471      -1.24853       1.24853       289.360       290.609    
  31  0.930544     -0.719857E-01 -0.433199      0.433199       293.460       293.893    
  32  0.674873     -0.393231      -2.36640       2.36640       281.266       283.633    
  33  0.264030      -1.33169      -8.01391       8.01391       291.528       299.542    
  34  0.807464     -0.213856      -1.28695       1.28695       286.521       287.808    
  35  0.653731     -0.425060      -2.55795       2.55795       292.428       294.986    
  36  0.858536     -0.152527     -0.917884      0.917884       294.730       295.648    
  37  0.538887     -0.618250      -3.72053       3.72053       297.817       301.537    
  38  0.468049     -0.759182      -4.56864       4.56864       297.530       302.099    
  39  0.401324     -0.912987      -5.49421       5.49421       274.154       279.648    
  40  0.363356      -1.01237      -6.09231       6.09231       297.624       303.716    
  41  0.924933     -0.780342E-01 -0.469598      0.469598       284.234       284.704    
  42  0.797289     -0.226538      -1.36327       1.36327       300.320       301.683    
  43  0.200097      -1.60895      -9.68242       9.68242       282.492       292.174    
  44  0.686219     -0.376559      -2.26607       2.26607       297.865       300.131    
  45  0.895629     -0.110230     -0.663344      0.663344       286.088       286.751    
  46  0.331830      -1.10313      -6.63848       6.63848       298.353       304.991    
  47  0.967018     -0.335379E-01 -0.201826      0.201826       300.312       300.514    
  48  0.268282      -1.31572      -7.91778       7.91778       301.595       309.513    
  49  0.472399     -0.749931      -4.51297       4.51297       296.364       300.877    
  50  0.399276E-01  -3.22069      -19.3816       19.3816       304.685       324.067    
  51  0.956493     -0.444820E-01 -0.267686      0.267686       296.577       296.845    
  52  0.444161     -0.811569      -4.88390       4.88390       304.814       309.698    
  53  0.308942      -1.17460      -7.06858       7.06858       300.448       307.517    
  54  0.602319     -0.506968      -3.05086       3.05086       304.975       308.025    
  55  0.533797     -0.627740      -3.77764       3.77764       295.939       299.717    
  56  0.990519     -0.952607E-02 -0.573265E-01  0.573265E-01   294.889       294.946    
  57  0.931261     -0.712158E-01 -0.428566      0.428566       307.590       308.019    
  58  0.185125      -1.68672      -10.1504       10.1504       302.903       313.054    
  59  0.251659E-02  -5.98485      -36.0159       36.0159       298.574       334.590    
  60  0.706458     -0.347491      -2.09115       2.09115       284.996       287.087    
  61  0.555619     -0.587673      -3.53653       3.53653       297.677       301.213    
  62  0.798153     -0.225455      -1.35676       1.35676       306.186       307.543    
  63  0.951290     -0.499358E-01 -0.300506      0.300506       291.756       292.056    
  64  0.247755      -1.39532      -8.39680       8.39680       280.139       288.536    
loop,thermsimp(1:2)       70  0.702772E-01   4.38813    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    333        354.99          0.88          1.09         23.15          0.01          0.04         25.16
Just calling func    0   0         25.16


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    334        291.92          0.87          1.09         23.13          0.00          0.04         25.12
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3    291.92
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    6.01785               379
loop is:       70
neval is:      333
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       70      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    6.01785               379
loop is:       71
neval is:      333


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      379
neval,tstepnext:      333     379

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.860213     -0.150575     -0.906139      0.906139       246.707       247.613    
   2  0.573661     -0.555717      -3.34422       3.34422       270.221       273.565    
   3  0.499290     -0.694569      -4.17981       4.17981       268.366       272.546    
   4  0.677563     -0.389253      -2.34247       2.34247       273.892       276.234    
   5  0.476566     -0.741149      -4.46012       4.46012       277.598       282.058    
   6  0.153036      -1.87708      -11.2960       11.2960       273.626       284.922    
   7  0.626270     -0.467973      -2.81619       2.81619       277.861       280.677    
   8  0.794744     -0.229735      -1.38251       1.38251       275.413       276.796    
   9  0.111868E-01  -4.49302      -27.0383       27.0383       277.729       304.767    
  10  0.643880     -0.440243      -2.64932       2.64932       275.872       278.522    
  11  0.634705     -0.454595      -2.73568       2.73568       274.154       276.890    
  12  0.653568     -0.425308      -2.55944       2.55944       279.661       282.220    
  13  0.888231     -0.118524     -0.713258      0.713258       276.843       277.556    
  14  0.681775E-01  -2.68564      -16.1618       16.1618       283.134       299.296    
  15  0.241248      -1.42193      -8.55696       8.55696       281.266       289.823    
  16  0.208857      -1.56610      -9.42458       9.42458       282.567       291.992    
  17  0.652439     -0.427038      -2.56985       2.56985       284.234       286.804    
  18  0.489833     -0.713691      -4.29488       4.29488       281.731       286.026    
  19  0.719225     -0.329581      -1.98337       1.98337       282.302       284.286    
  20  0.924762     -0.782189E-01 -0.470710      0.470710       284.162       284.632    
  21  0.845502     -0.167825      -1.00994       1.00994       286.088       287.098    
  22  0.665989     -0.406482      -2.44615       2.44615       284.996       287.442    
  23  0.378562     -0.971376      -5.84559       5.84559       283.403       289.249    
  24  0.396889     -0.924098      -5.56108       5.56108       286.521       292.082    
  25  0.158089      -1.84460      -11.1005       11.1005       280.139       291.240    
  26  0.590577     -0.526655      -3.16933       3.16933       289.360       292.530    
  27  0.949513     -0.518061E-01 -0.311761      0.311761       290.580       290.892    
  28  0.518198     -0.657398      -3.95612       3.95612       282.445       286.401    
  29  0.551080     -0.595875      -3.58588       3.58588       291.756       295.342    
  30  0.986285     -0.138097E-01 -0.831049E-01  0.831049E-01   282.492       282.575    
  31  0.920142     -0.832276E-01 -0.500851      0.500851       291.268       291.769    
  32  0.133201      -2.01590      -12.1314       12.1314       287.238       299.369    
  33  0.584507     -0.536987      -3.23150       3.23150       292.278       295.510    
  34  0.790583     -0.234984      -1.41410       1.41410       293.460       294.874    
  35  0.702664     -0.352876      -2.12355       2.12355       294.889       297.012    
  36  0.148885      -1.90458      -11.4615       11.4615       292.428       303.889    
  37  0.290436      -1.23637      -7.44030       7.44030       294.730       302.170    
  38  0.638249     -0.449027      -2.70218       2.70218       296.577       299.280    
  39  0.381605     -0.963369      -5.79741       5.79741       278.061       283.859    
  40  0.823069     -0.194716      -1.17177       1.17177       291.528       292.700    
  41  0.492318     -0.708630      -4.26443       4.26443       295.939       300.204    
  42  0.773199     -0.257218      -1.54790       1.54790       297.865       299.413    
  43  0.289475E-01  -3.54227      -21.3168       21.3168       300.312       321.629    
  44  0.355683      -1.03371      -6.22074       6.22074       296.364       302.585    
  45  0.160396      -1.83011      -11.0133       11.0133       297.677       308.690    
  46  0.972861     -0.275140E-01 -0.165575      0.165575       281.252       281.417    
  47  0.781938E-02  -4.85115      -29.1935       29.1935       297.817       327.010    
  48  0.225299      -1.49033      -8.96857       8.96857       300.320       309.288    
  49  0.631686     -0.459363      -2.76437       2.76437       297.530       300.295    
  50  0.212316      -1.54968      -9.32572       9.32572       297.624       306.949    
  51  0.673664     -0.395024      -2.37720       2.37720       298.353       300.730    
  52  0.728322     -0.317012      -1.90773       1.90773       300.448       302.356    
  53  0.368576     -0.998108      -6.00646       6.00646       306.186       312.192    
  54  0.381088     -0.964725      -5.80557       5.80557       307.590       313.396    
  55  0.481283     -0.731301      -4.40085       4.40085       304.975       309.375    
  56  0.801664     -0.221066      -1.33034       1.33034       301.595       302.926    
  57  0.285936      -1.25199      -7.53427       7.53427       304.814       312.348    
  58  0.412374     -0.885823      -5.33075       5.33075       290.025       295.356    
  59  0.815685     -0.203727      -1.22600       1.22600       302.903       304.129    
  60  0.251414      -1.38065      -8.30856       8.30856       293.215       301.523    
  61  0.598278     -0.513699      -3.09137       3.09137       285.029       288.121    
  62  0.750137     -0.287499      -1.73013       1.73013       304.685       306.415    
  63  0.412907     -0.884533      -5.32299       5.32299       277.280       282.603    
  64  0.318297      -1.14477      -6.88906       6.88906       291.922       298.811    
loop,thermsimp(1:2)       71  0.906139       3.34422    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    335        296.09          0.86          1.09         23.12          0.00          0.04         25.12
Just calling func    0   0         25.12


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    296.09
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    6.01785               379
loop is:       71
neval is:      334
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       71      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    6.01785               379
loop is:       72
neval is:      334


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      379
neval,tstepnext:      334     379

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.440770     -0.819232      -4.93001       4.93001       246.707       251.637    
   2  0.202294      -1.59803      -9.61671       9.61671       268.366       277.982    
   3  0.873786     -0.134920     -0.811930      0.811930       270.221       271.033    
   4  0.262141      -1.33887      -8.05714       8.05714       273.892       281.949    
   5  0.342005      -1.07293      -6.45672       6.45672       275.413       281.870    
   6  0.421217     -0.864607      -5.20307       5.20307       274.154       279.357    
   7  0.618489     -0.480477      -2.89143       2.89143       276.843       279.734    
   8  0.412552     -0.885393      -5.32816       5.32816       275.872       281.201    
   9  0.951192     -0.500396E-01 -0.301131      0.301131       277.861       278.162    
  10  0.298546      -1.20883      -7.27457       7.27457       281.252       288.526    
  11  0.805120     -0.216763      -1.30445       1.30445       277.598       278.902    
  12  0.208146      -1.56951      -9.44509       9.44509       279.661       289.106    
  13  0.924021     -0.790209E-01 -0.475536      0.475536       282.492       282.967    
  14  0.447624     -0.803802      -4.83716       4.83716       277.280       282.117    
  15  0.667709     -0.403903      -2.43063       2.43063       278.061       280.492    
  16  0.767295E-01  -2.56747      -15.4506       15.4506       282.302       297.753    
  17  0.301582      -1.19871      -7.21367       7.21367       284.162       291.375    
  18  0.788580     -0.237522      -1.42937       1.42937       273.626       275.056    
  19  0.887020     -0.119888     -0.721466      0.721466       281.731       282.453    
  20  0.233035E-01  -3.75915      -22.6220       22.6220       282.445       305.067    
  21  0.899320     -0.106116     -0.638593      0.638593       284.234       284.873    
  22  0.144480      -1.93461      -11.6422       11.6422       286.088       297.730    
  23  0.274629      -1.29233      -7.77707       7.77707       284.996       292.773    
  24  0.831597     -0.184407      -1.10973       1.10973       285.029       286.139    
  25  0.388827     -0.944620      -5.68458       5.68458       283.403       289.088    
  26  0.257578      -1.35643      -8.16281       8.16281       281.266       289.429    
  27  0.427791     -0.849120      -5.10987       5.10987       290.580       295.690    
  28  0.837664E-01  -2.47972      -14.9226       14.9226       280.139       295.062    
  29  0.782727     -0.244972      -1.47420       1.47420       291.268       292.742    
  30  0.259676E-01  -3.65091      -21.9706       21.9706       282.567       304.538    
  31  0.166181      -1.79468      -10.8001       10.8001       286.521       297.321    
  32  0.360749      -1.01957      -6.13563       6.13563       289.360       295.496    
  33  0.369697     -0.995071      -5.98819       5.98819       291.528       297.516    
  34  0.959392     -0.414553E-01 -0.249471      0.249471       293.460       293.710    
  35  0.449170     -0.800353      -4.81640       4.81640       291.756       296.572    
  36  0.655790E-02  -5.02708      -30.2522       30.2522       290.025       320.277    
  37  0.133569      -2.01313      -12.1147       12.1147       292.278       304.393    
  38  0.282061      -1.26563      -7.61638       7.61638       294.889       302.505    
  39  0.431813     -0.839762      -5.05356       5.05356       291.922       296.976    
  40  0.713174     -0.338031      -2.03422       2.03422       296.577       298.612    
  41  0.511305     -0.670790      -4.03671       4.03671       283.134       287.171    
  42  0.264485      -1.32997      -8.00357       8.00357       287.238       295.242    
  43  0.779298     -0.249362      -1.50062       1.50062       297.865       299.366    
  44  0.709352E-02  -4.94857      -29.7798       29.7798       295.939       325.719    
  45  0.770402     -0.260843      -1.56971       1.56971       297.530       299.100    
  46  0.694393     -0.364718      -2.19482       2.19482       298.353       300.548    
  47  0.589268E-01  -2.83146      -17.0393       17.0393       293.215       310.254    
  48  0.817644     -0.201328      -1.21156       1.21156       294.730       295.942    
  49  0.990168     -0.988073E-02 -0.594607E-01  0.594607E-01   300.448       300.508    
  50  0.733536E-01  -2.61246      -15.7214       15.7214       296.364       312.086    
  51  0.781472     -0.246575      -1.48385       1.48385       301.595       303.079    
  52  0.582548     -0.540344      -3.25171       3.25171       292.428       295.679    
  53  0.644915     -0.438636      -2.63965       2.63965       302.903       305.543    
  54  0.726975     -0.318863      -1.91887       1.91887       277.729       279.648    
  55  0.562265     -0.575782      -3.46497       3.46497       304.685       308.150    
  56  0.166410      -1.79330      -10.7918       10.7918       297.624       308.416    
  57  0.847052     -0.165994     -0.998924      0.998924       297.677       298.676    
  58  0.437688     -0.826250      -4.97224       4.97224       300.320       305.292    
  59  0.408722     -0.894719      -5.38428       5.38428       304.975       310.359    
  60  0.794023     -0.230643      -1.38798       1.38798       306.186       307.574    
  61  0.259946      -1.34728      -8.10772       8.10772       304.814       312.922    
  62  0.700123     -0.356499      -2.14536       2.14536       307.590       309.736    
  63  0.564078E-01  -2.87515      -17.3022       17.3022       300.312       317.614    
  64  0.999061     -0.939094E-03 -0.565132E-02  0.565132E-02   296.091       296.096    
loop,thermsimp(1:2)       72   4.93001       9.61671    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    336        372.30          0.88          1.10         23.12          0.02          0.05         25.16
Just calling func    0   0         25.16


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    337        303.02          0.86          1.09         23.12          0.02          0.04         25.13
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3    303.02
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    6.01785               379
loop is:       72
neval is:      336
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       72      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    6.01785               379
loop is:       73
neval is:      336


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      379
neval,tstepnext:      336     379

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.807892     -0.213326      -1.28377       1.28377       246.707       247.991    
   2  0.554495     -0.589697      -3.54871       3.54871       270.221       273.770    
   3  0.997056     -0.294851E-02 -0.177437E-01  0.177437E-01   273.626       273.644    
   4  0.901183E-01  -2.40663      -14.4827       14.4827       268.366       282.848    
   5  0.296736      -1.21491      -7.31117       7.31117       277.861       285.172    
   6  0.907820     -0.967094E-01 -0.581982      0.581982       277.598       278.180    
   7  0.325542      -1.12226      -6.75361       6.75361       274.154       280.908    
   8  0.947537     -0.538896E-01 -0.324299      0.324299       277.729       278.053    
   9  0.378276     -0.972130      -5.85013       5.85013       276.843       282.693    
  10  0.985613     -0.144920E-01 -0.872104E-01  0.872104E-01   278.061       278.148    
  11  0.167434      -1.78717      -10.7549       10.7549       275.872       286.627    
  12  0.693849E-01  -2.66809      -16.0561       16.0561       275.413       291.469    
  13  0.434983     -0.832447      -5.00954       5.00954       273.892       278.901    
  14  0.998656     -0.134491E-02 -0.809347E-02  0.809347E-02   277.280       277.288    
  15  0.650302     -0.430318      -2.58959       2.58959       281.731       284.321    
  16  0.152610      -1.87987      -11.3128       11.3128       282.492       293.805    
  17  0.273947      -1.29482      -7.79203       7.79203       284.234       292.026    
  18  0.990471     -0.957469E-02 -0.576190E-01  0.576190E-01   285.029       285.087    
  19  0.684493     -0.379077      -2.28123       2.28123       283.134       285.416    
  20  0.864467E-01  -2.44823      -14.7331       14.7331       281.252       295.985    
  21  0.546085     -0.604980      -3.64068       3.64068       283.403       287.044    
  22  0.246642      -1.39982      -8.42388       8.42388       279.661       288.085    
  23  0.484505     -0.724627      -4.36070       4.36070       281.266       285.627    
  24  0.567359     -0.566763      -3.41069       3.41069       284.162       287.572    
  25  0.564371     -0.572043      -3.44247       3.44247       291.268       294.710    
  26  0.825604     -0.191640      -1.15326       1.15326       284.996       286.149    
  27  0.302493      -1.19570      -7.19553       7.19553       293.460       300.656    
  28  0.630396     -0.461407      -2.77668       2.77668       280.139       282.916    
  29  0.886734     -0.120210     -0.723408      0.723408       287.238       287.961    
  30  0.389345     -0.943288      -5.67657       5.67657       289.360       295.037    
  31  0.181391      -1.70710      -10.2731       10.2731       292.428       302.701    
  32  0.933221     -0.691132E-01 -0.415913      0.415913       290.580       290.996    
  33  0.169237E-01  -4.07904      -24.5471       24.5471       294.730       319.277    
  34  0.757788     -0.277351      -1.66906       1.66906       296.091       297.760    
  35  0.300993E-01  -3.50325      -21.0820       21.0820       291.756       312.838    
  36  0.395621     -0.927300      -5.58035       5.58035       291.922       297.502    
  37  0.459505     -0.777605      -4.67951       4.67951       286.521       291.201    
  38  0.733176     -0.310370      -1.86776       1.86776       291.528       293.396    
  39  0.575459     -0.552587      -3.32539       3.32539       286.088       289.413    
  40  0.560889     -0.578233      -3.47972       3.47972       282.302       285.782    
  41  0.428351     -0.847812      -5.10200       5.10200       296.577       301.679    
  42  0.553832     -0.590895      -3.55591       3.55591       297.677       301.233    
  43  0.581118     -0.542801      -3.26649       3.26649       297.530       300.797    
  44  0.319195E-01  -3.44454      -20.7287       20.7287       297.865       318.594    
  45  0.224512E-01  -3.79641      -22.8462       22.8462       300.448       323.294    
  46  0.113637E-01  -4.47733      -26.9439       26.9439       298.353       325.297    
  47  0.889134     -0.117508     -0.707144      0.707144       294.889       295.596    
  48  0.422937     -0.860531      -5.17855       5.17855       301.595       306.774    
  49  0.479928     -0.734119      -4.41782       4.41782       292.278       296.696    
  50  0.813133     -0.206861      -1.24486       1.24486       282.567       283.812    
  51  0.544683     -0.607551      -3.65615       3.65615       282.445       286.101    
  52  0.694184E-01  -2.66760      -16.0532       16.0532       300.320       316.373    
  53  0.656508     -0.420820      -2.53243       2.53243       302.903       305.436    
  54  0.532118     -0.630889      -3.79659       3.79659       306.186       309.982    
  55  0.485731E-01  -3.02468      -18.2021       18.2021       304.685       322.887    
  56  0.525424     -0.643549      -3.87278       3.87278       297.624       301.496    
  57  0.773368E-01  -2.55959      -15.4032       15.4032       307.590       322.994    
  58  0.741245     -0.299424      -1.80189       1.80189       293.215       295.017    
  59  0.286066      -1.25153      -7.53154       7.53154       304.975       312.506    
  60  0.327223      -1.11711      -6.72261       6.72261       296.364       303.087    
  61  0.124235      -2.08558      -12.5507       12.5507       304.814       317.365    
  62  0.599337     -0.511931      -3.08072       3.08072       300.312       303.393    
  63  0.666632     -0.405518      -2.44034       2.44034       290.025       292.465    
  64  0.810607     -0.209973      -1.26358       1.26358       303.019       304.283    
loop,thermsimp(1:2)       73   1.28377       3.54871    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    338        269.40          0.88          1.09         23.11          0.00          0.04         25.12
Just calling func    0   0         25.12


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    269.40
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    6.01785               379
loop is:       73
neval is:      337
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       73      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    6.01785               379
loop is:       74
neval is:      337


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      379
neval,tstepnext:      337     379

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.889684     -0.116889     -0.703421      0.703421       246.707       247.411    
   2  0.480213     -0.733525      -4.41424       4.41424       273.626       278.040    
   3  0.226156      -1.48653      -8.94572       8.94572       270.221       279.167    
   4  0.633402     -0.456651      -2.74805       2.74805       277.280       280.028    
   5  0.925311     -0.776258E-01 -0.467140      0.467140       277.729       278.196    
   6  0.498405     -0.696343      -4.19048       4.19048       278.061       282.252    
   7  0.133283      -2.01528      -12.1277       12.1277       277.598       289.725    
   8  0.657074E-01  -2.72254      -16.3838       16.3838       273.892       290.276    
   9  0.726758     -0.319162      -1.92067       1.92067       274.154       276.075    
  10  0.398365     -0.920388      -5.53875       5.53875       276.843       282.382    
  11  0.321047E-01  -3.43875      -20.6939       20.6939       268.366       289.060    
  12  0.276307      -1.28624      -7.74042       7.74042       280.139       287.880    
  13  0.483740     -0.726208      -4.37021       4.37021       282.567       286.937    
  14  0.224589      -1.49348      -8.98755       8.98755       281.731       290.719    
  15  0.832041     -0.183874      -1.10652       1.10652       285.029       286.136    
  16  0.939301     -0.626192E-01 -0.376833      0.376833       277.861       278.237    
  17  0.624052     -0.471522      -2.83754       2.83754       283.134       285.972    
  18  0.172753      -1.75589      -10.5667       10.5667       281.266       291.833    
  19  0.468323     -0.758597      -4.56512       4.56512       282.302       286.867    
  20  0.963461     -0.372229E-01 -0.224002      0.224002       282.445       282.669    
  21  0.812092     -0.208142      -1.25257       1.25257       284.996       286.248    
  22  0.376764     -0.976137      -5.87425       5.87425       275.872       281.747    
  23  0.791872E-01  -2.53594      -15.2609       15.2609       283.403       298.664    
  24  0.237003      -1.43968      -8.66379       8.66379       284.162       292.825    
  25  0.320094      -1.13914      -6.85517       6.85517       287.238       294.093    
  26  0.821410E-01  -2.49932      -15.0405       15.0405       279.661       294.701    
  27  0.789147     -0.236802      -1.42504       1.42504       286.088       287.513    
  28  0.734353E-01  -2.61135      -15.7147       15.7147       290.580       306.294    
  29  0.226401      -1.48545      -8.93919       8.93919       286.521       295.460    
  30  0.380831     -0.965399      -5.80962       5.80962       275.413       281.223    
  31  0.264857      -1.32857      -7.99510       7.99510       284.234       292.229    
  32  0.246167      -1.40174      -8.43548       8.43548       290.025       298.460    
  33  0.142133      -1.95099      -11.7408       11.7408       291.528       303.269    
  34  0.123438E-01  -4.39460      -26.4460       26.4460       282.492       308.938    
  35  0.853289     -0.158657     -0.954772      0.954772       291.268       292.223    
  36  0.418603     -0.870831      -5.24053       5.24053       293.215       298.455    
  37  0.235242      -1.44714      -8.70868       8.70868       289.360       298.069    
  38  0.841712     -0.172317      -1.03698       1.03698       294.889       295.926    
  39  0.113373      -2.17707      -13.1013       13.1013       281.252       294.353    
  40  0.617966     -0.481322      -2.89652       2.89652       292.278       295.175    
  41  0.149268      -1.90202      -11.4460       11.4460       291.922       303.368    
  42  0.811010     -0.209475      -1.26059       1.26059       296.091       297.351    
  43  0.571477     -0.559531      -3.36717       3.36717       293.460       296.827    
  44  0.105494      -2.24911      -13.5348       13.5348       297.530       311.065    
  45  0.709548     -0.343127      -2.06488       2.06488       297.677       299.742    
  46  0.535895     -0.623816      -3.75403       3.75403       297.624       301.378    
  47  0.137736      -1.98242      -11.9299       11.9299       296.577       308.507    
  48  0.666779     -0.405297      -2.43902       2.43902       292.428       294.867    
  49  0.326487      -1.11936      -6.73616       6.73616       296.364       303.101    
  50  0.461090     -0.774162      -4.65879       4.65879       300.312       304.971    
  51  0.246088      -1.40207      -8.43742       8.43742       303.019       311.457    
  52  0.308348      -1.17653      -7.08016       7.08016       302.903       309.983    
  53  0.921161     -0.821209E-01 -0.494191      0.494191       301.595       302.090    
  54  0.361112      -1.01857      -6.12958       6.12958       306.186       312.315    
  55  0.853246     -0.158708     -0.955078      0.955078       304.975       305.930    
  56  0.535783     -0.624027      -3.75530       3.75530       291.756       295.511    
  57  0.347437      -1.05717      -6.36190       6.36190       300.320       306.682    
  58  0.722381     -0.325203      -1.95702       1.95702       304.814       306.771    
  59  0.134598      -2.00546      -12.0686       12.0686       297.865       309.934    
  60  0.521537     -0.650975      -3.91747       3.91747       294.730       298.647    
  61  0.713987     -0.336890      -2.02735       2.02735       304.685       306.712    
  62  0.202889      -1.59510      -9.59905       9.59905       307.590       317.189    
  63  0.973267     -0.270971E-01 -0.163066      0.163066       300.448       300.611    
  64  0.396441     -0.925228      -5.56788       5.56788       269.398       274.966    
loop,thermsimp(1:2)       74  0.703421       4.41424    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    339        273.82          0.86          1.09         23.11          0.09          0.04         25.18
Just calling func    0   0         25.18


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    273.82
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    6.01785               379
loop is:       74
neval is:      338
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       74      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    6.01785               379
loop is:       75
neval is:      338


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      379
neval,tstepnext:      338     379

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.645801     -0.437264      -2.63139       2.63139       246.707       249.339    
   2  0.108032      -2.22533      -13.3917       13.3917       269.398       282.790    
   3  0.908790     -0.956413E-01 -0.575555      0.575555       274.154       274.730    
   4  0.987883     -0.121914E-01 -0.733657E-01  0.733657E-01   273.626       273.700    
   5  0.318380      -1.14451      -6.88749       6.88749       277.729       284.616    
   6  0.924426     -0.785824E-01 -0.472897      0.472897       277.861       278.333    
   7  0.965220     -0.353996E-01 -0.213029      0.213029       270.221       270.434    
   8  0.852248     -0.159878     -0.962123      0.962123       277.280       278.242    
   9  0.329186      -1.11113      -6.68663       6.68663       275.413       282.100    
  10  0.282479      -1.26415      -7.60747       7.60747       275.872       283.480    
  11  0.818943     -0.199740      -1.20201       1.20201       278.061       279.263    
  12  0.842569     -0.171300      -1.03086       1.03086       276.843       277.874    
  13  0.370966     -0.991644      -5.96756       5.96756       282.445       288.413    
  14  0.362233      -1.01547      -6.11092       6.11092       283.134       289.245    
  15  0.356944E-01  -3.33276      -20.0561       20.0561       285.029       305.085    
  16  0.149119      -1.90301      -11.4520       11.4520       284.996       296.448    
  17  0.127170      -2.06223      -12.4102       12.4102       282.302       294.712    
  18  0.589256     -0.528895      -3.18281       3.18281       282.567       285.750    
  19  0.702139     -0.353624      -2.12805       2.12805       286.088       288.216    
  20  0.713819     -0.337127      -2.02878       2.02878       280.139       282.168    
  21  0.121783      -2.10552      -12.6707       12.6707       268.366       281.036    
  22  0.992321     -0.770837E-02 -0.463878E-01  0.463878E-01   277.598       277.644    
  23  0.622746     -0.473616      -2.85015       2.85015       273.892       276.742    
  24  0.388486     -0.945499      -5.68987       5.68987       281.731       287.421    
  25  0.365204      -1.00730      -6.06178       6.06178       281.266       287.328    
  26  0.416566     -0.875710      -5.26989       5.26989       291.268       296.538    
  27  0.250735      -1.38336      -8.32483       8.32483       284.234       292.559    
  28  0.243824      -1.41131      -8.49305       8.49305       284.162       292.655    
  29  0.177195      -1.73050      -10.4139       10.4139       287.238       297.652    
  30  0.723685     -0.323399      -1.94617       1.94617       281.252       283.198    
  31  0.157256      -1.84988      -11.1323       11.1323       279.661       290.793    
  32  0.941988     -0.597623E-01 -0.359640      0.359640       292.428       292.787    
  33  0.110785      -2.20016      -13.2403       13.2403       292.278       305.518    
  34  0.200758      -1.60566      -9.66259       9.66259       286.521       296.184    
  35  0.873323     -0.135450     -0.815117      0.815117       291.756       292.571    
  36  0.842283     -0.171639      -1.03290       1.03290       294.889       295.922    
  37  0.326633      -1.11892      -6.73348       6.73348       293.460       300.194    
  38  0.648559     -0.433003      -2.60575       2.60575       296.091       298.696    
  39  0.460689E-01  -3.07762      -18.5206       18.5206       289.360       307.881    
  40  0.676614     -0.390654      -2.35089       2.35089       293.215       295.566    
  41  0.863029     -0.147307     -0.886471      0.886471       290.025       290.911    
  42  0.646727     -0.435831      -2.62276       2.62276       294.730       297.353    
  43  0.310616      -1.16920      -7.03605       7.03605       283.403       290.439    
  44  0.521840     -0.650394      -3.91397       3.91397       297.677       301.591    
  45  0.381245     -0.964312      -5.80309       5.80309       300.448       306.251    
  46  0.815908     -0.203453      -1.22435       1.22435       297.624       298.848    
  47  0.209395E-01  -3.86612      -23.2657       23.2657       301.595       324.861    
  48  0.800991E-01  -2.52449      -15.1920       15.1920       296.364       311.556    
  49  0.824204     -0.193337      -1.16347       1.16347       291.528       292.691    
  50  0.828636     -0.187975      -1.13120       1.13120       291.922       293.053    
  51  0.609810     -0.494608      -2.97647       2.97647       300.312       303.289    
  52  0.793631     -0.231137      -1.39095       1.39095       304.975       306.365    
  53  0.450040E-01  -3.10100      -18.6614       18.6614       290.580       309.241    
  54  0.758261     -0.276727      -1.66530       1.66530       300.320       301.985    
  55  0.450025     -0.798453      -4.80497       4.80497       304.685       309.490    
  56  0.687694     -0.374411      -2.25315       2.25315       304.814       307.067    
  57  0.851665     -0.160562     -0.966239      0.966239       296.577       297.544    
  58  0.964091     -0.365694E-01 -0.220069      0.220069       282.492       282.712    
  59  0.717554     -0.331907      -1.99737       1.99737       297.865       299.862    
  60  0.726427     -0.319617      -1.92341       1.92341       302.903       304.827    
  61  0.646354     -0.436408      -2.62624       2.62624       297.530       300.157    
  62  0.841481     -0.172592      -1.03863       1.03863       303.019       304.058    
  63  0.635881     -0.452744      -2.72455       2.72455       306.186       308.910    
  64  0.753792     -0.282639      -1.70088       1.70088       273.824       275.525    
loop,thermsimp(1:2)       75   2.63139       13.3917    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    340        305.89          0.88          1.09         23.10          0.02          0.05         25.14
Just calling func    0   0         25.14


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    305.89
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    6.01785               379
loop is:       75
neval is:      339
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       75      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    6.01785               379
loop is:       76
neval is:      339


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      379
neval,tstepnext:      339     379

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.202436      -1.59733      -9.61249       9.61249       246.707       256.320    
   2  0.337724      -1.08553      -6.53253       6.53253       270.221       276.754    
   3  0.870295     -0.138923     -0.836019      0.836019       273.626       274.462    
   4  0.837087     -0.177827      -1.07014       1.07014       274.154       275.224    
   5  0.512110     -0.669215      -4.02724       4.02724       273.824       277.851    
   6  0.998742     -0.125879E-02 -0.757521E-02  0.757521E-02   273.892       273.899    
   7  0.203490      -1.59214      -9.58125       9.58125       277.598       287.179    
   8  0.525951E-01  -2.94513      -17.7234       17.7234       276.843       294.566    
   9  0.474810     -0.744841      -4.48234       4.48234       277.280       281.762    
  10  0.440755     -0.819266      -4.93022       4.93022       277.861       282.791    
  11  0.225689      -1.48860      -8.95816       8.95816       278.061       287.019    
  12  0.902704     -0.102360     -0.615988      0.615988       268.366       268.982    
  13  0.663331     -0.410481      -2.47021       2.47021       275.413       277.883    
  14  0.511480     -0.670447      -4.03465       4.03465       280.139       284.174    
  15  0.625297     -0.469528      -2.82555       2.82555       282.492       285.317    
  16  0.812907     -0.207139      -1.24653       1.24653       269.398       270.645    
  17  0.979453     -0.207607E-01 -0.124935      0.124935       281.252       281.377    
  18  0.255329      -1.36520      -8.21559       8.21559       275.872       284.088    
  19  0.856654     -0.154722     -0.931091      0.931091       277.729       278.660    
  20  0.610394     -0.493650      -2.97071       2.97071       282.567       285.538    
  21  0.703614     -0.351525      -2.11542       2.11542       281.266       283.382    
  22  0.623403     -0.472562      -2.84380       2.84380       281.731       284.575    
  23  0.375727     -0.978893      -5.89083       5.89083       286.088       291.979    
  24  0.870528     -0.138656     -0.834408      0.834408       282.445       283.279    
  25  0.175838E-01  -4.04078      -24.3168       24.3168       283.134       307.451    
  26  0.237914      -1.43585      -8.64070       8.64070       283.403       292.044    
  27  0.464352     -0.767112      -4.61636       4.61636       279.661       284.277    
  28  0.776873     -0.252478      -1.51938       1.51938       290.025       291.544    
  29  0.380679     -0.965800      -5.81204       5.81204       284.234       290.046    
  30  0.391295     -0.938295      -5.64651       5.64651       291.756       297.402    
  31  0.369488     -0.995636      -5.99159       5.99159       284.162       290.153    
  32  0.302398      -1.19601      -7.19740       7.19740       291.528       298.725    
  33  0.809138     -0.211786      -1.27449       1.27449       292.428       293.702    
  34  0.675473     -0.392342      -2.36105       2.36105       291.922       294.283    
  35  0.486217     -0.721100      -4.33947       4.33947       282.302       286.642    
  36  0.937468     -0.645730E-01 -0.388591      0.388591       293.215       293.603    
  37  0.741025     -0.299721      -1.80367       1.80367       294.889       296.692    
  38  0.155236      -1.86281      -11.2101       11.2101       286.521       297.731    
  39  0.407249     -0.898331      -5.40602       5.40602       284.996       290.402    
  40  0.348550E-01  -3.35656      -20.1993       20.1993       291.268       311.467    
  41  0.178548      -1.72290      -10.3681       10.3681       294.730       305.098    
  42  0.127429      -2.06020      -12.3979       12.3979       296.577       308.975    
  43  0.919888     -0.835037E-01 -0.502513      0.502513       287.238       287.741    
  44  0.520080     -0.653772      -3.93430       3.93430       296.091       300.025    
  45  0.574092     -0.554965      -3.33970       3.33970       297.624       300.963    
  46  0.893427     -0.112690     -0.678154      0.678154       297.865       298.543    
  47  0.658991     -0.417045      -2.50972       2.50972       297.530       300.040    
  48  0.803744     -0.218475      -1.31475       1.31475       293.460       294.775    
  49  0.499877     -0.693392      -4.17273       4.17273       297.677       301.850    
  50  0.723109     -0.324195      -1.95095       1.95095       300.320       302.271    
  51  0.477842     -0.738475      -4.44403       4.44403       300.312       304.756    
  52  0.946108     -0.553980E-01 -0.333377      0.333377       303.019       303.353    
  53  0.296943      -1.21422      -7.30697       7.30697       302.903       310.210    
  54  0.702733     -0.352778      -2.12297       2.12297       285.029       287.152    
  55  0.644709     -0.438956      -2.64157       2.64157       292.278       294.920    
  56  0.687506     -0.374685      -2.25479       2.25479       300.448       302.703    
  57  0.682968     -0.381308      -2.29465       2.29465       304.975       307.269    
  58  0.695030     -0.363801      -2.18930       2.18930       304.814       307.003    
  59  0.134664      -2.00497      -12.0656       12.0656       289.360       301.426    
  60  0.789098     -0.236865      -1.42542       1.42542       306.186       307.611    
  61  0.495959     -0.701262      -4.22008       4.22008       290.580       294.800    
  62  0.932440     -0.699500E-01 -0.420948      0.420948       304.685       305.106    
  63  0.390950     -0.939176      -5.65182       5.65182       296.364       302.016    
  64  0.209807      -1.56156      -9.39726       9.39726       305.892       315.290    
loop,thermsimp(1:2)       76   9.61249       6.53253    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    341        301.60          0.88          1.10         23.11          0.12          0.05         25.27
Just calling func    0   0         25.27


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  340    301.60        4.265     -1.110      3.893     -100.0     0.4307    
                      -1.025      2.429     -100.0      2.639     0.7715    
                       1.119    -0.4155E-01  2.400      0.000      0.000    
                      -1.122      0.000      0.000      0.000     -1.221    

                      -2.500     0.1379E+05 0.1437E+05 -765.3     -2472.    
                      -2.000     -5.680     -2.913     -4.264     -2.128    
                      -13.56     -2.378      1359.      0.000      3354.    

                       4764.      3323.      5073.      5329.      2500.    
                       4298.    -0.1994E-01-0.8666E-01  0.000    -0.5898E-01
                      0.3134E-01-0.1454     0.8162E-01-0.1031    -0.3011E-01

                     -0.7911    -0.9393      0.000     0.2321     0.1039    
                      0.8541E-01 0.4289E-01 0.7619E-01 0.4561E-01-0.2717E-01
                     -0.3358E-01 0.1524E-01-0.2885    -0.7029      0.000    

                      -1.160     -2.699      4.194    -0.9818      0.000    
                       0.000      9.058      9.103     -5098.     -4.000    
                      0.1518    -0.3384      8.860      8.787     -9145.    

                      -4.000     0.4796E-01 0.7078      9.247      9.115    
                      -5372.     -4.000     0.2451     0.3262      9.406    
                       8.910     -3514.     -2.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    301.60
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    6.01785               379
loop is:       76
neval is:      340
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       76      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    6.01785               379
loop is:       77
neval is:      340


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      379
neval,tstepnext:      340     379

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.608851     -0.496181      -2.98594       2.98594       246.707       249.693    
   2  0.437836     -0.825911      -4.97021       4.97021       268.366       273.336    
   3  0.123560      -2.09103      -12.5835       12.5835       269.398       281.982    
   4  0.943438     -0.582242E-01 -0.350385      0.350385       273.892       274.242    
   5  0.215054      -1.53686      -9.24861       9.24861       273.626       282.875    
   6  0.984763     -0.153546E-01 -0.924015E-01  0.924015E-01   274.154       274.246    
   7  0.154160E-01  -4.17235      -25.1086       25.1086       270.221       295.330    
   8  0.231957      -1.46120      -8.79330       8.79330       273.824       282.617    
   9  0.476349     -0.741605      -4.46287       4.46287       275.413       279.876    
  10  0.620436     -0.477333      -2.87252       2.87252       277.729       280.601    
  11  0.456145     -0.784945      -4.72368       4.72368       281.252       285.975    
  12  0.507296     -0.678660      -4.08407       4.08407       277.280       281.364    
  13  0.910123     -0.941755E-01 -0.566734      0.566734       277.861       278.427    
  14  0.323556      -1.12838      -6.79044       6.79044       282.445       289.235    
  15  0.666279     -0.406046      -2.44352       2.44352       281.266       283.710    
  16  0.781920     -0.246002      -1.48040       1.48040       275.872       277.353    
  17  0.921689     -0.815478E-01 -0.490742      0.490742       280.139       280.630    
  18  0.152544      -1.88030      -11.3154       11.3154       279.661       290.976    
  19  0.265926      -1.32454      -7.97087       7.97087       281.731       289.702    
  20  0.812409     -0.207751      -1.25021       1.25021       282.492       283.742    
  21  0.517560E-01  -2.96121      -17.8201       17.8201       282.567       300.387    
  22  0.559187     -0.581271      -3.49800       3.49800       282.302       285.800    
  23  0.708792     -0.344194      -2.07130       2.07130       278.061       280.133    
  24  0.287762      -1.24562      -7.49597       7.49597       285.029       292.525    
  25  0.896953     -0.108752     -0.654455      0.654455       277.598       278.252    
  26  0.305048      -1.18729      -7.14492       7.14492       287.238       294.383    
  27  0.752428     -0.284450      -1.71177       1.71177       284.234       285.946    
  28  0.248159      -1.39369      -8.38699       8.38699       284.162       292.549    
  29  0.997822     -0.217989E-02 -0.131183E-01  0.131183E-01   284.996       285.009    
  30  0.706427     -0.347535      -2.09141       2.09141       290.025       292.116    
  31  0.885217     -0.121923     -0.733713      0.733713       286.088       286.821    
  32  0.448301     -0.802290      -4.82806       4.82806       283.403       288.231    
  33  0.316275      -1.15114      -6.92741       6.92741       293.215       300.142    
  34  0.682241     -0.382372      -2.30105       2.30105       292.428       294.729    
  35  0.655896     -0.421752      -2.53804       2.53804       291.922       294.460    
  36  0.129575      -2.04350      -12.2975       12.2975       276.843       289.140    
  37  0.236133      -1.44336      -8.68593       8.68593       293.460       302.146    
  38  0.481338     -0.731186      -4.40017       4.40017       290.580       294.980    
  39  0.825902     -0.191279      -1.15109       1.15109       292.278       293.429    
  40  0.818029     -0.200857      -1.20873       1.20873       294.889       296.097    
  41  0.135951E-01  -4.29805      -25.8650       25.8650       291.756       317.621    
  42  0.535484     -0.624585      -3.75866       3.75866       286.521       290.280    
  43  0.451882     -0.794334      -4.78018       4.78018       297.865       302.645    
  44  0.591282     -0.525463      -3.16216       3.16216       291.528       294.690    
  45  0.220584      -1.51148      -9.09584       9.09584       296.091       305.187    
  46  0.217569      -1.52524      -9.17865       9.17865       297.530       306.709    
  47  0.541669     -0.613101      -3.68955       3.68955       297.624       301.313    
  48  0.927891     -0.748411E-01 -0.450382      0.450382       289.360       289.811    
  49  0.888902     -0.117768     -0.708709      0.708709       297.677       298.386    
  50  0.391529     -0.937694      -5.64290       5.64290       296.364       302.007    
  51  0.611187     -0.492353      -2.96290       2.96290       300.320       303.283    
  52  0.475002     -0.744437      -4.47991       4.47991       300.448       304.928    
  53  0.504237     -0.684709      -4.12047       4.12047       303.019       307.140    
  54  0.605691     -0.501385      -3.01726       3.01726       300.312       303.329    
  55  0.476618     -0.741039      -4.45946       4.45946       294.730       299.189    
  56  0.128287      -2.05348      -12.3575       12.3575       304.685       317.043    
  57  0.164258      -1.80632      -10.8701       10.8701       304.814       315.684    
  58  0.381764     -0.962954      -5.79491       5.79491       304.975       310.769    
  59  0.824295     -0.193227      -1.16281       1.16281       283.134       284.297    
  60  0.170823      -1.76713      -10.6343       10.6343       306.186       316.820    
  61  0.258309      -1.35360      -8.14575       8.14575       296.577       304.723    
  62  0.470573     -0.753804      -4.53628       4.53628       302.903       307.440    
  63  0.939649     -0.622488E-01 -0.374604      0.374604       291.268       291.642    
  64  0.323567      -1.12835      -6.79024       6.79024       301.595       308.386    
loop,thermsimp(1:2)       77   2.98594       4.97021    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    342        278.06          0.88          1.09         23.15          0.25          0.04         25.41
Just calling func    0   0         25.42


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    278.06
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    6.01785               379
loop is:       77
neval is:      341
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       77      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    6.01785               379
loop is:       78
neval is:      341


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      379
neval,tstepnext:      341     379

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.980204E-01  -2.32258      -13.9769       13.9769       246.707       260.684    
   2  0.700279     -0.356277      -2.14402       2.14402       268.366       270.510    
   3  0.681564     -0.383366      -2.30704       2.30704       273.892       276.199    
   4  0.838213E-01  -2.47907      -14.9187       14.9187       274.154       289.073    
   5  0.708687     -0.344341      -2.07219       2.07219       275.872       277.945    
   6  0.253966      -1.37055      -8.24778       8.24778       277.598       285.845    
   7  0.210796      -1.55686      -9.36896       9.36896       277.861       287.230    
   8  0.967741     -0.327906E-01 -0.197329      0.197329       275.413       275.611    
   9  0.901331     -0.103882     -0.625148      0.625148       278.061       278.686    
  10  0.985067     -0.150452E-01 -0.905395E-01  0.905395E-01   277.729       277.819    
  11  0.153899      -1.87146      -11.2622       11.2622       280.139       291.401    
  12  0.297572      -1.21210      -7.29422       7.29422       277.280       284.574    
  13  0.111036      -2.19790      -13.2266       13.2266       269.398       282.625    
  14  0.489011     -0.715370      -4.30499       4.30499       273.824       278.129    
  15  0.970731     -0.297058E-01 -0.178765      0.178765       273.626       273.805    
  16  0.246322      -1.40112      -8.43170       8.43170       281.266       289.698    
  17  0.293332      -1.22645      -7.38058       7.38058       282.492       289.873    
  18  0.545752     -0.605591      -3.64435       3.64435       283.134       286.779    
  19  0.455999     -0.785265      -4.72561       4.72561       284.996       289.721    
  20  0.427211     -0.850477      -5.11804       5.11804       282.302       287.420    
  21  0.185046E-01  -3.98974      -24.0096       24.0096       284.234       308.244    
  22  0.768936     -0.262748      -1.58118       1.58118       281.252       282.833    
  23  0.870591     -0.138583     -0.833974      0.833974       286.088       286.922    
  24  0.563023     -0.574436      -3.45687       3.45687       283.403       286.860    
  25  0.132150E-01  -4.32640      -26.0356       26.0356       276.843       302.879    
  26  0.890415     -0.116068     -0.698478      0.698478       282.445       283.143    
  27  0.163417      -1.81145      -10.9010       10.9010       281.731       292.632    
  28  0.360288      -1.02085      -6.14333       6.14333       289.360       295.504    
  29  0.622131     -0.474604      -2.85609       2.85609       286.521       289.377    
  30  0.942630     -0.590811E-01 -0.355541      0.355541       279.661       280.016    
  31  0.135626      -1.99785      -12.0228       12.0228       291.268       303.291    
  32  0.369646     -0.995208      -5.98901       5.98901       290.025       296.014    
  33  0.501457     -0.690237      -4.15374       4.15374       285.029       289.183    
  34  0.459762     -0.777047      -4.67615       4.67615       284.162       288.838    
  35  0.489970     -0.713411      -4.29320       4.29320       292.278       296.571    
  36  0.504194     -0.684794      -4.12099       4.12099       287.238       291.359    
  37  0.543102E-01  -2.91304      -17.5302       17.5302       291.922       309.452    
  38  0.873609     -0.135122     -0.813144      0.813144       291.528       292.341    
  39  0.425787     -0.853816      -5.13813       5.13813       292.428       297.566    
  40  0.792406     -0.232682      -1.40024       1.40024       290.580       291.980    
  41  0.691102     -0.369469      -2.22341       2.22341       270.221       272.445    
  42  0.752290     -0.284633      -1.71288       1.71288       294.889       296.602    
  43  0.279962      -1.27310      -7.66133       7.66133       297.677       305.338    
  44  0.315915E-01  -3.45487      -20.7909       20.7909       294.730       315.521    
  45  0.266419      -1.32269      -7.95972       7.95972       293.215       301.174    
  46  0.949868     -0.514319E-01 -0.309509      0.309509       282.567       282.877    
  47  0.520560     -0.652850      -3.92875       3.92875       297.624       301.552    
  48  0.805351     -0.216477      -1.30273       1.30273       296.364       297.667    
  49  0.281582      -1.26733      -7.62660       7.62660       293.460       301.087    
  50  0.365228      -1.00723      -6.06137       6.06137       297.865       303.927    
  51  0.961426     -0.393382E-01 -0.236731      0.236731       300.320       300.557    
  52  0.176024      -1.73713      -10.4538       10.4538       300.312       310.766    
  53  0.722488     -0.325055      -1.95613       1.95613       296.577       298.534    
  54  0.543981     -0.608841      -3.66391       3.66391       300.448       304.112    
  55  0.810204     -0.210469      -1.26657       1.26657       296.091       297.357    
  56  0.839414     -0.175052      -1.05343       1.05343       297.530       298.584    
  57  0.890272     -0.116228     -0.699443      0.699443       303.019       303.719    
  58  0.370000     -0.994252      -5.98326       5.98326       302.903       308.887    
  59  0.528163     -0.638351      -3.84150       3.84150       301.595       305.437    
  60  0.215496      -1.53481      -9.23627       9.23627       304.975       314.211    
  61  0.907335E-01  -2.39983      -14.4418       14.4418       304.814       319.256    
  62  0.853602     -0.158290     -0.952565      0.952565       306.186       307.138    
  63  0.625306     -0.469515      -2.82547       2.82547       304.685       307.510    
  64  0.267902      -1.31713      -7.92632       7.92632       278.065       285.991    
loop,thermsimp(1:2)       78   13.9769       2.14402    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    343        658.25          0.88          1.09         23.12          0.04          0.04         25.16
Just calling func    0   0         25.17


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    344        288.93          0.88          1.09         23.12          0.00          0.04         25.13
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3    288.93
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    6.01785               379
loop is:       78
neval is:      343
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       78      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    6.01785               379
loop is:       79
neval is:      343


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      379
neval,tstepnext:      343     379

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.190215      -1.65960      -9.98722       9.98722       246.707       256.694    
   2  0.812983     -0.207045      -1.24597       1.24597       268.366       269.612    
   3  0.820046E-01  -2.50098      -15.0505       15.0505       270.221       285.272    
   4  0.863006     -0.147333     -0.886629      0.886629       273.626       274.513    
   5  0.647901     -0.434017      -2.61185       2.61185       275.413       278.025    
   6  0.650063E-01  -2.73327      -16.4484       16.4484       273.892       290.340    
   7  0.407685E-02  -5.50243      -33.1128       33.1128       277.729       310.842    
   8  0.935930     -0.662149E-01 -0.398471      0.398471       275.872       276.271    
   9  0.158531      -1.84180      -11.0837       11.0837       273.824       284.908    
  10  0.846482     -0.166666      -1.00297       1.00297       278.061       279.064    
  11  0.252208      -1.37750      -8.28960       8.28960       279.661       287.950    
  12  0.781651E-02  -4.85152      -29.1957       29.1957       269.398       298.594    
  13  0.990286     -0.976134E-02 -0.587423E-01  0.587423E-01   281.252       281.310    
  14  0.550116     -0.597625      -3.59642       3.59642       282.567       286.164    
  15  0.483066     -0.727601      -4.37859       4.37859       282.445       286.824    
  16  0.196160      -1.62883      -9.80203       9.80203       277.280       287.082    
  17  0.469455     -0.756184      -4.55060       4.55060       277.598       282.148    
  18  0.624392     -0.470977      -2.83427       2.83427       278.065       280.899    
  19  0.743593     -0.296262      -1.78286       1.78286       283.134       284.917    
  20  0.348439      -1.05429      -6.34457       6.34457       283.403       289.748    
  21  0.779083     -0.249637      -1.50228       1.50228       286.088       287.590    
  22  0.989010     -0.110506E-01 -0.665008E-01  0.665008E-01   277.861       277.927    
  23  0.655432E-01  -2.72505      -16.3989       16.3989       282.302       298.701    
  24  0.470908     -0.753092      -4.53199       4.53199       284.162       288.694    
  25  0.685537     -0.377553      -2.27205       2.27205       274.154       276.426    
  26  0.863060E-02  -4.75244      -28.5995       28.5995       285.029       313.629    
  27  0.526195     -0.642084      -3.86396       3.86396       286.521       290.385    
  28  0.767692     -0.264367      -1.59092       1.59092       281.266       282.857    
  29  0.380048     -0.967459      -5.82202       5.82202       284.996       290.818    
  30  0.337508E-01  -3.38875      -20.3930       20.3930       282.492       302.885    
  31  0.683667     -0.380285      -2.28849       2.28849       287.238       289.527    
  32  0.245511      -1.40441      -8.45155       8.45155       280.139       288.591    
  33  0.294388      -1.22286      -7.35896       7.35896       290.580       297.939    
  34  0.159040      -1.83860      -11.0644       11.0644       291.528       302.592    
  35  0.613798     -0.488089      -2.93724       2.93724       281.731       284.669    
  36  0.863839E-01  -2.44895      -14.7374       14.7374       289.360       304.098    
  37  0.118930      -2.12922      -12.8133       12.8133       290.025       302.838    
  38  0.961460     -0.393026E-01 -0.236517      0.236517       292.278       292.515    
  39  0.457884     -0.781140      -4.70078       4.70078       294.889       299.589    
  40  0.312963      -1.16167      -6.99075       6.99075       296.091       303.081    
  41  0.892553     -0.113669     -0.684042      0.684042       292.428       293.112    
  42  0.448774     -0.801235      -4.82171       4.82171       296.364       301.186    
  43  0.942987E-01  -2.36129      -14.2099       14.2099       296.577       310.787    
  44  0.848599     -0.164169     -0.987941      0.987941       297.530       298.518    
  45  0.665342     -0.407455      -2.45200       2.45200       300.320       302.772    
  46  0.894010     -0.112039     -0.674231      0.674231       293.460       294.134    
  47  0.403928     -0.906518      -5.45529       5.45529       293.215       298.670    
  48  0.612812     -0.489696      -2.94692       2.94692       297.624       300.571    
  49  0.726279     -0.319821      -1.92463       1.92463       276.843       278.768    
  50  0.694767     -0.364179      -2.19157       2.19157       291.268       293.459    
  51  0.849471     -0.163141     -0.981758      0.981758       303.019       304.001    
  52  0.615908     -0.484657      -2.91659       2.91659       297.865       300.782    
  53  0.256250      -1.36160      -8.19392       8.19392       300.448       308.642    
  54  0.124633      -2.08238      -12.5314       12.5314       297.677       310.208    
  55  0.629294E-01  -2.76574      -16.6438       16.6438       301.595       318.239    
  56  0.127527      -2.05943      -12.3933       12.3933       306.186       318.579    
  57  0.721510     -0.326409      -1.96428       1.96428       304.685       306.649    
  58  0.664696     -0.408425      -2.45784       2.45784       284.234       286.692    
  59  0.562617     -0.575156      -3.46120       3.46120       302.903       306.364    
  60  0.413984     -0.881928      -5.30731       5.30731       291.922       297.229    
  61  0.656751     -0.420450      -2.53020       2.53020       300.312       302.842    
  62  0.642415     -0.442520      -2.66302       2.66302       304.975       307.638    
  63  0.136182      -1.99376      -11.9982       11.9982       294.730       306.728    
  64  0.481125     -0.731629      -4.40283       4.40283       288.929       293.331    
loop,thermsimp(1:2)       79   9.98722       1.24597    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    345        272.13          0.86          1.08         23.11          0.06          0.04         25.15
Just calling func    0   0         25.15


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    272.13
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    6.01785               379
loop is:       79
neval is:      344
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       79      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    6.01785               379
loop is:       80
neval is:      344


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      379
neval,tstepnext:      344     379

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.337114      -1.08733      -6.54340       6.54340       246.707       253.251    
   2  0.744737     -0.294724      -1.77360       1.77360       268.366       270.139    
   3  0.361564E-01  -3.31990      -19.9787       19.9787       273.626       293.605    
   4  0.312099      -1.16444      -7.00740       7.00740       275.872       282.880    
   5  0.119132      -2.12752      -12.8031       12.8031       274.154       286.957    
   6  0.617735     -0.481696      -2.89877       2.89877       277.861       280.759    
   7  0.117626      -2.14025      -12.8797       12.8797       275.413       288.293    
   8  0.258570      -1.35259      -8.13968       8.13968       276.843       284.983    
   9  0.851854E-01  -2.46293      -14.8215       14.8215       278.061       292.883    
  10  0.220620      -1.51131      -9.09485       9.09485       278.065       287.160    
  11  0.648876     -0.432513      -2.60280       2.60280       281.252       283.854    
  12  0.958689     -0.421884E-01 -0.253884      0.253884       277.598       277.852    
  13  0.240652      -1.42440      -8.57183       8.57183       281.266       289.838    
  14  0.975871     -0.244252E-01 -0.146987      0.146987       281.731       281.878    
  15  0.467835     -0.759639      -4.57139       4.57139       273.824       278.395    
  16  0.398205     -0.920788      -5.54116       5.54116       283.134       288.676    
  17  0.757338E-01  -2.58053      -15.5292       15.5292       270.221       285.750    
  18  0.654643     -0.423666      -2.54956       2.54956       282.567       285.117    
  19  0.305298      -1.18647      -7.13997       7.13997       284.234       291.374    
  20  0.435768     -0.830645      -4.99869       4.99869       282.445       287.444    
  21  0.689410     -0.371920      -2.23816       2.23816       277.280       279.518    
  22  0.267500      -1.31864      -7.93535       7.93535       286.088       294.023    
  23  0.590747     -0.526367      -3.16760       3.16760       279.661       282.828    
  24  0.108947E-01  -4.51948      -27.1975       27.1975       280.139       307.337    
  25  0.236025      -1.44382      -8.68868       8.68868       284.162       292.850    
  26  0.590760     -0.526345      -3.16746       3.16746       287.238       290.406    
  27  0.782443     -0.245334      -1.47638       1.47638       283.403       284.880    
  28  0.702257     -0.353456      -2.12704       2.12704       273.892       276.019    
  29  0.764991     -0.267891      -1.61213       1.61213       286.521       288.133    
  30  0.753362     -0.283210      -1.70431       1.70431       284.996       286.700    
  31  0.961949E-01  -2.34138      -14.0901       14.0901       292.278       306.368    
  32  0.541564     -0.613294      -3.69071       3.69071       292.428       296.118    
  33  0.474786     -0.744891      -4.48264       4.48264       288.929       293.411    
  34  0.242842      -1.41534      -8.51732       8.51732       291.268       299.785    
  35  0.495414     -0.702361      -4.22670       4.22670       293.460       297.687    
  36  0.636645     -0.451543      -2.71732       2.71732       291.922       294.639    
  37  0.758087     -0.276957      -1.66669       1.66669       290.580       292.246    
  38  0.209321      -1.56389      -9.41124       9.41124       297.530       306.942    
  39  0.484343     -0.724961      -4.36271       4.36271       269.398       273.761    
  40  0.499790     -0.693567      -4.17378       4.17378       293.215       297.389    
  41  0.316628      -1.15003      -6.92070       6.92070       282.302       289.223    
  42  0.705469     -0.348892      -2.09958       2.09958       294.889       296.988    
  43  0.514591     -0.664383      -3.99816       3.99816       297.624       301.622    
  44  0.869006     -0.140406     -0.844940      0.844940       297.865       298.710    
  45  0.112600      -2.18392      -13.1425       13.1425       296.364       309.507    
  46  0.511991     -0.669449      -4.02864       4.02864       291.528       295.556    
  47  0.477456     -0.739283      -4.44889       4.44889       300.320       304.769    
  48  0.494460     -0.704290      -4.23831       4.23831       290.025       294.263    
  49  0.698938     -0.358193      -2.15555       2.15555       300.312       302.468    
  50  0.430212     -0.843478      -5.07592       5.07592       282.492       287.568    
  51  0.474243E-01  -3.04862      -18.3461       18.3461       296.091       314.437    
  52  0.167497      -1.78679      -10.7526       10.7526       303.019       313.772    
  53  0.233811      -1.45324      -8.74540       8.74540       289.360       298.106    
  54  0.760101     -0.274304      -1.65072       1.65072       302.903       304.554    
  55  0.195143      -1.63402      -9.83331       9.83331       304.685       314.518    
  56  0.822875     -0.194951      -1.17319       1.17319       294.730       295.903    
  57  0.332571      -1.10090      -6.62506       6.62506       304.975       311.600    
  58  0.682214     -0.382412      -2.30130       2.30130       300.448       302.750    
  59  0.560875E-01  -2.88084      -17.3365       17.3365       297.677       315.013    
  60  0.407464     -0.897802      -5.40283       5.40283       296.577       301.980    
  61  0.650997     -0.429250      -2.58316       2.58316       277.729       280.312    
  62  0.426312E-01  -3.15517      -18.9873       18.9873       285.029       304.017    
  63  0.556139E-01  -2.88932      -17.3875       17.3875       301.595       318.983    
  64  0.837058     -0.177861      -1.07034       1.07034       272.126       273.196    
loop,thermsimp(1:2)       80   6.54340       1.77360    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    346        306.21          0.88          1.09         23.06          0.07          0.05         25.16
Just calling func    0   0         25.15


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    306.21
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    6.01785               379
loop is:       80
neval is:      345
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       80      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    6.01785               379
loop is:       81
neval is:      345


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      379
neval,tstepnext:      345     379

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.343927      -1.06733      -6.42301       6.42301       246.707       253.130    
   2  0.822787     -0.195058      -1.17383       1.17383       268.366       269.540    
   3  0.320831E-01  -3.43942      -20.6979       20.6979       272.126       292.824    
   4  0.224034      -1.49596      -9.00245       9.00245       269.398       278.401    
   5  0.200770      -1.60559      -9.66221       9.66221       273.892       283.554    
   6  0.983846     -0.162863E-01 -0.980082E-01  0.980082E-01   277.598       277.696    
   7  0.762274     -0.271449      -1.63354       1.63354       273.824       275.457    
   8  0.872649     -0.136221     -0.819760      0.819760       277.280       278.100    
   9  0.366891      -1.00269      -6.03403       6.03403       277.729       283.763    
  10  0.800852     -0.222079      -1.33644       1.33644       277.861       279.197    
  11  0.755695     -0.280117      -1.68570       1.68570       281.731       283.417    
  12  0.595174     -0.518902      -3.12267       3.12267       279.661       282.783    
  13  0.316509      -1.15040      -6.92295       6.92295       275.872       282.795    
  14  0.847901     -0.164991     -0.992890      0.992890       281.252       282.245    
  15  0.116195      -2.15248      -12.9533       12.9533       283.403       296.356    
  16  0.121963      -2.10403      -12.6618       12.6618       276.843       289.505    
  17  0.298485      -1.20903      -7.27578       7.27578       282.567       289.843    
  18  0.698751     -0.358461      -2.15716       2.15716       270.221       272.378    
  19  0.248186      -1.39358      -8.38633       8.38633       284.996       293.382    
  20  0.717251     -0.332329      -1.99991       1.99991       274.154       276.154    
  21  0.591856     -0.524491      -3.15631       3.15631       278.065       281.221    
  22  0.780177E-01  -2.55082      -15.3504       15.3504       282.445       297.795    
  23  0.314281      -1.15747      -6.96547       6.96547       282.492       289.457    
  24  0.565423E-01  -2.87277      -17.2879       17.2879       286.521       303.809    
  25  0.964829     -0.358044E-01 -0.215466      0.215466       275.413       275.629    
  26  0.900157     -0.105186     -0.632995      0.632995       283.134       283.767    
  27  0.656998     -0.420074      -2.52794       2.52794       282.302       284.830    
  28  0.888436E-01  -2.42088      -14.5685       14.5685       281.266       295.835    
  29  0.853838     -0.158014     -0.950905      0.950905       287.238       288.189    
  30  0.704842     -0.349782      -2.10493       2.10493       284.234       286.339    
  31  0.890111     -0.116409     -0.700530      0.700530       290.580       291.280    
  32  0.424397     -0.857087      -5.15782       5.15782       284.162       289.319    
  33  0.959371     -0.414778E-01 -0.249607      0.249607       278.061       278.311    
  34  0.323832      -1.12753      -6.78531       6.78531       288.929       295.714    
  35  0.943913     -0.577217E-01 -0.347360      0.347360       273.626       273.974    
  36  0.119048      -2.12823      -12.8073       12.8073       286.088       298.895    
  37  0.427842E-01  -3.15159      -18.9658       18.9658       290.025       308.991    
  38  0.433544     -0.835761      -5.02948       5.02948       291.922       296.952    
  39  0.773173     -0.257253      -1.54811       1.54811       291.528       293.076    
  40  0.455657     -0.786014      -4.73011       4.73011       294.730       299.460    
  41  0.362132      -1.01575      -6.11260       6.11260       292.428       298.540    
  42  0.775394     -0.254384      -1.53084       1.53084       294.889       296.420    
  43  0.889906     -0.116639     -0.701918      0.701918       293.215       293.917    
  44  0.415923     -0.877255      -5.27919       5.27919       293.460       298.739    
  45  0.374532E-01  -3.28466      -19.7666       19.7666       289.360       309.127    
  46  0.904805     -0.100036     -0.602001      0.602001       297.865       298.467    
  47  0.130905      -2.03328      -12.2360       12.2360       291.268       303.504    
  48  0.951733     -0.494710E-01 -0.297709      0.297709       297.624       297.921    
  49  0.720673     -0.327570      -1.97126       1.97126       296.577       298.549    
  50  0.425150     -0.855314      -5.14715       5.14715       300.312       305.459    
  51  0.464059     -0.767744      -4.62017       4.62017       300.448       305.068    
  52  0.822031     -0.195978      -1.17936       1.17936       285.029       286.209    
  53  0.325542      -1.12226      -6.75362       6.75362       302.903       309.657    
  54  0.701043     -0.355186      -2.13745       2.13745       300.320       302.457    
  55  0.135013      -2.00239      -12.0500       12.0500       292.278       304.328    
  56  0.911632     -0.925193E-01 -0.556767      0.556767       297.530       298.087    
  57  0.172993      -1.75450      -10.5583       10.5583       280.139       290.698    
  58  0.401556     -0.912409      -5.49074       5.49074       296.364       301.855    
  59  0.906091     -0.986152E-01 -0.593451      0.593451       304.975       305.568    
  60  0.322588      -1.13138      -6.80847       6.80847       303.019       309.828    
  61  0.779620     -0.248949      -1.49814       1.49814       296.091       297.589    
  62  0.886087     -0.120940     -0.727800      0.727800       304.685       305.413    
  63  0.841445     -0.172634      -1.03889       1.03889       297.677       298.716    
  64  0.960060E-01  -2.34334      -14.1019       14.1019       306.211       320.313    
loop,thermsimp(1:2)       81   6.42301       1.17383    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    347        301.60          0.88          1.10         23.09          0.02          0.04         25.13
Just calling func    0   0         25.14


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    301.60
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    6.01785               379
loop is:       81
neval is:      346
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       81      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    6.01785               379
loop is:       82
neval is:      346


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      379
neval,tstepnext:      346     379

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.556446     -0.586184      -3.52757       3.52757       246.707       250.235    
   2  0.926592     -0.762421E-01 -0.458813      0.458813       268.366       268.825    
   3  0.766762     -0.265579      -1.59821       1.59821       270.221       271.819    
   4  0.627980     -0.465247      -2.79979       2.79979       273.626       276.426    
   5  0.647527     -0.434594      -2.61532       2.61532       273.824       276.439    
   6  0.639464     -0.447125      -2.69073       2.69073       275.413       278.104    
   7  0.168437      -1.78119      -10.7189       10.7189       274.154       284.873    
   8  0.725133     -0.321400      -1.93414       1.93414       277.598       279.532    
   9  0.620073     -0.477917      -2.87603       2.87603       277.280       280.156    
  10  0.837394     -0.177461      -1.06793       1.06793       278.061       279.129    
  11  0.763326     -0.270070      -1.62524       1.62524       269.398       271.024    
  12  0.216703      -1.52923      -9.20267       9.20267       277.861       287.063    
  13  0.846730     -0.166373      -1.00121       1.00121       278.065       279.066    
  14  0.712127     -0.339499      -2.04306       2.04306       281.252       283.295    
  15  0.731222     -0.313039      -1.88382       1.88382       279.661       281.545    
  16  0.131329      -2.03005      -12.2165       12.2165       275.872       288.089    
  17  0.946517     -0.549662E-01 -0.330778      0.330778       281.731       282.062    
  18  0.303743      -1.19157      -7.17071       7.17071       273.892       281.063    
  19  0.452199     -0.793633      -4.77596       4.77596       277.729       282.505    
  20  0.176302      -1.73556      -10.4443       10.4443       283.134       293.579    
  21  0.569871     -0.562345      -3.38410       3.38410       282.302       285.686    
  22  0.267873      -1.31724      -7.92697       7.92697       285.029       292.956    
  23  0.295877      -1.21781      -7.32859       7.32859       284.234       291.563    
  24  0.658567     -0.417689      -2.51359       2.51359       287.238       289.752    
  25  0.633120     -0.457096      -2.75073       2.75073       284.162       286.912    
  26  0.655522     -0.422324      -2.54148       2.54148       282.492       285.033    
  27  0.532295     -0.630558      -3.79460       3.79460       276.843       280.638    
  28  0.611209     -0.492317      -2.96269       2.96269       282.567       285.530    
  29  0.768812E-01  -2.56549      -15.4387       15.4387       280.139       295.578    
  30  0.845132     -0.168262      -1.01257       1.01257       290.580       291.592    
  31  0.133696      -2.01219      -12.1090       12.1090       272.126       284.235    
  32  0.850522E-01  -2.46449      -14.8309       14.8309       291.528       306.359    
  33  0.901960     -0.103185     -0.620950      0.620950       284.996       285.617    
  34  0.394454E-01  -3.23284      -19.4547       19.4547       293.215       312.669    
  35  0.152819      -1.87850      -11.3045       11.3045       288.929       300.233    
  36  0.951369     -0.498538E-01 -0.300012      0.300012       281.266       281.566    
  37  0.909075     -0.953273E-01 -0.573665      0.573665       283.403       283.977    
  38  0.552964     -0.592462      -3.56535       3.56535       294.889       298.454    
  39  0.904748     -0.100099     -0.602381      0.602381       291.922       292.524    
  40  0.434860     -0.832731      -5.01125       5.01125       296.091       301.102    
  41  0.807557E-01  -2.51633      -15.1429       15.1429       282.445       297.588    
  42  0.245089      -1.40614      -8.46191       8.46191       297.624       306.086    
  43  0.566857     -0.567648      -3.41602       3.41602       297.530       300.946    
  44  0.154441      -1.86794      -11.2410       11.2410       297.865       309.106    
  45  0.961849     -0.388974E-01 -0.234079      0.234079       292.428       292.662    
  46  0.267234      -1.31963      -7.94134       7.94134       296.577       304.519    
  47  0.170042      -1.77171      -10.6619       10.6619       297.677       308.339    
  48  0.796608     -0.227393      -1.36842       1.36842       293.460       294.829    
  49  0.474137     -0.746260      -4.49088       4.49088       286.088       290.579    
  50  0.164737      -1.80340      -10.8526       10.8526       294.730       305.583    
  51  0.728428     -0.316867      -1.90686       1.90686       296.364       298.271    
  52  0.259284      -1.34983      -8.12308       8.12308       300.320       308.443    
  53  0.932415     -0.699773E-01 -0.421112      0.421112       291.268       291.689    
  54  0.905731     -0.990126E-01 -0.595843      0.595843       286.521       287.117    
  55  0.975166     -0.251472E-01 -0.151332      0.151332       292.278       292.429    
  56  0.312519      -1.16309      -6.99930       6.99930       300.448       307.448    
  57  0.363326      -1.01246      -6.09280       6.09280       304.685       310.778    
  58  0.633693     -0.456191      -2.74529       2.74529       300.312       303.057    
  59  0.765432     -0.267315      -1.60866       1.60866       304.975       306.583    
  60  0.197736      -1.62082      -9.75385       9.75385       290.025       299.779    
  61  0.825376     -0.191916      -1.15492       1.15492       289.360       290.515    
  62  0.401700     -0.912049      -5.48857       5.48857       302.903       308.392    
  63  0.637472     -0.450245      -2.70950       2.70950       303.019       305.729    
  64  0.989702     -0.103516E-01 -0.622944E-01  0.622944E-01   301.595       301.658    
loop,thermsimp(1:2)       82   3.52757      0.458813    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    348        277.35          0.88          1.09         23.12          0.03          0.04         25.16
Just calling func    0   0         25.16


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    277.35
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    6.01785               379
loop is:       82
neval is:      347
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       82      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    6.01785               379
loop is:       83
neval is:      347


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      379
neval,tstepnext:      347     379

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.620562     -0.477129      -2.87129       2.87129       246.707       249.578    
   2  0.835522     -0.179699      -1.08140       1.08140       268.366       269.447    
   3  0.626661     -0.467350      -2.81244       2.81244       269.398       272.211    
   4  0.197939      -1.61980      -9.74768       9.74768       270.221       279.969    
   5  0.842637     -0.171219      -1.03037       1.03037       273.626       274.657    
   6  0.873669     -0.135053     -0.812731      0.812731       273.824       274.637    
   7  0.298180E-01  -3.51264      -21.1386       21.1386       275.413       296.552    
   8  0.548374     -0.600797      -3.61551       3.61551       278.065       281.680    
   9  0.407469E-01  -3.20037      -19.2594       19.2594       278.061       297.321    
  10  0.210105E-02  -6.16532      -37.1019       37.1019       277.598       314.700    
  11  0.631577     -0.459536      -2.76542       2.76542       277.280       280.045    
  12  0.944026     -0.576013E-01 -0.346636      0.346636       276.843       277.190    
  13  0.492775     -0.707703      -4.25885       4.25885       273.892       278.151    
  14  0.195107      -1.63421      -9.83441       9.83441       279.661       289.495    
  15  0.775688     -0.254005      -1.52856       1.52856       281.266       282.795    
  16  0.763907     -0.269310      -1.62066       1.62066       281.731       283.352    
  17  0.797499     -0.226275      -1.36169       1.36169       277.729       279.091    
  18  0.639217     -0.447511      -2.69306       2.69306       281.252       283.945    
  19  0.775225     -0.254602      -1.53216       1.53216       283.403       284.935    
  20  0.680633     -0.384733      -2.31526       2.31526       272.126       274.441    
  21  0.532184     -0.630766      -3.79585       3.79585       274.154       277.950    
  22  0.843009     -0.170778      -1.02772       1.02772       282.492       283.520    
  23  0.943186     -0.584913E-01 -0.351992      0.351992       282.567       282.919    
  24  0.601611     -0.508143      -3.05793       3.05793       284.996       288.054    
  25  0.259021      -1.35084      -8.12917       8.12917       282.302       290.431    
  26  0.855132     -0.156500     -0.941793      0.941793       284.162       285.103    
  27  0.351229      -1.04632      -6.29658       6.29658       277.861       284.157    
  28  0.950362     -0.509122E-01 -0.306382      0.306382       286.521       286.827    
  29  0.447301     -0.804524      -4.84150       4.84150       275.872       280.714    
  30  0.325509      -1.12237      -6.75423       6.75423       287.238       293.992    
  31  0.717010     -0.332666      -2.00193       2.00193       289.360       291.362    
  32  0.676718     -0.390500      -2.34997       2.34997       286.088       288.438    
  33  0.493623     -0.705983      -4.24850       4.24850       284.234       288.483    
  34  0.155805E-01  -4.16174      -25.0447       25.0447       290.580       315.624    
  35  0.417708     -0.872973      -5.25342       5.25342       291.268       296.521    
  36  0.395067     -0.928699      -5.58877       5.58877       292.278       297.867    
  37  0.977835     -0.224139E-01 -0.134883      0.134883       291.922       292.057    
  38  0.603414     -0.505151      -3.03992       3.03992       292.428       295.468    
  39  0.173810      -1.74979      -10.5300       10.5300       285.029       295.559    
  40  0.979719     -0.204895E-01 -0.123303      0.123303       283.134       283.258    
  41  0.234071      -1.45213      -8.73870       8.73870       293.460       302.199    
  42  0.264051      -1.33161      -8.01345       8.01345       280.139       288.153    
  43  0.756353     -0.279247      -1.68047       1.68047       282.445       284.125    
  44  0.980782     -0.194046E-01 -0.116774      0.116774       296.364       296.481    
  45  0.444591E-01  -3.11319      -18.7347       18.7347       294.889       313.623    
  46  0.276895      -1.28412      -7.72762       7.72762       290.025       297.752    
  47  0.754338     -0.281915      -1.69652       1.69652       288.929       290.625    
  48  0.288496      -1.24308      -7.48064       7.48064       297.530       305.011    
  49  0.945547     -0.559915E-01 -0.336949      0.336949       296.091       296.428    
  50  0.698722     -0.358502      -2.15741       2.15741       301.595       303.753    
  51  0.586821     -0.533035      -3.20773       3.20773       300.312       303.520    
  52  0.173241      -1.75307      -10.5497       10.5497       296.577       307.127    
  53  0.157974      -1.84532      -11.1049       11.1049       294.730       305.835    
  54  0.789304     -0.236604      -1.42385       1.42385       303.019       304.443    
  55  0.351815      -1.04465      -6.28654       6.28654       297.624       303.910    
  56  0.109517      -2.21167      -13.3095       13.3095       291.528       304.837    
  57  0.884115     -0.123168     -0.741207      0.741207       304.975       305.716    
  58  0.590256     -0.527198      -3.17260       3.17260       300.448       303.621    
  59  0.720991     -0.327128      -1.96861       1.96861       297.677       299.645    
  60  0.584697     -0.536661      -3.22954       3.22954       302.903       306.133    
  61  0.798909E-01  -2.52709      -15.2077       15.2077       300.320       315.528    
  62  0.476858     -0.740537      -4.45644       4.45644       297.865       302.322    
  63  0.366415      -1.00399      -6.04185       6.04185       304.685       310.727    
  64  0.579292     -0.545948      -3.28543       3.28543       277.353       280.639    
loop,thermsimp(1:2)       83   2.87129       1.08140    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    349        264.23          0.88          1.10         23.03          0.07          0.05         25.12
Just calling func    0   0         25.13


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    264.23
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    6.01785               379
loop is:       83
neval is:      348
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       83      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    6.01785               379
loop is:       84
neval is:      348


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      379
neval,tstepnext:      348     379

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.573743     -0.555573      -3.34335       3.34335       246.707       250.051    
   2  0.583943E-01  -2.84054      -17.0939       17.0939       268.366       285.460    
   3  0.377108     -0.975224      -5.86875       5.86875       269.398       275.267    
   4  0.117758      -2.13912      -12.8729       12.8729       272.126       284.999    
   5  0.531627     -0.631812      -3.80215       3.80215       273.824       277.626    
   6  0.348101      -1.05526      -6.35040       6.35040       273.626       279.977    
   7  0.713050     -0.338204      -2.03526       2.03526       276.843       278.878    
   8  0.895286     -0.110612     -0.665647      0.665647       274.154       274.820    
   9  0.873863     -0.134831     -0.811393      0.811393       273.892       274.703    
  10  0.225074      -1.49132      -8.97456       8.97456       277.729       286.703    
  11  0.542220     -0.612083      -3.68342       3.68342       270.221       273.905    
  12  0.262707      -1.33672      -8.04416       8.04416       277.280       285.324    
  13  0.864358E-01  -2.44835      -14.7338       14.7338       277.353       292.087    
  14  0.468331     -0.758581      -4.56502       4.56502       275.872       280.437    
  15  0.896509     -0.109247     -0.657433      0.657433       278.065       278.722    
  16  0.169842E-01  -4.07547      -24.5256       24.5256       281.266       305.792    
  17  0.980158     -0.200410E-01 -0.120604      0.120604       282.567       282.688    
  18  0.252821      -1.37507      -8.27498       8.27498       283.134       291.409    
  19  0.556823     -0.585507      -3.52349       3.52349       281.731       285.255    
  20  0.520304     -0.653342      -3.93171       3.93171       282.492       286.424    
  21  0.956705E-01  -2.34685      -14.1230       14.1230       281.252       295.375    
  22  0.458762     -0.779224      -4.68925       4.68925       282.445       287.134    
  23  0.684654     -0.378842      -2.27981       2.27981       277.861       280.140    
  24  0.749393     -0.288492      -1.73610       1.73610       283.403       285.139    
  25  0.112724      -2.18282      -13.1359       13.1359       284.162       297.298    
  26  0.642114     -0.442989      -2.66584       2.66584       286.521       289.187    
  27  0.881888     -0.125691     -0.756387      0.756387       284.996       285.752    
  28  0.933845     -0.684452E-01 -0.411892      0.411892       280.139       280.551    
  29  0.124482      -2.08359      -12.5387       12.5387       286.088       298.626    
  30  0.189487      -1.66344      -10.0103       10.0103       284.234       294.244    
  31  0.526869     -0.640804      -3.85626       3.85626       279.661       283.517    
  32  0.490162     -0.713020      -4.29085       4.29085       282.302       286.593    
  33  0.292049      -1.23083      -7.40697       7.40697       288.929       296.336    
  34  0.646685     -0.435896      -2.62315       2.62315       289.360       291.984    
  35  0.738289     -0.303420      -1.82594       1.82594       291.922       293.748    
  36  0.379268     -0.969513      -5.83438       5.83438       287.238       293.072    
  37  0.691037     -0.369562      -2.22397       2.22397       292.428       294.652    
  38  0.566288     -0.568653      -3.42207       3.42207       285.029       288.451    
  39  0.130734      -2.03459      -12.2439       12.2439       296.091       308.335    
  40  0.298876      -1.20773      -7.26791       7.26791       296.364       303.632    
  41  0.369194     -0.996434      -5.99639       5.99639       291.268       297.264    
  42  0.291325      -1.23331      -7.42190       7.42190       275.413       282.835    
  43  0.828296     -0.188384      -1.13367       1.13367       278.061       279.195    
  44  0.540492E-01  -2.91786      -17.5592       17.5592       290.025       307.584    
  45  0.979889     -0.203162E-01 -0.122260      0.122260       292.278       292.400    
  46  0.411533     -0.887866      -5.34304       5.34304       297.677       303.020    
  47  0.430635     -0.842495      -5.07001       5.07001       293.460       298.530    
  48  0.948338     -0.530447E-01 -0.319215      0.319215       297.865       298.184    
  49  0.400713E-02  -5.51968      -33.2166       33.2166       300.312       333.529    
  50  0.963092     -0.376065E-01 -0.226310      0.226310       300.448       300.675    
  51  0.101802      -2.28472      -13.7491       13.7491       301.595       315.345    
  52  0.161305      -1.82446      -10.9793       10.9793       297.624       308.603    
  53  0.579295     -0.545944      -3.28541       3.28541       303.019       306.305    
  54  0.246178      -1.40170      -8.43523       8.43523       291.528       299.963    
  55  0.783155     -0.244425      -1.47091       1.47091       297.530       299.001    
  56  0.643375     -0.441028      -2.65404       2.65404       304.975       307.629    
  57  0.440007     -0.820964      -4.94043       4.94043       294.730       299.670    
  58  0.478097     -0.737941      -4.44082       4.44082       302.903       307.344    
  59  0.174252      -1.74725      -10.5147       10.5147       296.577       307.092    
  60  0.947266E-01  -2.35676      -14.1826       14.1826       304.685       318.868    
  61  0.115878      -2.15522      -12.9698       12.9698       294.889       307.858    
  62  0.523006     -0.648162      -3.90054       3.90054       277.598       281.498    
  63  0.114447      -2.16765      -13.0446       13.0446       300.320       313.364    
  64  0.694365     -0.364757      -2.19505       2.19505       264.230       266.425    
loop,thermsimp(1:2)       84   3.34335       17.0939    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    350        291.31          0.88          1.09         23.11          0.00          0.05         25.13
Just calling func    0   0         25.13


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    291.31
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    6.01785               379
loop is:       84
neval is:      349
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       84      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    6.01785               379
loop is:       85
neval is:      349


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      379
neval,tstepnext:      349     379

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.936701     -0.653915E-01 -0.393516      0.393516       246.707       247.101    
   2  0.765516     -0.267206      -1.60800       1.60800       264.230       265.838    
   3  0.899266     -0.106176     -0.638951      0.638951       270.221       270.860    
   4  0.953341     -0.477822E-01 -0.287546      0.287546       273.892       274.179    
   5  0.642356     -0.442612      -2.66357       2.66357       274.154       276.818    
   6  0.265713      -1.32534      -7.97569       7.97569       269.398       277.374    
   7  0.379937     -0.967749      -5.82376       5.82376       273.824       279.648    
   8  0.449606     -0.799384      -4.81057       4.81057       278.065       282.876    
   9  0.810725     -0.209826      -1.26270       1.26270       276.843       278.106    
  10  0.218977      -1.51879      -9.13985       9.13985       278.061       287.201    
  11  0.456613     -0.783919      -4.71750       4.71750       273.626       278.344    
  12  0.439289E-02  -5.42777      -32.6635       32.6635       277.861       310.524    
  13  0.710409     -0.341914      -2.05759       2.05759       275.872       277.930    
  14  0.385315     -0.953695      -5.73919       5.73919       280.139       285.878    
  15  0.116701      -2.14814      -12.9272       12.9272       277.598       290.525    
  16  0.985237     -0.148728E-01 -0.895020E-01  0.895020E-01   282.567       282.657    
  17  0.856588     -0.154798     -0.931549      0.931549       275.413       276.345    
  18  0.155419      -1.86163      -11.2030       11.2030       279.661       290.864    
  19  0.257525      -1.35664      -8.16405       8.16405       272.126       280.290    
  20  0.548716     -0.600174      -3.61176       3.61176       283.403       287.015    
  21  0.589698     -0.528145      -3.17829       3.17829       281.731       284.910    
  22  0.884364     -0.122887     -0.739512      0.739512       277.280       278.020    
  23  0.871018E-01  -2.44068      -14.6876       14.6876       268.366       283.053    
  24  0.486795     -0.719912      -4.33232       4.33232       284.996       289.328    
  25  0.161417      -1.82376      -10.9751       10.9751       282.492       293.467    
  26  0.598774     -0.512871      -3.08638       3.08638       282.302       285.389    
  27  0.483527     -0.726647      -4.37285       4.37285       277.729       282.102    
  28  0.715961     -0.334130      -2.01074       2.01074       282.445       284.456    
  29  0.771801     -0.259029      -1.55879       1.55879       285.029       286.588    
  30  0.458713     -0.779330      -4.68989       4.68989       286.521       291.211    
  31  0.235181      -1.44740      -8.71024       8.71024       283.134       291.845    
  32  0.488220     -0.716988      -4.31473       4.31473       289.360       293.675    
  33  0.365473      -1.00656      -6.05735       6.05735       277.353       283.411    
  34  0.191311      -1.65386      -9.95266       9.95266       292.278       302.231    
  35  0.484999     -0.723609      -4.35457       4.35457       287.238       291.593    
  36  0.799086     -0.224286      -1.34972       1.34972       291.922       293.272    
  37  0.811458     -0.208923      -1.25727       1.25727       284.234       285.491    
  38  0.829885E-01  -2.48905      -14.9787       14.9787       292.428       307.406    
  39  0.731085     -0.313226      -1.88495       1.88495       281.252       283.137    
  40  0.854012     -0.157810     -0.949674      0.949674       288.929       289.878    
  41  0.699629     -0.357205      -2.14961       2.14961       291.268       293.417    
  42  0.918965     -0.845069E-01 -0.508549      0.508549       284.162       284.670    
  43  0.463498     -0.768952      -4.62744       4.62744       297.865       302.493    
  44  0.758690E-01  -2.57875      -15.5185       15.5185       293.460       308.979    
  45  0.577757     -0.548602      -3.30140       3.30140       286.088       289.389    
  46  0.897332     -0.108329     -0.651908      0.651908       297.530       298.182    
  47  0.522547     -0.649040      -3.90582       3.90582       294.730       298.636    
  48  0.408730E-01  -3.19729      -19.2408       19.2408       291.528       310.769    
  49  0.244793      -1.40734      -8.46917       8.46917       300.448       308.917    
  50  0.503867     -0.685443      -4.12489       4.12489       297.677       301.802    
  51  0.268075      -1.31649      -7.92243       7.92243       296.364       304.287    
  52  0.502965     -0.687236      -4.13568       4.13568       281.266       285.402    
  53  0.204120      -1.58905      -9.56265       9.56265       303.019       312.582    
  54  0.815323     -0.204171      -1.22867       1.22867       296.577       297.806    
  55  0.197358      -1.62274      -9.76538       9.76538       302.903       312.669    
  56  0.754254     -0.282026      -1.69719       1.69719       290.025       291.722    
  57  0.693043E-01  -2.66925      -16.0631       16.0631       304.975       321.038    
  58  0.913327     -0.906616E-01 -0.545588      0.545588       294.889       295.434    
  59  0.921558     -0.816897E-01 -0.491596      0.491596       296.091       296.582    
  60  0.383396     -0.958686      -5.76922       5.76922       297.624       303.393    
  61  0.641735     -0.443580      -2.66940       2.66940       300.320       302.989    
  62  0.380707     -0.965725      -5.81158       5.81158       301.595       307.407    
  63  0.877180E-01  -2.43363      -14.6452       14.6452       304.685       319.330    
  64  0.768830     -0.262886      -1.58201       1.58201       291.313       292.895    
loop,thermsimp(1:2)       85  0.393516       1.60800    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    351        251.23          0.88          1.09         23.15          0.00          0.04         25.16
Just calling func    0   0         25.16


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    352        344.39          0.84          1.08         23.12          0.00          0.05         25.09
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    251.23
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    6.01785               379
loop is:       85
neval is:      351
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       85      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    6.01785               379
loop is:       86
neval is:      351


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      379
neval,tstepnext:      351     379

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.334399      -1.09542      -6.59207       6.59207       246.707       253.299    
   2  0.140144      -1.96508      -11.8256       11.8256       264.230       276.055    
   3  0.520913     -0.652172      -3.92467       3.92467       270.221       274.146    
   4  0.628337     -0.464678      -2.79636       2.79636       273.892       276.688    
   5  0.203324      -1.59296      -9.58617       9.58617       275.413       284.999    
   6  0.481205     -0.731462      -4.40183       4.40183       274.154       278.556    
   7  0.948759     -0.526009E-01 -0.316544      0.316544       269.398       269.715    
   8  0.251825      -1.37902      -8.29873       8.29873       275.872       284.171    
   9  0.363806      -1.01114      -6.08486       6.08486       277.280       283.365    
  10  0.465077     -0.765552      -4.60697       4.60697       276.843       281.450    
  11  0.580920     -0.543143      -3.26855       3.26855       273.626       276.895    
  12  0.957129     -0.438167E-01 -0.263682      0.263682       273.824       274.088    
  13  0.345007      -1.06419      -6.40413       6.40413       272.126       278.530    
  14  0.177852E-01  -4.02939      -24.2483       24.2483       277.729       301.977    
  15  0.843779     -0.169864      -1.02222       1.02222       282.567       283.589    
  16  0.765452     -0.267288      -1.60850       1.60850       278.065       279.673    
  17  0.453925     -0.789824      -4.75304       4.75304       268.366       273.119    
  18  0.378234     -0.972243      -5.85081       5.85081       281.252       287.102    
  19  0.167312      -1.78790      -10.7593       10.7593       277.353       288.113    
  20  0.240345      -1.42568      -8.57951       8.57951       282.445       291.024    
  21  0.868226     -0.141303     -0.850341      0.850341       284.162       285.012    
  22  0.907002     -0.976102E-01 -0.587404      0.587404       281.731       282.319    
  23  0.433040     -0.836925      -5.03649       5.03649       282.302       287.339    
  24  0.291080      -1.23416      -7.42697       7.42697       281.266       288.693    
  25  0.391091     -0.938815      -5.64964       5.64964       284.234       289.884    
  26  0.541803     -0.612853      -3.68806       3.68806       280.139       283.827    
  27  0.494251     -0.704711      -4.24085       4.24085       285.029       289.270    
  28  0.617376     -0.482277      -2.90227       2.90227       283.403       286.305    
  29  0.919515     -0.839094E-01 -0.504954      0.504954       278.061       278.566    
  30  0.836216     -0.178868      -1.07640       1.07640       284.996       286.072    
  31  0.436173     -0.829716      -4.99311       4.99311       286.088       291.081    
  32  0.175211      -1.74176      -10.4817       10.4817       288.929       299.410    
  33  0.304297      -1.18975      -7.15974       7.15974       277.598       284.757    
  34  0.996125     -0.388259E-02 -0.233648E-01  0.233648E-01   279.661       279.684    
  35  0.146253      -1.92242      -11.5688       11.5688       286.521       298.090    
  36  0.110666      -2.20124      -13.2467       13.2467       287.238       300.485    
  37  0.481190E-01  -3.03408      -18.2586       18.2586       290.025       308.283    
  38  0.342728      -1.07082      -6.44401       6.44401       283.134       289.578    
  39  0.998409E-01  -2.30418      -13.8662       13.8662       291.313       305.179    
  40  0.509248     -0.674821      -4.06097       4.06097       291.922       295.983    
  41  0.974159     -0.261804E-01 -0.157550      0.157550       291.268       291.425    
  42  0.950347     -0.509279E-01 -0.306476      0.306476       282.492       282.798    
  43  0.333494      -1.09813      -6.60838       6.60838       289.360       295.969    
  44  0.914660     -0.892024E-01 -0.536806      0.536806       294.889       295.425    
  45  0.249678      -1.38758      -8.35027       8.35027       296.091       304.441    
  46  0.512508     -0.668440      -4.02257       4.02257       296.577       300.600    
  47  0.592185     -0.523937      -3.15297       3.15297       297.530       300.683    
  48  0.931089     -0.714008E-01 -0.429679      0.429679       294.730       295.160    
  49  0.638700     -0.448321      -2.69792       2.69792       297.677       300.375    
  50  0.563786     -0.573081      -3.44871       3.44871       292.278       295.727    
  51  0.136824      -1.98906      -11.9699       11.9699       297.865       309.835    
  52  0.806361     -0.215224      -1.29518       1.29518       300.320       301.615    
  53  0.106433      -2.24024      -13.4814       13.4814       297.624       311.105    
  54  0.637638     -0.449985      -2.70794       2.70794       296.364       299.072    
  55  0.677480     -0.389375      -2.34320       2.34320       292.428       294.771    
  56  0.533764     -0.627801      -3.77801       3.77801       301.595       305.373    
  57  0.879213     -0.128728     -0.774668      0.774668       300.448       301.223    
  58  0.260545E-01  -3.64756      -21.9505       21.9505       293.460       315.411    
  59  0.249338      -1.38895      -8.35847       8.35847       277.861       286.219    
  60  0.101288      -2.28979      -13.7796       13.7796       291.528       305.307    
  61  0.563390     -0.573782      -3.45294       3.45294       303.019       306.472    
  62  0.735149     -0.307682      -1.85159       1.85159       302.903       304.755    
  63  0.720819     -0.327367      -1.97004       1.97004       304.685       306.655    
  64  0.493868     -0.705487      -4.24552       4.24552       251.225       255.471    
loop,thermsimp(1:2)       86   6.59207       11.8256    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    353        294.20          0.88          1.07         23.13          0.00          0.05         25.13
Just calling func    0   0         25.13


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    294.20
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    6.01785               379
loop is:       86
neval is:      352
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       86      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    6.01785               379
loop is:       87
neval is:      352


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      379
neval,tstepnext:      352     379

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.447127E-01  -3.10750      -18.7005       18.7005       246.707       265.408    
   2  0.682805     -0.381545      -2.29608       2.29608       251.225       253.521    
   3  0.699780     -0.356989      -2.14831       2.14831       269.398       271.547    
   4  0.515086     -0.663422      -3.99237       3.99237       268.366       272.358    
   5  0.402461     -0.910157      -5.47719       5.47719       273.824       279.301    
   6  0.652803     -0.426480      -2.56649       2.56649       270.221       272.788    
   7  0.483213     -0.727297      -4.37676       4.37676       264.230       268.607    
   8  0.873684     -0.135037     -0.812631      0.812631       273.892       274.704    
   9  0.142648      -1.94738      -11.7190       11.7190       273.626       285.345    
  10  0.844357     -0.169180      -1.01810       1.01810       272.126       273.144    
  11  0.154187      -1.86959      -11.2509       11.2509       274.154       285.405    
  12  0.437314E-01  -3.12969      -18.8340       18.8340       278.061       296.895    
  13  0.455393E-02  -5.39176      -32.4468       32.4468       278.065       310.512    
  14  0.236800      -1.44054      -8.66895       8.66895       279.661       288.330    
  15  0.660181     -0.415241      -2.49886       2.49886       276.843       279.342    
  16  0.652586     -0.426813      -2.56849       2.56849       281.731       284.300    
  17  0.153101      -1.87666      -11.2934       11.2934       282.492       293.785    
  18  0.753412     -0.283143      -1.70391       1.70391       277.280       278.984    
  19  0.240839      -1.42363      -8.56716       8.56716       282.567       291.134    
  20  0.684622     -0.378888      -2.28009       2.28009       280.139       282.419    
  21  0.243018      -1.41462      -8.51297       8.51297       275.872       284.385    
  22  0.815539     -0.203906      -1.22708       1.22708       277.598       278.825    
  23  0.589355     -0.528726      -3.18179       3.18179       275.413       278.595    
  24  0.243009      -1.41466      -8.51319       8.51319       284.162       292.675    
  25  0.821886     -0.196154      -1.18043       1.18043       284.996       286.176    
  26  0.261401      -1.34170      -8.07415       8.07415       277.861       285.935    
  27  0.571134     -0.560131      -3.37078       3.37078       283.403       286.774    
  28  0.406429E-01  -3.20293      -19.2748       19.2748       281.252       300.526    
  29  0.341463      -1.07451      -6.46627       6.46627       282.302       288.768    
  30  0.252643      -1.37578      -8.27923       8.27923       277.353       285.633    
  31  0.503366     -0.686439      -4.13088       4.13088       281.266       285.397    
  32  0.247804      -1.39512      -8.39560       8.39560       285.029       293.425    
  33  0.902392     -0.102706     -0.618068      0.618068       283.134       283.752    
  34  0.198330E-01  -3.92041      -23.5924       23.5924       284.234       307.827    
  35  0.695627     -0.362942      -2.18413       2.18413       282.445       284.629    
  36  0.833441     -0.182192      -1.09641       1.09641       286.088       287.184    
  37  0.720954     -0.327181      -1.96892       1.96892       291.268       293.237    
  38  0.155604      -1.86044      -11.1959       11.1959       292.428       303.623    
  39  0.496580E-01  -3.00260      -18.0692       18.0692       294.730       312.799    
  40  0.804644     -0.217356      -1.30801       1.30801       294.889       296.197    
  41  0.329241      -1.11097      -6.68562       6.68562       292.278       298.964    
  42  0.889596     -0.116988     -0.704016      0.704016       289.360       290.064    
  43  0.857341     -0.153920     -0.926266      0.926266       291.922       292.848    
  44  0.238258      -1.43440      -8.63200       8.63200       286.521       295.153    
  45  0.998437     -0.156448E-02 -0.941479E-02  0.941479E-02   296.364       296.374    
  46  0.280889      -1.26979      -7.64143       7.64143       288.929       296.570    
  47  0.518450     -0.656912      -3.95320       3.95320       297.677       301.630    
  48  0.348786      -1.05330      -6.33858       6.33858       287.238       293.577    
  49  0.250207      -1.38547      -8.33753       8.33753       296.577       304.915    
  50  0.442136     -0.816138      -4.91139       4.91139       297.530       302.442    
  51  0.881002     -0.126696     -0.762435      0.762435       300.448       301.211    
  52  0.903963     -0.100967     -0.607603      0.607603       300.320       300.927    
  53  0.227541      -1.48043      -8.90898       8.90898       277.729       286.638    
  54  0.468734     -0.757719      -4.55984       4.55984       296.091       300.651    
  55  0.622565E-01  -2.77649      -16.7085       16.7085       302.903       319.612    
  56  0.650607     -0.429850      -2.58677       2.58677       291.313       293.900    
  57  0.947139     -0.543094E-01 -0.326825      0.326825       291.528       291.855    
  58  0.942852     -0.588460E-01 -0.354127      0.354127       301.595       301.950    
  59  0.204603      -1.58668      -9.54841       9.54841       303.019       312.568    
  60  0.781809     -0.246145      -1.48126       1.48126       304.685       306.166    
  61  0.543108     -0.610447      -3.67357       3.67357       290.025       293.698    
  62  0.199157E-02  -6.21883      -37.4240       37.4240       297.865       335.289    
  63  0.867255     -0.142422     -0.857076      0.857076       297.624       298.481    
  64  0.846580     -0.166550      -1.00227       1.00227       294.203       295.205    
loop,thermsimp(1:2)       87   18.7005       2.29608    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    354        311.60          0.88          1.09         23.10          0.02          0.04         25.12
Just calling func    0   0         25.13


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    311.60
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    6.01785               379
loop is:       87
neval is:      353
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       87      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    6.01785               379
loop is:       88
neval is:      353


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      379
neval,tstepnext:      353     379

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.471068     -0.752752      -4.52995       4.52995       251.225       255.755    
   2  0.531040     -0.632917      -3.80880       3.80880       246.707       250.516    
   3  0.592986E-01  -2.82517      -17.0014       17.0014       264.230       281.231    
   4  0.247694      -1.39556      -8.39828       8.39828       269.398       277.797    
   5  0.131832      -2.02623      -12.1935       12.1935       268.366       280.559    
   6  0.928797E-01  -2.37645      -14.3011       14.3011       270.221       284.522    
   7  0.638590     -0.448492      -2.69896       2.69896       272.126       274.825    
   8  0.220145      -1.51347      -9.10783       9.10783       273.892       283.000    
   9  0.764323     -0.268765      -1.61739       1.61739       275.413       277.031    
  10  0.223429      -1.49866      -9.01871       9.01871       277.598       286.616    
  11  0.705665     -0.348615      -2.09791       2.09791       277.280       279.378    
  12  0.812667     -0.207434      -1.24831       1.24831       273.824       275.072    
  13  0.344167      -1.06663      -6.41881       6.41881       276.843       283.262    
  14  0.691720     -0.368573      -2.21802       2.21802       280.139       282.357    
  15  0.601584     -0.508189      -3.05820       3.05820       283.134       286.193    
  16  0.323598      -1.12825      -6.78965       6.78965       281.731       288.521    
  17  0.536181     -0.623284      -3.75083       3.75083       275.872       279.623    
  18  0.224445      -1.49412      -8.99141       8.99141       282.445       291.436    
  19  0.967837     -0.326916E-01 -0.196733      0.196733       273.626       273.823    
  20  0.982234     -0.179257E-01 -0.107874      0.107874       281.266       281.374    
  21  0.656459     -0.420894      -2.53288       2.53288       274.154       276.687    
  22  0.138036      -1.98024      -11.9168       11.9168       277.353       289.270    
  23  0.698821     -0.358360      -2.15656       2.15656       277.861       280.017    
  24  0.603237     -0.505446      -3.04170       3.04170       284.996       288.037    
  25  0.253585      -1.37205      -8.25682       8.25682       277.729       285.986    
  26  0.404885     -0.904153      -5.44105       5.44105       283.403       288.844    
  27  0.802083     -0.220543      -1.32719       1.32719       286.088       287.415    
  28  0.756447     -0.279123      -1.67972       1.67972       279.661       281.340    
  29  0.390929     -0.939231      -5.65215       5.65215       282.302       287.954    
  30  0.260757      -1.34417      -8.08899       8.08899       289.360       297.449    
  31  0.177681      -1.72776      -10.3974       10.3974       282.567       292.965    
  32  0.806362     -0.215223      -1.29518       1.29518       291.528       292.823    
  33  0.222380      -1.50337      -9.04702       9.04702       284.162       293.209    
  34  0.969986     -0.304736E-01 -0.183385      0.183385       291.922       292.105    
  35  0.417166     -0.874272      -5.26123       5.26123       291.268       296.529    
  36  0.212672      -1.54800      -9.31565       9.31565       285.029       294.345    
  37  0.141187      -1.95767      -11.7810       11.7810       287.238       299.019    
  38  0.750343     -0.287224      -1.72847       1.72847       290.025       291.753    
  39  0.628172     -0.464941      -2.79794       2.79794       282.492       285.290    
  40  0.466629     -0.762221      -4.58693       4.58693       291.313       295.900    
  41  0.120425      -2.11672      -12.7381       12.7381       286.521       299.259    
  42  0.179567      -1.71721      -10.3339       10.3339       294.203       304.537    
  43  0.209268      -1.56414      -9.41275       9.41275       294.889       304.301    
  44  0.730304E-01  -2.61688      -15.7480       15.7480       296.364       312.112    
  45  0.985392     -0.147157E-01 -0.885570E-01  0.885570E-01   288.929       289.017    
  46  0.726759E-01  -2.62175      -15.7773       15.7773       278.061       293.839    
  47  0.205943      -1.58016      -9.50915       9.50915       297.624       307.133    
  48  0.198791      -1.61550      -9.72184       9.72184       292.278       302.000    
  49  0.320500      -1.13787      -6.84755       6.84755       281.252       288.099    
  50  0.911267     -0.929191E-01 -0.559173      0.559173       296.091       296.650    
  51  0.153842      -1.87183      -11.2644       11.2644       300.320       311.584    
  52  0.152265      -1.88213      -11.3264       11.3264       300.448       311.775    
  53  0.396303     -0.925575      -5.56997       5.56997       297.677       303.247    
  54  0.964537     -0.361075E-01 -0.217289      0.217289       301.595       301.813    
  55  0.259986      -1.34713      -8.10680       8.10680       297.530       305.637    
  56  0.710828     -0.341325      -2.05404       2.05404       292.428       294.482    
  57  0.189878E-01  -3.96396      -23.8545       23.8545       296.577       320.432    
  58  0.960744     -0.400468E-01 -0.240995      0.240995       304.685       304.926    
  59  0.514017     -0.665499      -4.00487       4.00487       284.234       288.239    
  60  0.507688     -0.677888      -4.07943       4.07943       278.065       282.144    
  61  0.915765     -0.879957E-01 -0.529545      0.529545       303.019       303.549    
  62  0.648043     -0.433798      -2.61053       2.61053       294.730       297.341    
  63  0.395249     -0.928240      -5.58601       5.58601       302.903       308.489    
  64  0.604600     -0.503188      -3.02811       3.02811       311.602       314.630    
loop,thermsimp(1:2)       88   4.52995       3.80880    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    355        297.44          0.88          1.08         23.13          0.27          0.05         25.41
Just calling func    0   0         25.40


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    297.44
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    6.01785               379
loop is:       88
neval is:      354
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       88      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    6.01785               379
loop is:       89
neval is:      354


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      379
neval,tstepnext:      354     379

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.350369      -1.04877      -6.31133       6.31133       246.707       253.019    
   2  0.650675     -0.429745      -2.58614       2.58614       251.225       253.811    
   3  0.849247     -0.163405     -0.983348      0.983348       273.626       274.610    
   4  0.910703     -0.935381E-01 -0.562898      0.562898       272.126       272.689    
   5  0.188892      -1.66658      -10.0292       10.0292       273.824       283.853    
   6  0.256564      -1.36038      -8.18654       8.18654       274.154       282.341    
   7  0.465488E-01  -3.06725      -18.4583       18.4583       275.413       293.872    
   8  0.824855     -0.192548      -1.15873       1.15873       269.398       270.557    
   9  0.730565     -0.313937      -1.88922       1.88922       277.280       279.169    
  10  0.888077     -0.118697     -0.714299      0.714299       275.872       276.587    
  11  0.898172     -0.107394     -0.646281      0.646281       277.861       278.507    
  12  0.314974      -1.15527      -6.95221       6.95221       268.366       275.318    
  13  0.247979      -1.39441      -8.39135       8.39135       264.230       272.621    
  14  0.330032E-01  -3.41115      -20.5278       20.5278       279.661       300.189    
  15  0.570783E-01  -2.86333      -17.2311       17.2311       281.266       298.497    
  16  0.694187     -0.365014      -2.19660       2.19660       278.065       280.262    
  17  0.314834      -1.15571      -6.95488       6.95488       280.139       287.094    
  18  0.917621     -0.859711E-01 -0.517361      0.517361       273.892       274.409    
  19  0.613858     -0.487991      -2.93666       2.93666       276.843       279.780    
  20  0.744084E-01  -2.59819      -15.6355       15.6355       270.221       285.857    
  21  0.454198     -0.789221      -4.74941       4.74941       282.492       287.241    
  22  0.118203E-01  -4.43793      -26.7068       26.7068       277.729       304.436    
  23  0.746996     -0.291695      -1.75538       1.75538       283.134       284.890    
  24  0.416160     -0.876686      -5.27576       5.27576       277.598       282.873    
  25  0.339178E-01  -3.38381      -20.3633       20.3633       286.088       306.451    
  26  0.824080     -0.193487      -1.16438       1.16438       282.302       283.467    
  27  0.589652     -0.528223      -3.17877       3.17877       284.996       288.174    
  28  0.680293     -0.385231      -2.31826       2.31826       281.252       283.570    
  29  0.864872E-01  -2.44776      -14.7302       14.7302       284.234       298.964    
  30  0.672988     -0.396027      -2.38323       2.38323       281.731       284.115    
  31  0.797049E-01  -2.52942      -15.2217       15.2217       283.403       298.625    
  32  0.831708     -0.184273      -1.10893       1.10893       288.929       290.037    
  33  0.280253E-01  -3.57465      -21.5117       21.5117       277.353       298.865    
  34  0.131717      -2.02710      -12.1988       12.1988       282.445       294.644    
  35  0.343675      -1.06806      -6.42742       6.42742       290.025       296.452    
  36  0.280745      -1.27031      -7.64453       7.64453       291.922       299.567    
  37  0.322275      -1.13235      -6.81431       6.81431       291.528       298.342    
  38  0.769830E-01  -2.56417      -15.4308       15.4308       282.567       297.998    
  39  0.851798     -0.160406     -0.965296      0.965296       284.162       285.127    
  40  0.864683     -0.145392     -0.874946      0.874946       278.061       278.936    
  41  0.157880      -1.84592      -11.1085       11.1085       285.029       296.138    
  42  0.371895     -0.989143      -5.95251       5.95251       292.428       298.380    
  43  0.861425     -0.149167     -0.897665      0.897665       291.313       292.211    
  44  0.778275E-01  -2.55326      -15.3651       15.3651       291.268       306.633    
  45  0.450106     -0.798272      -4.80388       4.80388       296.091       300.895    
  46  0.188928      -1.66639      -10.0281       10.0281       294.730       304.758    
  47  0.225391      -1.48992      -8.96610       8.96610       289.360       298.326    
  48  0.814689     -0.204949      -1.23335       1.23335       287.238       288.471    
  49  0.556109     -0.586791      -3.53122       3.53122       286.521       290.052    
  50  0.860351     -0.150415     -0.905176      0.905176       301.595       302.501    
  51  0.124594      -2.08269      -12.5333       12.5333       292.278       304.811    
  52  0.924630     -0.783615E-01 -0.471567      0.471567       297.677       298.148    
  53  0.463685     -0.768549      -4.62501       4.62501       303.019       307.644    
  54  0.719654     -0.328985      -1.97978       1.97978       294.889       296.868    
  55  0.740445     -0.300503      -1.80838       1.80838       294.203       296.011    
  56  0.948188     -0.532020E-01 -0.320162      0.320162       304.685       305.005    
  57  0.174315      -1.74689      -10.5125       10.5125       297.530       308.043    
  58  0.436138     -0.829795      -4.99358       4.99358       297.624       302.617    
  59  0.442627     -0.815027      -4.90471       4.90471       302.903       307.808    
  60  0.781531     -0.246500      -1.48340       1.48340       300.320       301.803    
  61  0.233219E-01  -3.75836      -22.6172       22.6172       300.448       323.065    
  62  0.529855     -0.635152      -3.82225       3.82225       296.364       300.187    
  63  0.415693     -0.877807      -5.28251       5.28251       311.602       316.884    
  64  0.655864     -0.421801      -2.53834       2.53834       297.444       299.982    
loop,thermsimp(1:2)       89   6.31133       2.58614    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    356        302.84          0.88          1.08         23.11          0.00          0.05         25.12
Just calling func    0   0         25.12


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    302.84
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    6.01785               379
loop is:       89
neval is:      355
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       89      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    6.01785               379
loop is:       90
neval is:      355


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      379
neval,tstepnext:      355     379

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.131617      -2.02786      -12.2033       12.2033       246.707       258.911    
   2  0.314760      -1.15594      -6.95629       6.95629       251.225       258.181    
   3  0.748375     -0.289851      -1.74428       1.74428       269.398       271.143    
   4  0.632472     -0.458119      -2.75689       2.75689       264.230       266.987    
   5  0.677472     -0.389387      -2.34327       2.34327       272.126       274.469    
   6  0.433475     -0.835921      -5.03044       5.03044       273.892       278.922    
   7  0.458976     -0.778758      -4.68644       4.68644       273.626       278.313    
   8  0.411427E-02  -5.49329      -33.0578       33.0578       268.366       301.424    
   9  0.904989     -0.998322E-01 -0.600775      0.600775       275.872       276.473    
  10  0.480311     -0.733322      -4.41302       4.41302       277.861       282.274    
  11  0.277870      -1.28060      -7.70646       7.70646       278.061       285.768    
  12  0.958372     -0.425196E-01 -0.255877      0.255877       277.280       277.536    
  13  0.321639      -1.13432      -6.82619       6.82619       276.843       283.669    
  14  0.562333     -0.575660      -3.46424       3.46424       278.065       281.529    
  15  0.665565     -0.407119      -2.44998       2.44998       274.154       276.604    
  16  0.307614      -1.17891      -7.09450       7.09450       277.598       284.692    
  17  0.504790E-01  -2.98620      -17.9705       17.9705       282.302       300.273    
  18  0.361959      -1.01622      -6.11548       6.11548       281.252       287.367    
  19  0.470787     -0.753350      -4.53355       4.53355       273.824       278.357    
  20  0.312221      -1.16404      -7.00503       7.00503       281.731       288.736    
  21  0.156792      -1.85283      -11.1501       11.1501       283.134       294.284    
  22  0.445216     -0.809196      -4.86962       4.86962       284.162       289.031    
  23  0.999492     -0.508321E-03 -0.305900E-02  0.305900E-02   270.221       270.224    
  24  0.167067      -1.78936      -10.7681       10.7681       280.139       290.907    
  25  0.435083     -0.832219      -5.00817       5.00817       282.492       287.500    
  26  0.110403      -2.20362      -13.2610       13.2610       284.996       298.257    
  27  0.704194     -0.350701      -2.11047       2.11047       287.238       289.349    
  28  0.767816     -0.264205      -1.58995       1.58995       288.929       290.519    
  29  0.231293      -1.46407      -8.81055       8.81055       286.521       295.332    
  30  0.965513     -0.350953E-01 -0.211198      0.211198       291.313       291.524    
  31  0.674440     -0.393873      -2.37026       2.37026       275.413       277.784    
  32  0.248626      -1.39181      -8.37568       8.37568       282.445       290.821    
  33  0.461218     -0.773884      -4.65712       4.65712       294.203       298.860    
  34  0.778910     -0.249859      -1.50362       1.50362       285.029       286.533    
  35  0.665530     -0.407172      -2.45030       2.45030       290.025       292.475    
  36  0.383296     -0.958947      -5.77080       5.77080       294.889       300.659    
  37  0.492311     -0.708645      -4.26452       4.26452       282.567       286.832    
  38  0.631911     -0.459006      -2.76223       2.76223       297.677       300.439    
  39  0.150454E-01  -4.19668      -25.2550       25.2550       289.360       314.615    
  40  0.958677     -0.422006E-01 -0.253957      0.253957       291.528       291.782    
  41  0.411899     -0.886977      -5.33769       5.33769       292.428       297.765    
  42  0.466999     -0.761428      -4.58216       4.58216       281.266       285.848    
  43  0.622674     -0.473731      -2.85084       2.85084       283.403       286.254    
  44  0.497710     -0.697737      -4.19887       4.19887       277.353       281.552    
  45  0.763352E-01  -2.57262      -15.4816       15.4816       284.234       299.716    
  46  0.192360      -1.64839      -9.91973       9.91973       291.922       301.842    
  47  0.444368     -0.811101      -4.88108       4.88108       297.444       302.325    
  48  0.617268     -0.482452      -2.90332       2.90332       296.364       299.268    
  49  0.898554     -0.106968     -0.643717      0.643717       279.661       280.304    
  50  0.382850     -0.960111      -5.77780       5.77780       296.091       301.868    
  51  0.769319     -0.262250      -1.57818       1.57818       300.320       301.898    
  52  0.356805      -1.03057      -6.20179       6.20179       301.595       307.797    
  53  0.159449E-01  -4.13862      -24.9056       24.9056       297.624       322.529    
  54  0.879661     -0.128218     -0.771598      0.771598       277.729       278.501    
  55  0.413677     -0.882671      -5.31178       5.31178       294.730       300.042    
  56  0.332125      -1.10224      -6.63314       6.63314       292.278       298.911    
  57  0.963873     -0.367956E-01 -0.221430      0.221430       304.685       304.906    
  58  0.440660     -0.819481      -4.93151       4.93151       286.088       291.019    
  59  0.968287     -0.322271E-01 -0.193938      0.193938       291.268       291.462    
  60  0.174603      -1.74524      -10.5026       10.5026       303.019       313.522    
  61  0.915676E-01  -2.39068      -14.3867       14.3867       302.903       317.290    
  62  0.882563     -0.124926     -0.751783      0.751783       297.530       298.282    
  63  0.504296     -0.684592      -4.11977       4.11977       311.602       315.721    
  64  0.877119     -0.131112     -0.789012      0.789012       302.837       303.626    
loop,thermsimp(1:2)       90   12.2033       6.95629    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    357        343.26          0.88          1.09         23.07          0.05          0.05         25.13
Just calling func    0   0         25.13


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    358        271.75          0.87          1.09         23.11          0.00          0.04         25.10
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3    271.75
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    6.01785               379
loop is:       90
neval is:      357
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       90      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    6.01785               379
loop is:       91
neval is:      357


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      379
neval,tstepnext:      357     379

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.920377     -0.829717E-01 -0.499311      0.499311       251.225       251.724    
   2  0.393393     -0.932946      -5.61432       5.61432       246.707       252.322    
   3  0.317218      -1.14817      -6.90949       6.90949       264.230       271.139    
   4  0.324247      -1.12625      -6.77759       6.77759       270.221       276.999    
   5  0.515746E-01  -2.96473      -17.8413       17.8413       269.398       287.240    
   6  0.143224      -1.94335      -11.6948       11.6948       272.126       283.821    
   7  0.512136     -0.669164      -4.02693       4.02693       275.872       279.899    
   8  0.993896     -0.612239E-02 -0.368436E-01  0.368436E-01   274.154       274.191    
   9  0.440900     -0.818937      -4.92824       4.92824       277.280       282.208    
  10  0.861233     -0.149390     -0.899008      0.899008       275.413       276.312    
  11  0.690005     -0.371056      -2.23296       2.23296       273.626       275.859    
  12  0.192792      -1.64614      -9.90624       9.90624       273.824       283.730    
  13  0.975175     -0.251388E-01 -0.151281      0.151281       277.729       277.880    
  14  0.595327E-01  -2.82123      -16.9777       16.9777       273.892       290.870    
  15  0.142661      -1.94729      -11.7185       11.7185       279.661       291.379    
  16  0.141610      -1.95468      -11.7629       11.7629       278.065       289.828    
  17  0.976591     -0.236872E-01 -0.142546      0.142546       277.353       277.496    
  18  0.894748     -0.111213     -0.669266      0.669266       277.861       278.530    
  19  0.747310     -0.291275      -1.75285       1.75285       276.843       278.596    
  20  0.434887     -0.832670      -5.01088       5.01088       277.598       282.609    
  21  0.673581     -0.395146      -2.37793       2.37793       278.061       280.439    
  22  0.624944     -0.470094      -2.82895       2.82895       281.266       284.095    
  23  0.617967     -0.481321      -2.89652       2.89652       283.403       286.300    
  24  0.659853     -0.415739      -2.50185       2.50185       285.029       287.531    
  25  0.963159E-01  -2.34012      -14.0825       14.0825       282.567       296.650    
  26  0.179190      -1.71931      -10.3465       10.3465       281.252       291.598    
  27  0.251042      -1.38213      -8.31747       8.31747       282.492       290.809    
  28  0.116711      -2.14806      -12.9267       12.9267       281.731       294.658    
  29  0.890376     -0.116112     -0.698742      0.698742       284.162       284.860    
  30  0.880065E-02  -4.73293      -28.4820       28.4820       287.238       315.720    
  31  0.613810     -0.488070      -2.93713       2.93713       288.929       291.866    
  32  0.960436E-01  -2.34295      -14.0995       14.0995       282.445       296.545    
  33  0.768907E-02  -4.86796      -29.2946       29.2946       280.139       309.434    
  34  0.316163      -1.15150      -6.92953       6.92953       286.088       293.017    
  35  0.195769      -1.63082      -9.81401       9.81401       291.268       301.082    
  36  0.813020     -0.207000      -1.24569       1.24569       291.313       292.559    
  37  0.578245     -0.547758      -3.29633       3.29633       291.528       294.824    
  38  0.711511     -0.340365      -2.04826       2.04826       290.025       292.073    
  39  0.565886     -0.569362      -3.42633       3.42633       283.134       286.561    
  40  0.874556     -0.134039     -0.806626      0.806626       286.521       287.328    
  41  0.335685      -1.09158      -6.56897       6.56897       292.428       298.997    
  42  0.861776     -0.148759     -0.895212      0.895212       284.996       285.891    
  43  0.634500     -0.454918      -2.73763       2.73763       297.530       300.268    
  44  0.211879      -1.55174      -9.33814       9.33814       294.203       303.541    
  45  0.789454     -0.236414      -1.42271       1.42271       292.278       293.701    
  46  0.726316E-01  -2.62235      -15.7809       15.7809       296.364       312.145    
  47  0.344022      -1.06705      -6.42135       6.42135       284.234       290.655    
  48  0.367544      -1.00091      -6.02333       6.02333       294.730       300.753    
  49  0.634223     -0.455355      -2.74026       2.74026       282.302       285.042    
  50  0.462643     -0.770799      -4.63855       4.63855       297.677       302.315    
  51  0.904061     -0.100859     -0.606952      0.606952       294.889       295.496    
  52  0.183754      -1.69416      -10.1952       10.1952       268.366       278.561    
  53  0.214369      -1.54005      -9.26781       9.26781       291.922       301.190    
  54  0.515075     -0.663442      -3.99250       3.99250       296.091       300.083    
  55  0.173268      -1.75291      -10.5488       10.5488       300.320       310.869    
  56  0.788225     -0.237971      -1.43207       1.43207       297.444       298.876    
  57  0.657874     -0.418741      -2.51992       2.51992       302.837       305.357    
  58  0.262790      -1.33640      -8.04224       8.04224       304.685       312.727    
  59  0.806843     -0.214626      -1.29159       1.29159       301.595       302.887    
  60  0.121073      -2.11136      -12.7059       12.7059       303.019       315.725    
  61  0.928422     -0.742690E-01 -0.446940      0.446940       289.360       289.807    
  62  0.971911     -0.284914E-01 -0.171457      0.171457       311.602       311.773    
  63  0.167455      -1.78704      -10.7541       10.7541       302.903       313.657    
  64  0.280629E-01  -3.57331      -21.5036       21.5036       271.753       293.256    
loop,thermsimp(1:2)       91  0.499311       5.61432    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    359        277.16          0.88          1.09         23.12          0.00          0.05         25.13
Just calling func    0   0         25.13


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    277.16
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    6.01785               379
loop is:       91
neval is:      358
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       91      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    6.01785               379
loop is:       92
neval is:      358


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      379
neval,tstepnext:      358     379

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.313932      -1.15858      -6.97214       6.97214       251.225       258.197    
   2  0.484866     -0.723883      -4.35621       4.35621       246.707       251.063    
   3  0.743257     -0.296713      -1.78557       1.78557       264.230       266.015    
   4  0.476659     -0.740953      -4.45894       4.45894       274.154       278.613    
   5  0.895662E-01  -2.41278      -14.5197       14.5197       273.626       288.146    
   6  0.100541      -2.29719      -13.8241       13.8241       275.413       289.237    
   7  0.394309     -0.930621      -5.60033       5.60033       270.221       275.821    
   8  0.856201     -0.155250     -0.934270      0.934270       277.353       278.288    
   9  0.903325     -0.101673     -0.611853      0.611853       277.729       278.341    
  10  0.849389     -0.163238     -0.982340      0.982340       277.861       278.843    
  11  0.245876      -1.40293      -8.44262       8.44262       268.366       276.808    
  12  0.535664     -0.624247      -3.75663       3.75663       276.843       280.600    
  13  0.509317     -0.674685      -4.06015       4.06015       275.872       279.933    
  14  0.103141      -2.27166      -13.6705       13.6705       278.061       291.732    
  15  0.822327     -0.195617      -1.17719       1.17719       277.280       278.457    
  16  0.293454      -1.22603      -7.37808       7.37808       277.598       284.976    
  17  0.610098E-01  -2.79672      -16.8302       16.8302       273.824       290.654    
  18  0.467864E-01  -3.06216      -18.4276       18.4276       272.126       290.553    
  19  0.888641     -0.118062     -0.710477      0.710477       281.266       281.977    
  20  0.371769     -0.989482      -5.95455       5.95455       284.162       290.116    
  21  0.770202     -0.261103      -1.57128       1.57128       282.302       283.873    
  22  0.752967E-01  -2.58632      -15.5641       15.5641       284.996       300.560    
  23  0.787365E-01  -2.54165      -15.2953       15.2953       283.403       298.698    
  24  0.516026     -0.661597      -3.98139       3.98139       283.134       287.116    
  25  0.133613      -2.01281      -12.1128       12.1128       269.398       281.511    
  26  0.705575     -0.348742      -2.09868       2.09868       286.521       288.620    
  27  0.747326     -0.291254      -1.75272       1.75272       285.029       286.782    
  28  0.941066E-01  -2.36333      -14.2221       14.2221       289.360       303.583    
  29  0.243001      -1.41469      -8.51338       8.51338       278.065       286.578    
  30  0.186020      -1.68190      -10.1214       10.1214       284.234       294.356    
  31  0.707073     -0.346621      -2.08591       2.08591       282.492       284.578    
  32  0.820399     -0.197964      -1.19132       1.19132       273.892       275.083    
  33  0.169787E-01  -4.07580      -24.5275       24.5275       279.661       304.188    
  34  0.196118      -1.62904      -9.80331       9.80331       281.252       291.055    
  35  0.910420E-01  -2.39643      -14.4214       14.4214       288.929       303.350    
  36  0.101963      -2.28314      -13.7396       13.7396       290.025       303.764    
  37  0.816143     -0.203166      -1.22262       1.22262       291.313       292.536    
  38  0.921931     -0.812847E-01 -0.489159      0.489159       286.088       286.577    
  39  0.867385     -0.142273     -0.856175      0.856175       271.753       272.609    
  40  0.534867     -0.625737      -3.76559       3.76559       292.278       296.044    
  41  0.354961      -1.03575      -6.23297       6.23297       281.731       287.964    
  42  0.707205     -0.346435      -2.08479       2.08479       291.528       293.613    
  43  0.341296      -1.07501      -6.46922       6.46922       294.889       301.358    
  44  0.615332     -0.485594      -2.92223       2.92223       282.445       285.367    
  45  0.100325      -2.29934      -13.8371       13.8371       282.567       296.404    
  46  0.218012      -1.52321      -9.16642       9.16642       297.444       306.611    
  47  0.346044      -1.06119      -6.38607       6.38607       292.428       298.814    
  48  0.313706      -1.15930      -6.97648       6.97648       296.091       303.067    
  49  0.884226     -0.123043     -0.740453      0.740453       297.530       298.271    
  50  0.562231     -0.575842      -3.46533       3.46533       294.730       298.195    
  51  0.208749      -1.56662      -9.42769       9.42769       291.268       300.695    
  52  0.553752     -0.591038      -3.55678       3.55678       291.922       295.479    
  53  0.389358     -0.943257      -5.67638       5.67638       297.677       303.353    
  54  0.290822      -1.23504      -7.43230       7.43230       301.595       309.028    
  55  0.592574     -0.523280      -3.14902       3.14902       294.203       297.352    
  56  0.816972     -0.202151      -1.21651       1.21651       302.837       304.054    
  57  0.674491     -0.393797      -2.36981       2.36981       280.139       282.509    
  58  0.136892      -1.98856      -11.9669       11.9669       300.320       312.287    
  59  0.783273     -0.244273      -1.47000       1.47000       311.602       313.072    
  60  0.896165     -0.109631     -0.659740      0.659740       296.364       297.024    
  61  0.268163      -1.31616      -7.92045       7.92045       304.685       312.605    
  62  0.773898     -0.256315      -1.54246       1.54246       302.903       304.446    
  63  0.929489     -0.731207E-01 -0.440029      0.440029       287.238       287.678    
  64  0.588680     -0.529872      -3.18869       3.18869       277.156       280.344    
loop,thermsimp(1:2)       92   6.97214       4.35621    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    360        294.93          0.88          1.10         23.10          0.02          0.04         25.15
Just calling func    0   0         25.15


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    294.93
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    6.01785               379
loop is:       92
neval is:      359
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       92      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    6.01785               379
loop is:       93
neval is:      359


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      379
neval,tstepnext:      359     379

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.642285E-02  -5.04789      -30.3775       30.3775       246.707       277.085    
   2  0.977343     -0.229176E-01 -0.137915      0.137915       251.225       251.363    
   3  0.515611     -0.662402      -3.98624       3.98624       264.230       268.216    
   4  0.985018     -0.150949E-01 -0.908391E-01  0.908391E-01   271.753       271.844    
   5  0.909744E-01  -2.39718      -14.4258       14.4258       273.892       288.318    
   6  0.163485      -1.81103      -10.8985       10.8985       270.221       281.120    
   7  0.709610     -0.343039      -2.06436       2.06436       268.366       270.430    
   8  0.639309     -0.447368      -2.69219       2.69219       277.353       280.046    
   9  0.500633     -0.691882      -4.16364       4.16364       277.729       281.893    
  10  0.623218     -0.472859      -2.84560       2.84560       277.280       280.126    
  11  0.974620     -0.257075E-01 -0.154704      0.154704       274.154       274.309    
  12  0.940866     -0.609540E-01 -0.366812      0.366812       277.861       278.227    
  13  0.268848      -1.31361      -7.90509       7.90509       275.872       283.777    
  14  0.131404      -2.02948      -12.2131       12.2131       277.156       289.369    
  15  0.242045      -1.41863      -8.53711       8.53711       276.843       285.380    
  16  0.333489      -1.09815      -6.60848       6.60848       269.398       276.007    
  17  0.540917     -0.614489      -3.69790       3.69790       281.266       284.964    
  18  0.935945     -0.661981E-01 -0.398370      0.398370       280.139       280.538    
  19  0.948265     -0.531218E-01 -0.319679      0.319679       282.302       282.622    
  20  0.306672      -1.18198      -7.11296       7.11296       282.492       289.605    
  21  0.674766E-01  -2.69597      -16.2240       16.2240       277.598       293.822    
  22  0.304885      -1.18782      -7.14813       7.14813       282.445       289.593    
  23  0.987276     -0.128055E-01 -0.770613E-01  0.770613E-01   286.088       286.165    
  24  0.866309     -0.143514     -0.863646      0.863646       278.065       278.929    
  25  0.325072      -1.12371      -6.76230       6.76230       285.029       291.792    
  26  0.882651     -0.124826     -0.751183      0.751183       283.134       283.886    
  27  0.608994E-02  -5.10112      -30.6977       30.6977       287.238       317.936    
  28  0.956776     -0.441859E-01 -0.265904      0.265904       281.731       281.997    
  29  0.680690E-01  -2.68723      -16.1714       16.1714       273.626       289.798    
  30  0.870194     -0.139039     -0.836715      0.836715       286.521       287.358    
  31  0.154954      -1.86463      -11.2210       11.2210       275.413       286.634    
  32  0.533144     -0.628963      -3.78500       3.78500       284.162       287.947    
  33  0.848128     -0.164724     -0.991283      0.991283       272.126       273.117    
  34  0.302343E-01  -3.49878      -21.0551       21.0551       273.824       294.879    
  35  0.670768     -0.399332      -2.40312       2.40312       281.252       283.655    
  36  0.575709     -0.552152      -3.32277       3.32277       278.061       281.384    
  37  0.961243     -0.395278E-01 -0.237873      0.237873       291.313       291.551    
  38  0.174287      -1.74705      -10.5135       10.5135       291.528       302.041    
  39  0.450902     -0.796506      -4.79325       4.79325       284.234       289.027    
  40  0.807155     -0.214240      -1.28926       1.28926       291.922       293.211    
  41  0.245094E-01  -3.70870      -22.3184       22.3184       292.278       314.597    
  42  0.840819     -0.173379      -1.04337       1.04337       282.567       283.611    
  43  0.418157     -0.871899      -5.24696       5.24696       296.364       301.611    
  44  0.795491     -0.228796      -1.37686       1.37686       294.203       295.579    
  45  0.675445E-01  -2.69497      -16.2179       16.2179       294.730       310.948    
  46  0.158617      -1.84126      -11.0804       11.0804       297.530       308.611    
  47  0.538475     -0.619015      -3.72513       3.72513       283.403       287.128    
  48  0.318292      -1.14479      -6.88916       6.88916       292.428       299.317    
  49  0.427160     -0.850596      -5.11876       5.11876       284.996       290.114    
  50  0.485422     -0.722737      -4.34932       4.34932       291.268       295.617    
  51  0.603579     -0.504879      -3.03829       3.03829       294.889       297.927    
  52  0.151674      -1.88602      -11.3498       11.3498       296.091       307.440    
  53  0.216599      -1.52971      -9.20555       9.20555       288.929       298.134    
  54  0.838062     -0.176664      -1.06313       1.06313       297.677       298.740    
  55  0.728698     -0.316496      -1.90462       1.90462       289.360       291.265    
  56  0.866837     -0.142904     -0.859976      0.859976       290.025       290.885    
  57  0.921748     -0.814837E-01 -0.490357      0.490357       302.837       303.327    
  58  0.325236      -1.12320      -6.75926       6.75926       279.661       286.420    
  59  0.316044      -1.15187      -6.93180       6.93180       302.903       309.835    
  60  0.163050      -1.81370      -10.9146       10.9146       297.444       308.359    
  61  0.940520     -0.613225E-01 -0.369030      0.369030       301.595       301.964    
  62  0.439004     -0.823246      -4.95417       4.95417       300.320       305.274    
  63  0.209586      -1.56262      -9.40361       9.40361       304.685       314.089    
  64  0.521405     -0.651229      -3.91899       3.91899       294.926       298.845    
loop,thermsimp(1:2)       93   30.3775      0.137915    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    361       2455.01          0.88          1.09         23.10          0.00          0.05         25.12
Just calling func    0   0         25.12


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    362        279.87          0.85          1.09         23.12          0.02          0.05         25.12
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  360    2455.0        4.379     -1.250      4.626     -100.0     0.6948    
                      -1.258      2.706     -100.0      3.069     0.4207    
                       1.280    -0.4156      2.400      0.000      0.000    
                     -0.5072      0.000      0.000      0.000     -1.221    

                      -2.500     0.1098E+05 0.1656E+05 -1200.     -2557.    
                      -2.000     -8.108      5.590     -1.637    -0.2291    
                      -14.28     -2.058      1359.      0.000      3354.    

                       4764.      3323.      5073.      5329.      2500.    
                       4298.    -0.6786E-01-0.7570E-01  0.000    -0.5330E-01
                      0.1831    -0.1167     0.2118     0.5179E-02-0.1647    

                     -0.5041    -0.8769      0.000     0.3221     0.1507    
                      0.8541E-01 0.2084     0.2617     0.1940     0.8544E-01
                      0.5915E-01-0.4258E-01-0.4476    -0.3728      0.000    

                      -2.326     -5.070      6.080     -1.144      0.000    
                       0.000      9.035      8.919     -6222.     -4.000    
                      0.1543    -0.6257      8.746      8.405    -0.1764E+05

                      -4.000     0.1265      1.794      9.361      9.293    
                      -6044.     -4.000     0.9101E-01 0.8279      9.353    
                       9.080     -1700.     -2.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3    279.87
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    6.01785               379
loop is:       93
neval is:      361
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       93      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    6.01785               379
loop is:       94
neval is:      361


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      379
neval,tstepnext:      361     379

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.415683     -0.877831      -5.28266       5.28266       251.225       256.508    
   2  0.262668E-01  -3.63945      -21.9016       21.9016       264.230       286.132    
   3  0.620248     -0.477636      -2.87434       2.87434       268.366       271.240    
   4  0.249183      -1.38957      -8.36220       8.36220       271.753       280.115    
   5  0.999872     -0.128438E-03 -0.772919E-03  0.772919E-03   272.126       272.127    
   6  0.933252     -0.690802E-01 -0.415714      0.415714       274.154       274.570    
   7  0.857047     -0.154263     -0.928331      0.928331       269.398       270.327    
   8  0.365787      -1.00570      -6.05217       6.05217       246.707       252.759    
   9  0.499682     -0.693784      -4.17509       4.17509       277.861       282.036    
  10  0.761560     -0.272387      -1.63918       1.63918       278.065       279.704    
  11  0.793904E-01  -2.53338      -15.2455       15.2455       277.353       292.599    
  12  0.514449     -0.664659      -3.99981       3.99981       277.280       281.280    
  13  0.678176     -0.388349      -2.33703       2.33703       280.139       282.476    
  14  0.257558      -1.35651      -8.16327       8.16327       270.221       278.384    
  15  0.832067E-01  -2.48643      -14.9629       14.9629       278.061       293.024    
  16  0.272851      -1.29883      -7.81616       7.81616       277.729       285.545    
  17  0.255245      -1.36553      -8.21756       8.21756       281.731       289.949    
  18  0.419883     -0.867779      -5.22216       5.22216       282.302       287.524    
  19  0.870346     -0.138865     -0.835667      0.835667       282.567       283.403    
  20  0.814510E-01  -2.50775      -15.0913       15.0913       281.252       296.343    
  21  0.560000     -0.579819      -3.48926       3.48926       275.872       279.362    
  22  0.860285     -0.150492     -0.905637      0.905637       283.134       284.040    
  23  0.538601     -0.618780      -3.72373       3.72373       281.266       284.990    
  24  0.542321     -0.611898      -3.68231       3.68231       276.843       280.525    
  25  0.836575     -0.178440      -1.07382       1.07382       286.088       287.162    
  26  0.705694     -0.348574      -2.09767       2.09767       279.661       281.758    
  27  0.301063      -1.20043      -7.22403       7.22403       275.413       282.637    
  28  0.125899      -2.07227      -12.4706       12.4706       283.403       295.874    
  29  0.476747     -0.740770      -4.45784       4.45784       286.521       290.979    
  30  0.676103     -0.391410      -2.35544       2.35544       284.162       286.517    
  31  0.385349     -0.953606      -5.73865       5.73865       273.892       279.630    
  32  0.141470      -1.95567      -11.7689       11.7689       284.234       296.003    
  33  0.146971      -1.91752      -11.5394       11.5394       277.156       288.695    
  34  0.616396     -0.483866      -2.91183       2.91183       282.445       285.357    
  35  0.962361     -0.383659E-01 -0.230880      0.230880       282.492       282.723    
  36  0.618266     -0.480836      -2.89360       2.89360       273.626       276.520    
  37  0.369072     -0.996763      -5.99837       5.99837       284.996       290.994    
  38  0.312675      -1.16259      -6.99629       6.99629       290.025       297.021    
  39  0.367326      -1.00150      -6.02690       6.02690       289.360       295.387    
  40  0.184422      -1.69053      -10.1734       10.1734       291.313       301.486    
  41  0.113088      -2.17959      -13.1164       13.1164       285.029       298.146    
  42  0.333487      -1.09815      -6.60851       6.60851       291.922       298.531    
  43  0.407562     -0.897562      -5.40139       5.40139       277.598       282.999    
  44  0.443434     -0.813206      -4.89375       4.89375       273.824       278.718    
  45  0.265046      -1.32785      -7.99082       7.99082       294.203       302.193    
  46  0.444603     -0.810573      -4.87790       4.87790       291.268       296.146    
  47  0.689395E-01  -2.67453      -16.0949       16.0949       294.889       310.984    
  48  0.862417     -0.148017     -0.890742      0.890742       288.929       289.819    
  49  0.541063     -0.614219      -3.69627       3.69627       297.677       301.373    
  50  0.885208     -0.121933     -0.733773      0.733773       294.926       295.660    
  51  0.808718     -0.212305      -1.27762       1.27762       292.428       293.705    
  52  0.238877E-01  -3.73439      -22.4730       22.4730       296.364       318.837    
  53  0.428951     -0.846414      -5.09359       5.09359       301.595       306.689    
  54  0.860433     -0.150319     -0.904600      0.904600       291.528       292.432    
  55  0.367713      -1.00045      -6.02057       6.02057       302.837       308.858    
  56  0.782210     -0.245632      -1.47818       1.47818       300.320       301.798    
  57  0.916512E-01  -2.38976      -14.3812       14.3812       296.091       310.472    
  58  0.230050      -1.46946      -8.84298       8.84298       297.444       306.287    
  59  0.715909     -0.334202      -2.01118       2.01118       297.530       299.542    
  60  0.992857E-01  -2.30975      -13.8997       13.8997       302.903       316.803    
  61  0.697124     -0.360791      -2.17119       2.17119       294.730       296.901    
  62  0.232699      -1.45801      -8.77409       8.77409       304.685       313.459    
  63  0.134492      -2.00625      -12.0733       12.0733       292.278       304.351    
  64  0.778931     -0.249833      -1.50346       1.50346       279.872       281.375    
loop,thermsimp(1:2)       94   5.28266       21.9016    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    363        277.88          0.88          1.09         23.12          0.00          0.05         25.13
Just calling func    0   0         25.13


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    277.88
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    6.01785               379
loop is:       94
neval is:      362
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       94      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    6.01785               379
loop is:       95
neval is:      362


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      379
neval,tstepnext:      362     379

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.292887      -1.22797      -7.38974       7.38974       246.707       254.097    
   2  0.225242      -1.49058      -8.97008       8.97008       251.225       260.195    
   3  0.946430E-01  -2.35764      -14.1879       14.1879       269.398       283.586    
   4  0.371694     -0.989684      -5.95577       5.95577       268.366       274.321    
   5  0.933291     -0.690381E-01 -0.415461      0.415461       272.126       272.541    
   6  0.926571     -0.762651E-01 -0.458952      0.458952       274.154       274.613    
   7  0.138048      -1.98015      -11.9163       11.9163       273.626       285.542    
   8  0.113008E-01  -4.48288      -26.9773       26.9773       270.221       297.198    
   9  0.405736     -0.902053      -5.42842       5.42842       273.824       279.252    
  10  0.390885     -0.939341      -5.65281       5.65281       275.872       281.525    
  11  0.873008     -0.135810     -0.817285      0.817285       273.892       274.709    
  12  0.945037     -0.565316E-01 -0.340198      0.340198       278.065       278.405    
  13  0.642194E-01  -2.74545      -16.5217       16.5217       271.753       288.275    
  14  0.322052E-01  -3.43563      -20.6751       20.6751       276.843       297.518    
  15  0.521559     -0.650933      -3.91721       3.91721       277.280       281.197    
  16  0.271788      -1.30273      -7.83966       7.83966       279.872       287.711    
  17  0.153503      -1.87403      -11.2777       11.2777       279.661       290.938    
  18  0.219303      -1.51730      -9.13088       9.13088       277.861       286.991    
  19  0.476616     -0.741044      -4.45949       4.45949       280.139       284.599    
  20  0.510024     -0.673297      -4.05180       4.05180       275.413       279.465    
  21  0.393388     -0.932959      -5.61440       5.61440       282.492       288.106    
  22  0.947927     -0.534776E-01 -0.321820      0.321820       277.598       277.919    
  23  0.472009     -0.750758      -4.51794       4.51794       282.567       287.085    
  24  0.678717     -0.387551      -2.33222       2.33222       283.134       285.467    
  25  0.617620     -0.481882      -2.89989       2.89989       281.266       284.166    
  26  0.138594E-01  -4.27879      -25.7491       25.7491       282.445       308.194    
  27  0.588445     -0.530273      -3.19110       3.19110       277.729       280.920    
  28  0.950805     -0.504465E-01 -0.303579      0.303579       264.230       264.533    
  29  0.444108     -0.811687      -4.88461       4.88461       284.162       289.046    
  30  0.299195      -1.20666      -7.26150       7.26150       286.088       293.349    
  31  0.808517E-01  -2.51514      -15.1357       15.1357       282.302       297.438    
  32  0.493903     -0.705415      -4.24508       4.24508       277.156       281.401    
  33  0.973584     -0.267710E-01 -0.161104      0.161104       288.929       289.090    
  34  0.219889      -1.51463      -9.11484       9.11484       281.731       290.846    
  35  0.872114     -0.136835     -0.823454      0.823454       286.521       287.344    
  36  0.413991     -0.881912      -5.30721       5.30721       284.996       290.303    
  37  0.155656      -1.86011      -11.1939       11.1939       291.528       302.722    
  38  0.744603     -0.294905      -1.77469       1.77469       277.353       279.128    
  39  0.627736     -0.465635      -2.80212       2.80212       278.061       280.863    
  40  0.137880      -1.98137      -11.9236       11.9236       292.428       304.351    
  41  0.270817      -1.30631      -7.86119       7.86119       289.360       297.222    
  42  0.271872      -1.30243      -7.83780       7.83780       294.926       302.764    
  43  0.988104     -0.119670E-01 -0.720155E-01  0.720155E-01   283.403       283.475    
  44  0.837729E-01  -2.47965      -14.9221       14.9221       284.234       299.156    
  45  0.731806     -0.312240      -1.87902       1.87902       291.268       293.147    
  46  0.520356     -0.653242      -3.93111       3.93111       281.252       285.183    
  47  0.158934      -1.83927      -11.0684       11.0684       294.730       305.798    
  48  0.724534     -0.322226      -1.93911       1.93911       290.025       291.964    
  49  0.895315     -0.110580     -0.665451      0.665451       285.029       285.695    
  50  0.850194     -0.162291     -0.976641      0.976641       291.922       292.899    
  51  0.428755     -0.846869      -5.09633       5.09633       297.530       302.627    
  52  0.523907     -0.646440      -3.89018       3.89018       297.677       301.567    
  53  0.358551      -1.02568      -6.17241       6.17241       291.313       297.485    
  54  0.680509     -0.384914      -2.31635       2.31635       300.320       302.636    
  55  0.607274     -0.498775      -3.00155       3.00155       294.203       297.204    
  56  0.591502     -0.525090      -3.15991       3.15991       292.278       295.438    
  57  0.121812      -2.10527      -12.6692       12.6692       297.444       310.113    
  58  0.812950     -0.207086      -1.24621       1.24621       301.595       302.842    
  59  0.915745     -0.880175E-01 -0.529676      0.529676       302.837       303.367    
  60  0.596748     -0.516260      -3.10677       3.10677       296.091       299.197    
  61  0.229246      -1.47296      -8.86405       8.86405       294.889       303.753    
  62  0.706979     -0.346754      -2.08671       2.08671       304.685       306.772    
  63  0.879114     -0.128841     -0.775343      0.775343       302.903       303.679    
  64  0.529368     -0.636072      -3.82779       3.82779       277.876       281.704    
loop,thermsimp(1:2)       95   7.38974       8.97008    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    364        288.73          0.88          1.09         23.12          0.02          0.04         25.15
Just calling func    0   0         25.15


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    288.73
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    6.01785               379
loop is:       95
neval is:      363
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       95      95
 right before GO TO 250



 right after: 250 IF (loop < nloop) CYCLE Main_loop 
loop,nloop:       95      95
loop was equal to nloop so did not start main cycle again, now will do the following: 




calculate mean & stdev of func values for current simplex (hmean,hstd)
 write hstd
 RMS of function values of last simplex =   11.1568    

hmean,hstd :    283.095       11.1568    


writing best so far by calling functn2 
 but just writing params not moments. see the change in functn2
hmean,hstd :    283.095       11.1568    
h(1),h(best1),h(np1) :    246.707       246.707       288.734    
htherm(1),htherm(best1),htherm(np1) :    254.097       254.097       310.113    


 CHECK hstd>?stopcr
---------> IF hstd>stopcr (and maxfn,neval.nevalp conditions as well) then set iflag and loop to zero and go to the start of the main cycle again 
---------> IF hstd<=stopcr then find the centroid of the current simplex and get the function value there 
 ............
 ............
 ............
 ............
  .NOT. (hstd > stopcr .AND. (((maxfn>=0).AND.(neval <= maxfn)).OR.((maxfn<0).AND.(nevalp <= -1*maxfn))  )) 
  so find the centroid of current simplex and get teh function value there 
  call functn(p,func) 
  neval = neval + 1
  nevalp = nevalp + 1
  IF ((iprint > 0).AND.(realrank==0)) THEN 
     IF (MOD(neval,iprint) == 0) WRITE (lout,5100) neval, func, p 
  END IF  
  CHECK wtr the no. of func values allowed, maxfn, has been overrun. if so, exit with ifault= 1 
  IF maxfn>0 check based on neval. if maxfn<0 check based on nevalp. 
  i.e.: ---->IF (((maxfn>=0).AND.(neval > maxfn)).OR.((maxfn<0).AND.(nevalp > -1*maxfn))) THEN
        ---->IF the above if statement true then something ... RETURN 
        ---->IF the above if statement not true then you get out of that if statement ... CONVGENCE CRTI SATISFIED - RETURN 
 ............
 ............
iter,obj,time:    365        272.05          0.88          1.09         23.12          0.00          0.05         25.13

 EVIDENCE OF CONVERGENCE
 Centroid of last simplex =
    4.4741      -1.2214       4.2745      -100.00      0.39868      -1.1952    
    2.3896      -100.00       2.8183      0.50906       1.2663     -0.31290    
    2.4000       0.0000       0.0000     -0.54050       0.0000       0.0000    
    0.0000      -1.2210      -2.5000       10706.       15804.      -1085.8    

   -2529.7      -2.0000      -7.4670      -2.6119      -2.9322     -0.67117    
   -13.985      -2.1668       1358.8       0.0000       3354.5       4763.8    
    3323.5       5072.9       5329.0       2500.1       4298.4      0.61900E-01
  -0.45394E-01   0.0000     -0.62576E-01  0.15057     -0.33244E-01  0.19509    

  -0.41956E-02 -0.11076     -0.87849     -0.73621       0.0000      0.30690    
   0.12075      0.85411E-01  0.15374      0.19585      0.18546      0.54742E-01
   0.36937E-01 -0.64193E-02 -0.31196     -0.48651       0.0000      -1.9295    
   -3.9739       5.4024      -1.1747       0.0000       0.0000       9.0570    

    9.0289      -5747.9      -4.0000     -0.20593     -0.42719       8.8251    
    8.3234      -14229.      -4.0000      0.41859       1.5818       9.3509    
    9.2471      -5934.0      -4.0000      0.34286      0.71526       9.4072    
    9.0403      -2338.3      -2.0000    
 Function value at centroid =   272.054    

beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    6.01785               379
loop is:        1
neval is:      364


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      379
neval,tstepnext:      364     379

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.195490      -1.63225      -9.82261       9.82261       246.707       256.530    
   2  0.313379      -1.16034      -6.98276       6.98276       251.225       258.208    
   3  0.769177     -0.262434      -1.57929       1.57929       264.230       265.809    
   4  0.884560E-01  -2.42525      -14.5948       14.5948       272.126       286.721    
   5  0.890596     -0.115865     -0.697257      0.697257       268.366       269.063    
   6  0.657268     -0.419664      -2.52547       2.52547       274.154       276.679    
   7  0.960898     -0.398874E-01 -0.240036      0.240036       273.892       274.132    
   8  0.613422E-01  -2.79129      -16.7975       16.7975       277.598       294.395    
   9  0.264483E-01  -3.63256      -21.8602       21.8602       278.065       299.925    
  10  0.304822      -1.18803      -7.14937       7.14937       277.353       284.503    
  11  0.977907     -0.223409E-01 -0.134444      0.134444       273.824       273.958    
  12  0.746737     -0.292042      -1.75747       1.75747       275.413       277.171    
  13  0.450918E-01  -3.09905      -18.6496       18.6496       278.061       296.711    
  14  0.625433     -0.469311      -2.82424       2.82424       277.729       280.553    
  15  0.990029     -0.100208E-01 -0.603034E-01  0.603034E-01   277.280       277.340    
  16  0.985060     -0.150527E-01 -0.905848E-01  0.905848E-01   277.156       277.246    
  17  0.691362     -0.369092      -2.22114       2.22114       275.872       278.094    
  18  0.864323E-02  -4.75098      -28.5907       28.5907       277.876       306.467    
  19  0.908027E-01  -2.39907      -14.4372       14.4372       283.403       297.840    
  20  0.500093     -0.692962      -4.17014       4.17014       269.398       273.568    
  21  0.806913     -0.214539      -1.29106       1.29106       281.266       282.557    
  22  0.317749      -1.14649      -6.89942       6.89942       280.139       287.039    
  23  0.753050     -0.283623      -1.70680       1.70680       281.252       282.958    
  24  0.850048     -0.162463     -0.977675      0.977675       283.134       284.112    
  25  0.346718      -1.05924      -6.37436       6.37436       273.626       280.001    
  26  0.731558     -0.312579      -1.88105       1.88105       285.029       286.910    
  27  0.226645      -1.48437      -8.93272       8.93272       277.861       286.793    
  28  0.887805     -0.119003     -0.716140      0.716140       282.567       283.283    
  29  0.277731      -1.28110      -7.70949       7.70949       286.521       294.230    
  30  0.914814     -0.890349E-01 -0.535799      0.535799       279.872       280.407    
  31  0.298911      -1.20761      -7.26721       7.26721       282.492       289.759    
  32  0.469757     -0.755540      -4.54672       4.54672       271.753       276.300    
  33  0.217087      -1.52746      -9.19201       9.19201       284.162       293.354    
  34  0.143996      -1.93797      -11.6624       11.6624       288.929       300.591    
  35  0.873815     -0.134887     -0.811727      0.811727       284.996       285.807    
  36  0.102289      -2.27995      -13.7204       13.7204       281.731       295.452    
  37  0.583483     -0.538740      -3.24205       3.24205       279.661       282.903    
  38  0.308185      -1.17705      -7.08334       7.08334       290.025       297.108    
  39  0.129509      -2.04400      -12.3005       12.3005       291.922       304.223    
  40  0.858329     -0.152767     -0.919331      0.919331       291.268       292.187    
  41  0.247121      -1.39788      -8.41220       8.41220       286.088       294.500    
  42  0.672462     -0.396810      -2.38794       2.38794       292.278       294.666    
  43  0.978226     -0.220145E-01 -0.132480      0.132480       270.221       270.354    
  44  0.571205     -0.560006      -3.37003       3.37003       294.203       297.573    
  45  0.390724E-01  -3.24234      -19.5119       19.5119       289.360       308.872    
  46  0.773307     -0.257080      -1.54707       1.54707       282.302       283.849    
  47  0.860034     -0.150783     -0.907390      0.907390       291.313       292.220    
  48  0.521048     -0.651913      -3.92311       3.92311       276.843       280.766    
  49  0.577715     -0.548675      -3.30184       3.30184       284.234       287.536    
  50  0.449025     -0.800676      -4.81835       4.81835       296.091       300.909    
  51  0.879701     -0.128173     -0.771327      0.771327       297.677       298.448    
  52  0.553161     -0.592107      -3.56321       3.56321       297.530       301.094    
  53  0.501250E-01  -2.99324      -18.0128       18.0128       300.320       318.333    
  54  0.600542     -0.509923      -3.06864       3.06864       291.528       294.596    
  55  0.268895      -1.31343      -7.90404       7.90404       294.926       302.830    
  56  0.966550     -0.340228E-01 -0.204744      0.204744       301.595       301.800    
  57  0.223816      -1.49693      -9.00830       9.00830       302.837       311.845    
  58  0.422624     -0.861271      -5.18300       5.18300       302.903       308.086    
  59  0.664887     -0.408138      -2.45611       2.45611       294.889       297.345    
  60  0.710934     -0.341176      -2.05315       2.05315       292.428       294.481    
  61  0.476264     -0.741782      -4.46393       4.46393       294.730       299.194    
  62  0.736919     -0.305278      -1.83711       1.83711       304.685       306.522    
  63  0.124855      -2.08060      -12.5208       12.5208       282.445       294.966    
  64  0.440629     -0.819552      -4.93194       4.93194       288.734       293.666    
loop,thermsimp(1:2)        1   9.82261       6.98276    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    366        363.70          0.88          1.10         23.11          0.16          0.05         25.30
Just calling func    0   0         25.30


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    367        289.04          0.88          1.09         23.15          0.00          0.04         25.16
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3    289.04
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    6.01785               379
loop is:        1
neval is:      366
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        1      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    6.01785               379
loop is:        2
neval is:      366


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      379
neval,tstepnext:      366     379

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.233544      -1.45438      -8.75225       8.75225       246.707       255.459    
   2  0.293881      -1.22458      -7.36934       7.36934       251.225       258.594    
   3  0.833435     -0.182199      -1.09645       1.09645       264.230       265.326    
   4  0.931284     -0.711905E-01 -0.428413      0.428413       268.366       268.794    
   5  0.965536     -0.350722E-01 -0.211059      0.211059       270.221       270.432    
   6  0.534034     -0.627296      -3.77497       3.77497       269.398       273.173    
   7  0.975689     -0.246118E-01 -0.148110      0.148110       273.824       273.972    
   8  0.958131     -0.427704E-01 -0.257386      0.257386       273.892       274.149    
   9  0.487835     -0.717779      -4.31948       4.31948       271.753       276.072    
  10  0.941751     -0.600144E-01 -0.361157      0.361157       274.154       274.515    
  11  0.764698     -0.268274      -1.61443       1.61443       275.413       277.028    
  12  0.282403      -1.26442      -7.60908       7.60908       277.156       284.765    
  13  0.694349     -0.364781      -2.19520       2.19520       277.280       279.475    
  14  0.257622      -1.35626      -8.16177       8.16177       275.872       284.034    
  15  0.401572     -0.912369      -5.49050       5.49050       273.626       279.117    
  16  0.828654     -0.187952      -1.13107       1.13107       279.872       281.003    
  17  0.113844      -2.17292      -13.0763       13.0763       277.729       290.805    
  18  0.383967     -0.957199      -5.76028       5.76028       276.843       282.603    
  19  0.767294     -0.264886      -1.59404       1.59404       281.266       282.860    
  20  0.230085      -1.46930      -8.84205       8.84205       279.661       288.503    
  21  0.248551      -1.39211      -8.37749       8.37749       281.252       289.629    
  22  0.739043     -0.302399      -1.81979       1.81979       282.567       284.387    
  23  0.427702     -0.849328      -5.11112       5.11112       282.302       287.413    
  24  0.217549      -1.52533      -9.17920       9.17920       283.134       292.314    
  25  0.126759      -2.06546      -12.4296       12.4296       277.353       289.783    
  26  0.278624      -1.27789      -7.69017       7.69017       284.996       292.686    
  27  0.736668     -0.305618      -1.83916       1.83916       272.126       273.965    
  28  0.183809      -1.69386      -10.1934       10.1934       277.861       288.054    
  29  0.915242     -0.885666E-01 -0.532980      0.532980       285.029       285.562    
  30  0.864610     -0.145477     -0.875457      0.875457       280.139       281.015    
  31  0.996457     -0.354911E-02 -0.213580E-01  0.213580E-01   284.234       284.255    
  32  0.937047     -0.650222E-01 -0.391294      0.391294       282.492       282.883    
  33  0.664908     -0.408106      -2.45592       2.45592       291.268       293.724    
  34  0.409422     -0.893009      -5.37399       5.37399       291.313       296.687    
  35  0.293825E-01  -3.52736      -21.2271       21.2271       284.162       305.389    
  36  0.528099     -0.638471      -3.84222       3.84222       288.734       292.576    
  37  0.582244E-01  -2.84345      -17.1115       17.1115       286.521       303.632    
  38  0.394879     -0.929175      -5.59164       5.59164       277.598       283.189    
  39  0.619316     -0.479139      -2.88339       2.88339       292.428       295.311    
  40  0.760056     -0.274363      -1.65108       1.65108       286.088       287.739    
  41  0.322606      -1.13132      -6.80814       6.80814       291.528       298.336    
  42  0.806034     -0.215629      -1.29762       1.29762       292.278       293.576    
  43  0.158197      -1.84391      -11.0964       11.0964       282.445       293.541    
  44  0.964399     -0.362497E-01 -0.218145      0.218145       281.731       281.950    
  45  0.891984     -0.114307     -0.687880      0.687880       278.061       278.749    
  46  0.896576E-01  -2.41176      -14.5136       14.5136       290.025       304.538    
  47  0.976522     -0.237576E-01 -0.142969      0.142969       294.889       295.032    
  48  0.145640      -1.92662      -11.5941       11.5941       294.203       305.797    
  49  0.580689E-01  -2.84612      -17.1275       17.1275       283.403       300.531    
  50  0.154224      -1.86935      -11.2495       11.2495       297.677       308.926    
  51  0.623776     -0.471964      -2.84021       2.84021       294.730       297.570    
  52  0.949887     -0.514119E-01 -0.309389      0.309389       278.065       278.374    
  53  0.681810     -0.383005      -2.30486       2.30486       288.929       291.233    
  54  0.377382     -0.974497      -5.86437       5.86437       296.091       301.955    
  55  0.928894     -0.737604E-01 -0.443879      0.443879       297.530       297.974    
  56  0.484665     -0.724298      -4.35871       4.35871       301.595       305.954    
  57  0.499587     -0.693974      -4.17623       4.17623       294.926       299.102    
  58  0.478934     -0.736193      -4.43030       4.43030       291.922       296.352    
  59  0.520581     -0.652809      -3.92851       3.92851       277.876       281.805    
  60  0.320323E-01  -3.44101      -20.7075       20.7075       304.685       325.392    
  61  0.157322      -1.84946      -11.1298       11.1298       302.903       314.033    
  62  0.590227     -0.527248      -3.17290       3.17290       289.360       292.533    
  63  0.686824     -0.375677      -2.26077       2.26077       302.837       305.098    
  64  0.423825     -0.858435      -5.16593       5.16593       289.044       294.209    
loop,thermsimp(1:2)        2   8.75225       7.36934    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    368        312.01          0.86          1.08         23.08          0.08          0.05         25.14
Just calling func    0   0         25.14


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    312.01
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    6.01785               379
loop is:        2
neval is:      367
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        2      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    6.01785               379
loop is:        3
neval is:      367


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      379
neval,tstepnext:      367     379

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.402951     -0.908939      -5.46986       5.46986       246.707       252.177    
   2  0.995767     -0.424237E-02 -0.255299E-01  0.255299E-01   251.225       251.251    
   3  0.232708      -1.45797      -8.77384       8.77384       264.230       273.004    
   4  0.844104     -0.169480      -1.01990       1.01990       268.366       269.386    
   5  0.835080     -0.180228      -1.08458       1.08458       270.221       271.306    
   6  0.492927     -0.707395      -4.25700       4.25700       269.398       273.655    
   7  0.669838     -0.400719      -2.41146       2.41146       272.126       274.537    
   8  0.161727      -1.82184      -10.9636       10.9636       273.824       284.787    
   9  0.712877     -0.338447      -2.03672       2.03672       273.892       275.929    
  10  0.187101      -1.67610      -10.0865       10.0865       274.154       284.241    
  11  0.152475      -1.88075      -11.3181       11.3181       271.753       283.071    
  12  0.299805      -1.20462      -7.24923       7.24923       275.413       282.662    
  13  0.388928     -0.944360      -5.68301       5.68301       278.065       283.748    
  14  0.396030     -0.926264      -5.57412       5.57412       278.061       283.635    
  15  0.795332     -0.228996      -1.37806       1.37806       273.626       275.004    
  16  0.209301      -1.56398      -9.41180       9.41180       277.280       286.692    
  17  0.292717      -1.22855      -7.39322       7.39322       279.872       287.265    
  18  0.128603E-01  -4.35361      -26.1993       26.1993       280.139       306.339    
  19  0.386579E-01  -3.25301      -19.5761       19.5761       277.876       297.452    
  20  0.284417      -1.25731      -7.56633       7.56633       281.731       289.298    
  21  0.962037     -0.387027E-01 -0.232907      0.232907       276.843       277.076    
  22  0.340824      -1.07639      -6.47754       6.47754       281.266       287.744    
  23  0.463892     -0.768103      -4.62233       4.62233       282.492       287.114    
  24  0.772349     -0.258319      -1.55452       1.55452       277.598       279.152    
  25  0.580884     -0.543204      -3.26892       3.26892       275.872       279.141    
  26  0.519264     -0.655343      -3.94375       3.94375       284.234       288.178    
  27  0.336321      -1.08969      -6.55759       6.55759       282.567       289.125    
  28  0.975360     -0.249491E-01 -0.150140      0.150140       277.156       277.306    
  29  0.768530     -0.263276      -1.58435       1.58435       285.029       286.614    
  30  0.536540     -0.622614      -3.74679       3.74679       282.302       286.049    
  31  0.922732     -0.804161E-01 -0.483932      0.483932       286.088       286.572    
  32  0.603353     -0.505252      -3.04053       3.04053       277.861       280.901    
  33  0.927279E-01  -2.37809      -14.3110       14.3110       279.661       293.972    
  34  0.180890      -1.70987      -10.2897       10.2897       281.252       291.541    
  35  0.933825E-01  -2.37105      -14.2686       14.2686       277.353       291.622    
  36  0.343444      -1.06873      -6.43146       6.43146       277.729       284.160    
  37  0.102193      -2.28089      -13.7260       13.7260       288.929       302.655    
  38  0.397576     -0.922370      -5.55068       5.55068       283.134       288.685    
  39  0.455007     -0.787443      -4.73871       4.73871       289.360       294.099    
  40  0.559910     -0.579979      -3.49022       3.49022       288.734       292.224    
  41  0.901058     -0.104186     -0.626975      0.626975       284.996       285.623    
  42  0.849435     -0.163184     -0.982014      0.982014       282.445       283.427    
  43  0.231812      -1.46183      -8.79705       8.79705       292.278       301.075    
  44  0.119620      -2.12344      -12.7785       12.7785       291.268       304.046    
  45  0.885994     -0.121045     -0.728429      0.728429       289.044       289.772    
  46  0.166933      -1.79016      -10.7729       10.7729       294.889       305.662    
  47  0.284605      -1.25665      -7.56234       7.56234       292.428       299.990    
  48  0.392630     -0.934887      -5.62601       5.62601       291.922       297.548    
  49  0.275341      -1.28974      -7.76148       7.76148       291.313       299.074    
  50  0.808723     -0.212299      -1.27758       1.27758       294.730       296.008    
  51  0.544552     -0.607792      -3.65760       3.65760       297.530       301.188    
  52  0.729547     -0.315331      -1.89761       1.89761       291.528       293.425    
  53  0.986801     -0.132865E-01 -0.799562E-01  0.799562E-01   294.926       295.006    
  54  0.814160     -0.205599      -1.23726       1.23726       283.403       284.640    
  55  0.847794     -0.165117     -0.993651      0.993651       296.091       297.084    
  56  0.248789      -1.39115      -8.37173       8.37173       286.521       294.893    
  57  0.294277      -1.22323      -7.36124       7.36124       290.025       297.386    
  58  0.747234     -0.291377      -1.75346       1.75346       302.837       304.591    
  59  0.517211     -0.659304      -3.96759       3.96759       284.162       288.129    
  60  0.362192      -1.01558      -6.11161       6.11161       294.203       300.314    
  61  0.495572     -0.702043      -4.22479       4.22479       301.595       305.820    
  62  0.742180     -0.298163      -1.79430       1.79430       297.677       299.471    
  63  0.464476     -0.766845      -4.61476       4.61476       302.903       307.518    
  64  0.179754      -1.71616      -10.3276       10.3276       312.010       322.338    
loop,thermsimp(1:2)        3   5.46986      0.255299E-01

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    369        304.68          0.88          1.12         23.07          0.04          0.04         25.15
Just calling func    0   0         25.15


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    304.68
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    6.01785               379
loop is:        3
neval is:      368
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        3      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    6.01785               379
loop is:        4
neval is:      368


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      379
neval,tstepnext:      368     379

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.344716      -1.06504      -6.40922       6.40922       251.225       257.634    
   2  0.337825      -1.08523      -6.53073       6.53073       246.707       253.238    
   3  0.129257      -2.04595      -12.3122       12.3122       268.366       280.678    
   4  0.218013      -1.52320      -9.16640       9.16640       270.221       279.388    
   5  0.764988     -0.267896      -1.61215       1.61215       264.230       265.842    
   6  0.134235      -2.00816      -12.0848       12.0848       269.398       281.483    
   7  0.921891     -0.813288E-01 -0.489424      0.489424       272.126       272.615    
   8  0.879140E-01  -2.43140      -14.6318       14.6318       273.626       288.258    
   9  0.853506     -0.158403     -0.953242      0.953242       273.892       274.845    
  10  0.781888     -0.246043      -1.48065       1.48065       276.843       278.324    
  11  0.572060     -0.558512      -3.36104       3.36104       277.156       280.517    
  12  0.370929     -0.991745      -5.96817       5.96817       275.872       281.841    
  13  0.659208     -0.416716      -2.50773       2.50773       277.598       280.105    
  14  0.192080      -1.64984      -9.92849       9.92849       277.861       287.789    
  15  0.834249     -0.181224      -1.09058       1.09058       275.413       276.504    
  16  0.275735      -1.28831      -7.75288       7.75288       271.753       279.506    
  17  0.899896     -0.105476     -0.634737      0.634737       282.445       283.080    
  18  0.263842      -1.33241      -8.01822       8.01822       278.061       286.079    
  19  0.542051     -0.612396      -3.68530       3.68530       278.065       281.750    
  20  0.883103     -0.124314     -0.748101      0.748101       277.729       278.477    
  21  0.603547     -0.504931      -3.03860       3.03860       274.154       277.193    
  22  0.461006     -0.774344      -4.65989       4.65989       283.403       288.063    
  23  0.640920     -0.444850      -2.67704       2.67704       273.824       276.501    
  24  0.787319     -0.239122      -1.43900       1.43900       284.996       286.435    
  25  0.258775E-01  -3.65438      -21.9915       21.9915       282.302       304.294    
  26  0.838926     -0.175633      -1.05693       1.05693       286.088       287.145    
  27  0.184807      -1.68845      -10.1608       10.1608       285.029       295.190    
  28  0.642750     -0.441999      -2.65988       2.65988       277.280       279.940    
  29  0.962815     -0.378938E-01 -0.228039      0.228039       282.492       282.720    
  30  0.866393     -0.143417     -0.863059      0.863059       279.872       280.735    
  31  0.652626     -0.426751      -2.56812       2.56812       281.266       283.834    
  32  0.170956      -1.76635      -10.6296       10.6296       284.162       294.791    
  33  0.769008     -0.262654      -1.58061       1.58061       284.234       285.815    
  34  0.156770      -1.85298      -11.1509       11.1509       283.134       294.285    
  35  0.256549E-01  -3.66302      -22.0435       22.0435       282.567       304.611    
  36  0.726661     -0.319295      -1.92147       1.92147       281.731       283.653    
  37  0.556665     -0.585792      -3.52520       3.52520       289.044       292.569    
  38  0.381201     -0.964427      -5.80378       5.80378       281.252       287.055    
  39  0.312648      -1.16268      -6.99681       6.99681       277.353       284.350    
  40  0.523641     -0.646949      -3.89324       3.89324       288.734       292.627    
  41  0.525107     -0.644154      -3.87642       3.87642       291.528       295.404    
  42  0.577096     -0.549746      -3.30829       3.30829       279.661       282.969    
  43  0.218919      -1.51905      -9.14143       9.14143       289.360       298.502    
  44  0.406968     -0.899021      -5.41017       5.41017       286.521       291.931    
  45  0.269244      -1.31214      -7.89623       7.89623       294.926       302.822    
  46  0.150666      -1.89269      -11.3899       11.3899       294.730       306.120    
  47  0.619490     -0.478859      -2.88170       2.88170       296.091       298.972    
  48  0.204317      -1.58808      -9.55685       9.55685       290.025       299.582    
  49  0.924766     -0.782150E-01 -0.470686      0.470686       277.876       278.347    
  50  0.897527E-01  -2.41070      -14.5072       14.5072       291.922       306.429    
  51  0.938635     -0.633286E-01 -0.381102      0.381102       291.313       291.694    
  52  0.265009      -1.32799      -7.99165       7.99165       297.677       305.669    
  53  0.914538     -0.893366E-01 -0.537614      0.537614       292.428       292.965    
  54  0.369988     -0.994284      -5.98345       5.98345       294.203       300.186    
  55  0.670325     -0.399992      -2.40709       2.40709       292.278       294.685    
  56  0.580716     -0.543494      -3.27066       3.27066       297.530       300.801    
  57  0.640472     -0.445550      -2.68125       2.68125       288.929       291.610    
  58  0.711348E-01  -2.64318      -15.9062       15.9062       291.268       307.174    
  59  0.377254E-01  -3.27742      -19.7230       19.7230       302.837       322.560    
  60  0.712296     -0.339261      -2.04162       2.04162       294.889       296.930    
  61  0.628609     -0.464246      -2.79376       2.79376       301.595       304.389    
  62  0.729486     -0.315415      -1.89812       1.89812       280.139       282.037    
  63  0.851489     -0.160769     -0.967483      0.967483       302.903       303.871    
  64  0.728439     -0.316851      -1.90676       1.90676       304.685       306.592    
loop,thermsimp(1:2)        4   6.40922       6.53073    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    370        296.81          0.88          1.11         23.12          0.01          0.05         25.16
Just calling func    0   0         25.17


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    296.81
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    6.01785               379
loop is:        4
neval is:      369
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        4      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    6.01785               379
loop is:        5
neval is:      369


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      379
neval,tstepnext:      369     379

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.993880     -0.613850E-02 -0.369405E-01  0.369405E-01   246.707       246.744    
   2  0.544036     -0.608740      -3.66331       3.66331       251.225       254.888    
   3  0.752151     -0.284818      -1.71399       1.71399       264.230       265.944    
   4  0.128894      -2.04876      -12.3291       12.3291       272.126       284.455    
   5  0.954586     -0.464781E-01 -0.279698      0.279698       273.892       274.172    
   6  0.699109     -0.357949      -2.15408       2.15408       273.824       275.978    
   7  0.158831      -1.83992      -11.0723       11.0723       275.413       286.486    
   8  0.317803      -1.14632      -6.89840       6.89840       274.154       281.052    
   9  0.533633     -0.628047      -3.77949       3.77949       276.843       280.623    
  10  0.232061      -1.46076      -8.79061       8.79061       277.876       286.667    
  11  0.798671     -0.224806      -1.35285       1.35285       277.729       279.082    
  12  0.629719     -0.462482      -2.78315       2.78315       270.221       273.004    
  13  0.285415      -1.25381      -7.54524       7.54524       271.753       279.298    
  14  0.101345      -2.28923      -13.7762       13.7762       277.280       291.056    
  15  0.523846     -0.646557      -3.89088       3.89088       277.598       281.489    
  16  0.570798     -0.560721      -3.37433       3.37433       277.156       280.530    
  17  0.471006     -0.752884      -4.53074       4.53074       268.366       272.896    
  18  0.439034     -0.823179      -4.95377       4.95377       279.872       284.825    
  19  0.755118     -0.280881      -1.69030       1.69030       269.398       271.089    
  20  0.987033     -0.130515E-01 -0.785419E-01  0.785419E-01   278.065       278.143    
  21  0.800390E-01  -2.52524      -15.1965       15.1965       275.872       291.069    
  22  0.739282     -0.302075      -1.81784       1.81784       280.139       281.957    
  23  0.367536      -1.00093      -6.02347       6.02347       282.492       288.515    
  24  0.397431     -0.922735      -5.55288       5.55288       279.661       285.214    
  25  0.338773      -1.08242      -6.51386       6.51386       282.445       288.959    
  26  0.388721     -0.944893      -5.68622       5.68622       281.731       287.418    
  27  0.298998      -1.20732      -7.26545       7.26545       281.266       288.532    
  28  0.668470     -0.402763      -2.42377       2.42377       277.353       279.777    
  29  0.604587     -0.503210      -3.02824       3.02824       284.234       287.262    
  30  0.455577     -0.786190      -4.73117       4.73117       278.061       282.792    
  31  0.842360     -0.171548      -1.03235       1.03235       284.996       286.028    
  32  0.452047     -0.793969      -4.77799       4.77799       281.252       286.030    
  33  0.994488     -0.552709E-02 -0.332612E-01  0.332612E-01   286.088       286.121    
  34  0.309000E-02  -5.77958      -34.7807       34.7807       277.861       312.641    
  35  0.171789      -1.76149      -10.6004       10.6004       283.403       294.003    
  36  0.567417     -0.566661      -3.41008       3.41008       273.626       277.036    
  37  0.885121     -0.122031     -0.734364      0.734364       288.929       289.663    
  38  0.342608      -1.07117      -6.44612       6.44612       291.313       297.759    
  39  0.954017     -0.470733E-01 -0.283280      0.283280       286.521       286.804    
  40  0.439346     -0.822467      -4.94948       4.94948       289.044       293.993    
  41  0.237365E-01  -3.74074      -22.5112       22.5112       288.734       311.245    
  42  0.100236      -2.30023      -13.8424       13.8424       292.428       306.270    
  43  0.539338     -0.617412      -3.71549       3.71549       283.134       286.850    
  44  0.825393     -0.191896      -1.15480       1.15480       292.278       293.433    
  45  0.252744      -1.37538      -8.27681       8.27681       284.162       292.438    
  46  0.676050     -0.391488      -2.35591       2.35591       285.029       287.385    
  47  0.621378     -0.475815      -2.86338       2.86338       291.528       294.391    
  48  0.375614     -0.979194      -5.89264       5.89264       294.889       300.781    
  49  0.638637     -0.448418      -2.69851       2.69851       289.360       292.059    
  50  0.540154     -0.615902      -3.70640       3.70640       296.091       299.797    
  51  0.295099      -1.22045      -7.34446       7.34446       290.025       297.369    
  52  0.195781      -1.63076      -9.81365       9.81365       294.203       304.016    
  53  0.430058     -0.843836      -5.07808       5.07808       297.530       302.608    
  54  0.686512E-01  -2.67872      -16.1201       16.1201       294.926       311.046    
  55  0.689090     -0.372384      -2.24095       2.24095       302.903       305.144    
  56  0.737045     -0.305106      -1.83608       1.83608       282.302       284.138    
  57  0.303800      -1.19139      -7.16958       7.16958       301.595       308.765    
  58  0.709025     -0.343864      -2.06932       2.06932       282.567       284.637    
  59  0.754321     -0.281937      -1.69665       1.69665       297.677       299.374    
  60  0.917745E-01  -2.38842      -14.3731       14.3731       294.730       309.103    
  61  0.600903     -0.509321      -3.06502       3.06502       291.922       294.987    
  62  0.880182     -0.127627     -0.768037      0.768037       304.685       305.453    
  63  0.318171      -1.14517      -6.89144       6.89144       291.268       298.159    
  64  0.625153     -0.469759      -2.82694       2.82694       296.806       299.633    
loop,thermsimp(1:2)        5  0.369405E-01   3.66331    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    371        265.29          0.89          1.09         23.11          0.02          0.05         25.16
Just calling func    0   0         25.15


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    265.29
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    6.01785               379
loop is:        5
neval is:      370
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        5      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    6.01785               379
loop is:        6
neval is:      370


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      379
neval,tstepnext:      370     379

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.342475      -1.07156      -6.44846       6.44846       246.707       253.156    
   2  0.738210     -0.303527      -1.82658       1.82658       251.225       253.052    
   3  0.254388      -1.36889      -8.23780       8.23780       264.230       272.468    
   4  0.184184      -1.69182      -10.1811       10.1811       269.398       279.579    
   5  0.467311     -0.760760      -4.57814       4.57814       268.366       272.944    
   6  0.718957     -0.329953      -1.98561       1.98561       270.221       272.207    
   7  0.233172      -1.45598      -8.76185       8.76185       273.892       282.654    
   8  0.855319     -0.156281     -0.940473      0.940473       273.824       274.764    
   9  0.331323      -1.10466      -6.64768       6.64768       273.626       280.274    
  10  0.737635E-01  -2.60689      -15.6879       15.6879       278.065       293.753    
  11  0.960656     -0.401393E-01 -0.241552      0.241552       277.729       277.970    
  12  0.312287      -1.16383      -7.00376       7.00376       271.753       278.757    
  13  0.252190      -1.37757      -8.29001       8.29001       277.353       285.643    
  14  0.775876     -0.253763      -1.52711       1.52711       277.156       278.683    
  15  0.397248     -0.923194      -5.55564       5.55564       276.843       282.399    
  16  0.587084E-01  -2.83517      -17.0616       17.0616       274.154       291.216    
  17  0.923214     -0.798941E-01 -0.480790      0.480790       277.598       278.078    
  18  0.147001      -1.91731      -11.5381       11.5381       280.139       291.677    
  19  0.275551      -1.28898      -7.75691       7.75691       278.061       285.818    
  20  0.157032      -1.85131      -11.1409       11.1409       282.302       293.443    
  21  0.468534     -0.758146      -4.56241       4.56241       272.126       276.688    
  22  0.101055      -2.29209      -13.7934       13.7934       282.567       296.361    
  23  0.891765     -0.114553     -0.689360      0.689360       279.872       280.561    
  24  0.756241     -0.279395      -1.68136       1.68136       279.661       281.342    
  25  0.212181E-01  -3.85290      -23.1862       23.1862       284.996       308.182    
  26  0.807607     -0.213679      -1.28589       1.28589       281.252       282.538    
  27  0.233854      -1.45306      -8.74428       8.74428       286.088       294.832    
  28  0.622600     -0.473852      -2.85157       2.85157       275.413       278.265    
  29  0.188561      -1.66833      -10.0398       10.0398       277.876       287.916    
  30  0.938432E-01  -2.36613      -14.2390       14.2390       286.521       300.760    
  31  0.846333     -0.166843      -1.00403       1.00403       283.134       284.138    
  32  0.258796      -1.35172      -8.13442       8.13442       284.234       292.369    
  33  0.503854     -0.685469      -4.12505       4.12505       285.029       289.154    
  34  0.577410     -0.549202      -3.30501       3.30501       281.731       285.036    
  35  0.282259E-01  -3.56751      -21.4688       21.4688       282.492       303.961    
  36  0.618901     -0.479811      -2.88743       2.88743       281.266       284.154    
  37  0.563982     -0.572733      -3.44662       3.44662       282.445       285.892    
  38  0.290650      -1.23563      -7.43586       7.43586       288.929       296.364    
  39  0.165662      -1.79781      -10.8189       10.8189       277.280       288.099    
  40  0.871949E-01  -2.43961      -14.6812       14.6812       275.872       290.554    
  41  0.494744     -0.703714      -4.23485       4.23485       289.360       293.595    
  42  0.156326      -1.85581      -11.1680       11.1680       284.162       295.330    
  43  0.558357     -0.582757      -3.50694       3.50694       292.278       295.785    
  44  0.974745     -0.255792E-01 -0.153932      0.153932       289.044       289.197    
  45  0.399321     -0.917991      -5.52433       5.52433       283.403       288.927    
  46  0.649792     -0.431103      -2.59431       2.59431       291.528       294.122    
  47  0.210634      -1.55763      -9.37359       9.37359       291.922       301.296    
  48  0.939937     -0.619427E-01 -0.372762      0.372762       290.025       290.398    
  49  0.617394     -0.482248      -2.90209       2.90209       291.313       294.215    
  50  0.435355     -0.831593      -5.00440       5.00440       291.268       296.272    
  51  0.423449     -0.859323      -5.17127       5.17127       297.677       302.848    
  52  0.922974     -0.801543E-01 -0.482356      0.482356       296.806       297.289    
  53  0.877321     -0.130883     -0.787632      0.787632       296.091       296.878    
  54  0.757805     -0.277329      -1.66893       1.66893       294.889       296.558    
  55  0.972356     -0.280336E-01 -0.168702      0.168702       297.530       297.699    
  56  0.535145     -0.625217      -3.76246       3.76246       294.203       297.965    
  57  0.654598     -0.423734      -2.54996       2.54996       302.903       305.453    
  58  0.131676E-01  -4.32999      -26.0572       26.0572       304.685       330.742    
  59  0.835144     -0.180151      -1.08412       1.08412       292.428       293.512    
  60  0.965311E-01  -2.33789      -14.0691       14.0691       301.595       315.665    
  61  0.955098     -0.459413E-01 -0.276468      0.276468       294.730       295.006    
  62  0.807730     -0.213527      -1.28497       1.28497       294.926       296.211    
  63  0.312538      -1.16303      -6.99893       6.99893       288.734       295.733    
  64  0.757580     -0.277626      -1.67071       1.67071       265.290       266.961    
loop,thermsimp(1:2)        6   6.44846       1.82658    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    372        306.33          0.88          1.08         23.08          0.09          0.04         25.16
Just calling func    0   0         25.17


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    306.33
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    6.01785               379
loop is:        6
neval is:      371
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        6      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    6.01785               379
loop is:        7
neval is:      371


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      379
neval,tstepnext:      371     379

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.667416     -0.404342      -2.43327       2.43327       251.225       253.658    
   2  0.361364E-01  -3.32046      -19.9820       19.9820       246.707       266.689    
   3  0.167171      -1.78874      -10.7643       10.7643       265.290       276.055    
   4  0.268590E-01  -3.61716      -21.7675       21.7675       270.221       291.989    
   5  0.979339     -0.208774E-01 -0.125637      0.125637       264.230       264.356    
   6  0.285956E-01  -3.55450      -21.3904       21.3904       268.366       289.756    
   7  0.614036     -0.487701      -2.93491       2.93491       273.824       276.759    
   8  0.291622      -1.23230      -7.41576       7.41576       272.126       279.542    
   9  0.495778     -0.701626      -4.22228       4.22228       277.729       281.951    
  10  0.289385      -1.24000      -7.46212       7.46212       277.598       285.060    
  11  0.601390     -0.508511      -3.06014       3.06014       275.413       278.473    
  12  0.868837     -0.140599     -0.846105      0.846105       277.156       278.002    
  13  0.289097E-01  -3.54358      -21.3247       21.3247       271.753       293.078    
  14  0.999895     -0.104574E-03 -0.629313E-03  0.629313E-03   269.398       269.399    
  15  0.547924     -0.601620      -3.62045       3.62045       273.626       277.247    
  16  0.562607     -0.575175      -3.46131       3.46131       279.872       283.333    
  17  0.422387     -0.861832      -5.18638       5.18638       279.661       284.847    
  18  0.934703     -0.675264E-01 -0.406364      0.406364       276.843       277.249    
  19  0.484044     -0.725579      -4.36642       4.36642       281.252       285.618    
  20  0.362136      -1.01574      -6.11254       6.11254       273.892       280.004    
  21  0.826677     -0.190341      -1.14544       1.14544       283.134       284.280    
  22  0.383965     -0.957204      -5.76031       5.76031       281.266       287.027    
  23  0.403854     -0.906702      -5.45639       5.45639       281.731       287.188    
  24  0.375365     -0.979857      -5.89663       5.89663       277.353       283.250    
  25  0.335540      -1.09201      -6.57157       6.57157       278.061       284.633    
  26  0.744256     -0.295370      -1.77749       1.77749       282.445       284.222    
  27  0.611040     -0.492593      -2.96435       2.96435       277.876       280.840    
  28  0.361728      -1.01686      -6.11932       6.11932       277.280       283.399    
  29  0.381582     -0.963430      -5.79777       5.79777       283.403       289.201    
  30  0.738884E-01  -2.60520      -15.6777       15.6777       285.029       300.707    
  31  0.185722E-01  -3.98609      -23.9877       23.9877       289.044       313.031    
  32  0.470279     -0.754429      -4.54004       4.54004       290.025       294.565    
  33  0.499505     -0.694139      -4.17722       4.17722       275.872       280.050    
  34  0.641578     -0.443824      -2.67087       2.67087       274.154       276.825    
  35  0.462400     -0.771325      -4.64172       4.64172       280.139       284.781    
  36  0.953656     -0.474527E-01 -0.285563      0.285563       284.234       284.520    
  37  0.305321E-01  -3.48898      -20.9961       20.9961       282.302       303.298    
  38  0.281396      -1.26799      -7.63059       7.63059       292.428       300.058    
  39  0.642231     -0.442807      -2.66474       2.66474       289.360       292.025    
  40  0.506226     -0.680772      -4.09678       4.09678       278.065       282.162    
  41  0.152451      -1.88091      -11.3191       11.3191       291.528       302.847    
  42  0.825356     -0.191941      -1.15507       1.15507       291.313       292.468    
  43  0.895901     -0.109926     -0.661515      0.661515       286.088       286.749    
  44  0.706880     -0.346894      -2.08756       2.08756       294.730       296.818    
  45  0.810453     -0.210162      -1.26472       1.26472       284.162       285.426    
  46  0.463153     -0.769698      -4.63193       4.63193       288.734       293.366    
  47  0.333587      -1.09785      -6.60669       6.60669       292.278       298.885    
  48  0.588678     -0.529875      -3.18871       3.18871       294.926       298.115    
  49  0.724542E-01  -2.62480      -15.7957       15.7957       291.268       307.063    
  50  0.550549     -0.596839      -3.59169       3.59169       282.567       286.159    
  51  0.945764     -0.557622E-01 -0.335568      0.335568       288.929       289.264    
  52  0.903703E-01  -2.40384      -14.4659       14.4659       294.889       309.355    
  53  0.435583     -0.831070      -5.00125       5.00125       296.091       301.092    
  54  0.364079E-01  -3.31297      -19.9369       19.9369       296.806       316.743    
  55  0.801026     -0.221862      -1.33513       1.33513       297.530       298.865    
  56  0.440703     -0.819384      -4.93093       4.93093       294.203       299.134    
  57  0.585820     -0.534743      -3.21800       3.21800       286.521       289.739    
  58  0.874676     -0.133902     -0.805802      0.805802       291.922       292.728    
  59  0.709061     -0.343814      -2.06902       2.06902       297.677       299.746    
  60  0.937361     -0.646865E-01 -0.389273      0.389273       282.492       282.881    
  61  0.775497     -0.254252      -1.53005       1.53005       302.903       304.433    
  62  0.966192     -0.343929E-01 -0.206971      0.206971       284.996       285.203    
  63  0.521378     -0.651281      -3.91931       3.91931       301.595       305.515    
  64  0.162994      -1.81404      -10.9166       10.9166       306.327       317.243    
loop,thermsimp(1:2)        7   2.43327       19.9820    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    373        304.68          0.88          1.12         23.05          0.04          0.04         25.13
Just calling func    0   0         25.13


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    304.68
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    6.01785               379
loop is:        7
neval is:      372
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        7      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    6.01785               379
loop is:        8
neval is:      372


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      379
neval,tstepnext:      372     379

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.832859     -0.182891      -1.10061       1.10061       251.225       252.326    
   2  0.610299     -0.493806      -2.97165       2.97165       264.230       267.202    
   3  0.652915     -0.426308      -2.56546       2.56546       246.707       249.273    
   4  0.273016      -1.29823      -7.81252       7.81252       269.398       277.211    
   5  0.570853     -0.560623      -3.37374       3.37374       265.290       268.664    
   6  0.107477E-01  -4.53306      -27.2793       27.2793       273.824       301.103    
   7  0.651717     -0.428145      -2.57651       2.57651       274.154       276.731    
   8  0.214404      -1.53989      -9.26684       9.26684       273.626       282.893    
   9  0.132680      -2.01982      -12.1549       12.1549       276.843       288.998    
  10  0.370727     -0.992290      -5.97145       5.97145       277.156       283.127    
  11  0.330444      -1.10732      -6.66366       6.66366       275.413       282.077    
  12  0.462713     -0.770647      -4.63764       4.63764       272.126       276.763    
  13  0.514022     -0.665489      -4.00481       4.00481       273.892       277.897    
  14  0.644984     -0.438530      -2.63901       2.63901       275.872       278.511    
  15  0.813975     -0.205826      -1.23863       1.23863       277.876       279.115    
  16  0.434803     -0.832863      -5.01204       5.01204       277.729       282.741    
  17  0.212985      -1.54653      -9.30680       9.30680       278.065       287.372    
  18  0.796179     -0.227931      -1.37165       1.37165       282.492       283.864    
  19  0.259948      -1.34727      -8.10768       8.10768       277.353       285.461    
  20  0.526723     -0.641081      -3.85793       3.85793       279.872       283.729    
  21  0.392691     -0.934731      -5.62507       5.62507       277.280       282.905    
  22  0.949472     -0.518494E-01 -0.312022      0.312022       282.445       282.757    
  23  0.665479E-01  -2.70983      -16.3074       16.3074       283.134       299.442    
  24  0.927466E-01  -2.37788      -14.3097       14.3097       284.234       298.544    
  25  0.630503     -0.461237      -2.77565       2.77565       278.061       280.837    
  26  0.714749     -0.335823      -2.02093       2.02093       280.139       282.160    
  27  0.450999     -0.796290      -4.79195       4.79195       279.661       284.453    
  28  0.184997      -1.68742      -10.1546       10.1546       277.598       287.752    
  29  0.989607     -0.104473E-01 -0.628704E-01  0.628704E-01   284.996       285.059    
  30  0.530766     -0.633434      -3.81191       3.81191       284.162       287.974    
  31  0.495227     -0.702738      -4.22897       4.22897       281.252       285.481    
  32  0.787696     -0.238642      -1.43611       1.43611       282.567       284.003    
  33  0.168123      -1.78306      -10.7302       10.7302       286.088       296.818    
  34  0.205580      -1.58192      -9.51976       9.51976       281.266       290.786    
  35  0.182087      -1.70327      -10.2500       10.2500       281.731       291.981    
  36  0.320489      -1.13791      -6.84776       6.84776       283.403       290.251    
  37  0.591526     -0.525050      -3.15967       3.15967       288.929       292.088    
  38  0.374258     -0.982811      -5.91441       5.91441       286.521       292.435    
  39  0.578871     -0.546675      -3.28981       3.28981       268.366       271.656    
  40  0.542113     -0.612280      -3.68461       3.68461       270.221       273.906    
  41  0.123399      -2.09233      -12.5914       12.5914       289.360       301.952    
  42  0.874747     -0.133820     -0.805311      0.805311       291.313       292.118    
  43  0.521146     -0.651725      -3.92198       3.92198       291.922       295.844    
  44  0.160493      -1.82950      -11.0097       11.0097       271.753       282.763    
  45  0.606451     -0.500131      -3.00971       3.00971       288.734       291.743    
  46  0.947463     -0.539676E-01 -0.324769      0.324769       290.025       290.350    
  47  0.187698      -1.67292      -10.0674       10.0674       294.730       304.797    
  48  0.157453      -1.84863      -11.1248       11.1248       294.926       306.051    
  49  0.411413     -0.888157      -5.34479       5.34479       297.530       302.875    
  50  0.399256     -0.918152      -5.52530       5.52530       292.278       297.803    
  51  0.629238     -0.463246      -2.78775       2.78775       294.203       296.990    
  52  0.831952     -0.183980      -1.10716       1.10716       297.677       298.784    
  53  0.677270     -0.389686      -2.34507       2.34507       292.428       294.773    
  54  0.937557     -0.644782E-01 -0.388020      0.388020       285.029       285.417    
  55  0.410617     -0.890095      -5.35646       5.35646       296.091       301.447    
  56  0.896761E-01  -2.41155      -14.5123       14.5123       291.528       306.040    
  57  0.757537     -0.277683      -1.67106       1.67106       282.302       283.973    
  58  0.893032     -0.113133     -0.680815      0.680815       302.903       303.584    
  59  0.689367E-02  -4.97715      -29.9517       29.9517       301.595       331.547    
  60  0.315133      -1.15476      -6.94918       6.94918       291.268       298.217    
  61  0.206555      -1.57719      -9.49127       9.49127       294.889       304.380    
  62  0.577131     -0.549685      -3.30792       3.30792       289.044       292.351    
  63  0.796209     -0.227894      -1.37143       1.37143       296.806       298.178    
  64  0.519424     -0.655035      -3.94190       3.94190       304.685       308.627    
loop,thermsimp(1:2)        8   1.10061       2.97165    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    374        303.01          0.88          1.09         23.08          0.09          0.04         25.18
Just calling func    0   0         25.18


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    303.01
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    6.01785               379
loop is:        8
neval is:      373
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        8      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    6.01785               379
loop is:        9
neval is:      373


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      379
neval,tstepnext:      373     379

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.193078      -1.64466      -9.89731       9.89731       246.707       256.604    
   2  0.822950     -0.194860      -1.17264       1.17264       251.225       252.398    
   3  0.396787     -0.924357      -5.56264       5.56264       264.230       269.793    
   4  0.141060      -1.95857      -11.7864       11.7864       265.290       277.077    
   5  0.673747     -0.394901      -2.37646       2.37646       268.366       270.742    
   6  0.142835      -1.94606      -11.7111       11.7111       270.221       281.932    
   7  0.707555     -0.345940      -2.08181       2.08181       274.154       276.236    
   8  0.957483     -0.434474E-01 -0.261460      0.261460       272.126       272.387    
   9  0.524586     -0.645145      -3.88238       3.88238       269.398       273.281    
  10  0.692024     -0.368135      -2.21538       2.21538       273.892       276.107    
  11  0.936675E-01  -2.36800      -14.2503       14.2503       275.872       290.123    
  12  0.216270      -1.53123      -9.21469       9.21469       277.876       287.091    
  13  0.329369      -1.11058      -6.68329       6.68329       278.061       284.745    
  14  0.670774     -0.399323      -2.40306       2.40306       275.413       277.816    
  15  0.263445      -1.33391      -8.02726       8.02726       280.139       288.167    
  16  0.150248      -1.89547      -11.4066       11.4066       277.729       289.136    
  17  0.357034      -1.02992      -6.19793       6.19793       282.445       288.643    
  18  0.833286E-01  -2.48496      -14.9541       14.9541       271.753       286.707    
  19  0.431395     -0.840731      -5.05939       5.05939       273.626       278.686    
  20  0.304550      -1.18892      -7.15475       7.15475       277.280       284.435    
  21  0.930203     -0.723520E-01 -0.435403      0.435403       277.156       277.591    
  22  0.443091     -0.813979      -4.89840       4.89840       279.872       284.770    
  23  0.361548      -1.01736      -6.12232       6.12232       282.492       288.614    
  24  0.603851     -0.504427      -3.03557       3.03557       282.302       285.338    
  25  0.825014     -0.192355      -1.15756       1.15756       282.567       283.725    
  26  0.658742     -0.417424      -2.51199       2.51199       279.661       282.173    
  27  0.938632     -0.633319E-01 -0.381121      0.381121       284.996       285.377    
  28  0.264383E-01  -3.63294      -21.8625       21.8625       285.029       306.892    
  29  0.770543     -0.260660      -1.56861       1.56861       277.353       278.922    
  30  0.536385     -0.622903      -3.74853       3.74853       281.252       285.000    
  31  0.173997      -1.74872      -10.5235       10.5235       278.065       288.588    
  32  0.876286     -0.132063     -0.794734      0.794734       277.598       278.392    
  33  0.447573     -0.803915      -4.83784       4.83784       284.162       289.000    
  34  0.521740E-01  -2.95317      -17.7717       17.7717       276.843       294.615    
  35  0.509285     -0.674747      -4.06052       4.06052       283.403       287.464    
  36  0.135259      -2.00056      -12.0391       12.0391       290.025       302.064    
  37  0.238321      -1.43414      -8.63041       8.63041       281.266       289.897    
  38  0.146995      -1.91735      -11.5383       11.5383       288.734       300.272    
  39  0.166047      -1.79549      -10.8050       10.8050       281.731       292.536    
  40  0.830113     -0.186194      -1.12049       1.12049       288.929       290.049    
  41  0.638960     -0.447914      -2.69548       2.69548       291.313       294.008    
  42  0.156696      -1.85345      -11.1538       11.1538       289.044       300.197    
  43  0.956507     -0.444668E-01 -0.267595      0.267595       286.521       286.789    
  44  0.313979      -1.15843      -6.97126       6.97126       292.428       299.399    
  45  0.185265      -1.68597      -10.1459       10.1459       291.922       302.068    
  46  0.952300     -0.488757E-01 -0.294126      0.294126       286.088       286.382    
  47  0.181060      -1.70892      -10.2840       10.2840       294.203       304.487    
  48  0.969330     -0.311499E-01 -0.187455      0.187455       292.278       292.466    
  49  0.832772     -0.182996      -1.10124       1.10124       296.806       297.907    
  50  0.733500     -0.309927      -1.86510       1.86510       291.268       293.133    
  51  0.901211     -0.104016     -0.625950      0.625950       284.234       284.860    
  52  0.598700     -0.512995      -3.08713       3.08713       297.677       300.764    
  53  0.982368     -0.177897E-01 -0.107056      0.107056       283.134       283.241    
  54  0.244719      -1.40764      -8.47098       8.47098       273.824       282.295    
  55  0.824383     -0.193120      -1.16216       1.16216       296.091       297.253    
  56  0.755417     -0.280485      -1.68791       1.68791       289.360       291.048    
  57  0.548139     -0.601226      -3.61808       3.61808       297.530       301.148    
  58  0.886061     -0.120970     -0.727979      0.727979       302.903       303.631    
  59  0.678820     -0.387400      -2.33131       2.33131       294.889       297.220    
  60  0.435343     -0.831622      -5.00457       5.00457       294.730       299.735    
  61  0.917598     -0.859955E-01 -0.517508      0.517508       291.528       292.045    
  62  0.356725      -1.03079      -6.20315       6.20315       294.926       301.129    
  63  0.731877     -0.312142      -1.87842       1.87842       304.685       306.563    
  64  0.509090     -0.675130      -4.06283       4.06283       303.011       307.074    
loop,thermsimp(1:2)        9   9.89731       1.17264    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    375        301.60          0.88          1.10         23.09          0.02          0.04         25.13
Just calling func    0   0         25.13


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    301.60
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    6.01785               379
loop is:        9
neval is:      374
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        9      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    6.01785               379
loop is:       10
neval is:      374


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      379
neval,tstepnext:      374     379

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.516123     -0.661410      -3.98026       3.98026       251.225       255.205    
   2  0.677402     -0.389491      -2.34390       2.34390       246.707       249.051    
   3  0.899541     -0.105871     -0.637114      0.637114       264.230       264.867    
   4  0.235706      -1.44517      -8.69681       8.69681       268.366       277.063    
   5  0.194769      -1.63594      -9.84486       9.84486       272.126       281.971    
   6  0.814930     -0.204653      -1.23157       1.23157       269.398       270.630    
   7  0.727423E-01  -2.62083      -15.7718       15.7718       273.892       289.664    
   8  0.126759      -2.06547      -12.4297       12.4297       274.154       286.584    
   9  0.592876     -0.522770      -3.14595       3.14595       265.290       268.436    
  10  0.131380      -2.02966      -12.2142       12.2142       277.156       289.370    
  11  0.394760E-01  -3.23206      -19.4501       19.4501       275.413       294.863    
  12  0.539964     -0.616252      -3.70851       3.70851       277.598       281.306    
  13  0.127256      -2.06155      -12.4061       12.4061       273.626       286.032    
  14  0.245583      -1.40412      -8.44977       8.44977       277.353       285.803    
  15  0.236145E-01  -3.74590      -22.5422       22.5422       270.221       292.763    
  16  0.791943     -0.233266      -1.40376       1.40376       279.661       281.064    
  17  0.223014      -1.50052      -9.02991       9.02991       273.824       282.854    
  18  0.943370     -0.582970E-01 -0.350822      0.350822       283.134       283.485    
  19  0.844237     -0.169322      -1.01895       1.01895       282.567       283.586    
  20  0.600301     -0.510323      -3.07105       3.07105       277.280       280.351    
  21  0.742625E-01  -2.60015      -15.6473       15.6473       278.061       293.709    
  22  0.288925E-01  -3.54417      -21.3283       21.3283       279.872       301.200    
  23  0.325834      -1.12137      -6.74822       6.74822       284.234       290.982    
  24  0.317147      -1.14839      -6.91083       6.91083       281.252       288.163    
  25  0.655873     -0.421788      -2.53825       2.53825       282.302       284.840    
  26  0.259034      -1.35080      -8.12888       8.12888       284.996       293.125    
  27  0.639742E-01  -2.74927      -16.5447       16.5447       286.088       302.632    
  28  0.110416E-01  -4.50609      -27.1169       27.1169       271.753       298.870    
  29  0.768965E-01  -2.56529      -15.4376       15.4376       286.521       301.959    
  30  0.757182     -0.278151      -1.67387       1.67387       277.876       279.550    
  31  0.788615     -0.237477      -1.42910       1.42910       283.403       284.832    
  32  0.724297     -0.322554      -1.94108       1.94108       280.139       282.080    
  33  0.807261     -0.214109      -1.28847       1.28847       278.065       279.353    
  34  0.356497      -1.03143      -6.20698       6.20698       282.492       288.699    
  35  0.685602     -0.377458      -2.27149       2.27149       282.445       284.716    
  36  0.681617     -0.383288      -2.30657       2.30657       284.162       286.468    
  37  0.323748      -1.12779      -6.78686       6.78686       277.729       284.516    
  38  0.622817     -0.473503      -2.84947       2.84947       281.266       284.116    
  39  0.534584     -0.626266      -3.76877       3.76877       288.929       292.697    
  40  0.130255E-02  -6.64343      -39.9791       39.9791       275.872       315.852    
  41  0.357398      -1.02891      -6.19180       6.19180       289.360       295.552    
  42  0.290986      -1.23448      -7.42892       7.42892       291.528       298.957    
  43  0.182566      -1.70064      -10.2342       10.2342       292.278       302.512    
  44  0.695597     -0.362984      -2.18438       2.18438       281.731       283.916    
  45  0.612287     -0.490555      -2.95208       2.95208       291.268       294.220    
  46  0.845780     -0.167496      -1.00796       1.00796       291.313       292.321    
  47  0.628042     -0.465149      -2.79919       2.79919       276.843       279.642    
  48  0.830233     -0.186049      -1.11962       1.11962       294.889       296.008    
  49  0.373260     -0.985481      -5.93047       5.93047       296.091       302.021    
  50  0.711640     -0.340183      -2.04717       2.04717       296.806       298.853    
  51  0.449400     -0.799842      -4.81333       4.81333       292.428       297.241    
  52  0.253029      -1.37425      -8.27002       8.27002       294.730       303.000    
  53  0.956034     -0.449619E-01 -0.270574      0.270574       289.044       289.314    
  54  0.544467     -0.607949      -3.65854       3.65854       288.734       292.392    
  55  0.419963     -0.867588      -5.22101       5.22101       297.677       302.898    
  56  0.372696E-02  -5.59216      -33.6528       33.6528       294.926       328.579    
  57  0.519921     -0.654079      -3.93615       3.93615       297.530       301.466    
  58  0.563761     -0.573124      -3.44897       3.44897       290.025       293.474    
  59  0.231567      -1.46289      -8.80343       8.80343       291.922       300.726    
  60  0.736257     -0.306176      -1.84252       1.84252       302.903       304.746    
  61  0.408436E-01  -3.19801      -19.2451       19.2451       294.203       313.448    
  62  0.111120      -2.19714      -13.2221       13.2221       304.685       317.907    
  63  0.988251     -0.118183E-01 -0.711208E-01  0.711208E-01   285.029       285.100    
  64  0.107317E-01  -4.53455      -27.2883       27.2883       301.595       328.884    
loop,thermsimp(1:2)       10   3.98026       2.34390    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    376        303.01          0.88          1.09         23.07          0.07          0.04         25.14
Just calling func    0   0         25.15


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    303.01
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    6.01785               379
loop is:       10
neval is:      375
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       10      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    6.01785               379
loop is:       11
neval is:      375


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      379
neval,tstepnext:      375     379

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.737263     -0.304811      -1.83431       1.83431       246.707       248.541    
   2  0.372515     -0.987477      -5.94249       5.94249       251.225       257.168    
   3  0.197611E-01  -3.92404      -23.6143       23.6143       264.230       287.844    
   4  0.939239     -0.626858E-01 -0.377234      0.377234       265.290       265.667    
   5  0.212506      -1.54879      -9.32035       9.32035       269.398       278.719    
   6  0.141762      -1.95360      -11.7565       11.7565       268.366       280.122    
   7  0.183632      -1.69482      -10.1992       10.1992       278.065       288.264    
   8  0.479067     -0.735915      -4.42862       4.42862       277.876       282.305    
   9  0.113189      -2.17870      -13.1111       13.1111       276.843       289.954    
  10  0.314091      -1.15807      -6.96910       6.96910       277.280       284.249    
  11  0.457761     -0.781409      -4.70240       4.70240       279.661       284.363    
  12  0.923744     -0.793200E-01 -0.477336      0.477336       277.598       278.075    
  13  0.805387     -0.216433      -1.30246       1.30246       272.126       273.428    
  14  0.979257     -0.209609E-01 -0.126139      0.126139       280.139       280.265    
  15  0.634716E-01  -2.75716      -16.5922       16.5922       273.824       290.416    
  16  0.502866     -0.687432      -4.13686       4.13686       283.134       287.271    
  17  0.844986     -0.168435      -1.01362       1.01362       282.567       283.581    
  18  0.548347     -0.600848      -3.61581       3.61581       281.731       285.347    
  19  0.825472     -0.191800      -1.15422       1.15422       281.266       282.420    
  20  0.806424     -0.215145      -1.29471       1.29471       277.729       279.024    
  21  0.497450E-01  -3.00085      -18.0586       18.0586       282.445       300.504    
  22  0.407289     -0.898233      -5.40543       5.40543       283.403       288.809    
  23  0.522833     -0.648493      -3.90253       3.90253       282.302       286.205    
  24  0.763038     -0.270448      -1.62752       1.62752       285.029       286.657    
  25  0.706120     -0.347970      -2.09403       2.09403       277.353       279.447    
  26  0.540862     -0.614591      -3.69852       3.69852       273.626       277.325    
  27  0.807340E-01  -2.51660      -15.1445       15.1445       284.162       299.306    
  28  0.310756      -1.16875      -7.03334       7.03334       274.154       281.187    
  29  0.689192     -0.372235      -2.24006       2.24006       281.252       283.492    
  30  0.634973     -0.454174      -2.73315       2.73315       282.492       285.225    
  31  0.598432     -0.513442      -3.08981       3.08981       289.044       292.133    
  32  0.393639     -0.932321      -5.61057       5.61057       277.156       282.766    
  33  0.369460     -0.995714      -5.99206       5.99206       273.892       279.884    
  34  0.129274      -2.04582      -12.3114       12.3114       284.234       296.546    
  35  0.250376      -1.38479      -8.33347       8.33347       291.313       299.646    
  36  0.536641     -0.622425      -3.74566       3.74566       288.734       292.479    
  37  0.495942     -0.701296      -4.22029       4.22029       288.929       293.149    
  38  0.650684     -0.429731      -2.58606       2.58606       270.221       272.807    
  39  0.889212     -0.117420     -0.706615      0.706615       284.996       285.702    
  40  0.314936      -1.15539      -6.95294       6.95294       290.025       296.978    
  41  0.943567     -0.580875E-01 -0.349562      0.349562       278.061       278.411    
  42  0.672016     -0.397473      -2.39193       2.39193       291.268       293.660    
  43  0.133907      -2.01061      -12.0996       12.0996       275.413       287.513    
  44  0.259017      -1.35086      -8.12927       8.12927       289.360       297.490    
  45  0.112444      -2.18530      -13.1508       13.1508       294.889       308.039    
  46  0.235994      -1.44395      -8.68946       8.68946       292.428       301.117    
  47  0.879651     -0.128231     -0.771672      0.771672       296.806       297.578    
  48  0.750555     -0.286942      -1.72677       1.72677       271.753       273.480    
  49  0.996491E-01  -2.30610      -13.8778       13.8778       291.528       305.406    
  50  0.100853      -2.29409      -13.8055       13.8055       291.922       305.728    
  51  0.520543     -0.652882      -3.92895       3.92895       279.872       283.800    
  52  0.886361E-01  -2.42322      -14.5825       14.5825       297.530       312.113    
  53  0.152463      -1.88083      -11.3185       11.3185       286.521       297.840    
  54  0.286446E-03  -8.15796      -49.0934       49.0934       296.091       345.184    
  55  0.472863     -0.748950      -4.50707       4.50707       292.278       296.785    
  56  0.907202     -0.973898E-01 -0.586077      0.586077       286.088       286.674    
  57  0.194253      -1.63859      -9.86080       9.86080       297.677       307.538    
  58  0.560994     -0.578045      -3.47859       3.47859       294.730       298.209    
  59  0.316514      -1.15039      -6.92285       6.92285       302.903       309.826    
  60  0.538541E-02  -5.22406      -31.4376       31.4376       294.203       325.640    
  61  0.414112     -0.881619      -5.30545       5.30545       275.872       281.178    
  62  0.281101      -1.26904      -7.63689       7.63689       304.685       312.322    
  63  0.550613     -0.596724      -3.59099       3.59099       294.926       298.517    
  64  0.236016      -1.44386      -8.68891       8.68891       303.011       311.700    
loop,thermsimp(1:2)       11   1.83431       5.94249    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    377        273.11          0.88          1.09         23.13          0.00          0.05         25.15
Just calling func    0   0         25.15


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    273.11
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    6.01785               379
loop is:       11
neval is:      376
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       11      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    6.01785               379
loop is:       12
neval is:      376


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      379
neval,tstepnext:      376     379

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.783491     -0.243995      -1.46833       1.46833       246.707       248.176    
   2  0.973841     -0.265069E-01 -0.159514      0.159514       251.225       251.385    
   3  0.294662      -1.22193      -7.35336       7.35336       265.290       272.644    
   4  0.702628     -0.352928      -2.12387       2.12387       270.221       272.345    
   5  0.763280     -0.270131      -1.62560       1.62560       272.126       273.751    
   6  0.578080E-01  -2.85063      -17.1546       17.1546       271.753       288.907    
   7  0.834037     -0.181478      -1.09211       1.09211       273.626       274.718    
   8  0.976312     -0.239730E-01 -0.144266      0.144266       277.598       277.742    
   9  0.603670     -0.504728      -3.03737       3.03737       278.061       281.099    
  10  0.458546     -0.779695      -4.69208       4.69208       269.398       274.090    
  11  0.201917      -1.59990      -9.62794       9.62794       277.729       287.357    
  12  0.362727      -1.01411      -6.10273       6.10273       277.353       283.456    
  13  0.466909E-01  -3.06421      -18.4399       18.4399       273.892       292.332    
  14  0.602192     -0.507180      -3.05213       3.05213       268.366       271.418    
  15  0.332545      -1.10098      -6.62553       6.62553       280.139       286.765    
  16  0.758378     -0.276574      -1.66438       1.66438       275.872       277.537    
  17  0.834950     -0.180384      -1.08552       1.08552       274.154       275.240    
  18  0.910410     -0.938599E-01 -0.564834      0.564834       277.876       278.441    
  19  0.825418E-01  -2.49445      -15.0112       15.0112       281.266       296.277    
  20  0.639611     -0.446894      -2.68934       2.68934       277.156       279.845    
  21  0.345418      -1.06300      -6.39697       6.39697       281.252       287.649    
  22  0.961674     -0.390802E-01 -0.235179      0.235179       282.567       282.802    
  23  0.274135      -1.29413      -7.78790       7.78790       279.872       287.659    
  24  0.275236      -1.29013      -7.76378       7.76378       277.280       285.044    
  25  0.373550     -0.984704      -5.92580       5.92580       279.661       285.587    
  26  0.407178     -0.898505      -5.40706       5.40706       282.492       287.899    
  27  0.908773     -0.956602E-01 -0.575669      0.575669       281.731       282.307    
  28  0.578518     -0.547286      -3.29348       3.29348       284.996       288.289    
  29  0.674288     -0.394098      -2.37162       2.37162       282.302       284.674    
  30  0.758166     -0.276853      -1.66606       1.66606       285.029       286.695    
  31  0.764349E-01  -2.57132      -15.4738       15.4738       286.088       301.562    
  32  0.962342     -0.383853E-01 -0.230997      0.230997       283.134       283.365    
  33  0.918960     -0.845125E-01 -0.508583      0.508583       275.413       275.922    
  34  0.617888     -0.481448      -2.89728       2.89728       264.230       267.127    
  35  0.227646      -1.47996      -8.90619       8.90619       278.065       286.971    
  36  0.262001      -1.33941      -8.06034       8.06034       283.403       291.463    
  37  0.589438     -0.528586      -3.18095       3.18095       276.843       280.024    
  38  0.201352      -1.60270      -9.64481       9.64481       273.824       283.469    
  39  0.350279      -1.04903      -6.31288       6.31288       289.044       295.356    
  40  0.647374     -0.434831      -2.61675       2.61675       288.734       291.350    
  41  0.604508     -0.503341      -3.02903       3.02903       288.929       291.958    
  42  0.700946     -0.355325      -2.13829       2.13829       291.268       293.406    
  43  0.575270     -0.552915      -3.32736       3.32736       284.234       287.561    
  44  0.554419     -0.589835      -3.54954       3.54954       292.278       295.828    
  45  0.375300     -0.980029      -5.89767       5.89767       290.025       295.922    
  46  0.605541     -0.501632      -3.01875       3.01875       289.360       292.379    
  47  0.109847      -2.20867      -13.2914       13.2914       296.806       310.098    
  48  0.553505     -0.591485      -3.55947       3.55947       286.521       290.080    
  49  0.412268     -0.886082      -5.33231       5.33231       294.730       300.062    
  50  0.664246     -0.409102      -2.46191       2.46191       294.926       297.388    
  51  0.707719     -0.345708      -2.08042       2.08042       284.162       286.242    
  52  0.750886     -0.286501      -1.72412       1.72412       291.313       293.037    
  53  0.339698      -1.07970      -6.49745       6.49745       282.445       288.942    
  54  0.849457     -0.163157     -0.981857      0.981857       292.428       293.409    
  55  0.206681E-02  -6.18175      -37.2008       37.2008       291.528       328.729    
  56  0.251051      -1.38210      -8.31725       8.31725       291.922       300.239    
  57  0.224827      -1.49242      -8.98118       8.98118       297.677       306.658    
  58  0.335724      -1.09147      -6.56828       6.56828       294.889       301.457    
  59  0.157522      -1.84819      -11.1221       11.1221       302.903       314.025    
  60  0.630796E-01  -2.76336      -16.6295       16.6295       303.011       319.640    
  61  0.383657     -0.958005      -5.76513       5.76513       297.530       303.295    
  62  0.777557     -0.251598      -1.51408       1.51408       304.685       306.199    
  63  0.370382     -0.993221      -5.97705       5.97705       294.203       300.180    
  64  0.459130     -0.778421      -4.68442       4.68442       273.105       277.790    
loop,thermsimp(1:2)       12   1.46833      0.159514    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    378        256.87          0.88          1.09         23.14          0.21          0.05         25.37
Just calling func    0   0         25.37


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    256.87
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    6.01785               379
loop is:       12
neval is:      377
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       12      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    6.01785               379
loop is:       13
neval is:      377


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      379
neval,tstepnext:      377     379

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.964298     -0.363545E-01 -0.218776      0.218776       246.707       246.926    
   2  0.963371     -0.373169E-01 -0.224567      0.224567       251.225       251.450    
   3  0.851172E-02  -4.76631      -28.6829       28.6829       264.230       292.913    
   4  0.731929E-01  -2.61466      -15.7346       15.7346       268.366       284.100    
   5  0.491869     -0.709543      -4.26992       4.26992       270.221       274.491    
   6  0.625436     -0.469306      -2.82421       2.82421       265.290       268.114    
   7  0.139469      -1.96991      -11.8546       11.8546       272.126       283.980    
   8  0.464987     -0.765746      -4.60814       4.60814       269.398       274.006    
   9  0.192956      -1.64529      -9.90112       9.90112       273.626       283.527    
  10  0.184589E-01  -3.99221      -24.0245       24.0245       274.154       298.178    
  11  0.327387      -1.11661      -6.71960       6.71960       275.413       282.133    
  12  0.447570     -0.803921      -4.83788       4.83788       275.872       280.710    
  13  0.282132      -1.26538      -7.61486       7.61486       277.598       285.212    
  14  0.991234     -0.880510E-02 -0.529878E-01  0.529878E-01   273.105       273.158    
  15  0.574009     -0.555110      -3.34057       3.34057       277.876       281.217    
  16  0.884017     -0.123279     -0.741872      0.741872       277.156       277.897    
  17  0.332578      -1.10088      -6.62494       6.62494       276.843       283.468    
  18  0.294524      -1.22240      -7.35619       7.35619       278.061       285.417    
  19  0.865605     -0.144326     -0.868534      0.868534       281.731       282.600    
  20  0.441883E-01  -3.11930      -18.7714       18.7714       282.567       301.339    
  21  0.652915     -0.426309      -2.56546       2.56546       283.134       285.700    
  22  0.712636E-01  -2.64137      -15.8954       15.8954       277.353       293.249    
  23  0.211397      -1.55402      -9.35184       9.35184       273.824       283.176    
  24  0.836672E-01  -2.48091      -14.9297       14.9297       282.302       297.232    
  25  0.397953     -0.921422      -5.54497       5.54497       277.280       282.825    
  26  0.545442     -0.606159      -3.64777       3.64777       279.661       283.309    
  27  0.628874     -0.463825      -2.79123       2.79123       284.162       286.953    
  28  0.243035      -1.41455      -8.51255       8.51255       285.029       293.542    
  29  0.700237     -0.356336      -2.14438       2.14438       280.139       282.284    
  30  0.887974     -0.118813     -0.714999      0.714999       278.065       278.780    
  31  0.354481      -1.03710      -6.24111       6.24111       277.729       283.970    
  32  0.579479     -0.545626      -3.28349       3.28349       284.234       287.518    
  33  0.873601E-01  -2.43772      -14.6698       14.6698       281.252       295.921    
  34  0.414510     -0.880658      -5.29967       5.29967       279.872       285.171    
  35  0.263485      -1.33376      -8.02636       8.02636       282.492       290.518    
  36  0.174560E-01  -4.04807      -24.3607       24.3607       284.996       309.356    
  37  0.461287     -0.773735      -4.65622       4.65622       271.753       276.409    
  38  0.914554     -0.893185E-01 -0.537505      0.537505       282.445       282.982    
  39  0.551497     -0.595119      -3.58134       3.58134       286.521       290.102    
  40  0.751145     -0.286157      -1.72205       1.72205       288.734       290.456    
  41  0.838814     -0.175766      -1.05773       1.05773       283.403       284.461    
  42  0.494321     -0.704571      -4.24000       4.24000       288.929       293.169    
  43  0.878137     -0.129953     -0.782035      0.782035       273.892       274.674    
  44  0.249667      -1.38763      -8.35053       8.35053       289.360       297.711    
  45  0.569995     -0.562128      -3.38280       3.38280       291.313       294.696    
  46  0.338221      -1.08406      -6.52369       6.52369       291.268       297.791    
  47  0.536421     -0.622836      -3.74813       3.74813       292.428       296.176    
  48  0.482027     -0.729755      -4.39155       4.39155       289.044       293.435    
  49  0.436505     -0.828955      -4.98852       4.98852       292.278       297.267    
  50  0.225116      -1.49114      -8.97346       8.97346       290.025       298.998    
  51  0.126546      -2.06715      -12.4398       12.4398       281.266       293.706    
  52  0.182898      -1.69882      -10.2233       10.2233       294.926       305.149    
  53  0.114159      -2.17017      -13.0597       13.0597       294.730       307.790    
  54  0.582926     -0.539695      -3.24780       3.24780       294.203       297.450    
  55  0.583079     -0.539432      -3.24622       3.24622       291.922       295.168    
  56  0.430119     -0.843693      -5.07721       5.07721       294.889       299.966    
  57  0.468275     -0.758699      -4.56573       4.56573       286.088       290.653    
  58  0.323186      -1.12953      -6.79732       6.79732       297.530       304.328    
  59  0.999190E-01  -2.30340      -13.8615       13.8615       304.685       318.546    
  60  0.710279     -0.342098      -2.05869       2.05869       297.677       299.736    
  61  0.316311      -1.15103      -6.92673       6.92673       296.806       303.733    
  62  0.972639     -0.277425E-01 -0.166950      0.166950       302.903       303.070    
  63  0.547984E-01  -2.90409      -17.4764       17.4764       303.011       320.487    
  64  0.658251     -0.418168      -2.51647       2.51647       256.866       259.382    
loop,thermsimp(1:2)       13  0.218776      0.224567    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    379        299.99          0.88          1.09         23.10          0.06          0.05         25.19
Just calling func    0   0         25.19


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    299.99
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    6.01785               379
loop is:       13
neval is:      378
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       13      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    6.01785               379
loop is:       14
neval is:      378


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      379
neval,tstepnext:      378     379

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.536122     -0.623393      -3.75148       3.75148       246.707       250.459    
   2  0.902010     -0.103129     -0.620617      0.620617       251.225       251.846    
   3  0.918906     -0.845717E-01 -0.508939      0.508939       256.866       257.375    
   4  0.300977E-01  -3.50330      -21.0824       21.0824       265.290       286.373    
   5  0.180939      -1.70960      -10.2881       10.2881       273.105       283.394    
   6  0.996736     -0.326981E-02 -0.196772E-01  0.196772E-01   269.398       269.418    
   7  0.974749     -0.255749E-01 -0.153906      0.153906       270.221       270.375    
   8  0.259085      -1.35060      -8.12770       8.12770       273.892       282.020    
   9  0.237439      -1.43784      -8.65273       8.65273       271.753       280.406    
  10  0.733816     -0.309497      -1.86251       1.86251       277.156       279.018    
  11  0.458028     -0.780824      -4.69888       4.69888       278.065       282.764    
  12  0.623300     -0.472727      -2.84480       2.84480       275.872       278.717    
  13  0.789074     -0.236895      -1.42560       1.42560       277.876       279.302    
  14  0.718847     -0.330107      -1.98653       1.98653       275.413       277.400    
  15  0.414258     -0.881266      -5.30332       5.30332       280.139       285.443    
  16  0.121880E-01  -4.40730      -26.5225       26.5225       281.731       308.254    
  17  0.976927     -0.233433E-01 -0.140476      0.140476       277.280       277.421    
  18  0.998133     -0.186873E-02 -0.112457E-01  0.112457E-01   282.445       282.456    
  19  0.582806     -0.539901      -3.24904       3.24904       273.824       277.073    
  20  0.461010     -0.774335      -4.65983       4.65983       279.661       284.321    
  21  0.748404     -0.289812      -1.74404       1.74404       276.843       278.587    
  22  0.627394     -0.466180      -2.80540       2.80540       273.626       276.432    
  23  0.823247     -0.194499      -1.17047       1.17047       277.729       278.899    
  24  0.696302     -0.361971      -2.17829       2.17829       272.126       274.304    
  25  0.571207     -0.560004      -3.37002       3.37002       268.366       271.736    
  26  0.189272      -1.66457      -10.0171       10.0171       283.403       293.420    
  27  0.534816     -0.625833      -3.76617       3.76617       279.872       283.638    
  28  0.846241     -0.166951      -1.00469       1.00469       277.598       278.602    
  29  0.157466      -1.84855      -11.1243       11.1243       278.061       289.186    
  30  0.123756      -2.08945      -12.5740       12.5740       283.134       295.708    
  31  0.458067     -0.780739      -4.69837       4.69837       284.162       288.860    
  32  0.989772     -0.102804E-01 -0.618657E-01  0.618657E-01   284.234       284.296    
  33  0.292614      -1.22890      -7.39533       7.39533       286.521       293.916    
  34  0.707885     -0.345474      -2.07901       2.07901       288.734       290.813    
  35  0.686290     -0.376455      -2.26545       2.26545       282.492       284.757    
  36  0.752747     -0.284026      -1.70923       1.70923       286.088       287.797    
  37  0.577950E-01  -2.85085      -17.1560       17.1560       264.230       281.386    
  38  0.496568E-02  -5.30521      -31.9259       31.9259       288.929       320.854    
  39  0.632817     -0.457575      -2.75361       2.75361       277.353       280.107    
  40  0.306568      -1.18232      -7.11499       7.11499       289.044       296.159    
  41  0.800757     -0.222198      -1.33715       1.33715       285.029       286.366    
  42  0.754206     -0.282090      -1.69757       1.69757       281.266       282.964    
  43  0.875958     -0.132437     -0.796988      0.796988       291.313       292.110    
  44  0.411581     -0.887750      -5.34235       5.34235       291.922       297.264    
  45  0.784837     -0.242279      -1.45800       1.45800       281.252       282.710    
  46  0.615964     -0.484567      -2.91605       2.91605       292.428       295.344    
  47  0.427318     -0.850227      -5.11654       5.11654       282.302       287.419    
  48  0.373288     -0.985405      -5.93002       5.93002       292.278       298.208    
  49  0.118712      -2.13106      -12.8244       12.8244       294.203       307.027    
  50  0.465204     -0.765279      -4.60533       4.60533       289.360       293.966    
  51  0.361628      -1.01714      -6.12099       6.12099       291.268       297.389    
  52  0.625886     -0.468587      -2.81989       2.81989       274.154       276.974    
  53  0.164441      -1.80521      -10.8634       10.8634       290.025       300.888    
  54  0.311940      -1.16494      -7.01045       7.01045       297.677       304.687    
  55  0.269725E-01  -3.61294      -21.7421       21.7421       294.889       316.631    
  56  0.242465      -1.41690      -8.52669       8.52669       282.567       291.094    
  57  0.263333      -1.33434      -8.02984       8.02984       302.903       310.933    
  58  0.214624E-02  -6.14404      -36.9739       36.9739       296.806       333.780    
  59  0.932315     -0.700843E-01 -0.421757      0.421757       297.530       297.952    
  60  0.622961     -0.473272      -2.84808       2.84808       294.926       297.774    
  61  0.269930      -1.30959      -7.88093       7.88093       294.730       302.611    
  62  0.298039      -1.21053      -7.28479       7.28479       284.996       292.281    
  63  0.327337      -1.11676      -6.72051       6.72051       304.685       311.405    
  64  0.789470     -0.236394      -1.42258       1.42258       299.994       301.417    
loop,thermsimp(1:2)       14   3.75148      0.620617    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    380        299.93          0.88          1.09         23.10          0.01          0.04         25.12
Just calling func    0   0         25.12


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    299.93
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    6.01785               379
loop is:       14
neval is:      379
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       14      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    6.01785               379
loop is:       15
neval is:      379


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      379
neval,tstepnext:      379     379

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.210086      -1.56024      -9.38927       9.38927       246.707       256.096    
   2  0.682169     -0.382478      -2.30169       2.30169       251.225       253.527    
   3  0.831163     -0.184930      -1.11288       1.11288       256.866       257.979    
   4  0.625179     -0.469718      -2.82669       2.82669       269.398       272.225    
   5  0.907522     -0.970376E-01 -0.583958      0.583958       270.221       270.805    
   6  0.406703     -0.899672      -5.41409       5.41409       268.366       273.780    
   7  0.463060     -0.769899      -4.63313       4.63313       272.126       276.759    
   8  0.206056      -1.57961      -9.50584       9.50584       273.626       283.132    
   9  0.303716      -1.19166      -7.17125       7.17125       274.154       281.325    
  10  0.843889     -0.169734      -1.02144       1.02144       273.824       274.845    
  11  0.273678      -1.29580      -7.79794       7.79794       275.413       283.211    
  12  0.571842     -0.558892      -3.36332       3.36332       277.280       280.643    
  13  0.803131     -0.219238      -1.31934       1.31934       276.843       278.162    
  14  0.330375      -1.10753      -6.66493       6.66493       277.598       284.263    
  15  0.155557      -1.86074      -11.1977       11.1977       275.872       287.070    
  16  0.878823     -0.129172     -0.777337      0.777337       277.729       278.506    
  17  0.781654     -0.246343      -1.48245       1.48245       277.156       278.638    
  18  0.782655     -0.245064      -1.47475       1.47475       277.876       279.351    
  19  0.682155     -0.382499      -2.30182       2.30182       277.353       279.655    
  20  0.899702     -0.105691     -0.636034      0.636034       271.753       272.389    
  21  0.444808     -0.810113      -4.87513       4.87513       264.230       269.105    
  22  0.495252     -0.702688      -4.22867       4.22867       273.892       278.121    
  23  0.640834     -0.444984      -2.67785       2.67785       282.445       285.123    
  24  0.314465      -1.15688      -6.96195       6.96195       281.252       288.214    
  25  0.368564     -0.998140      -6.00665       6.00665       278.065       284.072    
  26  0.572254E-02  -5.16334      -31.0722       31.0722       281.266       312.338    
  27  0.468080E-01  -3.06170      -18.4249       18.4249       273.105       291.530    
  28  0.598693E-01  -2.81559      -16.9438       16.9438       279.872       296.815    
  29  0.658687     -0.417508      -2.51250       2.51250       284.234       286.747    
  30  0.449565     -0.799475      -4.81112       4.81112       279.661       284.472    
  31  0.799405     -0.223887      -1.34732       1.34732       282.492       283.839    
  32  0.414416     -0.880885      -5.30103       5.30103       280.139       285.440    
  33  0.395703E-01  -3.22968      -19.4357       19.4357       285.029       304.465    
  34  0.704129E-01  -2.65338      -15.9676       15.9676       265.290       281.258    
  35  0.336217      -1.09000      -6.55945       6.55945       282.302       288.862    
  36  0.169926      -1.77239      -10.6660       10.6660       286.088       296.754    
  37  0.846601E-01  -2.46911      -14.8587       14.8587       284.162       299.020    
  38  0.798628     -0.224860      -1.35317       1.35317       278.061       279.414    
  39  0.377891     -0.973150      -5.85627       5.85627       288.734       294.590    
  40  0.183739      -1.69424      -10.1957       10.1957       282.567       292.763    
  41  0.930280     -0.722695E-01 -0.434907      0.434907       291.313       291.748    
  42  0.280682      -1.27053      -7.64587       7.64587       284.996       292.642    
  43  0.475397     -0.743606      -4.47490       4.47490       283.403       287.878    
  44  0.705714     -0.348545      -2.09749       2.09749       286.521       288.618    
  45  0.307479      -1.17935      -7.09715       7.09715       289.360       296.458    
  46  0.408291     -0.895776      -5.39064       5.39064       292.428       297.818    
  47  0.174897      -1.74356      -10.4925       10.4925       283.134       293.627    
  48  0.462267     -0.771612      -4.64344       4.64344       289.044       293.687    
  49  0.805682E-01  -2.51865      -15.1569       15.1569       291.922       307.079    
  50  0.276714      -1.28477      -7.73156       7.73156       291.268       298.999    
  51  0.914639     -0.892253E-01 -0.536944      0.536944       294.926       295.463    
  52  0.575354     -0.552769      -3.32648       3.32648       297.530       300.857    
  53  0.537577     -0.620684      -3.73518       3.73518       292.278       296.013    
  54  0.209256      -1.56420      -9.41311       9.41311       290.025       299.438    
  55  0.778351     -0.250578      -1.50794       1.50794       299.994       301.502    
  56  0.903762E-01  -2.40377      -14.4655       14.4655       294.730       309.196    
  57  0.758334E-01  -2.57922      -15.5213       15.5213       297.677       313.198    
  58  0.588112     -0.530837      -3.19450       3.19450       294.203       297.397    
  59  0.846166     -0.167040      -1.00522       1.00522       281.731       282.737    
  60  0.275383      -1.28959      -7.76058       7.76058       302.903       310.664    
  61  0.949019     -0.523265E-01 -0.314893      0.314893       304.685       305.000    
  62  0.207077      -1.57466      -9.47609       9.47609       294.889       304.365    
  63  0.623950     -0.471685      -2.83853       2.83853       288.929       291.767    
  64  0.681742E-01  -2.68569      -16.1621       16.1621       299.930       316.092    
loop,thermsimp(1:2)       15   9.38927       2.30169    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    381        296.81          0.88          1.10         23.15          0.09          0.05         25.27
Just calling func    0   0         25.27


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  380    296.81        3.853    -0.9589      3.901     -100.0     0.1138    
                     -0.8813      2.642     -100.0      2.689     0.8077    
                       1.060     0.1030      2.400      0.000      0.000    
                      -1.172      0.000      0.000      0.000     -1.221    

                      -2.500      8983.     0.1375E+05 -717.4     -2530.    
                      -2.000     -5.381     -3.090     -2.189     -2.820    
                      -14.18     -2.484      1359.      0.000      3354.    

                       4764.      3323.      5073.      5329.      2500.    
                       4298.    -0.2082E-02-0.4768E-01  0.000    -0.1034    
                     -0.4459E-01-0.2470     0.3233E-01-0.1697    -0.2526E-02

                     -0.2243    -0.9767      0.000     0.1799    -0.3736E-01
                      0.8541E-01-0.3846E-01 0.2662E-01-0.1761E-02-0.6263E-01
                     -0.1276    -0.3106E-02-0.5388    -0.8083      0.000    

                      -1.022     -2.537      3.210      1.544      0.000    
                       0.000      9.051      8.954     -3919.     -4.000    
                      0.4023E-01-0.7732      8.698      8.741     -7740.    

                      -4.000     0.9776E-01 0.7961      9.241      9.096    
                      -5466.     -4.000    -0.6455E-01 0.2794      9.286    
                       8.893     -4012.     -2.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    296.81
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    6.01785               379
loop is:       15
neval is:      380
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       15      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    6.01785               379
loop is:       16
neval is:      380


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 




neval>tstepnex so lower away!t
---> lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
     new SAtemp,tstepnext are :    3.00892               442

 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      442
neval,tstepnext:      380     442

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.652831E-01  -2.72902      -8.21142       8.21142       251.225       259.436    
   2  0.388935     -0.944342      -2.84145       2.84145       246.707       249.549    
   3  0.716732     -0.333053      -1.00213       1.00213       256.866       257.868    
   4  0.375936     -0.978336      -2.94374       2.94374       264.230       267.174    
   5  0.518505E-01  -2.95939      -8.90458       8.90458       270.221       279.126    
   6  0.892279     -0.113976     -0.342945      0.342945       269.398       269.741    
   7  0.145412      -1.92818      -5.80176       5.80176       271.753       277.555    
   8  0.759376E-01  -2.57784      -7.75653       7.75653       268.366       276.122    
   9  0.799111     -0.224255     -0.674766      0.674766       273.824       274.499    
  10  0.566636     -0.568038      -1.70918       1.70918       272.126       273.835    
  11  0.957834     -0.430803E-01 -0.129625      0.129625       273.892       274.021    
  12  0.421133     -0.864808      -2.60214       2.60214       276.843       279.445    
  13  0.965171     -0.354495E-01 -0.106665      0.106665       277.729       277.836    
  14  0.527073     -0.640416      -1.92696       1.92696       277.156       279.083    
  15  0.221584      -1.50695      -4.53430       4.53430       277.876       282.410    
  16  0.675180     -0.392776      -1.18183       1.18183       278.061       279.243    
  17  0.462159     -0.771846      -2.32243       2.32243       277.353       279.676    
  18  0.134826      -2.00377      -6.02918       6.02918       277.280       283.309    
  19  0.869165     -0.140222     -0.421917      0.421917       265.290       265.712    
  20  0.898965     -0.106511     -0.320482      0.320482       274.154       274.474    
  21  0.174160      -1.74778      -5.25894       5.25894       281.731       286.990    
  22  0.463810     -0.768281      -2.31170       2.31170       273.626       275.938    
  23  0.145870      -1.92504      -5.79229       5.79229       275.413       281.206    
  24  0.525172     -0.644029      -1.93784       1.93784       282.492       284.430    
  25  0.667609     -0.404052      -1.21576       1.21576       278.065       279.281    
  26  0.964408     -0.362405E-01 -0.109045      0.109045       277.598       277.707    
  27  0.981636     -0.185350E-01 -0.557703E-01  0.557703E-01   279.661       279.717    
  28  0.585742     -0.534875      -1.60940       1.60940       282.445       284.054    
  29  0.956106     -0.448864E-01 -0.135060      0.135060       280.139       280.274    
  30  0.153686      -1.87284      -5.63524       5.63524       284.234       289.869    
  31  0.937356     -0.646920E-01 -0.194653      0.194653       275.872       276.067    
  32  0.821414     -0.196728     -0.591940      0.591940       283.403       283.995    
  33  0.901583     -0.103603     -0.311734      0.311734       281.252       281.563    
  34  0.145469      -1.92779      -5.80058       5.80058       286.521       292.322    
  35  0.944310     -0.573011E-01 -0.172415      0.172415       282.302       282.475    
  36  0.639748     -0.446680      -1.34403       1.34403       273.105       274.450    
  37  0.533071     -0.629101      -1.89292       1.89292       291.313       293.206    
  38  0.708805     -0.344175      -1.03560       1.03560       288.929       289.964    
  39  0.953023     -0.481167E-01 -0.144779      0.144779       284.996       285.140    
  40  0.606832     -0.499502      -1.50296       1.50296       282.567       284.070    
  41  0.791257     -0.234132     -0.704486      0.704486       283.134       283.839    
  42  0.203064      -1.59423      -4.79692       4.79692       289.044       293.840    
  43  0.168642      -1.77998      -5.35582       5.35582       288.734       294.089    
  44  0.718173     -0.331045     -0.996090      0.996090       294.926       295.922    
  45  0.976939E-02  -4.62850      -13.9268       13.9268       292.278       306.205    
  46  0.211685      -1.55265      -4.67182       4.67182       289.360       294.032    
  47  0.624191     -0.471298      -1.41810       1.41810       286.088       287.506    
  48  0.749801     -0.287948     -0.866413      0.866413       279.872       280.738    
  49  0.710340     -0.342011      -1.02908       1.02908       294.203       295.232    
  50  0.447179     -0.804797      -2.42157       2.42157       292.428       294.849    
  51  0.567779     -0.566023      -1.70312       1.70312       291.268       292.971    
  52  0.262390      -1.33792      -4.02571       4.02571       284.162       288.187    
  53  0.907024     -0.975861E-01 -0.293629      0.293629       290.025       290.318    
  54  0.621682E-01  -2.77791      -8.35853       8.35853       297.530       305.889    
  55  0.667173     -0.404707      -1.21773       1.21773       299.994       301.212    
  56  0.429586     -0.844932      -2.54234       2.54234       294.889       297.431    
  57  0.758744     -0.276091     -0.830737      0.830737       285.029       285.860    
  58  0.890716     -0.115730     -0.348222      0.348222       304.685       305.033    
  59  0.101520E-01  -4.59008      -13.8112       13.8112       291.922       305.733    
  60  0.302396      -1.19602      -3.59872       3.59872       294.730       298.329    
  61  0.618723     -0.480097      -1.44457       1.44457       302.903       304.348    
  62  0.323728      -1.12785      -3.39362       3.39362       281.266       284.660    
  63  0.667954     -0.403536      -1.21421       1.21421       297.677       298.891    
  64  0.870722     -0.138433     -0.416534      0.416534       296.806       297.223    
loop,thermsimp(1:2)       16   8.21142       2.84145    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    382        277.61          0.88          1.09         23.15          0.09          0.04         25.25
Just calling func    0   0         25.25


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    277.61
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3.00892               442
loop is:       16
neval is:      381
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       16      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    3.00892               442
loop is:       17
neval is:      381


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      442
neval,tstepnext:      381     442

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.488972     -0.715450      -2.15274       2.15274       246.707       248.860    
   2  0.243137      -1.41413      -4.25501       4.25501       256.866       261.121    
   3  0.530653     -0.633646      -1.90659       1.90659       251.225       253.132    
   4  0.926282     -0.765763E-01 -0.230412      0.230412       265.290       265.521    
   5  0.374288     -0.982729      -2.95696       2.95696       264.230       267.187    
   6  0.675293     -0.392608      -1.18133       1.18133       269.398       270.580    
   7  0.605942     -0.500970      -1.50738       1.50738       272.126       273.633    
   8  0.280229      -1.27215      -3.82779       3.82779       273.892       277.720    
   9  0.297259      -1.21315      -3.65028       3.65028       273.105       276.756    
  10  0.697504E-01  -2.66283      -8.01226       8.01226       274.154       282.166    
  11  0.824348     -0.193163     -0.581213      0.581213       273.824       274.405    
  12  0.750452     -0.287080     -0.863801      0.863801       273.626       274.490    
  13  0.120595      -2.11532      -6.36483       6.36483       275.872       282.237    
  14  0.935324     -0.668625E-01 -0.201184      0.201184       268.366       268.567    
  15  0.215551      -1.53456      -4.61737       4.61737       271.753       276.370    
  16  0.708821     -0.344153      -1.03553       1.03553       277.598       278.633    
  17  0.402499     -0.910063      -2.73831       2.73831       277.729       280.467    
  18  0.836443     -0.178597     -0.537385      0.537385       277.156       277.693    
  19  0.969979E-01  -2.33307      -7.02002       7.02002       270.221       277.241    
  20  0.178795      -1.72152      -5.17991       5.17991       278.061       283.241    
  21  0.140077      -1.96556      -5.91422       5.91422       278.065       283.979    
  22  0.375507     -0.979479      -2.94718       2.94718       276.843       279.790    
  23  0.831487     -0.184540     -0.555266      0.555266       277.353       277.909    
  24  0.815951     -0.203401     -0.612017      0.612017       279.661       280.273    
  25  0.468603     -0.757998      -2.28076       2.28076       280.139       282.420    
  26  0.677551     -0.389270      -1.17128       1.17128       279.872       281.043    
  27  0.169538      -1.77468      -5.33987       5.33987       275.413       280.753    
  28  0.950448     -0.508223E-01 -0.152920      0.152920       281.252       281.405    
  29  0.981726     -0.184427E-01 -0.554928E-01  0.554928E-01   277.876       277.932    
  30  0.442406     -0.815527      -2.45386       2.45386       282.302       284.756    
  31  0.531953     -0.631200      -1.89923       1.89923       277.280       279.179    
  32  0.363692      -1.01145      -3.04337       3.04337       283.134       286.178    
  33  0.144511E-01  -4.23698      -12.7488       12.7488       283.403       296.152    
  34  0.748780     -0.289310     -0.870512      0.870512       282.445       283.315    
  35  0.195075      -1.63437      -4.91770       4.91770       282.567       287.485    
  36  0.440325     -0.820241      -2.46804       2.46804       282.492       284.960    
  37  0.805864     -0.215841     -0.649449      0.649449       281.266       281.916    
  38  0.921415     -0.818451E-01 -0.246266      0.246266       284.996       285.242    
  39  0.296293      -1.21641      -3.66007       3.66007       285.029       288.689    
  40  0.645874E-01  -2.73974      -8.24366       8.24366       281.731       289.975    
  41  0.488279     -0.716868      -2.15700       2.15700       286.088       288.245    
  42  0.573105     -0.556686      -1.67503       1.67503       284.162       285.837    
  43  0.967891     -0.326356E-01 -0.981979E-01  0.981979E-01   284.234       284.332    
  44  0.780434E-01  -2.55049      -7.67423       7.67423       288.929       296.603    
  45  0.968859     -0.316363E-01 -0.951913E-01  0.951913E-01   290.025       290.120    
  46  0.858835     -0.152178     -0.457892      0.457892       286.521       286.979    
  47  0.968806     -0.316911E-01 -0.953562E-01  0.953562E-01   291.268       291.363    
  48  0.134500      -2.00619      -6.03647       6.03647       291.313       297.349    
  49  0.993707     -0.631323E-02 -0.189960E-01  0.189960E-01   289.044       289.063    
  50  0.300401      -1.20264      -3.61864       3.61864       289.360       292.979    
  51  0.166933      -1.79016      -5.38647       5.38647       288.734       294.120    
  52  0.917937     -0.856264E-01 -0.257643      0.257643       292.428       292.685    
  53  0.587259     -0.532289      -1.60162       1.60162       294.203       295.804    
  54  0.470076     -0.754861      -2.27132       2.27132       294.926       297.197    
  55  0.256936      -1.35893      -4.08891       4.08891       296.806       300.895    
  56  0.723917     -0.323079     -0.972120      0.972120       294.889       295.861    
  57  0.294593      -1.22216      -3.67738       3.67738       294.730       298.407    
  58  0.700842     -0.355473      -1.06959       1.06959       297.677       298.746    
  59  0.845975     -0.167265     -0.503288      0.503288       299.994       300.497    
  60  0.690580     -0.370224      -1.11398       1.11398       302.903       304.017    
  61  0.413361     -0.883435      -2.65819       2.65819       304.685       307.343    
  62  0.950705     -0.505510E-01 -0.152104      0.152104       291.922       292.074    
  63  0.455802     -0.785697      -2.36410       2.36410       297.530       299.894    
  64  0.937099     -0.649663E-01 -0.195479      0.195479       277.612       277.807    
loop,thermsimp(1:2)       17   2.15274       4.25501    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    383        305.13          0.88          1.08         23.09          0.06          0.05         25.16
Just calling func    0   0         25.16


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    305.13
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3.00892               442
loop is:       17
neval is:      382
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       17      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    3.00892               442
loop is:       18
neval is:      382


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      442
neval,tstepnext:      382     442

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.490618     -0.712090      -2.14262       2.14262       246.707       248.850    
   2  0.486668     -0.720173      -2.16695       2.16695       251.225       253.392    
   3  0.319995E-01  -3.44203      -10.3568       10.3568       256.866       267.223    
   4  0.957863     -0.430503E-01 -0.129535      0.129535       265.290       265.420    
   5  0.713202E-01  -2.64058      -7.94529       7.94529       264.230       272.175    
   6  0.677570     -0.389242      -1.17120       1.17120       268.366       269.537    
   7  0.533853     -0.627634      -1.88850       1.88850       269.398       271.287    
   8  0.963967     -0.366984E-01 -0.110423      0.110423       272.126       272.236    
   9  0.590118     -0.527432      -1.58700       1.58700       273.824       275.411    
  10  0.102350      -2.27936      -6.85841       6.85841       273.626       280.485    
  11  0.313487      -1.16000      -3.49034       3.49034       271.753       275.243    
  12  0.876181     -0.132183     -0.397727      0.397727       273.105       273.503    
  13  0.780541     -0.247768     -0.745515      0.745515       270.221       270.967    
  14  0.222922      -1.50093      -4.51619       4.51619       277.156       281.672    
  15  0.913991     -0.899351E-01 -0.270608      0.270608       273.892       274.162    
  16  0.493176     -0.706888      -2.12697       2.12697       277.612       279.739    
  17  0.884766     -0.122432     -0.368388      0.368388       277.353       277.722    
  18  0.576549E-01  -2.85328      -8.58530       8.58530       277.876       286.461    
  19  0.398597     -0.919804      -2.76762       2.76762       277.598       280.365    
  20  0.980633     -0.195573E-01 -0.588464E-01  0.588464E-01   277.280       277.339    
  21  0.304985      -1.18749      -3.57307       3.57307       276.843       280.416    
  22  0.628666     -0.464156      -1.39661       1.39661       279.661       281.057    
  23  0.367895     -0.999957      -3.00879       3.00879       277.729       280.738    
  24  0.442302     -0.815762      -2.45457       2.45457       275.413       277.868    
  25  0.656121     -0.421410      -1.26799       1.26799       279.872       281.140    
  26  0.229893      -1.47014      -4.42354       4.42354       281.252       285.675    
  27  0.475469     -0.743453      -2.23699       2.23699       281.266       283.503    
  28  0.801985     -0.220665     -0.663965      0.663965       274.154       274.818    
  29  0.454630     -0.788272      -2.37185       2.37185       275.872       278.244    
  30  0.858022     -0.153126     -0.460744      0.460744       280.139       280.600    
  31  0.692704     -0.367153      -1.10474       1.10474       278.061       279.166    
  32  0.466274     -0.762981      -2.29575       2.29575       282.445       284.741    
  33  0.682446     -0.382072      -1.14963       1.14963       278.065       279.215    
  34  0.660760     -0.414365      -1.24679       1.24679       284.234       285.481    
  35  0.957519     -0.434092E-01 -0.130615      0.130615       282.302       282.433    
  36  0.108167      -2.22408      -6.69208       6.69208       282.492       289.184    
  37  0.846378     -0.166789     -0.501856      0.501856       284.996       285.498    
  38  0.621158E-01  -2.77876      -8.36106       8.36106       284.162       292.523    
  39  0.988945E-01  -2.31370      -6.96175       6.96175       283.134       290.096    
  40  0.253472      -1.37250      -4.12975       4.12975       286.521       290.651    
  41  0.915015     -0.888152E-01 -0.267238      0.267238       282.567       282.834    
  42  0.662342     -0.411973      -1.23959       1.23959       286.088       287.327    
  43  0.210223      -1.55959      -4.69268       4.69268       285.029       289.722    
  44  0.141043      -1.95869      -5.89356       5.89356       289.044       294.937    
  45  0.839834     -0.174551     -0.525212      0.525212       281.731       282.257    
  46  0.132358      -2.02225      -6.08478       6.08478       290.025       296.110    
  47  0.129895E-01  -4.34361      -13.0696       13.0696       291.268       304.337    
  48  0.795497     -0.228788     -0.688405      0.688405       291.922       292.610    
  49  0.547485     -0.602421      -1.81264       1.81264       292.428       294.240    
  50  0.137643      -1.98309      -5.96697       5.96697       289.360       295.327    
  51  0.603188     -0.505526      -1.52109       1.52109       288.734       290.255    
  52  0.394039     -0.931305      -2.80223       2.80223       294.203       297.005    
  53  0.777307     -0.251920     -0.758008      0.758008       294.889       295.647    
  54  0.946969     -0.544893E-01 -0.163954      0.163954       283.403       283.567    
  55  0.137504      -1.98410      -5.97000       5.97000       288.929       294.899    
  56  0.712611     -0.338820      -1.01948       1.01948       294.926       295.945    
  57  0.274991      -1.29102      -3.88457       3.88457       291.313       295.197    
  58  0.847791     -0.165121     -0.496838      0.496838       294.730       295.227    
  59  0.107545      -2.22984      -6.70943       6.70943       297.677       304.386    
  60  0.224670      -1.49312      -4.49269       4.49269       297.530       302.023    
  61  0.827554E-01  -2.49187      -7.49784       7.49784       299.994       307.492    
  62  0.467473     -0.760413      -2.28802       2.28802       296.806       299.094    
  63  0.746927     -0.291788     -0.877967      0.877967       302.903       303.781    
  64  0.346805E-01  -3.36158      -10.1147       10.1147       305.129       315.243    
loop,thermsimp(1:2)       18   2.14262       2.16695    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    384        304.68          0.88          1.11         23.11          0.03          0.04         25.17
Just calling func    0   0         25.17


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    304.68
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3.00892               442
loop is:       18
neval is:      383
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       18      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    3.00892               442
loop is:       19
neval is:      383


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      442
neval,tstepnext:      383     442

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.155141      -1.86342      -5.60689       5.60689       246.707       252.314    
   2  0.881882     -0.125697     -0.378214      0.378214       251.225       251.603    
   3  0.908319     -0.961592E-01 -0.289336      0.289336       265.290       265.580    
   4  0.732380     -0.311455     -0.937145      0.937145       256.866       257.803    
   5  0.367412      -1.00127      -3.01275       3.01275       268.366       271.378    
   6  0.624330     -0.471077      -1.41743       1.41743       270.221       271.639    
   7  0.833858     -0.181693     -0.546699      0.546699       269.398       269.945    
   8  0.194603E-02  -6.24197      -18.7816       18.7816       264.230       283.011    
   9  0.995416     -0.459497E-02 -0.138259E-01  0.138259E-01   272.126       272.140    
  10  0.665599     -0.407068      -1.22484       1.22484       273.105       274.330    
  11  0.747574     -0.290922     -0.875362      0.875362       273.892       274.767    
  12  0.539692     -0.616756      -1.85577       1.85577       274.154       276.010    
  13  0.958323     -0.425700E-01 -0.128090      0.128090       271.753       271.881    
  14  0.111027      -2.19798      -6.61357       6.61357       273.824       280.437    
  15  0.520965     -0.652072      -1.96203       1.96203       277.280       279.242    
  16  0.177207E-01  -4.03302      -12.1351       12.1351       277.353       289.488    
  17  0.860365     -0.150398     -0.452538      0.452538       275.413       275.866    
  18  0.383700     -0.957895      -2.88223       2.88223       275.872       278.755    
  19  0.524904     -0.644539      -1.93937       1.93937       278.061       280.001    
  20  0.589629     -0.528262      -1.58950       1.58950       278.065       279.654    
  21  0.125125      -2.07844      -6.25387       6.25387       277.612       283.866    
  22  0.154207      -1.86946      -5.62506       5.62506       277.598       283.223    
  23  0.752747     -0.284026     -0.854614      0.854614       276.843       277.698    
  24  0.551286     -0.595501      -1.79182       1.79182       273.626       275.418    
  25  0.733343     -0.310142     -0.933193      0.933193       280.139       281.072    
  26  0.904985     -0.998368E-01 -0.300401      0.300401       277.729       278.029    
  27  0.987632     -0.124455E-01 -0.374477E-01  0.374477E-01   279.661       279.698    
  28  0.228587      -1.47584      -4.44068       4.44068       279.872       284.312    
  29  0.384883     -0.954815      -2.87297       2.87297       277.156       280.029    
  30  0.781910     -0.246015     -0.740241      0.740241       281.731       282.472    
  31  0.402051E-02  -5.51635      -16.5983       16.5983       282.302       298.900    
  32  0.880575     -0.127180     -0.382676      0.382676       282.567       282.950    
  33  0.427180     -0.850550      -2.55924       2.55924       281.266       283.825    
  34  0.613064     -0.489286      -1.47222       1.47222       283.403       284.875    
  35  0.529053     -0.636668      -1.91568       1.91568       282.445       284.361    
  36  0.973505     -0.268519E-01 -0.807955E-01  0.807955E-01   284.234       284.315    
  37  0.889868     -0.116682     -0.351088      0.351088       284.996       285.347    
  38  0.133989      -2.01000      -6.04792       6.04792       281.252       287.300    
  39  0.289828      -1.23847      -3.72645       3.72645       277.876       281.602    
  40  0.724995     -0.321591     -0.967642      0.967642       286.088       287.055    
  41  0.547932     -0.601605      -1.81018       1.81018       282.492       284.302    
  42  0.608240E-01  -2.79977      -8.42430       8.42430       285.029       293.453    
  43  0.481259E-01  -3.03393      -9.12888       9.12888       283.134       292.263    
  44  0.356843      -1.03046      -3.10057       3.10057       288.734       291.834    
  45  0.417411     -0.873685      -2.62885       2.62885       286.521       289.150    
  46  0.918903     -0.845742E-01 -0.254477      0.254477       284.162       284.416    
  47  0.852285     -0.159834     -0.480929      0.480929       291.922       292.403    
  48  0.744864     -0.294553     -0.886289      0.886289       292.428       293.314    
  49  0.128521      -2.05166      -6.17330       6.17330       288.929       295.102    
  50  0.484639     -0.724351      -2.17952       2.17952       289.044       291.223    
  51  0.478847     -0.736375      -2.21570       2.21570       291.313       293.529    
  52  0.557656     -0.584013      -1.75725       1.75725       294.730       296.487    
  53  0.799673     -0.223552     -0.672650      0.672650       289.360       290.033    
  54  0.734793     -0.308167     -0.927251      0.927251       294.889       295.816    
  55  0.306231      -1.18342      -3.56081       3.56081       294.926       298.487    
  56  0.286852      -1.24879      -3.75751       3.75751       290.025       293.782    
  57  0.731298     -0.312934     -0.941594      0.941594       294.203       295.144    
  58  0.681466     -0.383509      -1.15395       1.15395       296.806       297.960    
  59  0.246139      -1.40186      -4.21809       4.21809       297.530       301.748    
  60  0.339728      -1.07961      -3.24846       3.24846       302.903       306.152    
  61  0.740009     -0.301093     -0.905965      0.905965       291.268       292.174    
  62  0.923584     -0.794938E-01 -0.239191      0.239191       297.677       297.916    
  63  0.108454      -2.22143      -6.68412       6.68412       299.994       306.678    
  64  0.658643     -0.417574      -1.25645       1.25645       304.685       305.941    
loop,thermsimp(1:2)       19   5.60689      0.378214    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    385        304.34          0.88          1.09         23.12          0.20          0.04         25.33
Just calling func    0   0         25.33


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    304.34
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3.00892               442
loop is:       19
neval is:      384
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       19      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    3.00892               442
loop is:       20
neval is:      384


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      442
neval,tstepnext:      384     442

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.272787      -1.29906      -3.90878       3.90878       251.225       255.134    
   2  0.284829      -1.25587      -3.77880       3.77880       246.707       250.486    
   3  0.422534E-01  -3.16407      -9.52045       9.52045       256.866       266.386    
   4  0.788018E-01  -2.54082      -7.64513       7.64513       265.290       272.935    
   5  0.396626E-01  -3.22735      -9.71084       9.71084       269.398       279.109    
   6  0.412432     -0.885684      -2.66495       2.66495       268.366       271.031    
   7  0.390866     -0.939390      -2.82655       2.82655       270.221       273.048    
   8  0.853334     -0.158604     -0.477227      0.477227       271.753       272.230    
   9  0.506127     -0.680968      -2.04898       2.04898       272.126       274.175    
  10  0.254200      -1.36963      -4.12112       4.12112       273.105       277.227    
  11  0.643116     -0.441430      -1.32823       1.32823       273.892       275.220    
  12  0.897721     -0.107896     -0.324652      0.324652       273.626       273.951    
  13  0.830899     -0.185247     -0.557395      0.557395       275.413       275.971    
  14  0.357312      -1.02915      -3.09662       3.09662       274.154       277.251    
  15  0.525942     -0.642564      -1.93343       1.93343       276.843       278.776    
  16  0.742929     -0.297155     -0.894116      0.894116       277.729       278.623    
  17  0.970959     -0.294711E-01 -0.886764E-01  0.886764E-01   275.872       275.961    
  18  0.235894      -1.44437      -4.34601       4.34601       277.280       281.626    
  19  0.723381E-01  -2.62640      -7.90265       7.90265       278.065       285.968    
  20  0.190915      -1.65593      -4.98256       4.98256       279.661       284.643    
  21  0.524670     -0.644986      -1.94071       1.94071       278.061       280.002    
  22  0.536043     -0.623540      -1.87618       1.87618       277.156       279.032    
  23  0.281730      -1.26681      -3.81172       3.81172       273.824       277.636    
  24  0.747791     -0.290632     -0.874489      0.874489       280.139       281.014    
  25  0.255771      -1.36347      -4.10258       4.10258       277.876       281.979    
  26  0.194866      -1.63544      -4.92092       4.92092       281.731       286.652    
  27  0.639630     -0.446865      -1.34458       1.34458       282.567       283.912    
  28  0.485808     -0.721941      -2.17227       2.17227       264.230       266.402    
  29  0.659147     -0.416809      -1.25415       1.25415       277.598       278.852    
  30  0.196308      -1.62807      -4.89874       4.89874       281.266       286.165    
  31  0.308964      -1.17453      -3.53407       3.53407       277.612       281.146    
  32  0.181287      -1.70768      -5.13827       5.13827       282.492       287.630    
  33  0.386667     -0.950191      -2.85905       2.85905       279.872       282.731    
  34  0.947825     -0.535853E-01 -0.161234      0.161234       284.234       284.395    
  35  0.699942     -0.356758      -1.07346       1.07346       282.445       283.518    
  36  0.208747      -1.56663      -4.71387       4.71387       284.162       288.876    
  37  0.717648     -0.331775     -0.998287      0.998287       283.403       284.401    
  38  0.734922     -0.307991     -0.926720      0.926720       284.996       285.922    
  39  0.862816     -0.147554     -0.443979      0.443979       286.088       286.532    
  40  0.677494     -0.389354      -1.17154       1.17154       281.252       282.423    
  41  0.829375     -0.187082     -0.562916      0.562916       286.521       287.084    
  42  0.393856     -0.931770      -2.80362       2.80362       277.353       280.157    
  43  0.447370     -0.804370      -2.42029       2.42029       289.360       291.781    
  44  0.485389     -0.722806      -2.17487       2.17487       289.044       291.218    
  45  0.522363     -0.649392      -1.95397       1.95397       288.734       290.688    
  46  0.740056E-01  -2.60361      -7.83408       7.83408       291.268       299.102    
  47  0.396252     -0.925705      -2.78537       2.78537       283.134       285.920    
  48  0.429395     -0.845378      -2.54368       2.54368       291.922       294.466    
  49  0.865472     -0.144480     -0.434730      0.434730       292.428       292.862    
  50  0.103085      -2.27220      -6.83689       6.83689       285.029       291.866    
  51  0.257437      -1.35698      -4.08305       4.08305       291.313       295.396    
  52  0.136338      -1.99262      -5.99563       5.99563       290.025       296.020    
  53  0.153596      -1.87343      -5.63701       5.63701       288.929       294.566    
  54  0.305406      -1.18611      -3.56892       3.56892       294.203       297.772    
  55  0.473340     -0.747942      -2.25050       2.25050       294.889       297.139    
  56  0.475010     -0.744419      -2.23990       2.23990       294.730       296.970    
  57  0.779699     -0.248847     -0.748763      0.748763       297.677       298.426    
  58  0.143364      -1.94237      -5.84443       5.84443       296.806       302.651    
  59  0.739804     -0.301371     -0.906801      0.906801       294.926       295.833    
  60  0.571699     -0.559143      -1.68242       1.68242       282.302       283.985    
  61  0.641967     -0.443219      -1.33361       1.33361       297.530       298.864    
  62  0.339882      -1.07916      -3.24710       3.24710       304.685       307.932    
  63  0.658898E-01  -2.71977      -8.18358       8.18358       302.903       311.087    
  64  0.441939     -0.816583      -2.45704       2.45704       304.338       306.795    
loop,thermsimp(1:2)       20   3.90878       3.77880    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    386        264.34          0.88          1.09         23.12          0.05          0.04         25.19
Just calling func    0   0         25.19


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    264.34
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3.00892               442
loop is:       20
neval is:      385
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       20      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    3.00892               442
loop is:       21
neval is:      385


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      442
neval,tstepnext:      385     442

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.633870E-01  -2.75850      -8.30011       8.30011       246.707       255.007    
   2  0.713782     -0.337177      -1.01454       1.01454       251.225       252.240    
   3  0.851614     -0.160622     -0.483300      0.483300       256.866       257.349    
   4  0.721769     -0.326050     -0.981059      0.981059       264.230       265.211    
   5  0.954937     -0.461102E-01 -0.138742      0.138742       268.366       268.504    
   6  0.302532E-01  -3.49815      -10.5257       10.5257       271.753       282.279    
   7  0.942920E-01  -2.36136      -7.10515       7.10515       265.290       272.395    
   8  0.515750E-01  -2.96472      -8.92061       8.92061       270.221       279.142    
   9  0.612753     -0.489794      -1.47375       1.47375       273.626       275.100    
  10  0.758041     -0.277018     -0.833525      0.833525       272.126       272.959    
  11  0.530485E-01  -2.93655      -8.83585       8.83585       273.892       282.728    
  12  0.941175     -0.606258E-01 -0.182419      0.182419       275.872       276.055    
  13  0.167539      -1.78654      -5.37557       5.37557       275.413       280.789    
  14  0.738662E-01  -2.60550      -7.83975       7.83975       273.105       280.945    
  15  0.822155     -0.195827     -0.589228      0.589228       274.154       274.743    
  16  0.578765     -0.546859      -1.64546       1.64546       273.824       275.469    
  17  0.912739E-01  -2.39389      -7.20303       7.20303       277.729       284.932    
  18  0.949215     -0.521197E-01 -0.156824      0.156824       276.843       277.000    
  19  0.485124     -0.723351      -2.17651       2.17651       277.598       279.774    
  20  0.359009      -1.02441      -3.08237       3.08237       277.156       280.238    
  21  0.747559     -0.290942     -0.875423      0.875423       269.398       270.274    
  22  0.482847     -0.728056      -2.19067       2.19067       278.061       280.252    
  23  0.994301     -0.571526E-02 -0.171968E-01  0.171968E-01   277.353       277.371    
  24  0.937801     -0.642177E-01 -0.193226      0.193226       280.139       280.333    
  25  0.699033     -0.358058      -1.07737       1.07737       277.612       278.689    
  26  0.358162      -1.02677      -3.08948       3.08948       277.280       280.370    
  27  0.746418     -0.292470     -0.880018      0.880018       277.876       278.756    
  28  0.532195     -0.630744      -1.89786       1.89786       281.252       283.150    
  29  0.727066     -0.318738     -0.959059      0.959059       279.872       280.831    
  30  0.461510     -0.773252      -2.32666       2.32666       282.445       284.772    
  31  0.285112      -1.25487      -3.77582       3.77582       282.567       286.343    
  32  0.316830      -1.14939      -3.45843       3.45843       282.302       285.761    
  33  0.835731     -0.179448     -0.539946      0.539946       284.234       284.774    
  34  0.516269E-02  -5.26630      -15.8459       15.8459       283.403       299.249    
  35  0.309002      -1.17441      -3.53371       3.53371       279.661       283.194    
  36  0.770766     -0.260370     -0.783434      0.783434       283.134       283.918    
  37  0.878913     -0.129069     -0.388358      0.388358       284.996       285.384    
  38  0.981341E-01  -2.32142      -6.98498       6.98498       278.065       285.050    
  39  0.634060     -0.455612      -1.37090       1.37090       281.266       282.637    
  40  0.359967      -1.02174      -3.07435       3.07435       286.088       289.162    
  41  0.480002     -0.733964      -2.20844       2.20844       281.731       283.940    
  42  0.706923     -0.346834      -1.04360       1.04360       286.521       287.565    
  43  0.497828     -0.697501      -2.09873       2.09873       282.492       284.591    
  44  0.885038     -0.122125     -0.367464      0.367464       284.162       284.529    
  45  0.504752     -0.683689      -2.05717       2.05717       288.734       290.791    
  46  0.719262     -0.329529     -0.991529      0.991529       289.044       290.035    
  47  0.516359     -0.660954      -1.98876       1.98876       289.360       291.349    
  48  0.584389E-01  -2.83977      -8.54466       8.54466       285.029       293.574    
  49  0.768960E-01  -2.56530      -7.71880       7.71880       292.428       300.146    
  50  0.253658      -1.37177      -4.12754       4.12754       291.922       296.050    
  51  0.451822     -0.794468      -2.39049       2.39049       288.929       291.319    
  52  0.816822     -0.202334     -0.608807      0.608807       291.313       291.922    
  53  0.774668     -0.255321     -0.768241      0.768241       294.926       295.694    
  54  0.528070     -0.638526      -1.92127       1.92127       290.025       291.946    
  55  0.367170      -1.00193      -3.01473       3.01473       294.730       297.745    
  56  0.960919E-01  -2.34245      -7.04825       7.04825       294.889       301.937    
  57  0.621616     -0.475432      -1.43054       1.43054       294.203       295.633    
  58  0.678193     -0.388324      -1.16844       1.16844       297.677       298.845    
  59  0.400445E-01  -3.21776      -9.68200       9.68200       297.530       307.212    
  60  0.643930     -0.440165      -1.32442       1.32442       291.268       292.592    
  61  0.695390     -0.363282      -1.09309       1.09309       296.806       297.899    
  62  0.669334E-01  -2.70406      -8.13630       8.13630       304.338       312.474    
  63  0.850395E-01  -2.46464      -7.41591       7.41591       304.685       312.101    
  64  0.972359     -0.280307E-01 -0.843423E-01  0.843423E-01   264.341       264.425    
loop,thermsimp(1:2)       21   8.30011       1.01454    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    387        297.68          0.88          1.09         23.09          0.02          0.05         25.13
Just calling func    0   0         25.13


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    297.68
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3.00892               442
loop is:       21
neval is:      386
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       21      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    3.00892               442
loop is:       22
neval is:      386


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      442
neval,tstepnext:      386     442

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.434858     -0.832735      -2.50564       2.50564       251.225       253.731    
   2  0.380177E-01  -3.26970      -9.83829       9.83829       246.707       256.545    
   3  0.198795      -1.61548      -4.86086       4.86086       256.866       261.727    
   4  0.880944E-01  -2.42935      -7.30972       7.30972       264.341       271.650    
   5  0.279105      -1.27617      -3.83989       3.83989       264.230       268.070    
   6  0.379482     -0.968948      -2.91549       2.91549       268.366       271.281    
   7  0.510142     -0.673065      -2.02520       2.02520       269.398       271.424    
   8  0.869007     -0.140404     -0.422464      0.422464       265.290       265.713    
   9  0.905256     -0.995378E-01 -0.299502      0.299502       272.126       272.425    
  10  0.587200     -0.532390      -1.60192       1.60192       274.154       275.756    
  11  0.309008      -1.17439      -3.53365       3.53365       273.626       277.160    
  12  0.210718      -1.55723      -4.68560       4.68560       273.824       278.509    
  13  0.362152      -1.01569      -3.05614       3.05614       275.872       278.929    
  14  0.465452     -0.764747      -2.30106       2.30106       276.843       279.144    
  15  0.155270E-01  -4.16518      -12.5327       12.5327       277.353       289.886    
  16  0.632166     -0.458603      -1.37990       1.37990       277.612       278.992    
  17  0.171028      -1.76593      -5.31355       5.31355       277.876       283.190    
  18  0.926401     -0.764482E-01 -0.230027      0.230027       270.221       270.451    
  19  0.130449      -2.03678      -6.12850       6.12850       277.598       283.726    
  20  0.536069     -0.623492      -1.87604       1.87604       277.156       279.032    
  21  0.128128      -2.05472      -6.18251       6.18251       278.061       284.244    
  22  0.729730     -0.315081     -0.948054      0.948054       280.139       281.087    
  23  0.982387     -0.177702E-01 -0.534691E-01  0.534691E-01   277.280       277.334    
  24  0.707707     -0.345726      -1.04026       1.04026       275.413       276.454    
  25  0.643878     -0.440245      -1.32466       1.32466       279.872       281.196    
  26  0.136721      -1.98982      -5.98720       5.98720       273.105       279.093    
  27  0.146320      -1.92196      -5.78304       5.78304       271.753       277.536    
  28  0.214169      -1.54099      -4.63673       4.63673       281.266       285.903    
  29  0.774008     -0.256172     -0.770803      0.770803       273.892       274.663    
  30  0.487333     -0.718808      -2.16284       2.16284       281.252       283.415    
  31  0.594481E-01  -2.82265      -8.49315       8.49315       279.661       288.154    
  32  0.305368      -1.18624      -3.56930       3.56930       283.134       286.704    
  33  0.206200      -1.57891      -4.75082       4.75082       281.731       286.482    
  34  0.185235      -1.68613      -5.07343       5.07343       284.162       289.235    
  35  0.945154     -0.564077E-01 -0.169727      0.169727       282.492       282.662    
  36  0.657328     -0.419572      -1.26246       1.26246       282.445       283.707    
  37  0.932191     -0.702171E-01 -0.211278      0.211278       284.234       284.445    
  38  0.258055      -1.35458      -4.07584       4.07584       277.729       281.805    
  39  0.525568E-01  -2.94586      -8.86387       8.86387       278.065       286.929    
  40  0.692807     -0.367004      -1.10429       1.10429       284.996       286.100    
  41  0.691658     -0.368664      -1.10928       1.10928       282.302       283.411    
  42  0.163447      -1.81127      -5.44996       5.44996       282.567       288.017    
  43  0.462923     -0.770194      -2.31745       2.31745       286.521       288.838    
  44  0.758611     -0.276266     -0.831262      0.831262       286.088       286.919    
  45  0.278938      -1.27677      -3.84169       3.84169       289.044       292.885    
  46  0.726655     -0.319304     -0.960761      0.960761       288.734       289.694    
  47  0.288418      -1.24334      -3.74113       3.74113       288.929       292.670    
  48  0.640221     -0.445941      -1.34180       1.34180       289.360       290.702    
  49  0.531981     -0.631147      -1.89907       1.89907       291.313       293.212    
  50  0.494380     -0.704450      -2.11964       2.11964       290.025       292.144    
  51  0.765719     -0.266940     -0.803203      0.803203       291.268       292.071    
  52  0.274236      -1.29377      -3.89284       3.89284       285.029       288.922    
  53  0.946599     -0.548792E-01 -0.165127      0.165127       294.203       294.368    
  54  0.264711      -1.32912      -3.99921       3.99921       294.926       298.925    
  55  0.129097      -2.04719      -6.15984       6.15984       291.922       298.082    
  56  0.217636      -1.52493      -4.58840       4.58840       294.730       299.318    
  57  0.430633     -0.842500      -2.53502       2.53502       296.806       299.341    
  58  0.307617      -1.17890      -3.54722       3.54722       297.677       301.224    
  59  0.137533      -1.98389      -5.96937       5.96937       283.403       289.372    
  60  0.560294     -0.579293      -1.74305       1.74305       292.428       294.171    
  61  0.531695     -0.631686      -1.90070       1.90070       294.889       296.789    
  62  0.259312      -1.34972      -4.06122       4.06122       297.530       301.592    
  63  0.928174     -0.745366E-01 -0.224275      0.224275       304.685       304.909    
  64  0.501730     -0.689694      -2.07524       2.07524       297.680       299.755    
loop,thermsimp(1:2)       22   2.50564       9.83829    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    388        307.05          0.88          1.09         23.09          0.05          0.04         25.14
Just calling func    0   0         25.14


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    389        275.79          0.88          1.08         23.12          0.00          0.05         25.12
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3    275.79
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3.00892               442
loop is:       22
neval is:      388
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       22      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    3.00892               442
loop is:       23
neval is:      388


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      442
neval,tstepnext:      388     442

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.262849      -1.33618      -4.02045       4.02045       251.225       255.245    
   2  0.388449     -0.945595      -2.84522       2.84522       246.707       249.552    
   3  0.827051     -0.189889     -0.571362      0.571362       256.866       257.437    
   4  0.958395     -0.424951E-01 -0.127865      0.127865       265.290       265.418    
   5  0.125400      -2.07625      -6.24728       6.24728       264.230       270.477    
   6  0.524174     -0.645931      -1.94356       1.94356       270.221       272.165    
   7  0.783721     -0.243702     -0.733281      0.733281       268.366       269.099    
   8  0.183361      -1.69630      -5.10404       5.10404       269.398       274.502    
   9  0.122208      -2.10203      -6.32484       6.32484       264.341       270.665    
  10  0.913915     -0.900182E-01 -0.270858      0.270858       272.126       272.397    
  11  0.273776      -1.29545      -3.89790       3.89790       273.892       277.790    
  12  0.779874     -0.248622     -0.748086      0.748086       274.154       274.902    
  13  0.305314      -1.18641      -3.56983       3.56983       275.413       278.983    
  14  0.720732     -0.327488     -0.985387      0.985387       273.626       274.612    
  15  0.222329      -1.50360      -4.52421       4.52421       277.280       281.804    
  16  0.826299     -0.190798     -0.574097      0.574097       271.753       272.327    
  17  0.581574     -0.542017      -1.63089       1.63089       273.824       275.455    
  18  0.616258     -0.484089      -1.45659       1.45659       275.872       277.329    
  19  0.604230     -0.503801      -1.51590       1.51590       277.612       279.128    
  20  0.333333      -1.09861      -3.30565       3.30565       277.156       280.461    
  21  0.289888E-01  -3.54085      -10.6541       10.6541       273.105       283.760    
  22  0.396892     -0.924091      -2.78052       2.78052       276.843       279.624    
  23  0.910378     -0.938957E-01 -0.282525      0.282525       280.139       280.422    
  24  0.998355     -0.164683E-02 -0.495517E-02  0.495517E-02   279.872       279.877    
  25  0.735990     -0.306539     -0.922352      0.922352       277.729       278.651    
  26  0.779044     -0.249688     -0.751293      0.751293       282.492       283.243    
  27  0.498268     -0.696618      -2.09607       2.09607       277.876       279.972    
  28  0.693129     -0.366539      -1.10289       1.10289       282.302       283.405    
  29  0.691370     -0.369080      -1.11053       1.11053       281.252       282.362    
  30  0.519398     -0.655086      -1.97110       1.97110       282.445       284.416    
  31  0.365801      -1.00567      -3.02597       3.02597       277.598       280.624    
  32  0.352392      -1.04301      -3.13834       3.13834       278.061       281.200    
  33  0.176642      -1.73363      -5.21636       5.21636       284.234       289.450    
  34  0.982977     -0.171697E-01 -0.516622E-01  0.516622E-01   281.266       281.318    
  35  0.466781     -0.761894      -2.29248       2.29248       284.996       287.288    
  36  0.481130     -0.731617      -2.20138       2.20138       281.731       283.933    
  37  0.238852      -1.43191      -4.30851       4.30851       283.134       287.443    
  38  0.453247     -0.791318      -2.38102       2.38102       286.088       288.469    
  39  0.579188     -0.546129      -1.64326       1.64326       278.065       279.708    
  40  0.802776E-01  -2.52226      -7.58930       7.58930       282.567       290.157    
  41  0.819632     -0.198900     -0.598476      0.598476       279.661       280.259    
  42  0.917023     -0.866231E-01 -0.260642      0.260642       286.521       286.782    
  43  0.328296      -1.11384      -3.35146       3.35146       285.029       288.381    
  44  0.751681     -0.285443     -0.858876      0.858876       284.162       285.021    
  45  0.760454     -0.273840     -0.823963      0.823963       283.403       284.227    
  46  0.655053     -0.423039      -1.27289       1.27289       288.734       290.007    
  47  0.438192     -0.825097      -2.48265       2.48265       277.353       279.836    
  48  0.615984E-01  -2.78712      -8.38623       8.38623       289.360       297.747    
  49  0.373345     -0.985252      -2.96455       2.96455       291.268       294.232    
  50  0.173578      -1.75113      -5.26901       5.26901       290.025       295.294    
  51  0.787098     -0.239402     -0.720343      0.720343       288.929       289.649    
  52  0.476899     -0.740450      -2.22796       2.22796       289.044       291.272    
  53  0.267079      -1.32021      -3.97241       3.97241       291.313       295.285    
  54  0.328534E-01  -3.41570      -10.2776       10.2776       292.428       302.705    
  55  0.223376      -1.49890      -4.51007       4.51007       294.203       298.713    
  56  0.950133     -0.511529E-01 -0.153915      0.153915       294.889       295.043    
  57  0.802688     -0.219789     -0.661328      0.661328       291.922       292.583    
  58  0.687564     -0.374601      -1.12714       1.12714       294.926       296.053    
  59  0.389763     -0.942217      -2.83506       2.83506       294.730       297.565    
  60  0.828122     -0.188595     -0.567467      0.567467       296.806       297.374    
  61  0.447451     -0.804188      -2.41974       2.41974       297.680       300.100    
  62  0.132831      -2.01868      -6.07404       6.07404       297.677       303.751    
  63  0.217304E-01  -3.82904      -11.5213       11.5213       297.530       309.052    
  64  0.466508     -0.762480      -2.29424       2.29424       275.789       278.083    
loop,thermsimp(1:2)       23   4.02045       2.84522    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    390        278.13          0.88          1.10         23.06          0.06          0.04         25.15
Just calling func    0   0         25.15


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    278.13
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3.00892               442
loop is:       23
neval is:      389
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       23      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    3.00892               442
loop is:       24
neval is:      389


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      442
neval,tstepnext:      389     442

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.562447     -0.575458      -1.73151       1.73151       246.707       248.439    
   2  0.429755     -0.844539      -2.54115       2.54115       251.225       253.766    
   3  0.598807     -0.512815      -1.54302       1.54302       256.866       258.409    
   4  0.757798     -0.277339     -0.834491      0.834491       265.290       266.125    
   5  0.954130E-01  -2.34954      -7.06959       7.06959       268.366       275.435    
   6  0.968708E-01  -2.33438      -7.02396       7.02396       264.230       271.254    
   7  0.196924      -1.62494      -4.88931       4.88931       264.341       269.230    
   8  0.616654     -0.483447      -1.45465       1.45465       270.221       271.676    
   9  0.181969      -1.70392      -5.12697       5.12697       271.753       276.880    
  10  0.383918     -0.957326      -2.88052       2.88052       272.126       275.006    
  11  0.377012     -0.975478      -2.93514       2.93514       269.398       272.333    
  12  0.899192     -0.106259     -0.319724      0.319724       273.626       273.946    
  13  0.409833     -0.892005      -2.68397       2.68397       274.154       276.838    
  14  0.728621     -0.316601     -0.952628      0.952628       273.824       274.776    
  15  0.568233     -0.565224      -1.70072       1.70072       275.872       277.573    
  16  0.647091     -0.435269      -1.30969       1.30969       273.892       275.202    
  17  0.118896      -2.12951      -6.40752       6.40752       275.789       282.197    
  18  0.910801     -0.934313E-01 -0.281128      0.281128       277.729       278.010    
  19  0.484176     -0.725308      -2.18240       2.18240       275.413       277.596    
  20  0.327343      -1.11675      -3.36021       3.36021       277.612       280.972    
  21  0.674995     -0.393050      -1.18266       1.18266       276.843       278.026    
  22  0.234857      -1.44878      -4.35927       4.35927       278.065       282.424    
  23  0.800837     -0.222098     -0.668276      0.668276       277.353       278.022    
  24  0.619975     -0.478077      -1.43850       1.43850       279.872       281.310    
  25  0.578519     -0.547284      -1.64673       1.64673       277.876       279.523    
  26  0.837214     -0.177675     -0.534612      0.534612       279.661       280.195    
  27  0.935915     -0.662302E-01 -0.199282      0.199282       280.139       280.339    
  28  0.779751     -0.248781     -0.748562      0.748562       277.156       277.904    
  29  0.801557     -0.221199     -0.665571      0.665571       277.598       278.263    
  30  0.827533E-01  -2.49189      -7.49791       7.49791       278.061       285.559    
  31  0.640581     -0.445379      -1.34011       1.34011       281.266       282.606    
  32  0.226382      -1.48553      -4.46985       4.46985       277.280       281.750    
  33  0.198814E-01  -3.91797      -11.7889       11.7889       281.252       293.041    
  34  0.147003      -1.91730      -5.76901       5.76901       282.492       288.261    
  35  0.568592     -0.564592      -1.69881       1.69881       282.302       284.001    
  36  0.650717     -0.429680      -1.29287       1.29287       273.105       274.398    
  37  0.259092      -1.35057      -4.06377       4.06377       281.731       285.795    
  38  0.935898     -0.662490E-01 -0.199338      0.199338       283.403       283.602    
  39  0.702433     -0.353205      -1.06277       1.06277       282.445       283.508    
  40  0.622661     -0.473753      -1.42549       1.42549       284.162       285.587    
  41  0.546960     -0.603380      -1.81553       1.81553       286.521       288.337    
  42  0.883578     -0.123775     -0.372431      0.372431       284.996       285.368    
  43  0.728206E-02  -4.92234      -14.8110       14.8110       283.134       297.945    
  44  0.112001      -2.18925      -6.58728       6.58728       285.029       291.616    
  45  0.689494     -0.371797      -1.11871       1.11871       286.088       287.206    
  46  0.872629     -0.136244     -0.409949      0.409949       284.234       284.644    
  47  0.688489     -0.373256      -1.12310       1.12310       288.929       290.052    
  48  0.947843     -0.535662E-01 -0.161177      0.161177       288.734       288.895    
  49  0.294529      -1.22238      -3.67804       3.67804       282.567       286.245    
  50  0.717675E-01  -2.63432      -7.92648       7.92648       289.044       296.970    
  51  0.738094     -0.303684     -0.913763      0.913763       291.922       292.836    
  52  0.237514      -1.43753      -4.32541       4.32541       291.268       295.593    
  53  0.932770     -0.695962E-01 -0.209410      0.209410       294.889       295.098    
  54  0.973437     -0.269222E-01 -0.810068E-01  0.810068E-01   291.313       291.394    
  55  0.216069      -1.53216      -4.61015       4.61015       290.025       294.635    
  56  0.927621     -0.751319E-01 -0.226066      0.226066       294.926       295.152    
  57  0.882551     -0.124939     -0.375932      0.375932       296.806       297.182    
  58  0.958611     -0.422698E-01 -0.127187      0.127187       294.730       294.857    
  59  0.174241      -1.74732      -5.25754       5.25754       289.360       294.618    
  60  0.165969      -1.79595      -5.40389       5.40389       294.203       299.607    
  61  0.449805     -0.798942      -2.40396       2.40396       297.680       300.084    
  62  0.749166     -0.288795     -0.868962      0.868962       292.428       293.297    
  63  0.564353     -0.572075      -1.72133       1.72133       297.677       299.398    
  64  0.721233     -0.326792     -0.983293      0.983293       278.127       279.110    
loop,thermsimp(1:2)       24   1.73151       2.54115    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    391        304.96          0.88          1.09         23.09          0.06          0.05         25.16
Just calling func    0   0         25.16


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    392        277.40          0.88          1.09         23.12          0.01          0.04         25.13
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3    277.40
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3.00892               442
loop is:       24
neval is:      391
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       24      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    3.00892               442
loop is:       25
neval is:      391


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      442
neval,tstepnext:      391     442

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.756122     -0.279553     -0.841154      0.841154       246.707       247.548    
   2  0.693006     -0.366716      -1.10342       1.10342       251.225       252.328    
   3  0.647780     -0.434203      -1.30648       1.30648       256.866       258.172    
   4  0.895769     -0.110072     -0.331200      0.331200       265.290       265.621    
   5  0.775956     -0.253659     -0.763240      0.763240       264.341       265.104    
   6  0.891264     -0.115114     -0.346370      0.346370       264.230       264.576    
   7  0.553736     -0.591068      -1.77848       1.77848       270.221       272.000    
   8  0.646797     -0.435723      -1.31106       1.31106       269.398       270.709    
   9  0.646048     -0.436881      -1.31454       1.31454       273.626       274.941    
  10  0.160937      -1.82675      -5.49654       5.49654       273.105       278.602    
  11  0.840732     -0.173482     -0.521993      0.521993       273.824       274.346    
  12  0.377447     -0.974325      -2.93167       2.93167       272.126       275.057    
  13  0.214649      -1.53875      -4.62998       4.62998       273.892       278.522    
  14  0.424093     -0.857804      -2.58107       2.58107       268.366       270.947    
  15  0.693510     -0.365990      -1.10124       1.10124       274.154       275.255    
  16  0.252894      -1.37478      -4.13662       4.13662       271.753       275.889    
  17  0.765441     -0.267303     -0.804295      0.804295       275.872       276.677    
  18  0.481029     -0.731828      -2.20201       2.20201       275.413       277.615    
  19  0.211808      -1.55207      -4.67007       4.67007       277.156       281.826    
  20  0.616599E-01  -2.78612      -8.38323       8.38323       277.729       286.112    
  21  0.110259      -2.20492      -6.63444       6.63444       277.353       283.988    
  22  0.475319     -0.743769      -2.23795       2.23795       276.843       279.081    
  23  0.500411E-01  -2.99491      -9.01146       9.01146       277.598       286.609    
  24  0.126445      -2.06795      -6.22230       6.22230       278.127       284.349    
  25  0.693760     -0.365629      -1.10015       1.10015       277.876       278.976    
  26  0.876607E-01  -2.43428      -7.32457       7.32457       279.661       286.985    
  27  0.564718     -0.571429      -1.71939       1.71939       280.139       281.859    
  28  0.572706     -0.557383      -1.67712       1.67712       277.612       279.289    
  29  0.739618     -0.301621     -0.907556      0.907556       279.872       280.779    
  30  0.428028     -0.848566      -2.55327       2.55327       277.280       279.833    
  31  0.864224     -0.145923     -0.439071      0.439071       275.789       276.228    
  32  0.326884      -1.11815      -3.36443       3.36443       278.065       281.429    
  33  0.626295     -0.467933      -1.40797       1.40797       281.266       282.674    
  34  0.576680     -0.550467      -1.65631       1.65631       282.445       284.101    
  35  0.988375     -0.116929E-01 -0.351832E-01  0.351832E-01   283.403       283.438    
  36  0.834431     -0.181006     -0.544632      0.544632       282.302       282.847    
  37  0.944839     -0.567403E-01 -0.170727      0.170727       284.234       284.405    
  38  0.182182      -1.70275      -5.12344       5.12344       284.996       290.119    
  39  0.882984     -0.124449     -0.374456      0.374456       278.061       278.436    
  40  0.756839     -0.278604     -0.838299      0.838299       284.162       285.000    
  41  0.530350     -0.634218      -1.90831       1.90831       281.731       283.640    
  42  0.257866      -1.35531      -4.07803       4.07803       282.567       286.645    
  43  0.575794     -0.552006      -1.66094       1.66094       286.088       287.749    
  44  0.907029     -0.975811E-01 -0.293614      0.293614       282.492       282.786    
  45  0.385513     -0.953180      -2.86805       2.86805       286.521       289.389    
  46  0.352081      -1.04389      -3.14099       3.14099       288.734       291.875    
  47  0.587153     -0.532470      -1.60216       1.60216       288.929       290.531    
  48  0.748916     -0.289129     -0.869967      0.869967       291.313       292.183    
  49  0.152024      -1.88371      -5.66795       5.66795       285.029       290.697    
  50  0.501193     -0.690765      -2.07846       2.07846       291.922       294.001    
  51  0.743551     -0.296318     -0.891597      0.891597       281.252       282.143    
  52  0.336569      -1.08895      -3.27657       3.27657       292.428       295.704    
  53  0.523746     -0.646748      -1.94602       1.94602       289.360       291.306    
  54  0.471323     -0.752211      -2.26335       2.26335       290.025       292.288    
  55  0.131680E-01  -4.32996      -13.0285       13.0285       294.730       307.759    
  56  0.410982     -0.889205      -2.67555       2.67555       294.889       297.564    
  57  0.476445E-01  -3.04399      -9.15913       9.15913       294.926       304.085    
  58  0.734680     -0.308321     -0.927713      0.927713       291.268       292.195    
  59  0.426979     -0.851021      -2.56066       2.56066       289.044       291.604    
  60  0.196810      -1.62552      -4.89106       4.89106       296.806       301.697    
  61  0.317540      -1.14715      -3.45169       3.45169       283.134       286.586    
  62  0.616579     -0.483568      -1.45502       1.45502       297.677       299.132    
  63  0.828245     -0.188447     -0.567021      0.567021       294.203       294.770    
  64  0.996165     -0.384219E-02 -0.115608E-01  0.115608E-01   277.403       277.415    
loop,thermsimp(1:2)       25  0.841154       1.10342    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    393        261.88          0.88          1.09         23.09          0.05          0.05         25.16
Just calling func    0   0         25.15


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    261.88
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3.00892               442
loop is:       25
neval is:      392
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       25      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    3.00892               442
loop is:       26
neval is:      392


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      442
neval,tstepnext:      392     442

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.409890     -0.891867      -2.68356       2.68356       246.707       249.391    
   2  0.389332     -0.943323      -2.83839       2.83839       251.225       254.063    
   3  0.765657     -0.267021     -0.803446      0.803446       256.866       257.669    
   4  0.505025     -0.683148      -2.05554       2.05554       264.230       266.285    
   5  0.681598     -0.383316      -1.15337       1.15337       264.341       265.494    
   6  0.895525     -0.110345     -0.332019      0.332019       265.290       265.622    
   7  0.540074     -0.616050      -1.85365       1.85365       269.398       271.252    
   8  0.125370      -2.07648      -6.24798       6.24798       268.366       274.614    
   9  0.306095      -1.18386      -3.56214       3.56214       270.221       273.783    
  10  0.898677     -0.106831     -0.321448      0.321448       273.824       274.145    
  11  0.355276      -1.03486      -3.11382       3.11382       273.626       276.740    
  12  0.855641     -0.155905     -0.469106      0.469106       272.126       272.595    
  13  0.894333E-01  -2.41426      -7.26433       7.26433       274.154       281.418    
  14  0.291038      -1.23430      -3.71392       3.71392       271.753       275.467    
  15  0.848476E-01  -2.46690      -7.42271       7.42271       275.789       283.212    
  16  0.655469     -0.422404      -1.27098       1.27098       275.872       277.143    
  17  0.181028      -1.70910      -5.14256       5.14256       277.403       282.546    
  18  0.801189     -0.221659     -0.666955      0.666955       275.413       276.080    
  19  0.659702     -0.415967      -1.25161       1.25161       278.061       279.313    
  20  0.500397     -0.692354      -2.08324       2.08324       273.892       275.975    
  21  0.901964     -0.103181     -0.310464      0.310464       273.105       273.416    
  22  0.331186      -1.10508      -3.32509       3.32509       277.876       281.201    
  23  0.572805E-01  -2.85979      -8.60490       8.60490       276.843       285.448    
  24  0.511624     -0.670164      -2.01647       2.01647       277.612       279.628    
  25  0.953295     -0.478312E-01 -0.143920      0.143920       277.280       277.424    
  26  0.454382     -0.788818      -2.37349       2.37349       279.872       282.245    
  27  0.697217E-01  -2.66324      -8.01350       8.01350       278.065       286.078    
  28  0.269239      -1.31216      -3.94818       3.94818       277.156       281.104    
  29  0.855725     -0.155806     -0.468809      0.468809       280.139       280.608    
  30  0.408332E-02  -5.50085      -16.5516       16.5516       281.252       297.803    
  31  0.926366     -0.764862E-01 -0.230141      0.230141       281.266       281.496    
  32  0.356547      -1.03129      -3.10307       3.10307       282.492       285.595    
  33  0.550351     -0.597200      -1.79693       1.79693       282.302       284.099    
  34  0.475063     -0.744308      -2.23957       2.23957       283.403       285.643    
  35  0.420107     -0.867246      -2.60948       2.60948       281.731       284.341    
  36  0.521034     -0.651939      -1.96163       1.96163       277.353       279.315    
  37  0.979034     -0.211889E-01 -0.637558E-01  0.637558E-01   282.445       282.509    
  38  0.599858     -0.511062      -1.53775       1.53775       278.127       279.664    
  39  0.800850     -0.222082     -0.668227      0.668227       284.234       284.902    
  40  0.823189     -0.194570     -0.585445      0.585445       284.162       284.747    
  41  0.709226E-01  -2.64617      -7.96211       7.96211       277.729       285.691    
  42  0.555654     -0.587609      -1.76807       1.76807       283.134       284.902    
  43  0.920379     -0.829696E-01 -0.249649      0.249649       277.598       277.847    
  44  0.904537     -0.100332     -0.301891      0.301891       282.567       282.869    
  45  0.990568     -0.947695E-02 -0.285154E-01  0.285154E-01   279.661       279.689    
  46  0.647203     -0.435096      -1.30917       1.30917       286.088       287.397    
  47  0.634714     -0.454580      -1.36780       1.36780       286.521       287.889    
  48  0.771196     -0.259812     -0.781755      0.781755       284.996       285.777    
  49  0.857464     -0.153776     -0.462702      0.462702       288.929       289.391    
  50  0.816462     -0.202774     -0.610133      0.610133       285.029       285.639    
  51  0.233603      -1.45413      -4.37537       4.37537       289.360       293.736    
  52  0.554523     -0.589647      -1.77420       1.77420       289.044       290.818    
  53  0.217770      -1.52432      -4.58655       4.58655       288.734       293.320    
  54  0.795785     -0.228426     -0.687315      0.687315       291.313       292.000    
  55  0.458481     -0.779836      -2.34647       2.34647       291.268       293.614    
  56  0.725204     -0.321302     -0.966772      0.966772       290.025       290.992    
  57  0.962495     -0.382260E-01 -0.115019      0.115019       291.922       292.037    
  58  0.652668     -0.426687      -1.28387       1.28387       294.203       295.486    
  59  0.562055     -0.576156      -1.73361       1.73361       292.428       294.161    
  60  0.620063     -0.477935      -1.43807       1.43807       294.889       296.327    
  61  0.487741     -0.717971      -2.16032       2.16032       297.677       299.837    
  62  0.561234     -0.577617      -1.73801       1.73801       296.806       298.544    
  63  0.758662     -0.276198     -0.831060      0.831060       294.926       295.757    
  64  0.144869      -1.93192      -5.81301       5.81301       261.877       267.690    
loop,thermsimp(1:2)       26   2.68356       2.83839    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    394        278.24          0.88          1.09         23.14          0.16          0.05         25.32
Just calling func    0   0         25.32


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    278.24
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3.00892               442
loop is:       26
neval is:      393
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       26      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    3.00892               442
loop is:       27
neval is:      393


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      442
neval,tstepnext:      393     442

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.478820     -0.736431      -2.21587       2.21587       246.707       248.923    
   2  0.431280     -0.840999      -2.53050       2.53050       251.225       253.756    
   3  0.231120      -1.46482      -4.40753       4.40753       256.866       261.273    
   4  0.306155      -1.18366      -3.56155       3.56155       264.341       267.902    
   5  0.514107     -0.665324      -2.00191       2.00191       265.290       267.292    
   6  0.784944E-01  -2.54473      -7.65689       7.65689       264.230       271.887    
   7  0.767893     -0.264105     -0.794672      0.794672       261.877       262.671    
   8  0.240450E-02  -6.03041      -18.1451       18.1451       269.398       287.543    
   9  0.185505      -1.68467      -5.06905       5.06905       272.126       277.195    
  10  0.405909     -0.901627      -2.71293       2.71293       273.105       275.818    
  11  0.681143     -0.383983      -1.15538       1.15538       270.221       271.376    
  12  0.529175     -0.636436      -1.91499       1.91499       273.824       275.739    
  13  0.873060     -0.135751     -0.408465      0.408465       268.366       268.774    
  14  0.457661     -0.781625      -2.35185       2.35185       271.753       274.105    
  15  0.564230     -0.572293      -1.72199       1.72199       273.892       275.614    
  16  0.949800     -0.515039E-01 -0.154971      0.154971       275.413       275.568    
  17  0.581003E-01  -2.84558      -8.56215       8.56215       273.626       282.188    
  18  0.180069      -1.71442      -5.15855       5.15855       275.872       281.031    
  19  0.222412      -1.50322      -4.52308       4.52308       277.280       281.803    
  20  0.821703     -0.196377     -0.590883      0.590883       277.598       278.189    
  21  0.948363     -0.530176E-01 -0.159526      0.159526       278.061       278.221    
  22  0.796186     -0.227922     -0.685800      0.685800       277.353       278.039    
  23  0.881546     -0.126078     -0.379358      0.379358       277.612       277.991    
  24  0.702001     -0.353821      -1.06462       1.06462       278.127       279.191    
  25  0.878483     -0.129559     -0.389834      0.389834       279.661       280.051    
  26  0.158251      -1.84358      -5.54718       5.54718       280.139       285.686    
  27  0.759310E-02  -4.88052      -14.6851       14.6851       277.156       291.841    
  28  0.549090     -0.599492      -1.80383       1.80383       277.876       279.680    
  29  0.294083      -1.22389      -3.68260       3.68260       274.154       277.837    
  30  0.358851      -1.02485      -3.08369       3.08369       281.266       284.350    
  31  0.591031E-01  -2.82847      -8.51066       8.51066       279.872       288.382    
  32  0.413139     -0.883972      -2.65980       2.65980       282.445       285.105    
  33  0.564800     -0.571284      -1.71895       1.71895       277.403       279.122    
  34  0.472034     -0.750704      -2.25881       2.25881       282.567       284.826    
  35  0.270343      -1.30806      -3.93586       3.93586       275.789       279.725    
  36  0.704266     -0.350600      -1.05493       1.05493       282.302       283.357    
  37  0.317895E-01  -3.44862      -10.3766       10.3766       281.731       292.108    
  38  0.489641     -0.714083      -2.14862       2.14862       284.162       286.310    
  39  0.558309     -0.582843      -1.75373       1.75373       284.234       285.988    
  40  0.239099      -1.43088      -4.30540       4.30540       283.134       287.440    
  41  0.387399     -0.948301      -2.85336       2.85336       276.843       279.696    
  42  0.434686     -0.833131      -2.50683       2.50683       282.492       284.999    
  43  0.713921     -0.336983      -1.01396       1.01396       285.029       286.043    
  44  0.655374     -0.422550      -1.27142       1.27142       283.403       284.675    
  45  0.739749     -0.301444     -0.907022      0.907022       277.729       278.636    
  46  0.758411     -0.276530     -0.832057      0.832057       284.996       285.828    
  47  0.750796     -0.286621     -0.862421      0.862421       278.065       278.927    
  48  0.557150E-01  -2.88751      -8.68828       8.68828       286.088       294.776    
  49  0.438885     -0.823518      -2.47790       2.47790       286.521       288.999    
  50  0.384409     -0.956048      -2.87667       2.87667       288.929       291.805    
  51  0.163955E-01  -4.11075      -12.3689       12.3689       289.044       301.412    
  52  0.493958     -0.705305      -2.12221       2.12221       290.025       292.147    
  53  0.654549     -0.423809      -1.27521       1.27521       291.313       292.588    
  54  0.779913     -0.248573     -0.747937      0.747937       291.922       292.670    
  55  0.173265      -1.75293      -5.27443       5.27443       288.734       294.008    
  56  0.179445      -1.71789      -5.16899       5.16899       291.268       296.437    
  57  0.278651      -1.27780      -3.84479       3.84479       289.360       293.205    
  58  0.413230E-01  -3.18634      -9.58745       9.58745       292.428       302.015    
  59  0.406979     -0.898993      -2.70500       2.70500       294.203       296.908    
  60  0.860177     -0.150617     -0.453194      0.453194       294.926       295.379    
  61  0.199311      -1.61289      -4.85305       4.85305       294.889       299.742    
  62  0.896296     -0.109485     -0.329432      0.329432       281.252       281.581    
  63  0.893483E-01  -2.41521      -7.26719       7.26719       296.806       304.073    
  64  0.456564     -0.784026      -2.35907       2.35907       278.238       280.597    
loop,thermsimp(1:2)       27   2.21587       2.53050    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    395        310.22          0.88          1.08         23.12          0.03          0.04         25.15
Just calling func    0   0         25.15


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    396        280.57          0.88          1.09         23.10          0.02          0.04         25.13
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3    280.57
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3.00892               442
loop is:       27
neval is:      395
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       27      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    3.00892               442
loop is:       28
neval is:      395


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      442
neval,tstepnext:      395     442

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.382581     -0.960815      -2.89102       2.89102       246.707       249.598    
   2  0.718155     -0.331070     -0.996166      0.996166       251.225       252.221    
   3  0.581515     -0.542118      -1.63119       1.63119       256.866       258.497    
   4  0.230175E-01  -3.77150      -11.3482       11.3482       261.877       273.225    
   5  0.506601     -0.680031      -2.04616       2.04616       265.290       267.336    
   6  0.209297      -1.56400      -4.70597       4.70597       264.341       269.046    
   7  0.757725     -0.277434     -0.834779      0.834779       268.366       269.200    
   8  0.230972      -1.46546      -4.40945       4.40945       270.221       274.631    
   9  0.495080     -0.703037      -2.11538       2.11538       264.230       266.345    
  10  0.947190     -0.542553E-01 -0.163250      0.163250       271.753       271.916    
  11  0.977432     -0.228269E-01 -0.686844E-01  0.686844E-01   275.413       275.482    
  12  0.320616      -1.13751      -3.42268       3.42268       273.892       277.315    
  13  0.252125      -1.37783      -4.14578       4.14578       273.824       277.970    
  14  0.871535     -0.137499     -0.413725      0.413725       273.105       273.519    
  15  0.856468E-02  -4.76011      -14.3228       14.3228       272.126       286.449    
  16  0.352534      -1.04261      -3.13713       3.13713       274.154       277.291    
  17  0.750419     -0.287124     -0.863935      0.863935       277.612       278.476    
  18  0.215691      -1.53391      -4.61542       4.61542       277.353       281.969    
  19  0.833929     -0.181606     -0.546440      0.546440       277.598       278.144    
  20  0.714656E-01  -2.63854      -7.93916       7.93916       278.061       286.000    
  21  0.758349     -0.276612     -0.832305      0.832305       277.729       278.561    
  22  0.571963     -0.558680      -1.68103       1.68103       278.065       279.746    
  23  0.472398     -0.749934      -2.25649       2.25649       277.403       279.660    
  24  0.606854     -0.499467      -1.50286       1.50286       278.127       279.629    
  25  0.247109      -1.39793      -4.20625       4.20625       277.876       282.082    
  26  0.581778     -0.541666      -1.62983       1.62983       276.843       278.473    
  27  0.455447     -0.786476      -2.36645       2.36645       275.789       278.156    
  28  0.606617     -0.499857      -1.50403       1.50403       279.661       281.165    
  29  0.620033     -0.477983      -1.43821       1.43821       278.238       279.676    
  30  0.367527      -1.00096      -3.01181       3.01181       275.872       278.884    
  31  0.611260     -0.492233      -1.48109       1.48109       281.252       282.733    
  32  0.310332      -1.17011      -3.52078       3.52078       277.280       280.801    
  33  0.611387     -0.492025      -1.48047       1.48047       273.626       275.107    
  34  0.584386     -0.537193      -1.61637       1.61637       282.302       283.919    
  35  0.950350     -0.509246E-01 -0.153228      0.153228       281.266       281.419    
  36  0.228570      -1.47591      -4.44091       4.44091       283.403       287.844    
  37  0.879867     -0.127985     -0.385096      0.385096       282.567       282.952    
  38  0.390808E-01  -3.24212      -9.75530       9.75530       282.492       292.247    
  39  0.104244      -2.26102      -6.80323       6.80323       282.445       289.248    
  40  0.922634     -0.805225E-01 -0.242286      0.242286       280.139       280.382    
  41  0.559015     -0.581578      -1.74992       1.74992       284.996       286.746    
  42  0.809074     -0.211865     -0.637487      0.637487       284.234       284.872    
  43  0.840951     -0.173222     -0.521211      0.521211       285.029       285.550    
  44  0.384796     -0.955043      -2.87365       2.87365       284.162       287.035    
  45  0.471744     -0.751318      -2.26066       2.26066       283.134       285.395    
  46  0.750950     -0.286417     -0.861805      0.861805       269.398       270.260    
  47  0.197617      -1.62143      -4.87875       4.87875       279.872       284.750    
  48  0.405005     -0.903855      -2.71963       2.71963       286.521       289.241    
  49  0.526481     -0.641540      -1.93035       1.93035       288.929       290.859    
  50  0.808042     -0.213142     -0.641327      0.641327       277.156       277.797    
  51  0.315225      -1.15447      -3.47371       3.47371       281.731       285.205    
  52  0.233772      -1.45341      -4.37320       4.37320       290.025       294.398    
  53  0.455864E-01  -3.08815      -9.29199       9.29199       291.313       300.605    
  54  0.748722     -0.289387     -0.870744      0.870744       291.922       292.793    
  55  0.237196E-01  -3.74145      -11.2577       11.2577       289.360       300.618    
  56  0.881679     -0.125927     -0.378906      0.378906       288.734       289.113    
  57  0.395054     -0.928733      -2.79449       2.79449       286.088       288.882    
  58  0.725060     -0.321501     -0.967371      0.967371       294.926       295.893    
  59  0.698840     -0.358333      -1.07820       1.07820       291.268       292.346    
  60  0.508334     -0.676617      -2.03589       2.03589       294.203       296.239    
  61  0.944269E-01  -2.35993      -7.10085       7.10085       294.889       301.990    
  62  0.604101     -0.504014      -1.51654       1.51654       289.044       290.560    
  63  0.662995     -0.410988      -1.23663       1.23663       292.428       293.664    
  64  0.715954     -0.334139      -1.00540       1.00540       280.568       281.574    
loop,thermsimp(1:2)       28   2.89102      0.996166    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    397        249.60          0.87          1.10         23.06          0.08          0.05         25.16
Just calling func    0   0         25.15


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    398        251.39          0.87          1.11         23.10          0.26          0.04         25.38
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    249.60
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3.00892               442
loop is:       28
neval is:      397
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       28      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    3.00892               442
loop is:       29
neval is:      397


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      442
neval,tstepnext:      397     442

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.571653     -0.559223      -1.68266       1.68266       246.707       248.390    
   2  0.243540      -1.41247      -4.25002       4.25002       251.225       255.475    
   3  0.374772     -0.981437      -2.95307       2.95307       256.866       259.819    
   4  0.700054     -0.356598      -1.07298       1.07298       264.230       265.303    
   5  0.301581      -1.19872      -3.60684       3.60684       265.290       268.897    
   6  0.531818     -0.631454      -1.90000       1.90000       264.341       266.241    
   7  0.185013      -1.68733      -5.07705       5.07705       268.366       273.443    
   8  0.107050      -2.23446      -6.72333       6.72333       269.398       276.122    
   9  0.979566     -0.206453E-01 -0.621200E-01  0.621200E-01   271.753       271.815    
  10  0.706074     -0.348035      -1.04721       1.04721       261.877       262.924    
  11  0.112110      -2.18827      -6.58435       6.58435       273.105       279.690    
  12  0.212442      -1.54908      -4.66108       4.66108       270.221       274.882    
  13  0.625740     -0.468820      -1.41064       1.41064       273.626       275.037    
  14  0.265918      -1.32457      -3.98552       3.98552       275.413       279.399    
  15  0.369004     -0.996947      -2.99974       2.99974       274.154       277.154    
  16  0.531799     -0.631491      -1.90011       1.90011       273.892       275.792    
  17  0.227318      -1.48140      -4.45743       4.45743       277.156       281.613    
  18  0.512871     -0.667732      -2.00915       2.00915       273.824       275.833    
  19  0.394785     -0.929415      -2.79654       2.79654       277.598       280.394    
  20  0.720084     -0.328388     -0.988095      0.988095       275.789       276.777    
  21  0.185505      -1.68467      -5.06905       5.06905       276.843       281.912    
  22  0.658242     -0.418183      -1.25828       1.25828       277.612       278.870    
  23  0.888593     -0.118116     -0.355402      0.355402       277.729       278.084    
  24  0.773453     -0.256890     -0.772962      0.772962       275.872       276.645    
  25  0.594480E-01  -2.82265      -8.49315       8.49315       278.127       286.620    
  26  0.112908      -2.18118      -6.56301       6.56301       277.403       283.966    
  27  0.940300     -0.615559E-01 -0.185217      0.185217       278.238       278.423    
  28  0.990261     -0.978663E-02 -0.294472E-01  0.294472E-01   278.065       278.094    
  29  0.686451     -0.376220      -1.13202       1.13202       280.139       281.271    
  30  0.558815     -0.581936      -1.75100       1.75100       277.280       279.031    
  31  0.574196     -0.554784      -1.66930       1.66930       279.661       281.330    
  32  0.678960     -0.387193      -1.16503       1.16503       281.266       282.431    
  33  0.306232      -1.18341      -3.56080       3.56080       280.568       284.129    
  34  0.969485     -0.309907E-01 -0.932485E-01  0.932485E-01   277.353       277.447    
  35  0.520627     -0.652722      -1.96399       1.96399       277.876       279.840    
  36  0.870581     -0.138594     -0.417019      0.417019       281.252       281.669    
  37  0.127650      -2.05846      -6.19375       6.19375       282.567       288.761    
  38  0.276190      -1.28667      -3.87148       3.87148       282.302       286.174    
  39  0.842544     -0.171330     -0.515518      0.515518       279.872       280.387    
  40  0.336933      -1.08787      -3.27332       3.27332       284.234       287.507    
  41  0.685284     -0.377921      -1.13714       1.13714       281.731       282.869    
  42  0.555142     -0.588531      -1.77084       1.77084       283.134       284.905    
  43  0.857048     -0.154261     -0.464160      0.464160       285.029       285.493    
  44  0.612111E-01  -2.79343      -8.40521       8.40521       278.061       286.466    
  45  0.672500     -0.396753      -1.19380       1.19380       272.126       273.320    
  46  0.820423E-01  -2.50052      -7.52387       7.52387       284.996       292.520    
  47  0.546679     -0.603893      -1.81707       1.81707       284.162       285.979    
  48  0.624723     -0.470446      -1.41554       1.41554       283.403       284.819    
  49  0.906365     -0.983128E-01 -0.295816      0.295816       286.088       286.384    
  50  0.807763     -0.213487     -0.642365      0.642365       288.734       289.376    
  51  0.347580      -1.05676      -3.17971       3.17971       286.521       289.701    
  52  0.233390      -1.45504      -4.37812       4.37812       282.445       286.823    
  53  0.265609      -1.32573      -3.98902       3.98902       289.044       293.033    
  54  0.277652      -1.28139      -3.85559       3.85559       288.929       292.784    
  55  0.836033     -0.179087     -0.538858      0.538858       282.492       283.031    
  56  0.170063      -1.77159      -5.33058       5.33058       291.268       296.598    
  57  0.798928     -0.224485     -0.675458      0.675458       291.922       292.598    
  58  0.707521E-01  -2.64857      -7.96935       7.96935       292.428       300.397    
  59  0.699192     -0.357830      -1.07668       1.07668       290.025       291.101    
  60  0.190598      -1.65759      -4.98756       4.98756       294.926       299.914    
  61  0.932984     -0.693669E-01 -0.208720      0.208720       294.203       294.411    
  62  0.626920     -0.466936      -1.40497       1.40497       291.313       292.718    
  63  0.849515     -0.163090     -0.490725      0.490725       289.360       289.851    
  64  0.405877     -0.901705      -2.71316       2.71316       249.595       252.308    
loop,thermsimp(1:2)       29   1.68266       4.25002    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    399        272.88          0.88          1.10         23.08          0.03          0.05         25.14
Just calling func    0   0         25.13


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    272.88
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3.00892               442
loop is:       29
neval is:      398
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       29      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    3.00892               442
loop is:       30
neval is:      398


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      442
neval,tstepnext:      398     442

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.218498      -1.52098      -4.57651       4.57651       246.707       251.284    
   2  0.142120      -1.95108      -5.87065       5.87065       249.595       255.466    
   3  0.240947      -1.42318      -4.28223       4.28223       251.225       255.507    
   4  0.622235     -0.474438      -1.42755       1.42755       256.866       258.293    
   5  0.167679      -1.78570      -5.37304       5.37304       261.877       267.250    
   6  0.712985E-01  -2.64088      -7.94621       7.94621       264.230       272.176    
   7  0.861645E-02  -4.75408      -14.3047       14.3047       264.341       278.645    
   8  0.820106     -0.198321     -0.596734      0.596734       265.290       265.887    
   9  0.882469     -0.125032     -0.376211      0.376211       271.753       272.129    
  10  0.530124     -0.634644      -1.90960       1.90960       272.126       274.035    
  11  0.920027E-01  -2.38594      -7.17910       7.17910       268.366       275.545    
  12  0.669458     -0.401287      -1.20744       1.20744       270.221       271.429    
  13  0.348419      -1.05435      -3.17245       3.17245       273.626       276.799    
  14  0.979616     -0.205944E-01 -0.619671E-01  0.619671E-01   273.892       273.954    
  15  0.661083     -0.413875      -1.24532       1.24532       273.824       275.069    
  16  0.535120     -0.625265      -1.88137       1.88137       269.398       271.280    
  17  0.929679E-01  -2.37550      -7.14770       7.14770       275.872       283.020    
  18  0.580221     -0.544346      -1.63790       1.63790       275.789       277.427    
  19  0.652449     -0.427023      -1.28488       1.28488       274.154       275.439    
  20  0.252328      -1.37703      -4.14337       4.14337       277.353       281.497    
  21  0.364859      -1.00824      -3.03373       3.03373       277.729       280.763    
  22  0.205873      -1.58049      -4.75558       4.75558       278.065       282.821    
  23  0.404183E-01  -3.20847      -9.65405       9.65405       278.238       287.892    
  24  0.922242     -0.809474E-01 -0.243564      0.243564       277.612       277.855    
  25  0.164359      -1.80570      -5.43321       5.43321       277.280       282.713    
  26  0.606051     -0.500791      -1.50684       1.50684       275.413       276.920    
  27  0.461849E-01  -3.07510      -9.25275       9.25275       273.105       282.358    
  28  0.761223     -0.272829     -0.820922      0.820922       277.876       278.697    
  29  0.170682      -1.76796      -5.31964       5.31964       279.872       285.191    
  30  0.501713     -0.689726      -2.07533       2.07533       277.598       279.673    
  31  0.892390E-01  -2.41644      -7.27087       7.27087       280.139       287.410    
  32  0.281632E-01  -3.56974      -10.7411       10.7411       279.661       290.402    
  33  0.664381     -0.408899      -1.23035       1.23035       277.156       278.386    
  34  0.124936      -2.07995      -6.25842       6.25842       281.252       287.510    
  35  0.623262     -0.472788      -1.42258       1.42258       276.843       278.266    
  36  0.876206     -0.132154     -0.397642      0.397642       281.266       281.664    
  37  0.744183     -0.295469     -0.889043      0.889043       281.731       282.620    
  38  0.251914      -1.37867      -4.14830       4.14830       282.492       286.640    
  39  0.391818     -0.936959      -2.81924       2.81924       277.403       280.222    
  40  0.131094      -2.03184      -6.11366       6.11366       280.568       286.682    
  41  0.887574     -0.119263     -0.358853      0.358853       283.403       283.762    
  42  0.682509     -0.381980      -1.14935       1.14935       283.134       284.284    
  43  0.184805      -1.68846      -5.08043       5.08043       285.029       290.110    
  44  0.258729      -1.35197      -4.06799       4.06799       284.162       288.230    
  45  0.275506      -1.28915      -3.87894       3.87894       282.302       286.181    
  46  0.718710     -0.330297     -0.993840      0.993840       286.088       287.082    
  47  0.445066     -0.809533      -2.43582       2.43582       278.061       280.497    
  48  0.772965     -0.257522     -0.774864      0.774864       278.127       278.901    
  49  0.992595     -0.743255E-02 -0.223640E-01  0.223640E-01   282.445       282.467    
  50  0.847655E-01  -2.46787      -7.42562       7.42562       284.234       291.660    
  51  0.805100E-01  -2.51937      -7.58060       7.58060       282.567       290.148    
  52  0.218783      -1.51968      -4.57259       4.57259       288.734       293.306    
  53  0.177967      -1.72616      -5.19387       5.19387       286.521       291.715    
  54  0.435468E-02  -5.43650      -16.3580       16.3580       289.360       305.718    
  55  0.189855      -1.66150      -4.99932       4.99932       290.025       295.024    
  56  0.483774     -0.726137      -2.18489       2.18489       284.996       287.181    
  57  0.407968     -0.896566      -2.69770       2.69770       291.922       294.620    
  58  0.895063     -0.110861     -0.333573      0.333573       291.313       291.646    
  59  0.160465      -1.82968      -5.50536       5.50536       288.929       294.434    
  60  0.557179     -0.584868      -1.75982       1.75982       289.044       290.803    
  61  0.992824     -0.720237E-02 -0.216714E-01  0.216714E-01   294.203       294.224    
  62  0.757533     -0.277689     -0.835544      0.835544       291.268       292.103    
  63  0.707064     -0.346634      -1.04299       1.04299       294.926       295.969    
  64  0.940151     -0.617150E-01 -0.185696      0.185696       272.884       273.070    
loop,thermsimp(1:2)       30   4.57651       5.87065    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    400        259.37          0.88          1.09         23.11          0.00          0.04         25.12
Just calling func    0   0         25.12


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    259.37
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3.00892               442
loop is:       30
neval is:      399
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       30      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    3.00892               442
loop is:       31
neval is:      399


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      442
neval,tstepnext:      399     442

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.179824      -1.71578      -5.16265       5.16265       246.707       251.870    
   2  0.422562     -0.861418      -2.59194       2.59194       249.595       252.187    
   3  0.186245      -1.68069      -5.05708       5.05708       251.225       256.282    
   4  0.567236     -0.566979      -1.70600       1.70600       256.866       258.572    
   5  0.464464E-01  -3.06946      -9.23576       9.23576       265.290       274.526    
   6  0.349374      -1.05161      -3.16423       3.16423       261.877       265.041    
   7  0.336208      -1.09002      -3.27980       3.27980       269.398       272.678    
   8  0.631615     -0.459475      -1.38253       1.38253       270.221       271.604    
   9  0.225630E-01  -3.79144      -11.4082       11.4082       271.753       283.161    
  10  0.221391      -1.50782      -4.53693       4.53693       264.230       268.767    
  11  0.635199     -0.453817      -1.36550       1.36550       272.884       274.250    
  12  0.957727     -0.431923E-01 -0.129962      0.129962       273.892       274.022    
  13  0.284413      -1.25733      -3.78320       3.78320       272.126       275.909    
  14  0.814352     -0.205363     -0.617920      0.617920       273.824       274.442    
  15  0.699052     -0.358030      -1.07729       1.07729       274.154       275.231    
  16  0.145269      -1.92917      -5.80472       5.80472       268.366       274.170    
  17  0.397569     -0.922386      -2.77539       2.77539       273.626       276.402    
  18  0.610583     -0.493342      -1.48443       1.48443       275.413       276.898    
  19  0.737372     -0.304663     -0.916707      0.916707       275.789       276.706    
  20  0.230083      -1.46931      -4.42105       4.42105       277.612       282.033    
  21  0.721698     -0.326149     -0.981358      0.981358       276.843       277.824    
  22  0.469765     -0.755524      -2.27331       2.27331       277.156       279.429    
  23  0.148742      -1.90554      -5.73364       5.73364       264.341       270.074    
  24  0.631872     -0.459069      -1.38130       1.38130       277.876       279.257    
  25  0.456921     -0.783245      -2.35672       2.35672       278.127       280.483    
  26  0.631874E-01  -2.76165      -8.30960       8.30960       277.598       285.907    
  27  0.470948     -0.753008      -2.26574       2.26574       277.403       279.669    
  28  0.313695      -1.15933      -3.48835       3.48835       278.061       281.550    
  29  0.856516     -0.154883     -0.466030      0.466030       277.729       278.195    
  30  0.487159     -0.719166      -2.16391       2.16391       277.353       279.517    
  31  0.383726     -0.957827      -2.88203       2.88203       281.266       284.148    
  32  0.242248      -1.41779      -4.26604       4.26604       273.105       277.372    
  33  0.760305     -0.274035     -0.824550      0.824550       282.445       283.270    
  34  0.524314     -0.645664      -1.94275       1.94275       281.731       283.674    
  35  0.759572     -0.275001     -0.827456      0.827456       277.280       278.107    
  36  0.784019     -0.243322     -0.732138      0.732138       278.065       278.797    
  37  0.430930     -0.841810      -2.53294       2.53294       275.872       278.405    
  38  0.670659     -0.399494      -1.20205       1.20205       283.403       284.605    
  39  0.458005     -0.780876      -2.34960       2.34960       283.134       285.484    
  40  0.413739     -0.882521      -2.65544       2.65544       279.872       282.527    
  41  0.388661     -0.945048      -2.84358       2.84358       282.302       285.146    
  42  0.753750     -0.282694     -0.850604      0.850604       282.492       283.343    
  43  0.505767     -0.681679      -2.05112       2.05112       280.568       282.619    
  44  0.759664     -0.274878     -0.827088      0.827088       286.088       286.915    
  45  0.468968     -0.757221      -2.27842       2.27842       284.996       287.274    
  46  0.740796     -0.300031     -0.902769      0.902769       280.139       281.042    
  47  0.737223     -0.304865     -0.917315      0.917315       281.252       282.169    
  48  0.584325     -0.537298      -1.61669       1.61669       278.238       279.855    
  49  0.850800     -0.161578     -0.486176      0.486176       284.162       284.648    
  50  0.181706      -1.70536      -5.13131       5.13131       285.029       290.161    
  51  0.801855E-01  -2.52341      -7.59276       7.59276       282.567       290.160    
  52  0.989218     -0.108406E-01 -0.326187E-01  0.326187E-01   279.661       279.693    
  53  0.214049      -1.54155      -4.63840       4.63840       289.044       293.682    
  54  0.522539     -0.649055      -1.95296       1.95296       291.313       293.266    
  55  0.964020     -0.366433E-01 -0.110257      0.110257       284.234       284.344    
  56  0.559622     -0.580494      -1.74666       1.74666       286.521       288.268    
  57  0.944229     -0.573866E-01 -0.172672      0.172672       291.268       291.440    
  58  0.212625      -1.54823      -4.65850       4.65850       288.734       293.392    
  59  0.735854     -0.306724     -0.922908      0.922908       294.203       295.126    
  60  0.693280E-01  -2.66891      -8.03053       8.03053       288.929       296.959    
  61  0.208371      -1.56843      -4.71930       4.71930       291.922       296.641    
  62  0.396847     -0.924205      -2.78086       2.78086       290.025       292.806    
  63  0.835639     -0.179558     -0.540277      0.540277       294.926       295.466    
  64  0.527941     -0.638770      -1.92201       1.92201       259.374       261.296    
loop,thermsimp(1:2)       31   5.16265       2.59194    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    401        267.99          0.88          1.09         23.10          0.02          0.04         25.12
Just calling func    0   0         25.12


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  400    267.99        4.797     -1.302      4.177     -100.0     0.1218    
                      -1.291      2.359     -100.0      2.479     0.4210    
                       1.313    -0.4869      2.400      0.000      0.000    
                     -0.5709      0.000      0.000      0.000     -1.221    

                      -2.500     0.1106E+05 0.1639E+05 -1308.     -2333.    
                      -2.000     -7.986     -2.045     -4.391     0.8051E-01
                      -13.73     -2.078      1359.      0.000      3354.    

                       4764.      3323.      5073.      5329.      2500.    
                       4298.     0.1859     0.5115E-01  0.000     0.3140E-01
                      0.2121    -0.2302E-01 0.2128     0.8237E-01-0.1604    

                      -1.433    -0.7191      0.000     0.3975     0.1617    
                      0.8541E-01 0.2006     0.2450     0.2516     0.1410    
                      0.1090     0.1049    -0.2592    -0.3984      0.000    

                      -2.238     -8.188      5.949     -1.056      0.000    
                       0.000      9.176      9.040     -4674.     -4.000    
                      0.2756    -0.4237E-01  8.914      8.079    -0.1109E+05

                      -4.000     0.4018      1.456      9.466      9.292    
                      -6102.     -4.000     0.3566     0.8365      9.558    
                       9.082     -1863.     -2.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    267.99
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3.00892               442
loop is:       31
neval is:      400
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       31      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    3.00892               442
loop is:       32
neval is:      400


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      442
neval,tstepnext:      400     442

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.574970E-01  -2.85602      -8.59355       8.59355       246.707       255.301    
   2  0.695439     -0.363212      -1.09288       1.09288       249.595       250.688    
   3  0.338668      -1.08273      -3.25787       3.25787       251.225       254.483    
   4  0.494821     -0.703559      -2.11696       2.11696       256.866       258.983    
   5  0.433638E-02  -5.44072      -16.3707       16.3707       259.374       275.745    
   6  0.270974      -1.30573      -3.92885       3.92885       261.877       265.805    
   7  0.926362E-01  -2.37907      -7.15845       7.15845       264.230       271.388    
   8  0.437858     -0.825861      -2.48495       2.48495       264.341       266.825    
   9  0.297746      -1.21151      -3.64535       3.64535       270.221       273.866    
  10  0.948309     -0.530750E-01 -0.159699      0.159699       269.398       269.558    
  11  0.845139     -0.168254     -0.506264      0.506264       273.892       274.398    
  12  0.930128     -0.724325E-01 -0.217944      0.217944       268.366       268.584    
  13  0.921850     -0.813732E-01 -0.244846      0.244846       272.884       273.129    
  14  0.447950     -0.803074      -2.41639       2.41639       273.824       276.240    
  15  0.712740     -0.338638      -1.01894       1.01894       265.290       266.309    
  16  0.574809     -0.553717      -1.66609       1.66609       274.154       275.820    
  17  0.136104      -1.99433      -6.00079       6.00079       272.126       278.127    
  18  0.340340      -1.07781      -3.24305       3.24305       273.626       276.869    
  19  0.149160      -1.90274      -5.72520       5.72520       275.789       281.514    
  20  0.433234E-01  -3.13906      -9.44520       9.44520       275.413       284.858    
  21  0.909134     -0.952630E-01 -0.286639      0.286639       273.105       273.392    
  22  0.619739     -0.478456      -1.43964       1.43964       276.843       278.283    
  23  0.726693     -0.319251     -0.960601      0.960601       277.280       278.241    
  24  0.962860     -0.378471E-01 -0.113879      0.113879       277.729       277.843    
  25  0.615108     -0.485958      -1.46221       1.46221       275.872       277.335    
  26  0.500401     -0.692346      -2.08322       2.08322       278.065       280.148    
  27  0.402080     -0.911104      -2.74144       2.74144       277.876       280.617    
  28  0.749737     -0.288033     -0.866668      0.866668       277.156       278.022    
  29  0.926553     -0.762839E-01 -0.229533      0.229533       277.353       277.583    
  30  0.519037     -0.655779      -1.97319       1.97319       277.403       279.376    
  31  0.498178E-01  -2.99938      -9.02492       9.02492       279.661       288.686    
  32  0.473692     -0.747197      -2.24826       2.24826       278.238       280.486    
  33  0.574927E-02  -5.15868      -15.5221       15.5221       278.127       293.649    
  34  0.349575      -1.05104      -3.16249       3.16249       280.139       283.302    
  35  0.661333     -0.413498      -1.24418       1.24418       278.061       279.305    
  36  0.314247E-01  -3.46016      -10.4114       10.4114       277.612       288.023    
  37  0.318841      -1.14306      -3.43939       3.43939       281.252       284.691    
  38  0.111349E-01  -4.49767      -13.5332       13.5332       279.872       293.405    
  39  0.845234E-02  -4.77331      -14.3625       14.3625       280.568       294.931    
  40  0.704975E-01  -2.65218      -7.98020       7.98020       271.753       279.733    
  41  0.126423      -2.06812      -6.22282       6.22282       282.445       288.668    
  42  0.120140      -2.11910      -6.37620       6.37620       282.492       288.868    
  43  0.664865     -0.408172      -1.22816       1.22816       281.731       282.960    
  44  0.829336     -0.187130     -0.563059      0.563059       281.266       281.829    
  45  0.656735     -0.420475      -1.26518       1.26518       284.234       285.499    
  46  0.955374     -0.456526E-01 -0.137365      0.137365       283.403       283.540    
  47  0.220157      -1.51341      -4.55375       4.55375       284.162       288.715    
  48  0.151230      -1.88895      -5.68371       5.68371       282.302       287.986    
  49  0.127393      -2.06048      -6.19982       6.19982       283.134       289.334    
  50  0.206727      -1.57636      -4.74314       4.74314       277.598       282.341    
  51  0.637521     -0.450168      -1.35452       1.35452       286.088       287.442    
  52  0.432940     -0.837156      -2.51894       2.51894       284.996       287.515    
  53  0.429465     -0.845215      -2.54319       2.54319       286.521       289.064    
  54  0.989331E-01  -2.31331      -6.96058       6.96058       282.567       289.528    
  55  0.158609      -1.84131      -5.54037       5.54037       285.029       290.570    
  56  0.811960     -0.208304     -0.626772      0.626772       291.268       291.895    
  57  0.112024      -2.18904      -6.58665       6.58665       290.025       296.611    
  58  0.922858     -0.802799E-01 -0.241556      0.241556       291.313       291.554    
  59  0.738003     -0.303807     -0.914132      0.914132       288.734       289.648    
  60  0.896667     -0.109070     -0.328184      0.328184       289.044       289.372    
  61  0.736055     -0.306450     -0.922086      0.922086       294.203       295.125    
  62  0.607864     -0.497804      -1.49785       1.49785       294.926       296.424    
  63  0.974093     -0.262480E-01 -0.789783E-01  0.789783E-01   291.922       292.001    
  64  0.624292     -0.471137      -1.41762       1.41762       267.993       269.410    
loop,thermsimp(1:2)       32   8.59355       1.09288    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    402        251.96          0.84          1.08         23.08          0.09          0.04         25.12
Just calling func    0   0         25.13


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    251.96
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3.00892               442
loop is:       32
neval is:      401
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       32      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    3.00892               442
loop is:       33
neval is:      401


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      442
neval,tstepnext:      401     442

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.806752     -0.214739     -0.646133      0.646133       249.595       250.241    
   2  0.549594     -0.598576      -1.80107       1.80107       251.225       253.026    
   3  0.631143     -0.460223      -1.38478       1.38478       246.707       248.092    
   4  0.268455      -1.31507      -3.95695       3.95695       256.866       260.823    
   5  0.513519     -0.666468      -2.00535       2.00535       261.877       263.882    
   6  0.886725     -0.120220     -0.361733      0.361733       265.290       265.652    
   7  0.568618     -0.564546      -1.69868       1.69868       264.341       266.039    
   8  0.443178     -0.813783      -2.44861       2.44861       268.366       270.814    
   9  0.898491     -0.107039     -0.322071      0.322071       267.993       268.315    
  10  0.235118      -1.44767      -4.35592       4.35592       269.398       273.754    
  11  0.509444     -0.674434      -2.02932       2.02932       264.230       266.259    
  12  0.223921      -1.49646      -4.50274       4.50274       272.884       277.387    
  13  0.188995      -1.66603      -5.01296       5.01296       273.105       278.118    
  14  0.969568     -0.309049E-01 -0.929903E-01  0.929903E-01   270.221       270.314    
  15  0.287265      -1.24735      -3.75318       3.75318       273.892       277.645    
  16  0.559573E-01  -2.88317      -8.67523       8.67523       259.374       268.049    
  17  0.668393     -0.402878      -1.21223       1.21223       274.154       275.366    
  18  0.488393     -0.716635      -2.15630       2.15630       273.824       275.980    
  19  0.605591     -0.501551      -1.50913       1.50913       273.626       275.135    
  20  0.490783     -0.711753      -2.14161       2.14161       275.872       278.014    
  21  0.313180      -1.16098      -3.49329       3.49329       277.353       280.847    
  22  0.200234      -1.60827      -4.83915       4.83915       277.729       282.568    
  23  0.575811     -0.551975      -1.66085       1.66085       277.156       278.816    
  24  0.856965     -0.154358     -0.464451      0.464451       272.126       272.590    
  25  0.310774      -1.16869      -3.51649       3.51649       277.280       280.797    
  26  0.836513     -0.178513     -0.537132      0.537132       276.843       277.380    
  27  0.286335      -1.25059      -3.76294       3.76294       278.061       281.824    
  28  0.240507      -1.42500      -4.28773       4.28773       277.403       281.691    
  29  0.103511E-01  -4.57066      -13.7528       13.7528       271.753       285.506    
  30  0.516897     -0.659912      -1.98562       1.98562       278.065       280.051    
  31  0.237615      -1.43710      -4.32413       4.32413       278.238       282.562    
  32  0.602330     -0.506950      -1.52537       1.52537       277.876       279.401    
  33  0.677792     -0.388915      -1.17022       1.17022       275.789       276.959    
  34  0.965031     -0.355954E-01 -0.107104      0.107104       281.266       281.373    
  35  0.851769     -0.160440     -0.482752      0.482752       277.598       278.080    
  36  0.998637     -0.136415E-02 -0.410462E-02  0.410462E-02   281.731       281.736    
  37  0.690071E-01  -2.67355      -8.04450       8.04450       280.139       288.184    
  38  0.865316E-02  -4.74983      -14.2919       14.2919       283.403       297.695    
  39  0.657551     -0.419234      -1.26144       1.26144       281.252       282.513    
  40  0.249918      -1.38662      -4.17224       4.17224       275.413       279.585    
  41  0.762839     -0.270708     -0.814540      0.814540       284.234       285.049    
  42  0.875176     -0.133331     -0.401182      0.401182       286.088       286.489    
  43  0.805569     -0.216207     -0.650550      0.650550       284.996       285.646    
  44  0.308797      -1.17507      -3.53570       3.53570       282.302       285.838    
  45  0.255763      -1.36350      -4.10268       4.10268       277.612       281.714    
  46  0.218508      -1.52093      -4.57637       4.57637       282.445       287.021    
  47  0.518593     -0.656637      -1.97577       1.97577       279.661       281.637    
  48  0.856838     -0.154506     -0.464897      0.464897       284.162       284.627    
  49  0.300810      -1.20128      -3.61455       3.61455       282.492       286.106    
  50  0.310312      -1.17018      -3.52098       3.52098       286.521       290.042    
  51  0.503825     -0.685526      -2.06269       2.06269       283.134       285.197    
  52  0.940514     -0.613291E-01 -0.184535      0.184535       289.044       289.228    
  53  0.778953     -0.249804     -0.751642      0.751642       282.567       283.319    
  54  0.586433     -0.533697      -1.60585       1.60585       288.734       290.340    
  55  0.866496     -0.143298     -0.431172      0.431172       285.029       285.460    
  56  0.371870E-01  -3.29180      -9.90476       9.90476       291.313       301.218    
  57  0.592656     -0.523141      -1.57409       1.57409       291.268       292.842    
  58  0.337285      -1.08683      -3.27018       3.27018       291.922       295.192    
  59  0.277582      -1.28164      -3.85635       3.85635       279.872       283.728    
  60  0.690983E-01  -2.67223      -8.04052       8.04052       278.127       286.167    
  61  0.688060     -0.373879      -1.12497       1.12497       280.568       281.693    
  62  0.279054      -1.27635      -3.84044       3.84044       294.203       298.043    
  63  0.927849     -0.748862E-01 -0.225327      0.225327       294.926       295.151    
  64  0.360885      -1.01920      -3.06668       3.06668       251.965       255.031    
loop,thermsimp(1:2)       33  0.646133       1.80107    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    403        273.82          0.88          1.09         23.12          0.00          0.04         25.13
Just calling func    0   0         25.13


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    273.82
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3.00892               442
loop is:       33
neval is:      402
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       33      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    3.00892               442
loop is:       34
neval is:      402


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      442
neval,tstepnext:      402     442

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.375893     -0.978451      -2.94408       2.94408       246.707       249.651    
   2  0.356800      -1.03058      -3.10094       3.10094       249.595       252.696    
   3  0.686180     -0.376616      -1.13321       1.13321       251.225       252.358    
   4  0.443986     -0.811963      -2.44313       2.44313       251.965       254.408    
   5  0.837544     -0.177281     -0.533426      0.533426       256.866       257.399    
   6  0.902394     -0.102704     -0.309028      0.309028       261.877       262.186    
   7  0.509658E-01  -2.97660      -8.95636       8.95636       265.290       274.247    
   8  0.662569     -0.411631      -1.23857       1.23857       264.341       265.579    
   9  0.226311      -1.48585      -4.47080       4.47080       264.230       268.701    
  10  0.336196      -1.09006      -3.27991       3.27991       259.374       262.654    
  11  0.122038      -2.10342      -6.32903       6.32903       267.993       274.322    
  12  0.323275      -1.12925      -3.39783       3.39783       270.221       273.619    
  13  0.326513      -1.11929      -3.36785       3.36785       268.366       271.734    
  14  0.904434     -0.100446     -0.302234      0.302234       272.126       272.428    
  15  0.856476     -0.154928     -0.466168      0.466168       269.398       269.865    
  16  0.873700     -0.135019     -0.406261      0.406261       273.626       274.032    
  17  0.989627     -0.104267E-01 -0.313732E-01  0.313732E-01   274.154       274.185    
  18  0.546745     -0.603772      -1.81670       1.81670       273.824       275.641    
  19  0.731718     -0.312360     -0.939868      0.939868       275.789       276.729    
  20  0.859154     -0.151807     -0.456775      0.456775       276.843       277.300    
  21  0.419381     -0.868976      -2.61468       2.61468       272.884       275.499    
  22  0.587067     -0.532617      -1.60260       1.60260       273.892       275.494    
  23  0.460289E-01  -3.07849      -9.26293       9.26293       275.872       285.135    
  24  0.522902     -0.648362      -1.95087       1.95087       277.598       279.548    
  25  0.398671     -0.919618      -2.76706       2.76706       273.105       275.873    
  26  0.881302     -0.126355     -0.380192      0.380192       277.156       277.536    
  27  0.226039      -1.48705      -4.47441       4.47441       277.876       282.350    
  28  0.124144      -2.08631      -6.27755       6.27755       275.413       281.691    
  29  0.542680     -0.611235      -1.83916       1.83916       278.065       279.904    
  30  0.167496      -1.78679      -5.37632       5.37632       277.280       282.656    
  31  0.619825     -0.478318      -1.43922       1.43922       277.353       278.793    
  32  0.169564      -1.77452      -5.33941       5.33941       281.266       286.606    
  33  0.781291     -0.246807     -0.742624      0.742624       279.661       280.403    
  34  0.486264     -0.721004      -2.16945       2.16945       277.403       279.573    
  35  0.895366     -0.110522     -0.332553      0.332553       280.568       280.901    
  36  0.321503      -1.13475      -3.41437       3.41437       277.612       281.026    
  37  0.607862E-01  -2.80039      -8.42617       8.42617       281.731       290.158    
  38  0.365124      -1.00752      -3.03154       3.03154       278.061       281.093    
  39  0.110107      -2.20630      -6.63860       6.63860       281.252       287.890    
  40  0.905082     -0.997294E-01 -0.300078      0.300078       278.238       278.538    
  41  0.960140     -0.406759E-01 -0.122391      0.122391       277.729       277.851    
  42  0.320200      -1.13881      -3.42659       3.42659       282.567       285.994    
  43  0.396920     -0.924021      -2.78031       2.78031       279.872       282.652    
  44  0.674668     -0.393534      -1.18411       1.18411       284.162       285.346    
  45  0.894300     -0.111715     -0.336141      0.336141       284.234       284.570    
  46  0.875669     -0.132767     -0.399487      0.399487       283.134       283.534    
  47  0.881286     -0.126374     -0.380248      0.380248       285.029       285.409    
  48  0.779885     -0.248609     -0.748046      0.748046       271.753       272.501    
  49  0.691264     -0.369233      -1.11099       1.11099       284.996       286.107    
  50  0.406618     -0.899882      -2.70768       2.70768       282.302       285.010    
  51  0.225318      -1.49024      -4.48402       4.48402       282.492       286.976    
  52  0.172220      -1.75898      -5.29265       5.29265       278.127       283.419    
  53  0.479523     -0.734964      -2.21145       2.21145       286.088       288.299    
  54  0.313312      -1.16056      -3.49202       3.49202       282.445       285.937    
  55  0.389868     -0.941947      -2.83425       2.83425       280.139       282.974    
  56  0.510295     -0.672766      -2.02430       2.02430       289.044       291.068    
  57  0.782049     -0.245838     -0.739707      0.739707       286.521       287.261    
  58  0.193896      -1.64043      -4.93593       4.93593       288.734       293.670    
  59  0.560612     -0.578727      -1.74134       1.74134       291.268       293.009    
  60  0.127407      -2.06037      -6.19949       6.19949       294.926       301.125    
  61  0.898287     -0.107266     -0.322754      0.322754       291.922       292.245    
  62  0.680859     -0.384400      -1.15663       1.15663       283.403       284.560    
  63  0.535951     -0.623712      -1.87670       1.87670       294.203       296.079    
  64  0.109035      -2.21609      -6.66804       6.66804       273.815       280.483    
loop,thermsimp(1:2)       34   2.94408       3.10094    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    404        301.43          0.86          1.08         23.10          0.04          0.04         25.12
Just calling func    0   0         25.12


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    405        273.67          0.88          1.09         23.12          0.00          0.04         25.12
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3    273.67
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3.00892               442
loop is:       34
neval is:      404
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       34      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    3.00892               442
loop is:       35
neval is:      404


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      442
neval,tstepnext:      404     442

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.478411     -0.737285      -2.21843       2.21843       246.707       248.926    
   2  0.380700     -0.965745      -2.90585       2.90585       251.225       254.131    
   3  0.821138     -0.197064     -0.592951      0.592951       249.595       250.188    
   4  0.728654     -0.316557     -0.952496      0.952496       251.965       252.917    
   5  0.670900     -0.399135      -1.20097       1.20097       256.866       258.067    
   6  0.175262      -1.74147      -5.23996       5.23996       261.877       267.116    
   7  0.709150     -0.343688      -1.03413       1.03413       259.374       260.408    
   8  0.247481      -1.39642      -4.20172       4.20172       264.341       268.542    
   9  0.231597      -1.46276      -4.40133       4.40133       264.230       268.631    
  10  0.764757     -0.268198     -0.806986      0.806986       269.398       270.205    
  11  0.798540     -0.224970     -0.676916      0.676916       268.366       269.043    
  12  0.903782     -0.101167     -0.304405      0.304405       272.126       272.430    
  13  0.136634      -1.99045      -5.98911       5.98911       271.753       277.742    
  14  0.141955      -1.95225      -5.87417       5.87417       270.221       276.095    
  15  0.658650     -0.417563      -1.25642       1.25642       273.626       274.883    
  16  0.265370      -1.32663      -3.99173       3.99173       274.154       278.146    
  17  0.439277E-01  -3.12521      -9.40352       9.40352       265.290       274.694    
  18  0.451732     -0.794667      -2.39109       2.39109       267.993       270.384    
  19  0.475868     -0.742615      -2.23447       2.23447       273.892       276.126    
  20  0.336185      -1.09009      -3.28001       3.28001       272.884       276.164    
  21  0.519277     -0.655317      -1.97180       1.97180       273.824       275.796    
  22  0.455030     -0.787393      -2.36920       2.36920       273.105       275.475    
  23  0.272148E-01  -3.60399      -10.8441       10.8441       275.789       286.633    
  24  0.125510      -2.07537      -6.24463       6.24463       276.843       283.088    
  25  0.687868     -0.374159      -1.12582       1.12582       277.156       278.281    
  26  0.271894      -1.30234      -3.91865       3.91865       277.729       281.648    
  27  0.641335     -0.444204      -1.33658       1.33658       278.238       279.575    
  28  0.858838E-01  -2.45476      -7.38618       7.38618       277.353       284.740    
  29  0.579605     -0.545408      -1.64109       1.64109       277.598       279.239    
  30  0.249942      -1.38653      -4.17196       4.17196       277.403       281.575    
  31  0.938016     -0.639885E-01 -0.192537      0.192537       278.065       278.257    
  32  0.453695     -0.790330      -2.37804       2.37804       279.661       282.039    
  33  0.319751      -1.14021      -3.43081       3.43081       273.815       277.246    
  34  0.346149      -1.06089      -3.19213       3.19213       280.568       283.760    
  35  0.870951     -0.138169     -0.415741      0.415741       277.612       278.027    
  36  0.187313      -1.67497      -5.03987       5.03987       278.061       283.101    
  37  0.984950     -0.151645E-01 -0.456290E-01  0.456290E-01   275.413       275.459    
  38  0.524062     -0.646145      -1.94420       1.94420       277.876       279.820    
  39  0.432392     -0.838423      -2.52275       2.52275       279.872       282.394    
  40  0.687254     -0.375052      -1.12850       1.12850       277.280       278.409    
  41  0.869131     -0.140262     -0.422037      0.422037       280.139       280.561    
  42  0.350749      -1.04769      -3.15241       3.15241       278.127       281.279    
  43  0.663152E-01  -2.71334      -8.16422       8.16422       283.134       291.299    
  44  0.306857      -1.18137      -3.55466       3.55466       283.403       286.958    
  45  0.925728     -0.771751E-01 -0.232214      0.232214       284.234       284.466    
  46  0.649899     -0.430939      -1.29666       1.29666       282.302       283.599    
  47  0.492368     -0.708529      -2.13191       2.13191       275.872       278.004    
  48  0.104223      -2.26122      -6.80384       6.80384       284.162       290.966    
  49  0.345103      -1.06391      -3.20123       3.20123       285.029       288.230    
  50  0.425380     -0.854773      -2.57195       2.57195       282.445       285.017    
  51  0.922590     -0.805699E-01 -0.242429      0.242429       282.567       282.810    
  52  0.209663      -1.56226      -4.70071       4.70071       284.996       289.696    
  53  0.402772     -0.909384      -2.73627       2.73627       281.266       284.002    
  54  0.246006      -1.40240      -4.21971       4.21971       282.492       286.712    
  55  0.811871     -0.208414     -0.627101      0.627101       286.521       287.148    
  56  0.929927     -0.726495E-01 -0.218597      0.218597       281.252       281.470    
  57  0.407345     -0.898096      -2.70230       2.70230       286.088       288.790    
  58  0.870102     -0.139145     -0.418677      0.418677       281.731       282.150    
  59  0.987510     -0.125691E-01 -0.378193E-01  0.378193E-01   289.044       289.081    
  60  0.263762E-01  -3.63529      -10.9383       10.9383       291.922       302.860    
  61  0.303836      -1.19127      -3.58444       3.58444       291.268       294.852    
  62  0.494574     -0.704059      -2.11846       2.11846       288.734       290.852    
  63  0.940738     -0.610903E-01 -0.183816      0.183816       294.203       294.386    
  64  0.234997      -1.44818      -4.35747       4.35747       273.674       278.032    
loop,thermsimp(1:2)       35   2.21843       2.90585    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    406        254.34          0.88          1.09         23.09          0.05          0.05         25.16
Just calling func    0   0         25.15


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    254.34
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3.00892               442
loop is:       35
neval is:      405
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       35      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    3.00892               442
loop is:       36
neval is:      405


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      442
neval,tstepnext:      405     442

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.943705     -0.579419E-01 -0.174343      0.174343       246.707       246.882    
   2  0.628336     -0.464680      -1.39819       1.39819       249.595       250.993    
   3  0.261321      -1.34200      -4.03799       4.03799       251.965       256.003    
   4  0.256100      -1.36219      -4.09872       4.09872       251.225       255.324    
   5  0.318070      -1.14548      -3.44667       3.44667       256.866       260.313    
   6  0.895943     -0.109878     -0.330616      0.330616       259.374       259.705    
   7  0.856491     -0.154912     -0.466118      0.466118       261.877       262.343    
   8  0.269953      -1.30951      -3.94021       3.94021       264.341       268.281    
   9  0.663616     -0.410051      -1.23381       1.23381       264.230       265.464    
  10  0.249338E-01  -3.69153      -11.1075       11.1075       268.366       279.473    
  11  0.362852      -1.01376      -3.05033       3.05033       269.398       272.449    
  12  0.868529E-02  -4.74612      -14.2807       14.2807       267.993       282.273    
  13  0.705785     -0.348444      -1.04844       1.04844       272.126       273.174    
  14  0.527358     -0.639875      -1.92534       1.92534       265.290       267.216    
  15  0.831399     -0.184645     -0.555583      0.555583       273.626       274.182    
  16  0.594963     -0.519255      -1.56240       1.56240       275.413       276.976    
  17  0.501981     -0.689193      -2.07373       2.07373       273.105       275.179    
  18  0.594311     -0.520353      -1.56570       1.56570       273.824       275.390    
  19  0.618124     -0.481066      -1.44749       1.44749       270.221       271.669    
  20  0.959578E-01  -2.34385      -7.05246       7.05246       273.892       280.944    
  21  0.776845     -0.252514     -0.759797      0.759797       272.884       273.644    
  22  0.458742     -0.779266      -2.34475       2.34475       273.815       276.160    
  23  0.645084     -0.438374      -1.31903       1.31903       271.753       273.072    
  24  0.545194     -0.606614      -1.82525       1.82525       275.872       277.698    
  25  0.618072     -0.481151      -1.44775       1.44775       277.612       279.059    
  26  0.390168     -0.941179      -2.83193       2.83193       273.674       276.506    
  27  0.122318      -2.10113      -6.32215       6.32215       274.154       280.476    
  28  0.823049     -0.194740     -0.585956      0.585956       278.065       278.651    
  29  0.817844E-01  -2.50367      -7.53335       7.53335       277.156       284.689    
  30  0.189400      -1.66389      -5.00652       5.00652       277.280       282.287    
  31  0.257378      -1.35721      -4.08374       4.08374       277.598       281.681    
  32  0.854384     -0.157375     -0.473530      0.473530       278.238       278.712    
  33  0.128350      -2.05300      -6.17731       6.17731       277.876       284.053    
  34  0.410790     -0.889673      -2.67696       2.67696       280.139       282.816    
  35  0.645584     -0.437599      -1.31670       1.31670       278.127       279.443    
  36  0.309517      -1.17274      -3.52869       3.52869       281.252       284.780    
  37  0.568550     -0.564667      -1.69904       1.69904       277.403       279.102    
  38  0.702184     -0.353560      -1.06384       1.06384       277.729       278.793    
  39  0.939991     -0.618850E-01 -0.186207      0.186207       279.661       279.847    
  40  0.944105     -0.575180E-01 -0.173067      0.173067       281.731       281.904    
  41  0.202943      -1.59483      -4.79873       4.79873       279.872       284.670    
  42  0.948631E-02  -4.65791      -14.0153       14.0153       282.567       296.582    
  43  0.568674     -0.564449      -1.69838       1.69838       276.843       278.541    
  44  0.216733      -1.52909      -4.60091       4.60091       278.061       282.662    
  45  0.385755     -0.952553      -2.86616       2.86616       282.302       285.168    
  46  0.894850E-01  -2.41368      -7.26259       7.26259       280.568       287.831    
  47  0.136648      -1.99035      -5.98881       5.98881       281.266       287.255    
  48  0.473765     -0.747044      -2.24780       2.24780       284.234       286.482    
  49  0.208114E-01  -3.87225      -11.6513       11.6513       277.353       289.005    
  50  0.158159      -1.84415      -5.54891       5.54891       282.445       287.994    
  51  0.112432      -2.18541      -6.57572       6.57572       275.789       282.365    
  52  0.135630      -1.99782      -6.01130       6.01130       282.492       288.503    
  53  0.976001E-01  -2.32688      -7.00139       7.00139       283.403       290.405    
  54  0.914947     -0.888887E-01 -0.267459      0.267459       286.521       286.788    
  55  0.832290     -0.183575     -0.552363      0.552363       285.029       285.582    
  56  0.592436     -0.523513      -1.57521       1.57521       286.088       287.663    
  57  0.938858     -0.630909E-01 -0.189836      0.189836       289.044       289.233    
  58  0.390466     -0.940415      -2.82964       2.82964       284.996       287.825    
  59  0.599449     -0.511744      -1.53980       1.53980       288.734       290.273    
  60  0.225097      -1.49123      -4.48699       4.48699       284.162       288.649    
  61  0.178203      -1.72483      -5.18988       5.18988       283.134       288.324    
  62  0.634237     -0.455332      -1.37006       1.37006       294.203       295.573    
  63  0.740506     -0.300422     -0.903945      0.903945       291.268       292.172    
  64  0.619863E-01  -2.78084      -8.36734       8.36734       254.341       262.708    
loop,thermsimp(1:2)       36  0.174343       1.39819    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    407        255.12          0.88          1.09         23.10          0.02          0.04         25.13
Just calling func    0   0         25.13


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    255.12
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3.00892               442
loop is:       36
neval is:      406
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       36      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    3.00892               442
loop is:       37
neval is:      406


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      442
neval,tstepnext:      406     442

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.577652     -0.548784      -1.65125       1.65125       246.707       248.358    
   2  0.954687     -0.463716E-01 -0.139529      0.139529       249.595       249.735    
   3  0.530232     -0.634441      -1.90898       1.90898       251.225       253.134    
   4  0.762581     -0.271046     -0.815557      0.815557       251.965       252.780    
   5  0.261488      -1.34137      -4.03607       4.03607       259.374       263.410    
   6  0.639820     -0.446569      -1.34369       1.34369       256.866       258.210    
   7  0.527286     -0.640012      -1.92575       1.92575       261.877       263.802    
   8  0.819676     -0.198846     -0.598312      0.598312       254.341       254.939    
   9  0.564974     -0.570976      -1.71802       1.71802       264.230       265.948    
  10  0.313261      -1.16072      -3.49252       3.49252       265.290       268.783    
  11  0.741013     -0.299737     -0.901887      0.901887       264.341       265.242    
  12  0.286155      -1.25122      -3.76483       3.76483       270.221       273.986    
  13  0.145515      -1.92747      -5.79962       5.79962       269.398       275.198    
  14  0.417445     -0.873602      -2.62860       2.62860       271.753       274.381    
  15  0.110117      -2.20621      -6.63831       6.63831       272.126       278.764    
  16  0.798228     -0.225361     -0.678094      0.678094       272.884       273.562    
  17  0.981317     -0.188596E-01 -0.567471E-01  0.567471E-01   273.626       273.683    
  18  0.947313     -0.541256E-01 -0.162860      0.162860       273.105       273.268    
  19  0.979175     -0.210453E-01 -0.633236E-01  0.633236E-01   273.824       273.887    
  20  0.507968     -0.677337      -2.03805       2.03805       273.815       275.853    
  21  0.313327      -1.16051      -3.49188       3.49188       273.674       277.166    
  22  0.174912      -1.74347      -5.24598       5.24598       275.413       280.659    
  23  0.278222      -1.27933      -3.84942       3.84942       275.872       279.722    
  24  0.551320     -0.595439      -1.79163       1.79163       276.843       278.635    
  25  0.509281     -0.674756      -2.03029       2.03029       278.065       280.095    
  26  0.202795E-01  -3.89814      -11.7292       11.7292       278.238       289.967    
  27  0.394215     -0.930860      -2.80089       2.80089       277.729       280.530    
  28  0.463302     -0.769377      -2.31500       2.31500       277.612       279.927    
  29  0.132020      -2.02480      -6.09248       6.09248       277.403       283.496    
  30  0.330810      -1.10621      -3.32851       3.32851       278.127       281.455    
  31  0.415110     -0.879212      -2.64548       2.64548       268.366       271.011    
  32  0.381803     -0.962850      -2.89714       2.89714       279.661       282.558    
  33  0.209798E-01  -3.86420      -11.6271       11.6271       274.154       285.781    
  34  0.906539     -0.981217E-01 -0.295241      0.295241       273.892       274.187    
  35  0.507460     -0.678337      -2.04106       2.04106       277.598       279.639    
  36  0.694619     -0.364392      -1.09643       1.09643       281.731       282.828    
  37  0.704259     -0.350610      -1.05496       1.05496       267.993       269.048    
  38  0.953152     -0.479806E-01 -0.144370      0.144370       277.280       277.424    
  39  0.393408     -0.932907      -2.80705       2.80705       275.789       278.596    
  40  0.361825      -1.01659      -3.05885       3.05885       278.061       281.120    
  41  0.420592     -0.866091      -2.60600       2.60600       280.139       282.745    
  42  0.474514     -0.745463      -2.24304       2.24304       277.876       280.119    
  43  0.769306     -0.262267     -0.789140      0.789140       279.872       280.661    
  44  0.881065     -0.126624     -0.381001      0.381001       277.156       277.537    
  45  0.298206      -1.20997      -3.64071       3.64071       281.252       284.892    
  46  0.364982E-01  -3.31049      -9.96102       9.96102       282.302       292.263    
  47  0.835758     -0.179417     -0.539851      0.539851       285.029       285.569    
  48  0.936392     -0.657215E-01 -0.197751      0.197751       284.234       284.432    
  49  0.213316      -1.54498      -4.64873       4.64873       286.521       291.170    
  50  0.942026     -0.597221E-01 -0.179699      0.179699       281.266       281.446    
  51  0.130068      -2.03970      -6.13729       6.13729       286.088       292.225    
  52  0.115047      -2.16241      -6.50653       6.50653       284.996       291.502    
  53  0.320926      -1.13654      -3.41978       3.41978       280.568       283.988    
  54  0.256901      -1.35906      -4.08932       4.08932       282.445       286.534    
  55  0.712293E-02  -4.94444      -14.8774       14.8774       283.134       298.012    
  56  0.470217     -0.754561      -2.27042       2.27042       282.492       284.762    
  57  0.934029     -0.682473E-01 -0.205351      0.205351       284.162       284.367    
  58  0.312307      -1.16377      -3.50169       3.50169       277.353       280.855    
  59  0.292579      -1.22902      -3.69803       3.69803       289.044       292.742    
  60  0.811492     -0.208881     -0.628508      0.628508       288.734       289.362    
  61  0.424749     -0.856258      -2.57641       2.57641       283.403       285.980    
  62  0.574444     -0.554353      -1.66800       1.66800       291.268       292.936    
  63  0.884133     -0.123147     -0.370541      0.370541       294.203       294.573    
  64  0.515226     -0.663150      -1.99537       1.99537       255.115       257.110    
loop,thermsimp(1:2)       37   1.65125      0.139529    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    408        268.60          0.86          1.09         23.06          0.09          0.05         25.15
Just calling func    0   0         25.15


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    268.60
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3.00892               442
loop is:       37
neval is:      407
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       37      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    3.00892               442
loop is:       38
neval is:      407


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      442
neval,tstepnext:      407     442

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.708199     -0.345030      -1.03817       1.03817       246.707       247.745    
   2  0.656861     -0.420283      -1.26460       1.26460       249.595       250.860    
   3  0.531016     -0.632963      -1.90454       1.90454       251.965       253.869    
   4  0.259645      -1.34844      -4.05736       4.05736       251.225       255.282    
   5  0.509285E-01  -2.97733      -8.95857       8.95857       254.341       263.300    
   6  0.222403      -1.50327      -4.52321       4.52321       255.115       259.638    
   7  0.883122E-01  -2.42688      -7.30229       7.30229       256.866       264.168    
   8  0.689941     -0.371150      -1.11676       1.11676       259.374       260.491    
   9  0.811351     -0.209054     -0.629028      0.629028       261.877       262.506    
  10  0.252526      -1.37624      -4.14101       4.14101       264.341       268.482    
  11  0.229840      -1.47037      -4.42424       4.42424       264.230       268.654    
  12  0.108257      -2.22324      -6.68957       6.68957       265.290       271.980    
  13  0.933379E-02  -4.67411      -14.0641       14.0641       267.993       282.057    
  14  0.685050E-01  -2.68085      -8.06647       8.06647       268.366       276.432    
  15  0.875782     -0.132638     -0.399098      0.399098       273.105       273.505    
  16  0.592250     -0.523826      -1.57615       1.57615       272.884       274.460    
  17  0.259190E-01  -3.65278      -10.9909       10.9909       273.626       284.617    
  18  0.411624     -0.887646      -2.67086       2.67086       273.824       276.495    
  19  0.215731      -1.53372      -4.61486       4.61486       270.221       274.836    
  20  0.104157      -2.26185      -6.80574       6.80574       273.892       280.698    
  21  0.796475     -0.227560     -0.684711      0.684711       271.753       272.438    
  22  0.316732      -1.14970      -3.45936       3.45936       269.398       272.858    
  23  0.868566     -0.140911     -0.423991      0.423991       273.815       274.239    
  24  0.932817     -0.695461E-01 -0.209259      0.209259       273.674       273.883    
  25  0.704796E-01  -2.65243      -7.98096       7.98096       277.280       285.261    
  26  0.584289     -0.537360      -1.61688       1.61688       277.156       278.772    
  27  0.345306      -1.06332      -3.19946       3.19946       275.789       278.989    
  28  0.367589E-01  -3.30338      -9.93961       9.93961       276.843       286.783    
  29  0.470285     -0.754417      -2.26998       2.26998       272.126       274.396    
  30  0.303718      -1.19165      -3.58560       3.58560       277.598       281.183    
  31  0.298675      -1.20840      -3.63598       3.63598       275.872       279.508    
  32  0.506100     -0.681022      -2.04914       2.04914       277.612       279.661    
  33  0.240488      -1.42508      -4.28797       4.28797       278.065       282.353    
  34  0.673726     -0.394932      -1.18832       1.18832       277.876       279.064    
  35  0.303531      -1.19227      -3.58745       3.58745       277.729       281.316    
  36  0.450278     -0.797890      -2.40079       2.40079       275.413       277.814    
  37  0.850970     -0.161378     -0.485574      0.485574       279.872       280.357    
  38  0.370442     -0.993060      -2.98804       2.98804       277.353       280.341    
  39  0.328520      -1.11316      -3.34940       3.34940       278.061       281.411    
  40  0.194991      -1.63480      -4.91899       4.91899       281.266       286.185    
  41  0.547740     -0.601955      -1.81124       1.81124       278.127       279.938    
  42  0.574734     -0.553847      -1.66648       1.66648       279.661       281.327    
  43  0.900615     -0.104678     -0.314968      0.314968       280.139       280.454    
  44  0.316870      -1.14926      -3.45804       3.45804       281.731       285.189    
  45  0.961546     -0.392133E-01 -0.117990      0.117990       277.403       277.521    
  46  0.714054     -0.336796      -1.01339       1.01339       280.568       281.582    
  47  0.325407E-01  -3.42526      -10.3064       10.3064       284.162       294.468    
  48  0.264027      -1.33170      -4.00699       4.00699       284.234       288.241    
  49  0.139486      -1.96979      -5.92695       5.92695       282.492       288.419    
  50  0.568563     -0.564643      -1.69897       1.69897       281.252       282.951    
  51  0.691470     -0.368936      -1.11010       1.11010       285.029       286.139    
  52  0.214963      -1.53729      -4.62559       4.62559       274.154       278.780    
  53  0.515636     -0.662353      -1.99297       1.99297       283.403       285.396    
  54  0.803808     -0.218395     -0.657134      0.657134       282.445       283.102    
  55  0.930258     -0.722938E-01 -0.217527      0.217527       288.734       288.951    
  56  0.121241      -2.10998      -6.34877       6.34877       278.238       284.587    
  57  0.510661     -0.672049      -2.02214       2.02214       286.521       288.543    
  58  0.689134     -0.372319      -1.12028       1.12028       284.996       286.116    
  59  0.716530     -0.333335      -1.00298       1.00298       286.088       287.091    
  60  0.502196E-01  -2.99135      -9.00074       9.00074       282.302       291.303    
  61  0.901495     -0.103701     -0.312028      0.312028       289.044       289.356    
  62  0.933572     -0.687370E-01 -0.206824      0.206824       291.268       291.475    
  63  0.385092E-02  -5.55944      -16.7279       16.7279       294.203       310.931    
  64  0.965118     -0.355051E-01 -0.106832      0.106832       268.603       268.710    
loop,thermsimp(1:2)       38   1.03817       1.26460    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    409        293.59          0.88          1.09         23.16          0.01          0.04         25.17
Just calling func    0   0         25.17


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    293.59
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3.00892               442
loop is:       38
neval is:      408
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       38      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    3.00892               442
loop is:       39
neval is:      408


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      442
neval,tstepnext:      408     442

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.796195     -0.227912     -0.685769      0.685769       246.707       247.393    
   2  0.306803      -1.18155      -3.55519       3.55519       249.595       253.150    
   3  0.857946     -0.153214     -0.461009      0.461009       251.965       252.426    
   4  0.363815      -1.01111      -3.04235       3.04235       251.225       254.267    
   5  0.755322E-01  -2.58320      -7.77264       7.77264       255.115       262.888    
   6  0.345998E-01  -3.36391      -10.1217       10.1217       259.374       269.496    
   7  0.280587      -1.27087      -3.82396       3.82396       261.877       265.700    
   8  0.907418     -0.971519E-01 -0.292323      0.292323       254.341       254.633    
   9  0.696180     -0.362147      -1.08967       1.08967       256.866       257.956    
  10  0.640049     -0.446211      -1.34262       1.34262       264.341       265.683    
  11  0.620842     -0.476679      -1.43429       1.43429       264.230       265.664    
  12  0.850691     -0.161706     -0.486562      0.486562       268.603       269.090    
  13  0.308317      -1.17663      -3.54038       3.54038       265.290       268.831    
  14  0.198496      -1.61698      -4.86538       4.86538       271.753       276.618    
  15  0.119809      -2.12186      -6.38451       6.38451       269.398       275.783    
  16  0.905871     -0.988582E-01 -0.297457      0.297457       273.105       273.403    
  17  0.386344     -0.951028      -2.86157       2.86157       273.674       276.536    
  18  0.112809      -2.18206      -6.56564       6.56564       273.815       280.381    
  19  0.682866     -0.381457      -1.14778       1.14778       272.126       273.274    
  20  0.819362     -0.199230     -0.599467      0.599467       272.884       273.484    
  21  0.412742     -0.884933      -2.66270       2.66270       270.221       272.884    
  22  0.211811E-01  -3.85464      -11.5983       11.5983       268.366       279.964    
  23  0.422800     -0.860857      -2.59025       2.59025       273.824       276.414    
  24  0.826028     -0.191126     -0.575084      0.575084       277.403       277.978    
  25  0.457858     -0.781197      -2.35056       2.35056       275.413       277.764    
  26  0.551067     -0.595900      -1.79302       1.79302       277.156       278.949    
  27  0.160440      -1.82984      -5.50583       5.50583       274.154       279.660    
  28  0.240310      -1.42582      -4.29019       4.29019       275.789       280.079    
  29  0.614859     -0.486362      -1.46343       1.46343       277.876       279.339    
  30  0.489204     -0.714976      -2.15131       2.15131       275.872       278.024    
  31  0.151691      -1.88591      -5.67455       5.67455       277.612       283.286    
  32  0.221776      -1.50609      -4.53170       4.53170       278.127       282.658    
  33  0.333050      -1.09946      -3.30820       3.30820       277.353       280.662    
  34  0.905001     -0.998190E-01 -0.300348      0.300348       279.872       280.172    
  35  0.598599     -0.513164      -1.54407       1.54407       280.139       281.683    
  36  0.603742     -0.504608      -1.51833       1.51833       273.892       275.410    
  37  0.989214     -0.108448E-01 -0.326312E-01  0.326312E-01   277.598       277.630    
  38  0.175887      -1.73792      -5.22926       5.22926       277.729       282.958    
  39  0.708621     -0.344434      -1.03638       1.03638       279.661       280.697    
  40  0.940581     -0.612570E-01 -0.184318      0.184318       278.061       278.246    
  41  0.870068     -0.139184     -0.418793      0.418793       280.568       280.987    
  42  0.260264      -1.34606      -4.05019       4.05019       267.993       272.043    
  43  0.216654      -1.52946      -4.60201       4.60201       278.065       282.667    
  44  0.553762     -0.591020      -1.77833       1.77833       281.252       283.030    
  45  0.891465     -0.114889     -0.345693      0.345693       282.445       282.791    
  46  0.320048      -1.13928      -3.42802       3.42802       278.238       281.666    
  47  0.163518      -1.81083      -5.44866       5.44866       273.626       279.075    
  48  0.652431     -0.427050      -1.28496       1.28496       281.731       283.016    
  49  0.317737      -1.14653      -3.44983       3.44983       277.280       280.730    
  50  0.321191      -1.13572      -3.41729       3.41729       283.403       286.820    
  51  0.750162     -0.287466     -0.864964      0.864964       284.996       285.861    
  52  0.172611      -1.75672      -5.28583       5.28583       285.029       290.315    
  53  0.413556     -0.882963      -2.65677       2.65677       281.266       283.923    
  54  0.277750      -1.28103      -3.85453       3.85453       276.843       280.698    
  55  0.326826      -1.11833      -3.36496       3.36496       286.088       289.453    
  56  0.922327     -0.808557E-01 -0.243289      0.243289       284.234       284.477    
  57  0.572255     -0.558170      -1.67949       1.67949       282.492       284.171    
  58  0.149549      -1.90013      -5.71734       5.71734       286.521       292.238    
  59  0.266959      -1.32066      -3.97377       3.97377       288.734       292.707    
  60  0.636795     -0.451307      -1.35795       1.35795       289.044       290.402    
  61  0.868293     -0.141226     -0.424939      0.424939       282.302       282.727    
  62  0.597909     -0.514316      -1.54754       1.54754       291.268       292.815    
  63  0.121507      -2.10778      -6.34216       6.34216       284.162       290.504    
  64  0.606075     -0.500751      -1.50672       1.50672       293.591       295.098    
loop,thermsimp(1:2)       39  0.685769       3.55519    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    410        294.20          0.88          1.07         23.12          0.05          0.04         25.16
Just calling func    0   0         25.16


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    411        270.62          0.88          1.08         23.12          0.00          0.04         25.12
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3    270.62
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3.00892               442
loop is:       39
neval is:      410
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       39      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    3.00892               442
loop is:       40
neval is:      410


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      442
neval,tstepnext:      410     442

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.783363     -0.244159     -0.734656      0.734656       246.707       247.442    
   2  0.179321      -1.71858      -5.17107       5.17107       251.965       257.136    
   3  0.331080      -1.10539      -3.32605       3.32605       249.595       252.921    
   4  0.130870      -2.03355      -6.11881       6.11881       251.225       257.344    
   5  0.604904     -0.502686      -1.51254       1.51254       254.341       255.854    
   6  0.140568      -1.96207      -5.90371       5.90371       256.866       262.770    
   7  0.127414      -2.06031      -6.19933       6.19933       255.115       261.314    
   8  0.389565     -0.942725      -2.83659       2.83659       264.230       267.066    
   9  0.835608     -0.179595     -0.540389      0.540389       264.341       264.881    
  10  0.934873     -0.673445E-01 -0.202635      0.202635       261.877       262.079    
  11  0.639074     -0.447735      -1.34720       1.34720       265.290       266.637    
  12  0.349757      -1.05052      -3.16092       3.16092       268.603       271.764    
  13  0.175521      -1.74000      -5.23552       5.23552       259.374       264.609    
  14  0.761611     -0.272320     -0.819389      0.819389       267.993       268.812    
  15  0.162952      -1.81430      -5.45908       5.45908       270.221       275.680    
  16  0.542858     -0.610907      -1.83817       1.83817       272.126       273.964    
  17  0.715099     -0.335334      -1.00899       1.00899       273.105       274.114    
  18  0.996052     -0.395608E-02 -0.119035E-01  0.119035E-01   272.884       272.896    
  19  0.668265     -0.403070      -1.21281       1.21281       273.892       275.105    
  20  0.294619      -1.22207      -3.67713       3.67713       269.398       273.075    
  21  0.721551     -0.326352     -0.981968      0.981968       273.824       274.806    
  22  0.216610      -1.52966      -4.60263       4.60263       273.674       278.277    
  23  0.649086     -0.432191      -1.30043       1.30043       271.753       273.053    
  24  0.692922E-01  -2.66942      -8.03209       8.03209       277.598       285.630    
  25  0.271271      -1.30464      -3.92555       3.92555       275.413       279.339    
  26  0.407239     -0.898355      -2.70308       2.70308       277.403       280.106    
  27  0.435034     -0.832331      -2.50442       2.50442       275.872       278.377    
  28  0.638725     -0.448281      -1.34884       1.34884       278.061       279.410    
  29  0.932325     -0.700735E-01 -0.210846      0.210846       277.156       277.366    
  30  0.958672     -0.422065E-01 -0.126996      0.126996       273.626       273.753    
  31  0.336870      -1.08806      -3.27388       3.27388       277.876       281.150    
  32  0.453036     -0.791783      -2.38241       2.38241       274.154       276.536    
  33  0.422569     -0.861402      -2.59189       2.59189       268.366       270.958    
  34  0.596674     -0.516385      -1.55376       1.55376       275.789       277.343    
  35  0.586088     -0.534286      -1.60762       1.60762       279.872       281.479    
  36  0.174805      -1.74409      -5.24782       5.24782       273.815       279.063    
  37  0.854432     -0.157318     -0.473359      0.473359       277.353       277.827    
  38  0.754323     -0.281935     -0.848322      0.848322       279.661       280.509    
  39  0.956897     -0.440598E-01 -0.132573      0.132573       276.843       276.976    
  40  0.334431      -1.09533      -3.29575       3.29575       277.280       280.576    
  41  0.750609     -0.286871     -0.863172      0.863172       280.568       281.432    
  42  0.778602     -0.250255     -0.752997      0.752997       278.238       278.991    
  43  0.330765      -1.10635      -3.32891       3.32891       280.139       283.468    
  44  0.601104     -0.508987      -1.53150       1.53150       278.127       279.658    
  45  0.578570     -0.547197      -1.64647       1.64647       278.065       279.711    
  46  0.381025     -0.964891      -2.90328       2.90328       282.302       285.205    
  47  0.764260     -0.268847     -0.808939      0.808939       282.445       283.254    
  48  0.194556      -1.63704      -4.92572       4.92572       277.729       282.655    
  49  0.785702E-01  -2.54376      -7.65399       7.65399       281.731       289.385    
  50  0.253837E-01  -3.67365      -11.0537       11.0537       281.252       292.305    
  51  0.149049      -1.90348      -5.72742       5.72742       277.612       283.339    
  52  0.591675     -0.524797      -1.57908       1.57908       281.266       282.845    
  53  0.471206     -0.752459      -2.26409       2.26409       282.492       284.756    
  54  0.734409     -0.308689     -0.928822      0.928822       284.234       285.163    
  55  0.183368      -1.69626      -5.10392       5.10392       284.996       290.100    
  56  0.296126      -1.21697      -3.66177       3.66177       283.403       287.065    
  57  0.664218     -0.409144      -1.23108       1.23108       286.088       287.319    
  58  0.863102     -0.147223     -0.442983      0.442983       285.029       285.472    
  59  0.142776      -1.94648      -5.85681       5.85681       289.044       294.900    
  60  0.995423     -0.458719E-02 -0.138025E-01  0.138025E-01   284.162       284.175    
  61  0.721084     -0.327000     -0.983918      0.983918       286.521       287.505    
  62  0.336569      -1.08895      -3.27657       3.27657       288.734       292.010    
  63  0.785569     -0.241347     -0.726194      0.726194       291.268       291.994    
  64  0.518120     -0.657548      -1.97851       1.97851       270.617       272.596    
loop,thermsimp(1:2)       40  0.734656       5.17107    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    412        273.88          0.88          1.09         23.14          0.25          0.05         25.40
Just calling func    0   0         25.40


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    273.88
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3.00892               442
loop is:       40
neval is:      411
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       40      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    3.00892               442
loop is:       41
neval is:      411


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      442
neval,tstepnext:      411     442

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.762547     -0.271091     -0.815693      0.815693       246.707       247.523    
   2  0.700395     -0.356110      -1.07151       1.07151       249.595       250.667    
   3  0.110610      -2.20174      -6.62487       6.62487       254.341       260.966    
   4  0.542261     -0.612007      -1.84148       1.84148       251.965       253.806    
   5  0.993402     -0.662023E-02 -0.199198E-01  0.199198E-01   251.225       251.245    
   6  0.370923     -0.991761      -2.98413       2.98413       255.115       258.099    
   7  0.311008      -1.16794      -3.51423       3.51423       261.877       265.391    
   8  0.120775      -2.11383      -6.36035       6.36035       256.866       263.226    
   9  0.496739     -0.699690      -2.10531       2.10531       259.374       261.479    
  10  0.823539     -0.194144     -0.584165      0.584165       264.341       264.925    
  11  0.401420     -0.912746      -2.74638       2.74638       265.290       268.037    
  12  0.467810E-01  -3.06228      -9.21416       9.21416       264.230       273.444    
  13  0.104633      -2.25729      -6.79202       6.79202       267.993       274.785    
  14  0.233534      -1.45443      -4.37627       4.37627       268.366       272.742    
  15  0.959269     -0.415834E-01 -0.125121      0.125121       268.603       268.728    
  16  0.359845      -1.02208      -3.07536       3.07536       270.617       273.693    
  17  0.141753E-01  -4.25626      -12.8067       12.8067       272.884       285.691    
  18  0.566935     -0.567510      -1.70759       1.70759       271.753       273.460    
  19  0.901077     -0.104164     -0.313423      0.313423       269.398       269.712    
  20  0.465285     -0.765104      -2.30214       2.30214       273.626       275.928    
  21  0.315152      -1.15470      -3.47441       3.47441       272.126       275.600    
  22  0.954826     -0.462256E-01 -0.139089      0.139089       273.105       273.245    
  23  0.110663      -2.20127      -6.62345       6.62345       273.824       280.447    
  24  0.851067     -0.161264     -0.485231      0.485231       273.892       274.377    
  25  0.768372     -0.263481     -0.792794      0.792794       270.221       271.014    
  26  0.243081      -1.41436      -4.25570       4.25570       274.154       278.410    
  27  0.434279     -0.834069      -2.50965       2.50965       276.843       279.353    
  28  0.855138     -0.156492     -0.470873      0.470873       275.789       276.260    
  29  0.238302      -1.43422      -4.31545       4.31545       277.156       281.471    
  30  0.445547     -0.808452      -2.43257       2.43257       277.353       279.786    
  31  0.290285      -1.23689      -3.72171       3.72171       273.674       277.396    
  32  0.479492     -0.735029      -2.21165       2.21165       275.872       278.084    
  33  0.359712      -1.02245      -3.07648       3.07648       278.238       281.315    
  34  0.429040     -0.846204      -2.54616       2.54616       273.815       276.361    
  35  0.570900     -0.560541      -1.68663       1.68663       275.413       277.100    
  36  0.151312      -1.88841      -5.68209       5.68209       278.061       283.743    
  37  0.671837     -0.397739      -1.19677       1.19677       278.127       279.323    
  38  0.699384     -0.357556      -1.07586       1.07586       278.065       279.141    
  39  0.337756      -1.08543      -3.26598       3.26598       277.403       280.669    
  40  0.508282     -0.676718      -2.03619       2.03619       279.661       281.697    
  41  0.153085      -1.87676      -5.64704       5.64704       277.280       282.927    
  42  0.859571     -0.151322     -0.455317      0.455317       277.876       278.331    
  43  0.240559      -1.42479      -4.28709       4.28709       280.568       284.855    
  44  0.956907     -0.440496E-01 -0.132542      0.132542       279.872       280.004    
  45  0.695010     -0.363829      -1.09473       1.09473       277.729       278.824    
  46  0.258459      -1.35302      -4.07113       4.07113       281.266       285.337    
  47  0.851968     -0.160207     -0.482050      0.482050       282.445       282.927    
  48  0.755235     -0.280726     -0.844683      0.844683       277.612       278.456    
  49  0.618135     -0.481049      -1.44744       1.44744       280.139       281.587    
  50  0.366071      -1.00493      -3.02375       3.02375       284.162       287.185    
  51  0.768800     -0.262924     -0.791119      0.791119       282.492       283.283    
  52  0.704229     -0.350652      -1.05508       1.05508       284.234       285.289    
  53  0.900469     -0.104839     -0.315453      0.315453       282.302       282.618    
  54  0.175085      -1.74249      -5.24301       5.24301       285.029       290.272    
  55  0.905870     -0.988595E-01 -0.297461      0.297461       277.598       277.895    
  56  0.107963E-01  -4.52856      -13.6261       13.6261       283.403       297.029    
  57  0.493411     -0.706413      -2.12554       2.12554       286.088       288.213    
  58  0.538221     -0.619486      -1.86399       1.86399       286.521       288.385    
  59  0.626575     -0.467488      -1.40663       1.40663       281.731       283.138    
  60  0.904814     -0.100026     -0.300969      0.300969       284.996       285.297    
  61  0.266015      -1.32420      -3.98442       3.98442       291.268       295.252    
  62  0.328156      -1.11427      -3.35274       3.35274       288.734       292.086    
  63  0.664881     -0.408147      -1.22808       1.22808       281.252       282.480    
  64  0.858127     -0.153003     -0.460376      0.460376       273.876       274.336    
loop,thermsimp(1:2)       41  0.815693       1.07151    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    413        252.50          0.88          1.09         23.16          0.01          0.04         25.18
Just calling func    0   0         25.18


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    252.50
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3.00892               442
loop is:       41
neval is:      412
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       41      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    3.00892               442
loop is:       42
neval is:      412


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      442
neval,tstepnext:      412     442

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.633054     -0.457200      -1.37568       1.37568       246.707       248.083    
   2  0.416661     -0.875483      -2.63426       2.63426       249.595       252.230    
   3  0.671058E-01  -2.70149      -8.12856       8.12856       251.225       259.354    
   4  0.701446     -0.354612      -1.06700       1.06700       251.965       253.032    
   5  0.176715      -1.73321      -5.21511       5.21511       255.115       260.330    
   6  0.223035      -1.50042      -4.51466       4.51466       254.341       258.856    
   7  0.907694E-01  -2.39943      -7.21971       7.21971       259.374       266.594    
   8  0.113202      -2.17858      -6.55518       6.55518       256.866       263.421    
   9  0.443192     -0.813753      -2.44852       2.44852       264.341       266.789    
  10  0.999048     -0.952172E-03 -0.286501E-02  0.286501E-02   261.877       261.879    
  11  0.606200     -0.500546      -1.50610       1.50610       265.290       266.796    
  12  0.120370      -2.11718      -6.37044       6.37044       268.603       274.974    
  13  0.448885     -0.800988      -2.41011       2.41011       269.398       271.808    
  14  0.531880     -0.631338      -1.89965       1.89965       270.221       272.121    
  15  0.804789     -0.217176     -0.653465      0.653465       268.366       269.019    
  16  0.427230     -0.850433      -2.55889       2.55889       273.105       275.664    
  17  0.222958      -1.50077      -4.51571       4.51571       264.230       268.746    
  18  0.850765     -0.161619     -0.486299      0.486299       271.753       272.239    
  19  0.926988     -0.758150E-01 -0.228122      0.228122       270.617       270.845    
  20  0.729073     -0.315981     -0.950764      0.950764       273.876       274.827    
  21  0.411512     -0.887916      -2.67167       2.67167       273.892       276.564    
  22  0.692157     -0.367942      -1.10711       1.10711       267.993       269.100    
  23  0.917319     -0.862998E-01 -0.259669      0.259669       272.126       272.385    
  24  0.376398     -0.977107      -2.94004       2.94004       273.626       276.566    
  25  0.276694      -1.28484      -3.86599       3.86599       275.789       279.655    
  26  0.296319      -1.21632      -3.65981       3.65981       273.815       277.475    
  27  0.395623     -0.927294      -2.79016       2.79016       275.413       278.203    
  28  0.397122     -0.923511      -2.77877       2.77877       273.674       276.453    
  29  0.414944     -0.879612      -2.64669       2.64669       277.598       280.244    
  30  0.249325      -1.38900      -4.17938       4.17938       275.872       280.052    
  31  0.668798     -0.402273      -1.21041       1.21041       277.876       279.086    
  32  0.765717     -0.266942     -0.803209      0.803209       274.154       274.957    
  33  0.420183     -0.867066      -2.60894       2.60894       277.612       280.221    
  34  0.851189     -0.161121     -0.484801      0.484801       277.729       278.214    
  35  0.733154     -0.310400     -0.933970      0.933970       278.065       278.999    
  36  0.721185E-01  -2.62944      -7.91180       7.91180       278.127       286.038    
  37  0.356766      -1.03068      -3.10123       3.10123       276.843       279.944    
  38  0.654280     -0.424220      -1.27645       1.27645       277.353       278.630    
  39  0.662515     -0.411712      -1.23881       1.23881       279.872       281.110    
  40  0.164156      -1.80694      -5.43694       5.43694       273.824       279.261    
  41  0.116179      -2.15263      -6.47709       6.47709       277.403       283.880    
  42  0.134772      -2.00417      -6.03040       6.03040       278.238       284.269    
  43  0.298842      -1.20784      -3.63429       3.63429       277.156       280.790    
  44  0.583690     -0.538385      -1.61996       1.61996       280.139       281.759    
  45  0.894896     -0.111047     -0.334133      0.334133       279.661       279.995    
  46  0.148951      -1.90414      -5.72941       5.72941       281.252       286.981    
  47  0.315615      -1.15323      -3.46999       3.46999       282.302       285.772    
  48  0.810942     -0.209558     -0.630545      0.630545       282.445       283.076    
  49  0.697490     -0.360268      -1.08402       1.08402       277.280       278.364    
  50  0.440376     -0.820127      -2.46770       2.46770       281.731       284.199    
  51  0.987477     -0.126020E-01 -0.379183E-01  0.379183E-01   282.492       282.530    
  52  0.788027     -0.238223     -0.716795      0.716795       278.061       278.778    
  53  0.304959      -1.18758      -3.57334       3.57334       280.568       284.142    
  54  0.918046     -0.855075E-01 -0.257285      0.257285       284.234       284.491    
  55  0.436819     -0.828237      -2.49210       2.49210       284.996       287.488    
  56  0.983182     -0.169609E-01 -0.510342E-01  0.510342E-01   281.266       281.317    
  57  0.635334     -0.453604      -1.36486       1.36486       272.884       274.249    
  58  0.331329      -1.10464      -3.32378       3.32378       284.162       287.485    
  59  0.410737     -0.889801      -2.67734       2.67734       286.088       288.765    
  60  0.351373      -1.04591      -3.14706       3.14706       286.521       289.668    
  61  0.340199      -1.07823      -3.24430       3.24430       285.029       288.273    
  62  0.510393     -0.672575      -2.02373       2.02373       288.734       290.757    
  63  0.249777      -1.38719      -4.17394       4.17394       291.268       295.442    
  64  0.432656     -0.837813      -2.52092       2.52092       252.500       255.021    
loop,thermsimp(1:2)       42   1.37568       2.63426    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    414        314.32          0.88          1.09         23.12          0.00          0.04         25.12
Just calling func    0   0         25.13


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    415        270.60          0.86          1.09         23.15          0.04          0.04         25.17
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3    270.60
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3.00892               442
loop is:       42
neval is:      414
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       42      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    3.00892               442
loop is:       43
neval is:      414


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      442
neval,tstepnext:      414     442

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.165518      -1.79868      -5.41208       5.41208       246.707       252.119    
   2  0.737067     -0.305077     -0.917954      0.917954       249.595       250.513    
   3  0.332012      -1.10258      -3.31759       3.31759       251.965       255.282    
   4  0.756847     -0.278594     -0.838268      0.838268       252.500       253.338    
   5  0.168413      -1.78134      -5.35990       5.35990       254.341       259.701    
   6  0.422244     -0.862172      -2.59421       2.59421       251.225       253.819    
   7  0.865590     -0.144344     -0.434321      0.434321       255.115       255.549    
   8  0.820021     -0.198425     -0.597046      0.597046       261.877       262.474    
   9  0.681904     -0.382867      -1.15202       1.15202       256.866       258.018    
  10  0.476378E-02  -5.34671      -16.0879       16.0879       259.374       275.462    
  11  0.891588     -0.114751     -0.345276      0.345276       264.341       264.686    
  12  0.583910     -0.538008      -1.61883       1.61883       265.290       266.909    
  13  0.224086      -1.49572      -4.50052       4.50052       264.230       268.730    
  14  0.550831     -0.596327      -1.79430       1.79430       268.366       270.160    
  15  0.109755      -2.20951      -6.64824       6.64824       267.993       274.641    
  16  0.173189      -1.75337      -5.27577       5.27577       270.617       275.893    
  17  0.822854     -0.194976     -0.586669      0.586669       269.398       269.985    
  18  0.792562     -0.232484     -0.699527      0.699527       270.221       270.921    
  19  0.383253     -0.959060      -2.88574       2.88574       271.753       274.639    
  20  0.422533     -0.861488      -2.59215       2.59215       272.126       274.718    
  21  0.811047     -0.209429     -0.630155      0.630155       272.884       273.514    
  22  0.860783     -0.149912     -0.451075      0.451075       273.876       274.327    
  23  0.751011     -0.286335     -0.861560      0.861560       274.154       275.016    
  24  0.358967      -1.02452      -3.08271       3.08271       268.603       271.686    
  25  0.877019     -0.131227     -0.394852      0.394852       273.105       273.500    
  26  0.441658     -0.817220      -2.45895       2.45895       273.674       276.133    
  27  0.259650      -1.34842      -4.05730       4.05730       273.892       277.949    
  28  0.106035      -2.24398      -6.75197       6.75197       273.626       280.378    
  29  0.608421     -0.496887      -1.49510       1.49510       273.815       275.310    
  30  0.143099      -1.94422      -5.85001       5.85001       275.413       281.263    
  31  0.242177      -1.41809      -4.26691       4.26691       277.729       281.996    
  32  0.517081     -0.659556      -1.98455       1.98455       277.280       279.265    
  33  0.492461     -0.708339      -2.13134       2.13134       277.353       279.485    
  34  0.839297     -0.175190     -0.527135      0.527135       278.061       278.588    
  35  0.824305     -0.193215     -0.581369      0.581369       278.065       278.646    
  36  0.742325     -0.297968     -0.896564      0.896564       277.876       278.773    
  37  0.158654      -1.84103      -5.53953       5.53953       273.824       279.363    
  38  0.702604     -0.352962      -1.06203       1.06203       275.789       276.851    
  39  0.324396      -1.12579      -3.38741       3.38741       276.843       280.230    
  40  0.628286     -0.464760      -1.39843       1.39843       279.661       281.059    
  41  0.896889     -0.108823     -0.327440      0.327440       275.872       276.200    
  42  0.325633      -1.12199      -3.37597       3.37597       277.612       280.988    
  43  0.833588     -0.182016     -0.547672      0.547672       277.598       278.145    
  44  0.292459      -1.22943      -3.69927       3.69927       277.156       280.855    
  45  0.625236     -0.469626      -1.41307       1.41307       279.872       281.285    
  46  0.613119     -0.489197      -1.47196       1.47196       281.266       282.738    
  47  0.521950     -0.650183      -1.95635       1.95635       280.139       282.096    
  48  0.999935     -0.646019E-04 -0.194382E-03  0.194382E-03   282.492       282.492    
  49  0.971287E-01  -2.33172      -7.01596       7.01596       282.445       289.461    
  50  0.982535     -0.176198E-01 -0.530165E-01  0.530165E-01   277.403       277.456    
  51  0.930778     -0.717347E-01 -0.215844      0.215844       280.568       280.784    
  52  0.566446     -0.568373      -1.71019       1.71019       281.731       283.442    
  53  0.671812     -0.397777      -1.19688       1.19688       278.238       279.435    
  54  0.814331     -0.205388     -0.617997      0.617997       284.234       284.852    
  55  0.593504     -0.521712      -1.56979       1.56979       282.302       283.872    
  56  0.338750      -1.08249      -3.25714       3.25714       278.127       281.384    
  57  0.584939     -0.536248      -1.61353       1.61353       281.252       282.865    
  58  0.576637     -0.550541      -1.65654       1.65654       284.162       285.818    
  59  0.324991      -1.12396      -3.38191       3.38191       284.996       288.378    
  60  0.320844E-01  -3.43939      -10.3489       10.3489       285.029       295.378    
  61  0.711764     -0.340009      -1.02306       1.02306       286.088       287.111    
  62  0.340665      -1.07686      -3.24018       3.24018       286.521       289.761    
  63  0.423626E-01  -3.16149      -9.51268       9.51268       288.734       298.246    
  64  0.672710     -0.396440      -1.19286       1.19286       270.598       271.791    
loop,thermsimp(1:2)       43   5.41208      0.917954    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    416        298.54          0.88          1.09         23.12          0.04          0.04         25.17
Just calling func    0   0         25.17


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    417        268.03          0.88          1.09         23.15          0.00          0.03         25.15
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3    268.03
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3.00892               442
loop is:       43
neval is:      416
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       43      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    3.00892               442
loop is:       44
neval is:      416


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      442
neval,tstepnext:      416     442

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.960290E-01  -2.34311      -7.05022       7.05022       249.595       256.646    
   2  0.509377     -0.674566      -2.02972       2.02972       246.707       248.737    
   3  0.960906     -0.398785E-01 -0.119991      0.119991       252.500       252.620    
   4  0.145058      -1.93062      -5.80909       5.80909       251.225       257.034    
   5  0.584668     -0.536711      -1.61492       1.61492       251.965       253.580    
   6  0.137819      -1.98182      -5.96314       5.96314       255.115       261.078    
   7  0.829899     -0.186451     -0.561017      0.561017       256.866       257.427    
   8  0.249142      -1.38973      -4.18159       4.18159       254.341       258.523    
   9  0.471049     -0.752793      -2.26510       2.26510       261.877       264.142    
  10  0.744784E-01  -2.59725      -7.81491       7.81491       264.341       272.155    
  11  0.233158      -1.45604      -4.38112       4.38112       265.290       269.671    
  12  0.714243E-01  -2.63912      -7.94090       7.94090       264.230       272.171    
  13  0.749743     -0.288025     -0.866647      0.866647       269.398       270.265    
  14  0.873534     -0.135209     -0.406832      0.406832       268.366       268.773    
  15  0.265951      -1.32444      -3.98514       3.98514       270.221       274.206    
  16  0.328438      -1.11341      -3.35015       3.35015       268.603       271.953    
  17  0.988010     -0.120622E-01 -0.362942E-01  0.362942E-01   270.598       270.634    
  18  0.737788     -0.304099     -0.915009      0.915009       273.105       274.020    
  19  0.171086E-01  -4.06818      -12.2408       12.2408       272.884       285.125    
  20  0.452693     -0.792540      -2.38469       2.38469       273.876       276.261    
  21  0.922976     -0.801523E-01 -0.241172      0.241172       271.753       271.994    
  22  0.323108      -1.12977      -3.39939       3.39939       267.993       271.392    
  23  0.740032     -0.301062     -0.905871      0.905871       272.126       273.032    
  24  0.606229     -0.500498      -1.50596       1.50596       274.154       275.660    
  25  0.813501     -0.206408     -0.621066      0.621066       273.815       274.436    
  26  0.457664     -0.781621      -2.35184       2.35184       259.374       261.726    
  27  0.848286     -0.164537     -0.495080      0.495080       270.617       271.112    
  28  0.430827E-01  -3.14463      -9.46196       9.46196       273.674       283.136    
  29  0.215038      -1.53694      -4.62454       4.62454       275.872       280.497    
  30  0.955068     -0.459730E-01 -0.138329      0.138329       275.789       275.927    
  31  0.100248      -2.30011      -6.92085       6.92085       277.403       284.324    
  32  0.272794      -1.29904      -3.90870       3.90870       273.892       277.801    
  33  0.796201E-01  -2.53049      -7.61405       7.61405       277.598       285.212    
  34  0.143803      -1.93931      -5.83524       5.83524       278.061       283.896    
  35  0.151473      -1.88734      -5.67888       5.67888       278.065       283.744    
  36  0.212508      -1.54878      -4.66015       4.66015       277.876       282.536    
  37  0.570089     -0.561962      -1.69090       1.69090       277.280       278.971    
  38  0.811663     -0.208669     -0.627870      0.627870       273.824       274.452    
  39  0.652193E-01  -2.73000      -8.21436       8.21436       278.238       286.453    
  40  0.753919     -0.282470     -0.849931      0.849931       277.353       278.203    
  41  0.915721     -0.880434E-01 -0.264916      0.264916       276.843       277.108    
  42  0.689805     -0.371347      -1.11735       1.11735       273.626       274.744    
  43  0.296032      -1.21729      -3.66272       3.66272       280.568       284.231    
  44  0.685645     -0.377395      -1.13555       1.13555       277.156       278.291    
  45  0.931075     -0.714153E-01 -0.214883      0.214883       277.612       277.827    
  46  0.273544      -1.29629      -3.90045       3.90045       279.661       283.561    
  47  0.269804E-01  -3.61265      -10.8702       10.8702       275.413       286.283    
  48  0.684598     -0.378923      -1.14015       1.14015       279.872       281.012    
  49  0.724056     -0.322886     -0.971539      0.971539       278.127       279.098    
  50  0.655515     -0.422333      -1.27077       1.27077       277.729       279.000    
  51  0.338921E-01  -3.38457      -10.1839       10.1839       280.139       290.323    
  52  0.503484     -0.686204      -2.06474       2.06474       282.492       284.557    
  53  0.283419      -1.26083      -3.79374       3.79374       281.266       285.060    
  54  0.495421     -0.702347      -2.11331       2.11331       281.252       283.365    
  55  0.966701     -0.338659E-01 -0.101900      0.101900       281.731       281.833    
  56  0.491710     -0.709867      -2.13593       2.13593       282.302       284.438    
  57  0.456917     -0.783254      -2.35675       2.35675       284.234       286.591    
  58  0.970984E-01  -2.33203      -7.01690       7.01690       284.162       291.179    
  59  0.713520     -0.337545      -1.01565       1.01565       286.088       287.103    
  60  0.611795E-01  -2.79394      -8.40676       8.40676       284.996       293.402    
  61  0.122834      -2.09692      -6.30948       6.30948       282.445       288.754    
  62  0.686483     -0.376174      -1.13188       1.13188       286.521       287.653    
  63  0.525237     -0.643905      -1.93746       1.93746       285.029       286.967    
  64  0.365531      -1.00640      -3.02819       3.02819       268.027       271.055    
loop,thermsimp(1:2)       44   7.05022       2.02972    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    418        253.44          0.84          1.09         23.05          0.14          0.04         25.16
Just calling func    0   0         25.17


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    419        275.90          0.88          1.09         23.09          0.04          0.05         25.14
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    253.44
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3.00892               442
loop is:       44
neval is:      418
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       44      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    3.00892               442
loop is:       45
neval is:      418


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      442
neval,tstepnext:      418     442

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.960257     -0.405547E-01 -0.122026      0.122026       246.707       246.829    
   2  0.700631     -0.355774      -1.07050       1.07050       252.500       253.571    
   3  0.900697     -0.104586     -0.314692      0.314692       251.965       252.280    
   4  0.217613      -1.52504      -4.58873       4.58873       249.595       254.184    
   5  0.247850      -1.39493      -4.19724       4.19724       251.225       255.422    
   6  0.910358     -0.939170E-01 -0.282589      0.282589       256.866       257.149    
   7  0.983752     -0.163817E-01 -0.492914E-01  0.492914E-01   254.341       254.390    
   8  0.161223      -1.82497      -5.49119       5.49119       255.115       260.606    
   9  0.527720     -0.639190      -1.92327       1.92327       259.374       261.297    
  10  0.733734     -0.309609     -0.931591      0.931591       261.877       262.808    
  11  0.406982     -0.898986      -2.70498       2.70498       268.366       271.071    
  12  0.731735     -0.312337     -0.939800      0.939800       265.290       266.230    
  13  0.840576E-01  -2.47625      -7.45086       7.45086       269.398       276.849    
  14  0.505764     -0.681685      -2.05114       2.05114       270.598       272.649    
  15  0.130210      -2.03861      -6.13402       6.13402       268.027       274.161    
  16  0.565496     -0.570053      -1.71524       1.71524       270.617       272.333    
  17  0.944307     -0.573044E-01 -0.172425      0.172425       267.993       268.165    
  18  0.131761      -2.02676      -6.09837       6.09837       268.603       274.702    
  19  0.133275      -2.01534      -6.06400       6.06400       271.753       277.817    
  20  0.890936     -0.115482     -0.347477      0.347477       264.341       264.688    
  21  0.650633     -0.429809      -1.29326       1.29326       264.230       265.523    
  22  0.132428      -2.02172      -6.08319       6.08319       272.126       278.209    
  23  0.731494     -0.312666     -0.940789      0.940789       273.105       274.046    
  24  0.171092      -1.76556      -5.31242       5.31242       270.221       275.534    
  25  0.257579      -1.35643      -4.08139       4.08139       273.815       277.896    
  26  0.324882      -1.12429      -3.38291       3.38291       273.824       277.207    
  27  0.526591     -0.641331      -1.92972       1.92972       273.626       275.556    
  28  0.282402E-01  -3.56701      -10.7329       10.7329       274.154       284.887    
  29  0.983943     -0.161877E-01 -0.487075E-01  0.487075E-01   275.789       275.838    
  30  0.629559     -0.462735      -1.39234       1.39234       273.876       275.268    
  31  0.202469      -1.59717      -4.80576       4.80576       276.843       281.649    
  32  0.737565     -0.304401     -0.915918      0.915918       273.892       274.808    
  33  0.388307     -0.945960      -2.84632       2.84632       277.612       280.458    
  34  0.585207E-01  -2.83837      -8.54045       8.54045       277.353       285.894    
  35  0.900578     -0.104719     -0.315092      0.315092       277.156       277.471    
  36  0.420335     -0.866702      -2.60784       2.60784       277.280       279.888    
  37  0.730143     -0.314515     -0.946350      0.946350       277.729       278.675    
  38  0.448331     -0.802224      -2.41383       2.41383       278.127       280.540    
  39  0.344846      -1.06466      -3.20348       3.20348       275.872       279.076    
  40  0.854608     -0.157113     -0.472741      0.472741       279.872       280.344    
  41  0.537300     -0.621198      -1.86914       1.86914       281.731       283.601    
  42  0.164937      -1.80219      -5.42265       5.42265       277.876       283.299    
  43  0.595120E-01  -2.82158      -8.48991       8.48991       273.674       282.164    
  44  0.398267E-01  -3.22322      -9.69841       9.69841       281.252       290.950    
  45  0.183210      -1.69712      -5.10650       5.10650       279.661       284.767    
  46  0.184498      -1.69011      -5.08543       5.08543       278.065       283.150    
  47  0.306635      -1.18210      -3.55684       3.55684       278.061       281.618    
  48  0.868924     -0.140500     -0.422754      0.422754       280.568       280.991    
  49  0.841633     -0.172412     -0.518773      0.518773       277.403       277.922    
  50  0.988826     -0.112370E-01 -0.338112E-01  0.338112E-01   282.302       282.336    
  51  0.244835      -1.40717      -4.23407       4.23407       282.492       286.726    
  52  0.338105      -1.08440      -3.26287       3.26287       281.266       284.529    
  53  0.609151     -0.495689      -1.49149       1.49149       272.884       274.376    
  54  0.529733E-01  -2.93797      -8.84012       8.84012       277.598       286.438    
  55  0.319654      -1.14052      -3.43173       3.43173       275.413       278.845    
  56  0.997722     -0.228025E-02 -0.686109E-02  0.686109E-02   278.238       278.245    
  57  0.703037     -0.352346      -1.06018       1.06018       284.234       285.294    
  58  0.794182E-01  -2.53303      -7.62169       7.62169       285.029       292.651    
  59  0.286060      -1.25155      -3.76583       3.76583       286.088       289.854    
  60  0.416234     -0.876507      -2.63734       2.63734       286.521       289.158    
  61  0.645642     -0.437510      -1.31643       1.31643       282.445       283.761    
  62  0.125731      -2.07361      -6.23933       6.23933       280.139       286.379    
  63  0.929125     -0.735122E-01 -0.221193      0.221193       284.162       284.383    
  64  0.281203E-01  -3.57126      -10.7457       10.7457       253.443       264.189    
loop,thermsimp(1:2)       45  0.122026       1.07050    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    420        252.59          0.88          1.09         23.13          0.00          0.04         25.14
Just calling func    0   0         25.14


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    252.59
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3.00892               442
loop is:       45
neval is:      419
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       45      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    3.00892               442
loop is:       46
neval is:      419


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      442
neval,tstepnext:      419     442

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.668594     -0.402578      -1.21133       1.21133       246.707       247.919    
   2  0.484900     -0.723813      -2.17790       2.17790       251.965       254.143    
   3  0.814670     -0.204972     -0.616746      0.616746       252.500       253.117    
   4  0.111039      -2.19788      -6.61324       6.61324       249.595       256.209    
   5  0.717773     -0.331602     -0.997766      0.997766       254.341       255.339    
   6  0.751748     -0.285354     -0.858609      0.858609       251.225       252.084    
   7  0.983096E-01  -2.31963      -6.97960       6.97960       256.866       263.846    
   8  0.150083      -1.89656      -5.70662       5.70662       255.115       260.822    
   9  0.733895     -0.309390     -0.930930      0.930930       259.374       260.305    
  10  0.982051     -0.181120E-01 -0.544977E-01  0.544977E-01   261.877       261.931    
  11  0.449336E-01  -3.10257      -9.33540       9.33540       253.443       262.779    
  12  0.929425     -0.731895E-01 -0.220222      0.220222       264.341       264.561    
  13  0.692017E-01  -2.67073      -8.03602       8.03602       264.230       272.266    
  14  0.644652     -0.439045      -1.32105       1.32105       265.290       266.611    
  15  0.661075     -0.413889      -1.24536       1.24536       267.993       269.238    
  16  0.410338     -0.890775      -2.68027       2.68027       268.366       271.046    
  17  0.967767     -0.327642E-01 -0.985851E-01  0.985851E-01   270.617       270.716    
  18  0.496474     -0.700224      -2.10692       2.10692       270.598       272.705    
  19  0.748701     -0.289415     -0.870827      0.870827       273.105       273.976    
  20  0.428668     -0.847073      -2.54878       2.54878       268.027       270.576    
  21  0.922992     -0.801352E-01 -0.241121      0.241121       272.884       273.125    
  22  0.844924     -0.168508     -0.507029      0.507029       268.603       269.110    
  23  0.680136     -0.385463      -1.15983       1.15983       273.892       275.052    
  24  0.136189      -1.99371      -5.99892       5.99892       273.876       279.875    
  25  0.660667     -0.414506      -1.24722       1.24722       270.221       271.468    
  26  0.473941     -0.746672      -2.24668       2.24668       273.626       275.873    
  27  0.792449     -0.232627     -0.699956      0.699956       275.789       276.489    
  28  0.960023     -0.407984E-01 -0.122759      0.122759       269.398       269.521    
  29  0.951587     -0.496238E-01 -0.149314      0.149314       273.824       273.973    
  30  0.197021      -1.62444      -4.88782       4.88782       277.156       282.043    
  31  0.664966     -0.408020      -1.22770       1.22770       271.753       272.981    
  32  0.832360     -0.183491     -0.552109      0.552109       273.815       274.367    
  33  0.589221     -0.528954      -1.59158       1.59158       277.403       278.995    
  34  0.163930      -1.80831      -5.44108       5.44108       272.126       277.567    
  35  0.967185E-01  -2.33595      -7.02870       7.02870       278.238       285.267    
  36  0.386895     -0.949603      -2.85728       2.85728       277.729       280.586    
  37  0.709158     -0.343678      -1.03410       1.03410       275.413       276.447    
  38  0.801784     -0.220916     -0.664718      0.664718       275.872       276.537    
  39  0.631968     -0.458917      -1.38085       1.38085       277.280       278.661    
  40  0.866237     -0.143597     -0.432071      0.432071       279.872       280.304    
  41  0.377203     -0.974972      -2.93362       2.93362       277.612       280.545    
  42  0.261898      -1.33980      -4.03136       4.03136       278.127       282.158    
  43  0.306694      -1.18191      -3.55626       3.55626       280.568       284.125    
  44  0.603055     -0.505747      -1.52175       1.52175       278.061       279.583    
  45  0.146094      -1.92351      -5.78768       5.78768       276.843       282.631    
  46  0.887903     -0.118893     -0.357741      0.357741       273.674       274.032    
  47  0.375387     -0.979798      -2.94814       2.94814       282.302       285.250    
  48  0.788597     -0.237500     -0.714618      0.714618       278.065       278.780    
  49  0.335228      -1.09295      -3.28859       3.28859       277.876       281.165    
  50  0.609447     -0.495204      -1.49003       1.49003       281.731       283.221    
  51  0.735916     -0.306639     -0.922653      0.922653       282.445       283.368    
  52  0.936649     -0.654462E-01 -0.196923      0.196923       284.162       284.359    
  53  0.594667     -0.519755      -1.56390       1.56390       281.266       282.830    
  54  0.521912     -0.650256      -1.95657       1.95657       279.661       281.617    
  55  0.735402     -0.307338     -0.924757      0.924757       274.154       275.079    
  56  0.909945     -0.943713E-01 -0.283956      0.283956       284.234       284.518    
  57  0.232597      -1.45845      -4.38836       4.38836       277.353       281.742    
  58  0.253136      -1.37383      -4.13375       4.13375       280.139       284.273    
  59  0.242799E-01  -3.71811      -11.1875       11.1875       277.598       288.785    
  60  0.138872      -1.97421      -5.94023       5.94023       282.492       288.432    
  61  0.570424     -0.561376      -1.68914       1.68914       286.521       288.210    
  62  0.746803     -0.291954     -0.878466      0.878466       286.088       286.966    
  63  0.768900     -0.262795     -0.790729      0.790729       281.252       282.042    
  64  0.376976     -0.975574      -2.93543       2.93543       252.588       255.524    
loop,thermsimp(1:2)       46   1.21133       2.17790    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    421        250.45          0.88          1.09         23.12          0.00          0.04         25.13
Just calling func    0   0         25.13


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  420    250.45        4.722     -1.314      4.606     -100.0     0.2267    
                      -1.224      2.606     -100.0      2.850     0.4170    
                       1.289    -0.6968      2.400      0.000      0.000    
                     -0.4018      0.000      0.000      0.000     -1.221    

                      -2.500     0.1116E+05 0.1619E+05 -1374.     -2625.    
                      -2.000     -7.944     -2.552     -2.360     0.6084    
                      -14.09     -1.067      1359.      0.000      3354.    

                       4764.      3323.      5073.      5329.      2500.    
                       4298.     0.6888E-01 0.1035E-01  0.000    -0.9930E-01
                      0.2165    -0.4161E-01 0.2018     0.7638E-01-0.1696    

                     -0.5236    -0.8705      0.000     0.3471     0.1068    
                      0.8541E-01 0.2095     0.2410     0.2745     0.9277E-01
                      0.8369E-01-0.2935E-01-0.5839    -0.4434      0.000    

                      -2.484     -5.109      6.188     -1.244      0.000    
                       0.000      9.082      8.909     -6518.     -4.000    
                     -0.2381    -0.4817      8.841      8.086    -0.1517E+05

                      -4.000     0.1474      1.765      9.424      9.296    
                      -6436.     -4.000     0.1085     0.9560      9.471    
                       9.082     -1942.     -2.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    250.45
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3.00892               442
loop is:       46
neval is:      420
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       46      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    3.00892               442
loop is:       47
neval is:      420


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      442
neval,tstepnext:      420     442

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.408943     -0.894179      -2.69052       2.69052       246.707       249.398    
   2  0.431368     -0.840794      -2.52989       2.52989       251.225       253.755    
   3  0.292375      -1.22972      -3.70013       3.70013       252.500       256.200    
   4  0.336431      -1.08936      -3.27781       3.27781       251.965       255.243    
   5  0.370622     -0.992574      -2.98658       2.98658       254.341       257.328    
   6  0.398679     -0.919597      -2.76700       2.76700       252.588       255.355    
   7  0.672261     -0.397108      -1.19487       1.19487       249.595       250.790    
   8  0.451252     -0.795728      -2.39429       2.39429       259.374       261.768    
   9  0.527060     -0.640440      -1.92704       1.92704       255.115       257.042    
  10  0.131951      -2.02533      -6.09405       6.09405       261.877       267.971    
  11  0.903524     -0.101452     -0.305262      0.305262       253.443       253.749    
  12  0.881507E-01  -2.42871      -7.30780       7.30780       256.866       264.174    
  13  0.464884     -0.765968      -2.30474       2.30474       264.341       266.645    
  14  0.985345     -0.147637E-01 -0.444227E-01  0.444227E-01   265.290       265.335    
  15  0.587696     -0.531546      -1.59938       1.59938       268.603       270.203    
  16  0.581244     -0.542585      -1.63260       1.63260       267.993       269.625    
  17  0.137299      -1.98559      -5.97450       5.97450       269.398       275.373    
  18  0.330005      -1.10865      -3.33583       3.33583       268.027       271.363    
  19  0.911104     -0.930980E-01 -0.280125      0.280125       270.617       270.897    
  20  0.487848     -0.717751      -2.15966       2.15966       268.366       270.525    
  21  0.518423     -0.656964      -1.97676       1.97676       270.221       272.198    
  22  0.645499     -0.437732      -1.31710       1.31710       264.230       265.547    
  23  0.914509     -0.893680E-01 -0.268901      0.268901       270.598       270.867    
  24  0.763582E-01  -2.57232      -7.73991       7.73991       271.753       279.493    
  25  0.708063     -0.345222      -1.03875       1.03875       272.884       273.923    
  26  0.719838     -0.328729     -0.989119      0.989119       273.824       274.813    
  27  0.113625E-01  -4.47744      -13.4723       13.4723       273.105       286.578    
  28  0.272258      -1.30101      -3.91463       3.91463       273.674       277.589    
  29  0.211076      -1.55554      -4.68049       4.68049       273.815       278.496    
  30  0.931648     -0.708004E-01 -0.213033      0.213033       273.892       274.105    
  31  0.572966     -0.556929      -1.67576       1.67576       274.154       275.830    
  32  0.116283      -2.15173      -6.47438       6.47438       273.626       280.101    
  33  0.247808      -1.39510      -4.19775       4.19775       275.413       279.611    
  34  0.294404      -1.22280      -3.67932       3.67932       275.789       279.468    
  35  0.252764E-01  -3.67788      -11.0665       11.0665       275.872       286.939    
  36  0.408562     -0.895111      -2.69332       2.69332       272.126       274.819    
  37  0.753478     -0.283056     -0.851694      0.851694       277.280       278.132    
  38  0.680565     -0.384832      -1.15793       1.15793       278.065       279.223    
  39  0.973188     -0.271778E-01 -0.817758E-01  0.817758E-01   277.403       277.485    
  40  0.986871     -0.132158E-01 -0.397654E-01  0.397654E-01   278.061       278.101    
  41  0.363246      -1.01267      -3.04706       3.04706       273.876       276.923    
  42  0.138088      -1.97986      -5.95725       5.95725       279.872       285.829    
  43  0.929547E-01  -2.37564      -7.14813       7.14813       277.612       284.760    
  44  0.781724     -0.246253     -0.740958      0.740958       277.729       278.470    
  45  0.732428     -0.311390     -0.936950      0.936950       277.876       278.813    
  46  0.294929      -1.22102      -3.67396       3.67396       279.661       283.335    
  47  0.406491     -0.900193      -2.70861       2.70861       277.353       280.062    
  48  0.721836E-01  -2.62854      -7.90908       7.90908       281.252       289.161    
  49  0.982586     -0.175676E-01 -0.528596E-01  0.528596E-01   277.156       277.208    
  50  0.211502E-01  -3.85611      -11.6027       11.6027       278.127       289.729    
  51  0.790632     -0.234923     -0.706865      0.706865       276.843       277.550    
  52  0.120538      -2.11579      -6.36625       6.36625       281.266       287.632    
  53  0.586949     -0.532817      -1.60321       1.60321       281.731       283.335    
  54  0.660552     -0.414680      -1.24774       1.24774       282.445       283.693    
  55  0.627691     -0.465708      -1.40128       1.40128       280.568       281.970    
  56  0.470013     -0.754996      -2.27172       2.27172       280.139       282.411    
  57  0.735726     -0.306897     -0.923431      0.923431       284.162       285.085    
  58  0.320562      -1.13768      -3.42319       3.42319       284.234       287.657    
  59  0.256015E-01  -3.66511      -11.0280       11.0280       282.302       293.330    
  60  0.364092      -1.01035      -3.04006       3.04006       278.238       281.278    
  61  0.483739     -0.726210      -2.18511       2.18511       286.088       288.273    
  62  0.311695      -1.16573      -3.50759       3.50759       286.521       290.029    
  63  0.981768     -0.184007E-01 -0.553662E-01  0.553662E-01   282.492       282.547    
  64  0.428011E-01  -3.15119      -9.48170       9.48170       250.450       259.932    
loop,thermsimp(1:2)       47   2.69052       2.52989    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    422        262.30          0.87          1.09         23.14          0.02          0.04         25.15
Just calling func    0   0         25.15


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    262.30
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3.00892               442
loop is:       47
neval is:      421
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       47      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    3.00892               442
loop is:       48
neval is:      421


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      442
neval,tstepnext:      421     442

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.813255     -0.206711     -0.621976      0.621976       246.707       247.329    
   2  0.101223E-01  -4.59302      -13.8200       13.8200       249.595       263.415    
   3  0.618937E-01  -2.78234      -8.37184       8.37184       253.443       261.815    
   4  0.206078      -1.57950      -4.75260       4.75260       251.225       255.978    
   5  0.867609     -0.142014     -0.427309      0.427309       251.965       252.392    
   6  0.578282     -0.547694      -1.64797       1.64797       252.588       254.236    
   7  0.531864     -0.631367      -1.89974       1.89974       252.500       254.400    
   8  0.304055      -1.19055      -3.58226       3.58226       255.115       258.697    
   9  0.540739     -0.614819      -1.84994       1.84994       254.341       256.191    
  10  0.476481     -0.741327      -2.23060       2.23060       250.450       252.681    
  11  0.610971     -0.492705      -1.48251       1.48251       259.374       260.856    
  12  0.735015     -0.307865     -0.926342      0.926342       256.866       257.792    
  13  0.961674     -0.390799E-01 -0.117588      0.117588       265.290       265.408    
  14  0.902502     -0.102585     -0.308669      0.308669       264.230       264.539    
  15  0.759072     -0.275659     -0.829436      0.829436       264.341       265.170    
  16  0.380028E-01  -3.27009      -9.83947       9.83947       261.877       271.716    
  17  0.413373     -0.883405      -2.65810       2.65810       267.993       270.651    
  18  0.260354      -1.34571      -4.04915       4.04915       268.603       272.652    
  19  0.170660      -1.76808      -5.32002       5.32002       268.366       273.686    
  20  0.563245     -0.574040      -1.72724       1.72724       270.598       272.325    
  21  0.861075     -0.149573     -0.450054      0.450054       270.617       271.067    
  22  0.797631     -0.226109     -0.680344      0.680344       268.027       268.707    
  23  0.370521E-01  -3.29543      -9.91570       9.91570       270.221       280.137    
  24  0.703530     -0.351645      -1.05807       1.05807       272.884       273.942    
  25  0.791216E-01  -2.53677      -7.63295       7.63295       273.892       281.525    
  26  0.136780      -1.98938      -5.98590       5.98590       273.824       279.810    
  27  0.409465     -0.892903      -2.68668       2.68668       272.126       274.812    
  28  0.476542     -0.741200      -2.23021       2.23021       269.398       271.629    
  29  0.169904      -1.77252      -5.33339       5.33339       274.154       279.487    
  30  0.483026     -0.727684      -2.18955       2.18955       273.876       276.066    
  31  0.740952     -0.299820     -0.902134      0.902134       277.156       278.058    
  32  0.367240      -1.00174      -3.01416       3.01416       277.403       280.417    
  33  0.704436     -0.350358      -1.05420       1.05420       276.843       277.897    
  34  0.703774     -0.351299      -1.05703       1.05703       273.674       274.731    
  35  0.547709     -0.602012      -1.81141       1.81141       278.061       279.873    
  36  0.236071      -1.44362      -4.34375       4.34375       277.280       281.624    
  37  0.512555     -0.668347      -2.01100       2.01100       277.729       279.740    
  38  0.894555     -0.111428     -0.335279      0.335279       273.815       274.150    
  39  0.100347      -2.29912      -6.91788       6.91788       277.876       284.794    
  40  0.689153     -0.372292      -1.12020       1.12020       278.065       279.185    
  41  0.188659      -1.66781      -5.01832       5.01832       275.789       280.807    
  42  0.623666     -0.472140      -1.42063       1.42063       271.753       273.173    
  43  0.610480     -0.493510      -1.48493       1.48493       275.413       276.898    
  44  0.724857     -0.321780     -0.968212      0.968212       277.353       278.322    
  45  0.320963      -1.13643      -3.41943       3.41943       273.626       277.046    
  46  0.287938      -1.24501      -3.74614       3.74614       278.238       281.984    
  47  0.935911     -0.662348E-01 -0.199296      0.199296       280.568       280.768    
  48  0.600810     -0.509476      -1.53297       1.53297       280.139       281.672    
  49  0.200068      -1.60910      -4.84165       4.84165       282.492       287.334    
  50  0.240600E-01  -3.72720      -11.2149       11.2149       281.731       292.946    
  51  0.953574     -0.475383E-01 -0.143039      0.143039       279.661       279.804    
  52  0.605754     -0.501281      -1.50832       1.50832       282.445       283.953    
  53  0.107166      -2.23338      -6.72006       6.72006       277.612       284.332    
  54  0.398218     -0.920755      -2.77048       2.77048       284.162       286.932    
  55  0.471444     -0.751956      -2.26258       2.26258       279.872       282.134    
  56  0.892797E-02  -4.71857      -14.1978       14.1978       273.105       287.303    
  57  0.246368      -1.40093      -4.21529       4.21529       275.872       280.088    
  58  0.900252E-01  -2.40767      -7.24448       7.24448       281.266       288.511    
  59  0.127742      -2.05775      -6.19160       6.19160       284.234       290.426    
  60  0.233391E-01  -3.75763      -11.3064       11.3064       286.088       297.394    
  61  0.109213      -2.21445      -6.66312       6.66312       281.252       287.915    
  62  0.486874E-01  -3.02234      -9.09398       9.09398       278.127       287.221    
  63  0.535603     -0.624363      -1.87866       1.87866       286.521       288.400    
  64  0.444520     -0.810761      -2.43952       2.43952       262.297       264.737    
loop,thermsimp(1:2)       48  0.621976       13.8200    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    423       3233.32          0.88          1.09         23.09          0.00          0.05         25.11
Just calling func    0   0         25.10


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    424        286.84          0.86          1.09         23.16          0.00          0.04         25.14
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3    286.84
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3.00892               442
loop is:       48
neval is:      423
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       48      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    3.00892               442
loop is:       49
neval is:      423


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      442
neval,tstepnext:      423     442

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.900563     -0.104735     -0.315139      0.315139       246.707       247.022    
   2  0.337202      -1.08707      -3.27092       3.27092       251.965       255.236    
   3  0.201324      -1.60284      -4.82282       4.82282       250.450       255.273    
   4  0.305897      -1.18451      -3.56409       3.56409       252.588       256.152    
   5  0.333562      -1.09793      -3.30358       3.30358       252.500       255.804    
   6  0.708340     -0.344831      -1.03757       1.03757       251.225       252.263    
   7  0.929963     -0.726100E-01 -0.218478      0.218478       254.341       254.560    
   8  0.954883     -0.461669E-01 -0.138913      0.138913       256.866       257.005    
   9  0.709141     -0.343701      -1.03417       1.03417       255.115       256.149    
  10  0.904936     -0.998906E-01 -0.300563      0.300563       259.374       259.675    
  11  0.764543     -0.268477     -0.807827      0.807827       253.443       254.251    
  12  0.297182      -1.21341      -3.65106       3.65106       249.595       253.246    
  13  0.472241     -0.750266      -2.25749       2.25749       264.230       266.487    
  14  0.601817     -0.507801      -1.52794       1.52794       262.297       263.825    
  15  0.274906      -1.29132      -3.88550       3.88550       264.341       268.226    
  16  0.979328     -0.208884E-01 -0.628517E-01  0.628517E-01   265.290       265.353    
  17  0.634279     -0.455267      -1.36986       1.36986       268.027       269.397    
  18  0.238460E-01  -3.73614      -11.2418       11.2418       267.993       279.234    
  19  0.302486      -1.19572      -3.59783       3.59783       270.617       274.215    
  20  0.454285     -0.789030      -2.37413       2.37413       269.398       271.772    
  21  0.850435     -0.162007     -0.487466      0.487466       261.877       262.364    
  22  0.562689     -0.575029      -1.73022       1.73022       270.598       272.328    
  23  0.351622      -1.04520      -3.14492       3.14492       268.603       271.748    
  24  0.978081     -0.221628E-01 -0.666862E-01  0.666862E-01   271.753       271.820    
  25  0.284594      -1.25669      -3.78129       3.78129       268.366       272.147    
  26  0.883683E-01  -2.42624      -7.30038       7.30038       272.884       280.185    
  27  0.217395      -1.52604      -4.59173       4.59173       273.815       278.407    
  28  0.405933     -0.901568      -2.71275       2.71275       273.674       276.387    
  29  0.951690     -0.495156E-01 -0.148989      0.148989       272.126       272.275    
  30  0.570178     -0.561806      -1.69043       1.69043       273.876       275.566    
  31  0.326664      -1.11882      -3.36645       3.36645       275.413       278.780    
  32  0.383874E-01  -3.26003      -9.80917       9.80917       273.626       283.435    
  33  0.630130     -0.461829      -1.38961       1.38961       276.843       278.233    
  34  0.902033     -0.103105     -0.310234      0.310234       277.156       277.466    
  35  0.192240      -1.64901      -4.96175       4.96175       277.353       282.315    
  36  0.836744     -0.178237     -0.536301      0.536301       278.065       278.601    
  37  0.481446     -0.730962      -2.19941       2.19941       274.154       276.353    
  38  0.801468     -0.221310     -0.665905      0.665905       277.729       278.395    
  39  0.929206     -0.734244E-01 -0.220929      0.220929       279.661       279.882    
  40  0.366038      -1.00502      -3.02403       3.02403       273.824       276.848    
  41  0.896697     -0.109037     -0.328085      0.328085       278.061       278.389    
  42  0.175481      -1.74022      -5.23620       5.23620       275.872       281.109    
  43  0.444632E-01  -3.11309      -9.36706       9.36706       270.221       279.588    
  44  0.469791     -0.755467      -2.27314       2.27314       277.403       279.676    
  45  0.475427     -0.743541      -2.23726       2.23726       280.568       282.806    
  46  0.568468     -0.564810      -1.69947       1.69947       275.789       277.489    
  47  0.684504     -0.379060      -1.14056       1.14056       273.892       275.032    
  48  0.207720      -1.57157      -4.72872       4.72872       277.280       282.009    
  49  0.332731      -1.10042      -3.31108       3.31108       280.139       283.450    
  50  0.109337E-01  -4.51591      -13.5880       13.5880       278.238       291.826    
  51  0.387975     -0.946815      -2.84889       2.84889       279.872       282.720    
  52  0.583841     -0.538126      -1.61918       1.61918       282.445       284.064    
  53  0.952086     -0.491003E-01 -0.147739      0.147739       277.612       277.759    
  54  0.596262     -0.517074      -1.55584       1.55584       277.876       279.432    
  55  0.767710     -0.264344     -0.795390      0.795390       284.162       284.957    
  56  0.321305E-01  -3.43795      -10.3445       10.3445       278.127       288.471    
  57  0.882163     -0.125378     -0.377253      0.377253       273.105       273.483    
  58  0.688790     -0.372818      -1.12178       1.12178       282.492       283.614    
  59  0.422749     -0.860978      -2.59062       2.59062       281.252       283.842    
  60  0.758230     -0.276768     -0.832775      0.832775       286.521       287.354    
  61  0.393861     -0.931758      -2.80359       2.80359       281.266       284.070    
  62  0.990158E-01  -2.31248      -6.95806       6.95806       284.234       291.192    
  63  0.536294     -0.623073      -1.87478       1.87478       281.731       283.606    
  64  0.287975E-01  -3.54747      -10.6741       10.6741       286.842       297.516    
loop,thermsimp(1:2)       49  0.315139       3.27092    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    425        270.37          0.88          1.09         23.15          0.00          0.04         25.16
Just calling func    0   0         25.16


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    270.37
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3.00892               442
loop is:       49
neval is:      424
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       49      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    3.00892               442
loop is:       50
neval is:      424


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      442
neval,tstepnext:      424     442

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.326509      -1.11930      -3.36788       3.36788       246.707       250.075    
   2  0.656045     -0.421526      -1.26834       1.26834       251.225       252.493    
   3  0.702016     -0.353799      -1.06455       1.06455       249.595       250.660    
   4  0.659850     -0.415743      -1.25094       1.25094       253.443       254.694    
   5  0.587501     -0.531877      -1.60038       1.60038       254.341       255.941    
   6  0.118734      -2.13087      -6.41162       6.41162       251.965       258.376    
   7  0.484942     -0.723727      -2.17764       2.17764       250.450       252.628    
   8  0.809010     -0.211944     -0.637723      0.637723       252.500       253.138    
   9  0.107401      -2.23119      -6.71348       6.71348       255.115       261.829    
  10  0.912046     -0.920651E-01 -0.277017      0.277017       252.588       252.865    
  11  0.752441     -0.284433     -0.855836      0.855836       256.866       257.722    
  12  0.389912     -0.941833      -2.83390       2.83390       259.374       262.208    
  13  0.805927     -0.215762     -0.649212      0.649212       261.877       262.526    
  14  0.537328     -0.621147      -1.86898       1.86898       262.297       264.166    
  15  0.276300      -1.28627      -3.87028       3.87028       265.290       269.161    
  16  0.618485     -0.480483      -1.44574       1.44574       264.230       265.676    
  17  0.130066      -2.03972      -6.13735       6.13735       264.341       270.478    
  18  0.885305     -0.121824     -0.366558      0.366558       268.027       268.393    
  19  0.513359     -0.666781      -2.00629       2.00629       268.603       270.610    
  20  0.235519      -1.44596      -4.35079       4.35079       269.398       273.749    
  21  0.693842     -0.365511      -1.09980       1.09980       271.753       272.853    
  22  0.445925     -0.807605      -2.43002       2.43002       268.366       270.796    
  23  0.946501     -0.549828E-01 -0.165439      0.165439       272.126       272.291    
  24  0.108015      -2.22549      -6.69632       6.69632       270.598       277.294    
  25  0.988375     -0.116930E-01 -0.351834E-01  0.351834E-01   273.105       273.141    
  26  0.931439     -0.710246E-01 -0.213708      0.213708       270.617       270.831    
  27  0.915176     -0.886393E-01 -0.266709      0.266709       273.892       274.159    
  28  0.670330     -0.399985      -1.20352       1.20352       273.876       275.080    
  29  0.172595      -1.75681      -5.28610       5.28610       274.154       279.440    
  30  0.496295     -0.700585      -2.10801       2.10801       273.674       275.782    
  31  0.627359     -0.466236      -1.40287       1.40287       273.824       275.227    
  32  0.914384     -0.895052E-01 -0.269314      0.269314       277.156       277.425    
  33  0.197109      -1.62400      -4.88649       4.88649       275.789       280.676    
  34  0.830736     -0.185444     -0.557985      0.557985       277.612       278.170    
  35  0.554634     -0.589446      -1.77360       1.77360       276.843       278.617    
  36  0.386467E-01  -3.25329      -9.78891       9.78891       278.061       287.850    
  37  0.259980      -1.34715      -4.05348       4.05348       277.729       281.782    
  38  0.876870     -0.131396     -0.395361      0.395361       273.815       274.210    
  39  0.651025     -0.429207      -1.29145       1.29145       278.065       279.356    
  40  0.171053      -1.76578      -5.31310       5.31310       275.413       280.726    
  41  0.708910     -0.344027      -1.03515       1.03515       267.993       269.028    
  42  0.501487     -0.690177      -2.07669       2.07669       277.876       279.953    
  43  0.766040     -0.266521     -0.801943      0.801943       270.221       271.023    
  44  0.189113      -1.66541      -5.01110       5.01110       277.403       282.414    
  45  0.250338      -1.38494      -4.16719       4.16719       279.661       283.828    
  46  0.830098     -0.186211     -0.560296      0.560296       272.884       273.445    
  47  0.337228      -1.08700      -3.27069       3.27069       275.872       279.143    
  48  0.290155      -1.23734      -3.72306       3.72306       277.280       281.003    
  49  0.382897     -0.959988      -2.88853       2.88853       277.353       280.242    
  50  0.484934     -0.723743      -2.17769       2.17769       279.872       282.049    
  51  0.867083     -0.142620     -0.429134      0.429134       280.568       280.997    
  52  0.151990E-02  -6.48911      -19.5252       19.5252       273.626       293.151    
  53  0.964961     -0.356680E-01 -0.107322      0.107322       280.139       280.247    
  54  0.128257      -2.05372      -6.17949       6.17949       281.731       287.911    
  55  0.846209     -0.166989     -0.502456      0.502456       282.492       282.994    
  56  0.347221      -1.05779      -3.18282       3.18282       281.252       284.435    
  57  0.488187     -0.717056      -2.15757       2.15757       282.445       284.603    
  58  0.321978      -1.13327      -3.40993       3.40993       281.266       284.676    
  59  0.182989E-02  -6.30350      -18.9667       18.9667       284.162       303.128    
  60  0.863080     -0.147248     -0.443058      0.443058       286.521       286.964    
  61  0.606807     -0.499544      -1.50309       1.50309       278.127       279.630    
  62  0.874411     -0.134204     -0.403811      0.403811       284.234       284.638    
  63  0.525999     -0.642455      -1.93310       1.93310       278.238       280.171    
  64  0.455800     -0.785701      -2.36412       2.36412       270.367       272.731    
loop,thermsimp(1:2)       50   3.36788       1.26834    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    426        262.35          0.88          1.10         23.06          0.05          0.04         25.12
Just calling func    0   0         25.12


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    262.35
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3.00892               442
loop is:       50
neval is:      425
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       50      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    3.00892               442
loop is:       51
neval is:      425


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      442
neval,tstepnext:      425     442

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.886088     -0.120938     -0.363895      0.363895       246.707       247.071    
   2  0.953882E-01  -2.34980      -7.07037       7.07037       249.595       256.666    
   3  0.875198     -0.133305     -0.401105      0.401105       251.225       251.626    
   4  0.401319     -0.913000      -2.74715       2.74715       250.450       253.198    
   5  0.288302      -1.24375      -3.74233       3.74233       252.588       256.331    
   6  0.596159E-01  -2.81983      -8.48466       8.48466       252.500       260.985    
   7  0.411979     -0.886782      -2.66826       2.66826       253.443       256.112    
   8  0.157950      -1.84548      -5.55290       5.55290       254.341       259.894    
   9  0.736512     -0.305830     -0.920219      0.920219       256.866       257.786    
  10  0.531935     -0.631235      -1.89934       1.89934       251.965       253.864    
  11  0.557201     -0.584829      -1.75971       1.75971       255.115       256.875    
  12  0.590342     -0.527053      -1.58586       1.58586       259.374       260.960    
  13  0.893645     -0.112447     -0.338343      0.338343       261.877       262.215    
  14  0.899172     -0.106281     -0.319792      0.319792       262.297       262.617    
  15  0.321510      -1.13473      -3.41430       3.41430       264.230       267.644    
  16  0.242259E-01  -3.72033      -11.1942       11.1942       268.027       279.221    
  17  0.646886     -0.435586      -1.31064       1.31064       267.993       269.303    
  18  0.998267     -0.173471E-02 -0.521960E-02  0.521960E-02   265.290       265.295    
  19  0.972297     -0.280942E-01 -0.845333E-01  0.845333E-01   264.341       264.425    
  20  0.309809      -1.17180      -3.52585       3.52585       268.603       272.129    
  21  0.816235     -0.203053     -0.610970      0.610970       268.366       268.977    
  22  0.984764     -0.153535E-01 -0.461976E-01  0.461976E-01   270.617       270.664    
  23  0.881026     -0.126668     -0.381134      0.381134       270.221       270.602    
  24  0.661336E-01  -2.71608      -8.17247       8.17247       272.126       280.298    
  25  0.410325     -0.890806      -2.68037       2.68037       270.367       273.047    
  26  0.104142E-03  -9.16976      -27.5911       27.5911       271.753       299.344    
  27  0.713949     -0.336943      -1.01384       1.01384       273.105       274.119    
  28  0.388242     -0.946126      -2.84682       2.84682       272.884       275.731    
  29  0.684780     -0.378657      -1.13935       1.13935       269.398       270.538    
  30  0.349297      -1.05183      -3.16488       3.16488       273.892       277.057    
  31  0.567533     -0.566456      -1.70442       1.70442       273.815       275.519    
  32  0.157115      -1.85078      -5.56884       5.56884       273.876       279.445    
  33  0.780641     -0.247640     -0.745130      0.745130       273.824       274.569    
  34  0.485397     -0.722789      -2.17482       2.17482       273.674       275.849    
  35  0.682517     -0.381968      -1.14931       1.14931       270.598       271.747    
  36  0.536829     -0.622075      -1.87178       1.87178       277.156       279.027    
  37  0.464187     -0.767467      -2.30925       2.30925       277.612       279.921    
  38  0.519819     -0.654274      -1.96866       1.96866       276.843       278.812    
  39  0.974252     -0.260857E-01 -0.784898E-01  0.784898E-01   275.872       275.951    
  40  0.386009     -0.951894      -2.86418       2.86418       278.065       280.929    
  41  0.217232      -1.52679      -4.59399       4.59399       274.154       278.748    
  42  0.173910      -1.74922      -5.26326       5.26326       278.127       283.390    
  43  0.860958     -0.149709     -0.450464      0.450464       277.876       278.326    
  44  0.893333     -0.112796     -0.339394      0.339394       278.238       278.578    
  45  0.957904     -0.430073E-01 -0.129406      0.129406       277.353       277.483    
  46  0.671164E-01  -2.70133      -8.12808       8.12808       280.139       288.267    
  47  0.133176      -2.01608      -6.06624       6.06624       275.789       281.855    
  48  0.574942     -0.553487      -1.66540       1.66540       275.413       277.079    
  49  0.302503      -1.19566      -3.59766       3.59766       280.568       284.166    
  50  0.325458      -1.12252      -3.37758       3.37758       277.280       280.658    
  51  0.344075      -1.06690      -3.21021       3.21021       277.729       280.939    
  52  0.432303     -0.838628      -2.52337       2.52337       279.872       282.395    
  53  0.855511     -0.156056     -0.469560      0.469560       277.403       277.873    
  54  0.391695     -0.937273      -2.82018       2.82018       282.492       285.312    
  55  0.613683     -0.488277      -1.46919       1.46919       279.661       281.130    
  56  0.694249     -0.364925      -1.09803       1.09803       281.252       282.350    
  57  0.155282      -1.86251      -5.60416       5.60416       282.445       288.049    
  58  0.632564     -0.457973      -1.37801       1.37801       284.234       285.612    
  59  0.519744     -0.654418      -1.96909       1.96909       281.266       283.235    
  60  0.486666     -0.720176      -2.16696       2.16696       286.521       288.688    
  61  0.538449E-01  -2.92165      -8.79102       8.79102       278.061       286.852    
  62  0.278027      -1.28004      -3.85153       3.85153       281.731       285.583    
  63  0.120374      -2.11715      -6.37035       6.37035       273.626       279.997    
  64  0.409455     -0.892928      -2.68675       2.68675       262.350       265.037    
loop,thermsimp(1:2)       51  0.363895       7.07037    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    427        253.89          0.88          1.09         23.14          0.00          0.04         25.15
Just calling func    0   0         25.15


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    253.89
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3.00892               442
loop is:       51
neval is:      426
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       51      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    3.00892               442
loop is:       52
neval is:      426


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      442
neval,tstepnext:      426     442

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.827214E-01  -2.49228      -7.49907       7.49907       246.707       254.206    
   2  0.625679E-01  -2.77150      -8.33924       8.33924       251.225       259.564    
   3  0.254112      -1.36998      -4.12216       4.12216       250.450       254.573    
   4  0.582152     -0.541023      -1.62790       1.62790       251.965       253.593    
   5  0.596882     -0.516035      -1.55271       1.55271       253.443       254.996    
   6  0.149943      -1.89750      -5.70944       5.70944       252.588       258.298    
   7  0.496252     -0.700672      -2.10827       2.10827       249.595       251.704    
   8  0.129782      -2.04190      -6.14392       6.14392       255.115       261.259    
   9  0.740869     -0.299931     -0.902470      0.902470       256.866       257.768    
  10  0.124297      -2.08508      -6.27386       6.27386       254.341       260.615    
  11  0.524903     -0.644542      -1.93938       1.93938       259.374       261.313    
  12  0.852180     -0.159958     -0.481301      0.481301       252.500       252.982    
  13  0.823232     -0.194517     -0.585287      0.585287       261.877       262.462    
  14  0.256230      -1.36168      -4.09719       4.09719       262.297       266.395    
  15  0.258393      -1.35327      -4.07190       4.07190       264.341       268.412    
  16  0.324549      -1.12532      -3.38600       3.38600       262.350       265.736    
  17  0.504546     -0.684097      -2.05839       2.05839       265.290       267.349    
  18  0.774284     -0.255817     -0.769733      0.769733       264.230       265.000    
  19  0.452119E-01  -3.09639      -9.31681       9.31681       268.366       277.683    
  20  0.325288      -1.12305      -3.37916       3.37916       267.993       271.372    
  21  0.156855      -1.85244      -5.57384       5.57384       269.398       274.972    
  22  0.440906     -0.818924      -2.46408       2.46408       270.221       272.685    
  23  0.313753E-02  -5.76432      -17.3444       17.3444       270.617       287.962    
  24  0.252529      -1.37623      -4.14097       4.14097       270.598       274.739    
  25  0.799267     -0.224060     -0.674179      0.674179       268.603       269.277    
  26  0.961010     -0.397708E-01 -0.119667      0.119667       270.367       270.486    
  27  0.843711     -0.169946     -0.511353      0.511353       273.105       273.617    
  28  0.120002      -2.12025      -6.37966       6.37966       273.824       280.204    
  29  0.489889     -0.713576      -2.14710       2.14710       273.815       275.962    
  30  0.317246      -1.14808      -3.45448       3.45448       272.884       276.339    
  31  0.761766     -0.272116     -0.818775      0.818775       273.674       274.493    
  32  0.468167     -0.758930      -2.28356       2.28356       275.872       278.156    
  33  0.634908     -0.454275      -1.36688       1.36688       273.892       275.259    
  34  0.410644     -0.890029      -2.67803       2.67803       275.413       278.091    
  35  0.330962      -1.10575      -3.32712       3.32712       277.353       280.681    
  36  0.275422      -1.28945      -3.87986       3.87986       277.403       281.283    
  37  0.186052      -1.68173      -5.06020       5.06020       277.876       282.936    
  38  0.361178      -1.01838      -3.06424       3.06424       278.238       281.302    
  39  0.850100     -0.162402     -0.488654      0.488654       274.154       274.643    
  40  0.649062     -0.432226      -1.30054       1.30054       276.843       278.144    
  41  0.322988      -1.13014      -3.40051       3.40051       277.156       280.556    
  42  0.284964      -1.25539      -3.77738       3.77738       268.027       271.804    
  43  0.685335     -0.377848      -1.13692       1.13692       273.876       275.013    
  44  0.262422      -1.33780      -4.02534       4.02534       277.612       281.637    
  45  0.767375     -0.264780     -0.796703      0.796703       273.626       274.423    
  46  0.109385      -2.21288      -6.65839       6.65839       272.126       278.784    
  47  0.306599      -1.18221      -3.55719       3.55719       277.280       280.837    
  48  0.406201     -0.900907      -2.71076       2.71076       278.065       280.776    
  49  0.423601     -0.858964      -2.58456       2.58456       277.729       280.313    
  50  0.525023     -0.644313      -1.93869       1.93869       279.661       281.599    
  51  0.947103E-01  -2.35693      -7.09183       7.09183       275.789       282.881    
  52  0.408122     -0.896189      -2.69657       2.69657       281.252       283.948    
  53  0.463749     -0.768411      -2.31209       2.31209       279.872       282.184    
  54  0.985471     -0.146353E-01 -0.440365E-01  0.440365E-01   281.266       281.310    
  55  0.956569E-01  -2.34699      -7.06191       7.06191       278.127       285.188    
  56  0.529007     -0.636753      -1.91594       1.91594       280.568       282.484    
  57  0.648382     -0.433275      -1.30369       1.30369       282.492       283.796    
  58  0.910357     -0.939189E-01 -0.282595      0.282595       281.731       282.014    
  59  0.469822     -0.755402      -2.27295       2.27295       284.234       286.507    
  60  0.254916      -1.36682      -4.11266       4.11266       278.061       282.174    
  61  0.724030E-01  -2.62551      -7.89995       7.89995       282.445       290.345    
  62  0.719606     -0.329052     -0.990092      0.990092       280.139       281.129    
  63  0.354448      -1.03719      -3.12084       3.12084       286.521       289.642    
  64  0.587821     -0.531332      -1.59874       1.59874       253.891       255.490    
loop,thermsimp(1:2)       52   7.49907       8.33924    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    428        274.69          0.88          1.06         23.01          0.23          0.05         25.23
Just calling func    0   0         25.23


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    274.69
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3.00892               442
loop is:       52
neval is:      427
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       52      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    3.00892               442
loop is:       53
neval is:      427


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      442
neval,tstepnext:      427     442

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.265283      -1.32696      -3.99272       3.99272       249.595       253.588    
   2  0.615112     -0.485951      -1.46219       1.46219       252.500       253.962    
   3  0.424286E-01  -3.15993      -9.50800       9.50800       251.965       261.473    
   4  0.726479     -0.319546     -0.961488      0.961488       246.707       247.669    
   5  0.402368     -0.910388      -2.73929       2.73929       250.450       253.190    
   6  0.958941E-01  -2.34451      -7.05445       7.05445       253.443       260.498    
   7  0.137400      -1.98486      -5.97228       5.97228       253.891       259.863    
   8  0.887138     -0.119755     -0.360334      0.360334       256.866       257.226    
   9  0.655001     -0.423119      -1.27313       1.27313       252.588       253.861    
  10  0.304836      -1.18798      -3.57454       3.57454       251.225       254.800    
  11  0.346250      -1.06059      -3.19125       3.19125       254.341       257.532    
  12  0.608663E-01  -2.79908      -8.42220       8.42220       255.115       263.537    
  13  0.307248      -1.18010      -3.55083       3.55083       259.374       262.925    
  14  0.695201     -0.363555      -1.09391       1.09391       261.877       262.970    
  15  0.628698     -0.464104      -1.39645       1.39645       264.230       265.626    
  16  0.609308     -0.495432      -1.49072       1.49072       262.350       263.841    
  17  0.335400      -1.09243      -3.28704       3.28704       262.297       265.584    
  18  0.910258     -0.940273E-01 -0.282921      0.282921       265.290       265.573    
  19  0.439254E-01  -3.12526      -9.40368       9.40368       264.341       273.744    
  20  0.978338     -0.219001E-01 -0.658958E-01  0.658958E-01   268.603       268.669    
  21  0.282939      -1.26252      -3.79884       3.79884       270.367       274.165    
  22  0.763165     -0.270281     -0.813256      0.813256       267.993       268.806    
  23  0.206330      -1.57828      -4.74892       4.74892       268.027       272.776    
  24  0.228687      -1.47540      -4.43937       4.43937       270.221       274.660    
  25  0.634584E-01  -2.75737      -8.29672       8.29672       273.105       281.402    
  26  0.665745E-01  -2.70943      -8.15248       8.15248       273.626       281.779    
  27  0.761759     -0.272125     -0.818805      0.818805       273.674       274.493    
  28  0.636615     -0.451590      -1.35880       1.35880       274.154       275.513    
  29  0.804468     -0.217574     -0.654664      0.654664       270.598       271.253    
  30  0.508586     -0.676120      -2.03439       2.03439       269.398       271.433    
  31  0.232797      -1.45759      -4.38578       4.38578       273.876       278.262    
  32  0.932655     -0.697196E-01 -0.209781      0.209781       273.892       274.102    
  33  0.970411     -0.300359E-01 -0.903758E-01  0.903758E-01   273.815       273.905    
  34  0.151993      -1.88392      -5.66857       5.66857       272.884       278.553    
  35  0.571421     -0.559629      -1.68388       1.68388       268.366       270.050    
  36  0.673371     -0.395458      -1.18990       1.18990       275.413       276.603    
  37  0.828783     -0.187797     -0.565066      0.565066       276.843       277.408    
  38  0.285628      -1.25307      -3.77038       3.77038       275.872       279.643    
  39  0.127849      -2.05691      -6.18908       6.18908       272.126       278.315    
  40  0.101247      -2.29019      -6.89101       6.89101       273.824       280.715    
  41  0.593355     -0.521962      -1.57055       1.57055       277.729       279.299    
  42  0.362303      -1.01527      -3.05488       3.05488       277.156       280.210    
  43  0.754411     -0.281818     -0.847969      0.847969       277.353       278.201    
  44  0.917727     -0.858556E-01 -0.258333      0.258333       278.065       278.323    
  45  0.281495      -1.26764      -3.81424       3.81424       277.280       281.094    
  46  0.757766     -0.277381     -0.834619      0.834619       280.139       280.974    
  47  0.721843E-01  -2.62853      -7.90905       7.90905       277.403       285.312    
  48  0.995421     -0.458990E-02 -0.138107E-01  0.138107E-01   278.238       278.252    
  49  0.101230      -2.29036      -6.89153       6.89153       281.266       288.158    
  50  0.477194     -0.739832      -2.22610       2.22610       279.661       281.887    
  51  0.414653E-01  -3.18290      -9.57710       9.57710       277.612       287.189    
  52  0.927379     -0.753934E-01 -0.226853      0.226853       281.731       281.958    
  53  0.642274     -0.442741      -1.33217       1.33217       278.061       279.393    
  54  0.510784     -0.671809      -2.02142       2.02142       279.872       281.893    
  55  0.394196     -0.930907      -2.80103       2.80103       280.568       283.369    
  56  0.665507     -0.407206      -1.22525       1.22525       275.789       277.014    
  57  0.444368     -0.811101      -2.44054       2.44054       277.876       280.317    
  58  0.386291     -0.951164      -2.86198       2.86198       282.492       285.354    
  59  0.185997      -1.68202      -5.06108       5.06108       281.252       286.313    
  60  0.430546     -0.842700      -2.53562       2.53562       278.127       280.662    
  61  0.720151     -0.328295     -0.987814      0.987814       284.234       285.222    
  62  0.289744      -1.23876      -3.72733       3.72733       270.617       274.345    
  63  0.678945     -0.387216      -1.16510       1.16510       286.521       287.686    
  64  0.444970     -0.809748      -2.43647       2.43647       274.686       277.123    
loop,thermsimp(1:2)       53   3.99272       1.46219    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    429        264.52          0.88          1.08         23.06          0.46          0.05         25.52
Just calling func    0   0         25.52


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    264.52
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3.00892               442
loop is:       53
neval is:      428
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       53      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    3.00892               442
loop is:       54
neval is:      428


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      442
neval,tstepnext:      428     442

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.551084     -0.595868      -1.79292       1.79292       246.707       248.500    
   2  0.390343     -0.940730      -2.83058       2.83058       250.450       253.281    
   3  0.506127     -0.680968      -2.04898       2.04898       249.595       251.644    
   4  0.964820     -0.358141E-01 -0.107762      0.107762       252.588       252.696    
   5  0.647775     -0.434212      -1.30651       1.30651       252.500       253.807    
   6  0.251459      -1.38048      -4.15375       4.15375       251.225       255.379    
   7  0.908837     -0.955893E-01 -0.287621      0.287621       256.866       257.154    
   8  0.800726     -0.222236     -0.668691      0.668691       254.341       255.010    
   9  0.480867E-01  -3.03475      -9.13133       9.13133       253.891       263.022    
  10  0.859127     -0.151839     -0.456871      0.456871       253.443       253.900    
  11  0.618632     -0.480244      -1.44502       1.44502       251.965       253.410    
  12  0.262118      -1.33896      -4.02883       4.02883       259.374       263.403    
  13  0.373394     -0.985121      -2.96415       2.96415       261.877       264.841    
  14  0.698954     -0.358170      -1.07771       1.07771       255.115       256.193    
  15  0.698639     -0.358621      -1.07906       1.07906       262.350       263.430    
  16  0.683233     -0.380919      -1.14616       1.14616       265.290       266.436    
  17  0.475083     -0.744266      -2.23944       2.23944       262.297       264.537    
  18  0.957666E-01  -2.34584      -7.05846       7.05846       264.230       271.288    
  19  0.767182     -0.265031     -0.797459      0.797459       268.603       269.401    
  20  0.418812     -0.870332      -2.61876       2.61876       267.993       270.611    
  21  0.940661     -0.611725E-01 -0.184063      0.184063       268.366       268.550    
  22  0.827990     -0.188754     -0.567947      0.567947       270.598       271.166    
  23  0.463008     -0.770011      -2.31690       2.31690       269.398       271.715    
  24  0.723352     -0.323860     -0.974469      0.974469       268.027       269.001    
  25  0.330269      -1.10785      -3.33343       3.33343       264.341       267.674    
  26  0.640927E-02  -5.05001      -15.1951       15.1951       273.815       289.010    
  27  0.849682     -0.162893     -0.490133      0.490133       273.892       274.382    
  28  0.457568     -0.781830      -2.35247       2.35247       270.367       272.719    
  29  0.720244     -0.328166     -0.987425      0.987425       270.617       271.605    
  30  0.953392     -0.477287E-01 -0.143612      0.143612       273.674       273.818    
  31  0.322501      -1.13165      -3.40505       3.40505       270.221       273.626    
  32  0.335509      -1.09211      -3.28607       3.28607       274.154       277.440    
  33  0.140389      -1.96334      -5.90754       5.90754       275.413       281.321    
  34  0.429265     -0.845681      -2.54459       2.54459       275.789       278.334    
  35  0.775769E-01  -2.55649      -7.69227       7.69227       274.686       282.379    
  36  0.414811     -0.879933      -2.64765       2.64765       276.843       279.491    
  37  0.183764      -1.69410      -5.09742       5.09742       277.353       282.451    
  38  0.357541      -1.02851      -3.09470       3.09470       278.238       281.333    
  39  0.401419E-02  -5.51792      -16.6030       16.6030       273.876       290.479    
  40  0.399411     -0.917764      -2.76148       2.76148       272.126       274.887    
  41  0.795187     -0.229178     -0.689579      0.689579       278.065       278.755    
  42  0.673332     -0.395517      -1.19008       1.19008       272.884       274.074    
  43  0.898211     -0.107350     -0.323009      0.323009       277.729       278.052    
  44  0.769733     -0.261711     -0.787469      0.787469       278.061       278.849    
  45  0.791938     -0.233272     -0.701897      0.701897       275.872       276.574    
  46  0.537104     -0.621563      -1.87023       1.87023       277.156       279.026    
  47  0.313282      -1.16065      -3.49231       3.49231       277.876       281.368    
  48  0.516025     -0.661601      -1.99071       1.99071       278.127       280.117    
  49  0.119673      -2.12299      -6.38791       6.38791       273.824       280.212    
  50  0.221920      -1.50544      -4.52975       4.52975       280.139       284.669    
  51  0.639805     -0.446592      -1.34376       1.34376       277.280       278.624    
  52  0.947460     -0.539710E-01 -0.162395      0.162395       273.105       273.268    
  53  0.786966     -0.239570     -0.720849      0.720849       273.626       274.347    
  54  0.990455     -0.959131E-02 -0.288595E-01  0.288595E-01   279.661       279.690    
  55  0.959621     -0.412173E-01 -0.124020      0.124020       279.872       279.996    
  56  0.617783     -0.481618      -1.44915       1.44915       281.731       283.181    
  57  0.958668     -0.422110E-01 -0.127010      0.127010       280.568       280.695    
  58  0.723379     -0.323823     -0.974357      0.974357       284.234       285.208    
  59  0.602684     -0.506362      -1.52361       1.52361       277.403       278.927    
  60  0.897895     -0.107702     -0.324068      0.324068       282.492       282.816    
  61  0.849418     -0.163204     -0.491067      0.491067       281.252       281.743    
  62  0.478641     -0.736804      -2.21699       2.21699       277.612       279.829    
  63  0.148154      -1.90950      -5.74555       5.74555       286.521       292.267    
  64  0.600585     -0.509852      -1.53411       1.53411       264.524       266.058    
loop,thermsimp(1:2)       54   1.79292       2.83058    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    430        252.94          0.88          1.09         23.14          0.05          0.05         25.22
Just calling func    0   0         25.22


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    252.94
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3.00892               442
loop is:       54
neval is:      429
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       54      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    3.00892               442
loop is:       55
neval is:      429


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      442
neval,tstepnext:      429     442

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.146220      -1.92264      -5.78509       5.78509       246.707       252.492    
   2  0.620947     -0.476510      -1.43378       1.43378       249.595       251.029    
   3  0.177272      -1.73007      -5.20564       5.20564       252.588       257.794    
   4  0.884738     -0.122464     -0.368483      0.368483       250.450       250.819    
   5  0.304829      -1.18800      -3.57461       3.57461       251.965       255.539    
   6  0.555834     -0.587286      -1.76710       1.76710       252.500       254.267    
   7  0.396848     -0.924202      -2.78085       2.78085       253.443       256.224    
   8  0.570840     -0.560646      -1.68694       1.68694       254.341       256.028    
   9  0.726203     -0.319926     -0.962633      0.962633       251.225       252.188    
  10  0.917349E-01  -2.38885      -7.18787       7.18787       255.115       262.303    
  11  0.456603     -0.783941      -2.35882       2.35882       256.866       259.225    
  12  0.602259     -0.507068      -1.52573       1.52573       253.891       255.417    
  13  0.496888E-01  -3.00198      -9.03272       9.03272       259.374       268.407    
  14  0.583997     -0.537860      -1.61838       1.61838       262.350       263.969    
  15  0.200789E-01  -3.90809      -11.7591       11.7591       262.297       274.056    
  16  0.422855     -0.860726      -2.58986       2.58986       261.877       264.466    
  17  0.535645     -0.624284      -1.87842       1.87842       264.524       266.403    
  18  0.413266     -0.883663      -2.65887       2.65887       265.290       267.949    
  19  0.342457      -1.07161      -3.22439       3.22439       264.341       267.565    
  20  0.638345     -0.448876      -1.35063       1.35063       268.366       269.716    
  21  0.655695     -0.422060      -1.26994       1.26994       268.027       269.297    
  22  0.629392     -0.463001      -1.39313       1.39313       268.603       269.996    
  23  0.977606     -0.226486E-01 -0.681479E-01  0.681479E-01   267.993       268.061    
  24  0.752980E-01  -2.58630      -7.78198       7.78198       270.598       278.380    
  25  0.874423     -0.134191     -0.403772      0.403772       264.230       264.634    
  26  0.587202     -0.532387      -1.60191       1.60191       270.617       272.219    
  27  0.880682     -0.127059     -0.382310      0.382310       269.398       269.781    
  28  0.878591E-01  -2.43202      -7.31777       7.31777       270.367       277.684    
  29  0.695678     -0.362869      -1.09185       1.09185       273.105       274.197    
  30  0.124758      -2.08138      -6.26271       6.26271       270.221       276.484    
  31  0.605547     -0.501622      -1.50934       1.50934       273.674       275.184    
  32  0.650291     -0.430335      -1.29485       1.29485       272.884       274.179    
  33  0.639591     -0.446926      -1.34477       1.34477       273.626       274.971    
  34  0.872983     -0.135839     -0.408729      0.408729       273.892       274.301    
  35  0.291503E-01  -3.53529      -10.6374       10.6374       272.126       282.763    
  36  0.290539      -1.23602      -3.71908       3.71908       275.872       279.591    
  37  0.759349     -0.275294     -0.828340      0.828340       274.154       274.982    
  38  0.599537     -0.511597      -1.53936       1.53936       277.729       279.268    
  39  0.948707     -0.526557E-01 -0.158437      0.158437       275.789       275.948    
  40  0.180828      -1.71021      -5.14589       5.14589       277.280       282.426    
  41  0.385708     -0.952674      -2.86652       2.86652       278.065       280.931    
  42  0.299380      -1.20604      -3.62889       3.62889       278.061       281.690    
  43  0.853891     -0.157952     -0.475265      0.475265       277.403       277.878    
  44  0.502000E-01  -2.99174      -9.00192       9.00192       277.156       286.158    
  45  0.510049     -0.673249      -2.02575       2.02575       276.843       278.869    
  46  0.500368     -0.692411      -2.08341       2.08341       279.661       281.744    
  47  0.947833     -0.535774E-01 -0.161210      0.161210       277.612       277.773    
  48  0.147734      -1.91235      -5.75410       5.75410       279.872       285.626    
  49  0.448609     -0.801603      -2.41196       2.41196       278.127       280.539    
  50  0.589816E-01  -2.83053      -8.51685       8.51685       273.824       282.341    
  51  0.914696     -0.891630E-01 -0.268285      0.268285       280.568       280.837    
  52  0.187672E-01  -3.97564      -11.9624       11.9624       275.413       287.376    
  53  0.842801     -0.171024     -0.514599      0.514599       278.238       278.753    
  54  0.394775     -0.929438      -2.79661       2.79661       277.876       280.673    
  55  0.830091E-01  -2.48880      -7.48862       7.48862       281.252       288.740    
  56  0.448195     -0.802527      -2.41474       2.41474       274.686       277.101    
  57  0.685603     -0.377456      -1.13574       1.13574       277.353       278.489    
  58  0.773262     -0.257137     -0.773706      0.773706       282.492       283.266    
  59  0.785103E-01  -2.54453      -7.65628       7.65628       281.731       289.388    
  60  0.163001      -1.81400      -5.45818       5.45818       280.139       285.597    
  61  0.679089     -0.387003      -1.16446       1.16446       284.234       285.399    
  62  0.748996     -0.289022     -0.869644      0.869644       273.815       274.685    
  63  0.856909     -0.154424     -0.464650      0.464650       273.876       274.341    
  64  0.336175      -1.09012      -3.28010       3.28010       252.943       256.223    
loop,thermsimp(1:2)       55   5.78509       1.43378    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    431        250.93          0.88          1.08         23.09          0.09          0.05         25.19
Just calling func    0   0         25.18


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    432        259.07          0.88          1.09         23.09          0.05          0.04         25.14
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    250.93
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3.00892               442
loop is:       55
neval is:      431
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       55      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    3.00892               442
loop is:       56
neval is:      431


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      442
neval,tstepnext:      431     442

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.500984     -0.691182      -2.07971       2.07971       250.450       252.530    
   2  0.324862      -1.12436      -3.38310       3.38310       249.595       252.978    
   3  0.195419      -1.63261      -4.91240       4.91240       251.225       256.137    
   4  0.203731      -1.59096      -4.78706       4.78706       246.707       251.494    
   5  0.177968      -1.72615      -5.19386       5.19386       252.500       257.694    
   6  0.835197     -0.180088     -0.541870      0.541870       253.891       254.433    
   7  0.302476      -1.19575      -3.59793       3.59793       251.965       255.563    
   8  0.352903E-01  -3.34415      -10.0623       10.0623       254.341       264.403    
   9  0.308671      -1.17548      -3.53693       3.53693       252.943       256.480    
  10  0.409306E-01  -3.19588      -9.61615       9.61615       253.443       263.060    
  11  0.615747     -0.484919      -1.45908       1.45908       252.588       254.047    
  12  0.766359     -0.266105     -0.800690      0.800690       256.866       257.667    
  13  0.625912     -0.468545      -1.40982       1.40982       255.115       256.525    
  14  0.435348     -0.831610      -2.50225       2.50225       262.350       264.853    
  15  0.341014      -1.07583      -3.23709       3.23709       261.877       265.114    
  16  0.434268E-01  -3.13668      -9.43802       9.43802       264.230       273.668    
  17  0.604743     -0.502951      -1.51334       1.51334       264.524       266.037    
  18  0.536278     -0.623102      -1.87487       1.87487       264.341       266.215    
  19  0.207674      -1.57179      -4.72938       4.72938       265.290       270.020    
  20  0.985598E-01  -2.31709      -6.97195       6.97195       267.993       274.965    
  21  0.814506     -0.205174     -0.617352      0.617352       259.374       259.991    
  22  0.447321     -0.804478      -2.42061       2.42061       268.027       270.447    
  23  0.741331     -0.299308     -0.900594      0.900594       268.366       269.266    
  24  0.601378     -0.508531      -1.53013       1.53013       269.398       270.928    
  25  0.421939E-01  -3.16548      -9.52469       9.52469       268.603       278.128    
  26  0.837477     -0.177362     -0.533667      0.533667       270.617       271.151    
  27  0.297606      -1.21198      -3.64677       3.64677       262.297       265.944    
  28  0.383069     -0.959540      -2.88718       2.88718       272.884       275.772    
  29  0.291041      -1.23429      -3.71389       3.71389       273.105       276.819    
  30  0.788773     -0.237276     -0.713946      0.713946       273.892       274.606    
  31  0.471794     -0.751213      -2.26034       2.26034       273.876       276.136    
  32  0.313755      -1.15914      -3.48777       3.48777       273.815       277.303    
  33  0.878815     -0.129181     -0.388694      0.388694       273.626       274.015    
  34  0.442284     -0.815802      -2.45469       2.45469       274.154       276.609    
  35  0.577998     -0.548185      -1.64945       1.64945       273.674       275.324    
  36  0.167851      -1.78468      -5.36996       5.36996       275.789       281.159    
  37  0.317031      -1.14875      -3.45651       3.45651       270.221       273.678    
  38  0.645763     -0.437323      -1.31587       1.31587       274.686       276.002    
  39  0.682139     -0.382522      -1.15098       1.15098       270.367       271.518    
  40  0.116437      -2.15041      -6.47041       6.47041       277.612       284.082    
  41  0.510594     -0.672180      -2.02254       2.02254       277.403       279.426    
  42  0.807696E-02  -4.81874      -14.4992       14.4992       270.598       285.097    
  43  0.367650      -1.00062      -3.01080       3.01080       277.353       280.364    
  44  0.446943     -0.805324      -2.42316       2.42316       278.238       280.661    
  45  0.181490      -1.70655      -5.13489       5.13489       276.843       281.978    
  46  0.912521     -0.915438E-01 -0.275448      0.275448       277.729       278.004    
  47  0.692870     -0.366912      -1.10401       1.10401       275.872       276.976    
  48  0.317456      -1.14742      -3.45249       3.45249       278.127       281.579    
  49  0.776642     -0.252776     -0.760582      0.760582       277.876       278.637    
  50  0.248677      -1.39160      -4.18722       4.18722       280.568       284.756    
  51  0.931207     -0.712734E-01 -0.214456      0.214456       278.065       278.279    
  52  0.127901      -2.05650      -6.18786       6.18786       278.061       284.249    
  53  0.780843     -0.247381     -0.744352      0.744352       279.661       280.405    
  54  0.773205     -0.257211     -0.773929      0.773929       273.824       274.598    
  55  0.764817     -0.268119     -0.806749      0.806749       277.280       278.087    
  56  0.230689      -1.46668      -4.41314       4.41314       272.126       276.539    
  57  0.424204     -0.857541      -2.58027       2.58027       282.492       285.072    
  58  0.281344      -1.26818      -3.81585       3.81585       284.234       288.050    
  59  0.523215     -0.647764      -1.94907       1.94907       280.139       282.088    
  60  0.392415     -0.935434      -2.81465       2.81465       279.872       282.686    
  61  0.351563      -1.04537      -3.14543       3.14543       277.156       280.301    
  62  0.176215      -1.73605      -5.22364       5.22364       275.413       280.637    
  63  0.383277     -0.958998      -2.88555       2.88555       281.252       284.137    
  64  0.855506     -0.156062     -0.469580      0.469580       250.929       251.398    
loop,thermsimp(1:2)       56   2.07971       3.38310    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    433        272.11          0.88          1.09         23.12          0.01          0.04         25.13
Just calling func    0   0         25.13


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    272.11
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3.00892               442
loop is:       56
neval is:      432
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       56      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    3.00892               442
loop is:       57
neval is:      432


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      442
neval,tstepnext:      432     442

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.842839     -0.170980     -0.514465      0.514465       250.929       251.443    
   2  0.986423     -0.136696E-01 -0.411308E-01  0.411308E-01   246.707       246.748    
   3  0.633540     -0.456433      -1.37337       1.37337       250.450       251.824    
   4  0.518217E-01  -2.95995      -8.90625       8.90625       249.595       258.502    
   5  0.187161      -1.67579      -5.04231       5.04231       252.588       257.631    
   6  0.148298      -1.90853      -5.74263       5.74263       253.891       259.634    
   7  0.438795     -0.823722      -2.47852       2.47852       251.965       254.443    
   8  0.763297     -0.270109     -0.812736      0.812736       251.225       252.038    
   9  0.338275      -1.08390      -3.26136       3.26136       252.943       256.205    
  10  0.918815     -0.846702E-01 -0.254766      0.254766       255.115       255.370    
  11  0.349782      -1.05045      -3.16071       3.16071       256.866       260.027    
  12  0.131188      -2.03112      -6.11149       6.11149       252.500       258.612    
  13  0.961440     -0.393229E-01 -0.118320      0.118320       259.374       259.492    
  14  0.489949     -0.713455      -2.14673       2.14673       253.443       255.590    
  15  0.149956      -1.89742      -5.70918       5.70918       254.341       260.050    
  16  0.684004     -0.379791      -1.14276       1.14276       262.350       263.493    
  17  0.314778      -1.15589      -3.47798       3.47798       261.877       265.355    
  18  0.615260     -0.485711      -1.46147       1.46147       262.297       263.759    
  19  0.432805     -0.837468      -2.51988       2.51988       264.524       267.044    
  20  0.362224      -1.01549      -3.05554       3.05554       264.341       267.396    
  21  0.622697     -0.473696      -1.42531       1.42531       268.366       269.791    
  22  0.486392     -0.720740      -2.16865       2.16865       265.290       267.459    
  23  0.465513     -0.764615      -2.30067       2.30067       268.027       270.328    
  24  0.738251     -0.303471     -0.913120      0.913120       269.398       270.311    
  25  0.384600     -0.955551      -2.87518       2.87518       270.617       273.493    
  26  0.293922      -1.22444      -3.68425       3.68425       270.367       274.051    
  27  0.371803     -0.989390      -2.97700       2.97700       264.230       267.207    
  28  0.237589      -1.43721      -4.32447       4.32447       270.221       274.546    
  29  0.286147      -1.25125      -3.76491       3.76491       273.626       277.391    
  30  0.500459     -0.692230      -2.08287       2.08287       273.824       275.907    
  31  0.134865      -2.00348      -6.02833       6.02833       273.892       279.920    
  32  0.660213     -0.415193      -1.24928       1.24928       267.993       269.242    
  33  0.481817E-01  -3.03278      -9.12539       9.12539       273.674       282.800    
  34  0.683728     -0.380195      -1.14398       1.14398       272.884       274.028    
  35  0.634601     -0.454758      -1.36833       1.36833       274.686       276.055    
  36  0.195153      -1.63397      -4.91649       4.91649       273.876       278.793    
  37  0.176401      -1.73499      -5.22047       5.22047       272.126       277.346    
  38  0.770296     -0.260980     -0.785270      0.785270       274.154       274.939    
  39  0.223005      -1.50056      -4.51507       4.51507       273.105       277.621    
  40  0.530844E-01  -2.93587      -8.83381       8.83381       275.872       284.706    
  41  0.778354     -0.250574     -0.753957      0.753957       273.815       274.569    
  42  0.118362E-02  -6.73917      -20.2777       20.2777       277.729       298.007    
  43  0.658087     -0.418418      -1.25899       1.25899       277.280       278.539    
  44  0.832154E-01  -2.48632      -7.48115       7.48115       268.603       276.084    
  45  0.569178     -0.563562      -1.69571       1.69571       278.065       279.761    
  46  0.511101     -0.671188      -2.01955       2.01955       277.876       279.896    
  47  0.585157     -0.535875      -1.61241       1.61241       277.403       279.016    
  48  0.821991     -0.196026     -0.589828      0.589828       277.156       277.745    
  49  0.433318     -0.836284      -2.51631       2.51631       277.353       279.870    
  50  0.286210      -1.25103      -3.76426       3.76426       279.661       283.425    
  51  0.455679     -0.785966      -2.36491       2.36491       275.413       277.778    
  52  0.729010     -0.316067     -0.951023      0.951023       278.238       279.189    
  53  0.608401     -0.496921      -1.49520       1.49520       275.789       277.284    
  54  0.432221     -0.838819      -2.52394       2.52394       278.127       280.651    
  55  0.772117     -0.258620     -0.778167      0.778167       276.843       277.621    
  56  0.380207     -0.967041      -2.90975       2.90975       280.139       283.049    
  57  0.636340     -0.452023      -1.36010       1.36010       279.872       281.232    
  58  0.327756      -1.11549      -3.35642       3.35642       277.612       280.968    
  59  0.382236     -0.961716      -2.89373       2.89373       281.252       284.145    
  60  0.531883     -0.631332      -1.89963       1.89963       278.061       279.961    
  61  0.607532     -0.498350      -1.49950       1.49950       280.568       282.068    
  62  0.468455E-01  -3.06090      -9.21002       9.21002       282.492       291.702    
  63  0.900653     -0.104635     -0.314840      0.314840       270.598       270.913    
  64  0.590161     -0.527360      -1.58679       1.58679       272.111       273.698    
loop,thermsimp(1:2)       57  0.514465      0.411308E-01

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    434        246.00          0.86          1.09         23.14          0.00          0.06         25.15
Just calling func    0   0         25.15


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    435        231.32          0.86          1.09         23.12          0.00          0.04         25.11
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    231.32
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3.00892               442
loop is:       57
neval is:      434
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       57      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    3.00892               442
loop is:       58
neval is:      434


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      442
neval,tstepnext:      434     442

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.524788     -0.644761      -1.94004       1.94004       246.707       248.647    
   2  0.210443      -1.55854      -4.68954       4.68954       250.929       255.618    
   3  0.930464     -0.720719E-01 -0.216859      0.216859       250.450       250.667    
   4  0.858664     -0.152378     -0.458494      0.458494       251.225       251.684    
   5  0.285726      -1.25272      -3.76934       3.76934       251.965       255.734    
   6  0.144917      -1.93160      -5.81203       5.81203       255.115       260.927    
   7  0.999977     -0.230243E-04 -0.692784E-04  0.692784E-04   253.443       253.443    
   8  0.985482     -0.146243E-01 -0.440033E-01  0.440033E-01   252.943       252.987    
   9  0.204255      -1.58839      -4.77934       4.77934       252.588       257.368    
  10  0.932647     -0.697284E-01 -0.209807      0.209807       249.595       249.805    
  11  0.916829     -0.868346E-01 -0.261279      0.261279       252.500       252.761    
  12  0.468002     -0.759282      -2.28462       2.28462       259.374       261.659    
  13  0.314730      -1.15604      -3.47844       3.47844       253.891       257.370    
  14  0.641708     -0.443621      -1.33482       1.33482       256.866       258.201    
  15  0.829165     -0.187336     -0.563679      0.563679       254.341       254.905    
  16  0.163052E-01  -4.11627      -12.3855       12.3855       262.350       274.736    
  17  0.795714     -0.228516     -0.687586      0.687586       262.297       262.985    
  18  0.933380     -0.689433E-01 -0.207445      0.207445       261.877       262.084    
  19  0.839430E-01  -2.47762      -7.45496       7.45496       264.524       271.979    
  20  0.684979     -0.378367      -1.13848       1.13848       264.230       265.368    
  21  0.473112     -0.748422      -2.25195       2.25195       264.341       266.592    
  22  0.513710     -0.666097      -2.00424       2.00424       265.290       267.294    
  23  0.360837      -1.01933      -3.06708       3.06708       267.993       271.060    
  24  0.427332E-01  -3.15278      -9.48647       9.48647       268.366       277.852    
  25  0.772426     -0.258219     -0.776962      0.776962       269.398       270.175    
  26  0.514081     -0.665375      -2.00206       2.00206       268.027       270.029    
  27  0.794349     -0.230233     -0.692753      0.692753       270.598       271.291    
  28  0.306573      -1.18230      -3.55745       3.55745       270.617       274.175    
  29  0.542954     -0.610731      -1.83764       1.83764       272.111       273.949    
  30  0.309169      -1.17387      -3.53208       3.53208       272.884       276.416    
  31  0.870005     -0.139256     -0.419011      0.419011       270.367       270.786    
  32  0.559982     -0.579850      -1.74472       1.74472       270.221       271.966    
  33  0.779248     -0.249426     -0.750505      0.750505       273.815       274.566    
  34  0.852492     -0.159591     -0.480198      0.480198       274.154       274.634    
  35  0.513103E-01  -2.96986      -8.93609       8.93609       273.824       282.760    
  36  0.843623     -0.170050     -0.511666      0.511666       274.686       275.198    
  37  0.514962E-01  -2.96625      -8.92521       8.92521       268.603       277.528    
  38  0.509762     -0.673812      -2.02745       2.02745       275.789       277.817    
  39  0.511862E-01  -2.97229      -8.94338       8.94338       272.126       281.069    
  40  0.118788      -2.13041      -6.41025       6.41025       273.626       280.036    
  41  0.156747      -1.85312      -5.57590       5.57590       273.105       278.681    
  42  0.715854     -0.334278      -1.00582       1.00582       276.843       277.849    
  43  0.472923     -0.748824      -2.25315       2.25315       277.156       279.409    
  44  0.105826      -2.24596      -6.75791       6.75791       275.413       282.171    
  45  0.214159      -1.54104      -4.63687       4.63687       277.280       281.917    
  46  0.212749      -1.54764      -4.65674       4.65674       273.876       278.533    
  47  0.173051      -1.75417      -5.27816       5.27816       277.403       282.681    
  48  0.301411      -1.19928      -3.60854       3.60854       278.238       281.847    
  49  0.438447E-01  -3.12710      -9.40921       9.40921       278.065       287.474    
  50  0.480396     -0.733144      -2.20597       2.20597       277.353       279.559    
  51  0.537259     -0.621276      -1.86937       1.86937       277.876       279.745    
  52  0.252945      -1.37458      -4.13601       4.13601       273.892       278.028    
  53  0.273135      -1.29779      -3.90495       3.90495       278.061       281.966    
  54  0.225234      -1.49061      -4.48515       4.48515       278.127       282.612    
  55  0.443550     -0.812944      -2.44609       2.44609       277.612       280.058    
  56  0.592768     -0.522951      -1.57352       1.57352       279.872       281.445    
  57  0.455824     -0.785648      -2.36396       2.36396       280.568       282.932    
  58  0.630261     -0.461621      -1.38898       1.38898       273.674       275.063    
  59  0.901310     -0.103906     -0.312644      0.312644       280.139       280.452    
  60  0.114663      -2.16576      -6.51659       6.51659       279.661       286.177    
  61  0.349469      -1.05134      -3.16340       3.16340       281.252       284.415    
  62  0.316083      -1.15175      -3.46553       3.46553       275.872       279.338    
  63  0.447795     -0.803419      -2.41743       2.41743       282.492       284.909    
  64  0.360287      -1.02086      -3.07167       3.07167       231.316       234.387    
loop,thermsimp(1:2)       58   1.94004       4.68954    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    436        246.47          0.88          1.09         23.11          0.00          0.04         25.12
Just calling func    0   0         25.11


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    246.47
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3.00892               442
loop is:       58
neval is:      435
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       58      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    3.00892               442
loop is:       59
neval is:      435


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      442
neval,tstepnext:      435     442

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.810144     -0.210543     -0.633509      0.633509       231.316       231.949    
   2  0.897699     -0.107920     -0.324723      0.324723       246.707       247.032    
   3  0.719626     -0.329023     -0.990007      0.990007       249.595       250.585    
   4  0.415410     -0.878490      -2.64331       2.64331       250.450       253.094    
   5  0.991404     -0.863283E-02 -0.259755E-01  0.259755E-01   251.225       251.251    
   6  0.700708     -0.355664      -1.07016       1.07016       252.500       253.570    
   7  0.358389      -1.02614      -3.08756       3.08756       252.943       256.031    
   8  0.726731     -0.319199     -0.960446      0.960446       253.443       254.404    
   9  0.386831     -0.949769      -2.85778       2.85778       254.341       257.199    
  10  0.294784      -1.22151      -3.67544       3.67544       250.929       254.604    
  11  0.315848      -1.15249      -3.46777       3.46777       251.965       255.433    
  12  0.284632E-01  -3.55914      -10.7092       10.7092       252.588       263.297    
  13  0.316608      -1.15009      -3.46054       3.46054       253.891       257.352    
  14  0.309580      -1.17254      -3.52808       3.52808       256.866       260.394    
  15  0.758095     -0.276946     -0.833310      0.833310       255.115       255.948    
  16  0.132565      -2.02068      -6.08007       6.08007       259.374       265.454    
  17  0.963676     -0.369997E-01 -0.111329      0.111329       261.877       261.988    
  18  0.428996     -0.846309      -2.54648       2.54648       262.297       264.844    
  19  0.975676     -0.246243E-01 -0.740926E-01  0.740926E-01   264.230       264.304    
  20  0.475146     -0.744134      -2.23904       2.23904       264.341       266.580    
  21  0.507593     -0.678075      -2.04028       2.04028       265.290       267.331    
  22  0.275170      -1.29037      -3.88261       3.88261       268.027       271.909    
  23  0.475456     -0.743481      -2.23708       2.23708       269.398       271.635    
  24  0.302172      -1.19676      -3.60095       3.60095       270.367       273.967    
  25  0.243313      -1.41341      -4.25284       4.25284       267.993       272.245    
  26  0.356568      -1.03123      -3.10289       3.10289       270.598       273.701    
  27  0.630291     -0.461573      -1.38884       1.38884       270.221       271.610    
  28  0.642369     -0.442593      -1.33173       1.33173       264.524       265.856    
  29  0.593424     -0.521846      -1.57019       1.57019       272.111       273.681    
  30  0.813415     -0.206514     -0.621384      0.621384       270.617       271.239    
  31  0.623760     -0.471989      -1.42018       1.42018       273.815       275.235    
  32  0.314127      -1.15796      -3.48421       3.48421       274.154       277.638    
  33  0.333295      -1.09873      -3.30599       3.30599       262.350       265.656    
  34  0.974282     -0.260545E-01 -0.783960E-01  0.783960E-01   273.674       273.753    
  35  0.217685      -1.52471      -4.58773       4.58773       274.686       279.274    
  36  0.327903      -1.11504      -3.35506       3.35506       272.884       276.239    
  37  0.336622      -1.08880      -3.27610       3.27610       268.603       271.879    
  38  0.569408     -0.563159      -1.69450       1.69450       275.789       277.484    
  39  0.577250E-01  -2.85206      -8.58164       8.58164       276.843       285.425    
  40  0.237530      -1.43746      -4.32521       4.32521       268.366       272.691    
  41  0.622163     -0.474553      -1.42789       1.42789       273.892       275.320    
  42  0.476244     -0.741825      -2.23210       2.23210       273.876       276.108    
  43  0.914828     -0.890196E-01 -0.267853      0.267853       273.105       273.373    
  44  0.555890     -0.587184      -1.76679       1.76679       275.872       277.639    
  45  0.874902     -0.133644     -0.402124      0.402124       277.156       277.558    
  46  0.637871     -0.449619      -1.35287       1.35287       277.353       278.706    
  47  0.574852     -0.553643      -1.66587       1.66587       277.876       279.542    
  48  0.753498     -0.283029     -0.851613      0.851613       273.626       274.478    
  49  0.678645     -0.387657      -1.16643       1.16643       277.612       278.778    
  50  0.361720      -1.01688      -3.05972       3.05972       280.139       283.199    
  51  0.123381      -2.09248      -6.29611       6.29611       272.126       278.422    
  52  0.350198      -1.04926      -3.15713       3.15713       279.872       283.029    
  53  0.392572     -0.935035      -2.81345       2.81345       278.238       281.052    
  54  0.567106     -0.567208      -1.70669       1.70669       277.280       278.987    
  55  0.583382     -0.538913      -1.62155       1.62155       278.061       279.683    
  56  0.128820      -2.04934      -6.16630       6.16630       275.413       281.580    
  57  0.180317      -1.71304      -5.15440       5.15440       278.127       283.281    
  58  0.447281     -0.804568      -2.42088       2.42088       277.403       279.824    
  59  0.638289E-01  -2.75155      -8.27920       8.27920       273.824       282.103    
  60  0.689733     -0.371451      -1.11767       1.11767       280.568       281.686    
  61  0.997591     -0.241199E-02 -0.725749E-02  0.725749E-02   281.252       281.259    
  62  0.726899     -0.318968     -0.959750      0.959750       282.492       283.452    
  63  0.714747     -0.335826      -1.01048       1.01048       279.661       280.671    
  64  0.792529     -0.232527     -0.699655      0.699655       246.469       247.168    
loop,thermsimp(1:2)       59  0.633509      0.324723    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    437        244.83          0.87          1.09         23.12          0.00          0.04         25.12
Just calling func    0   0         25.12


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    244.83
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3.00892               442
loop is:       59
neval is:      436
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       59      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    3.00892               442
loop is:       60
neval is:      436


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      442
neval,tstepnext:      436     442

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.421109     -0.864863      -2.60231       2.60231       231.316       233.918    
   2  0.422022     -0.862697      -2.59579       2.59579       246.707       249.303    
   3  0.295550      -1.21892      -3.66762       3.66762       246.469       250.136    
   4  0.624681     -0.470513      -1.41574       1.41574       249.595       251.011    
   5  0.768652     -0.263117     -0.791700      0.791700       251.225       252.017    
   6  0.888855     -0.117822     -0.354516      0.354516       250.450       250.805    
   7  0.509140     -0.675031      -2.03112       2.03112       252.500       254.531    
   8  0.493628     -0.705973      -2.12422       2.12422       253.443       255.568    
   9  0.781578     -0.246440     -0.741520      0.741520       250.929       251.670    
  10  0.617265     -0.482456      -1.45167       1.45167       251.965       253.416    
  11  0.335801      -1.09124      -3.28344       3.28344       255.115       258.399    
  12  0.570262     -0.561660      -1.68999       1.68999       252.943       254.633    
  13  0.159269      -1.83716      -5.52788       5.52788       254.341       259.869    
  14  0.339767      -1.07950      -3.24812       3.24812       253.891       257.139    
  15  0.493989     -0.705242      -2.12202       2.12202       256.866       258.988    
  16  0.839254     -0.175242     -0.527289      0.527289       261.877       262.404    
  17  0.421889E-01  -3.16560      -9.52504       9.52504       252.588       262.113    
  18  0.278070      -1.27988      -3.85107       3.85107       264.230       268.081    
  19  0.942016E-01  -2.36232      -7.10804       7.10804       262.297       269.405    
  20  0.627802E-01  -2.76812      -8.32905       8.32905       259.374       267.703    
  21  0.228221      -1.47744      -4.44551       4.44551       262.350       266.796    
  22  0.929298     -0.733263E-01 -0.220633      0.220633       264.524       264.745    
  23  0.505346     -0.682512      -2.05363       2.05363       264.341       266.394    
  24  0.181316      -1.70751      -5.13778       5.13778       265.290       270.428    
  25  0.430977     -0.841701      -2.53261       2.53261       270.617       273.150    
  26  0.161604      -1.82261      -5.48409       5.48409       270.221       275.705    
  27  0.428774     -0.846826      -2.54803       2.54803       269.398       271.946    
  28  0.178213      -1.72477      -5.18971       5.18971       268.603       273.793    
  29  0.440884E-01  -3.12156      -9.39253       9.39253       268.027       277.419    
  30  0.224754      -1.49275      -4.49157       4.49157       267.993       272.484    
  31  0.174128      -1.74796      -5.25949       5.25949       268.366       273.625    
  32  0.798091     -0.225532     -0.678609      0.678609       273.105       273.784    
  33  0.303667E-01  -3.49441      -10.5144       10.5144       272.111       282.625    
  34  0.256290      -1.36145      -4.09649       4.09649       270.598       274.694    
  35  0.367468      -1.00112      -3.01229       3.01229       273.674       276.686    
  36  0.455395     -0.786590      -2.36679       2.36679       270.367       272.733    
  37  0.618612     -0.480277      -1.44512       1.44512       273.626       275.071    
  38  0.348147      -1.05513      -3.17481       3.17481       273.815       276.990    
  39  0.930736     -0.717801E-01 -0.215981      0.215981       273.892       274.108    
  40  0.822258     -0.195701     -0.588849      0.588849       273.876       274.465    
  41  0.444031     -0.811860      -2.44282       2.44282       272.884       275.327    
  42  0.599515     -0.511634      -1.53947       1.53947       275.789       277.329    
  43  0.866231     -0.143603     -0.432092      0.432092       277.156       277.588    
  44  0.143678      -1.94018      -5.83786       5.83786       274.154       279.992    
  45  0.280081      -1.27267      -3.82938       3.82938       275.872       279.702    
  46  0.834705E-01  -2.48326      -7.47195       7.47195       272.126       279.598    
  47  0.514478     -0.664603      -1.99974       1.99974       277.353       279.353    
  48  0.358853      -1.02484      -3.08368       3.08368       277.612       280.695    
  49  0.432015     -0.839295      -2.52537       2.52537       277.280       279.805    
  50  0.959030     -0.418333E-01 -0.125873      0.125873       274.686       274.812    
  51  0.236715      -1.44090      -4.33555       4.33555       277.876       282.212    
  52  0.741102     -0.299618     -0.901526      0.901526       278.061       278.963    
  53  0.971037     -0.293910E-01 -0.884353E-01  0.884353E-01   277.403       277.492    
  54  0.362643      -1.01434      -3.05206       3.05206       279.661       282.713    
  55  0.719521     -0.329170     -0.990447      0.990447       278.238       279.229    
  56  0.291024      -1.23435      -3.71406       3.71406       281.252       284.966    
  57  0.138234      -1.97881      -5.95408       5.95408       275.413       281.367    
  58  0.429879E-01  -3.14684      -9.46859       9.46859       280.568       290.037    
  59  0.323316      -1.12913      -3.39745       3.39745       273.824       277.221    
  60  0.590735     -0.526388      -1.58386       1.58386       279.872       281.455    
  61  0.286837      -1.24884      -3.75767       3.75767       280.139       283.897    
  62  0.141252      -1.95721      -5.88910       5.88910       278.127       284.016    
  63  0.500198     -0.692752      -2.08444       2.08444       282.492       284.576    
  64  0.972784     -0.275935E-01 -0.830266E-01  0.830266E-01   244.829       244.912    
loop,thermsimp(1:2)       60   2.60231       2.59579    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    438        250.48          0.88          1.09         23.16          0.16          0.04         25.33
Just calling func    0   0         25.33


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    250.48
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3.00892               442
loop is:       60
neval is:      437
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       60      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    3.00892               442
loop is:       61
neval is:      437


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      442
neval,tstepnext:      437     442

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.297049      -1.21386      -3.65241       3.65241       231.316       234.968    
   2  0.575341     -0.552793      -1.66331       1.66331       244.829       246.492    
   3  0.202897      -1.59506      -4.79940       4.79940       246.707       251.507    
   4  0.154497      -1.86758      -5.61940       5.61940       246.469       252.088    
   5  0.990348     -0.969851E-02 -0.291821E-01  0.291821E-01   250.450       250.480    
   6  0.189774      -1.66192      -5.00059       5.00059       249.595       254.596    
   7  0.744626     -0.294873     -0.887251      0.887251       250.929       251.816    
   8  0.927855     -0.748799E-01 -0.225308      0.225308       251.225       251.450    
   9  0.730698     -0.313755     -0.944064      0.944064       251.965       252.909    
  10  0.375841     -0.978590      -2.94450       2.94450       252.500       255.445    
  11  0.792754     -0.232243     -0.698800      0.698800       252.943       253.642    
  12  0.232963      -1.45687      -4.38362       4.38362       253.443       257.827    
  13  0.816440     -0.202802     -0.610215      0.610215       253.891       254.501    
  14  0.626790     -0.467144      -1.40560       1.40560       255.115       256.521    
  15  0.943587     -0.580664E-01 -0.174717      0.174717       256.866       257.041    
  16  0.790178     -0.235497     -0.708593      0.708593       254.341       255.050    
  17  0.318791      -1.14322      -3.43986       3.43986       252.588       256.028    
  18  0.982573     -0.175804E-01 -0.528980E-01  0.528980E-01   261.877       261.929    
  19  0.959024     -0.418390E-01 -0.125890      0.125890       264.524       264.650    
  20  0.309588      -1.17251      -3.52800       3.52800       264.341       267.869    
  21  0.255297      -1.36533      -4.10817       4.10817       262.350       266.459    
  22  0.287931      -1.24504      -3.74622       3.74622       259.374       263.120    
  23  0.948191     -0.531995E-01 -0.160073      0.160073       264.230       264.390    
  24  0.231941      -1.46127      -4.39686       4.39686       262.297       266.694    
  25  0.730836E-01  -2.61615      -7.87180       7.87180       265.290       273.162    
  26  0.130964      -2.03283      -6.11664       6.11664       269.398       275.515    
  27  0.199641      -1.61124      -4.84809       4.84809       267.993       272.841    
  28  0.375837     -0.978600      -2.94453       2.94453       270.367       273.311    
  29  0.584992     -0.536158      -1.61326       1.61326       270.617       272.231    
  30  0.505862     -0.681491      -2.05055       2.05055       268.366       270.416    
  31  0.431310     -0.840928      -2.53029       2.53029       273.105       275.636    
  32  0.273049E-01  -3.60069      -10.8342       10.8342       268.603       279.437    
  33  0.865419E-01  -2.44713      -7.36322       7.36322       273.892       281.255    
  34  0.174989      -1.74303      -5.24464       5.24464       273.876       279.121    
  35  0.547517     -0.602362      -1.81246       1.81246       270.598       272.410    
  36  0.562902E-02  -5.17982      -15.5857       15.5857       274.686       290.272    
  37  0.386997     -0.949338      -2.85649       2.85649       273.626       276.483    
  38  0.750107     -0.287539     -0.865183      0.865183       272.884       273.750    
  39  0.218818      -1.51951      -4.57210       4.57210       270.221       274.793    
  40  0.821700     -0.196380     -0.590891      0.590891       273.674       274.265    
  41  0.223897      -1.49657      -4.50306       4.50306       273.815       278.318    
  42  0.744973     -0.294407     -0.885848      0.885848       273.824       274.710    
  43  0.279239      -1.27569      -3.83844       3.83844       275.789       279.628    
  44  0.210659      -1.55751      -4.68644       4.68644       268.027       272.713    
  45  0.998203     -0.179835E-02 -0.541111E-02  0.541111E-02   277.403       277.409    
  46  0.355772      -1.03347      -3.10962       3.10962       277.156       280.265    
  47  0.437893     -0.825781      -2.48471       2.48471       278.061       280.546    
  48  0.897806E-01  -2.41039      -7.25267       7.25267       278.238       285.491    
  49  0.970127     -0.303283E-01 -0.912556E-01  0.912556E-01   277.353       277.445    
  50  0.463485     -0.768981      -2.31381       2.31381       272.126       274.440    
  51  0.605373     -0.501911      -1.51021       1.51021       275.872       277.383    
  52  0.622934     -0.473314      -1.42417       1.42417       277.280       278.704    
  53  0.937920     -0.640902E-01 -0.192843      0.192843       274.154       274.347    
  54  0.130922      -2.03316      -6.11761       6.11761       277.612       283.729    
  55  0.165920      -1.79625      -5.40478       5.40478       275.413       280.818    
  56  0.797155     -0.226707     -0.682143      0.682143       279.872       280.554    
  57  0.172586      -1.75686      -5.28625       5.28625       277.876       283.162    
  58  0.150998E-02  -6.49566      -19.5449       19.5449       272.111       291.656    
  59  0.134911      -2.00314      -6.02730       6.02730       279.661       285.688    
  60  0.358158      -1.02678      -3.08951       3.08951       280.139       283.229    
  61  0.734411     -0.308686     -0.928813      0.928813       278.127       279.055    
  62  0.567422     -0.566653      -1.70501       1.70501       282.492       284.197    
  63  0.454507     -0.788542      -2.37266       2.37266       281.252       283.624    
  64  0.739757     -0.301433     -0.906989      0.906989       250.480       251.387    
loop,thermsimp(1:2)       61   3.65241       1.66331    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    439        280.33          0.88          1.09         23.11          0.07          0.04         25.20
Just calling func    0   0         25.20


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    280.33
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3.00892               442
loop is:       61
neval is:      438
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       61      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    3.00892               442
loop is:       62
neval is:      438


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      442
neval,tstepnext:      438     442

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.176971      -1.73177      -5.21077       5.21077       231.316       236.527    
   2  0.163120      -1.81327      -5.45599       5.45599       244.829       250.285    
   3  0.828064     -0.188664     -0.567677      0.567677       250.450       251.018    
   4  0.491219     -0.710866      -2.13894       2.13894       250.480       252.619    
   5  0.473397     -0.747822      -2.25014       2.25014       251.225       253.475    
   6  0.737394     -0.304633     -0.916617      0.916617       246.707       247.624    
   7  0.206273      -1.57855      -4.74974       4.74974       250.929       255.679    
   8  0.354259      -1.03773      -3.12244       3.12244       246.469       249.591    
   9  0.233194      -1.45588      -4.38064       4.38064       251.965       256.345    
  10  0.118120E-01  -4.43864      -13.3555       13.3555       252.943       266.299    
  11  0.918073     -0.854782E-01 -0.257197      0.257197       253.891       254.148    
  12  0.845317     -0.168044     -0.505632      0.505632       249.595       250.101    
  13  0.706964     -0.346775      -1.04342       1.04342       254.341       255.385    
  14  0.779001     -0.249743     -0.751456      0.751456       252.500       253.252    
  15  0.455959     -0.785352      -2.36306       2.36306       252.588       254.951    
  16  0.849694     -0.162880     -0.490092      0.490092       255.115       255.605    
  17  0.516839     -0.660024      -1.98596       1.98596       256.866       258.852    
  18  0.892086     -0.114192     -0.343596      0.343596       253.443       253.787    
  19  0.297598      -1.21201      -3.64685       3.64685       261.877       265.523    
  20  0.719255E-01  -2.63213      -7.91986       7.91986       259.374       267.294    
  21  0.722825     -0.324588     -0.976660      0.976660       264.230       265.207    
  22  0.550765     -0.596446      -1.79466       1.79466       264.524       266.319    
  23  0.988777     -0.112866E-01 -0.339606E-01  0.339606E-01   262.350       262.384    
  24  0.706438     -0.347520      -1.04566       1.04566       262.297       263.343    
  25  0.630672     -0.460969      -1.38702       1.38702       264.341       265.728    
  26  0.377261     -0.974818      -2.93315       2.93315       268.366       271.299    
  27  0.149262E-01  -4.20464      -12.6514       12.6514       270.617       283.269    
  28  0.185115      -1.68678      -5.07539       5.07539       270.598       275.673    
  29  0.836458     -0.178579     -0.537330      0.537330       268.027       268.564    
  30  0.778304     -0.250638     -0.754151      0.754151       267.993       268.747    
  31  0.495633     -0.701920      -2.11202       2.11202       265.290       267.402    
  32  0.795767E-01  -2.53103      -7.61569       7.61569       270.367       277.982    
  33  0.361545      -1.01737      -3.06119       3.06119       272.884       275.946    
  34  0.451858     -0.794387      -2.39025       2.39025       273.674       276.064    
  35  0.923485     -0.796009E-01 -0.239513      0.239513       274.154       274.394    
  36  0.189492      -1.66341      -5.00507       5.00507       272.126       277.131    
  37  0.357280      -1.02924      -3.09689       3.09689       273.824       276.921    
  38  0.113039      -2.18002      -6.55952       6.55952       270.221       276.781    
  39  0.418587     -0.870870      -2.62038       2.62038       269.398       272.019    
  40  0.732527E-01  -2.61384      -7.86484       7.86484       273.105       280.970    
  41  0.768904     -0.262790     -0.790714      0.790714       273.626       274.417    
  42  0.323623      -1.12817      -3.39459       3.39459       275.872       279.267    
  43  0.837193     -0.177701     -0.534689      0.534689       277.403       277.938    
  44  0.656230     -0.421244      -1.26749       1.26749       277.353       278.621    
  45  0.778603     -0.250253     -0.752993      0.752993       273.815       274.568    
  46  0.736391     -0.305994     -0.920711      0.920711       277.280       278.201    
  47  0.625820E-01  -2.77128      -8.33856       8.33856       278.127       286.465    
  48  0.480814     -0.732276      -2.20336       2.20336       273.876       276.079    
  49  0.356284      -1.03203      -3.10529       3.10529       268.603       271.709    
  50  0.888471     -0.118254     -0.355816      0.355816       275.789       276.145    
  51  0.670294     -0.400038      -1.20369       1.20369       277.156       278.359    
  52  0.651699     -0.428172      -1.28834       1.28834       278.061       279.350    
  53  0.620073E-01  -2.78050      -8.36632       8.36632       279.872       288.238    
  54  0.114125      -2.17046      -6.53074       6.53074       275.413       281.944    
  55  0.332668      -1.10061      -3.31165       3.31165       273.892       277.203    
  56  0.215526      -1.53467      -4.61771       4.61771       277.876       282.494    
  57  0.491711     -0.709864      -2.13593       2.13593       280.139       282.275    
  58  0.251655      -1.37970      -4.15140       4.15140       281.252       285.403    
  59  0.526604     -0.641306      -1.92964       1.92964       277.612       279.541    
  60  0.981731     -0.184377E-01 -0.554775E-01  0.554775E-01   282.492       282.547    
  61  0.189796      -1.66180      -5.00024       5.00024       278.238       283.238    
  62  0.315522      -1.15353      -3.47088       3.47088       279.661       283.132    
  63  0.637772E-01  -2.75236      -8.28164       8.28164       274.686       282.968    
  64  0.399639     -0.917194      -2.75977       2.75977       280.331       283.091    
loop,thermsimp(1:2)       62   5.21077       5.45599    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    440        252.79          0.88          1.09         23.12          0.00          0.05         25.14
Just calling func    0   0         25.13


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    252.79
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3.00892               442
loop is:       62
neval is:      439
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       62      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    3.00892               442
loop is:       63
neval is:      439


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      442
neval,tstepnext:      439     442

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.278876      -1.27699      -3.84235       3.84235       231.316       235.158    
   2  0.603344     -0.505268      -1.52031       1.52031       246.707       248.227    
   3  0.363780      -1.01121      -3.04264       3.04264       246.469       249.511    
   4  0.298736      -1.20820      -3.63537       3.63537       249.595       253.231    
   5  0.992861     -0.716435E-02 -0.215570E-01  0.215570E-01   244.829       244.851    
   6  0.166164      -1.79478      -5.40035       5.40035       250.450       255.851    
   7  0.416382     -0.876153      -2.63628       2.63628       250.480       253.117    
   8  0.770949     -0.260133     -0.782721      0.782721       252.500       253.283    
   9  0.782423     -0.245359     -0.738268      0.738268       251.225       251.963    
  10  0.115501      -2.15847      -6.49468       6.49468       253.443       259.938    
  11  0.348954      -1.05281      -3.16784       3.16784       253.891       257.059    
  12  0.441818     -0.816857      -2.45786       2.45786       252.588       255.046    
  13  0.888072     -0.118703     -0.357168      0.357168       254.341       254.698    
  14  0.808059     -0.213120     -0.641263      0.641263       255.115       255.756    
  15  0.432540E-01  -3.14067      -9.45002       9.45002       250.929       260.379    
  16  0.369483     -0.995652      -2.99584       2.99584       251.965       254.961    
  17  0.262535      -1.33737      -4.02405       4.02405       256.866       260.890    
  18  0.873783     -0.134923     -0.405973      0.405973       262.350       262.756    
  19  0.636654     -0.451528      -1.35861       1.35861       262.297       263.656    
  20  0.534780     -0.625901      -1.88329       1.88329       264.230       266.113    
  21  0.557733     -0.583875      -1.75684       1.75684       261.877       263.633    
  22  0.929598     -0.730032E-01 -0.219661      0.219661       264.341       264.560    
  23  0.350245      -1.04912      -3.15673       3.15673       252.943       256.100    
  24  0.391945     -0.936633      -2.81826       2.81826       264.524       267.342    
  25  0.123996      -2.08751      -6.28115       6.28115       259.374       265.655    
  26  0.609578E-01  -2.79757      -8.41769       8.41769       265.290       273.708    
  27  0.165807      -1.79693      -5.40682       5.40682       268.027       273.434    
  28  0.766484     -0.265941     -0.800197      0.800197       267.993       268.793    
  29  0.629881     -0.462224      -1.39080       1.39080       268.366       269.756    
  30  0.273641      -1.29594      -3.89938       3.89938       268.603       272.503    
  31  0.344034E-01  -3.36960      -10.1389       10.1389       269.398       279.537    
  32  0.747187     -0.291440     -0.876919      0.876919       274.154       275.031    
  33  0.511998     -0.669435      -2.01428       2.01428       273.626       275.640    
  34  0.544406     -0.608061      -1.82961       1.82961       273.815       275.645    
  35  0.272552      -1.29993      -3.91138       3.91138       270.598       274.509    
  36  0.605186     -0.502220      -1.51114       1.51114       272.884       274.395    
  37  0.923323     -0.797758E-01 -0.240039      0.240039       273.674       273.914    
  38  0.373879     -0.983822      -2.96025       2.96025       273.876       276.836    
  39  0.325119      -1.12356      -3.38072       3.38072       275.789       279.170    
  40  0.746995E-01  -2.59428      -7.80599       7.80599       270.221       278.027    
  41  0.465030     -0.765653      -2.30379       2.30379       273.824       276.128    
  42  0.150040      -1.89685      -5.70749       5.70749       272.126       277.833    
  43  0.127827E-01  -4.35967      -13.1179       13.1179       273.892       287.010    
  44  0.667575     -0.404103      -1.21592       1.21592       277.403       278.619    
  45  0.725579     -0.320785     -0.965217      0.965217       270.367       271.332    
  46  0.555976     -0.587030      -1.76633       1.76633       277.280       279.046    
  47  0.834777     -0.180590     -0.543382      0.543382       277.156       277.699    
  48  0.582668     -0.540138      -1.62524       1.62524       277.353       278.979    
  49  0.265288      -1.32694      -3.99266       3.99266       275.872       279.865    
  50  0.935593     -0.665747E-01 -0.200318      0.200318       278.061       278.262    
  51  0.789592     -0.236239     -0.710826      0.710826       277.612       278.322    
  52  0.337907      -1.08498      -3.26463       3.26463       273.105       276.370    
  53  0.359971      -1.02173      -3.07431       3.07431       275.413       278.488    
  54  0.655159     -0.422878      -1.27241       1.27241       280.139       281.412    
  55  0.293383      -1.22628      -3.68977       3.68977       277.876       281.566    
  56  0.647978     -0.433898      -1.30557       1.30557       282.492       283.798    
  57  0.571456     -0.559568      -1.68370       1.68370       274.686       276.370    
  58  0.516522     -0.660637      -1.98781       1.98781       280.331       282.319    
  59  0.930382     -0.721605E-01 -0.217125      0.217125       279.661       279.878    
  60  0.380525     -0.966205      -2.90724       2.90724       278.238       281.145    
  61  0.888107     -0.118663     -0.357047      0.357047       270.617       270.974    
  62  0.191259      -1.65413      -4.97714       4.97714       281.252       286.229    
  63  0.158996      -1.83887      -5.53303       5.53303       278.127       283.660    
  64  0.829121     -0.187389     -0.563840      0.563840       252.789       253.353    
loop,thermsimp(1:2)       63   3.84235       1.52031    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    441        244.20          0.88          1.09         23.11          0.00          0.04         25.12
Just calling func    0   0         25.12


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  440    244.20        4.765     -1.220      4.426     -100.0     0.1352    
                      -1.349      2.631     -100.0      2.601     0.4948    
                       1.225    -0.6589      2.400      0.000      0.000    
                     -0.7612      0.000      0.000      0.000     -1.221    

                      -2.500     0.1102E+05 0.1697E+05 -1375.     -3051.    
                      -2.000     -8.074     -2.581     -2.813     0.8760    
                      -13.88     -2.042      1359.      0.000      3354.    

                       4764.      3323.      5073.      5329.      2500.    
                       4298.     0.7825E-01 0.3516E-01  0.000    -0.4909E-01
                      0.2167    -0.4618E-01 0.1501     0.1140    -0.1703    

                     -0.4881    -0.7823      0.000     0.3525     0.9247E-01
                      0.8541E-01 0.1784     0.1954     0.2610     0.9151E-01
                      0.1168     0.2196E-01-0.6717    -0.4576      0.000    

                      -2.455     -4.765      5.754     -1.088      0.000    
                       0.000      8.617      8.850     -5491.     -4.000    
                      0.1366    -0.4296      8.938      8.043    -0.1327E+05

                      -4.000     0.3077      1.707      9.458      9.258    
                      -6423.     -4.000     0.3040     0.9093      9.530    
                       9.044     -2098.     -2.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    244.20
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3.00892               442
loop is:       63
neval is:      440
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       63      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    3.00892               442
loop is:       64
neval is:      440


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      442
neval,tstepnext:      440     442

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.379008E-01  -3.27278      -9.84755       9.84755       231.316       241.163    
   2  0.772352     -0.258315     -0.777249      0.777249       244.829       245.606    
   3  0.802807     -0.219640     -0.660881      0.660881       246.707       247.368    
   4  0.514956     -0.663673      -1.99694       1.99694       246.469       248.466    
   5  0.554302     -0.590045      -1.77540       1.77540       251.225       253.000    
   6  0.503754     -0.685667      -2.06312       2.06312       250.480       252.543    
   7  0.400624     -0.914733      -2.75236       2.75236       249.595       252.348    
   8  0.912762     -0.912806E-01 -0.274656      0.274656       252.500       252.775    
   9  0.197841E-01  -3.92288      -11.8036       11.8036       252.789       264.593    
  10  0.657402E-02  -5.02463      -15.1187       15.1187       254.341       269.460    
  11  0.802861     -0.219574     -0.660682      0.660682       251.965       252.625    
  12  0.494750     -0.703703      -2.11739       2.11739       252.588       254.706    
  13  0.533728     -0.627869      -1.88921       1.88921       255.115       257.004    
  14  0.202886      -1.59511      -4.79957       4.79957       250.450       255.250    
  15  0.459498     -0.777620      -2.33980       2.33980       252.943       255.283    
  16  0.476385     -0.741530      -2.23121       2.23121       253.891       256.122    
  17  0.604782     -0.502887      -1.51315       1.51315       253.443       254.957    
  18  0.652452     -0.427018      -1.28486       1.28486       250.929       252.214    
  19  0.611862     -0.491249      -1.47813       1.47813       256.866       258.344    
  20  0.974982     -0.253365E-01 -0.762357E-01  0.762357E-01   262.350       262.427    
  21  0.950238E-01  -2.35363      -7.08189       7.08189       261.877       268.958    
  22  0.322848      -1.13057      -3.40181       3.40181       262.297       265.699    
  23  0.581382     -0.542348      -1.63188       1.63188       264.341       265.972    
  24  0.267652      -1.31807      -3.96597       3.96597       259.374       263.340    
  25  0.232641E-01  -3.76084      -11.3161       11.3161       264.230       275.546    
  26  0.515113E-01  -2.96595      -8.92433       8.92433       264.524       273.448    
  27  0.300440      -1.20251      -3.61825       3.61825       267.993       271.611    
  28  0.760936     -0.273206     -0.822055      0.822055       268.366       269.188    
  29  0.447102     -0.804968      -2.42209       2.42209       270.617       273.039    
  30  0.550831     -0.596328      -1.79430       1.79430       270.367       272.161    
  31  0.314273      -1.15749      -3.48281       3.48281       268.603       272.086    
  32  0.967020     -0.335365E-01 -0.100909      0.100909       268.027       268.128    
  33  0.505250     -0.682701      -2.05420       2.05420       265.290       267.344    
  34  0.416175     -0.876649      -2.63777       2.63777       273.674       276.312    
  35  0.450270     -0.797909      -2.40085       2.40085       272.884       275.285    
  36  0.521734     -0.650597      -1.95760       1.95760       270.598       272.556    
  37  0.135069      -2.00197      -6.02377       6.02377       274.154       280.178    
  38  0.186856      -1.67742      -5.04722       5.04722       273.626       278.673    
  39  0.965761     -0.348385E-01 -0.104826      0.104826       273.815       273.920    
  40  0.419580     -0.868501      -2.61325       2.61325       273.824       276.437    
  41  0.558190     -0.583056      -1.75437       1.75437       274.686       276.441    
  42  0.862407     -0.148028     -0.445404      0.445404       273.105       273.551    
  43  0.507376E-01  -2.98109      -8.96987       8.96987       273.876       282.846    
  44  0.568000     -0.565633      -1.70195       1.70195       277.156       278.858    
  45  0.750571     -0.286921     -0.863324      0.863324       272.126       272.989    
  46  0.873151     -0.135646     -0.408149      0.408149       270.221       270.629    
  47  0.204078      -1.58925      -4.78194       4.78194       278.061       282.843    
  48  0.610815     -0.492961      -1.48328       1.48328       277.612       279.095    
  49  0.666006E-01  -2.70904      -8.15130       8.15130       275.413       283.565    
  50  0.785181E-02  -4.84701      -14.5843       14.5843       277.403       291.987    
  51  0.922541     -0.806234E-01 -0.242590      0.242590       277.353       277.596    
  52  0.576084     -0.551502      -1.65943       1.65943       277.280       278.939    
  53  0.589402     -0.528646      -1.59066       1.59066       275.789       277.380    
  54  0.319085      -1.14230      -3.43708       3.43708       269.398       272.835    
  55  0.120284E-01  -4.42048      -13.3009       13.3009       275.872       289.173    
  56  0.801824     -0.220866     -0.664568      0.664568       279.661       280.325    
  57  0.498185     -0.696784      -2.09657       2.09657       278.238       280.335    
  58  0.190475      -1.65823      -4.98950       4.98950       280.139       285.129    
  59  0.496939     -0.699288      -2.10410       2.10410       277.876       279.980    
  60  0.526028     -0.642401      -1.93294       1.93294       280.331       282.264    
  61  0.176401      -1.73500      -5.22047       5.22047       278.127       283.347    
  62  0.364403      -1.00950      -3.03750       3.03750       282.492       285.529    
  63  0.577716     -0.548673      -1.65092       1.65092       281.252       282.903    
  64  0.906454     -0.982155E-01 -0.295523      0.295523       244.202       244.497    
loop,thermsimp(1:2)       64   9.84755      0.777249    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    442        244.29          0.88          1.09         23.11          0.00          0.05         25.12
Just calling func    0   0         25.11


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    443        257.12          0.87          1.09         23.12          0.04          0.04         25.16
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    244.29
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3.00892               442
loop is:       64
neval is:      442
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       64      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    3.00892               442
loop is:       65
neval is:      442


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      442
neval,tstepnext:      442     442

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.483176     -0.727373      -2.18861       2.18861       231.316       233.504    
   2  0.880011     -0.127821     -0.384604      0.384604       244.202       244.586    
   3  0.163672      -1.80989      -5.44583       5.44583       244.829       250.275    
   4  0.548194     -0.601126      -1.80874       1.80874       246.707       248.516    
   5  0.774171     -0.255963     -0.770173      0.770173       246.469       247.239    
   6  0.815808     -0.203577     -0.612547      0.612547       250.929       251.541    
   7  0.901270     -0.103951     -0.312779      0.312779       249.595       249.908    
   8  0.604998     -0.502529      -1.51207       1.51207       250.480       251.992    
   9  0.583320     -0.539020      -1.62187       1.62187       251.965       253.587    
  10  0.776155     -0.253403     -0.762470      0.762470       252.500       253.263    
  11  0.414399     -0.880925      -2.65064       2.65064       251.225       253.876    
  12  0.321893      -1.13354      -3.41073       3.41073       252.588       255.999    
  13  0.882206     -0.125330     -0.377108      0.377108       253.443       253.821    
  14  0.176926      -1.73202      -5.21152       5.21152       250.450       255.662    
  15  0.143482      -1.94155      -5.84197       5.84197       252.943       258.785    
  16  0.669321     -0.401491      -1.20806       1.20806       253.891       255.099    
  17  0.862244     -0.148216     -0.445972      0.445972       255.115       255.561    
  18  0.897950     -0.107641     -0.323882      0.323882       256.866       257.190    
  19  0.788148     -0.238070     -0.716333      0.716333       262.350       263.067    
  20  0.801563     -0.221191     -0.665547      0.665547       259.374       260.040    
  21  0.284401      -1.25737      -3.78333       3.78333       252.789       256.573    
  22  0.782583     -0.245155     -0.737653      0.737653       262.297       263.035    
  23  0.813976     -0.205825     -0.619311      0.619311       264.341       264.960    
  24  0.528421     -0.637861      -1.91928       1.91928       265.290       267.210    
  25  0.871065     -0.138038     -0.415347      0.415347       268.027       268.442    
  26  0.139992      -1.96617      -5.91605       5.91605       261.877       267.793    
  27  0.549296     -0.599118      -1.80270       1.80270       268.366       270.168    
  28  0.990967     -0.907357E-02 -0.273017E-01  0.273017E-01   254.341       254.368    
  29  0.735762     -0.306848     -0.923284      0.923284       270.221       271.144    
  30  0.647880     -0.434050      -1.30602       1.30602       267.993       269.299    
  31  0.324740      -1.12473      -3.38422       3.38422       268.603       271.987    
  32  0.995457E-01  -2.30714      -6.94200       6.94200       270.367       277.309    
  33  0.953388     -0.477336E-01 -0.143627      0.143627       270.598       270.742    
  34  0.573564     -0.555886      -1.67262       1.67262       269.398       271.071    
  35  0.988045     -0.120272E-01 -0.361890E-01  0.361890E-01   272.126       272.162    
  36  0.499857     -0.693433      -2.08649       2.08649       270.617       272.704    
  37  0.687815E-01  -2.67682      -8.05435       8.05435       264.524       272.578    
  38  0.430407     -0.843024      -2.53659       2.53659       273.105       275.642    
  39  0.204975      -1.58487      -4.76875       4.76875       273.815       278.584    
  40  0.318612      -1.14378      -3.44155       3.44155       272.884       276.326    
  41  0.339792      -1.07942      -3.24790       3.24790       264.230       267.478    
  42  0.609830     -0.494575      -1.48814       1.48814       273.674       275.162    
  43  0.518092     -0.657603      -1.97868       1.97868       273.824       275.803    
  44  0.595099     -0.519028      -1.56171       1.56171       274.686       276.248    
  45  0.658024     -0.418513      -1.25927       1.25927       275.789       277.048    
  46  0.324672      -1.12494      -3.38486       3.38486       277.353       280.738    
  47  0.503769     -0.685637      -2.06303       2.06303       273.626       275.689    
  48  0.690978     -0.369647      -1.11224       1.11224       277.156       278.268    
  49  0.961279     -0.394903E-01 -0.118823      0.118823       277.280       277.399    
  50  0.610537     -0.493416      -1.48465       1.48465       277.612       279.096    
  51  0.458399     -0.780016      -2.34701       2.34701       277.876       280.223    
  52  0.779071     -0.249653     -0.751186      0.751186       274.154       274.905    
  53  0.684652     -0.378844      -1.13991       1.13991       279.661       280.801    
  54  0.997795     -0.220750E-02 -0.664221E-02  0.664221E-02   278.238       278.245    
  55  0.206338      -1.57824      -4.74880       4.74880       280.331       285.080    
  56  0.305969      -1.18427      -3.56338       3.56338       278.061       281.625    
  57  0.270494      -1.30751      -3.93419       3.93419       273.876       277.810    
  58  0.755875     -0.279879     -0.842134      0.842134       281.252       282.094    
  59  0.607325E-01  -2.80128      -8.42883       8.42883       278.127       286.555    
  60  0.238912      -1.43166      -4.30776       4.30776       275.413       279.721    
  61  0.918909     -0.845681E-01 -0.254459      0.254459       280.139       280.394    
  62  0.684642     -0.378859      -1.13996       1.13996       282.492       283.632    
  63  0.954344     -0.467314E-01 -0.140611      0.140611       275.872       276.013    
  64  0.542589E-02  -5.21657      -15.6963       15.6963       244.286       259.982    
loop,thermsimp(1:2)       65   2.18861      0.384604    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    444        283.33          0.87          1.08         23.10          0.03          0.04         25.12
Just calling func    0   0         25.11


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    283.33
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3.00892               442
loop is:       65
neval is:      443
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       65      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    3.00892               442
loop is:       66
neval is:      443


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 




neval>tstepnex so lower away!t
---> lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
     new SAtemp,tstepnext are :    1.50446               505

 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      505
neval,tstepnext:      443     505

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.606374E-01  -2.80284      -4.21677       4.21677       231.316       235.533    
   2  0.695687     -0.362855     -0.545901      0.545901       244.202       244.748    
   3  0.695570E-01  -2.66561      -4.01031       4.01031       246.469       250.479    
   4  0.320604      -1.13755      -1.71140       1.71140       246.707       248.419    
   5  0.469989     -0.755045      -1.13594       1.13594       249.595       250.731    
   6  0.571075     -0.560235     -0.842852      0.842852       244.829       245.672    
   7  0.881942     -0.125628     -0.189003      0.189003       250.929       251.118    
   8  0.195259      -1.63343      -2.45743       2.45743       250.480       252.938    
   9  0.825869     -0.191319     -0.287833      0.287833       252.500       252.788    
  10  0.213481E-02  -6.14938      -9.25150       9.25150       251.965       261.216    
  11  0.625641     -0.468979     -0.705561      0.705561       253.443       254.149    
  12  0.148805      -1.90512      -2.86618       2.86618       251.225       254.091    
  13  0.194947      -1.63503      -2.45983       2.45983       254.341       256.801    
  14  0.174958      -1.74321      -2.62259       2.62259       253.891       256.514    
  15  0.553792     -0.590967     -0.889087      0.889087       255.115       256.004    
  16  0.342970      -1.07011      -1.60994       1.60994       250.450       252.060    
  17  0.426079E-01  -3.15572      -4.74765       4.74765       252.588       257.336    
  18  0.604850E-01  -2.80536      -4.22056       4.22056       252.789       257.010    
  19  0.206356      -1.57815      -2.37427       2.37427       256.866       259.240    
  20  0.556358     -0.586343     -0.882130      0.882130       252.943       253.826    
  21  0.449978     -0.798557      -1.20140       1.20140       244.286       245.487    
  22  0.392109     -0.936215      -1.40850       1.40850       259.374       260.782    
  23  0.438064     -0.825391      -1.24177       1.24177       262.297       263.539    
  24  0.534146     -0.627086     -0.943427      0.943427       262.350       263.294    
  25  0.936924     -0.651528E-01 -0.980199E-01  0.980199E-01   264.341       264.439    
  26  0.810957     -0.209540     -0.315245      0.315245       265.290       265.606    
  27  0.874065     -0.134601     -0.202502      0.202502       264.230       264.432    
  28  0.370024     -0.994188      -1.49572       1.49572       261.877       263.372    
  29  0.600923     -0.509288     -0.766205      0.766205       268.027       268.793    
  30  0.138113E-01  -4.28227      -6.44251       6.44251       267.993       274.435    
  31  0.979527E-01  -2.32327      -3.49527       3.49527       268.366       271.861    
  32  0.917800     -0.857754E-01 -0.129046      0.129046       270.598       270.727    
  33  0.882941     -0.124497     -0.187301      0.187301       269.398       269.586    
  34  0.608441E-01  -2.79944      -4.21165       4.21165       270.221       274.433    
  35  0.536097E-01  -2.92603      -4.40209       4.40209       268.603       273.005    
  36  0.786939     -0.239605     -0.360476      0.360476       272.126       272.486    
  37  0.540054     -0.616087     -0.926879      0.926879       264.524       265.451    
  38  0.374443     -0.982316      -1.47786       1.47786       270.617       272.095    
  39  0.842126     -0.171825     -0.258504      0.258504       274.154       274.413    
  40  0.534170     -0.627041     -0.943359      0.943359       273.674       274.618    
  41  0.314687      -1.15618      -1.73942       1.73942       273.105       274.845    
  42  0.265277E-01  -3.62957      -5.46054       5.46054       273.626       279.087    
  43  0.357649      -1.02820      -1.54689       1.54689       273.824       275.371    
  44  0.861388E-01  -2.45180      -3.68863       3.68863       275.872       279.561    
  45  0.566899     -0.567573     -0.853893      0.853893       274.686       275.540    
  46  0.111209      -2.19635      -3.30432       3.30432       272.884       276.189    
  47  0.734273     -0.308875     -0.464690      0.464690       275.789       276.254    
  48  0.709398     -0.343338     -0.516539      0.516539       270.367       270.883    
  49  0.250023      -1.38620      -2.08549       2.08549       277.280       279.366    
  50  0.549980     -0.597874     -0.899479      0.899479       273.876       274.775    
  51  0.639508     -0.447057     -0.672580      0.672580       278.238       278.911    
  52  0.175228E-02  -6.34684      -9.54858       9.54858       277.156       286.704    
  53  0.496773     -0.699622      -1.05256       1.05256       273.815       274.868    
  54  0.157058      -1.85114      -2.78497       2.78497       277.612       280.397    
  55  0.696226     -0.362081     -0.544736      0.544736       275.413       275.958    
  56  0.287746      -1.24568      -1.87407       1.87407       277.876       279.750    
  57  0.325977      -1.12093      -1.68640       1.68640       280.139       281.826    
  58  0.455904     -0.785472      -1.18171       1.18171       277.353       278.535    
  59  0.826755     -0.190247     -0.286220      0.286220       279.661       279.947    
  60  0.764404     -0.268658     -0.404186      0.404186       278.061       278.465    
  61  0.519230     -0.655409     -0.986038      0.986038       281.252       282.238    
  62  0.884859     -0.122327     -0.184036      0.184036       282.492       282.676    
  63  0.428132     -0.848324      -1.27627       1.27627       280.331       281.607    
  64  0.863912     -0.146285     -0.220080      0.220080       283.329       283.549    
loop,thermsimp(1:2)       66   4.21677      0.545901    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    445        276.65          0.88          1.09         23.10          0.00          0.04         25.12
Just calling func    0   0         25.11


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    276.65
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.50446               505
loop is:       66
neval is:      444
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       66      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    1.50446               505
loop is:       67
neval is:      444


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      505
neval,tstepnext:      444     505

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.497686     -0.697786      -1.04979       1.04979       231.316       232.366    
   2  0.830216     -0.186069     -0.279934      0.279934       244.202       244.482    
   3  0.267818      -1.31745      -1.98205       1.98205       244.286       246.268    
   4  0.400053     -0.916159      -1.37833       1.37833       244.829       246.207    
   5  0.411376     -0.888247      -1.33633       1.33633       246.707       248.044    
   6  0.499480     -0.694187      -1.04438       1.04438       246.469       247.513    
   7  0.739436     -0.301868     -0.454149      0.454149       249.595       250.049    
   8  0.115625      -2.15740      -3.24573       3.24573       250.929       254.175    
   9  0.377594     -0.973934      -1.46525       1.46525       250.450       251.916    
  10  0.661021     -0.413970     -0.622802      0.622802       252.500       253.123    
  11  0.765898     -0.266707     -0.401250      0.401250       250.480       250.882    
  12  0.608440     -0.496856     -0.747501      0.747501       252.943       253.691    
  13  0.366717      -1.00316      -1.50922       1.50922       251.225       252.734    
  14  0.853974     -0.157855     -0.237487      0.237487       253.443       253.681    
  15  0.140386      -1.96336      -2.95380       2.95380       255.115       258.069    
  16  0.882944     -0.124493     -0.187295      0.187295       253.891       254.078    
  17  0.760784E-01  -2.57599      -3.87548       3.87548       254.341       258.217    
  18  0.279297      -1.27548      -1.91891       1.91891       252.789       254.708    
  19  0.142650      -1.94736      -2.92973       2.92973       252.588       255.518    
  20  0.814861E-01  -2.50732      -3.77217       3.77217       256.866       260.638    
  21  0.801810     -0.220884     -0.332312      0.332312       259.374       259.706    
  22  0.611082     -0.492524     -0.740984      0.740984       251.965       252.706    
  23  0.599700E-01  -2.81391      -4.23342       4.23342       262.350       266.584    
  24  0.948704     -0.526589E-01 -0.792233E-01  0.792233E-01   261.877       261.956    
  25  0.992398     -0.763115E-02 -0.114808E-01  0.114808E-01   262.297       262.309    
  26  0.880498     -0.127268     -0.191470      0.191470       264.230       264.421    
  27  0.948340E-01  -2.35563      -3.54395       3.54395       264.341       267.884    
  28  0.982098     -0.180639E-01 -0.271765E-01  0.271765E-01   264.524       264.551    
  29  0.217652      -1.52486      -2.29409       2.29409       265.290       267.584    
  30  0.261545      -1.34115      -2.01771       2.01771       268.027       270.045    
  31  0.834479     -0.180948     -0.272230      0.272230       269.398       269.671    
  32  0.162789      -1.81530      -2.73105       2.73105       270.598       273.329    
  33  0.290203      -1.23718      -1.86128       1.86128       270.367       272.228    
  34  0.102916E-01  -4.57642      -6.88505       6.88505       268.366       275.251    
  35  0.834050     -0.181462     -0.273002      0.273002       270.617       270.890    
  36  0.965796     -0.348022E-01 -0.523586E-01  0.523586E-01   272.126       272.178    
  37  0.141898      -1.95265      -2.93768       2.93768       268.603       271.541    
  38  0.548366     -0.600813     -0.903900      0.903900       274.154       275.058    
  39  0.958993     -0.418714E-01 -0.629939E-01  0.629939E-01   270.221       270.284    
  40  0.241914      -1.41918      -2.13509       2.13509       267.993       270.128    
  41  0.696563     -0.361597     -0.544008      0.544008       273.674       274.218    
  42  0.946714     -0.547579E-01 -0.823812E-01  0.823812E-01   273.876       273.958    
  43  0.690193     -0.370783     -0.557829      0.557829       273.105       273.663    
  44  0.303289      -1.19307      -1.79493       1.79493       273.815       275.610    
  45  0.878282     -0.129787     -0.195260      0.195260       273.824       274.019    
  46  0.712048     -0.339610     -0.510930      0.510930       274.686       275.197    
  47  0.967351     -0.331944E-01 -0.499397E-01  0.499397E-01   275.413       275.463    
  48  0.718486     -0.330609     -0.497389      0.497389       272.884       273.382    
  49  0.805024     -0.216883     -0.326293      0.326293       275.789       276.115    
  50  0.441546     -0.817473      -1.22986       1.22986       278.061       279.291    
  51  0.404968     -0.903946      -1.35995       1.35995       277.353       278.713    
  52  0.240159      -1.42645      -2.14605       2.14605       278.238       280.384    
  53  0.520187     -0.653567     -0.983266      0.983266       273.626       274.609    
  54  0.508825     -0.675651      -1.01649       1.01649       277.280       278.297    
  55  0.408928     -0.894217      -1.34532       1.34532       275.872       277.218    
  56  0.231472      -1.46330      -2.20147       2.20147       277.876       280.077    
  57  0.708505     -0.344598     -0.518435      0.518435       279.661       280.179    
  58  0.620619     -0.477037     -0.717685      0.717685       277.612       278.329    
  59  0.221480      -1.50743      -2.26786       2.26786       280.331       282.599    
  60  0.183538      -1.69533      -2.55056       2.55056       280.139       282.690    
  61  0.576257     -0.551202     -0.829262      0.829262       281.252       282.081    
  62  0.908762     -0.956720E-01 -0.143935      0.143935       282.492       282.636    
  63  0.764794     -0.268149     -0.403420      0.403420       283.329       283.733    
  64  0.642626     -0.442192     -0.665261      0.665261       276.649       277.314    
loop,thermsimp(1:2)       67   1.04979      0.279934    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    446        276.96          0.86          1.10         23.10          0.04          0.04         25.14
Just calling func    0   0         25.14


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    276.96
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.50446               505
loop is:       67
neval is:      445
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       67      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    1.50446               505
loop is:       68
neval is:      445


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      505
neval,tstepnext:      445     505

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.260355      -1.34571      -2.02457       2.02457       231.316       233.340    
   2  0.567351     -0.566778     -0.852696      0.852696       244.202       245.055    
   3  0.212111      -1.55064      -2.33289       2.33289       244.829       247.162    
   4  0.384323     -0.956272      -1.43867       1.43867       244.286       245.724    
   5  0.379704     -0.968364      -1.45687       1.45687       246.469       247.926    
   6  0.221298      -1.50824      -2.26910       2.26910       246.707       248.976    
   7  0.729922     -0.314818     -0.473631      0.473631       249.595       250.069    
   8  0.646542     -0.436117     -0.656121      0.656121       250.480       251.136    
   9  0.839436     -0.175025     -0.263318      0.263318       250.450       250.714    
  10  0.808281     -0.212846     -0.320218      0.320218       251.965       252.285    
  11  0.724296     -0.322555     -0.485272      0.485272       251.225       251.710    
  12  0.161395      -1.82390      -2.74399       2.74399       252.500       255.244    
  13  0.691210     -0.369312     -0.555616      0.555616       253.443       253.999    
  14  0.664974     -0.408007     -0.613831      0.613831       252.943       253.557    
  15  0.835640     -0.179558     -0.270137      0.270137       253.891       254.161    
  16  0.345121      -1.06386      -1.60054       1.60054       250.929       252.529    
  17  0.910776     -0.934579E-01 -0.140604      0.140604       252.789       252.930    
  18  0.482102     -0.729599      -1.09765       1.09765       252.588       253.686    
  19  0.828243     -0.188449     -0.283514      0.283514       255.115       255.399    
  20  0.805680     -0.216069     -0.325067      0.325067       254.341       254.666    
  21  0.694570     -0.364462     -0.548320      0.548320       259.374       259.922    
  22  0.304846      -1.18795      -1.78722       1.78722       256.866       258.653    
  23  0.212327      -1.54963      -2.33136       2.33136       261.877       264.208    
  24  0.670398     -0.399883     -0.601609      0.601609       262.297       262.899    
  25  0.466041     -0.763481      -1.14863       1.14863       264.230       265.379    
  26  0.500338E-01  -2.99506      -4.50595       4.50595       264.524       269.030    
  27  0.367939     -0.999839      -1.50422       1.50422       262.350       263.855    
  28  0.973691     -0.266612E-01 -0.401107E-01  0.401107E-01   265.290       265.330    
  29  0.688056     -0.373885     -0.562496      0.562496       264.341       264.903    
  30  0.219376      -1.51697      -2.28222       2.28222       269.398       271.681    
  31  0.135232      -2.00076      -3.01007       3.01007       268.027       271.037    
  32  0.796052     -0.228090     -0.343153      0.343153       267.993       268.336    
  33  0.596618E-01  -2.81906      -4.24117       4.24117       270.221       274.462    
  34  0.352128      -1.04376      -1.57030       1.57030       270.617       272.188    
  35  0.903448     -0.101537     -0.152758      0.152758       268.603       268.756    
  36  0.782446E-01  -2.54792      -3.83324       3.83324       272.126       275.959    
  37  0.992989     -0.703619E-02 -0.105857E-01  0.105857E-01   270.367       270.377    
  38  0.509863     -0.673613      -1.01343       1.01343       270.598       271.611    
  39  0.285505E-01  -3.55608      -5.34999       5.34999       272.884       278.234    
  40  0.117310      -2.14294      -3.22397       3.22397       273.105       276.329    
  41  0.608089     -0.497434     -0.748370      0.748370       273.876       274.624    
  42  0.516045     -0.661561     -0.995293      0.995293       273.824       274.819    
  43  0.505745     -0.681722      -1.02563       1.02563       273.674       274.700    
  44  0.273977      -1.29471      -1.94784       1.94784       273.626       275.574    
  45  0.776372     -0.253123     -0.380814      0.380814       274.154       274.535    
  46  0.813260     -0.206705     -0.310979      0.310979       274.686       274.997    
  47  0.823722     -0.193922     -0.291749      0.291749       268.366       268.657    
  48  0.690618     -0.370169     -0.556905      0.556905       275.413       275.970    
  49  0.906576     -0.980805E-01 -0.147558      0.147558       273.815       273.963    
  50  0.677790     -0.388918     -0.585113      0.585113       275.789       276.374    
  51  0.179693      -1.71651      -2.58242       2.58242       275.872       278.455    
  52  0.660035     -0.415463     -0.625048      0.625048       276.649       277.274    
  53  0.565851     -0.569425     -0.856678      0.856678       277.280       278.137    
  54  0.973172     -0.271940E-01 -0.409123E-01  0.409123E-01   277.612       277.653    
  55  0.243227      -1.41376      -2.12695       2.12695       277.353       279.480    
  56  0.106189      -2.24253      -3.37380       3.37380       278.061       281.435    
  57  0.360424      -1.02047      -1.53526       1.53526       277.876       279.411    
  58  0.779729     -0.248808     -0.374323      0.374323       279.661       280.035    
  59  0.306299      -1.18319      -1.78007       1.78007       278.238       280.018    
  60  0.209367      -1.56367      -2.35248       2.35248       281.252       283.604    
  61  0.498848     -0.695454      -1.04628       1.04628       280.331       281.377    
  62  0.391394     -0.938040      -1.41125       1.41125       282.492       283.903    
  63  0.435785     -0.830607      -1.24962       1.24962       280.139       281.389    
  64  0.312077      -1.16451      -1.75196       1.75196       276.956       278.708    
loop,thermsimp(1:2)       68   2.02457      0.852696    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    447        251.41          0.88          1.08         23.12          0.00          0.04         25.12
Just calling func    0   0         25.12


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    251.41
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.50446               505
loop is:       68
neval is:      446
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       68      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    1.50446               505
loop is:       69
neval is:      446


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      505
neval,tstepnext:      446     505

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.427727     -0.849271      -1.27770       1.27770       231.316       232.593    
   2  0.300580      -1.20204      -1.80843       1.80843       244.202       246.010    
   3  0.440777     -0.819215      -1.23248       1.23248       244.286       245.518    
   4  0.119397      -2.12530      -3.19743       3.19743       244.829       248.027    
   5  0.324114      -1.12666      -1.69502       1.69502       246.469       248.164    
   6  0.708589E-01  -2.64706      -3.98241       3.98241       246.707       250.690    
   7  0.234973      -1.44829      -2.17889       2.17889       249.595       251.774    
   8  0.630612     -0.461064     -0.693653      0.693653       250.450       251.144    
   9  0.637778     -0.449765     -0.676654      0.676654       250.480       251.157    
  10  0.952774     -0.483777E-01 -0.727825E-01  0.727825E-01   251.225       251.298    
  11  0.156845      -1.85249      -2.78701       2.78701       251.965       254.752    
  12  0.386146     -0.951540      -1.43156       1.43156       250.929       252.360    
  13  0.233038      -1.45655      -2.19133       2.19133       252.789       254.981    
  14  0.748513     -0.289667     -0.435793      0.435793       252.943       253.379    
  15  0.829626     -0.186780     -0.281004      0.281004       252.588       252.869    
  16  0.108384      -2.22208      -3.34303       3.34303       253.443       256.786    
  17  0.632628     -0.457873     -0.688852      0.688852       253.891       254.580    
  18  0.989524     -0.105314E-01 -0.158441E-01  0.158441E-01   254.341       254.357    
  19  0.151245      -1.88886      -2.84171       2.84171       252.500       255.342    
  20  0.898996E-01  -2.40906      -3.62434       3.62434       255.115       258.739    
  21  0.858841     -0.152172     -0.228936      0.228936       256.866       257.095    
  22  0.849417     -0.163205     -0.245535      0.245535       259.374       259.619    
  23  0.446510     -0.806293      -1.21304       1.21304       262.297       263.510    
  24  0.989123     -0.109366E-01 -0.164537E-01  0.164537E-01   262.350       262.367    
  25  0.898953E-01  -2.40911      -3.62441       3.62441       261.877       265.501    
  26  0.433704     -0.835393      -1.25682       1.25682       264.341       265.597    
  27  0.410713     -0.889861      -1.33876       1.33876       265.290       266.629    
  28  0.310044      -1.17104      -1.76179       1.76179       264.230       265.992    
  29  0.888110     -0.118660     -0.178519      0.178519       267.993       268.171    
  30  0.661223     -0.413664     -0.622342      0.622342       268.366       268.988    
  31  0.519718     -0.654468     -0.984622      0.984622       268.603       269.588    
  32  0.818791     -0.199927     -0.300782      0.300782       264.524       264.825    
  33  0.981929     -0.182366E-01 -0.274362E-01  0.274362E-01   270.367       270.394    
  34  0.308824E-01  -3.47757      -5.23187       5.23187       268.027       273.259    
  35  0.995192E-01  -2.30740      -3.47140       3.47140       270.598       274.069    
  36  0.292141      -1.23052      -1.85127       1.85127       269.398       271.250    
  37  0.546956     -0.603387     -0.907773      0.907773       270.617       271.525    
  38  0.875324     -0.133161     -0.200336      0.200336       273.815       274.015    
  39  0.497859     -0.697439      -1.04927       1.04927       270.221       271.270    
  40  0.808711     -0.212313     -0.319417      0.319417       274.154       274.473    
  41  0.916666     -0.870126E-01 -0.130907      0.130907       273.876       274.007    
  42  0.574110     -0.554933     -0.834876      0.834876       273.674       274.509    
  43  0.908171     -0.963226E-01 -0.144914      0.144914       273.824       273.969    
  44  0.243373      -1.41316      -2.12604       2.12604       274.686       276.812    
  45  0.647413     -0.434771     -0.654097      0.654097       273.626       274.280    
  46  0.309907      -1.17148      -1.76245       1.76245       272.126       273.888    
  47  0.167934      -1.78419      -2.68424       2.68424       275.413       278.097    
  48  0.676784     -0.390402     -0.587346      0.587346       273.105       273.693    
  49  0.769515     -0.261995     -0.394161      0.394161       275.789       276.183    
  50  0.822671     -0.195199     -0.293669      0.293669       276.649       276.942    
  51  0.299010E-01  -3.50986      -5.28045       5.28045       277.612       282.892    
  52  0.803018     -0.219378     -0.330045      0.330045       277.280       277.610    
  53  0.487353E-01  -3.02135      -4.54551       4.54551       272.884       277.430    
  54  0.334246      -1.09588      -1.64871       1.64871       275.872       277.521    
  55  0.263436      -1.33394      -2.00687       2.00687       276.956       278.963    
  56  0.475227     -0.743963      -1.11926       1.11926       277.876       278.995    
  57  0.962498     -0.382236E-01 -0.575060E-01  0.575060E-01   277.353       277.411    
  58  0.517461     -0.658822     -0.991172      0.991172       278.238       279.229    
  59  0.869842     -0.139443     -0.209787      0.209787       279.661       279.871    
  60  0.260881      -1.34369      -2.02153       2.02153       280.331       282.352    
  61  0.784961     -0.242121     -0.364261      0.364261       280.139       280.504    
  62  0.128612      -2.05096      -3.08559       3.08559       278.061       281.147    
  63  0.505442     -0.682322      -1.02653       1.02653       281.252       282.278    
  64  0.195040      -1.63455      -2.45912       2.45912       251.409       253.868    
loop,thermsimp(1:2)       69   1.27770       1.80843    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    448        259.50          0.88          1.09         23.13          0.02          0.05         25.16
Just calling func    0   0         25.16


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    259.50
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.50446               505
loop is:       69
neval is:      447
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       69      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    1.50446               505
loop is:       70
neval is:      447


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      505
neval,tstepnext:      447     505

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.652194     -0.427413     -0.643026      0.643026       231.316       231.959    
   2  0.835191     -0.180095     -0.270946      0.270946       244.286       244.557    
   3  0.914573     -0.892985E-01 -0.134346      0.134346       244.202       244.336    
   4  0.936996     -0.650763E-01 -0.979048E-01  0.979048E-01   244.829       244.927    
   5  0.343704E-01  -3.37056      -5.07088       5.07088       246.469       251.540    
   6  0.993168     -0.685505E-02 -0.103132E-01  0.103132E-01   246.707       246.717    
   7  0.124012      -2.08737      -3.14037       3.14037       250.450       253.591    
   8  0.283107E-01  -3.56451      -5.36268       5.36268       250.480       255.843    
   9  0.626631     -0.467398     -0.703182      0.703182       251.225       251.928    
  10  0.349067      -1.05249      -1.58343       1.58343       249.595       251.179    
  11  0.467982E-01  -3.06191      -4.60653       4.60653       250.929       255.535    
  12  0.682524E-01  -2.68454      -4.03879       4.03879       252.588       256.627    
  13  0.320603      -1.13755      -1.71141       1.71141       252.943       254.655    
  14  0.485411     -0.722759      -1.08736       1.08736       251.409       252.496    
  15  0.174639      -1.74503      -2.62534       2.62534       254.341       256.966    
  16  0.688366     -0.373434     -0.561817      0.561817       253.891       254.453    
  17  0.403792     -0.906856      -1.36433       1.36433       251.965       253.329    
  18  0.237008      -1.43966      -2.16591       2.16591       252.789       254.955    
  19  0.491286     -0.710728      -1.06926       1.06926       252.500       253.569    
  20  0.187095      -1.67614      -2.52169       2.52169       253.443       255.965    
  21  0.365844      -1.00555      -1.51281       1.51281       256.866       258.379    
  22  0.899359     -0.106073     -0.159583      0.159583       255.115       255.275    
  23  0.806501     -0.215051     -0.323536      0.323536       259.374       259.697    
  24  0.538739     -0.618525     -0.930547      0.930547       262.350       263.281    
  25  0.184808      -1.68844      -2.54019       2.54019       262.297       264.838    
  26  0.760157     -0.274230     -0.412569      0.412569       264.524       264.937    
  27  0.920762     -0.825532E-01 -0.124198      0.124198       261.877       262.001    
  28  0.142687      -1.94710      -2.92934       2.92934       264.341       267.270    
  29  0.992793     -0.723301E-02 -0.108818E-01  0.108818E-01   264.230       264.241    
  30  0.898687     -0.106820     -0.160707      0.160707       265.290       265.451    
  31  0.263660      -1.33309      -2.00559       2.00559       267.993       269.998    
  32  0.971768     -0.286379E-01 -0.430847E-01  0.430847E-01   268.366       268.409    
  33  0.387765     -0.947357      -1.42526       1.42526       268.603       270.029    
  34  0.574064     -0.555014     -0.834997      0.834997       270.367       271.202    
  35  0.370709     -0.992338      -1.49293       1.49293       269.398       270.891    
  36  0.483362E-01  -3.02957      -4.55788       4.55788       270.221       274.779    
  37  0.583245     -0.539148     -0.811128      0.811128       270.617       271.429    
  38  0.293950E-01  -3.52693      -5.30613       5.30613       268.027       273.333    
  39  0.961670     -0.390837E-01 -0.587999E-01  0.587999E-01   273.105       273.164    
  40  0.252096      -1.37794      -2.07306       2.07306       272.126       274.199    
  41  0.260270      -1.34604      -2.02506       2.02506       273.824       275.849    
  42  0.449392     -0.799860      -1.20336       1.20336       273.876       275.079    
  43  0.845367     -0.167985     -0.252727      0.252727       273.815       274.068    
  44  0.365557      -1.00633      -1.51399       1.51399       270.598       272.112    
  45  0.374516     -0.982121      -1.47756       1.47756       273.626       275.104    
  46  0.704289     -0.350566     -0.527413      0.527413       274.154       274.681    
  47  0.784654     -0.242512     -0.364850      0.364850       273.674       274.039    
  48  0.566446     -0.568374     -0.855097      0.855097       275.789       276.644    
  49  0.932234     -0.701720E-01 -0.105571      0.105571       274.686       274.792    
  50  0.361623      -1.01715      -1.53027       1.53027       276.649       278.179    
  51  0.289968      -1.23799      -1.86250       1.86250       277.353       279.216    
  52  0.173332      -1.75255      -2.63664       2.63664       272.884       275.521    
  53  0.639885     -0.446466     -0.671692      0.671692       275.872       276.544    
  54  0.960811     -0.399777E-01 -0.601449E-01  0.601449E-01   277.280       277.340    
  55  0.454979     -0.787504      -1.18477       1.18477       275.413       276.598    
  56  0.464001     -0.767868      -1.15523       1.15523       276.956       278.111    
  57  0.910483     -0.937798E-01 -0.141088      0.141088       277.876       278.017    
  58  0.485489     -0.722599      -1.08712       1.08712       278.238       279.325    
  59  0.429778     -0.844485      -1.27050       1.27050       279.661       280.931    
  60  0.119439      -2.12495      -3.19691       3.19691       280.139       283.336    
  61  0.338197      -1.08413      -1.63103       1.63103       278.061       279.692    
  62  0.953953     -0.471406E-01 -0.709212E-01  0.709212E-01   281.252       281.323    
  63  0.844907     -0.168528     -0.253545      0.253545       280.331       280.584    
  64  0.909430E-02  -4.70011      -7.07113       7.07113       259.496       266.568    
loop,thermsimp(1:2)       70  0.643026      0.270946    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    449        252.21          0.88          1.09         23.13          0.19          0.05         25.34
Just calling func    0   0         25.34


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    252.21
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.50446               505
loop is:       70
neval is:      448
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       70      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    1.50446               505
loop is:       71
neval is:      448


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      505
neval,tstepnext:      448     505

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.993388     -0.663381E-02 -0.998031E-02  0.998031E-02   231.316       231.326    
   2  0.170387      -1.76968      -2.66242       2.66242       244.202       246.864    
   3  0.430235     -0.843424      -1.26890       1.26890       244.286       245.555    
   4  0.932962     -0.693906E-01 -0.104395      0.104395       244.829       244.934    
   5  0.723435     -0.323745     -0.487062      0.487062       246.707       247.194    
   6  0.251650E-01  -3.68230      -5.53988       5.53988       249.595       255.135    
   7  0.763909     -0.269307     -0.405162      0.405162       246.469       246.874    
   8  0.754456     -0.281759     -0.423895      0.423895       251.225       251.649    
   9  0.999559     -0.441576E-03 -0.664335E-03  0.664335E-03   251.409       251.410    
  10  0.643558     -0.440744     -0.663082      0.663082       251.965       252.628    
  11  0.629665E-01  -2.76515      -4.16007       4.16007       252.500       256.660    
  12  0.649053     -0.432241     -0.650290      0.650290       250.450       251.101    
  13  0.399773E-01  -3.21944      -4.84353       4.84353       253.891       258.735    
  14  0.849328     -0.163310     -0.245693      0.245693       252.943       253.189    
  15  0.391842E-01  -3.23948      -4.87368       4.87368       252.789       257.663    
  16  0.105710      -2.24706      -3.38061       3.38061       255.115       258.496    
  17  0.660078     -0.415397     -0.624949      0.624949       250.929       251.554    
  18  0.353251      -1.04058      -1.56551       1.56551       250.480       252.046    
  19  0.454778     -0.787946      -1.18544       1.18544       253.443       254.629    
  20  0.572414     -0.557893     -0.839328      0.839328       252.588       253.428    
  21  0.202701      -1.59602      -2.40116       2.40116       254.341       256.742    
  22  0.880730     -0.127005     -0.191074      0.191074       256.866       257.057    
  23  0.390523     -0.940268      -1.41460       1.41460       259.374       260.789    
  24  0.174911      -1.74348      -2.62300       2.62300       261.877       264.500    
  25  0.903407     -0.101582     -0.152826      0.152826       262.350       262.503    
  26  0.776206     -0.253337     -0.381136      0.381136       264.230       264.611    
  27  0.285894      -1.25213      -1.88379       1.88379       262.297       264.181    
  28  0.285213      -1.25452      -1.88737       1.88737       264.524       266.411    
  29  0.412143     -0.886385      -1.33353       1.33353       265.290       266.624    
  30  0.464292     -0.767242      -1.15429       1.15429       259.496       260.651    
  31  0.453886     -0.789909      -1.18839       1.18839       264.341       265.529    
  32  0.870789     -0.138356     -0.208151      0.208151       268.366       268.574    
  33  0.338222      -1.08405      -1.63092       1.63092       267.993       269.624    
  34  0.249181      -1.38958      -2.09057       2.09057       268.603       270.694    
  35  0.524083     -0.646104     -0.972039      0.972039       269.398       270.370    
  36  0.646957     -0.435475     -0.655155      0.655155       270.367       271.022    
  37  0.971194     -0.292293E-01 -0.439743E-01  0.439743E-01   270.617       270.661    
  38  0.775832     -0.253820     -0.381862      0.381862       270.598       270.980    
  39  0.411875     -0.887037      -1.33451       1.33451       273.105       274.440    
  40  0.300823      -1.20123      -1.80721       1.80721       268.027       269.834    
  41  0.535760     -0.624069     -0.938888      0.938888       273.674       274.613    
  42  0.547709     -0.602011     -0.905702      0.905702       273.815       274.721    
  43  0.714758     -0.335812     -0.505216      0.505216       272.126       272.631    
  44  0.610789E-01  -2.79559      -4.20586       4.20586       274.154       278.360    
  45  0.442447     -0.815435      -1.22679       1.22679       270.221       271.448    
  46  0.421127E-01  -3.16741      -4.76524       4.76524       274.686       279.452    
  47  0.218962      -1.51886      -2.28506       2.28506       273.876       276.161    
  48  0.475680     -0.743009      -1.11783       1.11783       273.626       274.744    
  49  0.997535     -0.246821E-02 -0.371332E-02  0.371332E-02   272.884       272.888    
  50  0.367564      -1.00086      -1.50575       1.50575       273.824       275.330    
  51  0.309823E-01  -3.47434      -5.22701       5.22701       275.872       281.099    
  52  0.822588     -0.195300     -0.293821      0.293821       275.413       275.707    
  53  0.443457E-01  -3.11574      -4.68751       4.68751       275.789       280.477    
  54  0.922033     -0.811740E-01 -0.122123      0.122123       277.280       277.402    
  55  0.693266     -0.366342     -0.551148      0.551148       277.876       278.427    
  56  0.234230      -1.45145      -2.18365       2.18365       276.956       279.140    
  57  0.319502      -1.14099      -1.71658       1.71658       276.649       278.365    
  58  0.861372     -0.149229     -0.224509      0.224509       277.353       277.578    
  59  0.314331      -1.15731      -1.74112       1.74112       278.238       279.979    
  60  0.268996      -1.31306      -1.97544       1.97544       278.061       280.037    
  61  0.635481     -0.453373     -0.682083      0.682083       280.331       281.013    
  62  0.602848     -0.506091     -0.761395      0.761395       279.661       280.422    
  63  0.319933      -1.13964      -1.71455       1.71455       281.252       282.966    
  64  0.940236E-01  -2.36421      -3.55686       3.55686       252.214       255.770    
loop,thermsimp(1:2)       71  0.998031E-02   2.66242    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    450        245.66          0.88          1.09         23.12          0.00          0.05         25.14
Just calling func    0   0         25.14


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    245.66
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.50446               505
loop is:       71
neval is:      449
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       71      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    1.50446               505
loop is:       72
neval is:      449


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      505
neval,tstepnext:      449     505

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.244277      -1.40945      -2.12047       2.12047       231.316       233.436    
   2  0.308155      -1.17715      -1.77098       1.77098       244.829       246.600    
   3  0.782683     -0.245028     -0.368635      0.368635       244.286       244.654    
   4  0.760982     -0.273146     -0.410938      0.410938       244.202       244.613    
   5  0.429075     -0.846125      -1.27296       1.27296       246.469       247.742    
   6  0.736261     -0.306171     -0.460622      0.460622       246.707       247.168    
   7  0.460189     -0.776117      -1.16764       1.16764       250.450       251.618    
   8  0.933911     -0.683736E-01 -0.102866      0.102866       251.409       251.512    
   9  0.460375     -0.775713      -1.16703       1.16703       250.929       252.096    
  10  0.939859     -0.620258E-01 -0.933155E-01  0.933155E-01   251.225       251.318    
  11  0.550327     -0.597243     -0.898529      0.898529       250.480       251.379    
  12  0.480638     -0.732640      -1.10223       1.10223       251.965       253.067    
  13  0.252938      -1.37461      -2.06805       2.06805       252.943       255.011    
  14  0.536822     -0.622088     -0.935908      0.935908       252.588       253.524    
  15  0.363695      -1.01144      -1.52167       1.52167       253.443       254.965    
  16  0.279007      -1.27652      -1.92047       1.92047       249.595       251.516    
  17  0.164958      -1.80206      -2.71114       2.71114       252.214       254.925    
  18  0.207862      -1.57088      -2.36333       2.36333       252.500       254.864    
  19  0.926151     -0.767180E-01 -0.115419      0.115419       254.341       254.457    
  20  0.931241     -0.712372E-01 -0.107174      0.107174       256.866       256.973    
  21  0.410184     -0.891148      -1.34070       1.34070       252.789       254.130    
  22  0.180536      -1.71183      -2.57538       2.57538       255.115       257.690    
  23  0.505927     -0.681363      -1.02508       1.02508       253.891       254.916    
  24  0.950800     -0.504520E-01 -0.759031E-01  0.759031E-01   259.496       259.572    
  25  0.530981     -0.633028     -0.952367      0.952367       259.374       260.326    
  26  0.878348     -0.129712     -0.195147      0.195147       262.350       262.546    
  27  0.699104     -0.357956     -0.538531      0.538531       262.297       262.836    
  28  0.795467     -0.228826     -0.344260      0.344260       261.877       262.221    
  29  0.828214     -0.188484     -0.283566      0.283566       264.230       264.513    
  30  0.840484     -0.173777     -0.261441      0.261441       264.341       264.602    
  31  0.916482E-02  -4.69238      -7.05951       7.05951       264.524       271.584    
  32  0.965109     -0.355146E-01 -0.534303E-01  0.534303E-01   265.290       265.344    
  33  0.686270E-01  -2.67907      -4.03056       4.03056       268.366       272.396    
  34  0.777883     -0.251179     -0.377889      0.377889       267.993       268.371    
  35  0.424167     -0.857629      -1.29027       1.29027       268.027       269.317    
  36  0.422618     -0.861287      -1.29577       1.29577       269.398       270.694    
  37  0.202591      -1.59656      -2.40197       2.40197       270.617       273.019    
  38  0.520317     -0.653316     -0.982889      0.982889       268.603       269.586    
  39  0.918512     -0.850003E-01 -0.127880      0.127880       270.598       270.726    
  40  0.516959     -0.659791     -0.992630      0.992630       270.367       271.359    
  41  0.477240     -0.739735      -1.11290       1.11290       270.221       271.334    
  42  0.520540E-01  -2.95547      -4.44640       4.44640       272.126       276.572    
  43  0.304485      -1.18913      -1.78901       1.78901       272.884       274.673    
  44  0.879547     -0.128348     -0.193094      0.193094       273.105       273.299    
  45  0.297327      -1.21292      -1.82480       1.82480       273.674       275.499    
  46  0.320273      -1.13858      -1.71295       1.71295       273.815       275.528    
  47  0.503657E-01  -2.98844      -4.49600       4.49600       273.626       278.122    
  48  0.836881     -0.178074     -0.267905      0.267905       273.824       274.092    
  49  0.550103     -0.597651     -0.899142      0.899142       275.413       276.312    
  50  0.407887E-01  -3.19935      -4.81330       4.81330       273.876       278.689    
  51  0.583045     -0.539491     -0.811644      0.811644       277.280       278.092    
  52  0.696120     -0.362234     -0.544967      0.544967       277.353       277.898    
  53  0.326588      -1.11905      -1.68358       1.68358       274.154       275.838    
  54  0.499766     -0.693615      -1.04352       1.04352       276.649       277.692    
  55  0.858833     -0.152181     -0.228951      0.228951       277.876       278.105    
  56  0.414433     -0.880844      -1.32520       1.32520       276.956       278.281    
  57  0.518336     -0.657132     -0.988631      0.988631       274.686       275.675    
  58  0.948181     -0.532095E-01 -0.800516E-01  0.800516E-01   278.238       278.318    
  59  0.146662E-02  -6.52479      -9.81630       9.81630       278.061       287.878    
  60  0.999623     -0.376691E-03 -0.566718E-03  0.566718E-03   279.661       279.661    
  61  0.559564     -0.580597     -0.873487      0.873487       275.789       276.663    
  62  0.408239     -0.895902      -1.34785       1.34785       280.331       281.679    
  63  0.128262      -2.05368      -3.08968       3.08968       275.872       278.962    
  64  0.501027     -0.691096      -1.03973       1.03973       245.655       246.695    
loop,thermsimp(1:2)       72   2.12047       1.77098    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    451        249.05          0.88          1.09         23.12          0.05          0.04         25.18
Just calling func    0   0         25.18


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    249.05
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.50446               505
loop is:       72
neval is:      450
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       72      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    1.50446               505
loop is:       73
neval is:      450


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      505
neval,tstepnext:      450     505

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.985694     -0.144094E-01 -0.216784E-01  0.216784E-01   231.316       231.337    
   2  0.404696     -0.904619      -1.36097       1.36097       244.202       245.563    
   3  0.848366     -0.164443     -0.247398      0.247398       244.286       244.533    
   4  0.108805      -2.21820      -3.33720       3.33720       244.829       248.166    
   5  0.428300     -0.847930      -1.27568       1.27568       245.655       246.931    
   6  0.727573     -0.318041     -0.478480      0.478480       246.707       247.186    
   7  0.606234     -0.500489     -0.752967      0.752967       246.469       247.222    
   8  0.938951     -0.629916E-01 -0.947685E-01  0.947685E-01   251.225       251.320    
   9  0.622391     -0.474187     -0.713397      0.713397       250.480       251.194    
  10  0.681292E-01  -2.68635      -4.04151       4.04151       251.409       255.450    
  11  0.802944     -0.219471     -0.330185      0.330185       249.595       249.925    
  12  0.739251     -0.302118     -0.454524      0.454524       250.450       250.905    
  13  0.943417     -0.582465E-01 -0.876297E-01  0.876297E-01   250.929       251.016    
  14  0.865420E-01  -2.44712      -3.68161       3.68161       251.965       255.646    
  15  0.247017      -1.39830      -2.10369       2.10369       252.588       254.692    
  16  0.835884     -0.179266     -0.269699      0.269699       252.789       253.059    
  17  0.632625     -0.457877     -0.688859      0.688859       254.341       255.030    
  18  0.335470      -1.09222      -1.64321       1.64321       252.500       254.143    
  19  0.617355     -0.482312     -0.725619      0.725619       253.891       254.617    
  20  0.966107E-01  -2.33707      -3.51603       3.51603       252.214       255.730    
  21  0.205299      -1.58329      -2.38199       2.38199       253.443       255.825    
  22  0.784372     -0.242871     -0.365391      0.365391       252.943       253.309    
  23  0.507274     -0.678705      -1.02109       1.02109       256.866       257.887    
  24  0.228591      -1.47582      -2.22032       2.22032       255.115       257.335    
  25  0.813037     -0.206978     -0.311391      0.311391       259.496       259.808    
  26  0.660021E-02  -5.02065      -7.55338       7.55338       259.374       266.927    
  27  0.449216     -0.800252      -1.20395       1.20395       261.877       263.080    
  28  0.624836     -0.470267     -0.707498      0.707498       262.350       263.058    
  29  0.124036      -2.08718      -3.14009       3.14009       262.297       265.437    
  30  0.977322     -0.229386E-01 -0.345103E-01  0.345103E-01   264.230       264.264    
  31  0.362007      -1.01609      -1.52867       1.52867       264.341       265.869    
  32  0.433687     -0.835432      -1.25688       1.25688       265.290       266.547    
  33  0.476592     -0.741094      -1.11495       1.11495       267.993       269.108    
  34  0.929976     -0.725968E-01 -0.109219      0.109219       268.027       268.136    
  35  0.363976      -1.01067      -1.52051       1.52051       268.603       270.124    
  36  0.226804      -1.48367      -2.23212       2.23212       269.398       271.630    
  37  0.398930     -0.918968      -1.38255       1.38255       270.598       271.981    
  38  0.303955      -1.19087      -1.79163       1.79163       270.221       272.013    
  39  0.452647     -0.792643      -1.19250       1.19250       270.367       271.559    
  40  0.366024      -1.00506      -1.51207       1.51207       264.524       266.036    
  41  0.995807     -0.420220E-02 -0.632205E-02  0.632205E-02   268.366       268.372    
  42  0.796944     -0.226970     -0.341468      0.341468       270.617       270.959    
  43  0.884128     -0.123153     -0.185279      0.185279       273.105       273.291    
  44  0.710294     -0.342076     -0.514640      0.514640       273.824       274.339    
  45  0.603169     -0.505558     -0.760593      0.760593       272.884       273.645    
  46  0.822382     -0.195551     -0.294199      0.294199       273.674       273.968    
  47  0.741673E-01  -2.60143      -3.91375       3.91375       273.815       277.729    
  48  0.593116     -0.522366     -0.785880      0.785880       274.686       275.472    
  49  0.659441     -0.416363     -0.626402      0.626402       274.154       274.780    
  50  0.179982      -1.71490      -2.58000       2.58000       275.413       277.993    
  51  0.334225      -1.09594      -1.64880       1.64880       272.126       273.775    
  52  0.602331E-01  -2.80953      -4.22684       4.22684       275.789       280.016    
  53  0.895459     -0.110419     -0.166122      0.166122       276.649       276.815    
  54  0.857093     -0.154209     -0.232002      0.232002       277.353       277.585    
  55  0.909112     -0.952871E-01 -0.143356      0.143356       277.280       277.423    
  56  0.474044     -0.746456      -1.12301       1.12301       277.876       278.999    
  57  0.707398     -0.346162     -0.520787      0.520787       273.626       274.147    
  58  0.520137     -0.653664     -0.983412      0.983412       276.956       277.939    
  59  0.723154     -0.324133     -0.487645      0.487645       278.238       278.726    
  60  0.470863     -0.753187      -1.13314       1.13314       273.876       275.009    
  61  0.277955      -1.28030      -1.92616       1.92616       275.872       277.799    
  62  0.598622     -0.513125     -0.771977      0.771977       279.661       280.433    
  63  0.997564     -0.243925E-02 -0.366976E-02  0.366976E-02   280.331       280.335    
  64  0.791941     -0.233269     -0.350944      0.350944       249.047       249.398    
loop,thermsimp(1:2)       73  0.216784E-01   1.36097    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    452        244.75          0.88          1.09         23.12          0.00          0.05         25.13
Just calling func    0   0         25.13


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    244.75
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.50446               505
loop is:       73
neval is:      451
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       73      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    1.50446               505
loop is:       74
neval is:      451


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      505
neval,tstepnext:      451     505

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.354251E-01  -3.34033      -5.02541       5.02541       231.316       236.341    
   2  0.121809      -2.10530      -3.16734       3.16734       244.286       247.453    
   3  0.686317E-01  -2.67900      -4.03045       4.03045       244.202       248.232    
   4  0.529445     -0.635926     -0.956726      0.956726       245.655       246.612    
   5  0.829516     -0.186912     -0.281203      0.281203       246.707       246.988    
   6  0.418811     -0.870336      -1.30939       1.30939       246.469       247.778    
   7  0.353353      -1.04029      -1.56507       1.56507       244.829       246.394    
   8  0.720073     -0.328403     -0.494069      0.494069       249.047       249.541    
   9  0.797644     -0.226092     -0.340148      0.340148       249.595       249.935    
  10  0.521803     -0.650466     -0.978601      0.978601       250.450       251.429    
  11  0.900951     -0.104305     -0.156923      0.156923       250.929       251.086    
  12  0.801614     -0.221128     -0.332679      0.332679       250.480       250.813    
  13  0.796757     -0.227205     -0.341821      0.341821       251.225       251.567    
  14  0.716648     -0.333170     -0.501242      0.501242       252.789       253.291    
  15  0.690691     -0.370062     -0.556745      0.556745       252.943       253.500    
  16  0.462468     -0.771178      -1.16021       1.16021       252.500       253.660    
  17  0.896079     -0.109726     -0.165079      0.165079       253.891       254.056    
  18  0.351033E-02  -5.65205      -8.50329       8.50329       252.588       261.092    
  19  0.195795E-01  -3.93327      -5.91745       5.91745       254.341       260.259    
  20  0.285350E-01  -3.55662      -5.35080       5.35080       251.409       256.760    
  21  0.345848E-01  -3.36434      -5.06152       5.06152       251.965       257.026    
  22  0.344304      -1.06623      -1.60410       1.60410       252.214       253.818    
  23  0.251512      -1.38026      -2.07656       2.07656       253.443       255.520    
  24  0.389628E-01  -3.24515      -4.88220       4.88220       255.115       259.997    
  25  0.338848      -1.08220      -1.62813       1.62813       256.866       258.494    
  26  0.383648     -0.958031      -1.44132       1.44132       259.496       260.938    
  27  0.877462     -0.130722     -0.196666      0.196666       262.350       262.547    
  28  0.383552     -0.958280      -1.44170       1.44170       261.877       263.318    
  29  0.835013     -0.180308     -0.271266      0.271266       264.230       264.501    
  30  0.733865     -0.309430     -0.465526      0.465526       262.297       262.763    
  31  0.288449      -1.24324      -1.87040       1.87040       264.341       266.211    
  32  0.927737     -0.750074E-01 -0.112846      0.112846       264.524       264.637    
  33  0.505507     -0.682193      -1.02633       1.02633       265.290       266.317    
  34  0.909677     -0.946660E-01 -0.142421      0.142421       259.374       259.516    
  35  0.786508     -0.240152     -0.361300      0.361300       268.027       268.388    
  36  0.186545      -1.67908      -2.52611       2.52611       268.366       270.892    
  37  0.917771     -0.858077E-01 -0.129094      0.129094       267.993       268.122    
  38  0.223043      -1.50039      -2.25728       2.25728       268.603       270.861    
  39  0.416209     -0.876568      -1.31876       1.31876       270.617       271.936    
  40  0.742048     -0.298341     -0.448843      0.448843       270.367       270.815    
  41  0.916531     -0.871589E-01 -0.131127      0.131127       269.398       269.529    
  42  0.528872     -0.637009     -0.958356      0.958356       270.598       271.556    
  43  0.380167     -0.967145      -1.45503       1.45503       270.221       271.676    
  44  0.147221      -1.91582      -2.88228       2.88228       273.105       275.988    
  45  0.325715      -1.12173      -1.68760       1.68760       272.884       274.572    
  46  0.653191     -0.425886     -0.640730      0.640730       272.126       272.767    
  47  0.734482     -0.308590     -0.464262      0.464262       273.674       274.138    
  48  0.812100E-01  -2.51072      -3.77728       3.77728       273.626       277.403    
  49  0.981448     -0.187266E-01 -0.281734E-01  0.281734E-01   273.824       273.852    
  50  0.194830      -1.63563      -2.46074       2.46074       274.154       276.615    
  51  0.369514     -0.995566      -1.49779       1.49779       273.876       275.374    
  52  0.124069      -2.08692      -3.13969       3.13969       274.686       277.826    
  53  0.537017     -0.621726     -0.935363      0.935363       276.649       277.584    
  54  0.963796     -0.368752E-01 -0.554773E-01  0.554773E-01   277.280       277.336    
  55  0.749360     -0.288536     -0.434092      0.434092       277.353       277.788    
  56  0.525033     -0.644294     -0.969316      0.969316       273.815       274.784    
  57  0.895210     -0.110697     -0.166539      0.166539       275.872       276.039    
  58  0.964986     -0.356416E-01 -0.536214E-01  0.536214E-01   276.956       277.010    
  59  0.497682     -0.697793      -1.04980       1.04980       275.413       276.463    
  60  0.401907     -0.911534      -1.37137       1.37137       278.238       279.610    
  61  0.995284     -0.472736E-02 -0.711213E-02  0.711213E-02   277.876       277.883    
  62  0.838243E-01  -2.47903      -3.72961       3.72961       275.789       279.519    
  63  0.387998     -0.946756      -1.42436       1.42436       280.331       281.755    
  64  0.994229     -0.578737E-02 -0.870687E-02  0.870687E-02   244.750       244.759    
loop,thermsimp(1:2)       74   5.02541       3.16734    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    453        270.50          0.86          1.09         23.13          0.02          0.04         25.14
Just calling func    0   0         25.15


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    270.50
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.50446               505
loop is:       74
neval is:      452
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       74      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    1.50446               505
loop is:       75
neval is:      452


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      505
neval,tstepnext:      452     505

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.825653E-01  -2.49417      -3.75238       3.75238       231.316       235.068    
   2  0.822278     -0.195677     -0.294388      0.294388       244.750       245.045    
   3  0.815014     -0.204550     -0.307737      0.307737       244.829       245.137    
   4  0.207771      -1.57132      -2.36399       2.36399       245.655       248.019    
   5  0.392022E-01  -3.23902      -4.87299       4.87299       246.707       251.580    
   6  0.798009     -0.225635     -0.339459      0.339459       244.286       244.625    
   7  0.946935     -0.545251E-01 -0.820309E-01  0.820309E-01   246.469       246.551    
   8  0.143106      -1.94417      -2.92493       2.92493       244.202       247.127    
   9  0.485966     -0.721616      -1.08564       1.08564       249.047       250.132    
  10  0.789895     -0.235855     -0.354834      0.354834       249.595       249.950    
  11  0.191154      -1.65468      -2.48940       2.48940       250.480       252.970    
  12  0.556941     -0.585297     -0.880556      0.880556       250.929       251.809    
  13  0.354923      -1.03585      -1.55840       1.55840       250.450       252.009    
  14  0.206912      -1.57546      -2.37022       2.37022       251.225       253.595    
  15  0.295054E-01  -3.52318      -5.30049       5.30049       252.789       258.090    
  16  0.531987     -0.631135     -0.949519      0.949519       252.943       253.893    
  17  0.552837     -0.592692     -0.891683      0.891683       252.500       253.392    
  18  0.230971      -1.46546      -2.20473       2.20473       252.214       254.418    
  19  0.879168     -0.128779     -0.193744      0.193744       253.891       254.085    
  20  0.463297     -0.769387      -1.15751       1.15751       253.443       254.601    
  21  0.405031     -0.903792      -1.35972       1.35972       251.409       252.769    
  22  0.297262      -1.21314      -1.82513       1.82513       251.965       253.790    
  23  0.418772     -0.870430      -1.30953       1.30953       256.866       258.175    
  24  0.596068     -0.517401     -0.778409      0.778409       259.374       260.152    
  25  0.720685     -0.327553     -0.492790      0.492790       255.115       255.608    
  26  0.756772     -0.278694     -0.419284      0.419284       254.341       254.760    
  27  0.231133      -1.46476      -2.20368       2.20368       259.496       261.700    
  28  0.783190     -0.244381     -0.367661      0.367661       252.588       252.956    
  29  0.913865     -0.900727E-01 -0.135511      0.135511       262.350       262.486    
  30  0.690716     -0.370027     -0.556692      0.556692       262.297       262.854    
  31  0.187671      -1.67306      -2.51706       2.51706       261.877       264.394    
  32  0.558859     -0.581857     -0.875382      0.875382       264.230       265.105    
  33  0.377344     -0.974598      -1.46625       1.46625       264.524       265.990    
  34  0.800863     -0.222065     -0.334089      0.334089       264.341       264.675    
  35  0.717668     -0.331748     -0.499102      0.499102       265.290       265.789    
  36  0.408710     -0.894749      -1.34612       1.34612       267.993       269.339    
  37  0.744828     -0.294602     -0.443218      0.443218       268.027       268.470    
  38  0.366523      -1.00369      -1.51002       1.51002       269.398       270.908    
  39  0.558103     -0.583212     -0.877420      0.877420       270.367       271.244    
  40  0.993425     -0.659714E-02 -0.992515E-02  0.992515E-02   268.603       268.613    
  41  0.892238     -0.114023     -0.171543      0.171543       268.366       268.537    
  42  0.527869     -0.638907     -0.961212      0.961212       270.598       271.559    
  43  0.805965     -0.215715     -0.324536      0.324536       270.221       270.546    
  44  0.425337     -0.854872      -1.28612       1.28612       270.617       271.903    
  45  0.553214     -0.592011     -0.890658      0.890658       272.126       273.016    
  46  0.961775     -0.389749E-01 -0.586362E-01  0.586362E-01   273.824       273.883    
  47  0.721793     -0.326017     -0.490481      0.490481       273.674       274.165    
  48  0.734528     -0.308527     -0.464167      0.464167       272.884       273.349    
  49  0.838033E-03  -7.08445      -10.6583       10.6583       273.815       284.473    
  50  0.898638E-01  -2.40946      -3.62494       3.62494       273.876       277.501    
  51  0.139620      -1.96883      -2.96204       2.96204       273.105       276.068    
  52  0.360088      -1.02141      -1.53667       1.53667       275.872       277.409    
  53  0.167478E-01  -4.08949      -6.15248       6.15248       275.413       281.566    
  54  0.503231     -0.686706      -1.03312       1.03312       274.154       275.187    
  55  0.896724     -0.109007     -0.163998      0.163998       276.956       277.120    
  56  0.986589E-01  -2.31609      -3.48446       3.48446       277.280       280.764    
  57  0.481539     -0.730769      -1.09941       1.09941       273.626       274.726    
  58  0.300347      -1.20282      -1.80959       1.80959       276.649       278.458    
  59  0.920100     -0.832732E-01 -0.125281      0.125281       277.353       277.479    
  60  0.583092     -0.539410     -0.811522      0.811522       274.686       275.498    
  61  0.637761     -0.449792     -0.676694      0.676694       277.876       278.553    
  62  0.436466     -0.829046      -1.24727       1.24727       275.789       277.036    
  63  0.545950     -0.605228     -0.910543      0.910543       278.238       279.149    
  64  0.349946      -1.04998      -1.57965       1.57965       270.497       272.077    
loop,thermsimp(1:2)       75   3.75238      0.294388    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    454        277.49          0.88          1.09         23.14          0.00          0.04         25.15
Just calling func    0   0         25.15


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    277.49
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.50446               505
loop is:       75
neval is:      453
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       75      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    1.50446               505
loop is:       76
neval is:      453


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      505
neval,tstepnext:      453     505

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.316695      -1.14982      -1.72986       1.72986       231.316       233.046    
   2  0.382504     -0.961016      -1.44581       1.44581       244.286       245.731    
   3  0.264614      -1.32948      -2.00016       2.00016       244.750       246.751    
   4  0.803265     -0.219071     -0.329584      0.329584       244.829       245.159    
   5  0.171034      -1.76589      -2.65672       2.65672       246.469       249.125    
   6  0.831601     -0.184402     -0.277426      0.277426       244.202       244.479    
   7  0.435344     -0.831619      -1.25114       1.25114       245.655       246.906    
   8  0.709095     -0.343766     -0.517183      0.517183       249.595       250.112    
   9  0.787618     -0.238742     -0.359178      0.359178       249.047       249.406    
  10  0.848523E-01  -2.46684      -3.71127       3.71127       246.707       250.418    
  11  0.863403     -0.146874     -0.220966      0.220966       250.929       251.150    
  12  0.852899E-04  -9.36945      -14.0960       14.0960       250.450       264.546    
  13  0.221667      -1.50658      -2.26659       2.26659       251.409       253.676    
  14  0.474061E-01  -3.04901      -4.58711       4.58711       252.588       257.175    
  15  0.175322      -1.74113      -2.61947       2.61947       250.480       253.100    
  16  0.154041      -1.87053      -2.81415       2.81415       252.500       255.314    
  17  0.808967     -0.211997     -0.318941      0.318941       251.225       251.544    
  18  0.790119     -0.235572     -0.354409      0.354409       251.965       252.319    
  19  0.996800     -0.320514E-02 -0.482201E-02  0.482201E-02   252.943       252.948    
  20  0.238948      -1.43151      -2.15365       2.15365       253.891       256.045    
  21  0.829852     -0.186508     -0.280595      0.280595       252.214       252.494    
  22  0.582759     -0.539981     -0.812381      0.812381       253.443       254.256    
  23  0.284746      -1.25616      -1.88984       1.88984       254.341       256.231    
  24  0.360633      -1.01989      -1.53439       1.53439       255.115       256.650    
  25  0.941077     -0.607306E-01 -0.913668E-01  0.913668E-01   252.789       252.881    
  26  0.383331     -0.958856      -1.44256       1.44256       256.866       258.309    
  27  0.523735     -0.646770     -0.973041      0.973041       259.374       260.347    
  28  0.481378     -0.731103      -1.09992       1.09992       259.496       260.596    
  29  0.841845     -0.172159     -0.259007      0.259007       262.350       262.609    
  30  0.178872      -1.72108      -2.58931       2.58931       262.297       264.887    
  31  0.873649     -0.135077     -0.203218      0.203218       261.877       262.080    
  32  0.805285     -0.216559     -0.325805      0.325805       264.341       264.666    
  33  0.945892E-01  -2.35821      -3.54784       3.54784       264.230       267.778    
  34  0.976997     -0.232719E-01 -0.350116E-01  0.350116E-01   265.290       265.325    
  35  0.347817      -1.05608      -1.58883       1.58883       264.524       266.113    
  36  0.443928     -0.812092      -1.22176       1.22176       268.027       269.249    
  37  0.818184     -0.200668     -0.301898      0.301898       268.366       268.668    
  38  0.849587     -0.163005     -0.245234      0.245234       268.603       268.848    
  39  0.809085E-01  -2.51444      -3.78287       3.78287       267.993       271.775    
  40  0.808062     -0.213117     -0.320626      0.320626       270.221       270.542    
  41  0.663621     -0.410044     -0.616896      0.616896       269.398       270.015    
  42  0.466900     -0.761639      -1.14586       1.14586       270.367       271.512    
  43  0.948620     -0.527466E-01 -0.793553E-01  0.793553E-01   270.598       270.677    
  44  0.274490      -1.29284      -1.94503       1.94503       270.617       272.562    
  45  0.928375E-01  -2.37690      -3.57596       3.57596       270.497       274.073    
  46  0.983714     -0.164200E-01 -0.247033E-01  0.247033E-01   272.126       272.151    
  47  0.424265     -0.857398      -1.28992       1.28992       272.884       274.174    
  48  0.534428     -0.626558     -0.942633      0.942633       273.824       274.766    
  49  0.511115E-01  -2.97374      -4.47389       4.47389       273.674       278.148    
  50  0.881621     -0.125993     -0.189551      0.189551       273.626       273.816    
  51  0.996483     -0.352291E-02 -0.530008E-02  0.530008E-02   274.154       274.159    
  52  0.379271     -0.969504      -1.45858       1.45858       274.686       276.145    
  53  0.844840     -0.168609     -0.253665      0.253665       273.105       273.359    
  54  0.242994      -1.41472      -2.12839       2.12839       275.789       277.918    
  55  0.875393     -0.133082     -0.200217      0.200217       276.956       277.156    
  56  0.565062     -0.570819     -0.858776      0.858776       275.872       276.731    
  57  0.698179     -0.359279     -0.540522      0.540522       277.353       277.894    
  58  0.676907     -0.390222     -0.587074      0.587074       273.876       274.463    
  59  0.130081      -2.03960      -3.06850       3.06850       276.649       279.717    
  60  0.250203      -1.38548      -2.08440       2.08440       277.876       279.960    
  61  0.366784      -1.00298      -1.50895       1.50895       278.238       279.747    
  62  0.868663     -0.140800     -0.211828      0.211828       277.280       277.492    
  63  0.739900     -0.301240     -0.453205      0.453205       275.413       275.866    
  64  0.717636     -0.331793     -0.499169      0.499169       277.487       277.986    
loop,thermsimp(1:2)       76   1.72986       1.44581    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    455        252.14          0.88          1.09         23.14          0.00          0.04         25.16
Just calling func    0   0         25.15


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    252.14
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.50446               505
loop is:       76
neval is:      454
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       76      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    1.50446               505
loop is:       77
neval is:      454


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      505
neval,tstepnext:      454     505

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.807533     -0.213771     -0.321610      0.321610       231.316       231.637    
   2  0.906511     -0.981526E-01 -0.147667      0.147667       244.202       244.350    
   3  0.121906      -2.10450      -3.16614       3.16614       244.829       247.995    
   4  0.849960     -0.162566     -0.244575      0.244575       244.286       244.530    
   5  0.268960      -1.31319      -1.97565       1.97565       244.750       246.726    
   6  0.475959     -0.742424      -1.11695       1.11695       245.655       246.772    
   7  0.359795      -1.02222      -1.53789       1.53789       246.469       248.007    
   8  0.411175     -0.888736      -1.33707       1.33707       249.047       250.384    
   9  0.381099     -0.964695      -1.45135       1.45135       249.595       251.047    
  10  0.390615     -0.940033      -1.41424       1.41424       246.707       248.121    
  11  0.758954     -0.275815     -0.414953      0.414953       250.929       251.344    
  12  0.476320     -0.741666      -1.11581       1.11581       251.225       252.341    
  13  0.658674     -0.417527     -0.628153      0.628153       251.965       252.593    
  14  0.324645      -1.12502      -1.69255       1.69255       252.214       253.906    
  15  0.388092     -0.946513      -1.42399       1.42399       252.789       254.213    
  16  0.910971     -0.932447E-01 -0.140283      0.140283       252.943       253.084    
  17  0.170451E-01  -4.07189      -6.12600       6.12600       250.480       256.606    
  18  0.361549      -1.01736      -1.53058       1.53058       251.409       252.939    
  19  0.134057      -2.00949      -3.02321       3.02321       253.443       256.467    
  20  0.241841      -1.41948      -2.13555       2.13555       252.500       254.636    
  21  0.933265     -0.690659E-01 -0.103907      0.103907       253.891       253.995    
  22  0.142292      -1.94987      -2.93351       2.93351       254.341       257.275    
  23  0.557913     -0.583552     -0.877932      0.877932       255.115       255.993    
  24  0.606116     -0.500684     -0.753260      0.753260       252.588       253.342    
  25  0.802619     -0.219875     -0.330793      0.330793       256.866       257.197    
  26  0.828050E-02  -4.79385      -7.21217       7.21217       259.374       266.586    
  27  0.736740E-01  -2.60811      -3.92380       3.92380       259.496       263.420    
  28  0.772368     -0.258294     -0.388593      0.388593       261.877       262.265    
  29  0.164353      -1.80574      -2.71666       2.71666       262.350       265.067    
  30  0.305683      -1.18521      -1.78310       1.78310       250.450       252.234    
  31  0.490685     -0.711953      -1.07111       1.07111       264.341       265.412    
  32  0.796715     -0.227258     -0.341901      0.341901       262.297       262.639    
  33  0.416735     -0.875305      -1.31686       1.31686       265.290       266.607    
  34  0.336518      -1.08910      -1.63851       1.63851       264.524       266.163    
  35  0.410249     -0.890990      -1.34046       1.34046       264.230       265.570    
  36  0.765564     -0.267142     -0.401905      0.401905       268.366       268.768    
  37  0.852656     -0.159399     -0.239810      0.239810       268.603       268.843    
  38  0.218548      -1.52075      -2.28791       2.28791       268.027       270.315    
  39  0.859169     -0.151790     -0.228362      0.228362       269.398       269.627    
  40  0.140392      -1.96332      -2.95373       2.95373       270.221       273.175    
  41  0.622846     -0.473456     -0.712296      0.712296       270.598       271.310    
  42  0.410234     -0.891028      -1.34052       1.34052       270.367       271.707    
  43  0.459429     -0.777770      -1.17013       1.17013       267.993       269.163    
  44  0.911803     -0.923309E-01 -0.138908      0.138908       272.126       272.265    
  45  0.120848      -2.11322      -3.17926       3.17926       270.617       273.797    
  46  0.474460     -0.745577      -1.12169       1.12169       273.105       274.227    
  47  0.602073     -0.507376     -0.763328      0.763328       273.626       274.390    
  48  0.204387      -1.58774      -2.38869       2.38869       270.497       272.886    
  49  0.822244     -0.195718     -0.294450      0.294450       274.154       274.448    
  50  0.538202     -0.619522     -0.932047      0.932047       272.884       273.816    
  51  0.770233     -0.261062     -0.392758      0.392758       273.876       274.269    
  52  0.661649     -0.413020     -0.621373      0.621373       273.824       274.445    
  53  0.776910     -0.252431     -0.379772      0.379772       275.413       275.793    
  54  0.671075     -0.398874     -0.600091      0.600091       274.686       275.286    
  55  0.734406E-01  -2.61128      -3.92857       3.92857       275.872       279.801    
  56  0.949566     -0.517501E-01 -0.778560E-01  0.778560E-01   276.956       277.034    
  57  0.150244      -1.89549      -2.85170       2.85170       277.280       280.132    
  58  0.928065     -0.746531E-01 -0.112313      0.112313       277.353       277.466    
  59  0.507161     -0.678926      -1.02142       1.02142       275.789       276.811    
  60  0.381390     -0.963934      -1.45020       1.45020       277.487       278.937    
  61  0.295414      -1.21938      -1.83451       1.83451       273.674       275.509    
  62  0.120313E-01  -4.42024      -6.65009       6.65009       276.649       283.299    
  63  0.286670      -1.24942      -1.87971       1.87971       278.238       280.118    
  64  0.557325     -0.584607     -0.879519      0.879519       252.144       253.023    
loop,thermsimp(1:2)       77  0.321610      0.147667    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    456        271.87          0.88          1.08         23.12          0.01          0.04         25.13
Just calling func    0   0         25.13


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    271.87
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.50446               505
loop is:       77
neval is:      455
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       77      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    1.50446               505
loop is:       78
neval is:      455


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      505
neval,tstepnext:      455     505

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.511642     -0.670131      -1.00819       1.00819       231.316       232.324    
   2  0.243468      -1.41277      -2.12546       2.12546       244.202       246.327    
   3  0.259231      -1.35003      -2.03108       2.03108       244.286       246.317    
   4  0.411864     -0.887061      -1.33455       1.33455       244.750       246.085    
   5  0.192374      -1.64831      -2.47982       2.47982       245.655       248.135    
   6  0.504542     -0.684104      -1.02921       1.02921       244.829       245.858    
   7  0.404455E-01  -3.20780      -4.82601       4.82601       246.469       251.295    
   8  0.157113      -1.85079      -2.78445       2.78445       246.707       249.492    
   9  0.833701     -0.181880     -0.273632      0.273632       249.047       249.320    
  10  0.878720     -0.129289     -0.194510      0.194510       249.595       249.790    
  11  0.237147      -1.43908      -2.16504       2.16504       250.929       253.094    
  12  0.936993     -0.650795E-01 -0.979097E-01  0.979097E-01   250.450       250.548    
  13  0.651018     -0.429219     -0.645743      0.645743       251.225       251.871    
  14  0.366374      -1.00410      -1.51063       1.51063       251.965       253.475    
  15  0.484826E-02  -5.32914      -8.01748       8.01748       251.409       259.426    
  16  0.509486     -0.674354      -1.01454       1.01454       252.144       253.158    
  17  0.685690     -0.377329     -0.567677      0.567677       252.943       253.511    
  18  0.321855E-01  -3.43624      -5.16969       5.16969       252.588       257.758    
  19  0.442039     -0.816357      -1.22818       1.22818       252.214       253.442    
  20  0.209598      -1.56256      -2.35082       2.35082       253.891       256.242    
  21  0.378107     -0.972579      -1.46321       1.46321       252.789       254.253    
  22  0.604565     -0.503247     -0.757116      0.757116       252.500       253.257    
  23  0.178047      -1.72571      -2.59626       2.59626       255.115       257.711    
  24  0.784915     -0.242179     -0.364350      0.364350       253.443       253.808    
  25  0.685234     -0.377994     -0.568678      0.568678       250.480       251.049    
  26  0.423928     -0.858193      -1.29112       1.29112       256.866       258.157    
  27  0.413814E-01  -3.18492      -4.79160       4.79160       254.341       259.133    
  28  0.788249     -0.237942     -0.357974      0.357974       261.877       262.235    
  29  0.212924      -1.54682      -2.32713       2.32713       262.297       264.624    
  30  0.934569     -0.676697E-01 -0.101807      0.101807       259.496       259.598    
  31  0.361270      -1.01813      -1.53174       1.53174       262.350       263.882    
  32  0.755006     -0.281030     -0.422799      0.422799       264.341       264.763    
  33  0.454810     -0.787875      -1.18533       1.18533       264.230       265.415    
  34  0.152938      -1.87772      -2.82496       2.82496       264.524       267.349    
  35  0.376573     -0.976642      -1.46932       1.46932       259.374       260.843    
  36  0.571848E-01  -2.86147      -4.30497       4.30497       265.290       269.595    
  37  0.995942     -0.406615E-02 -0.611736E-02  0.611736E-02   268.366       268.372    
  38  0.834052     -0.181460     -0.272999      0.272999       268.603       268.876    
  39  0.481290     -0.731286      -1.10019       1.10019       267.993       269.093    
  40  0.289962E-01  -3.54059      -5.32668       5.32668       269.398       274.725    
  41  0.897798     -0.107810     -0.162196      0.162196       268.027       268.189    
  42  0.721121     -0.326948     -0.491881      0.491881       270.598       271.090    
  43  0.946509     -0.549753E-01 -0.827083E-01  0.827083E-01   270.367       270.449    
  44  0.134166      -2.00868      -3.02198       3.02198       272.126       275.148    
  45  0.747061     -0.291608     -0.438713      0.438713       270.497       270.936    
  46  0.284226      -1.25799      -1.89259       1.89259       270.221       272.114    
  47  0.785305     -0.241683     -0.363603      0.363603       270.617       270.981    
  48  0.240863      -1.42353      -2.14164       2.14164       272.884       275.026    
  49  0.289983      -1.23793      -1.86243       1.86243       273.105       274.968    
  50  0.847789     -0.165124     -0.248423      0.248423       273.876       274.124    
  51  0.981904     -0.182614E-01 -0.274736E-01  0.274736E-01   273.626       273.654    
  52  0.193174      -1.64416      -2.47358       2.47358       273.824       276.297    
  53  0.657957     -0.418616     -0.629791      0.629791       274.154       274.784    
  54  0.477119     -0.739990      -1.11329       1.11329       274.686       275.800    
  55  0.751550     -0.285617     -0.429701      0.429701       273.674       274.104    
  56  0.375761     -0.978801      -1.47257       1.47257       275.413       276.886    
  57  0.896165     -0.109631     -0.164936      0.164936       275.789       275.954    
  58  0.222381      -1.50336      -2.26175       2.26175       276.956       279.218    
  59  0.296050E-01  -3.51981      -5.29542       5.29542       277.353       282.649    
  60  0.433703     -0.835396      -1.25682       1.25682       277.487       278.744    
  61  0.747265     -0.291335     -0.438303      0.438303       275.872       276.311    
  62  0.165490      -1.79885      -2.70630       2.70630       278.238       280.944    
  63  0.717756     -0.331626     -0.498918      0.498918       277.280       277.779    
  64  0.556048     -0.586901     -0.882970      0.882970       271.873       272.756    
loop,thermsimp(1:2)       78   1.00819       2.12546    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    457        243.57          0.88          1.08         23.12          0.00          0.05         25.13
Just calling func    0   0         25.13


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    243.57
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.50446               505
loop is:       78
neval is:      456
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       78      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    1.50446               505
loop is:       79
neval is:      456


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      505
neval,tstepnext:      456     505

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.674234     -0.394178     -0.593026      0.593026       231.316       231.909    
   2  0.763241     -0.270181     -0.406477      0.406477       244.829       245.236    
   3  0.181180      -1.70826      -2.57002       2.57002       244.750       247.320    
   4  0.986466     -0.136262E-01 -0.205001E-01  0.205001E-01   244.286       244.306    
   5  0.907914     -0.966062E-01 -0.145340      0.145340       244.202       244.347    
   6  0.686562     -0.376058     -0.565765      0.565765       245.655       246.221    
   7  0.269744E-01  -3.61287      -5.43542       5.43542       249.047       254.482    
   8  0.305757      -1.18497      -1.78274       1.78274       246.707       248.490    
   9  0.678790     -0.387443     -0.582893      0.582893       249.595       250.178    
  10  0.376044     -0.978048      -1.47144       1.47144       250.450       251.922    
  11  0.569163     -0.563589     -0.847897      0.847897       250.480       251.328    
  12  0.700219E-02  -4.96153      -7.46444       7.46444       246.469       253.933    
  13  0.271434      -1.30403      -1.96187       1.96187       251.225       253.187    
  14  0.412709     -0.885014      -1.33147       1.33147       250.929       252.260    
  15  0.230294      -1.46840      -2.20915       2.20915       252.144       254.353    
  16  0.453167     -0.791494      -1.19077       1.19077       252.500       253.691    
  17  0.225846E-01  -3.79049      -5.70264       5.70264       252.214       257.916    
  18  0.295035E-01  -3.52324      -5.30059       5.30059       251.965       257.265    
  19  0.766595     -0.265797     -0.399881      0.399881       252.943       253.343    
  20  0.995962     -0.404634E-02 -0.608756E-02  0.608756E-02   253.443       253.449    
  21  0.816964     -0.202160     -0.304142      0.304142       252.789       253.094    
  22  0.376195     -0.977647      -1.47083       1.47083       253.891       255.362    
  23  0.557992     -0.583410     -0.877718      0.877718       255.115       255.993    
  24  0.643422     -0.440955     -0.663400      0.663400       252.588       253.252    
  25  0.999852     -0.147642E-03 -0.222122E-03  0.222122E-03   256.866       256.866    
  26  0.644170     -0.439793     -0.661652      0.661652       254.341       255.003    
  27  0.216981      -1.52794      -2.29873       2.29873       251.409       253.708    
  28  0.469613     -0.755845      -1.13714       1.13714       259.496       260.634    
  29  0.241394      -1.42133      -2.13833       2.13833       259.374       261.512    
  30  0.598509     -0.513314     -0.772262      0.772262       261.877       262.649    
  31  0.671670     -0.397989     -0.598759      0.598759       262.350       262.949    
  32  0.508456     -0.676377      -1.01758       1.01758       262.297       263.315    
  33  0.142355      -1.94943      -2.93284       2.93284       264.341       267.273    
  34  0.314602      -1.15645      -1.73983       1.73983       264.230       265.970    
  35  0.595792     -0.517863     -0.779105      0.779105       264.524       265.303    
  36  0.980752     -0.194358E-01 -0.292404E-01  0.292404E-01   268.027       268.056    
  37  0.574834     -0.553674     -0.832982      0.832982       268.366       269.199    
  38  0.176457      -1.73468      -2.60976       2.60976       268.603       271.213    
  39  0.972462     -0.279243E-01 -0.420110E-01  0.420110E-01   267.993       268.035    
  40  0.914299     -0.895977E-01 -0.134796      0.134796       265.290       265.425    
  41  0.844829E-01  -2.47121      -3.71784       3.71784       270.367       274.084    
  42  0.173441E-01  -4.05450      -6.09985       6.09985       270.497       276.597    
  43  0.558790     -0.581981     -0.875569      0.875569       270.617       271.493    
  44  0.102972      -2.27330      -3.42009       3.42009       270.598       274.018    
  45  0.479128E-01  -3.03837      -4.57112       4.57112       270.221       274.792    
  46  0.955710     -0.453003E-01 -0.681526E-01  0.681526E-01   271.873       271.941    
  47  0.768826     -0.262891     -0.395509      0.395509       273.626       274.022    
  48  0.634123     -0.455512     -0.685300      0.685300       273.674       274.359    
  49  0.460722     -0.774961      -1.16590       1.16590       273.876       275.042    
  50  0.376372     -0.977178      -1.47013       1.47013       269.398       270.868    
  51  0.784580     -0.242607     -0.364992      0.364992       274.154       274.519    
  52  0.870295     -0.138923     -0.209004      0.209004       273.105       273.314    
  53  0.554002     -0.590587     -0.888516      0.888516       272.884       273.773    
  54  0.186441      -1.67964      -2.52696       2.52696       272.126       274.653    
  55  0.267480      -1.31871      -1.98395       1.98395       274.686       276.670    
  56  0.867677     -0.141936     -0.213537      0.213537       275.789       276.003    
  57  0.172397      -1.75795      -2.64477       2.64477       273.824       276.469    
  58  0.959742     -0.410907E-01 -0.618195E-01  0.618195E-01   275.872       275.934    
  59  0.806336     -0.215255     -0.323842      0.323842       275.413       275.737    
  60  0.605158     -0.502266     -0.755640      0.755640       277.280       278.036    
  61  0.953035     -0.481032E-01 -0.723694E-01  0.723694E-01   277.487       277.559    
  62  0.835597     -0.179609     -0.270214      0.270214       276.956       277.226    
  63  0.116176      -2.15265      -3.23857       3.23857       278.238       281.477    
  64  0.409566     -0.892657      -1.34297       1.34297       243.574       244.917    
loop,thermsimp(1:2)       79  0.593026      0.406477    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    458        256.55          0.88          1.09         23.12          0.00          0.05         25.14
Just calling func    0   0         25.14


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    256.55
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.50446               505
loop is:       79
neval is:      457
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       79      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    1.50446               505
loop is:       80
neval is:      457


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      505
neval,tstepnext:      457     505

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.684247     -0.379436     -0.570846      0.570846       231.316       231.887    
   2  0.345348      -1.06320      -1.59955       1.59955       244.286       245.885    
   3  0.950053     -0.512378E-01 -0.770854E-01  0.770854E-01   244.202       244.279    
   4  0.837893     -0.176865     -0.266087      0.266087       243.574       243.840    
   5  0.333546      -1.09797      -1.65186       1.65186       244.829       246.481    
   6  0.161688      -1.82209      -2.74126       2.74126       245.655       248.396    
   7  0.617647     -0.481838     -0.724908      0.724908       244.750       245.475    
   8  0.401140     -0.913446      -1.37424       1.37424       246.707       248.081    
   9  0.358257E-01  -3.32909      -5.00849       5.00849       249.595       254.604    
  10  0.349088E-01  -3.35502      -5.04749       5.04749       250.480       255.528    
  11  0.152040      -1.88361      -2.83382       2.83382       250.450       253.284    
  12  0.703870     -0.351161     -0.528309      0.528309       250.929       251.457    
  13  0.550338     -0.597222     -0.898497      0.898497       252.789       253.688    
  14  0.320062      -1.13924      -1.71395       1.71395       251.225       252.939    
  15  0.842058     -0.171906     -0.258626      0.258626       252.588       252.847    
  16  0.872615     -0.136260     -0.204999      0.204999       252.943       253.148    
  17  0.687324     -0.374949     -0.564097      0.564097       253.443       254.008    
  18  0.707329     -0.346259     -0.520934      0.520934       252.500       253.021    
  19  0.781599     -0.246413     -0.370719      0.370719       251.409       251.780    
  20  0.257984      -1.35486      -2.03833       2.03833       246.469       248.507    
  21  0.624920     -0.470132     -0.707295      0.707295       252.144       252.851    
  22  0.816734     -0.202441     -0.304565      0.304565       249.047       249.351    
  23  0.740445     -0.300504     -0.452098      0.452098       254.341       254.793    
  24  0.433128     -0.836721      -1.25882       1.25882       253.891       255.150    
  25  0.964932E-01  -2.33828      -3.51786       3.51786       255.115       258.633    
  26  0.336813      -1.08823      -1.63720       1.63720       256.866       258.503    
  27  0.631668     -0.459391     -0.691136      0.691136       251.965       252.656    
  28  0.173511      -1.75152      -2.63509       2.63509       252.214       254.849    
  29  0.714113     -0.336715     -0.506574      0.506574       259.496       260.003    
  30  0.856732     -0.154630     -0.232635      0.232635       259.374       259.607    
  31  0.871530     -0.137505     -0.206871      0.206871       261.877       262.083    
  32  0.524684     -0.644958     -0.970315      0.970315       262.350       263.321    
  33  0.199462      -1.61213      -2.42539       2.42539       262.297       264.723    
  34  0.848275     -0.164551     -0.247561      0.247561       264.524       264.772    
  35  0.836784     -0.178190     -0.268080      0.268080       265.290       265.558    
  36  0.478860E-01  -3.03893      -4.57196       4.57196       264.230       268.802    
  37  0.297469      -1.21245      -1.82408       1.82408       264.341       266.165    
  38  0.649198     -0.432018     -0.649954      0.649954       267.993       268.643    
  39  0.657692     -0.419018     -0.630397      0.630397       268.027       268.657    
  40  0.684263     -0.379413     -0.570812      0.570812       268.366       268.937    
  41  0.249508      -1.38826      -2.08859       2.08859       269.398       271.487    
  42  0.745618     -0.293542     -0.441623      0.441623       268.603       269.045    
  43  0.338359      -1.08365      -1.63031       1.63031       270.617       272.248    
  44  0.472339     -0.750059      -1.12843       1.12843       271.873       273.001    
  45  0.796486     -0.227546     -0.342335      0.342335       273.105       273.448    
  46  0.241988      -1.41887      -2.13463       2.13463       272.884       275.019    
  47  0.162775      -1.81539      -2.73118       2.73118       270.598       273.329    
  48  0.749633     -0.288171     -0.433543      0.433543       273.626       274.060    
  49  0.942194     -0.595438E-01 -0.895813E-01  0.895813E-01   270.367       270.456    
  50  0.823760E-01  -2.49646      -3.75583       3.75583       273.674       277.430    
  51  0.437045     -0.827720      -1.24527       1.24527       274.154       275.399    
  52  0.812234     -0.207967     -0.312878      0.312878       272.126       272.439    
  53  0.690291     -0.370642     -0.557616      0.557616       270.221       270.779    
  54  0.592810     -0.522881     -0.786655      0.786655       273.876       274.663    
  55  0.547326     -0.602712     -0.906757      0.906757       275.413       276.320    
  56  0.132779      -2.01907      -3.03761       3.03761       275.872       278.910    
  57  0.613048     -0.489313     -0.736152      0.736152       275.789       276.525    
  58  0.569441     -0.563101     -0.847164      0.847164       273.824       274.671    
  59  0.927770     -0.749713E-01 -0.112791      0.112791       270.497       270.610    
  60  0.788850E-01  -2.53976      -3.82098       3.82098       274.686       278.507    
  61  0.762671     -0.270929     -0.407602      0.407602       276.956       277.364    
  62  0.128616      -2.05093      -3.08554       3.08554       277.487       280.572    
  63  0.297022E-01  -3.51653      -5.29049       5.29049       277.280       282.571    
  64  0.145152      -1.92997      -2.90357       2.90357       256.554       259.457    
loop,thermsimp(1:2)       80  0.570846       1.59955    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    459        238.61          0.88          1.09         23.14          0.00          0.04         25.15
Just calling func    0   0         25.15


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    238.61
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.50446               505
loop is:       80
neval is:      458
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       80      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    1.50446               505
loop is:       81
neval is:      458


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      505
neval,tstepnext:      458     505

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.212099      -1.55070      -2.33297       2.33297       231.316       233.649    
   2  0.790720E-01  -2.53740      -3.81742       3.81742       243.574       247.391    
   3  0.474562     -0.745363      -1.12137       1.12137       244.202       245.323    
   4  0.898144E-01  -2.41001      -3.62577       3.62577       244.750       248.376    
   5  0.458101     -0.780666      -1.17448       1.17448       244.286       245.460    
   6  0.931196     -0.712852E-01 -0.107246      0.107246       244.829       244.936    
   7  0.205708      -1.58130      -2.37900       2.37900       246.707       249.086    
   8  0.733185     -0.310357     -0.466921      0.466921       245.655       246.122    
   9  0.169450      -1.77520      -2.67072       2.67072       246.469       249.139    
  10  0.474919     -0.744612      -1.12024       1.12024       249.047       250.167    
  11  0.843615     -0.170059     -0.255847      0.255847       250.929       251.185    
  12  0.876719     -0.131569     -0.197940      0.197940       251.409       251.607    
  13  0.190440E-01  -3.96100      -5.95918       5.95918       251.965       257.924    
  14  0.303072      -1.19379      -1.79601       1.79601       252.588       254.384    
  15  0.469764     -0.755525      -1.13666       1.13666       252.144       253.280    
  16  0.571967     -0.558673     -0.840503      0.840503       251.225       252.066    
  17  0.672551E-01  -2.69926      -4.06094       4.06094       252.500       256.561    
  18  0.255734      -1.36362      -2.05151       2.05151       252.943       254.995    
  19  0.984593E-01  -2.31811      -3.48751       3.48751       250.450       253.938    
  20  0.106790      -2.23689      -3.36531       3.36531       252.789       256.155    
  21  0.569872     -0.562343     -0.846024      0.846024       253.443       254.289    
  22  0.535167     -0.625176     -0.940553      0.940553       249.595       250.536    
  23  0.874592     -0.133997     -0.201594      0.201594       254.341       254.543    
  24  0.437299     -0.827137      -1.24440       1.24440       252.214       253.458    
  25  0.859028     -0.151954     -0.228609      0.228609       253.891       254.120    
  26  0.766029     -0.266535     -0.400991      0.400991       250.480       250.881    
  27  0.702099     -0.353680     -0.532099      0.532099       256.866       257.398    
  28  0.161598      -1.82264      -2.74209       2.74209       255.115       257.857    
  29  0.212172      -1.55036      -2.33245       2.33245       256.554       258.886    
  30  0.776087     -0.253491     -0.381367      0.381367       259.374       259.755    
  31  0.346547      -1.05974      -1.59433       1.59433       259.496       261.091    
  32  0.175995      -1.73730      -2.61370       2.61370       261.877       264.490    
  33  0.310769      -1.16870      -1.75827       1.75827       262.350       264.109    
  34  0.716675     -0.333133     -0.501186      0.501186       262.297       262.799    
  35  0.977373E-01  -2.32547      -3.49858       3.49858       264.524       268.023    
  36  0.191888      -1.65084      -2.48363       2.48363       265.290       267.774    
  37  0.323564      -1.12836      -1.69757       1.69757       264.341       266.038    
  38  0.289367      -1.24006      -1.86562       1.86562       267.993       269.858    
  39  0.209149      -1.56471      -2.35404       2.35404       268.027       270.381    
  40  0.879527     -0.128371     -0.193130      0.193130       264.230       264.423    
  41  0.148061      -1.91013      -2.87372       2.87372       268.366       271.239    
  42  0.432943     -0.837149      -1.25946       1.25946       268.603       269.863    
  43  0.558965     -0.581668     -0.875097      0.875097       270.367       271.242    
  44  0.496743     -0.699682      -1.05264       1.05264       270.497       271.550    
  45  0.791585     -0.233718     -0.351620      0.351620       270.221       270.573    
  46  0.394764E-01  -3.23205      -4.86250       4.86250       269.398       274.261    
  47  0.665239E-01  -2.71019      -4.07738       4.07738       270.617       274.695    
  48  0.309823      -1.17176      -1.76286       1.76286       272.126       273.889    
  49  0.121985      -2.10386      -3.16517       3.16517       271.873       275.038    
  50  0.533360     -0.628558     -0.945642      0.945642       270.598       271.544    
  51  0.699667     -0.357151     -0.537320      0.537320       273.105       273.643    
  52  0.824712     -0.192721     -0.289942      0.289942       273.626       273.916    
  53  0.751113     -0.286199     -0.430576      0.430576       273.876       274.307    
  54  0.625810     -0.468709     -0.705155      0.705155       273.824       274.529    
  55  0.340567      -1.07714      -1.62052       1.62052       272.884       274.505    
  56  0.649406     -0.431697     -0.649471      0.649471       274.154       274.803    
  57  0.596679E-01  -2.81896      -4.24102       4.24102       275.413       279.654    
  58  0.104669      -2.25695      -3.39549       3.39549       275.789       279.185    
  59  0.870639     -0.138528     -0.208409      0.208409       276.956       277.164    
  60  0.199273      -1.61308      -2.42682       2.42682       273.674       276.101    
  61  0.714965     -0.335521     -0.504779      0.504779       274.686       275.191    
  62  0.431641     -0.840162      -1.26399       1.26399       275.872       277.136    
  63  0.208886      -1.56597      -2.35594       2.35594       277.487       279.843    
  64  0.859431     -0.151485     -0.227903      0.227903       238.614       238.842    
loop,thermsimp(1:2)       81   2.33297       3.81742    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    460        271.44          0.88          1.09         23.11          0.00          0.04         25.12
Just calling func    0   0         25.12


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    271.44
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.50446               505
loop is:       81
neval is:      459
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       81      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    1.50446               505
loop is:       82
neval is:      459


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      505
neval,tstepnext:      459     505

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.879977     -0.127859     -0.192359      0.192359       231.316       231.508    
   2  0.617618     -0.481886     -0.724979      0.724979       238.614       239.339    
   3  0.816358E-01  -2.50549      -3.76941       3.76941       244.829       248.599    
   4  0.265705      -1.32537      -1.99397       1.99397       244.202       246.196    
   5  0.156102      -1.85725      -2.79416       2.79416       244.286       247.080    
   6  0.155187      -1.86313      -2.80300       2.80300       245.655       248.458    
   7  0.650347     -0.430249     -0.647293      0.647293       243.574       244.221    
   8  0.801207     -0.221636     -0.333443      0.333443       244.750       245.084    
   9  0.935908     -0.662378E-01 -0.996523E-01  0.996523E-01   246.707       246.807    
  10  0.764783E-01  -2.57075      -3.86759       3.86759       246.469       250.336    
  11  0.819025     -0.199640     -0.300351      0.300351       249.047       249.347    
  12  0.175545      -1.73986      -2.61755       2.61755       249.595       252.213    
  13  0.945804     -0.557201E-01 -0.838287E-01  0.838287E-01   250.480       250.564    
  14  0.254592      -1.36809      -2.05824       2.05824       250.929       252.987    
  15  0.969942     -0.305188E-01 -0.459143E-01  0.459143E-01   251.409       251.455    
  16  0.751504     -0.285679     -0.429793      0.429793       251.225       251.655    
  17  0.129569E-01  -4.34612      -6.53858       6.53858       252.144       258.682    
  18  0.591393     -0.525275     -0.790256      0.790256       252.214       253.004    
  19  0.994087     -0.593042E-02 -0.892210E-02  0.892210E-02   250.450       250.459    
  20  0.697601     -0.360108     -0.541769      0.541769       253.891       254.433    
  21  0.633469     -0.456544     -0.686852      0.686852       253.443       254.130    
  22  0.391583     -0.937557      -1.41052       1.41052       252.588       253.999    
  23  0.599575     -0.511533     -0.769583      0.769583       254.341       255.111    
  24  0.481571     -0.730701      -1.09931       1.09931       252.943       254.043    
  25  0.420827     -0.865533      -1.30216       1.30216       252.789       254.092    
  26  0.254691      -1.36770      -2.05766       2.05766       252.500       254.558    
  27  0.950472     -0.507971E-01 -0.764223E-01  0.764223E-01   256.866       256.942    
  28  0.113706      -2.17414      -3.27091       3.27091       255.115       258.386    
  29  0.172661      -1.75643      -2.64248       2.64248       251.965       254.607    
  30  0.718739     -0.330257     -0.496859      0.496859       256.554       257.051    
  31  0.564748     -0.571375     -0.859612      0.859612       259.374       260.234    
  32  0.638696     -0.448327     -0.674490      0.674490       259.496       260.171    
  33  0.342849      -1.07047      -1.61048       1.61048       262.297       263.908    
  34  0.401270     -0.913121      -1.37376       1.37376       262.350       263.724    
  35  0.918599     -0.849058E-01 -0.127738      0.127738       264.230       264.358    
  36  0.566118     -0.568953     -0.855968      0.855968       261.877       262.733    
  37  0.187554      -1.67369      -2.51800       2.51800       264.341       266.859    
  38  0.749582E-01  -2.59082      -3.89780       3.89780       265.290       269.188    
  39  0.286085      -1.25147      -1.88279       1.88279       264.524       266.407    
  40  0.412337     -0.885914      -1.33282       1.33282       267.993       269.325    
  41  0.455811     -0.785678      -1.18202       1.18202       268.603       269.785    
  42  0.676067     -0.391462     -0.588940      0.588940       268.027       268.616    
  43  0.452490     -0.792991      -1.19302       1.19302       270.221       271.414    
  44  0.131068E-01  -4.33463      -6.52128       6.52128       268.366       274.887    
  45  0.880822     -0.126900     -0.190916      0.190916       270.367       270.557    
  46  0.381257E-01  -3.26687      -4.91488       4.91488       270.598       275.513    
  47  0.285013      -1.25522      -1.88843       1.88843       270.497       272.385    
  48  0.279597      -1.27441      -1.91730       1.91730       273.105       275.023    
  49  0.652608     -0.426779     -0.642073      0.642073       272.126       272.768    
  50  0.300945      -1.20083      -1.80660       1.80660       273.626       275.433    
  51  0.961982     -0.387594E-01 -0.583121E-01  0.583121E-01   269.398       269.457    
  52  0.729062E-01  -2.61858      -3.93956       3.93956       273.876       277.816    
  53  0.109451      -2.21228      -3.32828       3.32828       272.884       276.213    
  54  0.681950     -0.382798     -0.575905      0.575905       273.824       274.400    
  55  0.897690     -0.107930     -0.162376      0.162376       270.617       270.780    
  56  0.961917     -0.388267E-01 -0.584132E-01  0.584132E-01   274.154       274.212    
  57  0.466988E-01  -3.06404      -4.60973       4.60973       271.873       276.483    
  58  0.196480      -1.62720      -2.44805       2.44805       274.686       277.134    
  59  0.306123      -1.18377      -1.78094       1.78094       273.674       275.455    
  60  0.973839     -0.265094E-01 -0.398824E-01  0.398824E-01   275.872       275.912    
  61  0.149937      -1.89754      -2.85478       2.85478       276.956       279.811    
  62  0.583998     -0.537858     -0.809187      0.809187       275.789       276.598    
  63  0.574190     -0.554795     -0.834668      0.834668       275.413       276.248    
  64  0.974106E-01  -2.32882      -3.50362       3.50362       271.438       274.941    
loop,thermsimp(1:2)       82  0.192359      0.724979    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    461        276.09          0.88          1.08         23.11          0.01          0.05         25.12
Just calling func    0   0         25.12


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  460    276.09        5.273     -1.607      4.632     -100.0    -0.1720    
                      -1.574      2.295     -100.0      2.317     0.2097    
                       1.392     -1.038      2.400      0.000      0.000    
                     -0.2203      0.000      0.000      0.000     -1.221    

                      -2.500     0.1186E+05 0.1841E+05 -1627.     -2756.    
                      -2.000     -10.04     -1.809     -5.180      1.940    
                      -12.34     -1.807      1359.      0.000      3354.    

                       4764.      3323.      5073.      5329.      2500.    
                       4298.     0.1918     0.1130      0.000    -0.5435E-01
                      0.2905     0.5642E-01 0.2658     0.1518    -0.1732    

                     -0.8175    -0.5244      0.000     0.4567     0.3189    
                      0.8541E-01 0.2668     0.3070     0.3580     0.2190    
                      0.2388    -0.7355E-02-0.7785E-01-0.2781      0.000    

                      -2.827     -5.459      7.820    -0.6116      0.000    
                       0.000      9.070      9.176     -6032.     -4.000    
                      0.2382     0.4181      9.185      7.811    -0.5307E+05

                      -4.000     0.9007      2.257      9.387      9.357    
                      -7044.     -4.000     0.9486      1.319      9.576    
                       9.149     -1269.     -2.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    276.09
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.50446               505
loop is:       82
neval is:      460
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       82      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    1.50446               505
loop is:       83
neval is:      460


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      505
neval,tstepnext:      460     505

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.552115     -0.593999     -0.893649      0.893649       231.316       232.209    
   2  0.319086      -1.14229      -1.71854       1.71854       238.614       240.333    
   3  0.987809     -0.122656E-01 -0.184531E-01  0.184531E-01   243.574       243.592    
   4  0.730684     -0.313774     -0.472062      0.472062       244.750       245.222    
   5  0.330217      -1.10801      -1.66695       1.66695       244.202       245.869    
   6  0.228208      -1.47750      -2.22284       2.22284       246.707       248.930    
   7  0.531449     -0.632148     -0.951042      0.951042       244.286       245.237    
   8  0.291369      -1.23317      -1.85525       1.85525       245.655       247.510    
   9  0.868373     -0.141133     -0.212330      0.212330       244.829       245.041    
  10  0.750840     -0.286563     -0.431123      0.431123       249.047       249.478    
  11  0.922302     -0.808828E-01 -0.121685      0.121685       246.469       246.590    
  12  0.835004     -0.180318     -0.271282      0.271282       250.450       250.722    
  13  0.839915     -0.174454     -0.262460      0.262460       250.480       250.743    
  14  0.436966     -0.827899      -1.24554       1.24554       251.409       252.654    
  15  0.960108     -0.407096E-01 -0.612460E-01  0.612460E-01   251.225       251.286    
  16  0.651732     -0.428122     -0.644093      0.644093       249.595       250.239    
  17  0.309700      -1.17215      -1.76346       1.76346       250.929       252.692    
  18  0.526921     -0.640704     -0.963915      0.963915       252.214       253.178    
  19  0.853737     -0.158132     -0.237903      0.237903       252.588       252.826    
  20  0.266678      -1.32171      -1.98847       1.98847       252.943       254.932    
  21  0.299571      -1.20541      -1.81349       1.81349       252.789       254.603    
  22  0.846742     -0.166360     -0.250282      0.250282       253.443       253.694    
  23  0.818359     -0.200455     -0.301577      0.301577       253.891       254.193    
  24  0.234883      -1.44867      -2.17947       2.17947       252.500       254.680    
  25  0.986151     -0.139454E-01 -0.209803E-01  0.209803E-01   251.965       251.986    
  26  0.974313     -0.260229E-01 -0.391504E-01  0.391504E-01   254.341       254.380    
  27  0.620281E-01  -2.78017      -4.18266       4.18266       256.866       261.049    
  28  0.368305E-01  -3.30143      -4.96687       4.96687       256.554       261.521    
  29  0.111356      -2.19502      -3.30232       3.30232       255.115       258.417    
  30  0.617410     -0.482223     -0.725486      0.725486       252.144       252.869    
  31  0.275412      -1.28949      -1.93999       1.93999       259.496       261.436    
  32  0.173447      -1.75188      -2.63564       2.63564       259.374       262.010    
  33  0.570479     -0.561280     -0.844424      0.844424       261.877       262.721    
  34  0.359525      -1.02297      -1.53902       1.53902       262.350       263.889    
  35  0.933691     -0.686097E-01 -0.103221      0.103221       262.297       262.401    
  36  0.510279     -0.672797      -1.01220       1.01220       264.230       265.242    
  37  0.347312      -1.05753      -1.59102       1.59102       264.524       266.115    
  38  0.491006E-01  -3.01388      -4.53427       4.53427       264.341       268.875    
  39  0.410429     -0.890552      -1.33980       1.33980       268.027       269.367    
  40  0.344238      -1.06642      -1.60439       1.60439       265.290       266.895    
  41  0.472799     -0.749085      -1.12697       1.12697       267.993       269.120    
  42  0.785791     -0.241064     -0.362672      0.362672       269.398       269.761    
  43  0.925744     -0.771577E-01 -0.116081      0.116081       268.603       268.719    
  44  0.529151     -0.636482     -0.957562      0.957562       270.367       271.324    
  45  0.815207     -0.204313     -0.307381      0.307381       270.617       270.925    
  46  0.825373     -0.191920     -0.288736      0.288736       270.221       270.510    
  47  0.876860     -0.131408     -0.197699      0.197699       270.497       270.695    
  48  0.579930     -0.544847     -0.819702      0.819702       272.126       272.946    
  49  0.593104     -0.522386     -0.785910      0.785910       274.154       274.940    
  50  0.376238     -0.977534      -1.47066       1.47066       273.824       275.295    
  51  0.987748     -0.123280E-01 -0.185469E-01  0.185469E-01   268.366       268.384    
  52  0.985743     -0.143594E-01 -0.216032E-01  0.216032E-01   271.438       271.459    
  53  0.991599     -0.843651E-02 -0.126924E-01  0.126924E-01   273.105       273.118    
  54  0.497863     -0.697430      -1.04926       1.04926       273.626       274.675    
  55  0.787530E-01  -2.54144      -3.82350       3.82350       273.674       277.498    
  56  0.232896      -1.45716      -2.19225       2.19225       270.598       272.790    
  57  0.971733     -0.286747E-01 -0.431400E-01  0.431400E-01   275.872       275.916    
  58  0.434796     -0.832877      -1.25303       1.25303       272.884       274.137    
  59  0.643441     -0.440925     -0.663355      0.663355       275.413       276.077    
  60  0.681166     -0.383949     -0.577637      0.577637       271.873       272.451    
  61  0.579011     -0.546434     -0.822089      0.822089       275.789       276.611    
  62  0.944457     -0.571450E-01 -0.859725E-01  0.859725E-01   274.686       274.772    
  63  0.712041     -0.339620     -0.510945      0.510945       273.876       274.387    
  64  0.352727      -1.04206      -1.56774       1.56774       276.086       277.653    
loop,thermsimp(1:2)       83  0.893649       1.71854    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    462        276.96          0.88          1.10         23.06          0.07          0.04         25.15
Just calling func    0   0         25.15


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    276.96
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.50446               505
loop is:       83
neval is:      461
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       83      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    1.50446               505
loop is:       84
neval is:      461


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      505
neval,tstepnext:      461     505

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.379478     -0.968959      -1.45776       1.45776       231.316       232.774    
   2  0.957028     -0.439225E-01 -0.660797E-01  0.660797E-01   238.614       238.680    
   3  0.360821      -1.01937      -1.53361       1.53361       243.574       245.107    
   4  0.115816      -2.15575      -3.24325       3.24325       244.829       248.072    
   5  0.739959E-01  -2.60375      -3.91724       3.91724       244.750       248.668    
   6  0.618280     -0.480813     -0.723365      0.723365       244.286       245.009    
   7  0.885995     -0.121044     -0.182106      0.182106       244.202       244.384    
   8  0.635424     -0.453462     -0.682217      0.682217       246.469       247.151    
   9  0.807967E-01  -2.51582      -3.78495       3.78495       245.655       249.440    
  10  0.741317     -0.299327     -0.450326      0.450326       246.707       247.158    
  11  0.226644      -1.48438      -2.23319       2.23319       249.047       251.280    
  12  0.538747     -0.618510     -0.930525      0.930525       249.595       250.526    
  13  0.161559      -1.82289      -2.74246       2.74246       250.450       253.193    
  14  0.460148     -0.776207      -1.16777       1.16777       250.480       251.648    
  15  0.747711     -0.290739     -0.437405      0.437405       251.225       251.662    
  16  0.780108E-01  -2.55091      -3.83774       3.83774       251.965       255.803    
  17  0.966572     -0.339994E-01 -0.511508E-01  0.511508E-01   251.409       251.460    
  18  0.724118     -0.322802     -0.485643      0.485643       250.929       251.414    
  19  0.558090     -0.583236     -0.877456      0.877456       252.588       253.466    
  20  0.646658     -0.435938     -0.655851      0.655851       252.144       252.799    
  21  0.667537     -0.404161     -0.608044      0.608044       252.214       252.822    
  22  0.526422     -0.641653     -0.965342      0.965342       253.443       254.409    
  23  0.429996     -0.843979      -1.26973       1.26973       253.891       255.161    
  24  0.795573     -0.228692     -0.344059      0.344059       254.341       254.685    
  25  0.102698      -2.27597      -3.42410       3.42410       252.789       256.214    
  26  0.727545     -0.318079     -0.478538      0.478538       252.500       252.979    
  27  0.266601      -1.32200      -1.98890       1.98890       252.943       254.932    
  28  0.867357     -0.142304     -0.214091      0.214091       255.115       255.329    
  29  0.850002     -0.162516     -0.244500      0.244500       256.866       257.110    
  30  0.495621     -0.701943      -1.05605       1.05605       259.496       260.552    
  31  0.321507      -1.13474      -1.70717       1.70717       256.554       258.261    
  32  0.250033E-01  -3.68875      -5.54958       5.54958       259.374       264.924    
  33  0.191559      -1.65256      -2.48621       2.48621       262.297       264.784    
  34  0.256845E-01  -3.66187      -5.50914       5.50914       261.877       267.386    
  35  0.116644E-01  -4.45121      -6.69668       6.69668       262.350       269.047    
  36  0.467566     -0.760214      -1.14371       1.14371       264.230       265.374    
  37  0.267525      -1.31854      -1.98370       1.98370       264.524       266.508    
  38  0.657917     -0.418676     -0.629882      0.629882       265.290       265.920    
  39  0.396760     -0.924425      -1.39076       1.39076       268.366       269.756    
  40  0.296989E-01  -3.51664      -5.29066       5.29066       268.603       273.894    
  41  0.609352     -0.495360     -0.745250      0.745250       264.341       265.086    
  42  0.472240     -0.750268      -1.12875       1.12875       267.993       269.121    
  43  0.537782     -0.620302     -0.933220      0.933220       268.027       268.960    
  44  0.472387     -0.749957      -1.12828       1.12828       269.398       270.527    
  45  0.906366     -0.983121E-01 -0.147907      0.147907       270.221       270.369    
  46  0.541294     -0.613793     -0.923429      0.923429       270.497       271.420    
  47  0.101850      -2.28426      -3.43658       3.43658       270.617       274.054    
  48  0.620195     -0.477721     -0.718714      0.718714       270.367       271.085    
  49  0.130970      -2.03278      -3.05825       3.05825       271.438       274.496    
  50  0.740802E-01  -2.60261      -3.91552       3.91552       271.873       275.789    
  51  0.515656     -0.662314     -0.996427      0.996427       270.598       271.594    
  52  0.280360      -1.27168      -1.91320       1.91320       272.126       274.039    
  53  0.469428E-01  -3.05882      -4.60189       4.60189       273.105       277.707    
  54  0.836383     -0.178668     -0.268799      0.268799       272.884       273.153    
  55  0.635255     -0.453729     -0.682618      0.682618       273.876       274.559    
  56  0.186177E-01  -3.98364      -5.99324       5.99324       273.626       279.619    
  57  0.818627     -0.200127     -0.301083      0.301083       274.686       274.987    
  58  0.426336     -0.852527      -1.28259       1.28259       274.154       275.437    
  59  0.511854     -0.669715      -1.00756       1.00756       273.824       274.831    
  60  0.339186      -1.08121      -1.62663       1.62663       275.872       277.499    
  61  0.524623     -0.645076     -0.970493      0.970493       275.413       276.384    
  62  0.282970      -1.26242      -1.89926       1.89926       275.789       277.688    
  63  0.223049      -1.50036      -2.25724       2.25724       273.674       275.931    
  64  0.916670     -0.870079E-01 -0.130900      0.130900       276.956       277.087    
loop,thermsimp(1:2)       84   1.45776      0.660797E-01

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    463        236.04          0.88          1.09         23.16          0.16          0.04         25.34
Just calling func    0   0         25.34


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    236.04
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.50446               505
loop is:       84
neval is:      462
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       84      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    1.50446               505
loop is:       85
neval is:      462


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      505
neval,tstepnext:      462     505

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.844994     -0.168425     -0.253390      0.253390       231.316       231.569    
   2  0.449571E-01  -3.10205      -4.66691       4.66691       238.614       243.281    
   3  0.479268     -0.735496      -1.10653       1.10653       244.202       245.308    
   4  0.429117     -0.846026      -1.27281       1.27281       244.286       245.558    
   5  0.188230      -1.67009      -2.51258       2.51258       243.574       246.086    
   6  0.299420      -1.20591      -1.81424       1.81424       246.469       248.283    
   7  0.942772     -0.589312E-01 -0.886597E-01  0.886597E-01   246.707       246.796    
   8  0.802892E-01  -2.52212      -3.79443       3.79443       244.829       248.624    
   9  0.356076      -1.03261      -1.55352       1.55352       244.750       246.304    
  10  0.599935     -0.510933     -0.768679      0.768679       245.655       246.424    
  11  0.632404     -0.458227     -0.689385      0.689385       249.595       250.285    
  12  0.707791     -0.345606     -0.519951      0.519951       249.047       249.567    
  13  0.896171     -0.109624     -0.164925      0.164925       250.929       251.094    
  14  0.953459     -0.476587E-01 -0.717007E-01  0.717007E-01   251.409       251.481    
  15  0.875614     -0.132830     -0.199838      0.199838       250.480       250.680    
  16  0.371483     -0.990253      -1.48980       1.48980       251.225       252.715    
  17  0.518071     -0.657644     -0.989400      0.989400       252.144       253.133    
  18  0.643549     -0.440757     -0.663102      0.663102       252.214       252.877    
  19  0.313409      -1.16025      -1.74555       1.74555       252.500       254.246    
  20  0.264619      -1.32946      -2.00013       2.00013       250.450       252.451    
  21  0.259435      -1.34925      -2.02990       2.02990       252.588       254.618    
  22  0.526335     -0.641817     -0.965590      0.965590       253.443       254.409    
  23  0.972976E-01  -2.32998      -3.50537       3.50537       254.341       257.846    
  24  0.511532     -0.670346      -1.00851       1.00851       252.943       253.952    
  25  0.117109      -2.14465      -3.22654       3.22654       253.891       257.118    
  26  0.211716      -1.55251      -2.33569       2.33569       255.115       257.451    
  27  0.747149     -0.291491     -0.438537      0.438537       251.965       252.403    
  28  0.545786     -0.605529     -0.910995      0.910995       252.789       253.700    
  29  0.614707     -0.486610     -0.732087      0.732087       256.866       257.598    
  30  0.614766     -0.486514     -0.731942      0.731942       256.554       257.286    
  31  0.334093      -1.09634      -1.64940       1.64940       259.496       261.146    
  32  0.272402      -1.30048      -1.95652       1.95652       262.297       264.254    
  33  0.777384     -0.251821     -0.378855      0.378855       259.374       259.753    
  34  0.381316     -0.964128      -1.45049       1.45049       264.341       265.791    
  35  0.614497     -0.486952     -0.732600      0.732600       264.230       264.962    
  36  0.537037     -0.621687     -0.935305      0.935305       265.290       266.226    
  37  0.117965      -2.13737      -3.21558       3.21558       264.524       267.740    
  38  0.131038      -2.03226      -3.05746       3.05746       261.877       264.934    
  39  0.750151E-01  -2.59007      -3.89666       3.89666       268.027       271.924    
  40  0.173299      -1.75273      -2.63692       2.63692       262.350       264.987    
  41  0.313111      -1.16120      -1.74698       1.74698       267.993       269.740    
  42  0.867565     -0.142065     -0.213731      0.213731       268.366       268.579    
  43  0.974158E-01  -2.32877      -3.50354       3.50354       270.221       273.725    
  44  0.856967     -0.154356     -0.232223      0.232223       269.398       269.631    
  45  0.210880      -1.55647      -2.34165       2.34165       270.367       272.708    
  46  0.789931     -0.235810     -0.354767      0.354767       270.497       270.852    
  47  0.249169E-01  -3.69221      -5.55479       5.55479       270.598       276.153    
  48  0.721362     -0.326614     -0.491379      0.491379       272.884       273.376    
  49  0.636302     -0.452082     -0.680140      0.680140       268.603       269.283    
  50  0.719367     -0.329384     -0.495545      0.495545       272.126       272.621    
  51  0.838578E-01  -2.47863      -3.72901       3.72901       270.617       274.346    
  52  0.699941     -0.356759     -0.536731      0.536731       271.438       271.974    
  53  0.702066     -0.353728     -0.532170      0.532170       273.876       274.408    
  54  0.635085     -0.453996     -0.683019      0.683019       273.824       274.507    
  55  0.372725     -0.986914      -1.48477       1.48477       274.686       276.171    
  56  0.943328     -0.583412E-01 -0.877721E-01  0.877721E-01   274.154       274.242    
  57  0.479975E-01  -3.03661      -4.56846       4.56846       271.873       276.442    
  58  0.436429     -0.829129      -1.24739       1.24739       273.674       274.922    
  59  0.311463E-01  -3.46906      -5.21907       5.21907       275.413       280.632    
  60  0.455211     -0.786994      -1.18400       1.18400       276.956       278.140    
  61  0.555598     -0.587711     -0.884189      0.884189       275.872       276.757    
  62  0.328767      -1.11240      -1.67357       1.67357       275.789       277.463    
  63  0.863797     -0.146418     -0.220280      0.220280       273.105       273.326    
  64  0.867080     -0.142624     -0.214572      0.214572       236.044       236.258    
loop,thermsimp(1:2)       85  0.253390       4.66691    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    464        257.63          0.88          1.09         23.10          0.00          0.04         25.11
Just calling func    0   0         25.11


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    257.63
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.50446               505
loop is:       85
neval is:      463
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       85      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    1.50446               505
loop is:       86
neval is:      463


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      505
neval,tstepnext:      463     505

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.245460E-01  -3.70721      -5.57735       5.57735       231.316       236.893    
   2  0.230091      -1.46928      -2.21047       2.21047       236.044       238.254    
   3  0.635055     -0.454044     -0.683092      0.683092       238.614       239.297    
   4  0.105077      -2.25307      -3.38965       3.38965       244.202       247.592    
   5  0.191095      -1.65498      -2.48986       2.48986       244.286       246.776    
   6  0.795443     -0.228856     -0.344305      0.344305       243.574       243.918    
   7  0.317275      -1.14799      -1.72710       1.72710       244.750       246.477    
   8  0.532563     -0.630054     -0.947892      0.947892       245.655       246.603    
   9  0.908868E-01  -2.39814      -3.60791       3.60791       246.707       250.315    
  10  0.865077E-01  -2.44752      -3.68220       3.68220       246.469       250.151    
  11  0.857681E-01  -2.45611      -3.69512       3.69512       244.829       248.524    
  12  0.542418     -0.611718     -0.920307      0.920307       249.047       249.967    
  13  0.225242      -1.49058      -2.24252       2.24252       249.595       251.838    
  14  0.855554E-01  -2.45859      -3.69886       3.69886       250.480       254.179    
  15  0.702960E-01  -2.65504      -3.99441       3.99441       250.929       254.923    
  16  0.660623     -0.414572     -0.623708      0.623708       251.409       252.033    
  17  0.564351     -0.572079     -0.860671      0.860671       251.965       252.825    
  18  0.761763     -0.272120     -0.409395      0.409395       250.450       250.860    
  19  0.645184     -0.438219     -0.659284      0.659284       251.225       251.884    
  20  0.398573     -0.919864      -1.38390       1.38390       252.214       253.598    
  21  0.256272E-01  -3.66410      -5.51250       5.51250       252.144       257.656    
  22  0.258189      -1.35406      -2.03714       2.03714       252.789       254.827    
  23  0.797366     -0.226442     -0.340673      0.340673       252.943       253.284    
  24  0.119239E-01  -4.42921      -6.66358       6.66358       252.500       259.164    
  25  0.257284E-01  -3.66016      -5.50657       5.50657       253.443       258.950    
  26  0.746847     -0.291894     -0.439144      0.439144       252.588       253.027    
  27  0.624240     -0.471220     -0.708932      0.708932       253.891       254.600    
  28  0.655139     -0.422908     -0.636249      0.636249       256.554       257.190    
  29  0.281457      -1.26777      -1.90732       1.90732       255.115       257.022    
  30  0.944371     -0.572367E-01 -0.861104E-01  0.861104E-01   256.866       256.952    
  31  0.614735     -0.486563     -0.732016      0.732016       254.341       255.073    
  32  0.455809     -0.785681      -1.18203       1.18203       259.374       260.556    
  33  0.429494     -0.845147      -1.27149       1.27149       259.496       260.768    
  34  0.656424     -0.420948     -0.633300      0.633300       262.297       262.931    
  35  0.551886     -0.594413     -0.894272      0.894272       261.877       262.771    
  36  0.882055     -0.125501     -0.188812      0.188812       264.230       264.419    
  37  0.585710E-01  -2.83752      -4.26893       4.26893       262.350       266.619    
  38  0.196796      -1.62559      -2.44563       2.44563       264.341       266.786    
  39  0.479291     -0.735447      -1.10645       1.10645       265.290       266.397    
  40  0.107404      -2.23116      -3.35669       3.35669       264.524       267.881    
  41  0.360460      -1.02037      -1.53511       1.53511       268.366       269.901    
  42  0.952241     -0.489375E-01 -0.736246E-01  0.736246E-01   268.603       268.677    
  43  0.791501     -0.233824     -0.351779      0.351779       269.398       269.750    
  44  0.253666      -1.37174      -2.06372       2.06372       267.993       270.056    
  45  0.936914     -0.651638E-01 -0.980364E-01  0.980364E-01   270.497       270.595    
  46  0.978059     -0.221850E-01 -0.333764E-01  0.333764E-01   268.027       268.060    
  47  0.226070E-01  -3.78950      -5.70115       5.70115       271.438       277.139    
  48  0.211122      -1.55532      -2.33991       2.33991       272.126       274.466    
  49  0.665051     -0.407891     -0.613657      0.613657       270.367       270.980    
  50  0.600632     -0.509773     -0.766934      0.766934       273.105       273.872    
  51  0.924509     -0.784926E-01 -0.118089      0.118089       272.884       273.002    
  52  0.935977     -0.661649E-01 -0.995425E-01  0.995425E-01   270.221       270.321    
  53  0.166172      -1.79473      -2.70010       2.70010       274.154       276.854    
  54  0.327601      -1.11596      -1.67892       1.67892       270.617       272.296    
  55  0.233359      -1.45518      -2.18926       2.18926       273.876       276.065    
  56  0.322509E-01  -3.43421      -5.16664       5.16664       273.824       278.990    
  57  0.465692     -0.764231      -1.14976       1.14976       273.674       274.824    
  58  0.429929     -0.844135      -1.26997       1.26997       270.598       271.868    
  59  0.632273     -0.458435     -0.689697      0.689697       274.686       275.376    
  60  0.861580     -0.148988     -0.224146      0.224146       271.873       272.097    
  61  0.602536     -0.506607     -0.762171      0.762171       275.872       276.635    
  62  0.947552     -0.538738E-01 -0.810510E-01  0.810510E-01   275.789       275.870    
  63  0.528730     -0.637277     -0.958759      0.958759       276.956       277.915    
  64  0.962649     -0.380659E-01 -0.572688E-01  0.572688E-01   257.630       257.687    
loop,thermsimp(1:2)       86   5.57735       2.21047    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    465        232.71          0.86          1.09         23.11          0.02          0.04         25.12
Just calling func    0   0         25.12


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    466        266.78          0.89          1.09         23.13          0.00          0.04         25.15
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    232.71
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.50446               505
loop is:       86
neval is:      465
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       86      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    1.50446               505
loop is:       87
neval is:      465


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      505
neval,tstepnext:      465     505

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.785570     -0.241345     -0.363095      0.363095       231.316       231.679    
   2  0.738730E-02  -4.90799      -7.38389       7.38389       236.044       243.428    
   3  0.167821      -1.78486      -2.68525       2.68525       238.614       241.299    
   4  0.136502      -1.99142      -2.99601       2.99601       243.574       246.570    
   5  0.100366      -2.29893      -3.45865       3.45865       244.750       248.209    
   6  0.439637     -0.821807      -1.23638       1.23638       245.655       246.891    
   7  0.745548     -0.293635     -0.441763      0.441763       244.286       244.727    
   8  0.374855     -0.981216      -1.47620       1.47620       244.202       245.678    
   9  0.144230      -1.93634      -2.91316       2.91316       244.829       247.742    
  10  0.776977     -0.252344     -0.379643      0.379643       249.047       249.426    
  11  0.524160E-01  -2.94854      -4.43597       4.43597       246.469       250.905    
  12  0.454382     -0.788817      -1.18674       1.18674       246.707       247.894    
  13  0.128840      -2.04919      -3.08292       3.08292       250.450       253.533    
  14  0.621729     -0.475251     -0.714998      0.714998       249.595       250.310    
  15  0.974694     -0.256318E-01 -0.385620E-01  0.385620E-01   251.225       251.264    
  16  0.965418     -0.351939E-01 -0.529480E-01  0.529480E-01   251.409       251.462    
  17  0.370644     -0.992512      -1.49320       1.49320       251.965       253.458    
  18  0.246546      -1.40021      -2.10656       2.10656       252.588       254.695    
  19  0.702523E-01  -2.65566      -3.99534       3.99534       252.943       256.939    
  20  0.326197E-01  -3.42284      -5.14953       5.14953       252.214       257.363    
  21  0.419579     -0.868503      -1.30663       1.30663       250.480       251.787    
  22  0.466221     -0.763095      -1.14805       1.14805       253.891       255.039    
  23  0.240579      -1.42471      -2.14341       2.14341       252.789       254.933    
  24  0.901129     -0.104107     -0.156625      0.156625       250.929       251.085    
  25  0.533703     -0.627916     -0.944676      0.944676       254.341       255.286    
  26  0.617116     -0.482699     -0.726202      0.726202       256.866       257.592    
  27  0.431696     -0.840033      -1.26380       1.26380       255.115       256.379    
  28  0.490629     -0.712067      -1.07128       1.07128       256.554       257.625    
  29  0.727929     -0.317551     -0.477744      0.477744       252.144       252.621    
  30  0.751113     -0.286200     -0.430576      0.430576       257.630       258.061    
  31  0.128641      -2.05073      -3.08524       3.08524       253.443       256.529    
  32  0.592334E-01  -2.82627      -4.25201       4.25201       252.500       256.752    
  33  0.692882     -0.366896     -0.551981      0.551981       259.374       259.926    
  34  0.600682     -0.509689     -0.766808      0.766808       259.496       260.263    
  35  0.658975     -0.417069     -0.627465      0.627465       261.877       262.504    
  36  0.696343     -0.361913     -0.544484      0.544484       262.297       262.842    
  37  0.605529     -0.501652     -0.754716      0.754716       264.230       264.985    
  38  0.492956     -0.707335      -1.06416       1.06416       265.290       266.354    
  39  0.561246     -0.577595     -0.868970      0.868970       262.350       263.219    
  40  0.184946E-01  -3.99027      -6.00322       6.00322       264.341       270.344    
  41  0.483815     -0.726052      -1.09232       1.09232       264.524       265.616    
  42  0.358577      -1.02561      -1.54300       1.54300       268.027       269.570    
  43  0.316248E-01  -3.45382      -5.19613       5.19613       268.603       273.799    
  44  0.103277      -2.27034      -3.41563       3.41563       269.398       272.814    
  45  0.216677      -1.52935      -2.30085       2.30085       268.366       270.667    
  46  0.316630      -1.15002      -1.73016       1.73016       267.993       269.723    
  47  0.930307     -0.722406E-01 -0.108683      0.108683       270.221       270.330    
  48  0.668609     -0.402556     -0.605630      0.605630       270.497       271.103    
  49  0.932709     -0.696615E-01 -0.104803      0.104803       270.367       270.471    
  50  0.277669E-01  -3.58391      -5.39186       5.39186       270.598       275.990    
  51  0.541236     -0.613900     -0.923590      0.923590       271.873       272.797    
  52  0.938218     -0.637734E-01 -0.959446E-01  0.959446E-01   270.617       270.713    
  53  0.844137     -0.169440     -0.254916      0.254916       272.884       273.139    
  54  0.416655     -0.875497      -1.31715       1.31715       273.105       274.423    
  55  0.516231     -0.661200     -0.994750      0.994750       272.126       273.121    
  56  0.108139      -2.22434      -3.34643       3.34643       273.674       277.021    
  57  0.211754      -1.55233      -2.33542       2.33542       274.686       277.022    
  58  0.650924     -0.429362     -0.645959      0.645959       275.789       276.435    
  59  0.810258E-01  -2.51299      -3.78069       3.78069       273.876       277.657    
  60  0.129033      -2.04769      -3.08067       3.08067       275.872       278.953    
  61  0.645157     -0.438262     -0.659348      0.659348       274.154       274.813    
  62  0.580611     -0.543675     -0.817938      0.817938       271.438       272.256    
  63  0.905307     -0.994807E-01 -0.149665      0.149665       276.956       277.106    
  64  0.532245     -0.630651     -0.948791      0.948791       232.714       233.663    
loop,thermsimp(1:2)       87  0.363095       7.38389    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    467        233.25          0.88          1.09         23.12          0.00          0.04         25.14
Just calling func    0   0         25.13


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    468        261.61          0.84          1.09         23.03          0.12          0.04         25.12
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    233.25
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.50446               505
loop is:       87
neval is:      467
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       87      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    1.50446               505
loop is:       88
neval is:      467


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      505
neval,tstepnext:      467     505

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.507680     -0.677903      -1.01988       1.01988       231.316       232.336    
   2  0.790268     -0.235383     -0.354125      0.354125       232.714       233.068    
   3  0.317381      -1.14765      -1.72660       1.72660       238.614       240.341    
   4  0.767166     -0.265051     -0.398760      0.398760       236.044       236.442    
   5  0.313858      -1.15882      -1.74339       1.74339       244.286       246.029    
   6  0.251614      -1.37986      -2.07594       2.07594       244.202       246.278    
   7  0.948204     -0.531858E-01 -0.800159E-01  0.800159E-01   243.574       243.654    
   8  0.747265     -0.291336     -0.438304      0.438304       245.655       246.093    
   9  0.264530      -1.32980      -2.00064       2.00064       244.829       246.830    
  10  0.879562     -0.128331     -0.193069      0.193069       246.707       246.900    
  11  0.158918      -1.83937      -2.76726       2.76726       244.750       247.518    
  12  0.409577E-01  -3.19522      -4.80708       4.80708       249.047       253.854    
  13  0.832422     -0.183416     -0.275943      0.275943       249.595       249.871    
  14  0.930291     -0.722576E-01 -0.108709      0.108709       246.469       246.577    
  15  0.301800      -1.19799      -1.80233       1.80233       250.929       252.731    
  16  0.990785     -0.925803E-02 -0.139284E-01  0.139284E-01   251.225       251.239    
  17  0.328363      -1.11364      -1.67542       1.67542       251.409       253.084    
  18  0.938323     -0.636607E-01 -0.957750E-01  0.957750E-01   250.480       250.576    
  19  0.975952     -0.243418E-01 -0.366214E-01  0.366214E-01   252.144       252.180    
  20  0.459186     -0.778299      -1.17092       1.17092       251.965       253.136    
  21  0.540042     -0.616108     -0.926911      0.926911       250.450       251.377    
  22  0.543006     -0.610635     -0.918677      0.918677       252.588       253.507    
  23  0.733492     -0.309938     -0.466290      0.466290       252.789       253.256    
  24  0.451844     -0.794418      -1.19517       1.19517       253.891       255.086    
  25  0.753205     -0.283418     -0.426391      0.426391       254.341       254.768    
  26  0.701062     -0.355159     -0.534323      0.534323       255.115       255.649    
  27  0.878758     -0.129246     -0.194446      0.194446       253.443       253.638    
  28  0.378850     -0.970616      -1.46025       1.46025       252.500       253.960    
  29  0.963503     -0.371796E-01 -0.559353E-01  0.559353E-01   252.943       252.999    
  30  0.637747     -0.449814     -0.676728      0.676728       252.214       252.890    
  31  0.869781     -0.139514     -0.209894      0.209894       256.866       257.076    
  32  0.753171     -0.283463     -0.426460      0.426460       256.554       256.980    
  33  0.526050E-01  -2.94494      -4.43056       4.43056       257.630       262.061    
  34  0.243477      -1.41273      -2.12540       2.12540       259.374       261.499    
  35  0.519956E-01  -2.95660      -4.44809       4.44809       259.496       263.945    
  36  0.530132E-01  -2.93721      -4.41893       4.41893       261.877       266.295    
  37  0.521011     -0.651985     -0.980886      0.980886       262.297       263.278    
  38  0.536818     -0.622097     -0.935921      0.935921       262.350       263.286    
  39  0.452282     -0.793450      -1.19371       1.19371       264.230       265.424    
  40  0.824064     -0.193508     -0.291125      0.291125       264.524       264.815    
  41  0.432752     -0.837591      -1.26012       1.26012       265.290       266.550    
  42  0.639137     -0.447637     -0.673453      0.673453       268.027       268.700    
  43  0.200933      -1.60478      -2.41433       2.41433       267.993       270.407    
  44  0.195377      -1.63282      -2.45652       2.45652       270.221       272.678    
  45  0.487028     -0.719434      -1.08236       1.08236       264.341       265.423    
  46  0.434536     -0.833476      -1.25393       1.25393       270.367       271.620    
  47  0.779247     -0.249427     -0.375253      0.375253       268.366       268.741    
  48  0.245897      -1.40284      -2.11052       2.11052       270.617       272.728    
  49  0.510235     -0.672884      -1.01233       1.01233       270.497       271.509    
  50  0.681914E-01  -2.68544      -4.04014       4.04014       271.438       275.478    
  51  0.983162     -0.169810E-01 -0.255472E-01  0.255472E-01   271.873       271.899    
  52  0.562832     -0.574775     -0.864726      0.864726       269.398       270.263    
  53  0.578358     -0.547562     -0.823786      0.823786       272.126       272.950    
  54  0.103448      -2.26869      -3.41315       3.41315       272.884       276.297    
  55  0.941795     -0.599673E-01 -0.902185E-01  0.902185E-01   268.603       268.693    
  56  0.246008      -1.40239      -2.10985       2.10985       273.105       275.215    
  57  0.655852     -0.421820     -0.634613      0.634613       274.154       274.789    
  58  0.816413     -0.202835     -0.305158      0.305158       270.598       270.903    
  59  0.248323      -1.39303      -2.09575       2.09575       275.789       277.885    
  60  0.624200     -0.471285     -0.709031      0.709031       273.674       274.383    
  61  0.316748      -1.14965      -1.72960       1.72960       274.686       276.416    
  62  0.696928     -0.361072     -0.543220      0.543220       276.956       277.499    
  63  0.710019     -0.342463     -0.515222      0.515222       273.876       274.391    
  64  0.271509      -1.30376      -1.96146       1.96146       233.251       235.212    
loop,thermsimp(1:2)       88   1.01988      0.354125    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    469        232.42          0.88          1.09         23.11          0.00          0.04         25.12
Just calling func    0   0         25.12


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    470        253.10          0.88          1.10         23.09          0.08          0.05         25.19
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    232.42
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.50446               505
loop is:       88
neval is:      469
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       88      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    1.50446               505
loop is:       89
neval is:      469


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      505
neval,tstepnext:      469     505

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.880944     -0.126761     -0.190707      0.190707       231.316       231.506    
   2  0.678316     -0.388142     -0.583945      0.583945       232.714       233.298    
   3  0.135490      -1.99886      -3.00721       3.00721       233.251       236.258    
   4  0.362841      -1.01379      -1.52521       1.52521       236.044       237.569    
   5  0.288564      -1.24284      -1.86980       1.86980       238.614       240.484    
   6  0.722355     -0.325238     -0.489309      0.489309       243.574       244.063    
   7  0.978389     -0.218479E-01 -0.328694E-01  0.328694E-01   244.286       244.319    
   8  0.883441     -0.123930     -0.186448      0.186448       245.655       245.841    
   9  0.537650     -0.620547     -0.933589      0.933589       244.202       245.135    
  10  0.945156     -0.564053E-01 -0.848596E-01  0.848596E-01   246.469       246.554    
  11  0.902011     -0.103129     -0.155153      0.155153       244.829       244.984    
  12  0.953192     -0.479389E-01 -0.721223E-01  0.721223E-01   246.707       246.779    
  13  0.287473      -1.24663      -1.87550       1.87550       244.750       246.626    
  14  0.403089     -0.908597      -1.36695       1.36695       249.595       250.962    
  15  0.441004     -0.818701      -1.23170       1.23170       250.480       251.712    
  16  0.639526     -0.447028     -0.672537      0.672537       251.225       251.898    
  17  0.380765     -0.965572      -1.45267       1.45267       250.450       251.903    
  18  0.659762     -0.415876     -0.625669      0.625669       252.144       252.769    
  19  0.375709     -0.978939      -1.47278       1.47278       250.929       252.402    
  20  0.963753     -0.369203E-01 -0.555452E-01  0.555452E-01   252.214       252.269    
  21  0.550567E-02  -5.20198      -7.82617       7.82617       252.943       260.770    
  22  0.406012     -0.901372      -1.35608       1.35608       251.409       252.765    
  23  0.718789     -0.330187     -0.496754      0.496754       251.965       252.462    
  24  0.634557     -0.454828     -0.684272      0.684272       252.789       253.474    
  25  0.531123     -0.632761     -0.951965      0.951965       252.588       253.540    
  26  0.839681     -0.174733     -0.262879      0.262879       253.443       253.706    
  27  0.404403     -0.905343      -1.36205       1.36205       249.047       250.409    
  28  0.364094      -1.01034      -1.52002       1.52002       252.500       254.020    
  29  0.195203      -1.63372      -2.45787       2.45787       254.341       256.799    
  30  0.895643     -0.110213     -0.165811      0.165811       253.891       254.057    
  31  0.350505      -1.04838      -1.57725       1.57725       255.115       256.692    
  32  0.246469      -1.40052      -2.10703       2.10703       256.554       258.661    
  33  0.491662     -0.709964      -1.06811       1.06811       256.866       257.934    
  34  0.570678     -0.560930     -0.843897      0.843897       259.374       260.218    
  35  0.127892      -2.05657      -3.09403       3.09403       257.630       260.724    
  36  0.671111     -0.398821     -0.600011      0.600011       262.297       262.897    
  37  0.492283     -0.708702      -1.06622       1.06622       262.350       263.417    
  38  0.784530     -0.242670     -0.365088      0.365088       259.496       259.862    
  39  0.804537     -0.217489     -0.327204      0.327204       264.524       264.851    
  40  0.951874     -0.493229E-01 -0.742044E-01  0.742044E-01   264.341       264.415    
  41  0.860836     -0.149852     -0.225446      0.225446       264.230       264.455    
  42  0.441943E-01  -3.11916      -4.69265       4.69265       261.877       266.569    
  43  0.863376     -0.146905     -0.221013      0.221013       265.290       265.511    
  44  0.717499E-02  -4.93715      -7.42776       7.42776       268.603       276.031    
  45  0.257105      -1.35827      -2.04347       2.04347       268.027       270.070    
  46  0.834736     -0.180640     -0.271765      0.271765       268.366       268.637    
  47  0.406979     -0.898994      -1.35250       1.35250       269.398       270.751    
  48  0.751883     -0.285174     -0.429033      0.429033       267.993       268.422    
  49  0.426180     -0.852893      -1.28315       1.28315       270.598       271.881    
  50  0.780644     -0.247637     -0.372560      0.372560       270.497       270.870    
  51  0.334820      -1.09416      -1.64613       1.64613       270.367       272.013    
  52  0.690618     -0.370169     -0.556905      0.556905       271.873       272.430    
  53  0.786960     -0.239578     -0.360436      0.360436       270.221       270.582    
  54  0.762697     -0.270894     -0.407550      0.407550       270.617       271.025    
  55  0.224832      -1.49240      -2.24526       2.24526       272.126       274.371    
  56  0.159776      -1.83398      -2.75915       2.75915       273.674       276.433    
  57  0.635541     -0.453278     -0.681940      0.681940       273.876       274.558    
  58  0.515119     -0.663357     -0.997995      0.997995       274.154       275.152    
  59  0.486717     -0.720072      -1.08332       1.08332       273.105       274.189    
  60  0.990660     -0.938371E-02 -0.141174E-01  0.141174E-01   271.438       271.452    
  61  0.966524     -0.340495E-01 -0.512262E-01  0.512262E-01   272.884       272.936    
  62  0.659413     -0.416405     -0.626465      0.626465       274.686       275.313    
  63  0.925713     -0.771915E-01 -0.116132      0.116132       276.956       277.072    
  64  0.720969     -0.327159     -0.492198      0.492198       232.423       232.915    
loop,thermsimp(1:2)       89  0.190707      0.583945    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    471        271.69          0.88          1.08         23.11          0.01          0.04         25.11
Just calling func    0   0         25.11


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    271.69
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.50446               505
loop is:       89
neval is:      470
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       89      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    1.50446               505
loop is:       90
neval is:      470


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      505
neval,tstepnext:      470     505

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.519767     -0.654376     -0.984483      0.984483       231.316       232.300    
   2  0.451273E-03  -7.70344      -11.5895       11.5895       232.423       244.013    
   3  0.838605E-01  -2.47860      -3.72896       3.72896       232.714       236.443    
   4  0.268196      -1.31604      -1.97993       1.97993       233.251       235.231    
   5  0.682721     -0.381669     -0.574206      0.574206       236.044       236.618    
   6  0.134603      -2.00542      -3.01708       3.01708       238.614       241.631    
   7  0.809634     -0.211173     -0.317702      0.317702       243.574       243.891    
   8  0.578058     -0.548081     -0.824566      0.824566       244.286       245.110    
   9  0.181348      -1.70734      -2.56862       2.56862       244.829       247.398    
  10  0.893989     -0.112062     -0.168592      0.168592       244.202       244.370    
  11  0.137049      -1.98742      -2.99000       2.99000       245.655       248.645    
  12  0.316319      -1.15100      -1.73164       1.73164       246.469       248.200    
  13  0.458104     -0.780660      -1.17447       1.17447       244.750       245.925    
  14  0.250826      -1.38300      -2.08066       2.08066       246.707       248.788    
  15  0.631289     -0.459992     -0.692040      0.692040       249.047       249.739    
  16  0.815448     -0.204018     -0.306938      0.306938       249.595       249.902    
  17  0.957573     -0.433532E-01 -0.652233E-01  0.652233E-01   250.480       250.546    
  18  0.633470     -0.456542     -0.686850      0.686850       251.225       251.912    
  19  0.660593     -0.414617     -0.623775      0.623775       250.450       251.074    
  20  0.664533     -0.408671     -0.614830      0.614830       252.214       252.828    
  21  0.620837     -0.476686     -0.717156      0.717156       250.929       251.646    
  22  0.195138      -1.63405      -2.45837       2.45837       251.965       254.423    
  23  0.439070     -0.823096      -1.23832       1.23832       251.409       252.647    
  24  0.731595     -0.312528     -0.470186      0.470186       252.144       252.614    
  25  0.176973      -1.73176      -2.60537       2.60537       252.789       255.395    
  26  0.450618     -0.797135      -1.19926       1.19926       252.588       253.788    
  27  0.306042E-01  -3.48662      -5.24549       5.24549       253.443       258.689    
  28  0.737213     -0.304879     -0.458678      0.458678       252.500       252.959    
  29  0.103939      -2.26395      -3.40603       3.40603       253.891       257.297    
  30  0.327275      -1.11695      -1.68042       1.68042       255.115       256.796    
  31  0.384261     -0.956434      -1.43892       1.43892       254.341       255.780    
  32  0.844251E-01  -2.47189      -3.71886       3.71886       256.866       260.585    
  33  0.341620      -1.07406      -1.61588       1.61588       256.554       258.170    
  34  0.590291     -0.527140     -0.793062      0.793062       259.496       260.289    
  35  0.335291      -1.09276      -1.64401       1.64401       259.374       261.018    
  36  0.871923     -0.137055     -0.206193      0.206193       257.630       257.836    
  37  0.216579E-01  -3.83238      -5.76568       5.76568       252.943       258.709    
  38  0.674344     -0.394015     -0.592781      0.592781       262.297       262.890    
  39  0.622707     -0.473679     -0.712632      0.712632       262.350       263.063    
  40  0.805084     -0.216809     -0.326180      0.326180       264.341       264.667    
  41  0.298614      -1.20860      -1.81830       1.81830       264.230       266.048    
  42  0.556750     -0.585639     -0.881072      0.881072       264.524       265.405    
  43  0.239374      -1.42973      -2.15097       2.15097       265.290       267.441    
  44  0.403553     -0.907447      -1.36522       1.36522       261.877       263.242    
  45  0.815210     -0.204309     -0.307375      0.307375       267.993       268.300    
  46  0.701880     -0.353993     -0.532569      0.532569       268.366       268.898    
  47  0.996873     -0.313153E-02 -0.471127E-02  0.471127E-02   268.027       268.032    
  48  0.270799      -1.30638      -1.96540       1.96540       270.221       272.187    
  49  0.129999      -2.04023      -3.06944       3.06944       269.398       272.468    
  50  0.609288     -0.495465     -0.745408      0.745408       270.497       271.242    
  51  0.205179E-01  -3.88646      -5.84703       5.84703       270.617       276.464    
  52  0.178070      -1.72558      -2.59607       2.59607       271.438       274.034    
  53  0.591536     -0.525033     -0.789892      0.789892       270.598       271.388    
  54  0.673211     -0.395696     -0.595310      0.595310       270.367       270.962    
  55  0.641161     -0.444474     -0.668694      0.668694       271.873       272.542    
  56  0.933700     -0.685999E-01 -0.103206      0.103206       272.884       272.988    
  57  0.542010     -0.612470     -0.921438      0.921438       273.105       274.027    
  58  0.364404      -1.00949      -1.51874       1.51874       272.126       273.645    
  59  0.789426     -0.236449     -0.355728      0.355728       273.876       274.232    
  60  0.885418     -0.121696     -0.183087      0.183087       274.154       274.337    
  61  0.431432     -0.840646      -1.26472       1.26472       274.686       275.951    
  62  0.717739     -0.331649     -0.498953      0.498953       268.603       269.102    
  63  0.375354     -0.979886      -1.47420       1.47420       273.674       275.148    
  64  0.844050     -0.169543     -0.255071      0.255071       271.686       271.941    
loop,thermsimp(1:2)       90  0.984483       11.5895    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    472        258.20          0.88          1.09         23.13          0.02          0.04         25.16
Just calling func    0   0         25.16


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    258.20
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.50446               505
loop is:       90
neval is:      471
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       90      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    1.50446               505
loop is:       91
neval is:      471


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      505
neval,tstepnext:      471     505

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.525961     -0.642528     -0.966659      0.966659       231.316       232.282    
   2  0.526989E-01  -2.94316      -4.42787       4.42787       233.251       237.679    
   3  0.341680      -1.07388      -1.61561       1.61561       232.714       234.329    
   4  0.405255     -0.903238      -1.35889       1.35889       236.044       237.403    
   5  0.514563     -0.664437     -0.999620      0.999620       238.614       239.614    
   6  0.466000     -0.763569      -1.14876       1.14876       243.574       244.722    
   7  0.342846      -1.07047      -1.61049       1.61049       232.423       234.034    
   8  0.358671      -1.02535      -1.54260       1.54260       244.202       245.744    
   9  0.554031     -0.590534     -0.888436      0.888436       244.286       245.174    
  10  0.778335     -0.250599     -0.377016      0.377016       244.750       245.127    
  11  0.217304      -1.52646      -2.29650       2.29650       244.829       247.126    
  12  0.982801     -0.173486E-01 -0.261003E-01  0.261003E-01   246.469       246.495    
  13  0.298897      -1.20766      -1.81687       1.81687       245.655       247.472    
  14  0.152611      -1.87986      -2.82818       2.82818       246.707       249.535    
  15  0.834186E-01  -2.48388      -3.73691       3.73691       249.047       252.783    
  16  0.691361     -0.369093     -0.555286      0.555286       249.595       250.151    
  17  0.202495E-01  -3.89963      -5.86684       5.86684       250.480       256.347    
  18  0.462938     -0.770162      -1.15868       1.15868       250.450       251.609    
  19  0.893654     -0.112436     -0.169156      0.169156       250.929       251.098    
  20  0.751255     -0.286010     -0.430291      0.430291       251.225       251.655    
  21  0.528256E-02  -5.24334      -7.88841       7.88841       252.144       260.032    
  22  0.661719     -0.412914     -0.621213      0.621213       251.409       252.030    
  23  0.711098     -0.340945     -0.512938      0.512938       252.214       252.727    
  24  0.394814     -0.929342      -1.39816       1.39816       252.500       253.898    
  25  0.529459     -0.635899     -0.956686      0.956686       252.588       253.545    
  26  0.123125      -2.09456      -3.15118       3.15118       251.965       255.116    
  27  0.150045      -1.89682      -2.85369       2.85369       252.789       255.643    
  28  0.847587     -0.165361     -0.248780      0.248780       254.341       254.590    
  29  0.684633     -0.378873     -0.570000      0.570000       255.115       255.685    
  30  0.238386      -1.43386      -2.15719       2.15719       253.891       256.048    
  31  0.260935      -1.34348      -2.02122       2.02122       257.630       259.651    
  32  0.731525E-01  -2.61521      -3.93448       3.93448       256.554       260.488    
  33  0.760028     -0.274400     -0.412824      0.412824       253.443       253.856    
  34  0.748054     -0.290280     -0.436716      0.436716       252.943       253.380    
  35  0.448284     -0.802329      -1.20707       1.20707       259.496       260.704    
  36  0.658970     -0.417078     -0.627477      0.627477       256.866       257.493    
  37  0.101931      -2.28346      -3.43538       3.43538       259.374       262.809    
  38  0.946705     -0.547677E-01 -0.823959E-01  0.823959E-01   262.297       262.380    
  39  0.923584     -0.794931E-01 -0.119594      0.119594       262.350       262.470    
  40  0.632977     -0.457321     -0.688021      0.688021       261.877       262.565    
  41  0.386701     -0.950103      -1.42939       1.42939       264.341       265.770    
  42  0.585154     -0.535880     -0.806211      0.806211       264.524       265.330    
  43  0.538343     -0.619260     -0.931652      0.931652       264.230       265.162    
  44  0.843970     -0.169639     -0.255215      0.255215       265.290       265.545    
  45  0.420066     -0.867344      -1.30489       1.30489       268.027       269.332    
  46  0.826451     -0.190615     -0.286773      0.286773       267.993       268.279    
  47  0.523061     -0.648057     -0.974977      0.974977       268.366       269.341    
  48  0.699280     -0.357703     -0.538151      0.538151       268.603       269.141    
  49  0.662193     -0.412199     -0.620137      0.620137       270.367       270.987    
  50  0.173075E-01  -4.05661      -6.10302       6.10302       270.497       276.600    
  51  0.912691     -0.913577E-01 -0.137444      0.137444       270.598       270.735    
  52  0.962432     -0.382919E-01 -0.576087E-01  0.576087E-01   271.686       271.744    
  53  0.980621E-01  -2.32215      -3.49359       3.49359       270.221       273.715    
  54  0.231566      -1.46289      -2.20086       2.20086       269.398       271.599    
  55  0.141472      -1.95565      -2.94220       2.94220       271.873       274.815    
  56  0.678142     -0.388398     -0.584330      0.584330       272.884       273.469    
  57  0.379107     -0.969937      -1.45923       1.45923       272.126       273.585    
  58  0.304517E-01  -3.49161      -5.25300       5.25300       273.105       278.358    
  59  0.832114     -0.183785     -0.276498      0.276498       271.438       271.714    
  60  0.218962      -1.51886      -2.28506       2.28506       273.876       276.161    
  61  0.593456E-01  -2.82438      -4.24917       4.24917       274.154       278.403    
  62  0.732375     -0.311463     -0.468584      0.468584       273.674       274.143    
  63  0.945228     -0.563291E-01 -0.847450E-01  0.847450E-01   274.686       274.771    
  64  0.917833     -0.857393E-01 -0.128992      0.128992       258.199       258.328    
loop,thermsimp(1:2)       91  0.966659       4.42787    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    473        233.37          0.88          1.09         23.11          0.00          0.04         25.12
Just calling func    0   0         25.12


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    233.37
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.50446               505
loop is:       91
neval is:      472
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       91      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    1.50446               505
loop is:       92
neval is:      472


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      505
neval,tstepnext:      472     505

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.179926      -1.71521      -2.58047       2.58047       231.316       233.896    
   2  0.805701     -0.216043     -0.325029      0.325029       232.423       232.748    
   3  0.341067      -1.07568      -1.61831       1.61831       232.714       234.332    
   4  0.596982     -0.515868     -0.776103      0.776103       236.044       236.820    
   5  0.575413E-01  -2.85525      -4.29562       4.29562       233.251       237.546    
   6  0.390921     -0.939249      -1.41306       1.41306       238.614       240.027    
   7  0.437495     -0.826689      -1.24372       1.24372       243.574       244.817    
   8  0.513955     -0.665620      -1.00140       1.00140       244.750       245.752    
   9  0.871599     -0.137426     -0.206752      0.206752       244.286       244.492    
  10  0.196691      -1.62612      -2.44644       2.44644       244.202       246.648    
  11  0.987685E-01  -2.31498      -3.48279       3.48279       246.469       249.951    
  12  0.448984     -0.800769      -1.20473       1.20473       244.829       246.034    
  13  0.869491     -0.139847     -0.210395      0.210395       245.655       245.865    
  14  0.253569      -1.37212      -2.06430       2.06430       246.707       248.771    
  15  0.765994     -0.266581     -0.401061      0.401061       249.595       249.996    
  16  0.269007      -1.31302      -1.97538       1.97538       250.929       252.904    
  17  0.527354     -0.639883     -0.962679      0.962679       250.450       251.413    
  18  0.991870     -0.816303E-02 -0.122810E-01  0.122810E-01   251.225       251.237    
  19  0.834963     -0.180368     -0.271357      0.271357       251.409       251.680    
  20  0.939146E-01  -2.36537      -3.55861       3.55861       252.214       255.772    
  21  0.784991     -0.242082     -0.364204      0.364204       249.047       249.411    
  22  0.164899      -1.80242      -2.71168       2.71168       252.943       255.655    
  23  0.890878     -0.115548     -0.173837      0.173837       252.588       252.762    
  24  0.996288E-01  -2.30630      -3.46975       3.46975       253.443       256.913    
  25  0.367348E-01  -3.30403      -4.97079       4.97079       252.500       257.471    
  26  0.874828     -0.133728     -0.201189      0.201189       254.341       254.542    
  27  0.101428      -2.28841      -3.44282       3.44282       251.965       255.408    
  28  0.583716     -0.538341     -0.809914      0.809914       252.789       253.599    
  29  0.265971      -1.32437      -1.99246       1.99246       255.115       257.108    
  30  0.739852     -0.301305     -0.453302      0.453302       253.891       254.344    
  31  0.974346     -0.259889E-01 -0.390993E-01  0.390993E-01   250.480       250.519    
  32  0.357297      -1.02919      -1.54837       1.54837       256.866       258.414    
  33  0.768033     -0.263923     -0.397061      0.397061       258.199       258.596    
  34  0.236843      -1.44036      -2.16696       2.16696       257.630       259.797    
  35  0.490030E-01  -3.01587      -4.53727       4.53727       252.144       256.681    
  36  0.842269     -0.171656     -0.258249      0.258249       256.554       256.812    
  37  0.292342      -1.22983      -1.85023       1.85023       259.496       261.347    
  38  0.596407     -0.516832     -0.777554      0.777554       262.297       263.075    
  39  0.359551      -1.02290      -1.53891       1.53891       262.350       263.889    
  40  0.461849     -0.772517      -1.16222       1.16222       261.877       263.039    
  41  0.662754     -0.411352     -0.618863      0.618863       259.374       259.993    
  42  0.516002     -0.661645     -0.995420      0.995420       264.230       265.225    
  43  0.619599     -0.478683     -0.720160      0.720160       264.524       265.244    
  44  0.811136     -0.209319     -0.314913      0.314913       265.290       265.605    
  45  0.490033     -0.713282      -1.07311       1.07311       264.341       265.414    
  46  0.976838     -0.234348E-01 -0.352567E-01  0.352567E-01   267.993       268.028    
  47  0.963378E-01  -2.33989      -3.52028       3.52028       268.603       272.124    
  48  0.811272     -0.209152     -0.314661      0.314661       268.027       268.342    
  49  0.401456     -0.912658      -1.37306       1.37306       268.366       269.739    
  50  0.910235E-01  -2.39664      -3.60565       3.60565       270.598       274.204    
  51  0.630523     -0.461206     -0.693867      0.693867       270.367       271.060    
  52  0.141261      -1.95715      -2.94445       2.94445       269.398       272.343    
  53  0.262014      -1.33936      -2.01501       2.01501       271.438       273.453    
  54  0.814315     -0.205408     -0.309028      0.309028       271.686       271.995    
  55  0.510597     -0.672174      -1.01126       1.01126       272.884       273.896    
  56  0.329822E-01  -3.41179      -5.13290       5.13290       272.126       277.259    
  57  0.261292      -1.34212      -2.01916       2.01916       270.221       272.240    
  58  0.984526E-02  -4.62077      -6.95176       6.95176       273.674       280.626    
  59  0.106604      -2.23863      -3.36794       3.36794       274.686       278.054    
  60  0.415734     -0.877709      -1.32048       1.32048       271.873       273.194    
  61  0.805083E-01  -2.51939      -3.79033       3.79033       273.876       277.666    
  62  0.952967     -0.481750E-01 -0.724775E-01  0.724775E-01   270.497       270.570    
  63  0.281678      -1.26699      -1.90614       1.90614       273.105       275.012    
  64  0.817607     -0.201373     -0.302959      0.302959       233.369       233.672    
loop,thermsimp(1:2)       92   2.58047      0.325029    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    474        235.29          0.88          1.09         23.14          0.00          0.05         25.16
Just calling func    0   0         25.15


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    235.29
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.50446               505
loop is:       92
neval is:      473
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       92      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    1.50446               505
loop is:       93
neval is:      473


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      505
neval,tstepnext:      473     505

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.356532      -1.03133      -1.55160       1.55160       232.423       233.975    
   2  0.156780      -1.85291      -2.78764       2.78764       233.369       236.156    
   3  0.871556     -0.137475     -0.206826      0.206826       231.316       231.523    
   4  0.686712     -0.375840     -0.565437      0.565437       232.714       233.279    
   5  0.980206     -0.199924E-01 -0.300778E-01  0.300778E-01   236.044       236.074    
   6  0.864789     -0.145270     -0.218552      0.218552       233.251       233.469    
   7  0.429178     -0.845883      -1.27260       1.27260       238.614       239.887    
   8  0.562262     -0.575787     -0.866250      0.866250       244.286       245.152    
   9  0.239176      -1.43056      -2.15222       2.15222       243.574       245.726    
  10  0.978598     -0.216345E-01 -0.325483E-01  0.325483E-01   244.750       244.783    
  11  0.938327     -0.636569E-01 -0.957694E-01  0.957694E-01   245.655       245.751    
  12  0.452510     -0.792946      -1.19296       1.19296       244.829       246.022    
  13  0.117352      -2.14257      -3.22342       3.22342       244.202       247.425    
  14  0.947736     -0.536798E-01 -0.807592E-01  0.807592E-01   246.707       246.788    
  15  0.990891     -0.915035E-02 -0.137664E-01  0.137664E-01   249.047       249.060    
  16  0.530083     -0.634722     -0.954915      0.954915       246.469       247.424    
  17  0.464385     -0.767041      -1.15398       1.15398       249.595       250.749    
  18  0.328231E-01  -3.41662      -5.14018       5.14018       250.480       255.621    
  19  0.141399E-01  -4.25876      -6.40714       6.40714       251.225       257.632    
  20  0.673551     -0.395192     -0.594551      0.594551       250.450       251.045    
  21  0.386316E-01  -3.25369      -4.89505       4.89505       251.409       256.304    
  22  0.592304     -0.523735     -0.787940      0.787940       252.588       253.376    
  23  0.755966     -0.279758     -0.420886      0.420886       250.929       251.350    
  24  0.397655     -0.922171      -1.38737       1.38737       252.789       254.177    
  25  0.636306     -0.452076     -0.680132      0.680132       253.891       254.571    
  26  0.610031     -0.494246     -0.743574      0.743574       254.341       255.085    
  27  0.424783     -0.856176      -1.28808       1.28808       251.965       253.253    
  28  0.748792     -0.289294     -0.435232      0.435232       252.943       253.379    
  29  0.481989     -0.729833      -1.09801       1.09801       252.214       253.312    
  30  0.711380     -0.340548     -0.512342      0.512342       252.144       252.656    
  31  0.853958     -0.157873     -0.237514      0.237514       256.554       256.791    
  32  0.194550      -1.63706      -2.46290       2.46290       253.443       255.906    
  33  0.972044     -0.283541E-01 -0.426577E-01  0.426577E-01   255.115       255.158    
  34  0.292837      -1.22814      -1.84769       1.84769       252.500       254.348    
  35  0.100865      -2.29397      -3.45119       3.45119       256.866       260.317    
  36  0.768654     -0.263114     -0.395845      0.395845       258.199       258.594    
  37  0.401537     -0.912456      -1.37276       1.37276       257.630       259.003    
  38  0.809292     -0.211595     -0.318337      0.318337       259.374       259.692    
  39  0.427839     -0.849009      -1.27730       1.27730       259.496       260.774    
  40  0.350578      -1.04817      -1.57693       1.57693       261.877       263.453    
  41  0.709565     -0.343104     -0.516186      0.516186       262.297       262.814    
  42  0.925864     -0.770281E-01 -0.115886      0.115886       262.350       262.466    
  43  0.470142     -0.754721      -1.13545       1.13545       264.230       265.365    
  44  0.168112      -1.78312      -2.68264       2.68264       264.524       267.207    
  45  0.858320     -0.152778     -0.229848      0.229848       264.341       264.570    
  46  0.209215      -1.56439      -2.35357       2.35357       265.290       267.644    
  47  0.925371     -0.775610E-01 -0.116688      0.116688       267.993       268.109    
  48  0.226229E-01  -3.78879      -5.70009       5.70009       268.027       273.727    
  49  0.414630     -0.880370      -1.32448       1.32448       268.366       269.690    
  50  0.588747     -0.529758     -0.797001      0.797001       270.497       271.294    
  51  0.190202      -1.65967      -2.49691       2.49691       270.367       272.863    
  52  0.669939     -0.400569     -0.602640      0.602640       271.686       272.289    
  53  0.662360     -0.411945     -0.619756      0.619756       268.603       269.223    
  54  0.491671E-01  -3.01253      -4.53224       4.53224       270.221       274.753    
  55  0.102120      -2.28160      -3.43259       3.43259       269.398       272.831    
  56  0.132651      -2.02004      -3.03907       3.03907       271.873       274.912    
  57  0.260061      -1.34684      -2.02627       2.02627       271.438       273.464    
  58  0.538873     -0.618275     -0.930171      0.930171       272.884       273.815    
  59  0.346643E-01  -3.36205      -5.05807       5.05807       270.598       275.656    
  60  0.282252      -1.26495      -1.90308       1.90308       273.105       275.009    
  61  0.184457      -1.69034      -2.54305       2.54305       272.126       274.669    
  62  0.129436      -2.04457      -3.07597       3.07597       273.876       276.952    
  63  0.803502     -0.218776     -0.329140      0.329140       274.686       275.015    
  64  0.299569      -1.20541      -1.81349       1.81349       235.287       237.101    
loop,thermsimp(1:2)       93   1.55160       2.78764    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    475        260.31          0.87          1.09         23.09          0.05          0.04         25.13
Just calling func    0   0         25.13


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    260.31
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.50446               505
loop is:       93
neval is:      474
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       93      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    1.50446               505
loop is:       94
neval is:      474


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      505
neval,tstepnext:      474     505

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.799794     -0.223401     -0.336099      0.336099       231.316       231.652    
   2  0.812618     -0.207494     -0.312167      0.312167       232.714       233.026    
   3  0.153451      -1.87438      -2.81993       2.81993       233.251       236.071    
   4  0.191065      -1.65514      -2.49010       2.49010       232.423       234.913    
   5  0.619921     -0.478164     -0.719379      0.719379       236.044       236.763    
   6  0.788743     -0.237315     -0.357032      0.357032       233.369       233.726    
   7  0.897459     -0.108188     -0.162764      0.162764       235.287       235.450    
   8  0.153705      -1.87272      -2.81744       2.81744       238.614       241.431    
   9  0.996049     -0.395849E-02 -0.595540E-02  0.595540E-02   244.750       244.756    
  10  0.560813E-01  -2.88095      -4.33428       4.33428       244.286       248.620    
  11  0.188305      -1.66969      -2.51199       2.51199       243.574       246.086    
  12  0.135074      -2.00193      -3.01183       3.01183       245.655       248.667    
  13  0.485175     -0.723245      -1.08809       1.08809       244.829       245.917    
  14  0.690741     -0.369991     -0.556637      0.556637       246.707       247.264    
  15  0.742932     -0.297150     -0.447051      0.447051       246.469       246.916    
  16  0.780541     -0.247768     -0.372758      0.372758       244.202       244.575    
  17  0.518671E-01  -2.95907      -4.45181       4.45181       249.047       253.498    
  18  0.968635     -0.318676E-01 -0.479437E-01  0.479437E-01   249.595       249.643    
  19  0.878004     -0.130104     -0.195736      0.195736       250.450       250.646    
  20  0.868279     -0.141242     -0.212493      0.212493       250.929       251.141    
  21  0.554456     -0.589768     -0.887284      0.887284       252.144       253.031    
  22  0.114030      -2.17129      -3.26663       3.26663       251.965       255.231    
  23  0.397460     -0.922661      -1.38811       1.38811       252.214       253.602    
  24  0.299789      -1.20467      -1.81239       1.81239       252.588       254.401    
  25  0.214585      -1.53905      -2.31544       2.31544       252.943       255.259    
  26  0.583444     -0.538806     -0.810613      0.810613       252.789       253.600    
  27  0.399403     -0.917786      -1.38077       1.38077       252.500       253.881    
  28  0.421825     -0.863165      -1.29860       1.29860       253.891       255.190    
  29  0.102868      -2.27431      -3.42161       3.42161       254.341       257.763    
  30  0.774422     -0.255639     -0.384599      0.384599       255.115       255.500    
  31  0.564329     -0.572118     -0.860729      0.860729       250.480       251.341    
  32  0.206718      -1.57640      -2.37164       2.37164       253.443       255.815    
  33  0.407431     -0.897885      -1.35083       1.35083       251.409       252.760    
  34  0.505624     -0.681961      -1.02598       1.02598       256.554       257.580    
  35  0.451161     -0.795932      -1.19745       1.19745       251.225       252.422    
  36  0.619041     -0.479583     -0.721515      0.721515       258.199       258.920    
  37  0.326941      -1.11798      -1.68195       1.68195       257.630       259.312    
  38  0.750232     -0.287372     -0.432341      0.432341       259.374       259.806    
  39  0.718810     -0.330159     -0.496711      0.496711       256.866       257.363    
  40  0.366798      -1.00294      -1.50889       1.50889       259.496       261.005    
  41  0.467420     -0.760527      -1.14418       1.14418       262.350       263.495    
  42  0.854905     -0.156764     -0.235846      0.235846       262.297       262.533    
  43  0.248161      -1.39368      -2.09674       2.09674       261.877       263.973    
  44  0.201563      -1.60165      -2.40962       2.40962       264.341       266.750    
  45  0.108988      -2.21652      -3.33467       3.33467       264.230       267.565    
  46  0.988176     -0.118946E-01 -0.178949E-01  0.178949E-01   264.524       264.542    
  47  0.639214     -0.447517     -0.673272      0.673272       265.290       265.964    
  48  0.165897E-01  -4.09897      -6.16675       6.16675       267.993       274.159    
  49  0.235415      -1.44641      -2.17606       2.17606       268.603       270.779    
  50  0.140842      -1.96012      -2.94892       2.94892       268.366       271.315    
  51  0.110985      -2.19836      -3.30734       3.30734       270.497       273.804    
  52  0.913750     -0.901977E-01 -0.135699      0.135699       271.686       271.822    
  53  0.841658E-01  -2.47497      -3.72349       3.72349       269.398       273.122    
  54  0.639761     -0.446660     -0.671983      0.671983       270.367       271.039    
  55  0.526985E-01  -2.94317      -4.42788       4.42788       271.438       275.865    
  56  0.523686     -0.646862     -0.973179      0.973179       268.027       269.000    
  57  0.992660     -0.736704E-02 -0.110834E-01  0.110834E-01   272.884       272.895    
  58  0.879505     -0.128396     -0.193167      0.193167       272.126       272.319    
  59  0.535415     -0.624714     -0.939858      0.939858       270.221       271.161    
  60  0.386986     -0.949366      -1.42828       1.42828       271.873       273.301    
  61  0.724451     -0.322341     -0.484949      0.484949       273.105       273.590    
  62  0.461855     -0.772505      -1.16220       1.16220       274.686       275.849    
  63  0.319705      -1.14036      -1.71562       1.71562       270.598       272.314    
  64  0.935782     -0.663723E-01 -0.998546E-01  0.998546E-01   260.314       260.414    
loop,thermsimp(1:2)       94  0.336099      0.312167    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    476        269.53          0.88          1.09         23.12          0.00          0.04         25.12
Just calling func    0   0         25.12


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    269.53
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.50446               505
loop is:       94
neval is:      475
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       94      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    1.50446               505
loop is:       95
neval is:      475


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      505
neval,tstepnext:      475     505

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.253064      -1.37411      -2.06730       2.06730       231.316       233.383    
   2  0.229389      -1.47233      -2.21507       2.21507       232.714       234.929    
   3  0.571162     -0.560083     -0.842623      0.842623       233.369       234.211    
   4  0.537902     -0.620079     -0.932886      0.932886       232.423       233.356    
   5  0.112268      -2.18686      -3.29005       3.29005       235.287       238.577    
   6  0.988186     -0.118842E-01 -0.178794E-01  0.178794E-01   233.251       233.269    
   7  0.358165      -1.02676      -1.54472       1.54472       236.044       237.588    
   8  0.768403     -0.263441     -0.396337      0.396337       238.614       239.010    
   9  0.493061     -0.707122      -1.06384       1.06384       244.202       245.266    
  10  0.755030     -0.280998     -0.422751      0.422751       244.750       245.173    
  11  0.380853     -0.965342      -1.45232       1.45232       244.829       246.281    
  12  0.131667      -2.02748      -3.05026       3.05026       243.574       246.624    
  13  0.812799     -0.207272     -0.311832      0.311832       246.469       246.780    
  14  0.390991     -0.939070      -1.41279       1.41279       246.707       248.120    
  15  0.782458     -0.245315     -0.369067      0.369067       244.286       244.655    
  16  0.348518E-01  -3.35665      -5.04995       5.04995       245.655       250.705    
  17  0.671068     -0.398885     -0.600108      0.600108       249.595       250.195    
  18  0.848918     -0.163793     -0.246421      0.246421       250.450       250.697    
  19  0.246224      -1.40151      -2.10852       2.10852       250.929       253.037    
  20  0.548254     -0.601017     -0.904208      0.904208       250.480       251.385    
  21  0.496910     -0.699346      -1.05214       1.05214       251.225       252.277    
  22  0.621299     -0.475942     -0.716037      0.716037       251.409       252.125    
  23  0.222686      -1.50199      -2.25969       2.25969       252.144       254.403    
  24  0.541907     -0.612662     -0.921726      0.921726       249.047       249.968    
  25  0.599206     -0.512150     -0.770509      0.770509       252.789       253.560    
  26  0.147915      -1.91112      -2.87520       2.87520       252.214       255.089    
  27  0.952413     -0.487561E-01 -0.733517E-01  0.733517E-01   252.500       252.574    
  28  0.981186     -0.189927E-01 -0.285738E-01  0.285738E-01   252.588       252.617    
  29  0.560306     -0.579272     -0.871493      0.871493       253.891       254.763    
  30  0.892317     -0.113934     -0.171409      0.171409       251.965       252.136    
  31  0.936237E-03  -6.97364      -10.4916       10.4916       252.943       263.435    
  32  0.367075      -1.00219      -1.50775       1.50775       255.115       256.623    
  33  0.440672     -0.819456      -1.23284       1.23284       253.443       254.676    
  34  0.928002     -0.747214E-01 -0.112416      0.112416       256.866       256.978    
  35  0.424766     -0.856216      -1.28814       1.28814       256.554       257.842    
  36  0.846974     -0.166085     -0.249868      0.249868       254.341       254.591    
  37  0.581252     -0.542571     -0.816277      0.816277       258.199       259.015    
  38  0.316247      -1.15123      -1.73199       1.73199       257.630       259.362    
  39  0.211145E-01  -3.85779      -5.80390       5.80390       259.374       265.178    
  40  0.698864     -0.358299     -0.539047      0.539047       260.314       260.853    
  41  0.616376     -0.483899     -0.728007      0.728007       259.496       260.224    
  42  0.744369     -0.295219     -0.444145      0.444145       262.297       262.741    
  43  0.165839      -1.79674      -2.70313       2.70313       262.350       265.054    
  44  0.605775     -0.501246     -0.754106      0.754106       261.877       262.631    
  45  0.594138     -0.520643     -0.783288      0.783288       264.524       265.307    
  46  0.120602      -2.11526      -3.18233       3.18233       265.290       268.473    
  47  0.614289     -0.487290     -0.733110      0.733110       264.341       265.074    
  48  0.128959E-01  -4.35085      -6.54569       6.54569       264.230       270.776    
  49  0.863875     -0.146327     -0.220144      0.220144       268.027       268.247    
  50  0.984175     -0.159514E-01 -0.239983E-01  0.239983E-01   268.603       268.627    
  51  0.193234      -1.64385      -2.47311       2.47311       270.367       272.840    
  52  0.821829     -0.196223     -0.295209      0.295209       270.221       270.516    
  53  0.513646     -0.666220      -1.00230       1.00230       268.366       269.368    
  54  0.572807     -0.557207     -0.838297      0.838297       271.686       272.524    
  55  0.298452      -1.20915      -1.81912       1.81912       270.598       272.417    
  56  0.604405     -0.503511     -0.757513      0.757513       272.126       272.883    
  57  0.786763     -0.239828     -0.360812      0.360812       272.884       273.245    
  58  0.761650     -0.272268     -0.409616      0.409616       269.398       269.808    
  59  0.970170     -0.302843E-01 -0.455616E-01  0.455616E-01   271.873       271.919    
  60  0.823313     -0.194418     -0.292495      0.292495       273.105       273.398    
  61  0.632020     -0.458835     -0.690300      0.690300       270.497       271.187    
  62  0.146333      -1.92187      -2.89138       2.89138       267.993       270.884    
  63  0.626222     -0.468050     -0.704163      0.704163       274.686       275.391    
  64  0.772069     -0.258681     -0.389175      0.389175       269.526       269.915    
loop,thermsimp(1:2)       95   2.06730       2.21507    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    477        248.99          0.87          1.09         23.11          0.05          0.04         25.16
Just calling func    0   0         25.17


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    248.99
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.50446               505
loop is:       95
neval is:      476
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       95      95
 right before GO TO 250



 right after: 250 IF (loop < nloop) CYCLE Main_loop 
loop,nloop:       95      95
loop was equal to nloop so did not start main cycle again, now will do the following: 




calculate mean & stdev of func values for current simplex (hmean,hstd)
 write hstd
 RMS of function values of last simplex =   11.6921    

hmean,hstd :    255.127       11.6921    


writing best so far by calling functn2 
 but just writing params not moments. see the change in functn2
hmean,hstd :    255.127       11.6921    
h(1),h(best1),h(np1) :    233.251       231.316       248.986    
htherm(1),htherm(best1),htherm(np1) :    233.269       233.383       275.391    


 CHECK hstd>?stopcr
---------> IF hstd>stopcr (and maxfn,neval.nevalp conditions as well) then set iflag and loop to zero and go to the start of the main cycle again 
---------> IF hstd<=stopcr then find the centroid of the current simplex and get the function value there 
 ............
 ............
 ............
 ............
  .NOT. (hstd > stopcr .AND. (((maxfn>=0).AND.(neval <= maxfn)).OR.((maxfn<0).AND.(nevalp <= -1*maxfn))  )) 
  so find the centroid of current simplex and get teh function value there 
  call functn(p,func) 
  neval = neval + 1
  nevalp = nevalp + 1
  IF ((iprint > 0).AND.(realrank==0)) THEN 
     IF (MOD(neval,iprint) == 0) WRITE (lout,5100) neval, func, p 
  END IF  
  CHECK wtr the no. of func values allowed, maxfn, has been overrun. if so, exit with ifault= 1 
  IF maxfn>0 check based on neval. if maxfn<0 check based on nevalp. 
  i.e.: ---->IF (((maxfn>=0).AND.(neval > maxfn)).OR.((maxfn<0).AND.(nevalp > -1*maxfn))) THEN
        ---->IF the above if statement true then something ... RETURN 
        ---->IF the above if statement not true then you get out of that if statement ... CONVGENCE CRTI SATISFIED - RETURN 
 ............
 ............
iter,obj,time:    478        246.20          0.88          1.09         23.16          0.01          0.04         25.18

 EVIDENCE OF CONVERGENCE
 Centroid of last simplex =
    4.7258      -1.2923       4.7120      -100.00      0.20450      -1.3341    
    2.6097      -100.00       2.8066      0.38812       1.3202     -0.73891    
    2.4000       0.0000       0.0000     -0.33933       0.0000       0.0000    
    0.0000      -1.2210      -2.5000       11324.       17280.      -1412.4    

   -3526.4      -2.0000      -8.5624      -2.7004      -1.8727       1.2240    
   -13.983      -1.9909       1358.8       0.0000       3354.5       4763.8    
    3323.5       5072.9       5329.0       2500.1       4298.4      0.91065E-01
   0.17816E-01   0.0000     -0.76715E-01  0.21239     -0.44694E-01  0.17099    

   0.73967E-01 -0.18819     -0.71435     -0.71323       0.0000      0.33406    
   0.11987      0.85411E-01  0.18497      0.26360      0.26084      0.91976E-01
   0.67138E-01 -0.48096E-01 -0.49210     -0.41337       0.0000      -2.4495    
   -5.3576       6.2740      -1.1499       0.0000       0.0000       9.0517    

    8.8795      -5338.8      -4.0000     -0.19975     -0.47424       8.8536    
    8.0966      -16539.      -4.0000      0.28413       1.9981       9.4204    
    9.2809      -6591.1      -4.0000      0.41088      0.98740       9.4191    
    9.0889      -1671.8      -2.0000    
 Function value at centroid =   246.201    

beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    1.50446               505
loop is:        1
neval is:      477


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      505
neval,tstepnext:      477     505

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.704949     -0.349630     -0.526005      0.526005       233.251       233.777    
   2  0.970994     -0.294346E-01 -0.442832E-01  0.442832E-01   232.423       232.467    
   3  0.665247     -0.407596     -0.613213      0.613213       231.316       231.929    
   4  0.679606     -0.386241     -0.581085      0.581085       233.369       233.950    
   5  0.216334      -1.53093      -2.30323       2.30323       232.714       235.017    
   6  0.920084     -0.832900E-01 -0.125307      0.125307       236.044       236.169    
   7  0.922000     -0.812099E-01 -0.122177      0.122177       235.287       235.410    
   8  0.387073     -0.949143      -1.42795       1.42795       238.614       240.042    
   9  0.392085     -0.936277      -1.40859       1.40859       244.286       245.694    
  10  0.559162     -0.581315     -0.874566      0.874566       244.750       245.625    
  11  0.552599     -0.593124     -0.892332      0.892332       244.202       245.094    
  12  0.657815     -0.418831     -0.630115      0.630115       244.829       245.459    
  13  0.755087     -0.280923     -0.422638      0.422638       243.574       243.996    
  14  0.183724      -1.69432      -2.54904       2.54904       246.469       249.018    
  15  0.889314     -0.117305     -0.176481      0.176481       246.707       246.884    
  16  0.346116      -1.06098      -1.59621       1.59621       249.047       250.643    
  17  0.212120      -1.55060      -2.33282       2.33282       249.595       251.928    
  18  0.409709     -0.892309      -1.34244       1.34244       250.450       251.793    
  19  0.288781      -1.24209      -1.86867       1.86867       245.655       247.524    
  20  0.470431     -0.754106      -1.13452       1.13452       250.480       251.615    
  21  0.335548      -1.09199      -1.64286       1.64286       251.409       253.052    
  22  0.188346      -1.66947      -2.51166       2.51166       251.965       254.476    
  23  0.546572     -0.604090     -0.908830      0.908830       251.225       252.134    
  24  0.258243      -1.35386      -2.03682       2.03682       252.500       254.537    
  25  0.544051     -0.608712     -0.915785      0.915785       252.588       253.504    
  26  0.594635     -0.519807     -0.782030      0.782030       250.929       251.711    
  27  0.342233      -1.07226      -1.61318       1.61318       252.789       254.403    
  28  0.309367      -1.17323      -1.76507       1.76507       252.144       253.909    
  29  0.717331E-01  -2.63480      -3.96396       3.96396       254.341       258.305    
  30  0.443944E-02  -5.41723      -8.15001       8.15001       253.443       261.593    
  31  0.901850     -0.103307     -0.155421      0.155421       253.891       254.046    
  32  0.289566      -1.23937      -1.86459       1.86459       252.214       254.078    
  33  0.824723     -0.192707     -0.289921      0.289921       255.115       255.405    
  34  0.830455     -0.185782     -0.279501      0.279501       256.866       257.145    
  35  0.656263     -0.421194     -0.633670      0.633670       256.554       257.187    
  36  0.170687      -1.76792      -2.65977       2.65977       258.199       260.858    
  37  0.455052     -0.787343      -1.18453       1.18453       257.630       258.815    
  38  0.531062     -0.632876     -0.952138      0.952138       259.496       260.449    
  39  0.958848     -0.420222E-01 -0.632208E-01  0.632208E-01   260.314       260.378    
  40  0.660041     -0.415453     -0.625033      0.625033       261.877       262.502    
  41  0.598625     -0.513120     -0.771969      0.771969       262.297       263.069    
  42  0.303046      -1.19387      -1.79613       1.79613       252.943       254.740    
  43  0.742116     -0.298250     -0.448706      0.448706       262.350       262.799    
  44  0.426280     -0.852660      -1.28279       1.28279       264.341       265.623    
  45  0.891558     -0.114785     -0.172690      0.172690       259.374       259.547    
  46  0.399357     -0.917899      -1.38094       1.38094       264.524       265.905    
  47  0.526711     -0.641104     -0.964516      0.964516       268.027       268.991    
  48  0.616864     -0.483107     -0.726815      0.726815       265.290       266.017    
  49  0.783244E-01  -2.54690      -3.83171       3.83171       268.603       272.435    
  50  0.178515      -1.72308      -2.59231       2.59231       268.366       270.958    
  51  0.699546     -0.357324     -0.537580      0.537580       269.398       269.936    
  52  0.378655     -0.971130      -1.46103       1.46103       269.526       270.987    
  53  0.786873     -0.239688     -0.360601      0.360601       270.221       270.582    
  54  0.516765     -0.660167     -0.993196      0.993196       264.230       265.223    
  55  0.375855     -0.978552      -1.47219       1.47219       267.993       269.465    
  56  0.142236      -1.95026      -2.93410       2.93410       270.497       273.431    
  57  0.318918      -1.14282      -1.71933       1.71933       271.873       273.592    
  58  0.577834E-01  -2.85105      -4.28930       4.28930       270.598       274.887    
  59  0.482567     -0.728635      -1.09620       1.09620       271.686       272.782    
  60  0.990335     -0.971224E-02 -0.146117E-01  0.146117E-01   270.367       270.381    
  61  0.707581     -0.345903     -0.520399      0.520399       272.126       272.646    
  62  0.254289      -1.36928      -2.06004       2.06004       272.884       274.944    
  63  0.457064     -0.782932      -1.17789       1.17789       273.105       274.283    
  64  0.559547     -0.580628     -0.873533      0.873533       248.986       249.859    
loop,thermsimp(1:2)        1  0.526005      0.442832E-01

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    479        236.72          0.86          1.09         23.12          0.24          0.04         25.35
Just calling func    0   0         25.35


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    236.72
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.50446               505
loop is:        1
neval is:      478
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        1      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    1.50446               505
loop is:        2
neval is:      478


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      505
neval,tstepnext:      478     505

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.934282     -0.679771E-01 -0.102269      0.102269       231.316       231.418    
   2  0.959826     -0.410037E-01 -0.616885E-01  0.616885E-01   232.423       232.485    
   3  0.673594     -0.395128     -0.594454      0.594454       233.251       233.845    
   4  0.779876     -0.248621     -0.374040      0.374040       233.369       233.743    
   5  0.445258     -0.809102      -1.21726       1.21726       232.714       233.931    
   6  0.730020     -0.314684     -0.473430      0.473430       235.287       235.761    
   7  0.373553     -0.984697      -1.48144       1.48144       236.044       237.525    
   8  0.502695     -0.687771      -1.03473       1.03473       238.614       239.649    
   9  0.752227     -0.284717     -0.428346      0.428346       243.574       244.002    
  10  0.496558     -0.700055      -1.05321       1.05321       244.202       245.255    
  11  0.642076     -0.443049     -0.666550      0.666550       244.829       245.496    
  12  0.278090      -1.27981      -1.92542       1.92542       244.750       246.676    
  13  0.306173E-02  -5.78878      -8.70899       8.70899       244.286       252.995    
  14  0.563321     -0.573906     -0.863419      0.863419       246.707       247.571    
  15  0.393175     -0.933500      -1.40441       1.40441       245.655       247.059    
  16  0.122356E-01  -4.40341      -6.62476       6.62476       246.469       253.093    
  17  0.720206     -0.328218     -0.493791      0.493791       248.986       249.479    
  18  0.677984     -0.388632     -0.584682      0.584682       249.047       249.631    
  19  0.690144     -0.370855     -0.557937      0.557937       250.480       251.038    
  20  0.434024     -0.834656      -1.25571       1.25571       250.929       252.184    
  21  0.765725     -0.266932     -0.401588      0.401588       250.450       250.852    
  22  0.225865      -1.48782      -2.23837       2.23837       249.595       251.834    
  23  0.765632     -0.267054     -0.401773      0.401773       251.225       251.627    
  24  0.719977     -0.328536     -0.494269      0.494269       251.409       251.903    
  25  0.670210     -0.400164     -0.602031      0.602031       252.588       253.190    
  26  0.733967     -0.309291     -0.465316      0.465316       252.144       252.609    
  27  0.102650      -2.27643      -3.42480       3.42480       253.891       257.316    
  28  0.943364     -0.583033E-01 -0.877152E-01  0.877152E-01   252.214       252.301    
  29  0.813300     -0.206656     -0.310905      0.310905       252.789       253.100    
  30  0.441171     -0.818323      -1.23114       1.23114       251.965       253.196    
  31  0.986663     -0.134264E-01 -0.201995E-01  0.201995E-01   252.500       252.520    
  32  0.392748     -0.934588      -1.40605       1.40605       252.943       254.349    
  33  0.566634     -0.568042     -0.854597      0.854597       255.115       255.970    
  34  0.256244      -1.36162      -2.04851       2.04851       256.866       258.914    
  35  0.288015      -1.24474      -1.87267       1.87267       256.554       258.426    
  36  0.636551     -0.451691     -0.679553      0.679553       254.341       255.021    
  37  0.283424      -1.26081      -1.89684       1.89684       257.630       259.527    
  38  0.492002     -0.709273      -1.06707       1.06707       259.374       260.441    
  39  0.667434     -0.404315     -0.608277      0.608277       260.314       260.923    
  40  0.418456     -0.871184      -1.31066       1.31066       259.496       260.807    
  41  0.218030      -1.52312      -2.29148       2.29148       258.199       260.490    
  42  0.693223     -0.366404     -0.551241      0.551241       253.443       253.995    
  43  0.261018      -1.34316      -2.02074       2.02074       261.877       263.897    
  44  0.889516     -0.117078     -0.176139      0.176139       262.350       262.527    
  45  0.815048     -0.204509     -0.307676      0.307676       262.297       262.605    
  46  0.916438     -0.872606E-01 -0.131280      0.131280       264.230       264.361    
  47  0.426654     -0.851781      -1.28147       1.28147       264.341       265.622    
  48  0.730475     -0.314060     -0.472491      0.472491       264.524       264.997    
  49  0.145228      -1.92945      -2.90278       2.90278       265.290       268.193    
  50  0.753657     -0.282818     -0.425489      0.425489       268.027       268.452    
  51  0.904814     -0.100026     -0.150485      0.150485       267.993       268.143    
  52  0.452134     -0.793777      -1.19421       1.19421       269.398       270.593    
  53  0.545070     -0.606840     -0.912968      0.912968       270.367       271.280    
  54  0.441322     -0.817979      -1.23062       1.23062       270.221       271.452    
  55  0.769674     -0.261788     -0.393850      0.393850       268.366       268.760    
  56  0.978900     -0.213256E-01 -0.320836E-01  0.320836E-01   269.526       269.558    
  57  0.206303E-01  -3.88099      -5.83881       5.83881       268.603       274.442    
  58  0.898283     -0.107271     -0.161385      0.161385       272.126       272.287    
  59  0.238292      -1.43426      -2.15779       2.15779       271.686       273.844    
  60  0.416889     -0.874935      -1.31631       1.31631       270.497       271.813    
  61  0.549100     -0.599475     -0.901888      0.901888       271.873       272.775    
  62  0.368445     -0.998464      -1.50215       1.50215       273.105       274.608    
  63  0.313833E-01  -3.46148      -5.20766       5.20766       270.598       275.806    
  64  0.868875     -0.140556     -0.211462      0.211462       236.725       236.936    
loop,thermsimp(1:2)        2  0.102269      0.616885E-01

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    480        234.62          0.88          1.09         23.09          0.00          0.04         25.10
Just calling func    0   0         25.10


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    234.62
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.50446               505
loop is:        2
neval is:      479
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        2      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    1.50446               505
loop is:        3
neval is:      479


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      505
neval,tstepnext:      479     505

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.672644     -0.396539     -0.596578      0.596578       231.316       231.912    
   2  0.422499     -0.861569      -1.29620       1.29620       232.423       233.719    
   3  0.983039     -0.171063E-01 -0.257357E-01  0.257357E-01   233.369       233.394    
   4  0.823694     -0.193957     -0.291800      0.291800       233.251       233.543    
   5  0.410952E-01  -3.19186      -4.80204       4.80204       232.714       237.516    
   6  0.982524     -0.176301E-01 -0.265238E-01  0.265238E-01   235.287       235.314    
   7  0.133811      -2.01132      -3.02596       3.02596       236.725       239.751    
   8  0.737716     -0.304197     -0.457652      0.457652       236.044       236.501    
   9  0.551985     -0.594234     -0.894002      0.894002       238.614       239.508    
  10  0.506707     -0.679823      -1.02277       1.02277       243.574       244.596    
  11  0.513830     -0.665862      -1.00176       1.00176       244.202       245.204    
  12  0.888541     -0.118174     -0.177789      0.177789       244.829       245.007    
  13  0.127317      -2.06108      -3.10081       3.10081       244.750       247.851    
  14  0.196115      -1.62905      -2.45085       2.45085       245.655       248.106    
  15  0.332258      -1.10184      -1.65768       1.65768       246.707       248.365    
  16  0.809198     -0.211711     -0.318512      0.318512       248.986       249.304    
  17  0.238368      -1.43394      -2.15731       2.15731       249.047       251.204    
  18  0.275854      -1.28788      -1.93757       1.93757       250.450       252.388    
  19  0.977786     -0.224645E-01 -0.337970E-01  0.337970E-01   250.480       250.514    
  20  0.941455     -0.603283E-01 -0.907616E-01  0.907616E-01   251.225       251.316    
  21  0.197399      -1.62253      -2.44103       2.44103       249.595       252.036    
  22  0.410731     -0.889818      -1.33870       1.33870       251.409       252.748    
  23  0.756764     -0.278703     -0.419298      0.419298       250.929       251.348    
  24  0.250649      -1.38370      -2.08172       2.08172       252.214       254.295    
  25  0.519688E-01  -2.95711      -4.44886       4.44886       252.500       256.949    
  26  0.112052      -2.18879      -3.29296       3.29296       252.144       255.436    
  27  0.941464     -0.603191E-01 -0.907478E-01  0.907478E-01   244.286       244.376    
  28  0.394389     -0.930418      -1.39978       1.39978       246.469       247.868    
  29  0.215768      -1.53355      -2.30717       2.30717       252.789       255.097    
  30  0.956538     -0.444349E-01 -0.668505E-01  0.668505E-01   252.588       252.655    
  31  0.956019     -0.449770E-01 -0.676662E-01  0.676662E-01   251.965       252.032    
  32  0.475944     -0.742456      -1.11700       1.11700       253.443       254.560    
  33  0.891330     -0.115041     -0.173074      0.173074       252.943       253.116    
  34  0.535773     -0.624045     -0.938852      0.938852       254.341       255.280    
  35  0.254937      -1.36674      -2.05620       2.05620       255.115       257.171    
  36  0.973803     -0.265463E-01 -0.399379E-01  0.399379E-01   253.891       253.931    
  37  0.562546     -0.575283     -0.865491      0.865491       256.554       257.419    
  38  0.753728     -0.282724     -0.425347      0.425347       256.866       257.291    
  39  0.958046     -0.428600E-01 -0.644812E-01  0.644812E-01   257.630       257.694    
  40  0.362330      -1.01520      -1.52733       1.52733       259.374       260.901    
  41  0.752266     -0.284666     -0.428269      0.428269       258.199       258.627    
  42  0.330315      -1.10771      -1.66651       1.66651       259.496       261.163    
  43  0.637582     -0.450073     -0.677117      0.677117       260.314       260.991    
  44  0.690082E-01  -2.67353      -4.02222       4.02222       262.350       266.373    
  45  0.613234     -0.489009     -0.735695      0.735695       262.297       263.033    
  46  0.127887      -2.05661      -3.09409       3.09409       261.877       264.971    
  47  0.487824     -0.717801      -1.07990       1.07990       264.230       265.310    
  48  0.569313     -0.563325     -0.847500      0.847500       264.524       265.372    
  49  0.508604     -0.676086      -1.01715       1.01715       264.341       265.358    
  50  0.977129     -0.231365E-01 -0.348080E-01  0.348080E-01   267.993       268.027    
  51  0.755495     -0.280382     -0.421824      0.421824       265.290       265.712    
  52  0.459287     -0.778079      -1.17059       1.17059       268.027       269.197    
  53  0.588474     -0.530223     -0.797700      0.797700       268.366       269.163    
  54  0.976970     -0.232993E-01 -0.350529E-01  0.350529E-01   269.526       269.561    
  55  0.468748     -0.757689      -1.13991       1.13991       269.398       270.538    
  56  0.892888     -0.113294     -0.170447      0.170447       270.367       270.537    
  57  0.560330     -0.579229     -0.871428      0.871428       270.221       271.093    
  58  0.155479      -1.86125      -2.80017       2.80017       270.497       273.297    
  59  0.924656     -0.783331E-01 -0.117849      0.117849       272.126       272.244    
  60  0.200443      -1.60723      -2.41801       2.41801       271.873       274.291    
  61  0.482314     -0.729159      -1.09699       1.09699       271.686       272.783    
  62  0.504878     -0.683438      -1.02821       1.02821       268.603       269.631    
  63  0.941371     -0.604184E-01 -0.908971E-01  0.908971E-01   273.105       273.196    
  64  0.765712     -0.266949     -0.401615      0.401615       234.623       235.024    
loop,thermsimp(1:2)        3  0.596578       1.29620    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    481        262.85          0.88          1.09         23.05          0.07          0.04         25.14
Just calling func    0   0         25.14


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  480    262.85        4.458     -1.277      4.718     -100.0     0.7727E-01
                      -1.261      2.800     -100.0      2.671     0.5361    
                       1.180    -0.9216      2.400      0.000      0.000    
                     -0.7848      0.000      0.000      0.000     -1.221    

                      -2.500     0.1124E+05 0.1732E+05 -1445.     -3454.    
                      -2.000     -8.001     -2.603     -2.221     0.8074    
                      -13.38     -2.040      1359.      0.000      3354.    

                       4764.      3323.      5073.      5329.      2500.    
                       4298.     0.9055E-01 0.3435E-01  0.000    -0.1031    
                      0.1590     0.5939     0.9740E-01 0.6585E-01-0.2119    

                      0.4976    -0.8358      0.000     0.3043     0.1312    
                      0.8541E-01 0.1565     0.2239     0.2190     0.7140E-01
                      0.5819E-01-0.4562E-01-0.7577    -0.5525      0.000    

                      -2.373     -5.688      6.397    -0.8693      0.000    
                       0.000      9.065      8.826     -4978.     -4.000    
                     -0.2447    -0.3478      8.896      7.972    -0.1692E+05

                      -4.000    -0.2047      1.671      9.368      9.214    
                      -6717.     -4.000     0.2314     0.9281      9.530    
                       9.041     -2058.     -2.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    262.85
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.50446               505
loop is:        3
neval is:      480
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        3      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    1.50446               505
loop is:        4
neval is:      480


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      505
neval,tstepnext:      480     505

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.798513     -0.225003     -0.338509      0.338509       231.316       231.654    
   2  0.638408     -0.448778     -0.675169      0.675169       233.369       234.044    
   3  0.680643     -0.384717     -0.578792      0.578792       233.251       233.830    
   4  0.961577     -0.391809E-01 -0.589462E-01  0.589462E-01   232.423       232.482    
   5  0.847986     -0.164892     -0.248073      0.248073       234.623       234.871    
   6  0.272167      -1.30134      -1.95781       1.95781       235.287       237.245    
   7  0.617328     -0.482354     -0.725684      0.725684       236.044       236.769    
   8  0.988374     -0.116944E-01 -0.175938E-01  0.175938E-01   232.714       232.731    
   9  0.542264     -0.612001     -0.920733      0.920733       238.614       239.535    
  10  0.415814     -0.877516      -1.32019       1.32019       236.725       238.045    
  11  0.267384      -1.31907      -1.98449       1.98449       244.286       246.270    
  12  0.457473     -0.782037      -1.17654       1.17654       243.574       244.750    
  13  0.652976     -0.426215     -0.641224      0.641224       244.829       245.470    
  14  0.358056      -1.02707      -1.54518       1.54518       244.202       245.747    
  15  0.872742     -0.136115     -0.204779      0.204779       244.750       244.955    
  16  0.903157     -0.101859     -0.153243      0.153243       246.469       246.622    
  17  0.177047      -1.73134      -2.60473       2.60473       245.655       248.260    
  18  0.302956      -1.19417      -1.79658       1.79658       246.707       248.504    
  19  0.948694     -0.526688E-01 -0.792382E-01  0.792382E-01   248.986       249.065    
  20  0.692226     -0.367843     -0.553406      0.553406       250.480       251.034    
  21  0.466535     -0.762421      -1.14703       1.14703       249.047       250.194    
  22  0.159230      -1.83741      -2.76431       2.76431       251.225       253.989    
  23  0.573784     -0.555503     -0.835732      0.835732       250.929       251.765    
  24  0.294604      -1.22212      -1.83864       1.83864       251.965       253.803    
  25  0.619338     -0.479105     -0.720795      0.720795       249.595       250.316    
  26  0.357513      -1.02858      -1.54747       1.54747       250.450       251.998    
  27  0.135435      -1.99926      -3.00782       3.00782       252.588       255.596    
  28  0.490167     -0.713010      -1.07270       1.07270       251.409       252.482    
  29  0.409560     -0.892671      -1.34299       1.34299       252.943       254.286    
  30  0.657018     -0.420044     -0.631941      0.631941       253.891       254.523    
  31  0.410122     -0.891301      -1.34093       1.34093       252.214       253.555    
  32  0.407218     -0.898406      -1.35162       1.35162       253.443       254.795    
  33  0.932850     -0.695113E-01 -0.104577      0.104577       252.789       252.894    
  34  0.139206      -1.97180      -2.96650       2.96650       254.341       257.308    
  35  0.416824     -0.875091      -1.31654       1.31654       252.144       253.460    
  36  0.665493     -0.407227     -0.612658      0.612658       252.500       253.113    
  37  0.948852     -0.525019E-01 -0.789872E-01  0.789872E-01   255.115       255.194    
  38  0.110908      -2.19906      -3.30840       3.30840       256.866       260.174    
  39  0.116497      -2.14989      -3.23442       3.23442       256.554       259.788    
  40  0.835798     -0.179369     -0.269854      0.269854       257.630       257.900    
  41  0.389785     -0.942161      -1.41744       1.41744       258.199       259.616    
  42  0.689009     -0.372500     -0.560413      0.560413       259.374       259.934    
  43  0.599122     -0.512291     -0.770722      0.770722       260.314       261.085    
  44  0.977477E-01  -2.32537      -3.49842       3.49842       259.496       262.995    
  45  0.394232     -0.930817      -1.40038       1.40038       262.297       263.698    
  46  0.785039E-01  -2.54461      -3.82826       3.82826       261.877       265.705    
  47  0.983301     -0.168402E-01 -0.253354E-01  0.253354E-01   264.230       264.255    
  48  0.997277     -0.272636E-02 -0.410170E-02  0.410170E-02   264.341       264.345    
  49  0.846943     -0.166122     -0.249925      0.249925       264.524       264.774    
  50  0.410104     -0.891345      -1.34100       1.34100       265.290       266.631    
  51  0.149186      -1.90256      -2.86233       2.86233       262.350       265.213    
  52  0.721509     -0.326411     -0.491072      0.491072       267.993       268.484    
  53  0.181367      -1.70723      -2.56847       2.56847       268.366       270.934    
  54  0.110612      -2.20172      -3.31241       3.31241       268.027       271.339    
  55  0.418270     -0.871629      -1.31133       1.31133       269.526       270.838    
  56  0.477704     -0.738764      -1.11144       1.11144       268.603       269.715    
  57  0.698619     -0.358649     -0.539574      0.539574       270.367       270.906    
  58  0.887281     -0.119593     -0.179923      0.179923       269.398       269.578    
  59  0.988592     -0.114738E-01 -0.172620E-01  0.172620E-01   270.221       270.238    
  60  0.144318      -1.93573      -2.91224       2.91224       272.126       275.038    
  61  0.225110      -1.49117      -2.24341       2.24341       271.686       273.929    
  62  0.625266     -0.469578     -0.706463      0.706463       273.105       273.812    
  63  0.380625E-01  -3.26853      -4.91737       4.91737       270.497       275.414    
  64  0.411656     -0.887567      -1.33531       1.33531       262.855       264.190    
loop,thermsimp(1:2)        4  0.338509      0.675169    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    482        267.40          0.88          1.09         23.12          0.05          0.04         25.20
Just calling func    0   0         25.19


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    267.40
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.50446               505
loop is:        4
neval is:      481
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        4      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    1.50446               505
loop is:        5
neval is:      481


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      505
neval,tstepnext:      481     505

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.811489     -0.208884     -0.314258      0.314258       231.316       231.630    
   2  0.731551     -0.312588     -0.470277      0.470277       232.423       232.893    
   3  0.757108     -0.278250     -0.418616      0.418616       232.714       233.132    
   4  0.684238     -0.379449     -0.570866      0.570866       233.251       233.822    
   5  0.371195     -0.991029      -1.49097       1.49097       233.369       234.860    
   6  0.302280      -1.19640      -1.79994       1.79994       234.623       236.423    
   7  0.927809     -0.749297E-01 -0.112729      0.112729       236.044       236.156    
   8  0.535678     -0.624221     -0.939117      0.939117       235.287       236.226    
   9  0.724827     -0.321822     -0.484169      0.484169       236.725       237.209    
  10  0.660067     -0.415415     -0.624975      0.624975       238.614       239.239    
  11  0.907930E-01  -2.39917      -3.60946       3.60946       243.574       247.183    
  12  0.664112E-01  -2.71189      -4.07993       4.07993       244.750       248.830    
  13  0.502773     -0.687617      -1.03449       1.03449       244.829       245.864    
  14  0.361422      -1.01771      -1.53110       1.53110       244.202       245.733    
  15  0.308497E-01  -3.47863      -5.23346       5.23346       244.286       249.519    
  16  0.174600      -1.74526      -2.62567       2.62567       246.469       249.094    
  17  0.162978      -1.81414      -2.72930       2.72930       245.655       248.384    
  18  0.427923     -0.848811      -1.27700       1.27700       246.707       247.984    
  19  0.534694     -0.626061     -0.941884      0.941884       248.986       249.928    
  20  0.647569     -0.434529     -0.653733      0.653733       249.047       249.700    
  21  0.373550     -0.984702      -1.48145       1.48145       249.595       251.077    
  22  0.804103     -0.218028     -0.328015      0.328015       250.480       250.808    
  23  0.505198     -0.682806      -1.02726       1.02726       250.929       251.956    
  24  0.105841      -2.24582      -3.37875       3.37875       250.450       253.829    
  25  0.624957     -0.470072     -0.707205      0.707205       251.409       252.116    
  26  0.224577      -1.49354      -2.24697       2.24697       252.789       255.036    
  27  0.766222     -0.266284     -0.400614      0.400614       252.500       252.901    
  28  0.645296E-01  -2.74063      -4.12317       4.12317       252.144       256.267    
  29  0.469840     -0.755362      -1.13641       1.13641       252.214       253.350    
  30  0.618430     -0.480571     -0.723001      0.723001       251.965       252.688    
  31  0.609945     -0.494386     -0.743785      0.743785       251.225       251.969    
  32  0.838697E-01  -2.47849      -3.72879       3.72879       252.943       256.672    
  33  0.341460      -1.07453      -1.61658       1.61658       253.891       255.508    
  34  0.834322     -0.181136     -0.272512      0.272512       253.443       253.716    
  35  0.538769     -0.618468     -0.930462      0.930462       255.115       256.046    
  36  0.762709     -0.270879     -0.407527      0.407527       252.588       252.996    
  37  0.490122     -0.713101      -1.07283       1.07283       254.341       255.414    
  38  0.515825     -0.661987     -0.995934      0.995934       257.630       258.626    
  39  0.512184     -0.669072      -1.00659       1.00659       258.199       259.205    
  40  0.634134     -0.455495     -0.685275      0.685275       256.554       257.239    
  41  0.816569     -0.202643     -0.304869      0.304869       259.374       259.679    
  42  0.669400     -0.401374     -0.603852      0.603852       256.866       257.470    
  43  0.288427      -1.24331      -1.87052       1.87052       260.314       262.185    
  44  0.270539      -1.30734      -1.96684       1.96684       259.496       261.463    
  45  0.542986     -0.610673     -0.918734      0.918734       262.297       263.216    
  46  0.576168E-01  -2.85394      -4.29364       4.29364       262.855       267.149    
  47  0.236528      -1.44169      -2.16897       2.16897       264.230       266.399    
  48  0.238062      -1.43523      -2.15924       2.15924       264.341       266.500    
  49  0.363391      -1.01228      -1.52293       1.52293       264.524       266.047    
  50  0.981261     -0.189165E-01 -0.284592E-01  0.284592E-01   262.350       262.379    
  51  0.854045     -0.157772     -0.237362      0.237362       261.877       262.114    
  52  0.898703     -0.106803     -0.160681      0.160681       265.290       265.451    
  53  0.708949     -0.343971     -0.517492      0.517492       267.993       268.510    
  54  0.256844      -1.35929      -2.04500       2.04500       269.398       271.443    
  55  0.566741     -0.567853     -0.854313      0.854313       268.603       269.458    
  56  0.806938E-01  -2.51709      -3.78687       3.78687       270.221       274.008    
  57  0.155475      -1.86127      -2.80021       2.80021       269.526       272.326    
  58  0.825063     -0.192296     -0.289302      0.289302       270.367       270.656    
  59  0.990624     -0.942005E-02 -0.141721E-01  0.141721E-01   268.366       268.380    
  60  0.282655      -1.26353      -1.90093       1.90093       268.027       269.928    
  61  0.157271      -1.84978      -2.78293       2.78293       273.105       275.888    
  62  0.162524      -1.81693      -2.73350       2.73350       271.686       274.419    
  63  0.144464      -1.93473      -2.91072       2.91072       272.126       275.037    
  64  0.953298     -0.478280E-01 -0.719554E-01  0.719554E-01   267.399       267.471    
loop,thermsimp(1:2)        5  0.314258      0.470277    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    483        273.29          0.87          1.09         23.12          0.00          0.04         25.12
Just calling func    0   0         25.12


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    273.29
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.50446               505
loop is:        5
neval is:      482
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        5      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    1.50446               505
loop is:        6
neval is:      482


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      505
neval,tstepnext:      482     505

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.116004      -2.15413      -3.24080       3.24080       231.316       234.557    
   2  0.920667     -0.826568E-01 -0.124354      0.124354       232.423       232.547    
   3  0.337815      -1.08526      -1.63273       1.63273       232.714       234.346    
   4  0.862304     -0.148147     -0.222882      0.222882       233.251       233.474    
   5  0.162138      -1.81931      -2.73708       2.73708       233.369       236.106    
   6  0.207583E-01  -3.87481      -5.82950       5.82950       236.044       241.873    
   7  0.878541     -0.129492     -0.194816      0.194816       235.287       235.482    
   8  0.907223E-01  -2.39995      -3.61064       3.61064       234.623       238.233    
   9  0.174924      -1.74340      -2.62289       2.62289       236.725       239.348    
  10  0.488034     -0.717371      -1.07926       1.07926       238.614       239.693    
  11  0.204702      -1.58620      -2.38638       2.38638       244.202       246.588    
  12  0.710103     -0.342345     -0.515045      0.515045       244.829       245.344    
  13  0.211817      -1.55203      -2.33497       2.33497       243.574       245.909    
  14  0.935943     -0.662008E-01 -0.995965E-01  0.995965E-01   246.707       246.807    
  15  0.806563     -0.214973     -0.323418      0.323418       245.655       245.978    
  16  0.851420     -0.160850     -0.241993      0.241993       244.750       244.992    
  17  0.907489     -0.970743E-01 -0.146045      0.146045       246.469       246.615    
  18  0.147948      -1.91089      -2.87487       2.87487       244.286       247.161    
  19  0.989899     -0.101525E-01 -0.152740E-01  0.152740E-01   249.047       249.062    
  20  0.948348     -0.530338E-01 -0.797873E-01  0.797873E-01   248.986       249.065    
  21  0.856160     -0.155298     -0.233640      0.233640       250.480       250.714    
  22  0.879524     -0.128375     -0.193135      0.193135       249.595       249.788    
  23  0.796764     -0.227197     -0.341809      0.341809       250.929       251.271    
  24  0.957780     -0.431369E-01 -0.648978E-01  0.648978E-01   251.225       251.290    
  25  0.331827      -1.10314      -1.65964       1.65964       251.409       253.069    
  26  0.822007     -0.196007     -0.294884      0.294884       251.965       252.260    
  27  0.357574      -1.02841      -1.54721       1.54721       252.500       254.047    
  28  0.457030     -0.783007      -1.17800       1.17800       252.588       253.766    
  29  0.241929      -1.41911      -2.13500       2.13500       252.214       254.349    
  30  0.159420      -1.83622      -2.76252       2.76252       253.443       256.206    
  31  0.871392     -0.137663     -0.207109      0.207109       250.450       250.658    
  32  0.736579     -0.305739     -0.459973      0.459973       252.789       253.249    
  33  0.531818E-01  -2.93404      -4.41415       4.41415       254.341       258.755    
  34  0.959148     -0.417102E-01 -0.627514E-01  0.627514E-01   253.891       253.954    
  35  0.443867E-01  -3.11482      -4.68612       4.68612       255.115       259.801    
  36  0.318432      -1.14435      -1.72163       1.72163       252.144       253.865    
  37  0.235807E-01  -3.74733      -5.63771       5.63771       252.943       258.581    
  38  0.624487     -0.470824     -0.708337      0.708337       256.554       257.262    
  39  0.258614      -1.35242      -2.03466       2.03466       256.866       258.901    
  40  0.950845     -0.504045E-01 -0.758316E-01  0.758316E-01   257.630       257.706    
  41  0.169965      -1.77216      -2.66615       2.66615       258.199       260.865    
  42  0.207476      -1.57274      -2.36612       2.36612       259.374       261.740    
  43  0.704531     -0.350224     -0.526898      0.526898       259.496       260.023    
  44  0.620530     -0.477181     -0.717900      0.717900       261.877       262.594    
  45  0.749647     -0.288152     -0.433514      0.433514       260.314       260.748    
  46  0.855503     -0.156065     -0.234795      0.234795       262.350       262.585    
  47  0.860063     -0.150749     -0.226796      0.226796       262.297       262.524    
  48  0.161316      -1.82439      -2.74472       2.74472       265.290       268.035    
  49  0.388396     -0.945731      -1.42282       1.42282       264.524       265.947    
  50  0.708828     -0.344142     -0.517748      0.517748       264.230       264.748    
  51  0.157417      -1.84886      -2.78153       2.78153       264.341       267.122    
  52  0.897032     -0.108663     -0.163480      0.163480       262.855       263.018    
  53  0.199511      -1.61189      -2.42502       2.42502       267.399       269.824    
  54  0.147419      -1.91448      -2.88026       2.88026       268.366       271.246    
  55  0.226766E-01  -3.78642      -5.69652       5.69652       267.993       273.689    
  56  0.698824     -0.358357     -0.539134      0.539134       268.603       269.142    
  57  0.330302      -1.10775      -1.66656       1.66656       268.027       269.693    
  58  0.277084      -1.28343      -1.93088       1.93088       270.367       272.297    
  59  0.956947E-01  -2.34659      -3.53036       3.53036       269.398       272.929    
  60  0.694044     -0.365220     -0.549459      0.549459       269.526       270.076    
  61  0.454817     -0.787861      -1.18531       1.18531       270.221       271.406    
  62  0.114970      -2.16308      -3.25428       3.25428       271.686       274.940    
  63  0.995686     -0.432330E-02 -0.650425E-02  0.650425E-02   272.126       272.132    
  64  0.589106     -0.529149     -0.796085      0.796085       273.293       274.089    
loop,thermsimp(1:2)        6   3.24080      0.124354    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    484        268.07          0.88          1.10         23.09          0.04          0.04         25.15
Just calling func    0   0         25.15


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    268.07
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.50446               505
loop is:        6
neval is:      483
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        6      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    1.50446               505
loop is:        7
neval is:      483


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      505
neval,tstepnext:      483     505

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.932199     -0.702091E-01 -0.105627      0.105627       232.423       232.529    
   2  0.510325     -0.672708      -1.01206       1.01206       233.251       234.263    
   3  0.863839     -0.146369     -0.220206      0.220206       232.714       232.934    
   4  0.707053     -0.346650     -0.521522      0.521522       231.316       231.837    
   5  0.808834     -0.212161     -0.319188      0.319188       235.287       235.607    
   6  0.684501     -0.379065     -0.570289      0.570289       233.369       233.939    
   7  0.386513     -0.950589      -1.43012       1.43012       234.623       236.053    
   8  0.480058     -0.733848      -1.10405       1.10405       236.725       237.829    
   9  0.697801     -0.359821     -0.541337      0.541337       238.614       239.155    
  10  0.806131     -0.215509     -0.324225      0.324225       236.044       236.368    
  11  0.529485     -0.635851     -0.956614      0.956614       244.750       245.707    
  12  0.547496     -0.602400     -0.906287      0.906287       244.829       245.735    
  13  0.502177     -0.688802      -1.03628       1.03628       243.574       244.610    
  14  0.714156E-01  -2.63924      -3.97064       3.97064       245.655       249.626    
  15  0.676238     -0.391210     -0.588561      0.588561       244.202       244.790    
  16  0.225230      -1.49063      -2.24260       2.24260       246.469       248.711    
  17  0.587852     -0.531281     -0.799291      0.799291       246.707       247.506    
  18  0.156670      -1.85361      -2.78869       2.78869       244.286       247.074    
  19  0.116250      -2.15201      -3.23762       3.23762       249.047       252.284    
  20  0.549251     -0.599199     -0.901473      0.901473       248.986       249.887    
  21  0.926231     -0.766317E-01 -0.115289      0.115289       249.595       249.711    
  22  0.269854      -1.30987      -1.97066       1.97066       250.450       252.421    
  23  0.388677E-01  -3.24759      -4.88588       4.88588       250.480       255.366    
  24  0.497689     -0.697780      -1.04978       1.04978       250.929       251.979    
  25  0.125376      -2.07644      -3.12392       3.12392       251.225       254.349    
  26  0.957877E-01  -2.34562      -3.52890       3.52890       251.965       255.494    
  27  0.739546     -0.301719     -0.453924      0.453924       251.409       251.863    
  28  0.300448      -1.20248      -1.80908       1.80908       252.789       254.599    
  29  0.356596      -1.03115      -1.55133       1.55133       252.588       254.140    
  30  0.600947     -0.509248     -0.766144      0.766144       252.144       252.910    
  31  0.521938     -0.650206     -0.978210      0.978210       253.891       254.869    
  32  0.535283     -0.624959     -0.940227      0.940227       252.500       253.440    
  33  0.770626     -0.260551     -0.391990      0.391990       252.214       252.606    
  34  0.773107     -0.257338     -0.387155      0.387155       253.443       253.831    
  35  0.353741      -1.03919      -1.56342       1.56342       256.554       258.117    
  36  0.309044      -1.17427      -1.76665       1.76665       257.630       259.397    
  37  0.263408      -1.33405      -2.00703       2.00703       252.943       254.950    
  38  0.583467     -0.538767     -0.810555      0.810555       254.341       255.152    
  39  0.219559      -1.51613      -2.28097       2.28097       256.866       259.147    
  40  0.949123E-01  -2.35480      -3.54271       3.54271       255.115       258.658    
  41  0.926379     -0.764713E-01 -0.115048      0.115048       259.496       259.611    
  42  0.146628      -1.91986      -2.88835       2.88835       260.314       263.203    
  43  0.998118     -0.188389E-02 -0.283425E-02  0.283425E-02   258.199       258.201    
  44  0.241713      -1.42000      -2.13634       2.13634       259.374       261.510    
  45  0.550303     -0.597286     -0.898594      0.898594       262.297       263.196    
  46  0.878320     -0.129744     -0.195195      0.195195       262.350       262.546    
  47  0.679811     -0.385940     -0.580632      0.580632       261.877       262.457    
  48  0.137778E-01  -4.28470      -6.44617       6.44617       262.855       269.301    
  49  0.752812     -0.283939     -0.427176      0.427176       264.230       264.657    
  50  0.842182     -0.171759     -0.258405      0.258405       264.524       264.783    
  51  0.917316     -0.863036E-01 -0.129841      0.129841       264.341       264.470    
  52  0.418000     -0.872273      -1.31230       1.31230       265.290       266.603    
  53  0.203470      -1.59224      -2.39546       2.39546       268.603       270.999    
  54  0.278353      -1.27887      -1.92400       1.92400       268.027       269.951    
  55  0.968942E-01  -2.33414      -3.51162       3.51162       267.399       270.911    
  56  0.361840      -1.01655      -1.52936       1.52936       269.526       271.056    
  57  0.188339      -1.66951      -2.51172       2.51172       268.366       270.877    
  58  0.417222     -0.874136      -1.31510       1.31510       270.221       271.536    
  59  0.618753     -0.480049     -0.722215      0.722215       272.126       272.848    
  60  0.769831E-01  -2.56417      -3.85769       3.85769       270.367       274.224    
  61  0.364358      -1.00962      -1.51893       1.51893       269.398       270.917    
  62  0.975478     -0.248274E-01 -0.373518E-01  0.373518E-01   267.993       268.030    
  63  0.406960     -0.899041      -1.35257       1.35257       273.293       274.645    
  64  0.609252     -0.495524     -0.745497      0.745497       268.070       268.815    
loop,thermsimp(1:2)        7  0.105627       1.01206    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    485        275.41          0.88          1.09         23.12          0.02          0.04         25.15
Just calling func    0   0         25.15


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    275.41
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.50446               505
loop is:        7
neval is:      484
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        7      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    1.50446               505
loop is:        8
neval is:      484


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      505
neval,tstepnext:      484     505

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.534728     -0.625997     -0.941789      0.941789       231.316       232.258    
   2  0.891304     -0.115069     -0.173117      0.173117       232.423       232.596    
   3  0.710791     -0.341377     -0.513588      0.513588       232.714       233.227    
   4  0.574149     -0.554867     -0.834776      0.834776       233.369       234.203    
   5  0.220647      -1.51119      -2.27353       2.27353       233.251       235.524    
   6  0.774887     -0.255038     -0.383694      0.383694       235.287       235.671    
   7  0.941732     -0.600346E-01 -0.903197E-01  0.903197E-01   234.623       234.713    
   8  0.564338E-01  -2.87469      -4.32486       4.32486       236.044       240.369    
   9  0.573286     -0.556371     -0.837039      0.837039       236.725       237.562    
  10  0.807834     -0.213399     -0.321051      0.321051       238.614       238.935    
  11  0.431082     -0.841457      -1.26594       1.26594       243.574       244.840    
  12  0.936870     -0.652112E-01 -0.981077E-01  0.981077E-01   244.202       244.300    
  13  0.524698E-02  -5.25010      -7.89858       7.89858       244.750       252.649    
  14  0.480494     -0.732942      -1.10268       1.10268       244.829       245.932    
  15  0.736344     -0.306057     -0.460452      0.460452       244.286       244.746    
  16  0.143769      -1.93955      -2.91798       2.91798       246.707       249.625    
  17  0.926564     -0.762723E-01 -0.114749      0.114749       246.469       246.583    
  18  0.760744     -0.273459     -0.411408      0.411408       245.655       246.066    
  19  0.210096      -1.56019      -2.34725       2.34725       249.595       251.943    
  20  0.453206     -0.791409      -1.19065       1.19065       248.986       250.176    
  21  0.371949     -0.988999      -1.48791       1.48791       251.409       252.897    
  22  0.629021     -0.463590     -0.697454      0.697454       250.929       251.626    
  23  0.165410      -1.79933      -2.70702       2.70702       249.047       251.754    
  24  0.265757      -1.32517      -1.99367       1.99367       250.450       252.444    
  25  0.506597     -0.680040      -1.02309       1.02309       252.214       253.237    
  26  0.271669      -1.30317      -1.96057       1.96057       252.144       254.104    
  27  0.789188     -0.236751     -0.356183      0.356183       252.500       252.856    
  28  0.422940E-01  -3.16311      -4.75878       4.75878       253.443       258.202    
  29  0.226854      -1.48345      -2.23179       2.23179       252.588       254.820    
  30  0.320198      -1.13882      -1.71331       1.71331       251.225       252.938    
  31  0.998414     -0.158710E-02 -0.238773E-02  0.238773E-02   252.789       252.792    
  32  0.943114E-01  -2.36115      -3.55227       3.55227       253.891       257.443    
  33  0.107960      -2.22599      -3.34892       3.34892       252.943       256.292    
  34  0.864949     -0.145085     -0.218274      0.218274       254.341       254.559    
  35  0.182814      -1.69928      -2.55651       2.55651       250.480       253.037    
  36  0.763255     -0.270163     -0.406450      0.406450       251.965       252.371    
  37  0.866088E-01  -2.44635      -3.68045       3.68045       256.554       260.234    
  38  0.927332     -0.754437E-01 -0.113502      0.113502       258.199       258.312    
  39  0.693333     -0.366245     -0.551001      0.551001       255.115       255.666    
  40  0.671439     -0.398332     -0.599275      0.599275       256.866       257.465    
  41  0.173693      -1.75047      -2.63351       2.63351       257.630       260.264    
  42  0.574066     -0.555010     -0.834992      0.834992       259.496       260.331    
  43  0.216158E-02  -6.13691      -9.23275       9.23275       259.374       268.607    
  44  0.611545     -0.491767     -0.739844      0.739844       261.877       262.616    
  45  0.318370      -1.14454      -1.72192       1.72192       262.350       264.072    
  46  0.110781      -2.20020      -3.31011       3.31011       262.297       265.607    
  47  0.442761     -0.814726      -1.22572       1.22572       260.314       261.540    
  48  0.953176     -0.479560E-01 -0.721480E-01  0.721480E-01   264.341       264.413    
  49  0.836181     -0.178910     -0.269163      0.269163       264.230       264.499    
  50  0.625055     -0.469916     -0.706970      0.706970       264.524       265.231    
  51  0.570036     -0.562055     -0.845591      0.845591       265.290       266.136    
  52  0.637150     -0.450750     -0.678137      0.678137       267.993       268.671    
  53  0.268370E-01  -3.61797      -5.44310       5.44310       268.070       273.513    
  54  0.915544     -0.882373E-01 -0.132750      0.132750       262.855       262.988    
  55  0.146054      -1.92378      -2.89425       2.89425       268.027       270.921    
  56  0.844097     -0.169488     -0.254988      0.254988       268.366       268.621    
  57  0.946047     -0.554635E-01 -0.834428E-01  0.834428E-01   267.399       267.482    
  58  0.822911     -0.194907     -0.293231      0.293231       269.398       269.692    
  59  0.871430     -0.137620     -0.207044      0.207044       268.603       268.810    
  60  0.259187      -1.35021      -2.03133       2.03133       269.526       271.558    
  61  0.622875     -0.473409     -0.712226      0.712226       270.221       270.933    
  62  0.499738     -0.693671      -1.04360       1.04360       272.126       273.169    
  63  0.825394     -0.191894     -0.288698      0.288698       270.367       270.655    
  64  0.157196E-01  -4.15285      -6.24780       6.24780       275.411       281.658    
loop,thermsimp(1:2)        8  0.941789      0.173117    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    486        273.29          0.88          1.09         23.12          0.00          0.04         25.12
Just calling func    0   0         25.13


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    273.29
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.50446               505
loop is:        8
neval is:      485
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        8      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    1.50446               505
loop is:        9
neval is:      485


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      505
neval,tstepnext:      485     505

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.581292     -0.542503     -0.816175      0.816175       231.316       232.132    
   2  0.331354      -1.10457      -1.66178       1.66178       232.423       234.085    
   3  0.336751      -1.08841      -1.63747       1.63747       232.714       234.351    
   4  0.782784     -0.244898     -0.368440      0.368440       233.369       233.737    
   5  0.710059     -0.342408     -0.515140      0.515140       234.623       235.138    
   6  0.439315     -0.822538      -1.23748       1.23748       233.251       234.488    
   7  0.560088     -0.579662     -0.872080      0.872080       235.287       236.159    
   8  0.865331     -0.144643     -0.217610      0.217610       236.725       236.942    
   9  0.488379     -0.716663      -1.07819       1.07819       238.614       239.692    
  10  0.200096      -1.60896      -2.42062       2.42062       236.044       238.464    
  11  0.337191      -1.08710      -1.63551       1.63551       244.202       245.837    
  12  0.483996E-01  -3.02826      -4.55591       4.55591       244.286       248.842    
  13  0.159942      -1.83295      -2.75760       2.75760       243.574       246.331    
  14  0.789831     -0.235936     -0.354957      0.354957       244.829       245.184    
  15  0.381325     -0.964105      -1.45046       1.45046       245.655       247.105    
  16  0.368149     -0.999267      -1.50336       1.50336       246.469       247.972    
  17  0.762585     -0.271042     -0.407772      0.407772       246.707       247.115    
  18  0.790018     -0.235700     -0.354602      0.354602       248.986       249.340    
  19  0.156980      -1.85163      -2.78571       2.78571       250.929       253.714    
  20  0.579774     -0.545116     -0.820106      0.820106       249.047       249.867    
  21  0.906727     -0.979137E-01 -0.147307      0.147307       249.595       249.743    
  22  0.210301      -1.55922      -2.34578       2.34578       251.965       254.311    
  23  0.752685     -0.284108     -0.427430      0.427430       250.450       250.878    
  24  0.162798E-01  -4.11783      -6.19512       6.19512       244.750       250.946    
  25  0.451422     -0.795354      -1.19658       1.19658       252.789       253.986    
  26  0.545943     -0.605240     -0.910561      0.910561       252.500       253.411    
  27  0.264638      -1.32939      -2.00002       2.00002       251.409       253.409    
  28  0.763507     -0.269833     -0.405954      0.405954       251.225       251.631    
  29  0.325754      -1.12161      -1.68742       1.68742       250.480       252.168    
  30  0.166837      -1.79074      -2.69410       2.69410       252.214       254.908    
  31  0.316780      -1.14955      -1.72945       1.72945       252.144       253.873    
  32  0.837666     -0.177136     -0.266494      0.266494       254.341       254.608    
  33  0.524790     -0.644757     -0.970012      0.970012       252.588       253.558    
  34  0.857916     -0.153249     -0.230558      0.230558       255.115       255.346    
  35  0.326689      -1.11875      -1.68311       1.68311       252.943       254.626    
  36  0.822390E-01  -2.49813      -3.75833       3.75833       253.891       257.649    
  37  0.686804     -0.375706     -0.565236      0.565236       256.866       257.431    
  38  0.964837     -0.357963E-01 -0.538541E-01  0.538541E-01   253.443       253.497    
  39  0.403522     -0.907524      -1.36534       1.36534       258.199       259.564    
  40  0.907874     -0.966498E-01 -0.145406      0.145406       256.554       256.699    
  41  0.112705      -2.18298      -3.28421       3.28421       257.630       260.914    
  42  0.820851     -0.197414     -0.297002      0.297002       259.496       259.793    
  43  0.858032     -0.153114     -0.230354      0.230354       260.314       260.545    
  44  0.276820      -1.28439      -1.93231       1.93231       261.877       263.809    
  45  0.449277     -0.800116      -1.20374       1.20374       262.855       264.059    
  46  0.320311      -1.13846      -1.71277       1.71277       262.350       264.063    
  47  0.972239     -0.281531E-01 -0.423553E-01  0.423553E-01   264.341       264.383    
  48  0.188436      -1.66899      -2.51094       2.51094       264.230       266.741    
  49  0.909331E-01  -2.39763      -3.60714       3.60714       264.524       268.131    
  50  0.807786     -0.213458     -0.321140      0.321140       262.297       262.618    
  51  0.646184     -0.436671     -0.656954      0.656954       265.290       265.947    
  52  0.202485      -1.59709      -2.40276       2.40276       267.399       269.802    
  53  0.394970     -0.928945      -1.39756       1.39756       259.374       260.772    
  54  0.375932     -0.978347      -1.47189       1.47189       268.366       269.838    
  55  0.166898      -1.79037      -2.69355       2.69355       267.993       270.686    
  56  0.337985      -1.08475      -1.63197       1.63197       268.603       270.235    
  57  0.121225      -2.11011      -3.17458       3.17458       269.398       272.573    
  58  0.133255      -2.01549      -3.03222       3.03222       270.367       273.399    
  59  0.479950     -0.734073      -1.10438       1.10438       268.027       269.131    
  60  0.803784     -0.218424     -0.328611      0.328611       270.221       270.550    
  61  0.368545     -0.998193      -1.50174       1.50174       269.526       271.028    
  62  0.425620     -0.854209      -1.28512       1.28512       272.126       273.411    
  63  0.295623      -1.21867      -1.83344       1.83344       268.070       269.903    
  64  0.877735     -0.130411     -0.196198      0.196198       273.293       273.489    
loop,thermsimp(1:2)        9  0.816175       1.66178    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    487        275.41          0.88          1.09         23.12          0.04          0.05         25.18
Just calling func    0   0         25.18


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    488        247.93          0.87          1.09         23.12          0.00          0.05         25.12
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3    247.93
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.50446               505
loop is:        9
neval is:      487
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        9      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    1.50446               505
loop is:       10
neval is:      487


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      505
neval,tstepnext:      487     505

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.822534     -0.195365     -0.293919      0.293919       231.316       231.610    
   2  0.782240     -0.245594     -0.369487      0.369487       233.369       233.738    
   3  0.322553      -1.13149      -1.70228       1.70228       232.423       234.125    
   4  0.467356     -0.760663      -1.14439       1.14439       232.714       233.858    
   5  0.147968      -1.91076      -2.87466       2.87466       233.251       236.126    
   6  0.159889E-01  -4.13586      -6.22224       6.22224       234.623       240.845    
   7  0.562204     -0.575890     -0.866404      0.866404       235.287       236.154    
   8  0.299682      -1.20503      -1.81293       1.81293       236.725       238.538    
   9  0.859889     -0.150952     -0.227101      0.227101       236.044       236.271    
  10  0.587202     -0.532386     -0.800954      0.800954       238.614       239.415    
  11  0.815775     -0.203617     -0.306334      0.306334       244.829       245.135    
  12  0.480689     -0.732535      -1.10207       1.10207       244.202       245.304    
  13  0.183971      -1.69298      -2.54702       2.54702       243.574       246.121    
  14  0.541519     -0.613376     -0.922801      0.922801       245.655       246.578    
  15  0.731234     -0.313022     -0.470929      0.470929       246.707       247.178    
  16  0.174833      -1.74393      -2.62367       2.62367       246.469       249.092    
  17  0.922070     -0.811342E-01 -0.122063      0.122063       244.286       244.408    
  18  0.599606     -0.511483     -0.769506      0.769506       248.986       249.755    
  19  0.215130      -1.53651      -2.31163       2.31163       249.595       251.907    
  20  0.810923     -0.209582     -0.315308      0.315308       249.047       249.362    
  21  0.210280E-01  -3.86190      -5.81008       5.81008       250.450       256.261    
  22  0.346591      -1.05961      -1.59414       1.59414       244.750       246.345    
  23  0.110159      -2.20583      -3.31859       3.31859       251.225       254.544    
  24  0.987995     -0.120772E-01 -0.181696E-01  0.181696E-01   250.480       250.499    
  25  0.195218      -1.63364      -2.45775       2.45775       251.409       253.867    
  26  0.863860     -0.146344     -0.220170      0.220170       252.500       252.720    
  27  0.326895      -1.11811      -1.68216       1.68216       253.443       255.126    
  28  0.285040E-01  -3.55771      -5.35244       5.35244       252.588       257.941    
  29  0.203591      -1.59164      -2.39457       2.39457       250.929       253.323    
  30  0.371555     -0.990059      -1.48951       1.48951       252.144       253.633    
  31  0.478997     -0.736061      -1.10738       1.10738       252.789       253.897    
  32  0.619653     -0.478595     -0.720028      0.720028       251.965       252.685    
  33  0.196259      -1.62832      -2.44974       2.44974       254.341       256.791    
  34  0.983500     -0.166377E-01 -0.250308E-01  0.250308E-01   252.943       252.968    
  35  0.694342     -0.364791     -0.548814      0.548814       252.214       252.762    
  36  0.901452     -0.103749     -0.156086      0.156086       255.115       255.271    
  37  0.850762     -0.161623     -0.243156      0.243156       256.554       256.797    
  38  0.837702     -0.177093     -0.266429      0.266429       256.866       257.132    
  39  0.632938     -0.457383     -0.688115      0.688115       253.891       254.579    
  40  0.320271      -1.13859      -1.71296       1.71296       258.199       259.912    
  41  0.851600     -0.160638     -0.241674      0.241674       259.496       259.738    
  42  0.238024      -1.43538      -2.15948       2.15948       260.314       262.474    
  43  0.987040     -0.130443E-01 -0.196246E-01  0.196246E-01   259.374       259.394    
  44  0.901910     -0.103240     -0.155321      0.155321       257.630       257.785    
  45  0.124783      -2.08118      -3.13106       3.13106       262.297       265.428    
  46  0.564722     -0.571423     -0.859683      0.859683       261.877       262.736    
  47  0.106695E-01  -4.54036      -6.83080       6.83080       262.855       269.686    
  48  0.517678     -0.658402     -0.990540      0.990540       262.350       263.341    
  49  0.791575     -0.233731     -0.351639      0.351639       264.341       264.692    
  50  0.340717      -1.07670      -1.61986       1.61986       265.290       266.910    
  51  0.250573      -1.38401      -2.08218       2.08218       264.230       266.312    
  52  0.433347     -0.836218      -1.25806       1.25806       264.524       265.782    
  53  0.246778      -1.39927      -2.10514       2.10514       268.027       270.132    
  54  0.946572     -0.549078E-01 -0.826067E-01  0.826067E-01   267.399       267.481    
  55  0.628651     -0.464180     -0.698341      0.698341       268.366       269.064    
  56  0.182475      -1.70114      -2.55931       2.55931       268.070       270.629    
  57  0.477874     -0.738408      -1.11091       1.11091       268.603       269.714    
  58  0.806439     -0.215128     -0.323651      0.323651       270.221       270.545    
  59  0.821508     -0.196614     -0.295798      0.295798       267.993       268.288    
  60  0.610226     -0.493926     -0.743093      0.743093       269.526       270.269    
  61  0.749839     -0.287897     -0.433130      0.433130       269.398       269.831    
  62  0.475139     -0.744148      -1.11954       1.11954       270.367       271.486    
  63  0.190368      -1.65880      -2.49559       2.49559       272.126       274.621    
  64  0.122179      -2.10227      -3.16278       3.16278       247.925       251.088    
loop,thermsimp(1:2)       10  0.293919      0.369487    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    489        230.24          0.88          1.09         23.15          0.11          0.05         25.29
Just calling func    0   0         25.29


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    490        274.06          0.87          1.09         23.16          0.00          0.04         25.15
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    230.24
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.50446               505
loop is:       10
neval is:      489
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       10      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    1.50446               505
loop is:       11
neval is:      489


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      505
neval,tstepnext:      489     505

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.371518     -0.990158      -1.48966       1.48966       231.316       232.805    
   2  0.421352     -0.864286      -1.30029       1.30029       233.369       234.669    
   3  0.733796     -0.309524     -0.465667      0.465667       232.714       233.179    
   4  0.371282     -0.990794      -1.49061       1.49061       232.423       233.914    
   5  0.134163      -2.00870      -3.02202       3.02202       233.251       236.273    
   6  0.449085     -0.800544      -1.20439       1.20439       235.287       236.492    
   7  0.149770      -1.89865      -2.85645       2.85645       236.044       238.900    
   8  0.193351      -1.64325      -2.47220       2.47220       236.725       239.197    
   9  0.484872     -0.723871      -1.08904       1.08904       238.614       239.703    
  10  0.880665E-01  -2.42966      -3.65534       3.65534       234.623       238.278    
  11  0.744885     -0.294526     -0.443103      0.443103       244.286       244.729    
  12  0.342439      -1.07166      -1.61227       1.61227       244.829       246.441    
  13  0.422063     -0.862602      -1.29775       1.29775       244.202       245.500    
  14  0.509795     -0.673746      -1.01363       1.01363       243.574       244.587    
  15  0.968021     -0.325017E-01 -0.488976E-01  0.488976E-01   244.750       244.799    
  16  0.799941     -0.223218     -0.335823      0.335823       245.655       245.991    
  17  0.498769     -0.695612      -1.04652       1.04652       246.707       247.754    
  18  0.142481      -1.94855      -2.93152       2.93152       246.469       249.400    
  19  0.887657     -0.119170     -0.179287      0.179287       249.047       249.226    
  20  0.955972     -0.450263E-01 -0.677404E-01  0.677404E-01   248.986       249.053    
  21  0.226776      -1.48379      -2.23231       2.23231       250.480       252.713    
  22  0.300982      -1.20070      -1.80641       1.80641       247.925       249.732    
  23  0.161728      -1.82184      -2.74089       2.74089       249.595       252.336    
  24  0.650156     -0.430542     -0.647734      0.647734       251.965       252.613    
  25  0.310921E-01  -3.47080      -5.22169       5.22169       252.500       257.722    
  26  0.820549     -0.197781     -0.297554      0.297554       252.214       252.511    
  27  0.949162     -0.521757E-01 -0.784964E-01  0.784964E-01   252.943       253.022    
  28  0.461471     -0.773336      -1.16346       1.16346       250.929       252.092    
  29  0.325925      -1.12109      -1.68663       1.68663       252.144       253.830    
  30  0.251186      -1.38156      -2.07851       2.07851       251.409       253.487    
  31  0.520836     -0.652320     -0.981391      0.981391       252.789       253.771    
  32  0.339093      -1.08148      -1.62705       1.62705       251.225       252.852    
  33  0.876178     -0.132186     -0.198869      0.198869       253.891       254.090    
  34  0.664406     -0.408862     -0.615117      0.615117       253.443       254.059    
  35  0.415159     -0.879094      -1.32256       1.32256       255.115       256.438    
  36  0.733952     -0.309312     -0.465348      0.465348       250.450       250.916    
  37  0.475133     -0.744161      -1.11956       1.11956       254.341       255.461    
  38  0.361789      -1.01670      -1.52958       1.52958       256.554       258.083    
  39  0.111891      -2.19023      -3.29512       3.29512       256.866       260.161    
  40  0.123346      -2.09276      -3.14848       3.14848       257.630       260.778    
  41  0.282401      -1.26443      -1.90228       1.90228       252.588       254.491    
  42  0.397590     -0.922334      -1.38762       1.38762       259.374       260.762    
  43  0.123972      -2.08770      -3.14086       3.14086       259.496       262.637    
  44  0.830800     -0.185367     -0.278877      0.278877       258.199       258.477    
  45  0.743291     -0.296668     -0.446326      0.446326       260.314       260.761    
  46  0.569177     -0.563564     -0.847860      0.847860       261.877       262.724    
  47  0.333222      -1.09895      -1.65332       1.65332       262.350       264.004    
  48  0.748913     -0.289132     -0.434989      0.434989       264.341       264.776    
  49  0.552776E-01  -2.89539      -4.35600       4.35600       262.297       266.653    
  50  0.204981      -1.58484      -2.38433       2.38433       264.524       266.908    
  51  0.317642      -1.14683      -1.72536       1.72536       264.230       265.955    
  52  0.194743      -1.63607      -2.46141       2.46141       265.290       267.752    
  53  0.796100     -0.228030     -0.343062      0.343062       267.399       267.742    
  54  0.331225      -1.10496      -1.66237       1.66237       267.993       269.655    
  55  0.441129     -0.818417      -1.23128       1.23128       268.366       269.597    
  56  0.492658     -0.707940      -1.06507       1.06507       262.855       263.920    
  57  0.111182      -2.19659      -3.30468       3.30468       268.603       271.908    
  58  0.375486     -0.979534      -1.47367       1.47367       269.398       270.872    
  59  0.618801     -0.479971     -0.722098      0.722098       268.027       268.749    
  60  0.353960E-01  -3.34116      -5.02664       5.02664       269.526       274.553    
  61  0.613837     -0.488027     -0.734217      0.734217       270.221       270.955    
  62  0.502104     -0.688948      -1.03650       1.03650       268.070       269.106    
  63  0.708340     -0.344831     -0.518785      0.518785       270.367       270.885    
  64  0.761556     -0.272392     -0.409803      0.409803       230.239       230.649    
loop,thermsimp(1:2)       11   1.48966       1.30029    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    491        274.20          0.87          1.09         23.11          0.04          0.04         25.15
Just calling func    0   0         25.15


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    492        254.03          0.88          1.09         23.16          0.00          0.05         25.19
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3    254.03
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.50446               505
loop is:       11
neval is:      491
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       11      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    1.50446               505
loop is:       12
neval is:      491


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      505
neval,tstepnext:      491     505

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.932268     -0.701345E-01 -0.105515      0.105515       230.239       230.344    
   2  0.331032      -1.10554      -1.66324       1.66324       231.316       232.979    
   3  0.694616     -0.364396     -0.548219      0.548219       232.714       233.262    
   4  0.993646     -0.637431E-02 -0.958991E-02  0.958991E-02   232.423       232.433    
   5  0.400856E-01  -3.21674      -4.83946       4.83946       233.369       238.208    
   6  0.633880     -0.455896     -0.685878      0.685878       233.251       233.937    
   7  0.601200E-01  -2.81141      -4.22966       4.22966       235.287       239.517    
   8  0.649180     -0.432045     -0.649996      0.649996       234.623       235.273    
   9  0.870844E-01  -2.44088      -3.67221       3.67221       236.044       239.716    
  10  0.735510     -0.307191     -0.462157      0.462157       236.725       237.187    
  11  0.359321      -1.02354      -1.53988       1.53988       238.614       240.154    
  12  0.497555     -0.698048      -1.05019       1.05019       243.574       244.624    
  13  0.686901E-01  -2.67815      -4.02918       4.02918       244.286       248.315    
  14  0.906387     -0.982893E-01 -0.147873      0.147873       244.750       244.898    
  15  0.380970     -0.965035      -1.45186       1.45186       244.202       245.654    
  16  0.604774     -0.502900     -0.756594      0.756594       245.655       246.412    
  17  0.377061     -0.975348      -1.46737       1.46737       244.829       246.297    
  18  0.788907     -0.237107     -0.356718      0.356718       246.707       247.064    
  19  0.741706     -0.298802     -0.449536      0.449536       248.986       249.435    
  20  0.395286     -0.928145      -1.39636       1.39636       249.047       250.443    
  21  0.553847     -0.590867     -0.888937      0.888937       246.469       247.358    
  22  0.592268E-01  -2.82638      -4.25218       4.25218       247.925       252.178    
  23  0.667112     -0.404798     -0.609003      0.609003       250.450       251.059    
  24  0.544627     -0.607655     -0.914193      0.914193       250.929       251.843    
  25  0.438918     -0.823442      -1.23884       1.23884       249.595       250.834    
  26  0.748682     -0.289441     -0.435453      0.435453       252.214       252.649    
  27  0.457742     -0.781450      -1.17566       1.17566       251.965       253.140    
  28  0.917499     -0.861039E-01 -0.129540      0.129540       250.480       250.610    
  29  0.711098     -0.340945     -0.512938      0.512938       251.225       251.738    
  30  0.936268     -0.658531E-01 -0.990735E-01  0.990735E-01   252.943       253.042    
  31  0.677691     -0.389064     -0.585332      0.585332       251.409       251.994    
  32  0.154144      -1.86987      -2.81315       2.81315       252.789       255.603    
  33  0.375603     -0.979224      -1.47320       1.47320       252.144       253.617    
  34  0.470785     -0.753353      -1.13339       1.13339       253.443       254.577    
  35  0.306223E-01  -3.48603      -5.24459       5.24459       253.891       259.136    
  36  0.320903      -1.13662      -1.71000       1.71000       252.588       254.298    
  37  0.721169     -0.326882     -0.491781      0.491781       254.341       254.833    
  38  0.235217      -1.44725      -2.17733       2.17733       255.115       257.292    
  39  0.172480      -1.75747      -2.64405       2.64405       252.500       255.144    
  40  0.617596     -0.481920     -0.725031      0.725031       256.554       257.279    
  41  0.661285     -0.413571     -0.622202      0.622202       258.199       258.821    
  42  0.298445      -1.20917      -1.81915       1.81915       256.866       258.685    
  43  0.569437     -0.563107     -0.847173      0.847173       260.314       261.161    
  44  0.394309     -0.930621      -1.40008       1.40008       259.374       260.774    
  45  0.350094      -1.04955      -1.57901       1.57901       257.630       259.209    
  46  0.231248      -1.46427      -2.20293       2.20293       259.496       261.699    
  47  0.866839     -0.142902     -0.214990      0.214990       261.877       262.092    
  48  0.867322     -0.142344     -0.214152      0.214152       262.855       263.069    
  49  0.116953      -2.14598      -3.22855       3.22855       262.350       265.579    
  50  0.773417E-01  -2.55952      -3.85070       3.85070       264.341       268.191    
  51  0.200416      -1.60736      -2.41821       2.41821       264.230       266.648    
  52  0.354953      -1.03577      -1.55828       1.55828       262.297       263.856    
  53  0.294228      -1.22340      -1.84056       1.84056       264.524       266.365    
  54  0.763773     -0.269485     -0.405430      0.405430       267.399       267.804    
  55  0.206070      -1.57954      -2.37636       2.37636       265.290       267.667    
  56  0.565032     -0.570873     -0.858857      0.858857       268.027       268.886    
  57  0.422490     -0.861588      -1.29623       1.29623       268.070       269.366    
  58  0.651799     -0.428019     -0.643938      0.643938       268.366       269.010    
  59  0.551665     -0.594815     -0.894876      0.894876       267.993       268.887    
  60  0.936970     -0.651037E-01 -0.979460E-01  0.979460E-01   269.398       269.496    
  61  0.682795     -0.381560     -0.574043      0.574043       270.367       270.941    
  62  0.291507      -1.23269      -1.85454       1.85454       270.221       272.076    
  63  0.269021      -1.31297      -1.97531       1.97531       268.603       270.579    
  64  0.521423     -0.651194     -0.979696      0.979696       254.031       255.011    
loop,thermsimp(1:2)       12  0.105515       1.66324    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    493        225.80          0.88          1.09         23.06          0.08          0.05         25.16
Just calling func    0   0         25.17


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    494        229.55          0.88          1.11         23.09          0.03          0.04         25.15
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    225.80
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.50446               505
loop is:       12
neval is:      493
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       12      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    1.50446               505
loop is:       13
neval is:      493


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      505
neval,tstepnext:      493     505

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.922982E-01  -2.38273      -3.58473       3.58473       230.239       233.824    
   2  0.398313     -0.920518      -1.38488       1.38488       232.423       233.808    
   3  0.966781     -0.337829E-01 -0.508252E-01  0.508252E-01   231.316       231.367    
   4  0.834786     -0.180580     -0.271675      0.271675       232.714       232.985    
   5  0.897933     -0.107659     -0.161970      0.161970       233.251       233.413    
   6  0.754433     -0.281789     -0.423941      0.423941       234.623       235.047    
   7  0.365110      -1.00756      -1.51583       1.51583       236.725       238.241    
   8  0.153021      -1.87718      -2.82414       2.82414       233.369       236.193    
   9  0.269185      -1.31236      -1.97439       1.97439       235.287       237.262    
  10  0.343604      -1.06826      -1.60716       1.60716       236.044       237.651    
  11  0.834195E-01  -2.48387      -3.73689       3.73689       238.614       242.351    
  12  0.868931     -0.140491     -0.211364      0.211364       243.574       243.785    
  13  0.939794     -0.620944E-01 -0.934187E-01  0.934187E-01   244.750       244.844    
  14  0.618916     -0.479786     -0.721820      0.721820       244.202       244.924    
  15  0.486928     -0.719639      -1.08267       1.08267       244.829       245.912    
  16  0.573604     -0.555816     -0.836204      0.836204       245.655       246.491    
  17  0.172906      -1.75501      -2.64034       2.64034       246.707       249.348    
  18  0.100972      -2.29292      -3.44961       3.44961       246.469       249.918    
  19  0.152456      -1.88088      -2.82971       2.82971       244.286       247.115    
  20  0.663894     -0.409632     -0.616276      0.616276       248.986       249.602    
  21  0.529041     -0.636690     -0.957876      0.957876       249.047       250.004    
  22  0.388461     -0.945563      -1.42256       1.42256       250.480       251.903    
  23  0.785741     -0.241128     -0.362768      0.362768       249.595       249.958    
  24  0.620307     -0.477541     -0.718442      0.718442       250.450       251.169    
  25  0.948673     -0.526914E-01 -0.792723E-01  0.792723E-01   251.225       251.304    
  26  0.173123      -1.75375      -2.63846       2.63846       250.929       253.567    
  27  0.663060     -0.410890     -0.618168      0.618168       251.409       252.027    
  28  0.552682     -0.592972     -0.892103      0.892103       247.925       248.818    
  29  0.911932     -0.921901E-01 -0.138696      0.138696       252.214       252.352    
  30  0.587146     -0.532481     -0.801098      0.801098       252.943       253.744    
  31  0.620861     -0.476649     -0.717100      0.717100       251.965       252.682    
  32  0.757598     -0.277603     -0.417643      0.417643       252.144       252.561    
  33  0.970125     -0.303301E-01 -0.456305E-01  0.456305E-01   252.588       252.634    
  34  0.934482     -0.677634E-01 -0.101947      0.101947       253.443       253.545    
  35  0.455429     -0.786516      -1.18328       1.18328       254.341       255.524    
  36  0.489437     -0.714499      -1.07494       1.07494       254.031       255.106    
  37  0.462744E-01  -3.07317      -4.62346       4.62346       252.500       257.124    
  38  0.343684      -1.06803      -1.60682       1.60682       252.789       254.396    
  39  0.263559      -1.33348      -2.00617       2.00617       256.554       258.560    
  40  0.195654      -1.63141      -2.45439       2.45439       255.115       257.570    
  41  0.762134     -0.271632     -0.408661      0.408661       256.866       257.275    
  42  0.385726     -0.952629      -1.43319       1.43319       258.199       259.632    
  43  0.970876     -0.295568E-01 -0.444671E-01  0.444671E-01   253.891       253.936    
  44  0.517601     -0.658550     -0.990764      0.990764       257.630       258.621    
  45  0.587593E-01  -2.83431      -4.26411       4.26411       259.374       263.638    
  46  0.465074     -0.765558      -1.15175       1.15175       260.314       261.466    
  47  0.609046     -0.495862     -0.746006      0.746006       259.496       260.242    
  48  0.251442      -1.38054      -2.07697       2.07697       261.877       263.954    
  49  0.555227     -0.588378     -0.885193      0.885193       262.855       263.740    
  50  0.811667     -0.208665     -0.313929      0.313929       262.297       262.611    
  51  0.193982      -1.63999      -2.46730       2.46730       262.350       264.818    
  52  0.590323     -0.527086     -0.792981      0.792981       264.524       265.317    
  53  0.169066      -1.77747      -2.67413       2.67413       264.230       266.904    
  54  0.637698     -0.449890     -0.676843      0.676843       265.290       265.967    
  55  0.675306     -0.392589     -0.590635      0.590635       267.399       267.990    
  56  0.433825     -0.835114      -1.25640       1.25640       264.341       265.597    
  57  0.464562     -0.766661      -1.15341       1.15341       268.027       269.180    
  58  0.199196      -1.61347      -2.42740       2.42740       267.993       270.420    
  59  0.700862     -0.355444     -0.534752      0.534752       268.366       268.900    
  60  0.941210     -0.605890E-01 -0.911538E-01  0.911538E-01   268.070       268.161    
  61  0.576048     -0.551564     -0.829807      0.829807       269.398       270.228    
  62  0.160958      -1.82661      -2.74806       2.74806       268.603       271.351    
  63  0.380701     -0.965741      -1.45292       1.45292       270.367       271.819    
  64  0.979990     -0.202132E-01 -0.304100E-01  0.304100E-01   225.796       225.826    
loop,thermsimp(1:2)       13   3.58473       1.38488    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    495        260.14          0.88          1.09         23.15          0.20          0.05         25.37
Just calling func    0   0         25.37


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    260.14
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.50446               505
loop is:       13
neval is:      494
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       13      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    1.50446               505
loop is:       14
neval is:      494


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      505
neval,tstepnext:      494     505

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.599112     -0.512306     -0.770745      0.770745       225.796       226.567    
   2  0.185288      -1.68584      -2.53629       2.53629       231.316       233.852    
   3  0.279580      -1.27447      -1.91739       1.91739       232.714       234.631    
   4  0.475871     -0.742608      -1.11722       1.11722       233.251       234.368    
   5  0.983460     -0.166786E-01 -0.250924E-01  0.250924E-01   232.423       232.448    
   6  0.969959     -0.305019E-01 -0.458889E-01  0.458889E-01   230.239       230.285    
   7  0.415873     -0.877376      -1.31998       1.31998       234.623       235.943    
   8  0.843097     -0.170673     -0.256771      0.256771       233.369       233.625    
   9  0.103621      -2.26701      -3.41063       3.41063       235.287       238.698    
  10  0.827012     -0.189936     -0.285752      0.285752       236.044       236.329    
  11  0.713709     -0.337280     -0.507425      0.507425       236.725       237.232    
  12  0.757171     -0.278166     -0.418491      0.418491       238.614       239.033    
  13  0.682415     -0.382118     -0.574882      0.574882       243.574       244.148    
  14  0.169850      -1.77284      -2.66717       2.66717       244.750       247.418    
  15  0.137912      -1.98114      -2.98055       2.98055       244.202       247.182    
  16  0.119797      -2.12195      -3.19240       3.19240       244.829       248.022    
  17  0.922340     -0.808412E-01 -0.121622      0.121622       245.655       245.777    
  18  0.840095     -0.174240     -0.262137      0.262137       244.286       244.548    
  19  0.676264     -0.391172     -0.588504      0.588504       247.925       248.514    
  20  0.191981      -1.65036      -2.48290       2.48290       246.707       249.190    
  21  0.528247     -0.638192     -0.960135      0.960135       248.986       249.946    
  22  0.450794     -0.796745      -1.19867       1.19867       246.469       247.667    
  23  0.808149     -0.213009     -0.320464      0.320464       249.595       249.916    
  24  0.179092      -1.71986      -2.58746       2.58746       249.047       251.634    
  25  0.728727     -0.316456     -0.476096      0.476096       250.450       250.927    
  26  0.719748     -0.328854     -0.494748      0.494748       251.225       251.720    
  27  0.357902      -1.02750      -1.54583       1.54583       250.480       252.026    
  28  0.665239     -0.407609     -0.613233      0.613233       251.409       252.022    
  29  0.338401      -1.08352      -1.63012       1.63012       252.214       253.844    
  30  0.455504     -0.786351      -1.18303       1.18303       252.144       253.327    
  31  0.422358E-01  -3.16449      -4.76085       4.76085       252.588       257.349    
  32  0.162108      -1.81949      -2.73736       2.73736       251.965       254.702    
  33  0.896138     -0.109661     -0.164981      0.164981       253.443       253.608    
  34  0.980701E-01  -2.32207      -3.49347       3.49347       250.929       254.422    
  35  0.950264     -0.510154E-01 -0.767508E-01  0.767508E-01   252.943       253.020    
  36  0.122991      -2.09565      -3.15282       3.15282       253.891       257.044    
  37  0.718373     -0.330767     -0.497626      0.497626       252.789       253.287    
  38  0.296907      -1.21434      -1.82692       1.82692       254.031       255.858    
  39  0.708585     -0.344486     -0.518266      0.518266       254.341       254.859    
  40  0.261253      -1.34227      -2.01939       2.01939       252.500       254.520    
  41  0.305559      -1.18561      -1.78371       1.78371       256.866       258.650    
  42  0.617226     -0.482519     -0.725932      0.725932       255.115       255.841    
  43  0.493544E-01  -3.00873      -4.52652       4.52652       256.554       261.080    
  44  0.225264      -1.49048      -2.24237       2.24237       257.630       259.872    
  45  0.131490      -2.02883      -3.05229       3.05229       258.199       261.251    
  46  0.850946     -0.161406     -0.242830      0.242830       259.496       259.739    
  47  0.237517      -1.43751      -2.16269       2.16269       260.314       262.477    
  48  0.302781      -1.19475      -1.79745       1.79745       262.297       264.095    
  49  0.205804      -1.58083      -2.37830       2.37830       259.374       261.752    
  50  0.420670     -0.865907      -1.30272       1.30272       262.855       264.158    
  51  0.494045     -0.705128      -1.06084       1.06084       261.877       262.937    
  52  0.874250     -0.134389     -0.202183      0.202183       262.350       262.553    
  53  0.596327     -0.516965     -0.777755      0.777755       264.524       265.302    
  54  0.536687     -0.622341     -0.936288      0.936288       264.341       265.277    
  55  0.517547     -0.658655     -0.990922      0.990922       265.290       266.281    
  56  0.381486     -0.963681      -1.44982       1.44982       264.230       265.680    
  57  0.298557      -1.20879      -1.81858       1.81858       267.399       269.217    
  58  0.842903     -0.170904     -0.257118      0.257118       268.070       268.327    
  59  0.722129     -0.325551     -0.489780      0.489780       268.366       268.855    
  60  0.506448     -0.680334      -1.02354       1.02354       268.027       269.050    
  61  0.180643      -1.71123      -2.57449       2.57449       269.398       271.973    
  62  0.497794     -0.697568      -1.04946       1.04946       267.993       269.042    
  63  0.486227     -0.721080      -1.08484       1.08484       268.603       269.688    
  64  0.967082E-01  -2.33606      -3.51451       3.51451       260.136       263.650    
loop,thermsimp(1:2)       14  0.770745       2.53629    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    496        231.96          0.88          1.09         23.14          0.00          0.04         25.16
Just calling func    0   0         25.16


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    231.96
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.50446               505
loop is:       14
neval is:      495
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       14      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    1.50446               505
loop is:       15
neval is:      495


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      505
neval,tstepnext:      495     505

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.420890     -0.865383      -1.30194       1.30194       225.796       227.098    
   2  0.285132      -1.25480      -1.88780       1.88780       230.239       232.127    
   3  0.460665E-01  -3.07767      -4.63024       4.63024       232.423       237.053    
   4  0.971233     -0.291885E-01 -0.439129E-01  0.439129E-01   233.369       233.413    
   5  0.600439E-01  -2.81268      -4.23157       4.23157       231.316       235.547    
   6  0.952970     -0.481718E-01 -0.724727E-01  0.724727E-01   233.251       233.323    
   7  0.416605     -0.875617      -1.31733       1.31733       232.714       234.031    
   8  0.350276      -1.04903      -1.57823       1.57823       234.623       236.201    
   9  0.211258      -1.55467      -2.33895       2.33895       236.044       238.383    
  10  0.268913E-01  -3.61595      -5.44006       5.44006       236.725       242.165    
  11  0.246487      -1.40045      -2.10692       2.10692       235.287       237.394    
  12  0.837295     -0.177579     -0.267160      0.267160       238.614       238.881    
  13  0.343497      -1.06858      -1.60763       1.60763       243.574       245.181    
  14  0.976296     -0.239900E-01 -0.360920E-01  0.360920E-01   244.286       244.322    
  15  0.617570     -0.481963     -0.725095      0.725095       245.655       246.380    
  16  0.599441     -0.511758     -0.769920      0.769920       244.202       244.972    
  17  0.556766     -0.585610     -0.881028      0.881028       244.750       245.631    
  18  0.474984     -0.744475      -1.12003       1.12003       246.469       247.589    
  19  0.608207     -0.497240     -0.748078      0.748078       244.829       245.577    
  20  0.699514     -0.357370     -0.537649      0.537649       247.925       248.463    
  21  0.315591      -1.15331      -1.73511       1.73511       246.707       248.442    
  22  0.626925     -0.466928     -0.702475      0.702475       249.595       250.298    
  23  0.736823     -0.305408     -0.459475      0.459475       248.986       249.445    
  24  0.801749     -0.220960     -0.332426      0.332426       250.450       250.783    
  25  0.128079      -2.05510      -3.09183       3.09183       249.047       252.138    
  26  0.120118      -2.11928      -3.18837       3.18837       251.225       254.413    
  27  0.893214     -0.112929     -0.169897      0.169897       251.409       251.579    
  28  0.522618     -0.648904     -0.976251      0.976251       250.480       251.457    
  29  0.204056      -1.58936      -2.39113       2.39113       252.943       255.335    
  30  0.391878     -0.936804      -1.40939       1.40939       252.789       254.199    
  31  0.627452     -0.466089     -0.701213      0.701213       252.144       252.845    
  32  0.240488      -1.42509      -2.14399       2.14399       253.443       255.587    
  33  0.705929     -0.348241     -0.523915      0.523915       252.214       252.738    
  34  0.491002     -0.711306      -1.07013       1.07013       250.929       251.999    
  35  0.538395     -0.619162     -0.931506      0.931506       252.500       253.432    
  36  0.220833      -1.51035      -2.27226       2.27226       251.965       254.237    
  37  0.133511      -2.01357      -3.02934       3.02934       254.341       257.370    
  38  0.310483      -1.16963      -1.75966       1.75966       255.115       256.875    
  39  0.871017     -0.138093     -0.207756      0.207756       254.031       254.239    
  40  0.802109     -0.220510     -0.331750      0.331750       253.891       254.223    
  41  0.662318     -0.412009     -0.619852      0.619852       252.588       253.208    
  42  0.214000      -1.54178      -2.31955       2.31955       256.866       259.185    
  43  0.514688     -0.664194     -0.999254      0.999254       259.496       260.496    
  44  0.900118     -0.105230     -0.158314      0.158314       257.630       257.788    
  45  0.808205     -0.212939     -0.320359      0.320359       256.554       256.874    
  46  0.354487      -1.03708      -1.56025       1.56025       258.199       259.759    
  47  0.472469     -0.749783      -1.12802       1.12802       259.374       260.502    
  48  0.643540     -0.440770     -0.663122      0.663122       260.314       260.977    
  49  0.276975      -1.28383      -1.93147       1.93147       262.350       264.282    
  50  0.507013     -0.679219      -1.02186       1.02186       261.877       262.898    
  51  0.265033      -1.32790      -1.99778       1.99778       260.136       262.133    
  52  0.713646     -0.337368     -0.507557      0.507557       262.297       262.805    
  53  0.876167     -0.132198     -0.198887      0.198887       262.855       263.054    
  54  0.611182     -0.492360     -0.740737      0.740737       264.341       265.081    
  55  0.842471     -0.171417     -0.257890      0.257890       264.524       264.782    
  56  0.214798      -1.53806      -2.31395       2.31395       264.230       266.544    
  57  0.118222      -2.13519      -3.21231       3.21231       265.290       268.503    
  58  0.707852     -0.345520     -0.519822      0.519822       268.070       268.590    
  59  0.884670     -0.122540     -0.184357      0.184357       268.366       268.550    
  60  0.249760      -1.38725      -2.08707       2.08707       267.993       270.080    
  61  0.638047E-01  -2.75193      -4.14017       4.14017       268.027       272.167    
  62  0.273268      -1.29730      -1.95174       1.95174       267.399       269.351    
  63  0.524194     -0.645893     -0.971721      0.971721       268.603       269.575    
  64  0.520556     -0.652858     -0.982200      0.982200       231.956       232.938    
loop,thermsimp(1:2)       15   1.30194       1.88780    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    497        229.52          0.85          1.09         23.09          0.05          0.04         25.12
Just calling func    0   0         25.12


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    229.52
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.50446               505
loop is:       15
neval is:      496
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       15      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    1.50446               505
loop is:       16
neval is:      496


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      505
neval,tstepnext:      496     505

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.351711      -1.04494      -1.57208       1.57208       225.796       227.368    
   2  0.446554     -0.806196      -1.21289       1.21289       230.239       231.452    
   3  0.499035     -0.695080      -1.04572       1.04572       231.956       233.002    
   4  0.912667     -0.913840E-01 -0.137484      0.137484       233.251       233.388    
   5  0.190815      -1.65645      -2.49207       2.49207       233.369       235.861    
   6  0.580538E-01  -2.84638      -4.28228       4.28228       232.714       236.996    
   7  0.379811     -0.968081      -1.45644       1.45644       231.316       232.772    
   8  0.413317E-01  -3.18613      -4.79340       4.79340       234.623       239.416    
   9  0.656412E-01  -2.72355      -4.09748       4.09748       232.423       236.521    
  10  0.327977      -1.11481      -1.67719       1.67719       235.287       236.965    
  11  0.289775E-01  -3.54124      -5.32765       5.32765       236.044       241.371    
  12  0.906603     -0.980504E-01 -0.147513      0.147513       238.614       238.762    
  13  0.672845     -0.396240     -0.596128      0.596128       236.725       237.321    
  14  0.770685     -0.260476     -0.391876      0.391876       244.286       244.678    
  15  0.858998     -0.151989     -0.228662      0.228662       244.202       244.431    
  16  0.928076     -0.746418E-01 -0.112296      0.112296       243.574       243.686    
  17  0.759965     -0.274484     -0.412950      0.412950       244.829       245.242    
  18  0.370372     -0.993247      -1.49430       1.49430       244.750       246.245    
  19  0.924580     -0.784161E-01 -0.117974      0.117974       245.655       245.773    
  20  0.986760     -0.133287E-01 -0.200526E-01  0.200526E-01   246.469       246.489    
  21  0.391274     -0.938348      -1.41171       1.41171       246.707       248.119    
  22  0.225004      -1.49164      -2.24411       2.24411       247.925       250.170    
  23  0.111834      -2.19074      -3.29589       3.29589       248.986       252.282    
  24  0.772679     -0.257892     -0.387989      0.387989       249.595       249.983    
  25  0.823786     -0.193845     -0.291632      0.291632       250.450       250.742    
  26  0.260636      -1.34463      -2.02295       2.02295       250.480       252.503    
  27  0.231902      -1.46144      -2.19868       2.19868       251.409       253.608    
  28  0.476798     -0.740663      -1.11430       1.11430       250.929       252.043    
  29  0.529578     -0.635676     -0.956350      0.956350       249.047       250.003    
  30  0.502254     -0.688650      -1.03605       1.03605       252.214       253.250    
  31  0.960912     -0.398724E-01 -0.599864E-01  0.599864E-01   252.144       252.204    
  32  0.824704     -0.192731     -0.289957      0.289957       252.588       252.878    
  33  0.947114     -0.543359E-01 -0.817463E-01  0.817463E-01   252.500       252.582    
  34  0.838762     -0.175829     -0.264528      0.264528       252.789       253.054    
  35  0.117179      -2.14405      -3.22565       3.22565       253.891       257.117    
  36  0.124953      -2.07981      -3.12900       3.12900       251.965       255.094    
  37  0.180085E-01  -4.01691      -6.04329       6.04329       254.031       260.074    
  38  0.417258     -0.874050      -1.31497       1.31497       251.225       252.540    
  39  0.658693     -0.417497     -0.628108      0.628108       252.943       253.571    
  40  0.836351     -0.178707     -0.268858      0.268858       253.443       253.712    
  41  0.674746     -0.393418     -0.591883      0.591883       256.554       257.146    
  42  0.600998     -0.509164     -0.766017      0.766017       255.115       255.881    
  43  0.696617     -0.361519     -0.543891      0.543891       254.341       254.885    
  44  0.978384     -0.218530E-01 -0.328770E-01  0.328770E-01   257.630       257.663    
  45  0.210888      -1.55643      -2.34158       2.34158       256.866       259.208    
  46  0.632852E-01  -2.76010      -4.15247       4.15247       258.199       262.351    
  47  0.512852     -0.667767      -1.00463       1.00463       259.496       260.501    
  48  0.611085     -0.492520     -0.740977      0.740977       259.374       260.115    
  49  0.711944     -0.339756     -0.511150      0.511150       260.314       260.825    
  50  0.979549     -0.206627E-01 -0.310863E-01  0.310863E-01   260.136       260.167    
  51  0.779633     -0.248932     -0.374509      0.374509       262.297       262.672    
  52  0.178175      -1.72499      -2.59518       2.59518       261.877       264.472    
  53  0.982869     -0.172793E-01 -0.259961E-01  0.259961E-01   262.855       262.881    
  54  0.688584     -0.373118     -0.561342      0.561342       262.350       262.912    
  55  0.176989      -1.73167      -2.60523       2.60523       264.524       267.129    
  56  0.417020     -0.874622      -1.31584       1.31584       264.341       265.656    
  57  0.479439     -0.735138      -1.10599       1.10599       264.230       265.336    
  58  0.372078     -0.988653      -1.48739       1.48739       265.290       266.778    
  59  0.185194E-01  -3.98894      -6.00120       6.00120       268.366       274.367    
  60  0.519177     -0.655511     -0.986192      0.986192       268.070       269.056    
  61  0.658703     -0.417482     -0.628086      0.628086       267.399       268.027    
  62  0.741984     -0.298428     -0.448973      0.448973       268.603       269.052    
  63  0.419599     -0.868456      -1.30656       1.30656       267.993       269.299    
  64  0.197091      -1.62409      -2.44338       2.44338       229.521       231.965    
loop,thermsimp(1:2)       16   1.57208       1.21289    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    498        231.34          0.88          1.09         23.18          0.00          0.04         25.20
Just calling func    0   0         25.19


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    231.34
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.50446               505
loop is:       16
neval is:      497
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       16      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    1.50446               505
loop is:       17
neval is:      497


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      505
neval,tstepnext:      497     505

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.868687     -0.140773     -0.211787      0.211787       225.796       226.008    
   2  0.622683     -0.473718     -0.712691      0.712691       230.239       230.952    
   3  0.651914     -0.427842     -0.643672      0.643672       229.521       230.165    
   4  0.553842     -0.590876     -0.888950      0.888950       231.316       232.205    
   5  0.337973      -1.08479      -1.63203       1.63203       231.956       233.588    
   6  0.242640      -1.41618      -2.13058       2.13058       233.251       235.381    
   7  0.609172     -0.495655     -0.745694      0.745694       233.369       234.114    
   8  0.338499      -1.08323      -1.62968       1.62968       232.423       234.053    
   9  0.118472      -2.13308      -3.20913       3.20913       235.287       238.497    
  10  0.605491     -0.501716     -0.754813      0.754813       232.714       233.469    
  11  0.497482E-01  -3.00078      -4.51456       4.51456       236.725       241.239    
  12  0.347530      -1.05691      -1.59007       1.59007       238.614       240.204    
  13  0.414309E-01  -3.18373      -4.78980       4.78980       234.623       239.413    
  14  0.110553      -2.20226      -3.31321       3.31321       236.044       239.357    
  15  0.307437      -1.17948      -1.77449       1.77449       243.574       245.348    
  16  0.281641      -1.26712      -1.90634       1.90634       244.202       246.108    
  17  0.427972     -0.848697      -1.27683       1.27683       244.286       245.563    
  18  0.496057     -0.701064      -1.05472       1.05472       244.829       245.884    
  19  0.907084     -0.975199E-01 -0.146715      0.146715       245.655       245.802    
  20  0.592111     -0.524061     -0.788429      0.788429       244.750       245.539    
  21  0.826994     -0.189958     -0.285785      0.285785       246.469       246.754    
  22  0.279030      -1.27644      -1.92035       1.92035       246.707       248.628    
  23  0.654717     -0.423553     -0.637219      0.637219       249.595       250.233    
  24  0.796995     -0.226907     -0.341373      0.341373       249.047       249.388    
  25  0.654627E-01  -2.72627      -4.10158       4.10158       247.925       252.027    
  26  0.924427     -0.785809E-01 -0.118222      0.118222       250.450       250.569    
  27  0.298307      -1.20963      -1.81985       1.81985       250.929       252.749    
  28  0.944398     -0.572079E-01 -0.860670E-01  0.860670E-01   252.144       252.230    
  29  0.798146     -0.225464     -0.339202      0.339202       248.986       249.325    
  30  0.304773      -1.18819      -1.78758       1.78758       250.480       252.268    
  31  0.938512E-01  -2.36604      -3.55962       3.55962       251.225       254.785    
  32  0.483033     -0.727670      -1.09475       1.09475       252.500       253.595    
  33  0.761373     -0.272632     -0.410165      0.410165       252.588       252.998    
  34  0.122125      -2.10271      -3.16345       3.16345       252.789       255.953    
  35  0.704283     -0.350575     -0.527427      0.527427       252.214       252.741    
  36  0.907284     -0.972998E-01 -0.146384      0.146384       252.943       253.090    
  37  0.314579      -1.15652      -1.73994       1.73994       251.409       253.149    
  38  0.909859     -0.944657E-01 -0.142120      0.142120       253.443       253.586    
  39  0.386535     -0.950533      -1.43004       1.43004       254.341       255.771    
  40  0.891371     -0.114994     -0.173004      0.173004       251.965       252.138    
  41  0.144567      -1.93401      -2.90964       2.90964       255.115       258.025    
  42  0.344336E-01  -3.36872      -5.06811       5.06811       253.891       258.959    
  43  0.881575     -0.126045     -0.189630      0.189630       256.554       256.743    
  44  0.739451     -0.301847     -0.454118      0.454118       257.630       258.084    
  45  0.928626     -0.740488E-01 -0.111404      0.111404       256.866       256.977    
  46  0.382928     -0.959908      -1.44414       1.44414       254.031       255.475    
  47  0.556888     -0.585391     -0.880699      0.880699       259.374       260.255    
  48  0.479341     -0.735343      -1.10630       1.10630       260.136       261.242    
  49  0.592914     -0.522706     -0.786391      0.786391       259.496       260.283    
  50  0.647965     -0.433919     -0.652814      0.652814       260.314       260.967    
  51  0.178104      -1.72539      -2.59578       2.59578       258.199       260.794    
  52  0.357680      -1.02812      -1.54676       1.54676       262.297       263.844    
  53  0.685413     -0.377734     -0.568286      0.568286       262.855       263.423    
  54  0.955579     -0.454379E-01 -0.683596E-01  0.683596E-01   262.350       262.419    
  55  0.924596     -0.783987E-01 -0.117948      0.117948       261.877       261.994    
  56  0.370610     -0.992604      -1.49334       1.49334       264.230       265.723    
  57  0.243342      -1.41329      -2.12624       2.12624       264.341       266.467    
  58  0.639259     -0.447445     -0.673164      0.673164       265.290       265.963    
  59  0.615535     -0.485264     -0.730061      0.730061       264.524       265.254    
  60  0.550510     -0.596910     -0.898029      0.898029       267.399       268.297    
  61  0.137118      -1.98691      -2.98924       2.98924       268.603       271.592    
  62  0.496584     -0.700002      -1.05313       1.05313       268.070       269.123    
  63  0.273355E-02  -5.90215      -8.87956       8.87956       267.993       276.872    
  64  0.702384     -0.353275     -0.531489      0.531489       231.342       231.873    
loop,thermsimp(1:2)       17  0.211787      0.712691    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    499        227.99          0.88          1.09         23.20          0.00          0.04         25.21
Just calling func    0   0         25.21


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    227.99
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.50446               505
loop is:       17
neval is:      498
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       17      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    1.50446               505
loop is:       18
neval is:      498


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      505
neval,tstepnext:      498     505

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.472884     -0.748904      -1.12670       1.12670       225.796       226.922    
   2  0.675464     -0.392355     -0.590284      0.590284       229.521       230.111    
   3  0.958431     -0.424575E-01 -0.638757E-01  0.638757E-01   230.239       230.303    
   4  0.721093     -0.326988     -0.491940      0.491940       231.342       231.834    
   5  0.635520     -0.453311     -0.681989      0.681989       231.316       231.998    
   6  0.738192     -0.303552     -0.456682      0.456682       232.714       233.170    
   7  0.504943     -0.683310      -1.02801       1.02801       231.956       232.984    
   8  0.559948     -0.579911     -0.872454      0.872454       232.423       233.296    
   9  0.561469     -0.577199     -0.868374      0.868374       233.369       234.237    
  10  0.467828     -0.759655      -1.14287       1.14287       233.251       234.394    
  11  0.288239      -1.24397      -1.87150       1.87150       235.287       237.159    
  12  0.410214     -0.891075      -1.34059       1.34059       236.044       237.384    
  13  0.527762     -0.639111     -0.961518      0.961518       234.623       235.584    
  14  0.186329      -1.68024      -2.52786       2.52786       238.614       241.142    
  15  0.924113     -0.789212E-01 -0.118734      0.118734       236.725       236.843    
  16  0.852662     -0.159392     -0.239800      0.239800       243.574       243.813    
  17  0.903782     -0.101167     -0.152201      0.152201       244.750       244.903    
  18  0.575891     -0.551837     -0.830218      0.830218       244.286       245.116    
  19  0.214801      -1.53804      -2.31393       2.31393       245.655       247.969    
  20  0.564777E-01  -2.87391      -4.32369       4.32369       244.829       249.153    
  21  0.621987     -0.474836     -0.714372      0.714372       244.202       244.916    
  22  0.785316     -0.241669     -0.363581      0.363581       246.469       246.832    
  23  0.910092     -0.942094E-01 -0.141734      0.141734       246.707       246.849    
  24  0.302832      -1.19458      -1.79720       1.79720       248.986       250.783    
  25  0.182175      -1.70279      -2.56178       2.56178       249.047       251.608    
  26  0.112568      -2.18420      -3.28605       3.28605       249.595       252.881    
  27  0.912404     -0.916724E-01 -0.137918      0.137918       250.450       250.588    
  28  0.503463     -0.686245      -1.03243       1.03243       247.925       248.958    
  29  0.454725     -0.788063      -1.18561       1.18561       251.965       253.150    
  30  0.173768      -1.75003      -2.63286       2.63286       252.144       254.776    
  31  0.415873     -0.877376      -1.31998       1.31998       250.480       251.800    
  32  0.766054     -0.266502     -0.400942      0.400942       252.214       252.615    
  33  0.129655      -2.04288      -3.07343       3.07343       250.929       254.002    
  34  0.985651     -0.144527E-01 -0.217436E-01  0.217436E-01   252.588       252.610    
  35  0.418861     -0.870217      -1.30921       1.30921       252.943       254.253    
  36  0.311313      -1.16696      -1.75564       1.75564       251.409       253.165    
  37  0.434284     -0.834057      -1.25481       1.25481       253.443       254.698    
  38  0.548842     -0.599944     -0.902593      0.902593       252.500       253.403    
  39  0.878632     -0.129389     -0.194660      0.194660       251.225       251.420    
  40  0.582787     -0.539934     -0.812310      0.812310       254.031       254.843    
  41  0.976868     -0.234034E-01 -0.352096E-01  0.352096E-01   254.341       254.376    
  42  0.751254     -0.286012     -0.430294      0.430294       252.789       253.220    
  43  0.674066     -0.394427     -0.593400      0.593400       256.554       257.147    
  44  0.854180     -0.157614     -0.237124      0.237124       256.866       257.103    
  45  0.670037E-01  -2.70301      -4.06657       4.06657       255.115       259.182    
  46  0.569693     -0.562658     -0.846498      0.846498       257.630       258.477    
  47  0.571975     -0.558661     -0.840483      0.840483       253.891       254.732    
  48  0.691289     -0.369198     -0.555444      0.555444       259.374       259.929    
  49  0.489152     -0.715083      -1.07581       1.07581       259.496       260.572    
  50  0.230932      -1.46563      -2.20499       2.20499       258.199       260.404    
  51  0.288520      -1.24299      -1.87003       1.87003       260.314       262.184    
  52  0.195194      -1.63376      -2.45793       2.45793       260.136       262.594    
  53  0.196058      -1.62934      -2.45129       2.45129       261.877       264.328    
  54  0.868795     -0.140648     -0.211599      0.211599       262.350       262.562    
  55  0.828359     -0.188309     -0.283304      0.283304       262.855       263.138    
  56  0.516436     -0.660803     -0.994153      0.994153       262.297       263.291    
  57  0.609051     -0.495853     -0.745991      0.745991       264.524       265.270    
  58  0.258145      -1.35423      -2.03739       2.03739       264.230       266.267    
  59  0.574299     -0.554605     -0.834381      0.834381       265.290       266.125    
  60  0.614196     -0.487441     -0.733337      0.733337       264.341       265.074    
  61  0.670293     -0.400041     -0.601846      0.601846       267.399       268.001    
  62  0.694693     -0.364285     -0.548053      0.548053       268.070       268.618    
  63  0.777866     -0.251201     -0.377922      0.377922       268.603       268.981    
  64  0.579296E-02  -5.15111      -7.74965       7.74965       227.988       235.738    
loop,thermsimp(1:2)       18   1.12670      0.590284    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    500        244.52          0.88          1.10         23.12          0.00          0.05         25.15
Just calling func    0   0         25.15


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    244.52
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.50446               505
loop is:       18
neval is:      499
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       18      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    1.50446               505
loop is:       19
neval is:      499


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      505
neval,tstepnext:      499     505

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.933067     -0.692784E-01 -0.104227      0.104227       225.796       225.900    
   2  0.145621      -1.92675      -2.89871       2.89871       229.521       232.420    
   3  0.824080     -0.193487     -0.291095      0.291095       230.239       230.530    
   4  0.495241     -0.702711      -1.05720       1.05720       231.342       232.399    
   5  0.239042      -1.43112      -2.15306       2.15306       231.316       233.469    
   6  0.167453      -1.78705      -2.68855       2.68855       231.956       234.645    
   7  0.409279     -0.893358      -1.34402       1.34402       232.714       234.058    
   8  0.536324     -0.623017     -0.937306      0.937306       232.423       233.360    
   9  0.697150     -0.360755     -0.542742      0.542742       233.369       233.911    
  10  0.141562      -1.95502      -2.94125       2.94125       233.251       236.192    
  11  0.225624      -1.48889      -2.23997       2.23997       234.623       236.863    
  12  0.153144      -1.87638      -2.82294       2.82294       227.988       230.811    
  13  0.561596     -0.576973     -0.868034      0.868034       236.725       237.593    
  14  0.430163     -0.843592      -1.26915       1.26915       235.287       236.557    
  15  0.905216     -0.995811E-01 -0.149816      0.149816       236.044       236.194    
  16  0.568360     -0.565000     -0.850021      0.850021       238.614       239.464    
  17  0.378285     -0.972108      -1.46250       1.46250       243.574       245.036    
  18  0.164072      -1.80745      -2.71924       2.71924       244.750       247.470    
  19  0.158717      -1.84063      -2.76916       2.76916       244.202       246.971    
  20  0.664145     -0.409255     -0.615708      0.615708       244.286       244.901    
  21  0.325635      -1.12198      -1.68797       1.68797       246.469       248.157    
  22  0.148489      -1.90725      -2.86938       2.86938       246.707       249.577    
  23  0.367680      -1.00054      -1.50528       1.50528       245.655       247.160    
  24  0.417596     -0.873242      -1.31376       1.31376       247.925       249.239    
  25  0.401862     -0.911646      -1.37154       1.37154       244.829       246.201    
  26  0.105239E-01  -4.55411      -6.85148       6.85148       250.450       257.302    
  27  0.587188     -0.532410     -0.800990      0.800990       248.986       249.787    
  28  0.284127      -1.25833      -1.89312       1.89312       251.225       253.118    
  29  0.869365     -0.139992     -0.210613      0.210613       249.047       249.257    
  30  0.736143E-01  -2.60892      -3.92502       3.92502       250.480       254.405    
  31  0.494320E-01  -3.00716      -4.52415       4.52415       252.588       257.112    
  32  0.633016     -0.457260     -0.687930      0.687930       252.214       252.902    
  33  0.499988     -0.693171      -1.04285       1.04285       249.595       250.638    
  34  0.552781     -0.592793     -0.891834      0.891834       251.965       252.857    
  35  0.854618E-01  -2.45969      -3.70050       3.70050       251.409       255.109    
  36  0.816312     -0.202959     -0.305343      0.305343       252.789       253.095    
  37  0.632597     -0.457921     -0.688925      0.688925       252.500       253.189    
  38  0.433466     -0.835942      -1.25764       1.25764       250.929       252.186    
  39  0.230856      -1.46596      -2.20548       2.20548       252.943       255.149    
  40  0.190541      -1.65789      -2.49423       2.49423       254.341       256.835    
  41  0.178324      -1.72416      -2.59393       2.59393       253.443       256.037    
  42  0.227176      -1.48203      -2.22966       2.22966       253.891       256.121    
  43  0.152649      -1.87961      -2.82781       2.82781       252.144       254.971    
  44  0.496683     -0.699804      -1.05283       1.05283       254.031       255.084    
  45  0.274448      -1.29300      -1.94526       1.94526       256.866       258.811    
  46  0.172783      -1.75572      -2.64141       2.64141       256.554       259.195    
  47  0.708684     -0.344346     -0.518055      0.518055       257.630       258.148    
  48  0.157838      -1.84618      -2.77751       2.77751       255.115       257.893    
  49  0.724663     -0.322049     -0.484510      0.484510       259.374       259.858    
  50  0.427231     -0.850431      -1.27944       1.27944       258.199       259.478    
  51  0.742432     -0.297824     -0.448064      0.448064       259.496       259.944    
  52  0.902586     -0.102491     -0.154194      0.154194       260.314       260.469    
  53  0.803636     -0.218609     -0.328889      0.328889       262.350       262.679    
  54  0.222881      -1.50112      -2.25837       2.25837       260.136       262.394    
  55  0.544102     -0.608618     -0.915642      0.915642       262.855       263.771    
  56  0.419264E-01  -3.17184      -4.77191       4.77191       262.297       267.069    
  57  0.114380      -2.16823      -3.26202       3.26202       261.877       265.139    
  58  0.885187     -0.121957     -0.183479      0.183479       264.341       264.524    
  59  0.738427     -0.303234     -0.456203      0.456203       264.524       264.980    
  60  0.904391     -0.100494     -0.151189      0.151189       265.290       265.441    
  61  0.720250     -0.328158     -0.493700      0.493700       264.230       264.724    
  62  0.953889     -0.472084E-01 -0.710232E-01  0.710232E-01   267.399       267.470    
  63  0.471136E-01  -3.05519      -4.59642       4.59642       268.070       272.666    
  64  0.269026      -1.31295      -1.97528       1.97528       244.523       246.498    
loop,thermsimp(1:2)       19  0.104227       2.89871    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    501        261.80          0.88          1.08         23.16          0.00          0.05         25.16
Just calling func    0   0         25.15


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  500    261.80        5.230     -1.578      4.740     -100.0    -0.2426    
                      -1.548      2.378     -100.0      2.406     0.2507    
                       1.342     -1.257      2.400      0.000      0.000    
                     -0.2782      0.000      0.000      0.000     -1.221    

                      -2.500     0.1183E+05 0.1865E+05 -1690.     -3020.    
                      -2.000     -9.922     -1.843     -4.251      2.786    
                      -12.22     -1.815      1359.      0.000      3354.    

                       4764.      3323.      5073.      5329.      2500.    
                       4298.     0.1744     0.1204      0.000    -0.9436E-01
                      0.3144     0.2180E-01 0.1950     0.1601    -0.1877    

                     -0.3294    -0.5804      0.000     0.4503     0.2923    
                      0.8541E-01 0.2537     0.2797     0.3658     0.2028    
                      0.2032    -0.3176E-01-0.1900    -0.2885      0.000    

                      -2.849     -5.450      8.048    -0.6443      0.000    
                       0.000      9.064      9.089     -6138.     -4.000    
                      0.2889     0.5829      9.153      7.771    -0.5183E+05

                      -4.000     0.6362      2.227      9.397      9.350    
                      -7347.     -4.000     0.8918      1.324      9.565    
                       9.153     -1219.     -2.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    261.80
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.50446               505
loop is:       19
neval is:      500
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       19      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    1.50446               505
loop is:       20
neval is:      500


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      505
neval,tstepnext:      500     505

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.203517      -1.59201      -2.39511       2.39511       225.796       228.191    
   2  0.880178     -0.127631     -0.192015      0.192015       230.239       230.431    
   3  0.253527      -1.37229      -2.06455       2.06455       227.988       230.052    
   4  0.546502E-01  -2.90680      -4.37317       4.37317       231.342       235.715    
   5  0.489477     -0.714418      -1.07481       1.07481       229.521       230.596    
   6  0.178572      -1.72276      -2.59183       2.59183       232.423       235.015    
   7  0.948413     -0.529648E-01 -0.796835E-01  0.796835E-01   231.316       231.395    
   8  0.572919E-01  -2.85960      -4.30215       4.30215       233.369       237.671    
   9  0.615738     -0.484933     -0.729563      0.729563       232.714       233.443    
  10  0.885735     -0.121338     -0.182548      0.182548       231.956       232.139    
  11  0.997446     -0.255722E-02 -0.384724E-02  0.384724E-02   233.251       233.255    
  12  0.349545      -1.05112      -1.58138       1.58138       236.044       237.625    
  13  0.988454     -0.116130E-01 -0.174713E-01  0.174713E-01   235.287       235.305    
  14  0.809478     -0.211366     -0.317992      0.317992       234.623       234.941    
  15  0.978310     -0.219291E-01 -0.329915E-01  0.329915E-01   236.725       236.758    
  16  0.808711     -0.212313     -0.319417      0.319417       238.614       238.933    
  17  0.447445     -0.804202      -1.20989       1.20989       244.286       245.496    
  18  0.495992     -0.701195      -1.05492       1.05492       243.574       244.628    
  19  0.208359      -1.56849      -2.35974       2.35974       244.829       247.189    
  20  0.707030     -0.346682     -0.521570      0.521570       244.523       245.045    
  21  0.991175     -0.886425E-02 -0.133359E-01  0.133359E-01   244.202       244.215    
  22  0.744436     -0.295129     -0.444010      0.444010       245.655       246.099    
  23  0.475151     -0.744124      -1.11951       1.11951       244.750       245.870    
  24  0.403355     -0.907939      -1.36596       1.36596       246.469       247.835    
  25  0.182881      -1.69892      -2.55596       2.55596       247.925       250.481    
  26  0.862815     -0.147554     -0.221990      0.221990       249.047       249.269    
  27  0.771181     -0.259832     -0.390907      0.390907       246.707       247.098    
  28  0.139364      -1.97067      -2.96479       2.96479       248.986       251.950    
  29  0.563421     -0.573729     -0.863153      0.863153       249.595       250.458    
  30  0.308851      -1.17490      -1.76759       1.76759       250.929       252.696    
  31  0.785605     -0.241301     -0.363028      0.363028       251.965       252.328    
  32  0.233686      -1.45378      -2.18715       2.18715       252.214       254.401    
  33  0.145397      -1.92829      -2.90103       2.90103       252.789       255.691    
  34  0.620323     -0.477515     -0.718403      0.718403       251.225       251.943    
  35  0.454958     -0.787550      -1.18484       1.18484       252.500       253.685    
  36  0.362353      -1.01514      -1.52723       1.52723       250.480       252.008    
  37  0.368968     -0.997045      -1.50002       1.50002       252.144       253.644    
  38  0.623077E-01  -2.77567      -4.17589       4.17589       254.031       258.207    
  39  0.764087     -0.269074     -0.404811      0.404811       251.409       251.814    
  40  0.326593      -1.11904      -1.68356       1.68356       252.943       254.627    
  41  0.665656     -0.406982     -0.612288      0.612288       253.443       254.056    
  42  0.518212     -0.657371     -0.988990      0.988990       253.891       254.880    
  43  0.416207     -0.876573      -1.31877       1.31877       254.341       255.660    
  44  0.704568     -0.350170     -0.526817      0.526817       252.588       253.115    
  45  0.391395     -0.938039      -1.41124       1.41124       250.450       251.862    
  46  0.253982      -1.37049      -2.06185       2.06185       255.115       257.177    
  47  0.373757     -0.984150      -1.48062       1.48062       257.630       259.111    
  48  0.866113     -0.143740     -0.216251      0.216251       256.866       257.082    
  49  0.938299     -0.636861E-01 -0.958133E-01  0.958133E-01   256.554       256.650    
  50  0.292880E-02  -5.83316      -8.77577       8.77577       258.199       266.974    
  51  0.669895     -0.400634     -0.602739      0.602739       259.374       259.977    
  52  0.147486      -1.91402      -2.87958       2.87958       259.496       262.376    
  53  0.992726     -0.730080E-02 -0.109838E-01  0.109838E-01   260.314       260.325    
  54  0.989713E-01  -2.31292      -3.47971       3.47971       260.136       263.615    
  55  0.908903     -0.955172E-01 -0.143702      0.143702       262.350       262.494    
  56  0.768944E-01  -2.56532      -3.85943       3.85943       262.855       266.714    
  57  0.314167      -1.15783      -1.74191       1.74191       264.341       266.082    
  58  0.745232     -0.294060     -0.442402      0.442402       264.230       264.672    
  59  0.176066      -1.73690      -2.61309       2.61309       264.524       267.137    
  60  0.556771     -0.585601     -0.881015      0.881015       261.877       262.758    
  61  0.747217E-02  -4.89657      -7.36670       7.36670       265.290       272.657    
  62  0.898124     -0.107447     -0.161650      0.161650       262.297       262.459    
  63  0.501028     -0.691094      -1.03972       1.03972       267.399       268.439    
  64  0.127210      -2.06191      -3.10207       3.10207       261.796       264.898    
loop,thermsimp(1:2)       20   2.39511      0.192015    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    502        231.57          0.88          1.09         23.10          0.00          0.05         25.12
Just calling func    0   0         25.12


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    231.57
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.50446               505
loop is:       20
neval is:      501
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       20      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    1.50446               505
loop is:       21
neval is:      501


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      505
neval,tstepnext:      501     505

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.689627     -0.371605     -0.559065      0.559065       225.796       226.355    
   2  0.933435     -0.688844E-01 -0.103634      0.103634       227.988       228.092    
   3  0.416629     -0.875559      -1.31725       1.31725       230.239       231.556    
   4  0.562207     -0.575885     -0.866397      0.866397       229.521       230.388    
   5  0.966630     -0.339391E-01 -0.510601E-01  0.510601E-01   231.316       231.367    
   6  0.202933      -1.59488      -2.39944       2.39944       231.956       234.356    
   7  0.288024E-01  -3.54730      -5.33677       5.33677       233.251       238.588    
   8  0.585249     -0.535717     -0.805966      0.805966       232.714       233.520    
   9  0.210785      -1.55692      -2.34232       2.34232       234.623       236.965    
  10  0.672731     -0.396410     -0.596383      0.596383       232.423       233.020    
  11  0.313600      -1.15964      -1.74463       1.74463       235.287       237.032    
  12  0.429692     -0.844687      -1.27080       1.27080       231.342       232.612    
  13  0.714979     -0.335502     -0.504750      0.504750       236.725       237.229    
  14  0.806283     -0.215320     -0.323941      0.323941       236.044       236.368    
  15  0.105187      -2.25202      -3.38807       3.38807       233.369       236.757    
  16  0.397355     -0.922926      -1.38851       1.38851       238.614       240.003    
  17  0.452880     -0.792128      -1.19173       1.19173       244.202       245.394    
  18  0.272764      -1.29915      -1.95452       1.95452       243.574       245.528    
  19  0.696828     -0.361217     -0.543437      0.543437       244.523       245.066    
  20  0.667523     -0.404182     -0.608076      0.608076       244.286       244.894    
  21  0.137545      -1.98380      -2.98455       2.98455       244.750       247.735    
  22  0.486889     -0.719719      -1.08279       1.08279       245.655       246.738    
  23  0.973404     -0.269564E-01 -0.405549E-01  0.405549E-01   246.707       246.748    
  24  0.210453      -1.55849      -2.34469       2.34469       244.829       247.174    
  25  0.459577     -0.777448      -1.16964       1.16964       246.469       247.638    
  26  0.278675      -1.27771      -1.92226       1.92226       249.047       250.969    
  27  0.280962      -1.26954      -1.90997       1.90997       249.595       251.505    
  28  0.105764      -2.24655      -3.37985       3.37985       247.925       251.305    
  29  0.500220     -0.692707      -1.04215       1.04215       251.409       252.451    
  30  0.791031     -0.234418     -0.352673      0.352673       250.450       250.803    
  31  0.856506     -0.154894     -0.233032      0.233032       251.225       251.458    
  32  0.904280     -0.100617     -0.151374      0.151374       248.986       249.137    
  33  0.332181      -1.10207      -1.65803       1.65803       250.480       252.138    
  34  0.904309     -0.100585     -0.151326      0.151326       251.965       252.116    
  35  0.763590E-01  -2.57231      -3.86994       3.86994       250.929       254.799    
  36  0.703213     -0.352095     -0.529713      0.529713       252.588       253.118    
  37  0.332441      -1.10129      -1.65685       1.65685       252.144       253.800    
  38  0.445914     -0.807629      -1.21505       1.21505       252.500       253.715    
  39  0.154208      -1.86946      -2.81252       2.81252       253.443       256.256    
  40  0.815735     -0.203666     -0.306408      0.306408       252.214       252.520    
  41  0.210583      -1.55788      -2.34376       2.34376       252.943       255.287    
  42  0.839155     -0.175360     -0.263822      0.263822       253.891       254.155    
  43  0.930787     -0.717244E-01 -0.107907      0.107907       254.341       254.449    
  44  0.754433     -0.281789     -0.423941      0.423941       252.789       253.213    
  45  0.708066     -0.345218     -0.519367      0.519367       256.554       257.073    
  46  0.488874     -0.715650      -1.07667       1.07667       256.866       257.943    
  47  0.646527     -0.436140     -0.656156      0.656156       255.115       255.771    
  48  0.446057E-01  -3.10989      -4.67872       4.67872       254.031       258.710    
  49  0.337164      -1.08719      -1.63563       1.63563       257.630       259.266    
  50  0.830356     -0.185900     -0.279680      0.279680       259.374       259.654    
  51  0.412872E-01  -3.18720      -4.79503       4.79503       260.314       265.109    
  52  0.666096     -0.406321     -0.611295      0.611295       259.496       260.108    
  53  0.304717      -1.18837      -1.78786       1.78786       262.297       264.085    
  54  0.374525E-01  -3.28468      -4.94168       4.94168       262.350       267.292    
  55  0.646813     -0.435698     -0.655491      0.655491       261.877       262.532    
  56  0.514613     -0.664340     -0.999474      0.999474       260.136       261.135    
  57  0.988540E-01  -2.31411      -3.48149       3.48149       264.230       267.711    
  58  0.569908E-01  -2.86487      -4.31008       4.31008       261.796       266.106    
  59  0.905297     -0.994917E-01 -0.149681      0.149681       264.341       264.490    
  60  0.491180     -0.710945      -1.06959       1.06959       262.855       263.925    
  61  0.954569     -0.464958E-01 -0.699512E-01  0.699512E-01   258.199       258.269    
  62  0.922129     -0.810699E-01 -0.121967      0.121967       264.524       264.646    
  63  0.494244     -0.704725      -1.06023       1.06023       267.399       268.459    
  64  0.270200      -1.30859      -1.96873       1.96873       231.575       233.543    
loop,thermsimp(1:2)       21  0.559065      0.103634    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    503        262.28          0.88          1.09         23.13          0.00          0.04         25.13
Just calling func    0   0         25.14


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    262.28
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.50446               505
loop is:       21
neval is:      502
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       21      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    1.50446               505
loop is:       22
neval is:      502


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      505
neval,tstepnext:      502     505

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.564979     -0.570967     -0.858998      0.858998       225.796       226.655    
   2  0.649914     -0.430915     -0.648295      0.648295       227.988       228.636    
   3  0.234494      -1.45033      -2.18196       2.18196       229.521       231.703    
   4  0.250059      -1.38606      -2.08527       2.08527       231.316       233.401    
   5  0.396140     -0.925987      -1.39311       1.39311       230.239       231.632    
   6  0.587608     -0.531696     -0.799916      0.799916       231.342       232.141    
   7  0.216174      -1.53167      -2.30434       2.30434       232.423       234.727    
   8  0.344171      -1.06662      -1.60468       1.60468       232.714       234.318    
   9  0.898582     -0.106937     -0.160883      0.160883       231.575       231.735    
  10  0.269335      -1.31180      -1.97355       1.97355       231.956       233.930    
  11  0.506240     -0.680744      -1.02415       1.02415       236.044       237.068    
  12  0.469054     -0.757038      -1.13894       1.13894       233.369       234.508    
  13  0.599330     -0.511942     -0.770197      0.770197       234.623       235.393    
  14  0.850776     -0.161606     -0.243130      0.243130       235.287       235.531    
  15  0.411587     -0.887735      -1.33556       1.33556       236.725       238.060    
  16  0.690925     -0.369723     -0.556235      0.556235       233.251       233.807    
  17  0.539174     -0.617717     -0.929331      0.929331       238.614       239.543    
  18  0.268467      -1.31503      -1.97841       1.97841       244.286       246.264    
  19  0.413033     -0.884227      -1.33029       1.33029       244.523       245.853    
  20  0.535238     -0.625044     -0.940355      0.940355       244.202       245.142    
  21  0.407229     -0.898380      -1.35158       1.35158       243.574       244.925    
  22  0.486369E-01  -3.02337      -4.54855       4.54855       245.655       250.204    
  23  0.176950      -1.73189      -2.60556       2.60556       246.707       249.313    
  24  0.891669     -0.114660     -0.172502      0.172502       244.829       245.002    
  25  0.985364     -0.147443E-01 -0.221823E-01  0.221823E-01   246.469       246.491    
  26  0.779121E-01  -2.55217      -3.83965       3.83965       244.750       248.590    
  27  0.198695      -1.61599      -2.43119       2.43119       248.986       251.417    
  28  0.966734     -0.338319E-01 -0.508989E-01  0.508989E-01   250.450       250.501    
  29  0.230243      -1.46862      -2.20948       2.20948       249.047       251.256    
  30  0.996515     -0.349094E-02 -0.525199E-02  0.525199E-02   247.925       247.931    
  31  0.299142      -1.20684      -1.81564       1.81564       251.225       253.041    
  32  0.204924      -1.58512      -2.38475       2.38475       249.595       251.980    
  33  0.229288      -1.47278      -2.21573       2.21573       251.965       254.181    
  34  0.263068      -1.33534      -2.00897       2.00897       250.480       252.489    
  35  0.535099     -0.625303     -0.940744      0.940744       251.409       252.350    
  36  0.461620     -0.773013      -1.16297       1.16297       252.214       253.377    
  37  0.110748      -2.20050      -3.31056       3.31056       252.588       255.899    
  38  0.972332     -0.280583E-01 -0.422126E-01  0.422126E-01   252.789       252.832    
  39  0.273306      -1.29716      -1.95153       1.95153       252.500       254.452    
  40  0.197973      -1.61962      -2.43666       2.43666       252.144       254.580    
  41  0.541456     -0.613494     -0.922978      0.922978       253.891       254.814    
  42  0.740418     -0.300540     -0.452151      0.452151       254.341       254.793    
  43  0.818704     -0.200033     -0.300942      0.300942       250.929       251.230    
  44  0.639833     -0.446547     -0.671814      0.671814       252.943       253.615    
  45  0.883244E-01  -2.42674      -3.65094       3.65094       255.115       258.766    
  46  0.379012     -0.970189      -1.45961       1.45961       253.443       254.903    
  47  0.629399     -0.462989     -0.696549      0.696549       256.554       257.250    
  48  0.447172     -0.804811      -1.21081       1.21081       256.866       258.077    
  49  0.639763     -0.446657     -0.671978      0.671978       258.199       258.871    
  50  0.890417E-01  -2.41865      -3.63877       3.63877       254.031       257.670    
  51  0.129636      -2.04302      -3.07365       3.07365       257.630       260.704    
  52  0.397860     -0.921655      -1.38659       1.38659       259.374       260.761    
  53  0.396503     -0.925073      -1.39174       1.39174       259.496       260.888    
  54  0.896543     -0.109209     -0.164300      0.164300       260.136       260.300    
  55  0.558316     -0.582830     -0.876846      0.876846       261.877       262.753    
  56  0.258142      -1.35425      -2.03741       2.03741       262.855       264.892    
  57  0.290113      -1.23749      -1.86175       1.86175       262.297       264.159    
  58  0.162781      -1.81535      -2.73113       2.73113       264.341       267.072    
  59  0.435698     -0.830806      -1.24992       1.24992       264.524       265.774    
  60  0.631392     -0.459829     -0.691795      0.691795       260.314       261.006    
  61  0.237479E-02  -6.04284      -9.09123       9.09123       261.796       270.888    
  62  0.659496     -0.416280     -0.626277      0.626277       262.350       262.977    
  63  0.607468     -0.498456     -0.749908      0.749908       264.230       264.980    
  64  0.313177      -1.16099      -1.74666       1.74666       262.275       264.022    
loop,thermsimp(1:2)       22  0.858998      0.648295    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    504        262.31          0.88          1.10         23.06          0.09          0.05         25.18
Just calling func    0   0         25.17


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    262.31
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.50446               505
loop is:       22
neval is:      503
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       22      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    1.50446               505
loop is:       23
neval is:      503


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      505
neval,tstepnext:      503     505

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.856405     -0.155012     -0.233209      0.233209       225.796       226.029    
   2  0.202381      -1.59760      -2.40353       2.40353       227.988       230.391    
   3  0.468782E-01  -3.06020      -4.60396       4.60396       230.239       234.843    
   4  0.881899     -0.125678     -0.189077      0.189077       229.521       229.710    
   5  0.651671     -0.428215     -0.644233      0.644233       231.575       232.219    
   6  0.568610     -0.564561     -0.849361      0.849361       231.342       232.191    
   7  0.897617     -0.108012     -0.162499      0.162499       231.316       231.478    
   8  0.679451     -0.386471     -0.581430      0.581430       233.251       233.832    
   9  0.134747      -2.00436      -3.01548       3.01548       231.956       234.972    
  10  0.196368      -1.62776      -2.44891       2.44891       232.714       235.163    
  11  0.530475     -0.633983     -0.953803      0.953803       233.369       234.322    
  12  0.109926      -2.20794      -3.32177       3.32177       232.423       235.745    
  13  0.329932      -1.10887      -1.66825       1.66825       234.623       236.291    
  14  0.315682E-01  -3.45560      -5.19882       5.19882       235.287       240.486    
  15  0.398644     -0.919687      -1.38363       1.38363       236.044       237.427    
  16  0.735606E-01  -2.60965      -3.92611       3.92611       236.725       240.651    
  17  0.926864     -0.759486E-01 -0.114262      0.114262       238.614       238.728    
  18  0.951427E-01  -2.35238      -3.53906       3.53906       243.574       247.113    
  19  0.649794     -0.431100     -0.648574      0.648574       244.829       245.478    
  20  0.753721     -0.282733     -0.425361      0.425361       244.202       244.627    
  21  0.481624     -0.730591      -1.09915       1.09915       244.523       245.622    
  22  0.767971E-01  -2.56659      -3.86133       3.86133       244.286       248.147    
  23  0.138368      -1.97784      -2.97558       2.97558       246.469       249.444    
  24  0.989715     -0.103379E-01 -0.155530E-01  0.155530E-01   247.925       247.941    
  25  0.641675     -0.443673     -0.667489      0.667489       244.750       245.418    
  26  0.200623      -1.60633      -2.41666       2.41666       246.707       249.124    
  27  0.938705     -0.632541E-01 -0.951634E-01  0.951634E-01   245.655       245.750    
  28  0.749560     -0.288270     -0.433690      0.433690       250.450       250.884    
  29  0.889204     -0.117428     -0.176666      0.176666       250.929       251.105    
  30  0.534697     -0.626056     -0.941877      0.941877       249.047       249.988    
  31  0.899645E-01  -2.40834      -3.62326       3.62326       248.986       252.609    
  32  0.982602     -0.175515E-01 -0.264056E-01  0.264056E-01   249.595       249.622    
  33  0.662698     -0.411436     -0.618989      0.618989       251.409       252.028    
  34  0.275577      -1.28889      -1.93909       1.93909       250.480       252.419    
  35  0.585503     -0.535284     -0.805314      0.805314       252.789       253.595    
  36  0.394027     -0.931335      -1.40116       1.40116       251.225       252.626    
  37  0.333190      -1.09904      -1.65347       1.65347       252.214       253.867    
  38  0.789561     -0.236278     -0.355472      0.355472       252.943       253.299    
  39  0.772800     -0.257734     -0.387752      0.387752       251.965       252.353    
  40  0.752121     -0.284858     -0.428557      0.428557       252.500       252.929    
  41  0.757220     -0.278101     -0.418392      0.418392       252.144       252.562    
  42  0.715721     -0.334464     -0.503189      0.503189       254.341       254.844    
  43  0.494872     -0.703457      -1.05832       1.05832       253.891       254.949    
  44  0.100481      -2.29779      -3.45693       3.45693       253.443       256.900    
  45  0.791863     -0.233367     -0.351091      0.351091       252.588       252.939    
  46  0.947382     -0.540532E-01 -0.813210E-01  0.813210E-01   256.554       256.635    
  47  0.150069      -1.89666      -2.85346       2.85346       254.031       256.885    
  48  0.183117      -1.69763      -2.55402       2.55402       256.866       259.420    
  49  0.501919     -0.689317      -1.03705       1.03705       255.115       256.152    
  50  0.825224E-01  -2.49469      -3.75316       3.75316       258.199       261.952    
  51  0.315756      -1.15279      -1.73432       1.73432       260.136       261.870    
  52  0.421132E-01  -3.16739      -4.76522       4.76522       257.630       262.395    
  53  0.277967      -1.28025      -1.92609       1.92609       259.374       261.300    
  54  0.474814     -0.744831      -1.12057       1.12057       259.496       260.617    
  55  0.611196     -0.492338     -0.740703      0.740703       260.314       261.055    
  56  0.750301     -0.287280     -0.432202      0.432202       261.877       262.309    
  57  0.549986     -0.597862     -0.899460      0.899460       262.350       263.250    
  58  0.330429E-01  -3.40995      -5.13014       5.13014       262.275       267.405    
  59  0.216965      -1.52802      -2.29884       2.29884       262.297       264.596    
  60  0.218254      -1.52210      -2.28994       2.28994       262.855       265.145    
  61  0.297843      -1.21119      -1.82219       1.82219       264.230       266.052    
  62  0.990576E-01  -2.31205      -3.47840       3.47840       264.524       268.003    
  63  0.293649      -1.22537      -1.84352       1.84352       264.341       266.184    
  64  0.417131     -0.874355      -1.31543       1.31543       262.309       263.625    
loop,thermsimp(1:2)       23  0.233209       2.40353    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    505        227.86          0.88          1.09         23.18          0.12          0.04         25.32
Just calling func    0   0         25.33


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    227.86
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.50446               505
loop is:       23
neval is:      504
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       23      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    1.50446               505
loop is:       24
neval is:      504


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      505
neval,tstepnext:      504     505

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.265794      -1.32503      -1.99346       1.99346       225.796       227.789    
   2  0.873295     -0.135482     -0.203828      0.203828       229.521       229.725    
   3  0.876467E-01  -2.43444      -3.66252       3.66252       227.988       231.650    
   4  0.629921     -0.462161     -0.695304      0.695304       231.316       232.011    
   5  0.434473     -0.833621      -1.25415       1.25415       231.342       232.596    
   6  0.346377      -1.06023      -1.59507       1.59507       231.575       233.170    
   7  0.140231      -1.96447      -2.95546       2.95546       233.251       236.206    
   8  0.162246      -1.81864      -2.73608       2.73608       233.369       236.105    
   9  0.944643     -0.569479E-01 -0.856759E-01  0.856759E-01   230.239       230.325    
  10  0.612757     -0.489786     -0.736865      0.736865       231.956       232.693    
  11  0.154744      -1.86598      -2.80730       2.80730       232.714       235.521    
  12  0.357361      -1.02901      -1.54810       1.54810       232.423       233.971    
  13  0.370792     -0.992115      -1.49260       1.49260       234.623       236.115    
  14  0.309247      -1.17361      -1.76566       1.76566       236.044       237.809    
  15  0.779381E-01  -2.55184      -3.83915       3.83915       238.614       242.453    
  16  0.364445      -1.00938      -1.51857       1.51857       235.287       236.806    
  17  0.952507     -0.486574E-01 -0.732032E-01  0.732032E-01   236.725       236.798    
  18  0.449458     -0.799713      -1.20314       1.20314       244.202       245.405    
  19  0.561996     -0.576261     -0.866962      0.866962       244.750       245.617    
  20  0.143909      -1.93857      -2.91651       2.91651       244.829       247.746    
  21  0.433671     -0.835469      -1.25693       1.25693       244.523       245.780    
  22  0.774330     -0.255758     -0.384778      0.384778       245.655       246.040    
  23  0.671881     -0.397673     -0.598285      0.598285       243.574       244.172    
  24  0.233384      -1.45507      -2.18910       2.18910       247.925       250.115    
  25  0.715887     -0.334233     -0.502840      0.502840       244.286       244.789    
  26  0.279781      -1.27375      -1.91631       1.91631       246.707       248.623    
  27  0.139405      -1.97037      -2.96435       2.96435       246.469       249.433    
  28  0.869999     -0.139263     -0.209515      0.209515       249.595       249.805    
  29  0.890395     -0.116090     -0.174653      0.174653       249.047       249.221    
  30  0.453873     -0.789939      -1.18843       1.18843       250.450       251.639    
  31  0.688263     -0.373584     -0.562043      0.562043       250.929       251.491    
  32  0.349244      -1.05198      -1.58267       1.58267       251.409       252.992    
  33  0.508404     -0.676478      -1.01774       1.01774       251.965       252.983    
  34  0.235381      -1.44655      -2.17628       2.17628       250.480       252.657    
  35  0.487606     -0.718247      -1.08058       1.08058       252.144       253.224    
  36  0.275193      -1.29028      -1.94118       1.94118       248.986       250.927    
  37  0.844440E-01  -2.47167      -3.71853       3.71853       251.225       254.944    
  38  0.788178     -0.238031     -0.358109      0.358109       252.500       252.858    
  39  0.517452     -0.658838     -0.991196      0.991196       252.588       253.580    
  40  0.970281     -0.301699E-01 -0.453895E-01  0.453895E-01   252.943       252.989    
  41  0.298448      -1.20916      -1.81913       1.81913       252.789       254.609    
  42  0.269978      -1.30941      -1.96996       1.96996       252.214       254.184    
  43  0.368791     -0.997524      -1.50074       1.50074       254.341       255.842    
  44  0.613443     -0.488668     -0.735183      0.735183       253.891       254.626    
  45  0.227206      -1.48190      -2.22946       2.22946       255.115       257.345    
  46  0.232743      -1.45782      -2.19324       2.19324       256.554       258.747    
  47  0.350471      -1.04848      -1.57740       1.57740       254.031       255.608    
  48  0.546200     -0.604770     -0.909853      0.909853       253.443       254.353    
  49  0.427816     -0.849063      -1.27738       1.27738       256.866       258.143    
  50  0.457333     -0.782344      -1.17701       1.17701       259.496       260.673    
  51  0.228747      -1.47514      -2.21929       2.21929       260.314       262.534    
  52  0.679692E-01  -2.68870      -4.04505       4.04505       259.374       263.419    
  53  0.241139      -1.42238      -2.13992       2.13992       260.136       262.276    
  54  0.282829      -1.26291      -1.90000       1.90000       258.199       260.099    
  55  0.958824E-01  -2.34463      -3.52741       3.52741       261.877       265.404    
  56  0.551664     -0.594816     -0.894878      0.894878       257.630       258.525    
  57  0.211140      -1.55523      -2.33979       2.33979       262.350       264.690    
  58  0.666421     -0.405834     -0.610562      0.610562       262.309       262.920    
  59  0.225751      -1.48832      -2.23912       2.23912       262.297       264.536    
  60  0.398134     -0.920966      -1.38556       1.38556       262.855       264.240    
  61  0.879750     -0.128118     -0.192749      0.192749       264.230       264.423    
  62  0.238918      -1.43164      -2.15384       2.15384       264.341       266.494    
  63  0.275285      -1.28995      -1.94068       1.94068       262.275       264.216    
  64  0.157988      -1.84524      -2.77609       2.77609       227.857       230.633    
loop,thermsimp(1:2)       24   1.99346      0.203828    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    506        240.35          0.88          1.09         23.12          0.09          0.04         25.23
Just calling func    0   0         25.23


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    240.35
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.50446               505
loop is:       24
neval is:      505
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       24      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    1.50446               505
loop is:       25
neval is:      505


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      505
neval,tstepnext:      505     505

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.959463E-01  -2.34397      -3.52641       3.52641       225.796       229.322    
   2  0.865442     -0.144515     -0.217417      0.217417       229.521       229.739    
   3  0.429385     -0.845402      -1.27187       1.27187       230.239       231.511    
   4  0.880624     -0.127125     -0.191255      0.191255       227.857       228.049    
   5  0.364430      -1.00942      -1.51864       1.51864       227.988       229.507    
   6  0.546634     -0.603976     -0.908658      0.908658       231.316       232.224    
   7  0.822212     -0.195757     -0.294509      0.294509       231.342       231.636    
   8  0.269693      -1.31047      -1.97155       1.97155       231.956       233.928    
   9  0.956342     -0.446399E-01 -0.671591E-01  0.671591E-01   231.575       231.642    
  10  0.428299     -0.847933      -1.27568       1.27568       232.423       233.699    
  11  0.284104      -1.25841      -1.89324       1.89324       232.714       234.607    
  12  0.901656     -0.103523     -0.155746      0.155746       233.369       233.524    
  13  0.650355     -0.430237     -0.647276      0.647276       234.623       235.270    
  14  0.247865E-01  -3.69745      -5.56268       5.56268       233.251       238.814    
  15  0.830009     -0.186319     -0.280310      0.280310       236.725       237.005    
  16  0.997155     -0.284877E-02 -0.428586E-02  0.428586E-02   235.287       235.292    
  17  0.377729     -0.973578      -1.46471       1.46471       236.044       237.508    
  18  0.767426     -0.264713     -0.398250      0.398250       238.614       239.012    
  19  0.472642     -0.749418      -1.12747       1.12747       243.574       244.701    
  20  0.984438     -0.156839E-01 -0.235959E-01  0.235959E-01   244.286       244.309    
  21  0.785656     -0.241236     -0.362930      0.362930       244.202       244.565    
  22  0.886488     -0.120488     -0.181269      0.181269       244.750       244.932    
  23  0.514796     -0.663984     -0.998939      0.998939       244.523       245.522    
  24  0.414154     -0.881517      -1.32621       1.32621       245.655       246.981    
  25  0.335573      -1.09192      -1.64275       1.64275       244.829       246.472    
  26  0.479386     -0.735249      -1.10615       1.10615       246.707       247.813    
  27  0.422990     -0.860406      -1.29445       1.29445       249.047       250.341    
  28  0.300375      -1.20272      -1.80945       1.80945       246.469       248.278    
  29  0.485328     -0.722931      -1.08762       1.08762       249.595       250.683    
  30  0.430750     -0.842227      -1.26710       1.26710       247.925       249.193    
  31  0.798866     -0.224562     -0.337846      0.337846       248.986       249.323    
  32  0.775112     -0.254747     -0.383258      0.383258       250.929       251.312    
  33  0.356073      -1.03262      -1.55354       1.55354       250.450       252.004    
  34  0.129729      -2.04230      -3.07257       3.07257       250.480       253.553    
  35  0.910417     -0.938521E-01 -0.141197      0.141197       252.500       252.641    
  36  0.563102     -0.574294     -0.864003      0.864003       251.965       252.829    
  37  0.210518      -1.55819      -2.34423       2.34423       252.943       255.288    
  38  0.284252      -1.25789      -1.89245       1.89245       251.409       253.301    
  39  0.472723     -0.749246      -1.12721       1.12721       252.144       253.271    
  40  0.499442     -0.694264      -1.04449       1.04449       252.588       253.633    
  41  0.324329      -1.12600      -1.69402       1.69402       252.214       253.908    
  42  0.470185     -0.754630      -1.13531       1.13531       253.443       254.579    
  43  0.957455     -0.434769E-01 -0.654093E-01  0.654093E-01   252.789       252.855    
  44  0.452290     -0.793433      -1.19369       1.19369       253.891       255.085    
  45  0.941069     -0.607383E-01 -0.913785E-01  0.913785E-01   251.225       251.316    
  46  0.566208     -0.568794     -0.855728      0.855728       254.031       254.887    
  47  0.537483E-01  -2.92344      -4.39821       4.39821       254.341       258.739    
  48  0.105024E-01  -4.55615      -6.85456       6.85456       255.115       261.970    
  49  0.963769     -0.369035E-01 -0.555200E-01  0.555200E-01   256.866       256.921    
  50  0.537803     -0.620264     -0.933163      0.933163       257.630       258.563    
  51  0.613670E-01  -2.79088      -4.19878       4.19878       256.554       260.752    
  52  0.150908      -1.89109      -2.84507       2.84507       258.199       261.044    
  53  0.737833     -0.304037     -0.457412      0.457412       259.496       259.954    
  54  0.739752     -0.301440     -0.453505      0.453505       260.136       260.589    
  55  0.500563     -0.692021      -1.04112       1.04112       260.314       261.355    
  56  0.508897     -0.675510      -1.01628       1.01628       262.309       263.326    
  57  0.270287      -1.30827      -1.96824       1.96824       259.374       261.342    
  58  0.382623     -0.960705      -1.44534       1.44534       262.275       263.720    
  59  0.282048      -1.26568      -1.90417       1.90417       262.855       264.759    
  60  0.412578     -0.885330      -1.33195       1.33195       264.230       265.562    
  61  0.622527     -0.473969     -0.713068      0.713068       262.297       263.010    
  62  0.849059     -0.163626     -0.246170      0.246170       262.350       262.597    
  63  0.391723     -0.937200      -1.40998       1.40998       261.877       263.287    
  64  0.956558     -0.444138E-01 -0.668189E-01  0.668189E-01   240.350       240.417    
loop,thermsimp(1:2)       25   3.52641      0.217417    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    507        221.40          0.88          1.09         23.12          0.00          0.05         25.14
Just calling func    0   0         25.15


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    508        220.45          0.86          1.08         23.10          0.01          0.04         25.09
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    220.45
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.50446               505
loop is:       25
neval is:      507
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       25      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:    1.50446               505
loop is:       26
neval is:      507


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 




neval>tstepnex so lower away!t
---> lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
     new SAtemp,tstepnext are :   0.752231               568

 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      568
neval,tstepnext:      507     568

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.554230     -0.590175     -0.443948      0.443948       227.857       228.301    
   2  0.579741     -0.545174     -0.410096      0.410096       225.796       226.206    
   3  0.824455E-01  -2.49562      -1.87728       1.87728       227.988       229.865    
   4  0.315100      -1.15486     -0.868724      0.868724       229.521       230.390    
   5  0.275555      -1.28897     -0.969601      0.969601       230.239       231.208    
   6  0.634682     -0.454632     -0.341988      0.341988       231.342       231.684    
   7  0.671828E-01  -2.70034      -2.03128       2.03128       231.575       233.606    
   8  0.843963     -0.169647     -0.127613      0.127613       231.316       231.443    
   9  0.801288     -0.221535     -0.166645      0.166645       233.369       233.535    
  10  0.386583     -0.950409     -0.714927      0.714927       232.423       233.138    
  11  0.436986     -0.827854     -0.622738      0.622738       231.956       232.579    
  12  0.469599     -0.755876     -0.568593      0.568593       232.714       233.282    
  13  0.104412E-02  -6.86458      -5.16375       5.16375       234.623       239.786    
  14  0.615471     -0.485368     -0.365109      0.365109       235.287       235.652    
  15  0.819025     -0.199640     -0.150176      0.150176       236.725       236.875    
  16  0.448367     -0.802144     -0.603397      0.603397       236.044       236.647    
  17  0.810334E-01  -2.51289      -1.89028       1.89028       233.251       235.141    
  18  0.589831     -0.527920     -0.397117      0.397117       238.614       239.011    
  19  0.772888E-01  -2.56021      -1.92587       1.92587       240.350       242.276    
  20  0.929898E-01  -2.37527      -1.78675       1.78675       244.286       246.072    
  21  0.772792     -0.257745     -0.193884      0.193884       244.202       244.396    
  22  0.471913     -0.750961     -0.564896      0.564896       243.574       244.138    
  23  0.797459     -0.226325     -0.170249      0.170249       244.750       244.921    
  24  0.457939     -0.781019     -0.587507      0.587507       244.523       245.111    
  25  0.578405     -0.547481     -0.411832      0.411832       244.829       245.241    
  26  0.359256      -1.02372     -0.770075      0.770075       245.655       246.425    
  27  0.125054      -2.07901      -1.56390       1.56390       246.707       248.271    
  28  0.348647      -1.05370     -0.792622      0.792622       246.469       247.261    
  29  0.103177      -2.27131      -1.70855       1.70855       247.925       249.634    
  30  0.429994     -0.843983     -0.634870      0.634870       248.986       249.621    
  31  0.872975     -0.135849     -0.102190      0.102190       249.047       249.149    
  32  0.968061     -0.324600E-01 -0.244174E-01  0.244174E-01   249.595       249.620    
  33  0.876099     -0.132276     -0.995022E-01  0.995022E-01   250.929       251.028    
  34  0.935178     -0.670183E-01 -0.504132E-01  0.504132E-01   251.225       251.275    
  35  0.111536      -2.19340      -1.64995       1.64995       250.450       252.100    
  36  0.119639      -2.12328      -1.59719       1.59719       252.500       254.097    
  37  0.598442     -0.513426     -0.386215      0.386215       251.965       252.351    
  38  0.711442     -0.340462     -0.256106      0.256106       252.789       253.046    
  39  0.747494     -0.291029     -0.218921      0.218921       252.144       252.362    
  40  0.262451      -1.33769      -1.00625       1.00625       251.409       252.415    
  41  0.845864     -0.167397     -0.125921      0.125921       250.480       250.606    
  42  0.544636     -0.607637     -0.457084      0.457084       252.588       253.045    
  43  0.538840     -0.618336     -0.465132      0.465132       252.214       252.679    
  44  0.408773     -0.894595     -0.672942      0.672942       253.443       254.116    
  45  0.251694      -1.37954      -1.03773       1.03773       254.031       255.069    
  46  0.157458      -1.84860      -1.39057       1.39057       253.891       255.282    
  47  0.342548      -1.07134     -0.805898      0.805898       252.943       253.749    
  48  0.869179     -0.140207     -0.105468      0.105468       256.866       256.971    
  49  0.922210     -0.809826E-01 -0.609176E-01  0.609176E-01   257.630       257.691    
  50  0.302494      -1.19569     -0.899438      0.899438       254.341       255.241    
  51  0.819127     -0.199516     -0.150082      0.150082       259.496       259.647    
  52  0.116539      -2.14953      -1.61694       1.61694       260.136       261.753    
  53  0.174517      -1.74574      -1.31320       1.31320       256.554       257.867    
  54  0.654478     -0.423917     -0.318884      0.318884       258.199       258.517    
  55  0.766932     -0.265357     -0.199610      0.199610       259.374       259.574    
  56  0.450925     -0.796455     -0.599118      0.599118       260.314       260.913    
  57  0.305246      -1.18664     -0.892626      0.892626       255.115       256.008    
  58  0.557991     -0.583413     -0.438861      0.438861       262.350       262.789    
  59  0.500421     -0.692306     -0.520774      0.520774       262.297       262.818    
  60  0.168591      -1.78028      -1.33918       1.33918       261.877       263.216    
  61  0.785828     -0.241017     -0.181300      0.181300       262.309       262.491    
  62  0.902493     -0.102594     -0.771747E-01  0.771747E-01   262.275       262.352    
  63  0.349189      -1.05214     -0.791453      0.791453       262.855       263.646    
  64  0.888892     -0.117779     -0.885970E-01  0.885970E-01   220.452       220.541    
loop,thermsimp(1:2)       26  0.443948      0.410096    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    509        253.04          0.88          1.09         23.10          0.00          0.04         25.11
Just calling func    0   0         25.11


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    253.04
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.752231               568
loop is:       26
neval is:      508
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       26      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:   0.752231               568
loop is:       27
neval is:      508


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      568
neval,tstepnext:      508     568

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.813982     -0.205818     -0.154822      0.154822       220.452       220.607    
   2  0.422453     -0.861677     -0.648180      0.648180       225.796       226.444    
   3  0.267874      -1.31724     -0.990867      0.990867       227.857       228.848    
   4  0.997565     -0.243750E-02 -0.183356E-02  0.183356E-02   227.988       227.990    
   5  0.514426     -0.664704     -0.500011      0.500011       229.521       230.021    
   6  0.171371      -1.76393      -1.32688       1.32688       230.239       231.566    
   7  0.704975     -0.349593     -0.262975      0.262975       231.316       231.579    
   8  0.499351     -0.694446     -0.522384      0.522384       231.342       231.864    
   9  0.736092     -0.306400     -0.230483      0.230483       231.956       232.187    
  10  0.696210     -0.362104     -0.272386      0.272386       232.423       232.696    
  11  0.273943      -1.29484     -0.974016      0.974016       232.714       233.688    
  12  0.656583     -0.420706     -0.316468      0.316468       233.369       233.685    
  13  0.817424     -0.201597     -0.151648      0.151648       231.575       231.726    
  14  0.504203     -0.684776     -0.515109      0.515109       233.251       233.766    
  15  0.342344E-02  -5.67711      -4.27050       4.27050       235.287       239.558    
  16  0.471380     -0.752090     -0.565745      0.565745       236.044       236.609    
  17  0.232484      -1.45893      -1.09745       1.09745       236.725       237.822    
  18  0.529795     -0.635264     -0.477865      0.477865       238.614       239.092    
  19  0.548384E-01  -2.90336      -2.18400       2.18400       234.623       236.807    
  20  0.759160     -0.275543     -0.207272      0.207272       240.350       240.557    
  21  0.658961     -0.417090     -0.313748      0.313748       243.574       243.887    
  22  0.955072E-01  -2.34855      -1.76665       1.76665       244.202       245.969    
  23  0.762274     -0.271449     -0.204192      0.204192       244.750       244.955    
  24  0.595126     -0.518983     -0.390395      0.390395       244.523       244.913    
  25  0.994859     -0.515414E-02 -0.387710E-02  0.387710E-02   244.829       244.833    
  26  0.547413     -0.602551     -0.453258      0.453258       244.286       244.739    
  27  0.206450      -1.57770      -1.18679       1.18679       245.655       246.842    
  28  0.889164     -0.117473     -0.883669E-01  0.883669E-01   246.469       246.557    
  29  0.882620     -0.124861     -0.939242E-01  0.939242E-01   246.707       246.801    
  30  0.273437      -1.29668     -0.975406      0.975406       249.047       250.022    
  31  0.239281      -1.43012      -1.07578       1.07578       249.595       250.671    
  32  0.465716     -0.764179     -0.574839      0.574839       248.986       249.560    
  33  0.624834     -0.470270     -0.353751      0.353751       247.925       248.279    
  34  0.124872      -2.08047      -1.56499       1.56499       250.480       252.045    
  35  0.583860E-01  -2.84068      -2.13685       2.13685       250.929       253.066    
  36  0.605356     -0.501938     -0.377573      0.377573       251.225       251.603    
  37  0.842898     -0.170909     -0.128563      0.128563       250.450       250.579    
  38  0.170482      -1.76913      -1.33079       1.33079       251.965       253.296    
  39  0.631284     -0.460000     -0.346026      0.346026       252.144       252.490    
  40  0.914443     -0.894405E-01 -0.672799E-01  0.672799E-01   251.409       251.476    
  41  0.237545      -1.43740      -1.08126       1.08126       252.214       253.295    
  42  0.128470      -2.05206      -1.54362       1.54362       252.588       254.132    
  43  0.672502E-01  -2.69933      -2.03052       2.03052       252.789       254.820    
  44  0.625851     -0.468643     -0.352528      0.352528       252.943       253.296    
  45  0.289455      -1.23976     -0.932582      0.932582       252.500       253.433    
  46  0.426490     -0.852166     -0.641026      0.641026       253.443       254.084    
  47  0.639309     -0.447367     -0.336524      0.336524       254.031       254.368    
  48  0.930228     -0.723259E-01 -0.544058E-01  0.544058E-01   254.341       254.396    
  49  0.487433     -0.718603     -0.540555      0.540555       253.891       254.432    
  50  0.197582E-01  -3.92419      -2.95189       2.95189       255.115       258.067    
  51  0.391784     -0.937045     -0.704874      0.704874       256.866       257.571    
  52  0.408977E-01  -3.19668      -2.40464       2.40464       257.630       260.035    
  53  0.954108     -0.469781E-01 -0.353384E-01  0.353384E-01   256.554       256.589    
  54  0.422567     -0.861406     -0.647976      0.647976       258.199       258.847    
  55  0.114072      -2.17092      -1.63304       1.63304       259.374       261.007    
  56  0.656945     -0.420155     -0.316053      0.316053       259.496       259.812    
  57  0.181296      -1.70763      -1.28453       1.28453       260.314       261.599    
  58  0.358624      -1.02548     -0.771399      0.771399       260.136       260.907    
  59  0.462004E-02  -5.37735      -4.04501       4.04501       262.275       266.320    
  60  0.951796     -0.494047E-01 -0.371638E-01  0.371638E-01   262.309       262.346    
  61  0.997030     -0.297465E-02 -0.223762E-02  0.223762E-02   262.350       262.353    
  62  0.586399     -0.533754     -0.401506      0.401506       262.297       262.699    
  63  0.775517     -0.254226     -0.191237      0.191237       261.877       262.068    
  64  0.884075     -0.123213     -0.926849E-01  0.926849E-01   253.038       253.130    
loop,thermsimp(1:2)       27  0.154822      0.648180    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    510        266.09          0.88          1.10         23.11          0.02          0.04         25.14
Just calling func    0   0         25.14


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    511        246.65          0.88          1.09         23.12          0.00          0.04         25.14
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3    246.65
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.752231               568
loop is:       27
neval is:      510
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       27      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:   0.752231               568
loop is:       28
neval is:      510


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      568
neval,tstepnext:      510     568

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.852012     -0.160155     -0.120473      0.120473       220.452       220.573    
   2  0.209759      -1.56179      -1.17483       1.17483       225.796       226.971    
   3  0.231672      -1.46243      -1.10009       1.10009       227.988       229.088    
   4  0.552784     -0.592788     -0.445914      0.445914       227.857       228.303    
   5  0.298066      -1.21044     -0.910531      0.910531       229.521       230.432    
   6  0.982229E-01  -2.32052      -1.74556       1.74556       230.239       231.984    
   7  0.513244     -0.667004     -0.501741      0.501741       231.316       231.817    
   8  0.506896     -0.679450     -0.511104      0.511104       231.575       232.086    
   9  0.253686      -1.37166      -1.03180       1.03180       231.342       232.373    
  10  0.464337     -0.767145     -0.577070      0.577070       231.956       232.533    
  11  0.620988     -0.476443     -0.358395      0.358395       232.423       232.782    
  12  0.833370     -0.182278     -0.137115      0.137115       233.369       233.506    
  13  0.536169     -0.623305     -0.468869      0.468869       232.714       233.183    
  14  0.686501E-01  -2.67873      -2.01503       2.01503       233.251       235.266    
  15  0.623564     -0.472305     -0.355282      0.355282       236.044       236.399    
  16  0.329641      -1.10975     -0.834789      0.834789       234.623       235.458    
  17  0.779151     -0.249551     -0.187720      0.187720       236.725       236.912    
  18  0.104603      -2.25758      -1.69822       1.69822       238.614       240.312    
  19  0.483984     -0.725704     -0.545897      0.545897       235.287       235.833    
  20  0.466377E-02  -5.36793      -4.03792       4.03792       240.350       244.388    
  21  0.172152      -1.75938      -1.32346       1.32346       243.574       244.897    
  22  0.178201      -1.72484      -1.29748       1.29748       244.286       245.583    
  23  0.151142      -1.88954      -1.42137       1.42137       244.829       246.250    
  24  0.784508     -0.242699     -0.182566      0.182566       244.523       244.706    
  25  0.821620E-01  -2.49906      -1.87987       1.87987       244.750       246.630    
  26  0.647136     -0.435199     -0.327370      0.327370       244.202       244.529    
  27  0.971377     -0.290411E-01 -0.218456E-01  0.218456E-01   246.469       246.491    
  28  0.461755     -0.772720     -0.581264      0.581264       246.707       247.288    
  29  0.485420     -0.722742     -0.543669      0.543669       245.655       246.199    
  30  0.674473     -0.393823     -0.296246      0.296246       247.925       248.222    
  31  0.166592      -1.79221      -1.34816       1.34816       248.986       250.334    
  32  0.829538     -0.186886     -0.140582      0.140582       249.047       249.187    
  33  0.489716     -0.713930     -0.537041      0.537041       250.450       250.987    
  34  0.604698     -0.503025     -0.378391      0.378391       249.595       249.974    
  35  0.113505      -2.17591      -1.63678       1.63678       251.409       253.046    
  36  0.148871      -1.90468      -1.43276       1.43276       251.225       252.658    
  37  0.882645     -0.124832     -0.939025E-01  0.939025E-01   250.480       250.574    
  38  0.987071     -0.130131E-01 -0.978887E-02  0.978887E-02   252.144       252.153    
  39  0.170536      -1.76881      -1.33055       1.33055       250.929       252.259    
  40  0.390345     -0.940725     -0.707643      0.707643       253.038       253.745    
  41  0.386025     -0.951852     -0.716013      0.716013       252.214       252.930    
  42  0.727498     -0.318144     -0.239318      0.239318       251.965       252.204    
  43  0.953502     -0.476138E-01 -0.358166E-01  0.358166E-01   252.943       252.979    
  44  0.586364     -0.533814     -0.401551      0.401551       252.500       252.902    
  45  0.127618      -2.05871      -1.54863       1.54863       253.443       254.992    
  46  0.949787     -0.515174E-01 -0.387530E-01  0.387530E-01   252.588       252.627    
  47  0.565431E-01  -2.87275      -2.16097       2.16097       254.031       256.192    
  48  0.163563      -1.81056      -1.36196       1.36196       254.341       255.703    
  49  0.698306     -0.359097     -0.270124      0.270124       253.891       254.161    
  50  0.347632      -1.05661     -0.794815      0.794815       252.789       253.584    
  51  0.674462     -0.393840     -0.296259      0.296259       256.554       256.850    
  52  0.207751      -1.57142      -1.18207       1.18207       256.866       258.048    
  53  0.155363      -1.86199      -1.40065       1.40065       255.115       256.516    
  54  0.919929     -0.834587E-01 -0.627802E-01  0.627802E-01   258.199       258.261    
  55  0.138094      -1.97982      -1.48928       1.48928       259.496       260.986    
  56  0.384974     -0.954579     -0.718064      0.718064       257.630       258.348    
  57  0.493523     -0.706185     -0.531214      0.531214       260.136       260.667    
  58  0.528360     -0.637976     -0.479906      0.479906       259.374       259.854    
  59  0.181286      -1.70768      -1.28457       1.28457       260.314       261.599    
  60  0.830089     -0.186222     -0.140082      0.140082       261.877       262.017    
  61  0.647482     -0.434665     -0.326968      0.326968       262.309       262.636    
  62  0.791002     -0.234455     -0.176364      0.176364       262.350       262.527    
  63  0.986772     -0.133161E-01 -0.100168E-01  0.100168E-01   262.297       262.307    
  64  0.211458      -1.55373      -1.16876       1.16876       246.646       247.814    
loop,thermsimp(1:2)       28  0.120473       1.17483    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    512        256.84          0.88          1.08         23.12          0.00          0.04         25.12
Just calling func    0   0         25.12


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    256.84
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.752231               568
loop is:       28
neval is:      511
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       28      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:   0.752231               568
loop is:       29
neval is:      511


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      568
neval,tstepnext:      511     568

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.135635      -1.99779      -1.50280       1.50280       220.452       221.955    
   2  0.466467     -0.762568     -0.573627      0.573627       225.796       226.369    
   3  0.996991     -0.301356E-02 -0.226690E-02  0.226690E-02   227.857       227.860    
   4  0.987682     -0.123943E-01 -0.932338E-02  0.932338E-02   227.988       227.997    
   5  0.890927     -0.115493     -0.868771E-01  0.868771E-01   229.521       229.608    
   6  0.103802      -2.26527      -1.70401       1.70401       231.316       233.020    
   7  0.139960      -1.96640      -1.47919       1.47919       230.239       231.718    
   8  0.695795     -0.362701     -0.272835      0.272835       231.575       231.847    
   9  0.916952     -0.867001E-01 -0.652185E-01  0.652185E-01   231.342       231.407    
  10  0.581368     -0.542371     -0.407988      0.407988       231.956       232.364    
  11  0.187466      -1.67416      -1.25936       1.25936       232.423       233.682    
  12  0.623424E-01  -2.77511      -2.08753       2.08753       232.714       234.801    
  13  0.493048     -0.707150     -0.531940      0.531940       233.369       233.901    
  14  0.713995     -0.336879     -0.253411      0.253411       233.251       233.504    
  15  0.891065     -0.115338     -0.867609E-01  0.867609E-01   234.623       234.709    
  16  0.993625     -0.639581E-02 -0.481113E-02  0.481113E-02   235.287       235.292    
  17  0.783715     -0.243710     -0.183326      0.183326       236.044       236.227    
  18  0.419875     -0.867798     -0.652784      0.652784       236.725       237.378    
  19  0.551915E-01  -2.89695      -2.17917       2.17917       238.614       240.793    
  20  0.119723E-01  -4.42516      -3.32874       3.32874       240.350       243.678    
  21  0.814729E-01  -2.50749      -1.88621       1.88621       244.202       246.088    
  22  0.493283E-01  -3.00926      -2.26366       2.26366       244.523       246.787    
  23  0.292111      -1.23062     -0.925712      0.925712       243.574       244.499    
  24  0.274028      -1.29452     -0.973781      0.973781       244.286       245.259    
  25  0.890535     -0.115933     -0.872082E-01  0.872082E-01   245.655       245.742    
  26  0.533395     -0.628494     -0.472773      0.472773       244.829       245.302    
  27  0.584910     -0.536297     -0.403419      0.403419       246.469       246.872    
  28  0.120755      -2.11400      -1.59021       1.59021       244.750       246.341    
  29  0.129784      -2.04188      -1.53597       1.53597       246.707       248.243    
  30  0.847769     -0.165147     -0.124228      0.124228       246.646       246.770    
  31  0.507636E-02  -5.28316      -3.97416       3.97416       247.925       251.900    
  32  0.616094     -0.484356     -0.364348      0.364348       249.047       249.411    
  33  0.845796     -0.167477     -0.125982      0.125982       249.595       249.721    
  34  0.597816     -0.514471     -0.387001      0.387001       248.986       249.373    
  35  0.857431     -0.153814     -0.115704      0.115704       250.480       250.596    
  36  0.236721      -1.44087      -1.08387       1.08387       250.450       251.534    
  37  0.136539      -1.99114      -1.49780       1.49780       252.144       253.641    
  38  0.221208      -1.50865      -1.13486       1.13486       251.965       253.100    
  39  0.886558     -0.120409     -0.905753E-01  0.905753E-01   250.929       251.019    
  40  0.751951     -0.285084     -0.214449      0.214449       252.588       252.803    
  41  0.753705     -0.282754     -0.212696      0.212696       251.225       251.438    
  42  0.164791      -1.80308      -1.35633       1.35633       252.500       253.857    
  43  0.953278     -0.478482E-01 -0.359929E-01  0.359929E-01   252.214       252.250    
  44  0.331556E-01  -3.40654      -2.56251       2.56251       252.943       255.506    
  45  0.255217      -1.36564      -1.02728       1.02728       251.409       252.436    
  46  0.526999     -0.640556     -0.481846      0.481846       252.789       253.271    
  47  0.395268     -0.928192     -0.698215      0.698215       253.038       253.736    
  48  0.962043     -0.386965E-01 -0.291087E-01  0.291087E-01   253.891       253.920    
  49  0.679414     -0.386524     -0.290756      0.290756       253.443       253.734    
  50  0.170337      -1.76998      -1.33143       1.33143       254.341       255.673    
  51  0.261051      -1.34304      -1.01028       1.01028       254.031       255.041    
  52  0.959147     -0.417113E-01 -0.313765E-01  0.313765E-01   255.115       255.146    
  53  0.811956     -0.208309     -0.156696      0.156696       256.554       256.710    
  54  0.751361     -0.285869     -0.215040      0.215040       256.866       257.081    
  55  0.365259      -1.00715     -0.757609      0.757609       258.199       258.956    
  56  0.828616     -0.187998     -0.141418      0.141418       257.630       257.771    
  57  0.301965      -1.19744     -0.900755      0.900755       259.374       260.275    
  58  0.800135     -0.222974     -0.167728      0.167728       260.136       260.303    
  59  0.144674      -1.93327      -1.45427       1.45427       259.496       260.951    
  60  0.540870     -0.614575     -0.462303      0.462303       260.314       260.777    
  61  0.946134     -0.553715E-01 -0.416522E-01  0.416522E-01   261.877       261.918    
  62  0.601135E-01  -2.81152      -2.11491       2.11491       262.297       264.412    
  63  0.865566     -0.144372     -0.108601      0.108601       262.350       262.459    
  64  0.146294      -1.92214      -1.44589       1.44589       256.842       258.288    
loop,thermsimp(1:2)       29   1.50280      0.573627    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    513        227.24          0.88          1.09         23.12          0.01          0.04         25.13
Just calling func    0   0         25.13


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    227.24
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.752231               568
loop is:       29
neval is:      512
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       29      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:   0.752231               568
loop is:       30
neval is:      512


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      568
neval,tstepnext:      512     568

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.893826     -0.112244     -0.844335E-01  0.844335E-01   220.452       220.537    
   2  0.789139     -0.236813     -0.178138      0.178138       225.796       225.974    
   3  0.113205      -2.17856      -1.63878       1.63878       227.857       229.496    
   4  0.932851     -0.695093E-01 -0.522870E-01  0.522870E-01   227.988       228.040    
   5  0.580843     -0.543275     -0.408668      0.408668       229.521       229.930    
   6  0.477157     -0.739910     -0.556583      0.556583       231.342       231.898    
   7  0.813629     -0.206251     -0.155148      0.155148       230.239       230.394    
   8  0.727881     -0.317617     -0.238921      0.238921       231.575       231.813    
   9  0.169642      -1.77406      -1.33451       1.33451       231.956       233.291    
  10  0.563630     -0.573357     -0.431297      0.431297       231.316       231.747    
  11  0.317079      -1.14861     -0.864017      0.864017       233.251       234.115    
  12  0.902994E-01  -2.40462      -1.80883       1.80883       232.423       234.232    
  13  0.611698     -0.491517     -0.369734      0.369734       233.369       233.738    
  14  0.131317E-01  -4.33273      -3.25921       3.25921       234.623       237.882    
  15  0.626257     -0.467994     -0.352040      0.352040       232.714       233.066    
  16  0.158325      -1.84311      -1.38644       1.38644       235.287       236.674    
  17  0.138715E-01  -4.27792      -3.21798       3.21798       236.044       239.262    
  18  0.294347      -1.22299     -0.919974      0.919974       236.725       237.645    
  19  0.419766E-02  -5.47323      -4.11713       4.11713       238.614       242.731    
  20  0.674961     -0.393101     -0.295703      0.295703       240.350       240.645    
  21  0.440021     -0.820933     -0.617531      0.617531       243.574       244.191    
  22  0.224595      -1.49346      -1.12342       1.12342       244.286       245.409    
  23  0.406007     -0.901384     -0.678049      0.678049       244.829       245.507    
  24  0.839997     -0.174357     -0.131156      0.131156       245.655       245.786    
  25  0.633085     -0.457151     -0.343883      0.343883       244.202       244.546    
  26  0.931306     -0.711679E-01 -0.535347E-01  0.535347E-01   244.750       244.804    
  27  0.844161E-01  -2.47200      -1.85951       1.85951       246.646       248.505    
  28  0.206778      -1.57611      -1.18560       1.18560       244.523       245.709    
  29  0.883296     -0.124095     -0.933480E-01  0.933480E-01   246.469       246.562    
  30  0.365391      -1.00679     -0.757337      0.757337       246.707       247.465    
  31  0.708566     -0.344513     -0.259153      0.259153       248.986       249.245    
  32  0.955974     -0.450251E-01 -0.338692E-01  0.338692E-01   249.047       249.080    
  33  0.726164     -0.319980     -0.240699      0.240699       249.595       249.836    
  34  0.318762      -1.14331     -0.860033      0.860033       250.480       251.340    
  35  0.622782     -0.473559     -0.356226      0.356226       250.929       251.285    
  36  0.869570E-01  -2.44234      -1.83720       1.83720       251.225       253.062    
  37  0.281748E-01  -3.56933      -2.68496       2.68496       250.450       253.135    
  38  0.238758      -1.43231      -1.07743       1.07743       247.925       249.003    
  39  0.655045     -0.423052     -0.318232      0.318232       252.214       252.532    
  40  0.337836      -1.08519     -0.816317      0.816317       251.409       252.225    
  41  0.625010     -0.469988     -0.353539      0.353539       252.588       252.942    
  42  0.346197E-01  -3.36333      -2.53000       2.53000       251.965       254.495    
  43  0.378697     -0.971019     -0.730430      0.730430       252.789       253.520    
  44  0.714474     -0.336208     -0.252906      0.252906       252.144       252.396    
  45  0.729924     -0.314815     -0.236814      0.236814       253.443       253.680    
  46  0.184188      -1.69180      -1.27262       1.27262       253.038       254.310    
  47  0.909154     -0.952407E-01 -0.716430E-01  0.716430E-01   252.500       252.572    
  48  0.270892E-01  -3.60862      -2.71452       2.71452       253.891       256.606    
  49  0.746152     -0.292826     -0.220273      0.220273       254.031       254.251    
  50  0.495962     -0.701256     -0.527506      0.527506       255.115       255.643    
  51  0.308769      -1.17516     -0.883993      0.883993       252.943       253.827    
  52  0.684500     -0.379067     -0.285146      0.285146       254.341       254.626    
  53  0.695013     -0.363825     -0.273680      0.273680       256.554       256.827    
  54  0.443613     -0.812804     -0.611416      0.611416       256.866       257.477    
  55  0.930167     -0.723907E-01 -0.544546E-01  0.544546E-01   257.630       257.684    
  56  0.688367     -0.373433     -0.280908      0.280908       256.842       257.123    
  57  0.328237      -1.11402     -0.838000      0.838000       258.199       259.037    
  58  0.665088E-01  -2.71042      -2.03886       2.03886       259.374       261.413    
  59  0.227119E-01  -3.78486      -2.84709       2.84709       260.136       262.983    
  60  0.662765E-01  -2.71392      -2.04149       2.04149       260.314       262.356    
  61  0.220187      -1.51328      -1.13833       1.13833       259.496       260.635    
  62  0.619193     -0.479338     -0.360573      0.360573       261.877       262.237    
  63  0.211357      -1.55420      -1.16912       1.16912       262.350       263.520    
  64  0.431645     -0.840152     -0.631988      0.631988       227.244       227.876    
loop,thermsimp(1:2)       30  0.844335E-01  0.178138    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    514        237.53          0.88          1.09         23.12          0.02          0.04         25.15
Just calling func    0   0         25.15


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    237.53
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.752231               568
loop is:       30
neval is:      513
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       30      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:   0.752231               568
loop is:       31
neval is:      513


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      568
neval,tstepnext:      513     568

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.456164E-01  -3.08749      -2.32250       2.32250       220.452       222.775    
   2  0.550510     -0.596911     -0.449015      0.449015       225.796       226.245    
   3  0.599183     -0.512188     -0.385283      0.385283       227.244       227.630    
   4  0.463354     -0.769263     -0.578664      0.578664       227.988       228.567    
   5  0.455992     -0.785279     -0.590711      0.590711       227.857       228.448    
   6  0.198149      -1.61873      -1.21766       1.21766       229.521       230.739    
   7  0.955046     -0.459959E-01 -0.345995E-01  0.345995E-01   230.239       230.273    
   8  0.743730     -0.296077     -0.222718      0.222718       231.316       231.538    
   9  0.633042     -0.457219     -0.343934      0.343934       231.575       231.919    
  10  0.870677     -0.138485     -0.104172      0.104172       231.342       231.446    
  11  0.546582     -0.604070     -0.454400      0.454400       232.714       233.168    
  12  0.292723      -1.22853     -0.924138      0.924138       231.956       232.880    
  13  0.805221E-01  -2.51922      -1.89504       1.89504       233.369       235.264    
  14  0.658185     -0.418269     -0.314635      0.314635       233.251       233.566    
  15  0.974478     -0.258538E-01 -0.194480E-01  0.194480E-01   232.423       232.443    
  16  0.268855      -1.31358     -0.988118      0.988118       235.287       236.275    
  17  0.494484     -0.704241     -0.529752      0.529752       236.725       237.254    
  18  0.982953     -0.171941E-01 -0.129340E-01  0.129340E-01   234.623       234.636    
  19  0.703308     -0.351960     -0.264755      0.264755       236.044       236.308    
  20  0.671580     -0.398123     -0.299480      0.299480       240.350       240.649    
  21  0.210384      -1.55882      -1.17259       1.17259       238.614       239.787    
  22  0.837290     -0.177585     -0.133585      0.133585       243.574       243.707    
  23  0.180021      -1.71468      -1.28984       1.28984       244.202       245.492    
  24  0.617844     -0.481519     -0.362214      0.362214       244.750       245.113    
  25  0.524065     -0.646139     -0.486046      0.486046       244.286       244.772    
  26  0.854055     -0.157759     -0.118671      0.118671       244.829       244.948    
  27  0.411337     -0.888343     -0.668239      0.668239       244.523       245.191    
  28  0.981489     -0.186841E-01 -0.140548E-01  0.140548E-01   245.655       245.669    
  29  0.646949     -0.435488     -0.327587      0.327587       246.469       246.796    
  30  0.350244      -1.04912     -0.789184      0.789184       246.707       247.496    
  31  0.655455     -0.422425     -0.317761      0.317761       246.646       246.963    
  32  0.577459     -0.549117     -0.413063      0.413063       247.925       248.338    
  33  0.790874     -0.234617     -0.176486      0.176486       249.047       249.223    
  34  0.654199     -0.424344     -0.319205      0.319205       248.986       249.305    
  35  0.571446     -0.559585     -0.420937      0.420937       249.595       250.016    
  36  0.324671      -1.12494     -0.846217      0.846217       250.929       251.775    
  37  0.310261E-01  -3.47293      -2.61244       2.61244       250.480       253.093    
  38  0.113505      -2.17591      -1.63679       1.63679       251.409       253.046    
  39  0.690688     -0.370066     -0.278375      0.278375       252.144       252.422    
  40  0.336841      -1.08814     -0.818535      0.818535       252.214       253.032    
  41  0.157762E-01  -4.14925      -3.12120       3.12120       252.500       255.621    
  42  0.692953     -0.366793     -0.275913      0.275913       252.588       252.864    
  43  0.917810     -0.857647E-01 -0.645148E-01  0.645148E-01   251.225       251.290    
  44  0.930239     -0.723139E-01 -0.543968E-01  0.543968E-01   250.450       250.505    
  45  0.213939      -1.54206      -1.15999       1.15999       252.789       253.949    
  46  0.191222      -1.65432      -1.24443       1.24443       253.443       254.688    
  47  0.509241     -0.674835     -0.507631      0.507631       252.943       253.451    
  48  0.482746     -0.728264     -0.547823      0.547823       254.031       254.579    
  49  0.558324E-01  -2.88540      -2.17049       2.17049       253.038       255.208    
  50  0.805385     -0.216435     -0.162809      0.162809       251.965       252.128    
  51  0.427474E-01  -3.15245      -2.37137       2.37137       254.341       256.712    
  52  0.202566      -1.59669      -1.20108       1.20108       255.115       256.316    
  53  0.426255     -0.852718     -0.641441      0.641441       253.891       254.533    
  54  0.838523     -0.176113     -0.132478      0.132478       256.554       256.686    
  55  0.758218     -0.276785     -0.208206      0.208206       256.842       257.050    
  56  0.667220     -0.404635     -0.304379      0.304379       256.866       257.170    
  57  0.232530      -1.45874      -1.09731       1.09731       257.630       258.727    
  58  0.878357     -0.129702     -0.975662E-01  0.975662E-01   258.199       258.296    
  59  0.996822     -0.318328E-02 -0.239456E-02  0.239456E-02   259.496       259.499    
  60  0.337382      -1.08654     -0.817328      0.817328       259.374       260.191    
  61  0.107960      -2.22600      -1.67446       1.67446       261.877       263.551    
  62  0.791449     -0.233889     -0.175939      0.175939       260.314       260.490    
  63  0.517438E-01  -2.96145      -2.22770       2.22770       260.136       262.363    
  64  0.491710     -0.709867     -0.533984      0.533984       237.534       238.068    
loop,thermsimp(1:2)       31   2.32250      0.449015    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    515        228.74          0.87          1.09         23.11          0.04          0.04         25.15
Just calling func    0   0         25.15


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    228.74
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.752231               568
loop is:       31
neval is:      514
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       31      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:   0.752231               568
loop is:       32
neval is:      514


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      568
neval,tstepnext:      514     568

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.195290      -1.63327      -1.22860       1.22860       220.452       221.681    
   2  0.163951      -1.80819      -1.36017       1.36017       225.796       227.156    
   3  0.419868     -0.867814     -0.652797      0.652797       227.244       227.897    
   4  0.734040     -0.309192     -0.232584      0.232584       227.857       228.090    
   5  0.606079     -0.500745     -0.376676      0.376676       227.988       228.365    
   6  0.535424     -0.624696     -0.469915      0.469915       230.239       230.709    
   7  0.280299      -1.27190     -0.956761      0.956761       229.521       230.478    
   8  0.113078      -2.17968      -1.63962       1.63962       231.342       232.981    
   9  0.793508     -0.231291     -0.173984      0.173984       231.316       231.490    
  10  0.310674      -1.16901     -0.879366      0.879366       231.575       232.454    
  11  0.727780     -0.317757     -0.239027      0.239027       232.423       232.662    
  12  0.785018     -0.242049     -0.182076      0.182076       231.956       232.138    
  13  0.544769     -0.607394     -0.456901      0.456901       232.714       233.171    
  14  0.956533     -0.444404E-01 -0.334294E-01  0.334294E-01   233.251       233.284    
  15  0.429201E-01  -3.14842      -2.36834       2.36834       234.623       236.991    
  16  0.521359     -0.651317     -0.489941      0.489941       233.369       233.859    
  17  0.721055     -0.327040     -0.246009      0.246009       235.287       235.533    
  18  0.211580E-01  -3.85574      -2.90041       2.90041       236.044       238.944    
  19  0.481395     -0.731068     -0.549932      0.549932       236.725       237.275    
  20  0.570335     -0.561531     -0.422401      0.422401       237.534       237.956    
  21  0.870915     -0.138211     -0.103967      0.103967       238.614       238.718    
  22  0.233853      -1.45306      -1.09304       1.09304       240.350       241.443    
  23  0.307270      -1.18003     -0.887653      0.887653       243.574       244.461    
  24  0.394628     -0.929811     -0.699432      0.699432       244.286       244.985    
  25  0.104262      -2.26085      -1.70068       1.70068       244.829       246.530    
  26  0.473629     -0.747330     -0.562165      0.562165       244.750       245.313    
  27  0.376754     -0.976162     -0.734299      0.734299       244.523       245.257    
  28  0.940665     -0.611679E-01 -0.460124E-01  0.460124E-01   244.202       244.248    
  29  0.541404     -0.613589     -0.461560      0.461560       245.655       246.117    
  30  0.294748      -1.22163     -0.918950      0.918950       246.469       247.388    
  31  0.910904     -0.933181E-01 -0.701967E-01  0.701967E-01   246.646       246.716    
  32  0.498988     -0.695173     -0.522931      0.522931       246.707       247.230    
  33  0.791968     -0.233234     -0.175446      0.175446       247.925       248.101    
  34  0.699447     -0.357465     -0.268896      0.268896       249.047       249.315    
  35  0.755221E-01  -2.58333      -1.94326       1.94326       248.986       250.929    
  36  0.855130E-01  -2.45909      -1.84980       1.84980       249.595       251.445    
  37  0.657852     -0.418775     -0.315015      0.315015       250.450       250.765    
  38  0.967250     -0.332985E-01 -0.250482E-01  0.250482E-01   251.225       251.250    
  39  0.628707     -0.464089     -0.349102      0.349102       250.929       251.278    
  40  0.646567E-01  -2.73866      -2.06011       2.06011       251.965       254.025    
  41  0.607154     -0.498973     -0.375343      0.375343       252.144       252.519    
  42  0.666321     -0.405983     -0.305393      0.305393       252.588       252.894    
  43  0.749880     -0.287841     -0.216523      0.216523       252.214       252.430    
  44  0.683383     -0.380700     -0.286374      0.286374       251.409       251.695    
  45  0.658232     -0.418198     -0.314582      0.314582       250.480       250.795    
  46  0.345395      -1.06307     -0.799672      0.799672       252.943       253.743    
  47  0.220689      -1.51100      -1.13662       1.13662       252.789       253.926    
  48  0.428774     -0.846826     -0.637008      0.637008       253.891       254.528    
  49  0.660075     -0.415402     -0.312478      0.312478       254.031       254.344    
  50  0.795680E-01  -2.53114      -1.90400       1.90400       253.443       255.347    
  51  0.589123     -0.529120     -0.398021      0.398021       253.038       253.436    
  52  0.721133     -0.326932     -0.245928      0.245928       252.500       252.746    
  53  0.818337     -0.200482     -0.150808      0.150808       255.115       255.266    
  54  0.825511     -0.191753     -0.144243      0.144243       256.554       256.698    
  55  0.828614     -0.188001     -0.141420      0.141420       254.341       254.483    
  56  0.214019      -1.54169      -1.15971       1.15971       256.842       258.001    
  57  0.303444      -1.19256     -0.897080      0.897080       256.866       257.763    
  58  0.635557     -0.453254     -0.340952      0.340952       258.199       258.540    
  59  0.609922     -0.494425     -0.371922      0.371922       257.630       258.002    
  60  0.755661     -0.280163     -0.210747      0.210747       259.496       259.707    
  61  0.325082      -1.12368     -0.845265      0.845265       259.374       260.219    
  62  0.953975     -0.471174E-01 -0.354432E-01  0.354432E-01   260.314       260.350    
  63  0.164378E-01  -4.10817      -3.09029       3.09029       260.136       263.226    
  64  0.878216     -0.129863     -0.976869E-01  0.976869E-01   228.743       228.841    
loop,thermsimp(1:2)       32   1.22860       1.36017    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    516        254.61          0.88          1.09         23.15          0.00          0.04         25.16
Just calling func    0   0         25.15


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    254.61
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.752231               568
loop is:       32
neval is:      515
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       32      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:   0.752231               568
loop is:       33
neval is:      515


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      568
neval,tstepnext:      515     568

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.819000E-01  -2.50226      -1.88227       1.88227       220.452       222.335    
   2  0.451517     -0.795142     -0.598131      0.598131       225.796       226.394    
   3  0.994192E-01  -2.30841      -1.73646       1.73646       227.244       228.981    
   4  0.746841     -0.291903     -0.219579      0.219579       227.857       228.077    
   5  0.611746     -0.491439     -0.369676      0.369676       227.988       228.358    
   6  0.270477      -1.30757     -0.983592      0.983592       228.743       229.727    
   7  0.910534     -0.937242E-01 -0.705022E-01  0.705022E-01   229.521       229.592    
   8  0.942878     -0.588187E-01 -0.442452E-01  0.442452E-01   230.239       230.283    
   9  0.485061     -0.723481     -0.544224      0.544224       231.316       231.860    
  10  0.680127     -0.385476     -0.289967      0.289967       231.956       232.246    
  11  0.568210     -0.565264     -0.425209      0.425209       231.575       232.000    
  12  0.290478      -1.23623     -0.929930      0.929930       232.423       233.353    
  13  0.759168E-01  -2.57812      -1.93934       1.93934       231.342       233.281    
  14  0.724808     -0.321849     -0.242105      0.242105       232.714       232.956    
  15  0.896740     -0.108989     -0.819852E-01  0.819852E-01   233.251       233.333    
  16  0.484129     -0.725403     -0.545670      0.545670       233.369       233.914    
  17  0.841169     -0.172963     -0.130108      0.130108       235.287       235.417    
  18  0.124231      -2.08561      -1.56886       1.56886       234.623       236.192    
  19  0.512837     -0.667798     -0.502338      0.502338       236.725       237.227    
  20  0.659640     -0.416061     -0.312974      0.312974       237.534       237.847    
  21  0.775478     -0.254276     -0.191274      0.191274       238.614       238.805    
  22  0.514721     -0.664130     -0.499579      0.499579       236.044       236.543    
  23  0.642501     -0.442387     -0.332777      0.332777       240.350       240.682    
  24  0.372010     -0.988836     -0.743833      0.743833       244.202       244.946    
  25  0.630365     -0.461456     -0.347121      0.347121       243.574       243.921    
  26  0.697349     -0.360469     -0.271156      0.271156       244.286       244.557    
  27  0.702368     -0.353297     -0.265761      0.265761       244.523       244.789    
  28  0.904702     -0.100150     -0.753358E-01  0.753358E-01   244.750       244.826    
  29  0.613508     -0.488561     -0.367511      0.367511       245.655       246.023    
  30  0.399820     -0.916740     -0.689600      0.689600       244.829       245.519    
  31  0.450706     -0.796939     -0.599482      0.599482       246.646       247.245    
  32  0.491730     -0.709826     -0.533953      0.533953       246.707       247.241    
  33  0.859232     -0.151717     -0.114126      0.114126       246.469       246.583    
  34  0.500784     -0.691581     -0.520229      0.520229       247.925       248.446    
  35  0.423737     -0.858643     -0.645898      0.645898       249.047       249.692    
  36  0.120442      -2.11658      -1.59216       1.59216       250.450       252.043    
  37  0.954439     -0.466313E-01 -0.350775E-01  0.350775E-01   250.480       250.515    
  38  0.798812     -0.224629     -0.168973      0.168973       248.986       249.155    
  39  0.430786     -0.842144     -0.633486      0.633486       251.225       251.859    
  40  0.414903     -0.879710     -0.661745      0.661745       250.929       251.591    
  41  0.508906     -0.675492     -0.508126      0.508126       249.595       250.103    
  42  0.201745      -1.60075      -1.20414       1.20414       251.409       252.613    
  43  0.789439E-01  -2.53902      -1.90993       1.90993       252.214       254.124    
  44  0.300237      -1.20318     -0.905071      0.905071       252.144       253.049    
  45  0.325303      -1.12300     -0.844753      0.844753       252.500       253.345    
  46  0.237964      -1.43564      -1.07993       1.07993       252.588       253.668    
  47  0.453987     -0.789687     -0.594027      0.594027       253.038       253.632    
  48  0.984013E-01  -2.31870      -1.74420       1.74420       252.943       254.688    
  49  0.477956     -0.738237     -0.555325      0.555325       252.789       253.345    
  50  0.604552     -0.503268     -0.378574      0.378574       251.965       252.343    
  51  0.660239     -0.415153     -0.312291      0.312291       254.031       254.343    
  52  0.549986     -0.597862     -0.449730      0.449730       254.341       254.791    
  53  0.243566      -1.41237      -1.06243       1.06243       253.891       254.954    
  54  0.336725      -1.08849     -0.818795      0.818795       255.115       255.934    
  55  0.897543     -0.108094     -0.813115E-01  0.813115E-01   253.443       253.525    
  56  0.922315     -0.808690E-01 -0.608321E-01  0.608321E-01   256.554       256.615    
  57  0.155313      -1.86231      -1.40089       1.40089       256.866       258.267    
  58  0.722353     -0.325241     -0.244656      0.244656       256.842       257.086    
  59  0.274886      -1.29140     -0.971430      0.971430       257.630       258.601    
  60  0.640508     -0.445493     -0.335114      0.335114       258.199       258.534    
  61  0.782502     -0.245259     -0.184491      0.184491       259.496       259.681    
  62  0.971647     -0.287629E-01 -0.216364E-01  0.216364E-01   259.374       259.396    
  63  0.712225     -0.339361     -0.255278      0.255278       260.314       260.570    
  64  0.928850     -0.738077E-01 -0.555205E-01  0.555205E-01   254.608       254.664    
loop,thermsimp(1:2)       33   1.88227      0.598131    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    517        250.66          0.86          1.09         23.11          0.04          0.05         25.14
Just calling func    0   0         25.14


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    250.66
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.752231               568
loop is:       33
neval is:      516
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       33      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:   0.752231               568
loop is:       34
neval is:      516


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      568
neval,tstepnext:      516     568

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.981444     -0.187299E-01 -0.140892E-01  0.140892E-01   220.452       220.467    
   2  0.357031      -1.02993     -0.774747      0.774747       225.796       226.571    
   3  0.350447      -1.04855     -0.788748      0.788748       227.857       228.646    
   4  0.189989      -1.66079      -1.24930       1.24930       227.988       229.237    
   5  0.587578     -0.531746     -0.399996      0.399996       227.244       227.644    
   6  0.114991      -2.16291      -1.62700       1.62700       229.521       231.148    
   7  0.657381     -0.419492     -0.315555      0.315555       228.743       229.059    
   8  0.641189E-02  -5.04960      -3.79847       3.79847       230.239       234.037    
   9  0.968794     -0.317033E-01 -0.238482E-01  0.238482E-01   231.316       231.340    
  10  0.503328E-02  -5.29168      -3.98057       3.98057       231.575       235.555    
  11  0.829431     -0.187016     -0.140679      0.140679       231.956       232.097    
  12  0.191311      -1.65386      -1.24408       1.24408       232.714       233.958    
  13  0.196005      -1.62961      -1.22585       1.22585       231.342       232.567    
  14  0.336490      -1.08919     -0.819319      0.819319       233.251       234.070    
  15  0.149023E-01  -4.20624      -3.16406       3.16406       232.423       235.587    
  16  0.125271E-01  -4.37986      -3.29467       3.29467       233.369       236.663    
  17  0.414930     -0.879646     -0.661697      0.661697       235.287       235.949    
  18  0.262487      -1.33755      -1.00615       1.00615       234.623       235.629    
  19  0.195281      -1.63332      -1.22863       1.22863       236.044       237.272    
  20  0.143722      -1.93988      -1.45923       1.45923       236.725       238.184    
  21  0.438997     -0.823262     -0.619283      0.619283       237.534       238.153    
  22  0.824417     -0.193079     -0.145240      0.145240       238.614       238.759    
  23  0.549781     -0.598236     -0.450012      0.450012       240.350       240.800    
  24  0.551873E-01  -2.89702      -2.17923       2.17923       243.574       245.753    
  25  0.934834     -0.673864E-01 -0.506901E-01  0.506901E-01   244.286       244.336    
  26  0.928568     -0.741115E-01 -0.557490E-01  0.557490E-01   244.523       244.579    
  27  0.941294     -0.604999E-01 -0.455099E-01  0.455099E-01   244.750       244.796    
  28  0.322815      -1.13067     -0.850528      0.850528       244.202       245.052    
  29  0.298431      -1.20922     -0.909610      0.909610       244.829       245.739    
  30  0.977329     -0.229318E-01 -0.172500E-01  0.172500E-01   245.655       245.672    
  31  0.513921     -0.665686     -0.500750      0.500750       246.469       246.969    
  32  0.235108      -1.44771      -1.08901       1.08901       246.707       247.796    
  33  0.779842     -0.248665     -0.187053      0.187053       246.646       246.833    
  34  0.297000E-01  -3.51661      -2.64530       2.64530       247.925       250.571    
  35  0.779190E-02  -4.85467      -3.65183       3.65183       248.986       252.637    
  36  0.559158     -0.581323     -0.437289      0.437289       249.047       249.484    
  37  0.125647      -2.07428      -1.56034       1.56034       249.595       251.156    
  38  0.142977      -1.94507      -1.46314       1.46314       250.480       251.944    
  39  0.923378E-01  -2.38230      -1.79204       1.79204       250.929       252.721    
  40  0.813591     -0.206297     -0.155183      0.155183       251.225       251.380    
  41  0.206767      -1.57616      -1.18564       1.18564       250.450       251.636    
  42  0.955262     -0.457693E-01 -0.344291E-01  0.344291E-01   251.965       251.999    
  43  0.178167      -1.72503      -1.29762       1.29762       251.409       252.707    
  44  0.246986      -1.39843      -1.05194       1.05194       252.144       253.195    
  45  0.568163     -0.565348     -0.425272      0.425272       252.789       253.215    
  46  0.742294     -0.298010     -0.224172      0.224172       252.500       252.724    
  47  0.888804E-01  -2.42046      -1.82075       1.82075       253.443       255.264    
  48  0.276498      -1.28555     -0.967031      0.967031       253.038       254.005    
  49  0.284239      -1.25794     -0.946262      0.946262       252.588       253.535    
  50  0.585524E-01  -2.83783      -2.13471       2.13471       252.214       254.348    
  51  0.223819      -1.49692      -1.12603       1.12603       254.031       255.157    
  52  0.910722     -0.935177E-01 -0.703469E-01  0.703469E-01   254.608       254.679    
  53  0.930723     -0.717934E-01 -0.540052E-01  0.540052E-01   252.943       252.997    
  54  0.605897E-01  -2.80363      -2.10898       2.10898       254.341       256.450    
  55  0.537138     -0.621501     -0.467512      0.467512       253.891       254.359    
  56  0.731457     -0.312717     -0.235236      0.235236       255.115       255.350    
  57  0.333283      -1.09876     -0.826525      0.826525       256.554       257.380    
  58  0.943934     -0.576988E-01 -0.434028E-01  0.434028E-01   256.842       256.885    
  59  0.959947E-01  -2.34346      -1.76283       1.76283       256.866       258.629    
  60  0.683918     -0.379917     -0.285785      0.285785       258.199       258.484    
  61  0.456067     -0.785115     -0.590588      0.590588       257.630       258.221    
  62  0.625009     -0.469989     -0.353540      0.353540       259.374       259.728    
  63  0.938257     -0.637315E-01 -0.479408E-01  0.479408E-01   259.496       259.544    
  64  0.202957      -1.59476      -1.19963       1.19963       250.658       251.858    
loop,thermsimp(1:2)       34  0.140892E-01  0.774747    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    518        239.00          0.88          1.09         23.09          0.05          0.04         25.14
Just calling func    0   0         25.15


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    239.00
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.752231               568
loop is:       34
neval is:      517
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       34      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:   0.752231               568
loop is:       35
neval is:      517


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      568
neval,tstepnext:      517     568

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.946856E-01  -2.35719      -1.77315       1.77315       220.452       222.226    
   2  0.756296E-01  -2.58191      -1.94219       1.94219       225.796       227.738    
   3  0.561067     -0.577915     -0.434726      0.434726       227.244       227.679    
   4  0.216838      -1.52860      -1.14986       1.14986       227.857       229.007    
   5  0.314923      -1.15543     -0.869148      0.869148       228.743       229.612    
   6  0.142515      -1.94831      -1.46558       1.46558       227.988       229.453    
   7  0.847169E-01  -2.46844      -1.85684       1.85684       229.521       231.378    
   8  0.526542     -0.641424     -0.482499      0.482499       231.316       231.798    
   9  0.732157     -0.311761     -0.234516      0.234516       231.956       232.191    
  10  0.916925     -0.867295E-01 -0.652406E-01  0.652406E-01   231.342       231.407    
  11  0.212460      -1.54900      -1.16521       1.16521       232.714       233.879    
  12  0.536257     -0.623142     -0.468746      0.468746       230.239       230.708    
  13  0.366591      -1.00351     -0.754870      0.754870       233.251       234.006    
  14  0.880705     -0.127033     -0.955582E-01  0.955582E-01   231.575       231.670    
  15  0.217460      -1.52574      -1.14771       1.14771       232.423       233.571    
  16  0.382542     -0.960916     -0.722831      0.722831       234.623       235.346    
  17  0.322523      -1.13158     -0.851211      0.851211       235.287       236.139    
  18  0.621048     -0.476347     -0.358323      0.358323       233.369       233.727    
  19  0.968083     -0.324370E-01 -0.244001E-01  0.244001E-01   236.044       236.068    
  20  0.834423     -0.181015     -0.136165      0.136165       237.534       237.670    
  21  0.822993     -0.194808     -0.146541      0.146541       236.725       236.871    
  22  0.269825      -1.30998     -0.985408      0.985408       238.614       239.599    
  23  0.752085     -0.284906     -0.214315      0.214315       240.350       240.564    
  24  0.562833     -0.574772     -0.432362      0.432362       244.286       244.718    
  25  0.816806     -0.202354     -0.152217      0.152217       244.523       244.675    
  26  0.912682     -0.913679E-01 -0.687298E-01  0.687298E-01   244.750       244.819    
  27  0.318966      -1.14267     -0.859553      0.859553       244.202       245.061    
  28  0.974130E-01  -2.32880      -1.75179       1.75179       245.655       247.407    
  29  0.989500     -0.105555E-01 -0.794016E-02  0.794016E-02   244.829       244.837    
  30  0.632994     -0.457295     -0.343991      0.343991       243.574       243.918    
  31  0.490860     -0.711597     -0.535285      0.535285       246.646       247.181    
  32  0.855011     -0.156641     -0.117830      0.117830       246.469       246.586    
  33  0.208926E-01  -3.86836      -2.90990       2.90990       246.707       249.617    
  34  0.629123     -0.463428     -0.348605      0.348605       249.047       249.395    
  35  0.520337     -0.653278     -0.491416      0.491416       247.925       248.417    
  36  0.860508     -0.150232     -0.113009      0.113009       249.595       249.708    
  37  0.703334     -0.351923     -0.264728      0.264728       251.225       251.490    
  38  0.982718     -0.174329E-01 -0.131136E-01  0.131136E-01   250.450       250.464    
  39  0.170183      -1.77088      -1.33211       1.33211       250.658       251.990    
  40  0.687538     -0.374638     -0.281814      0.281814       250.480       250.762    
  41  0.469943E-01  -3.05773      -2.30012       2.30012       251.965       254.265    
  42  0.436271     -0.829491     -0.623969      0.623969       248.986       249.610    
  43  0.739146     -0.302260     -0.227369      0.227369       251.409       251.636    
  44  0.986288     -0.138071E-01 -0.103861E-01  0.103861E-01   250.929       250.939    
  45  0.670480     -0.399761     -0.300713      0.300713       252.500       252.801    
  46  0.280759      -1.27026     -0.955527      0.955527       252.943       253.899    
  47  0.680423     -0.385041     -0.289640      0.289640       252.144       252.433    
  48  0.424121     -0.857736     -0.645216      0.645216       252.789       253.435    
  49  0.640263     -0.445876     -0.335402      0.335402       252.588       252.924    
  50  0.399483     -0.917585     -0.690236      0.690236       253.038       253.728    
  51  0.645429E-01  -2.74043      -2.06143       2.06143       252.214       254.275    
  52  0.337576      -1.08597     -0.816896      0.816896       253.891       254.708    
  53  0.197916      -1.61991      -1.21855       1.21855       254.608       255.827    
  54  0.270509      -1.30745     -0.983505      0.983505       254.031       255.015    
  55  0.825088     -0.192265     -0.144628      0.144628       253.443       253.588    
  56  0.514320     -0.664909     -0.500165      0.500165       255.115       255.615    
  57  0.505882     -0.681452     -0.512609      0.512609       254.341       254.854    
  58  0.461952     -0.772293     -0.580943      0.580943       256.842       257.423    
  59  0.599831     -0.511107     -0.384470      0.384470       256.554       256.938    
  60  0.616915     -0.483025     -0.363346      0.363346       257.630       257.993    
  61  0.332959      -1.09974     -0.827256      0.827256       258.199       259.026    
  62  0.494622E-01  -3.00655      -2.26162       2.26162       256.866       259.128    
  63  0.669027     -0.401932     -0.302345      0.302345       259.496       259.799    
  64  0.674931     -0.393146     -0.295736      0.295736       239.000       239.296    
loop,thermsimp(1:2)       35   1.77315       1.94219    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    519        248.98          0.88          1.09         23.07          0.05          0.05         25.13
Just calling func    0   0         25.13


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    248.98
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.752231               568
loop is:       35
neval is:      518
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       35      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:   0.752231               568
loop is:       36
neval is:      518


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      568
neval,tstepnext:      518     568

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.102610      -2.27682      -1.71270       1.71270       220.452       222.165    
   2  0.682356     -0.382203     -0.287505      0.287505       227.244       227.532    
   3  0.177286      -1.72999      -1.30135       1.30135       225.796       227.097    
   4  0.705484     -0.348871     -0.262431      0.262431       227.857       228.120    
   5  0.700105     -0.356525     -0.268189      0.268189       227.988       228.256    
   6  0.502373E-01  -2.99100      -2.24992       2.24992       228.743       230.993    
   7  0.513397     -0.666706     -0.501517      0.501517       230.239       230.740    
   8  0.803947     -0.218222     -0.164153      0.164153       229.521       229.685    
   9  0.433536     -0.835780     -0.628700      0.628700       231.342       231.970    
  10  0.469536     -0.756009     -0.568694      0.568694       231.575       232.143    
  11  0.312394      -1.16349     -0.875214      0.875214       231.316       232.191    
  12  0.971867     -0.285367E-01 -0.214662E-01  0.214662E-01   231.956       231.978    
  13  0.869634     -0.139683     -0.105074      0.105074       232.423       232.528    
  14  0.415775     -0.877610     -0.660166      0.660166       233.369       234.029    
  15  0.657149     -0.419844     -0.315820      0.315820       232.714       233.030    
  16  0.517026     -0.659662     -0.496218      0.496218       233.251       233.747    
  17  0.845021     -0.168394     -0.126671      0.126671       234.623       234.749    
  18  0.646794E-01  -2.73831      -2.05984       2.05984       236.044       238.104    
  19  0.490710     -0.711902     -0.535515      0.535515       235.287       235.823    
  20  0.935557     -0.666133E-01 -0.501086E-01  0.501086E-01   236.725       236.775    
  21  0.155562      -1.86071      -1.39969       1.39969       237.534       238.933    
  22  0.739793     -0.301384     -0.226711      0.226711       239.000       239.227    
  23  0.195416      -1.63263      -1.22811       1.22811       238.614       239.842    
  24  0.679649E-01  -2.68876      -2.02257       2.02257       240.350       242.372    
  25  0.252534      -1.37621      -1.03523       1.03523       243.574       244.609    
  26  0.504672     -0.683847     -0.514411      0.514411       244.523       245.037    
  27  0.711577     -0.340272     -0.255963      0.255963       244.286       244.542    
  28  0.281313      -1.26829     -0.954044      0.954044       244.750       245.704    
  29  0.177966      -1.72616      -1.29847       1.29847       244.829       246.128    
  30  0.281850      -1.26638     -0.952609      0.952609       244.202       245.154    
  31  0.689216E-01  -2.67479      -2.01206       2.01206       246.469       248.481    
  32  0.845597     -0.167712     -0.126158      0.126158       246.646       246.772    
  33  0.790470     -0.235127     -0.176870      0.176870       245.655       245.832    
  34  0.306736      -1.18177     -0.888961      0.888961       247.925       248.814    
  35  0.637662     -0.449947     -0.338464      0.338464       249.047       249.385    
  36  0.668809E-01  -2.70484      -2.03467       2.03467       248.986       251.020    
  37  0.689320E-02  -4.97722      -3.74402       3.74402       246.707       250.451    
  38  0.102899      -2.27401      -1.71058       1.71058       249.595       251.306    
  39  0.487302     -0.718871     -0.540757      0.540757       250.450       250.991    
  40  0.912503     -0.915638E-01 -0.688771E-01  0.688771E-01   250.480       250.549    
  41  0.502050     -0.689055     -0.518328      0.518328       250.929       251.447    
  42  0.925412     -0.775163E-01 -0.583102E-01  0.583102E-01   251.225       251.283    
  43  0.921811     -0.814150E-01 -0.612429E-01  0.612429E-01   251.409       251.470    
  44  0.870535     -0.138648     -0.104295      0.104295       250.658       250.762    
  45  0.557947     -0.583490     -0.438920      0.438920       252.144       252.582    
  46  0.653329E-02  -5.03084      -3.78436       3.78436       252.500       256.285    
  47  0.173764      -1.75006      -1.31645       1.31645       252.588       253.905    
  48  0.318212      -1.14504     -0.861332      0.861332       252.789       253.651    
  49  0.423539     -0.859110     -0.646249      0.646249       253.443       254.090    
  50  0.686736     -0.375806     -0.282693      0.282693       253.038       253.320    
  51  0.990308     -0.973904E-02 -0.732600E-02  0.732600E-02   252.943       252.951    
  52  0.150330      -1.89492      -1.42542       1.42542       251.965       253.390    
  53  0.697676     -0.360000     -0.270803      0.270803       252.214       252.484    
  54  0.901523     -0.103670     -0.779840E-01  0.779840E-01   253.891       253.969    
  55  0.101249      -2.29017      -1.72274       1.72274       254.341       256.064    
  56  0.568624E-01  -2.86712      -2.15674       2.15674       254.031       256.188    
  57  0.119244      -2.12658      -1.59968       1.59968       255.115       256.715    
  58  0.329906      -1.10895     -0.834186      0.834186       254.608       255.443    
  59  0.715644     -0.334572     -0.251675      0.251675       256.554       256.805    
  60  0.282806      -1.26299     -0.950063      0.950063       256.842       257.792    
  61  0.773990     -0.256197     -0.192719      0.192719       257.630       257.823    
  62  0.201446      -1.60223      -1.20525       1.20525       258.199       259.404    
  63  0.376188     -0.977665     -0.735430      0.735430       256.866       257.601    
  64  0.290533      -1.23604     -0.929785      0.929785       248.983       249.912    
loop,thermsimp(1:2)       36   1.71270      0.287505    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    520        264.08          0.88          1.08         23.13          0.00          0.04         25.12
Just calling func    0   0         25.13


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    521        238.45          0.88          1.08         23.05          0.05          0.04         25.11
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  520    238.45        4.549     -1.219      4.568     -100.0     0.4817E-01
                      -1.238      2.746     -100.0      2.825     0.5176    
                       1.192    -0.8045      2.400      0.000      0.000    
                     -0.5443      0.000      0.000      0.000     -1.221    

                      -2.500     0.1073E+05 0.1698E+05 -1234.     -3989.    
                      -2.000     -7.329     -2.968     -1.955     0.1387    
                      -13.78     -2.104      1359.      0.000      3354.    

                       4764.      3323.      5073.      5329.      2500.    
                       4298.     0.5472E-01-0.7990E-02  0.000    -0.1174    
                      0.1848    -0.7609E-01 0.1043     0.2868E-01-0.1646    

                     -0.6116    -0.7266      0.000     0.2766     0.7255E-01
                      0.8541E-01 0.1313     0.1919     0.2080     0.7819E-02
                      0.2479E-01-0.5140E-01-0.5508    -0.5247      0.000    

                      -2.116     -4.510      5.638     -1.186      0.000    
                       0.000      9.049      8.787     -5822.     -4.000    
                      0.9070    -0.2321      8.830      8.262    -0.1403E+05

                      -4.000    -0.1174      1.748      9.401      9.228    
                      -6325.     -4.000     0.1008     0.8522      9.437    
                       9.018     -2533.     -2.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3    238.45
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.752231               568
loop is:       36
neval is:      520
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       36      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:   0.752231               568
loop is:       37
neval is:      520


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      568
neval,tstepnext:      520     568

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.189501      -1.66336      -1.25123       1.25123       220.452       221.704    
   2  0.365380E-02  -5.61199      -4.22151       4.22151       225.796       230.017    
   3  0.830232     -0.186050     -0.139953      0.139953       227.244       227.384    
   4  0.641913     -0.443302     -0.333466      0.333466       227.857       228.191    
   5  0.977753     -0.224987E-01 -0.169242E-01  0.169242E-01   227.988       228.005    
   6  0.941040     -0.607695E-01 -0.457127E-01  0.457127E-01   229.521       229.567    
   7  0.674724E-01  -2.69604      -2.02804       2.02804       230.239       232.267    
   8  0.243526      -1.41253      -1.06255       1.06255       228.743       229.806    
   9  0.916671     -0.870070E-01 -0.654494E-01  0.654494E-01   231.342       231.407    
  10  0.557286     -0.584677     -0.439812      0.439812       231.956       232.396    
  11  0.992934     -0.709123E-02 -0.533424E-02  0.533424E-02   231.575       231.580    
  12  0.575424     -0.552647     -0.415718      0.415718       231.316       231.731    
  13  0.128032      -2.05548      -1.54619       1.54619       232.423       233.969    
  14  0.473218E-01  -3.05078      -2.29489       2.29489       232.714       235.009    
  15  0.342686      -1.07094     -0.805594      0.805594       233.251       234.056    
  16  0.588634     -0.529951     -0.398645      0.398645       233.369       233.767    
  17  0.785774     -0.241086     -0.181353      0.181353       234.623       234.804    
  18  0.180861E-01  -4.01261      -3.01841       3.01841       235.287       238.306    
  19  0.814771     -0.204848     -0.154093      0.154093       236.725       236.879    
  20  0.241579      -1.42056      -1.06859       1.06859       236.044       237.112    
  21  0.547139     -0.603053     -0.453635      0.453635       237.534       237.987    
  22  0.762461     -0.271204     -0.204008      0.204008       239.000       239.204    
  23  0.388112     -0.946461     -0.711957      0.711957       238.614       239.326    
  24  0.787095     -0.239406     -0.180089      0.180089       240.350       240.530    
  25  0.509851     -0.673637     -0.506731      0.506731       244.286       244.792    
  26  0.106857      -2.23627      -1.68219       1.68219       243.574       245.256    
  27  0.494106     -0.705005     -0.530327      0.530327       244.523       245.053    
  28  0.504670     -0.683850     -0.514413      0.514413       244.202       244.716    
  29  0.575895     -0.551830     -0.415104      0.415104       244.750       245.166    
  30  0.482961     -0.727820     -0.547488      0.547488       245.655       246.203    
  31  0.530700     -0.633559     -0.476583      0.476583       244.829       245.306    
  32  0.667588     -0.404084     -0.303964      0.303964       246.646       246.950    
  33  0.602101     -0.507331     -0.381630      0.381630       246.469       246.850    
  34  0.658488     -0.417809     -0.314289      0.314289       247.925       248.240    
  35  0.393981     -0.931452     -0.700667      0.700667       249.047       249.747    
  36  0.639259     -0.447446     -0.336583      0.336583       248.983       249.319    
  37  0.936740E-01  -2.36793      -1.78123       1.78123       246.707       248.488    
  38  0.342820      -1.07055     -0.805300      0.805300       250.480       251.286    
  39  0.557341     -0.584578     -0.439738      0.439738       250.658       251.098    
  40  0.743227     -0.296754     -0.223228      0.223228       250.450       250.674    
  41  0.852843     -0.159180     -0.119740      0.119740       248.986       249.105    
  42  0.346148      -1.06089     -0.798033      0.798033       251.225       252.023    
  43  0.913769     -0.901773E-01 -0.678341E-01  0.678341E-01   249.595       249.663    
  44  0.816355     -0.202906     -0.152633      0.152633       250.929       251.081    
  45  0.132158      -2.02375      -1.52233       1.52233       251.409       252.931    
  46  0.337498      -1.08619     -0.817069      0.817069       252.214       253.031    
  47  0.707154     -0.346507     -0.260654      0.260654       252.144       252.404    
  48  0.742004     -0.298400     -0.224466      0.224466       252.943       253.168    
  49  0.804507     -0.217525     -0.163629      0.163629       253.038       253.201    
  50  0.385864     -0.952271     -0.716327      0.716327       251.965       252.681    
  51  0.928439     -0.742509E-01 -0.558538E-01  0.558538E-01   252.789       252.845    
  52  0.859816     -0.151036     -0.113614      0.113614       252.588       252.702    
  53  0.663579     -0.410107     -0.308495      0.308495       253.891       254.200    
  54  0.312768      -1.16229     -0.874313      0.874313       253.443       254.318    
  55  0.842943     -0.170856     -0.128523      0.128523       254.608       254.737    
  56  0.417818     -0.872710     -0.656480      0.656480       254.341       254.998    
  57  0.803409     -0.218891     -0.164657      0.164657       254.031       254.196    
  58  0.410473     -0.890444     -0.669819      0.669819       252.500       253.170    
  59  0.419709     -0.868194     -0.653082      0.653082       255.115       255.768    
  60  0.341924      -1.07317     -0.807269      0.807269       256.554       257.361    
  61  0.406630     -0.899852     -0.676896      0.676896       256.866       257.543    
  62  0.441846     -0.816793     -0.614417      0.614417       256.842       257.456    
  63  0.929001     -0.736455E-01 -0.553984E-01  0.553984E-01   257.630       257.685    
  64  0.115720      -2.15658      -1.62225       1.62225       238.451       240.074    
loop,thermsimp(1:2)       37   1.25123       4.22151    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    522        253.06          0.88          1.09         23.09          0.05          0.05         25.16
Just calling func    0   0         25.16


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    253.06
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.752231               568
loop is:       37
neval is:      521
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       37      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:   0.752231               568
loop is:       38
neval is:      521


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      568
neval,tstepnext:      521     568

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.995416E-01  -2.30718      -1.73553       1.73553       220.452       222.188    
   2  0.503957     -0.685264     -0.515477      0.515477       227.244       227.760    
   3  0.622493     -0.474022     -0.356574      0.356574       227.988       228.344    
   4  0.935651     -0.665132E-01 -0.500333E-01  0.500333E-01   227.857       227.907    
   5  0.199187      -1.61351      -1.21373       1.21373       229.521       230.735    
   6  0.758609E-01  -2.57885      -1.93989       1.93989       228.743       230.683    
   7  0.984530E-01  -2.31818      -1.74380       1.74380       225.796       227.540    
   8  0.239970      -1.42724      -1.07361       1.07361       231.342       232.415    
   9  0.913380     -0.906037E-01 -0.681549E-01  0.681549E-01   231.575       231.643    
  10  0.189159E-02  -6.27034      -4.71674       4.71674       231.316       236.032    
  11  0.993010     -0.701452E-02 -0.527654E-02  0.527654E-02   230.239       230.244    
  12  0.723758     -0.323298     -0.243195      0.243195       231.956       232.199    
  13  0.793363     -0.231475     -0.174123      0.174123       233.369       233.543    
  14  0.600371     -0.510207     -0.383793      0.383793       232.423       232.807    
  15  0.362871      -1.01371     -0.762542      0.762542       233.251       234.013    
  16  0.619786     -0.478381     -0.359853      0.359853       234.623       234.983    
  17  0.866004     -0.143866     -0.108220      0.108220       232.714       232.822    
  18  0.671513     -0.398222     -0.299555      0.299555       236.725       237.024    
  19  0.719189     -0.329632     -0.247959      0.247959       236.044       236.292    
  20  0.710276     -0.342101     -0.257339      0.257339       237.534       237.791    
  21  0.615619E-01  -2.78771      -2.09700       2.09700       235.287       237.384    
  22  0.188098      -1.67079      -1.25682       1.25682       239.000       240.257    
  23  0.508944     -0.675418     -0.508070      0.508070       238.614       239.122    
  24  0.981871     -0.182954E-01 -0.137623E-01  0.137623E-01   238.451       238.465    
  25  0.225810      -1.48806      -1.11937       1.11937       240.350       241.469    
  26  0.989298     -0.107600E-01 -0.809401E-02  0.809401E-02   244.202       244.210    
  27  0.869151     -0.140239     -0.105492      0.105492       244.286       244.391    
  28  0.661576     -0.413130     -0.310769      0.310769       244.523       244.834    
  29  0.192048      -1.65001      -1.24119       1.24119       244.750       245.992    
  30  0.980212     -0.199861E-01 -0.150342E-01  0.150342E-01   243.574       243.589    
  31  0.160674      -1.82838      -1.37536       1.37536       244.829       246.204    
  32  0.123536E-01  -4.39381      -3.30516       3.30516       245.655       248.960    
  33  0.297350      -1.21285     -0.912340      0.912340       246.469       247.381    
  34  0.394659     -0.929732     -0.699373      0.699373       246.646       247.345    
  35  0.423082     -0.860189     -0.647061      0.647061       247.925       248.572    
  36  0.523558     -0.647108     -0.486775      0.486775       246.707       247.194    
  37  0.916842     -0.868204E-01 -0.653090E-01  0.653090E-01   248.986       249.051    
  38  0.150067      -1.89667      -1.42674       1.42674       248.983       250.409    
  39  0.561535     -0.577081     -0.434098      0.434098       249.595       250.029    
  40  0.926691     -0.761353E-01 -0.572713E-01  0.572713E-01   249.047       249.104    
  41  0.479570E-01  -3.03745      -2.28486       2.28486       250.450       252.735    
  42  0.494420     -0.704370     -0.529849      0.529849       250.929       251.459    
  43  0.722160E-01  -2.62809      -1.97693       1.97693       250.658       252.635    
  44  0.851764     -0.160446     -0.120692      0.120692       250.480       250.601    
  45  0.140206      -1.96465      -1.47787       1.47787       251.225       252.703    
  46  0.706931     -0.346822     -0.260890      0.260890       252.144       252.404    
  47  0.675871     -0.391754     -0.294689      0.294689       251.965       252.260    
  48  0.979967E-01  -2.32282      -1.74730       1.74730       252.588       254.336    
  49  0.337023      -1.08761     -0.818130      0.818130       252.789       253.608    
  50  0.270551      -1.30729     -0.983387      0.983387       251.409       252.392    
  51  0.165493      -1.79883      -1.35313       1.35313       252.214       253.567    
  52  0.325756      -1.12161     -0.843708      0.843708       252.943       253.787    
  53  0.307603      -1.17895     -0.886839      0.886839       252.500       253.387    
  54  0.790198     -0.235472     -0.177129      0.177129       253.038       253.215    
  55  0.495665     -0.701856     -0.527958      0.527958       254.031       254.559    
  56  0.596886     -0.516030     -0.388173      0.388173       253.891       254.279    
  57  0.467598     -0.760145     -0.571805      0.571805       253.443       254.015    
  58  0.438727     -0.823879     -0.619747      0.619747       254.608       255.228    
  59  0.744437     -0.295127     -0.222004      0.222004       254.341       254.563    
  60  0.879706     -0.128168     -0.964119E-01  0.964119E-01   255.115       255.212    
  61  0.169780      -1.77325      -1.33390       1.33390       256.554       257.888    
  62  0.809668     -0.211131     -0.158819      0.158819       256.842       257.001    
  63  0.795405     -0.228904     -0.172189      0.172189       256.866       257.038    
  64  0.683640     -0.380324     -0.286091      0.286091       253.059       253.345    
loop,thermsimp(1:2)       38   1.73553      0.515477    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    523        239.30          0.88          1.09         23.14          0.12          0.05         25.28
Just calling func    0   0         25.28


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    239.30
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.752231               568
loop is:       38
neval is:      522
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       38      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:   0.752231               568
loop is:       39
neval is:      522


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      568
neval,tstepnext:      522     568

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.609718     -0.494759     -0.372173      0.372173       220.452       220.825    
   2  0.415874     -0.877372     -0.659986      0.659986       225.796       226.456    
   3  0.961318     -0.394498E-01 -0.296753E-01  0.296753E-01   227.244       227.274    
   4  0.965952     -0.346407E-01 -0.260578E-01  0.260578E-01   227.857       227.883    
   5  0.154943      -1.86470      -1.40268       1.40268       227.988       229.391    
   6  0.371326     -0.990674     -0.745215      0.745215       230.239       230.984    
   7  0.313239      -1.16079     -0.873181      0.873181       228.743       229.616    
   8  0.886978     -0.119935     -0.902186E-01  0.902186E-01   229.521       229.611    
   9  0.749723     -0.288051     -0.216681      0.216681       231.575       231.791    
  10  0.552279     -0.593702     -0.446601      0.446601       231.956       232.403    
  11  0.551516     -0.595084     -0.447641      0.447641       231.342       231.789    
  12  0.339175      -1.08124     -0.813340      0.813340       232.423       233.236    
  13  0.124635      -2.08237      -1.56642       1.56642       232.714       234.280    
  14  0.937098     -0.649678E-01 -0.488708E-01  0.488708E-01   233.369       233.417    
  15  0.639721E-01  -2.74931      -2.06811       2.06811       233.251       235.319    
  16  0.258753      -1.35188      -1.01693       1.01693       234.623       235.640    
  17  0.116140      -2.15296      -1.61952       1.61952       231.316       232.935    
  18  0.182528      -1.70085      -1.27943       1.27943       236.044       237.323    
  19  0.323703      -1.12793     -0.848463      0.848463       236.725       237.573    
  20  0.624238     -0.471224     -0.354469      0.354469       235.287       235.642    
  21  0.250110      -1.38585      -1.04248       1.04248       237.534       238.576    
  22  0.785262     -0.241738     -0.181842      0.181842       238.451       238.633    
  23  0.272793      -1.29904     -0.977179      0.977179       238.614       239.591    
  24  0.552827     -0.592710     -0.445854      0.445854       239.000       239.446    
  25  0.581634     -0.541915     -0.407645      0.407645       240.350       240.757    
  26  0.294889      -1.22116     -0.918591      0.918591       243.574       244.492    
  27  0.955830     -0.451753E-01 -0.339823E-01  0.339823E-01   244.202       244.236    
  28  0.691604     -0.368741     -0.277379      0.277379       244.286       244.563    
  29  0.975202     -0.251108E-01 -0.188892E-01  0.188892E-01   244.523       244.542    
  30  0.577048     -0.549830     -0.413599      0.413599       244.750       245.164    
  31  0.265577      -1.32585     -0.997345      0.997345       244.829       245.826    
  32  0.657063     -0.419975     -0.315918      0.315918       246.707       247.023    
  33  0.936668     -0.654263E-01 -0.492157E-01  0.492157E-01   246.646       246.695    
  34  0.333233      -1.09891     -0.826636      0.826636       246.469       247.295    
  35  0.796486     -0.227546     -0.171167      0.171167       247.925       248.097    
  36  0.968162     -0.323562E-01 -0.243393E-01  0.243393E-01   245.655       245.679    
  37  0.519518     -0.654855     -0.492602      0.492602       248.986       249.478    
  38  0.470578     -0.753793     -0.567026      0.567026       249.047       249.614    
  39  0.226350      -1.48567      -1.11757       1.11757       249.595       250.713    
  40  0.714391     -0.336325     -0.252994      0.252994       248.983       249.236    
  41  0.402411     -0.910282     -0.684742      0.684742       250.480       251.165    
  42  0.968828     -0.316682E-01 -0.238218E-01  0.238218E-01   250.929       250.953    
  43  0.595040     -0.519126     -0.390503      0.390503       251.965       252.355    
  44  0.370415     -0.993131     -0.747064      0.747064       251.409       252.156    
  45  0.321530      -1.13466     -0.853530      0.853530       252.144       252.997    
  46  0.733343     -0.310141     -0.233298      0.233298       250.658       250.891    
  47  0.753884     -0.282517     -0.212518      0.212518       251.225       251.438    
  48  0.750367     -0.287193     -0.216035      0.216035       250.450       250.666    
  49  0.101816      -2.28459      -1.71854       1.71854       253.038       254.756    
  50  0.413255     -0.883690     -0.664739      0.664739       253.059       253.723    
  51  0.819580     -0.198964     -0.149667      0.149667       252.500       252.650    
  52  0.173725      -1.75028      -1.31662       1.31662       252.214       253.530    
  53  0.950835     -0.504148E-01 -0.379236E-01  0.379236E-01   252.789       252.827    
  54  0.402344     -0.910449     -0.684868      0.684868       252.943       253.628    
  55  0.631798     -0.459185     -0.345413      0.345413       253.443       253.789    
  56  0.753033     -0.283646     -0.213368      0.213368       253.891       254.104    
  57  0.893578     -0.112522     -0.846423E-01  0.846423E-01   252.588       252.673    
  58  0.723940     -0.323047     -0.243006      0.243006       254.031       254.274    
  59  0.401404E-01  -3.21537      -2.41870       2.41870       254.341       256.760    
  60  0.317912      -1.14598     -0.862043      0.862043       255.115       255.977    
  61  0.670009     -0.400465     -0.301242      0.301242       254.608       254.910    
  62  0.634088     -0.455568     -0.342693      0.342693       256.842       257.184    
  63  0.568423     -0.564890     -0.424927      0.424927       256.866       257.291    
  64  0.402813E-01  -3.21187      -2.41607       2.41607       239.298       241.714    
loop,thermsimp(1:2)       39  0.372173      0.659986    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    524        224.66          0.88          1.09         23.02          0.10          0.05         25.13
Just calling func    0   0         25.13


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    224.66
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.752231               568
loop is:       39
neval is:      523
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       39      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:   0.752231               568
loop is:       40
neval is:      523


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      568
neval,tstepnext:      523     568

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.903890     -0.101048     -0.760112E-01  0.760112E-01   220.452       220.528    
   2  0.575116     -0.553184     -0.416122      0.416122       225.796       226.212    
   3  0.234605      -1.44985      -1.09062       1.09062       227.244       228.335    
   4  0.122801      -2.09719      -1.57757       1.57757       227.857       229.435    
   5  0.141985E-01  -4.25462      -3.20045       3.20045       227.988       231.188    
   6  0.756588     -0.278937     -0.209825      0.209825       229.521       229.731    
   7  0.646676     -0.435910     -0.327905      0.327905       228.743       229.071    
   8  0.898014E-01  -2.41016      -1.81299       1.81299       230.239       232.052    
   9  0.163265      -1.81238      -1.36333       1.36333       231.342       232.705    
  10  0.358760      -1.02510     -0.771113      0.771113       231.575       232.346    
  11  0.309585      -1.17252     -0.882009      0.882009       231.956       232.838    
  12  0.926638     -0.761923E-01 -0.573142E-01  0.573142E-01   231.316       231.373    
  13  0.283309E-01  -3.56380      -2.68080       2.68080       232.423       235.104    
  14  0.544265     -0.608319     -0.457596      0.457596       233.369       233.826    
  15  0.125708E-01  -4.37638      -3.29205       3.29205       232.714       236.006    
  16  0.402687E-01  -3.21218      -2.41630       2.41630       233.251       235.667    
  17  0.832731     -0.183044     -0.137692      0.137692       234.623       234.760    
  18  0.953573     -0.475391E-01 -0.357604E-01  0.357604E-01   235.287       235.323    
  19  0.967735E-01  -2.33538      -1.75675       1.75675       236.044       237.800    
  20  0.309578E-01  -3.47513      -2.61410       2.61410       236.725       239.339    
  21  0.197205      -1.62351      -1.22125       1.22125       237.534       238.755    
  22  0.232676      -1.45811      -1.09683       1.09683       238.451       239.548    
  23  0.573480     -0.556032     -0.418264      0.418264       239.000       239.419    
  24  0.944617     -0.569761E-01 -0.428592E-01  0.428592E-01   238.614       238.657    
  25  0.809219     -0.211686     -0.159237      0.159237       240.350       240.509    
  26  0.207880      -1.57080      -1.18160       1.18160       239.298       240.480    
  27  0.325884      -1.12121     -0.843412      0.843412       244.202       245.045    
  28  0.887246     -0.119633     -0.899914E-01  0.899914E-01   243.574       243.664    
  29  0.535078     -0.625343     -0.470402      0.470402       244.523       244.993    
  30  0.874713     -0.133859     -0.100693      0.100693       244.286       244.386    
  31  0.273380      -1.29689     -0.975562      0.975562       244.750       245.726    
  32  0.785279     -0.241717     -0.181827      0.181827       245.655       245.837    
  33  0.822807E-01  -2.49762      -1.87879       1.87879       244.829       246.708    
  34  0.267430E-01  -3.62148      -2.72419       2.72419       246.646       249.370    
  35  0.930838     -0.716701E-01 -0.539125E-01  0.539125E-01   246.707       246.761    
  36  0.676222     -0.391233     -0.294298      0.294298       246.469       246.763    
  37  0.645353     -0.437958     -0.329446      0.329446       247.925       248.255    
  38  0.453782     -0.790138     -0.594367      0.594367       248.983       249.577    
  39  0.271751      -1.30287     -0.980058      0.980058       248.986       249.966    
  40  0.521656     -0.650746     -0.489512      0.489512       249.047       249.536    
  41  0.305810      -1.18479     -0.891236      0.891236       250.450       251.342    
  42  0.484713E-01  -3.02678      -2.27684       2.27684       249.595       251.872    
  43  0.806308     -0.215289     -0.161947      0.161947       250.658       250.820    
  44  0.314175      -1.15781     -0.870938      0.870938       250.929       251.800    
  45  0.214468E-01  -3.84218      -2.89021       2.89021       250.480       253.371    
  46  0.813020     -0.207000     -0.155711      0.155711       251.225       251.381    
  47  0.540435     -0.615382     -0.462909      0.462909       251.409       251.872    
  48  0.971427E-01  -2.33157      -1.75388       1.75388       251.965       253.719    
  49  0.594395     -0.520211     -0.391319      0.391319       252.500       252.892    
  50  0.886621     -0.120338     -0.905218E-01  0.905218E-01   252.588       252.679    
  51  0.591229     -0.525552     -0.395337      0.395337       252.789       253.185    
  52  0.935909     -0.662368E-01 -0.498254E-01  0.498254E-01   252.144       252.193    
  53  0.696233     -0.362071     -0.272361      0.272361       252.214       252.486    
  54  0.187251      -1.67530      -1.26022       1.26022       252.943       254.204    
  55  0.435631     -0.830959     -0.625073      0.625073       253.059       253.684    
  56  0.143851      -1.93898      -1.45856       1.45856       253.443       254.902    
  57  0.297505      -1.21232     -0.911947      0.911947       253.891       254.803    
  58  0.277669      -1.28133     -0.963854      0.963854       254.031       254.995    
  59  0.323064      -1.12990     -0.849948      0.849948       253.038       253.888    
  60  0.588431     -0.530295     -0.398904      0.398904       254.608       255.007    
  61  0.935613     -0.665528E-01 -0.500631E-01  0.500631E-01   255.115       255.165    
  62  0.183539      -1.69533      -1.27528       1.27528       254.341       255.616    
  63  0.780553     -0.247753     -0.186367      0.186367       256.842       257.028    
  64  0.892897     -0.113284     -0.852159E-01  0.852159E-01   224.656       224.741    
loop,thermsimp(1:2)       40  0.760112E-01  0.416122    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    525        269.32          0.88          1.11         23.16          0.00          0.05         25.20
Just calling func    0   0         25.20


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    526        244.28          0.88          1.10         23.09          0.02          0.04         25.13
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3    244.28
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.752231               568
loop is:       40
neval is:      525
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       40      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:   0.752231               568
loop is:       41
neval is:      525


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      568
neval,tstepnext:      525     568

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.674423     -0.393898     -0.296302      0.296302       220.452       220.749    
   2  0.479548     -0.734911     -0.552823      0.552823       224.656       225.209    
   3  0.577498     -0.549050     -0.413012      0.413012       225.796       226.209    
   4  0.652957     -0.426245     -0.320634      0.320634       227.244       227.565    
   5  0.649111     -0.432152     -0.325078      0.325078       228.743       229.068    
   6  0.689953     -0.371132     -0.279177      0.279177       227.857       228.137    
   7  0.884625     -0.122591     -0.922171E-01  0.922171E-01   229.521       229.613    
   8  0.655607     -0.422194     -0.317588      0.317588       227.988       228.305    
   9  0.954363     -0.467110E-01 -0.351374E-01  0.351374E-01   231.316       231.351    
  10  0.601698     -0.507999     -0.382133      0.382133       230.239       230.621    
  11  0.640071     -0.446176     -0.335627      0.335627       231.575       231.910    
  12  0.925620     -0.772915E-01 -0.581411E-01  0.581411E-01   231.342       231.400    
  13  0.760294     -0.274051     -0.206149      0.206149       231.956       232.162    
  14  0.292719      -1.22854     -0.924148      0.924148       233.369       234.293    
  15  0.910533     -0.937251E-01 -0.705029E-01  0.705029E-01   234.623       234.693    
  16  0.650466     -0.430066     -0.323509      0.323509       232.423       232.747    
  17  0.351310      -1.04609     -0.786899      0.786899       235.287       236.074    
  18  0.997229     -0.277449E-02 -0.208706E-02  0.208706E-02   233.251       233.253    
  19  0.808601E-01  -2.51503      -1.89189       1.89189       232.714       234.606    
  20  0.420537     -0.866224     -0.651600      0.651600       236.044       236.695    
  21  0.122547      -2.09926      -1.57913       1.57913       238.614       240.193    
  22  0.943531     -0.581261E-01 -0.437243E-01  0.437243E-01   237.534       237.577    
  23  0.738977     -0.302488     -0.227541      0.227541       236.725       236.952    
  24  0.152624E-01  -4.18236      -3.14610       3.14610       239.000       242.147    
  25  0.495842     -0.701498     -0.527688      0.527688       238.451       238.979    
  26  0.737954     -0.303874     -0.228584      0.228584       239.298       239.527    
  27  0.859054     -0.151924     -0.114282      0.114282       240.350       240.464    
  28  0.892829     -0.113360     -0.852728E-01  0.852728E-01   243.574       243.659    
  29  0.492035E-01  -3.01179      -2.26556       2.26556       244.286       246.551    
  30  0.493120E-01  -3.00959      -2.26391       2.26391       244.523       246.787    
  31  0.366039      -1.00501     -0.756003      0.756003       244.202       244.958    
  32  0.658741     -0.417425     -0.314000      0.314000       244.750       245.064    
  33  0.453109     -0.791623     -0.595484      0.595484       245.655       246.251    
  34  0.370957     -0.991668     -0.745964      0.745964       244.829       245.575    
  35  0.758039     -0.277020     -0.208383      0.208383       246.707       246.916    
  36  0.799628     -0.223608     -0.168205      0.168205       246.469       246.637    
  37  0.934112     -0.681593E-01 -0.512716E-01  0.512716E-01   247.925       247.977    
  38  0.934175     -0.680913E-01 -0.512204E-01  0.512204E-01   246.646       246.697    
  39  0.126850      -2.06475      -1.55317       1.55317       249.047       250.600    
  40  0.359146      -1.02403     -0.770304      0.770304       248.983       249.753    
  41  0.550575E-01  -2.89938      -2.18100       2.18100       248.986       251.167    
  42  0.220619      -1.51132      -1.13686       1.13686       250.658       251.795    
  43  0.414861     -0.879812     -0.661822      0.661822       250.450       251.112    
  44  0.132097      -2.02422      -1.52268       1.52268       251.225       252.748    
  45  0.305184      -1.18684     -0.892777      0.892777       250.929       251.822    
  46  0.157149E-01  -4.15315      -3.12413       3.12413       251.409       254.533    
  47  0.286781      -1.24904     -0.939565      0.939565       249.595       250.535    
  48  0.637394     -0.450367     -0.338780      0.338780       252.144       252.482    
  49  0.663335     -0.410476     -0.308773      0.308773       252.214       252.522    
  50  0.242167      -1.41813      -1.06676       1.06676       252.588       253.655    
  51  0.479709     -0.734576     -0.552571      0.552571       252.500       253.053    
  52  0.709138E-01  -2.64629      -1.99062       1.99062       252.789       254.780    
  53  0.439412     -0.822318     -0.618573      0.618573       250.480       251.099    
  54  0.208330      -1.56863      -1.17998       1.17998       253.059       254.239    
  55  0.145758      -1.92581      -1.44865       1.44865       251.965       253.413    
  56  0.716956     -0.332741     -0.250298      0.250298       253.038       253.288    
  57  0.135014      -2.00237      -1.50625       1.50625       252.943       254.450    
  58  0.676740     -0.390469     -0.293723      0.293723       253.891       254.185    
  59  0.387668     -0.947606     -0.712819      0.712819       253.443       254.156    
  60  0.276787      -1.28451     -0.966245      0.966245       254.031       254.997    
  61  0.888754     -0.117935     -0.887143E-01  0.887143E-01   254.608       254.697    
  62  0.663070     -0.410874     -0.309072      0.309072       255.115       255.424    
  63  0.878735     -0.129272     -0.972427E-01  0.972427E-01   254.341       254.438    
  64  0.311527      -1.16627     -0.877305      0.877305       244.277       245.155    
loop,thermsimp(1:2)       41  0.296302      0.552823    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    527        223.99          0.88          1.09         23.09          0.04          0.04         25.15
Just calling func    0   0         25.15


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    223.99
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.752231               568
loop is:       41
neval is:      526
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       41      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:   0.752231               568
loop is:       42
neval is:      526


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      568
neval,tstepnext:      526     568

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.723413     -0.323775     -0.243553      0.243553       220.452       220.696    
   2  0.185655      -1.68386      -1.26666       1.26666       224.656       225.923    
   3  0.957457     -0.434742E-01 -0.327027E-01  0.327027E-01   225.796       225.828    
   4  0.621017     -0.476397     -0.358360      0.358360       227.244       227.603    
   5  0.104462      -2.25893      -1.69924       1.69924       227.857       229.557    
   6  0.452993     -0.791880     -0.595676      0.595676       227.988       228.584    
   7  0.667800     -0.403766     -0.303725      0.303725       228.743       229.047    
   8  0.972732     -0.276462E-01 -0.207963E-01  0.207963E-01   229.521       229.542    
   9  0.260321      -1.34584      -1.01238       1.01238       230.239       231.251    
  10  0.763010     -0.270484     -0.203466      0.203466       231.316       231.519    
  11  0.641341     -0.444194     -0.334136      0.334136       231.342       231.676    
  12  0.878196     -0.129885     -0.977035E-01  0.977035E-01   231.575       231.672    
  13  0.854835     -0.156847     -0.117985      0.117985       231.956       232.074    
  14  0.714312     -0.336436     -0.253077      0.253077       232.423       232.676    
  15  0.701707     -0.354239     -0.266469      0.266469       233.251       233.517    
  16  0.889117     -0.117526     -0.884068E-01  0.884068E-01   233.369       233.457    
  17  0.141522      -1.95530      -1.47084       1.47084       232.714       234.185    
  18  0.189178      -1.66507      -1.25251       1.25251       234.623       235.875    
  19  0.622140     -0.474590     -0.357001      0.357001       235.287       235.644    
  20  0.130042      -2.03989      -1.53447       1.53447       236.044       237.578    
  21  0.577696     -0.548708     -0.412755      0.412755       236.725       237.137    
  22  0.682588     -0.381863     -0.287249      0.287249       237.534       237.821    
  23  0.835439     -0.179798     -0.135250      0.135250       238.451       238.587    
  24  0.540525     -0.615214     -0.462783      0.462783       239.298       239.761    
  25  0.782443     -0.245334     -0.184548      0.184548       238.614       238.799    
  26  0.905287     -0.995035E-01 -0.748496E-01  0.748496E-01   240.350       240.425    
  27  0.695897     -0.362554     -0.272724      0.272724       239.000       239.273    
  28  0.382345     -0.961432     -0.723219      0.723219       243.574       244.297    
  29  0.125280      -2.07720      -1.56254       1.56254       244.202       245.764    
  30  0.699640     -0.357189     -0.268689      0.268689       244.750       245.019    
  31  0.349624      -1.05090     -0.790517      0.790517       244.277       245.068    
  32  0.909174     -0.952190E-01 -0.716267E-01  0.716267E-01   244.829       244.901    
  33  0.801113     -0.221753     -0.166810      0.166810       245.655       245.822    
  34  0.284676      -1.25640     -0.945106      0.945106       244.286       245.231    
  35  0.971815     -0.285896E-01 -0.215060E-01  0.215060E-01   246.469       246.490    
  36  0.667566     -0.404116     -0.303989      0.303989       246.646       246.950    
  37  0.113695E-02  -6.77940      -5.09968       5.09968       244.523       249.623    
  38  0.408299     -0.895755     -0.673814      0.673814       246.707       247.381    
  39  0.625257E-01  -2.77218      -2.08532       2.08532       247.925       250.011    
  40  0.515937     -0.661771     -0.497804      0.497804       248.983       249.480    
  41  0.876322E-01  -2.43461      -1.83139       1.83139       249.595       251.427    
  42  0.995779     -0.423030E-02 -0.318216E-02  0.318216E-02   249.047       249.050    
  43  0.423428     -0.859371     -0.646446      0.646446       250.480       251.127    
  44  0.895974     -0.109844     -0.826282E-01  0.826282E-01   250.450       250.533    
  45  0.467456E-01  -3.06304      -2.30411       2.30411       248.986       251.290    
  46  0.331488      -1.10416     -0.830586      0.830586       250.658       251.489    
  47  0.422083     -0.862553     -0.648839      0.648839       250.929       251.578    
  48  0.630981     -0.460480     -0.346387      0.346387       252.144       252.490    
  49  0.953132     -0.480016E-01 -0.361083E-01  0.361083E-01   252.214       252.250    
  50  0.991799E-01  -2.31082      -1.73827       1.73827       251.225       252.963    
  51  0.441663     -0.817207     -0.614729      0.614729       252.500       253.115    
  52  0.684271     -0.379401     -0.285397      0.285397       253.038       253.323    
  53  0.520656     -0.652665     -0.490955      0.490955       251.965       252.456    
  54  0.480321     -0.733300     -0.551611      0.551611       252.588       253.140    
  55  0.655865     -0.421801     -0.317292      0.317292       253.443       253.761    
  56  0.719668     -0.328965     -0.247458      0.247458       253.891       254.139    
  57  0.738936     -0.302544     -0.227583      0.227583       253.059       253.286    
  58  0.353545      -1.03975     -0.782129      0.782129       254.341       255.123    
  59  0.312186E-01  -3.46674      -2.60779       2.60779       252.943       255.551    
  60  0.926263     -0.765971E-01 -0.576187E-01  0.576187E-01   251.409       251.467    
  61  0.859441     -0.151473     -0.113942      0.113942       254.608       254.722    
  62  0.862152     -0.148323     -0.111573      0.111573       252.789       252.901    
  63  0.966444     -0.341316E-01 -0.256749E-01  0.256749E-01   254.031       254.057    
  64  0.704785     -0.349862     -0.263177      0.263177       223.989       224.252    
loop,thermsimp(1:2)       42  0.243553       1.26666    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    528        234.10          0.88          1.09         23.11          0.00          0.04         25.12
Just calling func    0   0         25.11


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    234.10
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.752231               568
loop is:       42
neval is:      527
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       42      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:   0.752231               568
loop is:       43
neval is:      527


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      568
neval,tstepnext:      527     568

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.475948     -0.742447     -0.558492      0.558492       220.452       221.011    
   2  0.602827     -0.506126     -0.380723      0.380723       223.989       224.369    
   3  0.165820E-01  -4.09943      -3.08372       3.08372       225.796       228.879    
   4  0.438093     -0.825323     -0.620833      0.620833       224.656       225.277    
   5  0.431975     -0.839387     -0.631413      0.631413       227.244       227.876    
   6  0.619769E-01  -2.78099      -2.09195       2.09195       227.988       230.080    
   7  0.950555     -0.507092E-01 -0.381451E-01  0.381451E-01   228.743       228.781    
   8  0.467256     -0.760877     -0.572355      0.572355       229.521       230.093    
   9  0.759251     -0.275423     -0.207182      0.207182       227.857       228.065    
  10  0.606403     -0.500211     -0.376274      0.376274       230.239       230.615    
  11  0.472546     -0.749621     -0.563888      0.563888       231.316       231.880    
  12  0.340147      -1.07838     -0.811188      0.811188       231.575       232.386    
  13  0.625998E-01  -2.77099      -2.08443       2.08443       231.342       233.426    
  14  0.949579     -0.517367E-01 -0.389180E-01  0.389180E-01   231.956       231.995    
  15  0.684964     -0.378389     -0.284636      0.284636       232.423       232.708    
  16  0.194402      -1.63783      -1.23203       1.23203       233.369       234.601    
  17  0.885462     -0.121646     -0.915060E-01  0.915060E-01   233.251       233.342    
  18  0.115564      -2.15793      -1.62326       1.62326       232.714       234.337    
  19  0.924911     -0.780574E-01 -0.587172E-01  0.587172E-01   235.287       235.346    
  20  0.201643E-02  -6.20643      -4.66867       4.66867       234.623       239.291    
  21  0.264504      -1.32990      -1.00039       1.00039       236.725       237.725    
  22  0.241350      -1.42151      -1.06930       1.06930       236.044       237.113    
  23  0.195111      -1.63418      -1.22928       1.22928       237.534       238.763    
  24  0.991465     -0.857191E-02 -0.644805E-02  0.644805E-02   238.451       238.458    
  25  0.605579     -0.501570     -0.377296      0.377296       238.614       238.991    
  26  0.417123     -0.874375     -0.657732      0.657732       239.000       239.658    
  27  0.321829      -1.13373     -0.852829      0.852829       239.298       240.151    
  28  0.510817     -0.671745     -0.505307      0.505307       240.350       240.855    
  29  0.776438     -0.253038     -0.190343      0.190343       243.574       243.764    
  30  0.522679     -0.648787     -0.488038      0.488038       244.829       245.317    
  31  0.754225     -0.282065     -0.212178      0.212178       244.750       244.963    
  32  0.384540     -0.955707     -0.718913      0.718913       244.277       244.996    
  33  0.618720     -0.480103     -0.361148      0.361148       244.286       244.647    
  34  0.288710      -1.24233     -0.934520      0.934520       244.202       245.136    
  35  0.645703     -0.437415     -0.329037      0.329037       245.655       245.984    
  36  0.639113     -0.447673     -0.336754      0.336754       246.469       246.805    
  37  0.394197     -0.930906     -0.700256      0.700256       246.646       247.346    
  38  0.300083      -1.20370     -0.905458      0.905458       246.707       247.613    
  39  0.481786     -0.730255     -0.549320      0.549320       249.047       249.596    
  40  0.745437     -0.293784     -0.220994      0.220994       248.983       249.204    
  41  0.735307     -0.307467     -0.231286      0.231286       244.523       244.754    
  42  0.516048     -0.661555     -0.497642      0.497642       247.925       248.423    
  43  0.810479     -0.210130     -0.158066      0.158066       250.450       250.608    
  44  0.535152E-01  -2.92779      -2.20237       2.20237       250.480       252.683    
  45  0.828890E-01  -2.49025      -1.87325       1.87325       248.986       250.859    
  46  0.976655     -0.236220E-01 -0.177692E-01  0.177692E-01   249.595       249.613    
  47  0.528807E-01  -2.93972      -2.21135       2.21135       251.409       253.620    
  48  0.124161      -2.08618      -1.56929       1.56929       250.658       252.227    
  49  0.690691     -0.370063     -0.278373      0.278373       250.929       251.207    
  50  0.145451      -1.92791      -1.45024       1.45024       252.214       253.664    
  51  0.821159     -0.197039     -0.148219      0.148219       251.965       252.113    
  52  0.795471     -0.228821     -0.172127      0.172127       252.144       252.316    
  53  0.897922     -0.107672     -0.809941E-01  0.809941E-01   252.789       252.870    
  54  0.942954     -0.587380E-01 -0.441845E-01  0.441845E-01   251.225       251.269    
  55  0.634449     -0.454998     -0.342264      0.342264       252.500       252.842    
  56  0.602211     -0.507148     -0.381492      0.381492       252.588       252.970    
  57  0.775016     -0.254872     -0.191722      0.191722       253.059       253.250    
  58  0.474621     -0.745238     -0.560591      0.560591       253.038       253.598    
  59  0.374181     -0.983016     -0.739455      0.739455       253.443       254.183    
  60  0.560778     -0.578430     -0.435113      0.435113       254.031       254.466    
  61  0.537304     -0.621192     -0.467280      0.467280       253.891       254.358    
  62  0.507206     -0.678839     -0.510644      0.510644       254.608       255.119    
  63  0.859506E-01  -2.45398      -1.84596       1.84596       254.341       256.187    
  64  0.187799      -1.67238      -1.25802       1.25802       234.095       235.353    
loop,thermsimp(1:2)       43  0.558492      0.380723    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    529        233.05          0.87          1.09         23.11          0.11          0.05         25.22
Just calling func    0   0         25.22


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    233.05
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.752231               568
loop is:       43
neval is:      528
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       43      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:   0.752231               568
loop is:       44
neval is:      528


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      568
neval,tstepnext:      528     568

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.952211     -0.489682E-01 -0.368354E-01  0.368354E-01   220.452       220.489    
   2  0.866029     -0.143836     -0.108198      0.108198       223.989       224.097    
   3  0.411761     -0.887312     -0.667464      0.667464       224.656       225.324    
   4  0.699906     -0.356809     -0.268403      0.268403       227.244       227.513    
   5  0.499470     -0.694207     -0.522204      0.522204       227.857       228.380    
   6  0.565983     -0.569191     -0.428163      0.428163       228.743       229.171    
   7  0.493159     -0.706923     -0.531769      0.531769       225.796       226.328    
   8  0.569007     -0.563863     -0.424155      0.424155       227.988       228.412    
   9  0.650217     -0.430449     -0.323797      0.323797       229.521       229.845    
  10  0.961034E-01  -2.34233      -1.76197       1.76197       230.239       232.001    
  11  0.689147     -0.372300     -0.280056      0.280056       231.316       231.596    
  12  0.607344     -0.498660     -0.375107      0.375107       231.956       232.331    
  13  0.192849E-01  -3.94843      -2.97013       2.97013       231.575       234.545    
  14  0.731745     -0.312323     -0.234939      0.234939       232.423       232.658    
  15  0.863954     -0.146236     -0.110003      0.110003       233.251       233.361    
  16  0.499353     -0.694441     -0.522380      0.522380       231.342       231.864    
  17  0.835822     -0.179340     -0.134905      0.134905       232.714       232.849    
  18  0.515243     -0.663117     -0.498817      0.498817       233.369       233.867    
  19  0.284294      -1.25775     -0.946115      0.946115       235.287       236.233    
  20  0.699552     -0.357315     -0.268783      0.268783       234.095       234.364    
  21  0.306316      -1.18314     -0.889994      0.889994       236.044       236.934    
  22  0.917869     -0.857004E-01 -0.644665E-01  0.644665E-01   236.725       236.789    
  23  0.328908      -1.11198     -0.836465      0.836465       238.451       239.288    
  24  0.850593     -0.161822     -0.121727      0.121727       237.534       237.655    
  25  0.620502E-01  -2.77981      -2.09106       2.09106       238.614       240.705    
  26  0.583163     -0.539288     -0.405669      0.405669       234.623       235.028    
  27  0.394975     -0.928934     -0.698773      0.698773       239.000       239.699    
  28  0.601832     -0.507776     -0.381965      0.381965       239.298       239.680    
  29  0.955083E-01  -2.34854      -1.76665       1.76665       240.350       242.116    
  30  0.380058     -0.967430     -0.727731      0.727731       243.574       244.301    
  31  0.785111     -0.241930     -0.181987      0.181987       244.286       244.468    
  32  0.290774      -1.23521     -0.929161      0.929161       244.523       245.452    
  33  0.104031E-01  -4.56565      -3.43442       3.43442       244.750       248.185    
  34  0.323461      -1.12868     -0.849025      0.849025       244.277       245.126    
  35  0.893855     -0.112211     -0.844088E-01  0.844088E-01   244.202       244.286    
  36  0.826277     -0.190825     -0.143544      0.143544       244.829       244.973    
  37  0.808540     -0.212526     -0.159868      0.159868       245.655       245.815    
  38  0.597949     -0.514250     -0.386834      0.386834       246.469       246.855    
  39  0.510806     -0.671765     -0.505323      0.505323       246.646       247.151    
  40  0.346778      -1.05907     -0.796665      0.796665       246.707       247.504    
  41  0.835924     -0.179217     -0.134813      0.134813       247.925       248.060    
  42  0.449041     -0.800642     -0.602267      0.602267       248.983       249.585    
  43  0.951740     -0.494638E-01 -0.372082E-01  0.372082E-01   249.047       249.084    
  44  0.788207     -0.237994     -0.179027      0.179027       249.595       249.774    
  45  0.899830     -0.105549     -0.793973E-01  0.793973E-01   250.450       250.530    
  46  0.326955      -1.11793     -0.840943      0.840943       248.986       249.827    
  47  0.882768     -0.124693     -0.937977E-01  0.937977E-01   250.929       251.023    
  48  0.285151      -1.25474     -0.943853      0.943853       251.225       252.169    
  49  0.465811     -0.763976     -0.574687      0.574687       251.965       252.540    
  50  0.528398     -0.637906     -0.479853      0.479853       250.658       251.138    
  51  0.402439     -0.910212     -0.684689      0.684689       252.144       252.828    
  52  0.516797     -0.660106     -0.496552      0.496552       250.480       250.977    
  53  0.291612      -1.23233     -0.926999      0.926999       252.500       253.427    
  54  0.710526E-01  -2.64433      -1.98915       1.98915       252.789       254.779    
  55  0.586566     -0.533470     -0.401293      0.401293       252.588       252.990    
  56  0.208726      -1.56673      -1.17855       1.17855       253.059       254.237    
  57  0.105633      -2.24778      -1.69085       1.69085       253.038       254.728    
  58  0.487086     -0.719315     -0.541091      0.541091       251.409       251.950    
  59  0.861544E-01  -2.45161      -1.84418       1.84418       252.214       254.058    
  60  0.560808     -0.578377     -0.435073      0.435073       253.443       253.878    
  61  0.240391      -1.42549      -1.07230       1.07230       253.891       254.963    
  62  0.563178     -0.574160     -0.431901      0.431901       254.031       254.463    
  63  0.956338     -0.446434E-01 -0.335821E-01  0.335821E-01   254.608       254.642    
  64  0.721437     -0.326510     -0.245611      0.245611       233.051       233.296    
loop,thermsimp(1:2)       44  0.368354E-01  0.108198    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    530        224.40          0.88          1.09         23.15          0.02          0.04         25.17
Just calling func    0   0         25.17


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    224.40
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.752231               568
loop is:       44
neval is:      529
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       44      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:   0.752231               568
loop is:       45
neval is:      529


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      568
neval,tstepnext:      529     568

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.376954     -0.975632     -0.733900      0.733900       220.452       221.186    
   2  0.970379     -0.300689E-01 -0.226188E-01  0.226188E-01   223.989       224.011    
   3  0.739910     -0.301226     -0.226592      0.226592       224.656       224.883    
   4  0.489862     -0.713632     -0.536816      0.536816       225.796       226.333    
   5  0.379134     -0.969864     -0.729562      0.729562       227.244       227.974    
   6  0.798443     -0.225092     -0.169321      0.169321       227.857       228.027    
   7  0.183696      -1.69447      -1.27464       1.27464       227.988       229.263    
   8  0.860311E-01  -2.45305      -1.84526       1.84526       228.743       230.588    
   9  0.604626     -0.503146     -0.378482      0.378482       229.521       229.900    
  10  0.812784     -0.207290     -0.155930      0.155930       231.316       231.472    
  11  0.364990      -1.00789     -0.758163      0.758163       231.342       232.100    
  12  0.262253      -1.33845      -1.00682       1.00682       230.239       231.246    
  13  0.135773      -1.99677      -1.50203       1.50203       231.956       233.458    
  14  0.700444     -0.356041     -0.267825      0.267825       232.423       232.691    
  15  0.638152     -0.449179     -0.337886      0.337886       232.714       233.052    
  16  0.209521      -1.56293      -1.17569       1.17569       233.051       234.227    
  17  0.512323     -0.668800     -0.503092      0.503092       233.251       233.754    
  18  0.695748E-01  -2.66535      -2.00496       2.00496       233.369       235.374    
  19  0.903499     -0.101480     -0.763367E-01  0.763367E-01   234.095       234.172    
  20  0.374772     -0.981437     -0.738267      0.738267       231.575       232.313    
  21  0.505287     -0.682628     -0.513494      0.513494       234.623       235.136    
  22  0.738930     -0.302553     -0.227589      0.227589       235.287       235.515    
  23  0.210129      -1.56004      -1.17351       1.17351       236.725       237.898    
  24  0.438378     -0.824674     -0.620345      0.620345       236.044       236.664    
  25  0.180862      -1.71002      -1.28633       1.28633       237.534       238.820    
  26  0.784296E-01  -2.54555      -1.91484       1.91484       238.451       240.366    
  27  0.164311      -1.80600      -1.35853       1.35853       239.298       240.657    
  28  0.481806     -0.730213     -0.549289      0.549289       239.000       239.550    
  29  0.278624      -1.27789     -0.961270      0.961270       238.614       239.575    
  30  0.206818      -1.57592      -1.18545       1.18545       240.350       241.535    
  31  0.359834      -1.02211     -0.768865      0.768865       244.202       244.971    
  32  0.304083      -1.19045     -0.895497      0.895497       243.574       244.469    
  33  0.592687E-01  -2.82567      -2.12556       2.12556       244.286       246.411    
  34  0.422819     -0.860810     -0.647528      0.647528       244.829       245.477    
  35  0.575712     -0.552148     -0.415343      0.415343       244.277       244.693    
  36  0.713361     -0.337767     -0.254079      0.254079       244.523       244.777    
  37  0.414737     -0.880111     -0.662047      0.662047       245.655       246.317    
  38  0.595127     -0.518981     -0.390393      0.390393       246.469       246.859    
  39  0.528961     -0.636840     -0.479051      0.479051       246.646       247.125    
  40  0.330842E-01  -3.40870      -2.56413       2.56413       246.707       249.271    
  41  0.196030      -1.62949      -1.22575       1.22575       247.925       249.151    
  42  0.599669     -0.511377     -0.384674      0.384674       244.750       245.135    
  43  0.204430      -1.58753      -1.19419       1.19419       249.047       250.241    
  44  0.567184E-01  -2.86966      -2.15864       2.15864       248.983       251.141    
  45  0.965619     -0.349858E-01 -0.263174E-01  0.263174E-01   249.595       249.622    
  46  0.679347E-01  -2.68921      -2.02291       2.02291       248.986       251.009    
  47  0.539047     -0.617952     -0.464843      0.464843       250.450       250.915    
  48  0.898468     -0.107064     -0.805369E-01  0.805369E-01   250.480       250.561    
  49  0.212143      -1.55049      -1.16633       1.16633       250.929       252.095    
  50  0.161339      -1.82425      -1.37225       1.37225       250.658       252.030    
  51  0.663350     -0.410453     -0.308755      0.308755       251.409       251.718    
  52  0.426901     -0.851203     -0.640301      0.640301       251.225       251.865    
  53  0.812732     -0.207354     -0.155978      0.155978       251.965       252.121    
  54  0.735441     -0.307285     -0.231149      0.231149       252.144       252.375    
  55  0.442393     -0.815556     -0.613486      0.613486       252.588       253.202    
  56  0.181350      -1.70733      -1.28430       1.28430       252.500       253.785    
  57  0.735591     -0.307081     -0.230996      0.230996       253.443       253.674    
  58  0.452666     -0.792601     -0.596219      0.596219       252.214       252.810    
  59  0.244433      -1.40881      -1.05975       1.05975       253.059       254.118    
  60  0.801198     -0.221647     -0.166730      0.166730       254.031       254.198    
  61  0.103527      -2.26793      -1.70600       1.70600       254.608       256.314    
  62  0.337287      -1.08682     -0.817541      0.817541       253.038       253.855    
  63  0.224010      -1.49606      -1.12538       1.12538       252.789       253.915    
  64  0.735918     -0.306636     -0.230661      0.230661       224.398       224.628    
loop,thermsimp(1:2)       45  0.733900      0.226188E-01

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    531        255.47          0.84          1.09         23.14          0.24          0.04         25.35
Just calling func    0   0         25.35


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    532        234.64          0.88          1.09         23.14          0.00          0.04         25.15
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3    234.64
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.752231               568
loop is:       45
neval is:      531
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       45      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:   0.752231               568
loop is:       46
neval is:      531


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      568
neval,tstepnext:      531     568

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.411150     -0.888798     -0.668581      0.668581       220.452       221.121    
   2  0.587516     -0.531852     -0.400075      0.400075       223.989       224.389    
   3  0.244478      -1.40863      -1.05962       1.05962       224.398       225.457    
   4  0.668247     -0.403097     -0.303222      0.303222       224.656       224.959    
   5  0.364677      -1.00874     -0.758808      0.758808       225.796       226.555    
   6  0.953446     -0.476724E-01 -0.358606E-01  0.358606E-01   227.244       227.280    
   7  0.416430E-01  -3.17862      -2.39106       2.39106       227.857       230.248    
   8  0.899897     -0.105475     -0.793417E-01  0.793417E-01   227.988       228.067    
   9  0.553517     -0.591462     -0.444916      0.444916       229.521       229.966    
  10  0.465198     -0.765293     -0.575677      0.575677       228.743       229.319    
  11  0.109571      -2.21119      -1.66332       1.66332       230.239       231.902    
  12  0.905990     -0.987273E-01 -0.742658E-01  0.742658E-01   231.316       231.390    
  13  0.734904     -0.308015     -0.231699      0.231699       231.342       231.573    
  14  0.761233     -0.272816     -0.205221      0.205221       231.575       231.780    
  15  0.530098     -0.634694     -0.477437      0.477437       232.423       232.901    
  16  0.120202      -2.11858      -1.59366       1.59366       232.714       234.307    
  17  0.923613     -0.794620E-01 -0.597738E-01  0.597738E-01   231.956       232.016    
  18  0.527375     -0.639843     -0.481310      0.481310       233.251       233.732    
  19  0.301711E-01  -3.50087      -2.63346       2.63346       234.095       236.729    
  20  0.943751     -0.578930E-01 -0.435489E-01  0.435489E-01   233.051       233.094    
  21  0.852516     -0.159564     -0.120029      0.120029       234.623       234.743    
  22  0.689783     -0.371378     -0.279362      0.279362       233.369       233.648    
  23  0.679926     -0.385771     -0.290189      0.290189       235.287       235.578    
  24  0.492544     -0.708171     -0.532708      0.532708       236.044       236.576    
  25  0.677731     -0.389005     -0.292622      0.292622       236.725       237.017    
  26  0.945293     -0.562607E-01 -0.423211E-01  0.423211E-01   237.534       237.576    
  27  0.926517     -0.763224E-01 -0.574120E-01  0.574120E-01   239.000       239.058    
  28  0.188178      -1.67037      -1.25650       1.25650       238.614       239.871    
  29  0.714898     -0.335615     -0.252460      0.252460       238.451       238.704    
  30  0.533411     -0.628463     -0.472749      0.472749       239.298       239.771    
  31  0.957718     -0.432023E-01 -0.324981E-01  0.324981E-01   240.350       240.382    
  32  0.385252     -0.953858     -0.717522      0.717522       243.574       244.291    
  33  0.950314     -0.509632E-01 -0.383361E-01  0.383361E-01   244.277       244.316    
  34  0.342902      -1.07031     -0.805121      0.805121       244.523       245.328    
  35  0.591435     -0.525204     -0.395075      0.395075       244.202       244.597    
  36  0.303703      -1.19170     -0.896436      0.896436       244.750       245.647    
  37  0.588332     -0.530464     -0.399032      0.399032       244.829       245.228    
  38  0.358881      -1.02477     -0.770861      0.770861       245.655       246.426    
  39  0.394022     -0.931349     -0.700590      0.700590       244.286       244.986    
  40  0.250643      -1.38373      -1.04088       1.04088       246.469       247.510    
  41  0.513924     -0.665680     -0.500745      0.500745       246.646       247.146    
  42  0.585127     -0.535927     -0.403141      0.403141       247.925       248.329    
  43  0.857115     -0.154183     -0.115981      0.115981       246.707       246.823    
  44  0.112453      -2.18522      -1.64379       1.64379       249.595       251.239    
  45  0.371545     -0.990085     -0.744773      0.744773       249.047       249.791    
  46  0.687662     -0.374457     -0.281678      0.281678       250.480       250.762    
  47  0.668495     -0.402726     -0.302943      0.302943       250.450       250.753    
  48  0.826390     -0.190688     -0.143442      0.143442       248.986       249.129    
  49  0.966739     -0.338270E-01 -0.254457E-01  0.254457E-01   248.983       249.008    
  50  0.398653     -0.919664     -0.691799      0.691799       251.409       252.101    
  51  0.452270E-01  -3.09606      -2.32895       2.32895       251.225       253.554    
  52  0.663631     -0.410029     -0.308436      0.308436       250.658       250.966    
  53  0.634192     -0.455403     -0.342569      0.342569       250.929       251.271    
  54  0.506407     -0.680414     -0.511828      0.511828       251.965       252.477    
  55  0.797944     -0.225717     -0.169791      0.169791       252.144       252.313    
  56  0.738742     -0.302806     -0.227780      0.227780       252.214       252.441    
  57  0.485498     -0.722580     -0.543547      0.543547       252.588       253.132    
  58  0.862862     -0.147501     -0.110954      0.110954       253.443       253.554    
  59  0.812637     -0.207470     -0.156066      0.156066       252.500       252.656    
  60  0.973888     -0.264594E-01 -0.199036E-01  0.199036E-01   253.038       253.057    
  61  0.440908     -0.818920     -0.616017      0.616017       252.789       253.406    
  62  0.636179     -0.452276     -0.340216      0.340216       253.059       253.399    
  63  0.785731     -0.241140     -0.181393      0.181393       254.031       254.212    
  64  0.933458     -0.688597E-01 -0.517984E-01  0.517984E-01   234.636       234.687    
loop,thermsimp(1:2)       46  0.668581      0.400075    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    533        228.09          0.87          1.09         23.08          0.05          0.04         25.12
Just calling func    0   0         25.12


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    228.09
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.752231               568
loop is:       46
neval is:      532
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       46      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:   0.752231               568
loop is:       47
neval is:      532


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      568
neval,tstepnext:      532     568

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.150109      -1.89639      -1.42653       1.42653       220.452       221.879    
   2  0.239258      -1.43021      -1.07585       1.07585       223.989       225.065    
   3  0.668620     -0.402540     -0.302803      0.302803       224.656       224.959    
   4  0.966081     -0.345073E-01 -0.259575E-01  0.259575E-01   224.398       224.424    
   5  0.923150     -0.799638E-01 -0.601513E-01  0.601513E-01   225.796       225.856    
   6  0.341268      -1.07509     -0.808715      0.808715       227.244       228.053    
   7  0.810762     -0.209780     -0.157803      0.157803       227.988       228.146    
   8  0.936610     -0.654881E-01 -0.492622E-01  0.492622E-01   228.743       228.792    
   9  0.841905     -0.172088     -0.129450      0.129450       229.521       229.651    
  10  0.289300      -1.24029     -0.932986      0.932986       227.857       228.790    
  11  0.384787E-01  -3.25765      -2.45050       2.45050       231.316       233.766    
  12  0.633639E-01  -2.75886      -2.07530       2.07530       231.342       233.417    
  13  0.574893     -0.553572     -0.416414      0.416414       231.575       231.991    
  14  0.983093E-01  -2.31964      -1.74490       1.74490       230.239       231.984    
  15  0.224987      -1.49171      -1.12211       1.12211       231.956       233.078    
  16  0.805566     -0.216210     -0.162640      0.162640       232.423       232.586    
  17  0.431600     -0.840255     -0.632066      0.632066       233.051       233.683    
  18  0.495594     -0.701997     -0.528064      0.528064       233.369       233.897    
  19  0.127775      -2.05749      -1.54771       1.54771       233.251       234.799    
  20  0.146938      -1.91775      -1.44259       1.44259       232.714       234.156    
  21  0.538937     -0.618156     -0.464996      0.464996       234.636       235.101    
  22  0.811785     -0.208520     -0.156855      0.156855       234.623       234.780    
  23  0.224452      -1.49409      -1.12390       1.12390       235.287       236.411    
  24  0.739023     -0.302426     -0.227494      0.227494       236.044       236.271    
  25  0.608338     -0.497025     -0.373878      0.373878       234.095       234.469    
  26  0.818725     -0.200007     -0.150452      0.150452       236.725       236.875    
  27  0.434351     -0.833902     -0.627287      0.627287       237.534       238.161    
  28  0.874879     -0.133669     -0.100550      0.100550       238.451       238.552    
  29  0.478311     -0.737495     -0.554767      0.554767       239.000       239.555    
  30  0.420407     -0.866533     -0.651833      0.651833       239.298       239.950    
  31  0.803536     -0.218734     -0.164538      0.164538       238.614       238.779    
  32  0.375583E-01  -3.28186      -2.46872       2.46872       240.350       242.818    
  33  0.520223     -0.653499     -0.491582      0.491582       243.574       244.065    
  34  0.902726     -0.102336     -0.769803E-01  0.769803E-01   244.277       244.354    
  35  0.510519     -0.672327     -0.505745      0.505745       244.202       244.708    
  36  0.896421     -0.109346     -0.822531E-01  0.822531E-01   244.286       244.368    
  37  0.478401     -0.737305     -0.554624      0.554624       244.829       245.384    
  38  0.440189     -0.820550     -0.617243      0.617243       244.523       245.140    
  39  0.187305      -1.67502      -1.26000       1.26000       244.750       246.010    
  40  0.997827     -0.217544E-02 -0.163644E-02  0.163644E-02   245.655       245.657    
  41  0.453294     -0.791215     -0.595176      0.595176       246.707       247.302    
  42  0.143844E-01  -4.24161      -3.19067       3.19067       246.646       249.836    
  43  0.735772     -0.306835     -0.230811      0.230811       246.469       246.699    
  44  0.184631E-01  -3.99198      -3.00289       3.00289       247.925       250.928    
  45  0.217662      -1.52481      -1.14701       1.14701       248.983       250.130    
  46  0.461473     -0.773332     -0.581724      0.581724       248.986       249.567    
  47  0.669168     -0.401720     -0.302186      0.302186       249.047       249.349    
  48  0.436785     -0.828315     -0.623084      0.623084       250.450       251.074    
  49  0.518540     -0.656738     -0.494018      0.494018       250.480       250.974    
  50  0.780680     -0.247590     -0.186245      0.186245       250.658       250.844    
  51  0.568391E-01  -2.86753      -2.15705       2.15705       249.595       251.752    
  52  0.794275     -0.230325     -0.173258      0.173258       250.929       251.102    
  53  0.724306     -0.322542     -0.242626      0.242626       251.409       251.652    
  54  0.935171     -0.670255E-01 -0.504187E-01  0.504187E-01   252.144       252.194    
  55  0.451996     -0.794081     -0.597332      0.597332       252.214       252.811    
  56  0.297965      -1.21078     -0.910785      0.910785       251.965       252.876    
  57  0.974843     -0.254791E-01 -0.191662E-01  0.191662E-01   252.500       252.519    
  58  0.199050      -1.61420      -1.21425       1.21425       253.038       254.252    
  59  0.846849E-01  -2.46882      -1.85712       1.85712       252.588       254.445    
  60  0.905790     -0.989476E-01 -0.744314E-01  0.744314E-01   253.059       253.133    
  61  0.150862      -1.89139      -1.42276       1.42276       252.789       254.212    
  62  0.488744E-01  -3.01850      -2.27061       2.27061       251.225       253.496    
  63  0.445127     -0.809396     -0.608853      0.608853       253.443       254.052    
  64  0.382118     -0.962027     -0.723666      0.723666       228.090       228.814    
loop,thermsimp(1:2)       47   1.42653       1.07585    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    534        223.87          0.88          1.09         23.11          0.04          0.04         25.16
Just calling func    0   0         25.16


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    223.87
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.752231               568
loop is:       47
neval is:      533
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       47      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:   0.752231               568
loop is:       48
neval is:      533


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      568
neval,tstepnext:      533     568

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.428946     -0.846425     -0.636707      0.636707       220.452       221.089    
   2  0.178225      -1.72471      -1.29738       1.29738       224.398       225.695    
   3  0.309460      -1.17293     -0.882312      0.882312       224.656       225.538    
   4  0.769202     -0.262402     -0.197387      0.197387       223.989       224.186    
   5  0.867155     -0.142538     -0.107222      0.107222       225.796       225.903    
   6  0.842618     -0.171242     -0.128813      0.128813       227.244       227.373    
   7  0.887101     -0.119796     -0.901146E-01  0.901146E-01   227.988       228.078    
   8  0.293963E-01  -3.52689      -2.65303       2.65303       227.857       230.510    
   9  0.388864     -0.944525     -0.710501      0.710501       228.743       229.454    
  10  0.841345E-01  -2.47534      -1.86203       1.86203       228.090       229.952    
  11  0.764016     -0.269167     -0.202476      0.202476       229.521       229.724    
  12  0.104062      -2.26277      -1.70213       1.70213       230.239       231.941    
  13  0.454454     -0.788658     -0.593253      0.593253       231.575       232.168    
  14  0.655983     -0.421620     -0.317156      0.317156       232.423       232.740    
  15  0.899303     -0.106136     -0.798386E-01  0.798386E-01   231.956       232.036    
  16  0.566529     -0.568226     -0.427437      0.427437       231.342       231.769    
  17  0.391578     -0.937570     -0.705269      0.705269       233.051       233.756    
  18  0.743184     -0.296811     -0.223271      0.223271       231.316       231.539    
  19  0.811693     -0.208633     -0.156940      0.156940       233.369       233.526    
  20  0.608274     -0.497129     -0.373956      0.373956       232.714       233.088    
  21  0.786531     -0.240123     -0.180628      0.180628       234.095       234.276    
  22  0.257200      -1.35790      -1.02145       1.02145       234.623       235.644    
  23  0.369774     -0.994862     -0.748366      0.748366       233.251       233.999    
  24  0.955329     -0.456994E-01 -0.343765E-01  0.343765E-01   234.636       234.670    
  25  0.428185     -0.848200     -0.638042      0.638042       236.044       236.682    
  26  0.969522     -0.309523E-01 -0.232833E-01  0.232833E-01   235.287       235.311    
  27  0.457112E-01  -3.08541      -2.32094       2.32094       236.725       239.046    
  28  0.126346      -2.06873      -1.55616       1.55616       237.534       239.090    
  29  0.979821     -0.203853E-01 -0.153345E-01  0.153345E-01   238.451       238.467    
  30  0.249987      -1.38635      -1.04285       1.04285       238.614       239.657    
  31  0.100726      -2.29535      -1.72663       1.72663       239.000       240.727    
  32  0.563310     -0.573925     -0.431724      0.431724       239.298       239.730    
  33  0.601320     -0.508628     -0.382605      0.382605       240.350       240.732    
  34  0.850177E-01  -2.46490      -1.85417       1.85417       243.574       245.428    
  35  0.176521      -1.73432      -1.30461       1.30461       244.277       245.582    
  36  0.254061      -1.37018      -1.03069       1.03069       244.286       245.316    
  37  0.540097     -0.616006     -0.463379      0.463379       244.202       244.665    
  38  0.983165E-01  -2.31956      -1.74485       1.74485       244.523       246.268    
  39  0.729520     -0.315369     -0.237230      0.237230       244.829       245.066    
  40  0.847608E-01  -2.46792      -1.85645       1.85645       245.655       247.511    
  41  0.791981     -0.233218     -0.175434      0.175434       244.750       244.926    
  42  0.117343E-01  -4.44524      -3.34384       3.34384       246.469       249.813    
  43  0.469135     -0.756864     -0.569336      0.569336       246.707       247.277    
  44  0.221703E-01  -3.80900      -2.86525       2.86525       249.047       251.912    
  45  0.234879      -1.44868      -1.08974       1.08974       248.986       250.075    
  46  0.854627     -0.157091     -0.118168      0.118168       246.646       246.764    
  47  0.664467E-01  -2.71135      -2.03956       2.03956       248.983       251.022    
  48  0.209505      -1.56301      -1.17574       1.17574       250.658       251.834    
  49  0.507833     -0.677603     -0.509714      0.509714       247.925       248.435    
  50  0.987418     -0.126621E-01 -0.952480E-02  0.952480E-02   250.480       250.490    
  51  0.818705E-01  -2.50262      -1.88255       1.88255       250.450       252.333    
  52  0.112517      -2.18465      -1.64336       1.64336       250.929       252.572    
  53  0.475812E-01  -3.04532      -2.29078       2.29078       251.409       253.700    
  54  0.538665     -0.618662     -0.465377      0.465377       249.595       250.061    
  55  0.236754      -1.44073      -1.08376       1.08376       252.144       253.227    
  56  0.723834     -0.323194     -0.243116      0.243116       252.500       252.743    
  57  0.903389E-01  -2.40419      -1.80850       1.80850       252.214       254.022    
  58  0.469316     -0.756479     -0.569047      0.569047       251.965       252.534    
  59  0.927373     -0.753996E-01 -0.567179E-01  0.567179E-01   253.059       253.115    
  60  0.672124     -0.397313     -0.298871      0.298871       251.225       251.524    
  61  0.818577     -0.200187     -0.150587      0.150587       253.443       253.594    
  62  0.329125E-01  -3.41390      -2.56804       2.56804       252.789       255.358    
  63  0.730039     -0.314657     -0.236695      0.236695       253.038       253.274    
  64  0.659636E-01  -2.71865      -2.04505       2.04505       223.866       225.911    
loop,thermsimp(1:2)       48  0.636707       1.29738    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    535        247.01          0.88          1.09         23.05          0.06          0.05         25.13
Just calling func    0   0         25.13


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    247.01
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.752231               568
loop is:       48
neval is:      534
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       48      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:   0.752231               568
loop is:       49
neval is:      534


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      568
neval,tstepnext:      534     568

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.822318     -0.195628     -0.147158      0.147158       220.452       220.600    
   2  0.715748     -0.334427     -0.251566      0.251566       223.989       224.240    
   3  0.155171      -1.86323      -1.40158       1.40158       224.656       226.058    
   4  0.248285      -1.39318      -1.04799       1.04799       224.398       225.446    
   5  0.893479E-01  -2.41522      -1.81680       1.81680       225.796       227.613    
   6  0.807784     -0.213461     -0.160572      0.160572       223.866       224.027    
   7  0.765394     -0.267364     -0.201120      0.201120       227.244       227.445    
   8  0.465295     -0.765084     -0.575520      0.575520       227.988       228.563    
   9  0.310822      -1.16853     -0.879008      0.879008       228.743       229.622    
  10  0.405006     -0.903853     -0.679906      0.679906       229.521       230.201    
  11  0.230891      -1.46581      -1.10263       1.10263       228.090       229.193    
  12  0.952479     -0.486868E-01 -0.366237E-01  0.366237E-01   227.857       227.894    
  13  0.608237     -0.497191     -0.374002      0.374002       231.316       231.690    
  14  0.870899     -0.138230     -0.103981      0.103981       231.342       231.446    
  15  0.175493      -1.74016      -1.30900       1.30900       230.239       231.548    
  16  0.529821     -0.635216     -0.477829      0.477829       231.956       232.434    
  17  0.596933     -0.515951     -0.388114      0.388114       231.575       231.963    
  18  0.380761     -0.965584     -0.726342      0.726342       232.423       233.149    
  19  0.572545     -0.557664     -0.419492      0.419492       232.714       233.133    
  20  0.503826     -0.685525     -0.515673      0.515673       233.369       233.884    
  21  0.712520     -0.338948     -0.254967      0.254967       233.051       233.306    
  22  0.455917     -0.785445     -0.590836      0.590836       233.251       233.842    
  23  0.546601     -0.604037     -0.454375      0.454375       234.095       234.550    
  24  0.780368     -0.247990     -0.186546      0.186546       234.636       234.822    
  25  0.360382      -1.02059     -0.767720      0.767720       235.287       236.055    
  26  0.365688      -1.00598     -0.756726      0.756726       234.623       235.379    
  27  0.471917     -0.750951     -0.564889      0.564889       236.044       236.609    
  28  0.774681     -0.255304     -0.192048      0.192048       238.451       238.643    
  29  0.514822     -0.663934     -0.499431      0.499431       236.725       237.224    
  30  0.936706     -0.653859E-01 -0.491853E-01  0.491853E-01   237.534       237.583    
  31  0.611289     -0.492185     -0.370237      0.370237       238.614       238.984    
  32  0.138276      -1.97851      -1.48829       1.48829       239.298       240.787    
  33  0.547999E-01  -2.90407      -2.18453       2.18453       239.000       241.185    
  34  0.739054E-01  -2.60497      -1.95954       1.95954       240.350       242.309    
  35  0.230637E-01  -3.76949      -2.83553       2.83553       244.202       247.037    
  36  0.294564E-01  -3.52484      -2.65150       2.65150       244.750       247.402    
  37  0.331008      -1.10561     -0.831677      0.831677       244.829       245.661    
  38  0.656803     -0.420372     -0.316216      0.316216       244.286       244.602    
  39  0.869431     -0.139917     -0.105250      0.105250       243.574       243.679    
  40  0.783501     -0.243983     -0.183531      0.183531       244.277       244.461    
  41  0.737192     -0.304907     -0.229361      0.229361       244.523       244.752    
  42  0.326415      -1.11959     -0.842188      0.842188       246.646       247.488    
  43  0.430213     -0.843476     -0.634489      0.634489       246.707       247.342    
  44  0.396582     -0.924872     -0.695717      0.695717       245.655       246.351    
  45  0.368807     -0.997482     -0.750337      0.750337       247.925       248.676    
  46  0.922518     -0.806483E-01 -0.606662E-01  0.606662E-01   246.469       246.529    
  47  0.106607      -2.23861      -1.68395       1.68395       249.595       251.279    
  48  0.389788     -0.942153     -0.708717      0.708717       248.986       249.694    
  49  0.521480     -0.651085     -0.489766      0.489766       250.480       250.970    
  50  0.275785      -1.28813     -0.968974      0.968974       248.983       249.952    
  51  0.973600     -0.267545E-01 -0.201256E-01  0.201256E-01   251.225       251.245    
  52  0.270717      -1.30668     -0.982925      0.982925       250.658       251.641    
  53  0.271460      -1.30394     -0.980865      0.980865       249.047       250.027    
  54  0.740973     -0.299791     -0.225512      0.225512       250.450       250.676    
  55  0.567806     -0.565975     -0.425744      0.425744       251.965       252.391    
  56  0.959778     -0.410536E-01 -0.308818E-01  0.308818E-01   250.929       250.960    
  57  0.186384      -1.67994      -1.26371       1.26371       252.500       253.764    
  58  0.618696     -0.480141     -0.361177      0.361177       253.059       253.420    
  59  0.518830     -0.656180     -0.493599      0.493599       252.144       252.637    
  60  0.639507     -0.447057     -0.336290      0.336290       253.038       253.374    
  61  0.340583      -1.07710     -0.810226      0.810226       253.443       254.254    
  62  0.635751     -0.452948     -0.340721      0.340721       251.409       251.750    
  63  0.241795      -1.41966      -1.06792       1.06792       252.214       253.282    
  64  0.552642     -0.593046     -0.446107      0.446107       247.008       247.454    
loop,thermsimp(1:2)       49  0.147158      0.251566    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    536        223.11          0.88          1.09         23.12          0.00          0.04         25.13
Just calling func    0   0         25.13


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    223.11
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.752231               568
loop is:       49
neval is:      535
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       49      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:   0.752231               568
loop is:       50
neval is:      535


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      568
neval,tstepnext:      535     568

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.255294      -1.36534      -1.02705       1.02705       220.452       221.480    
   2  0.413516     -0.883059     -0.664264      0.664264       223.866       224.530    
   3  0.223595      -1.49792      -1.12678       1.12678       223.989       225.116    
   4  0.714947     -0.335546     -0.252408      0.252408       224.398       224.650    
   5  0.331136      -1.10523     -0.831386      0.831386       224.656       225.488    
   6  0.910877     -0.933475E-01 -0.702189E-01  0.702189E-01   227.244       227.315    
   7  0.576816E-01  -2.85282      -2.14598       2.14598       225.796       227.942    
   8  0.130224      -2.03850      -1.53342       1.53342       227.857       229.391    
   9  0.739903     -0.301236     -0.226599      0.226599       227.988       228.214    
  10  0.930449     -0.720877E-01 -0.542266E-01  0.542266E-01   228.090       228.144    
  11  0.471320     -0.752217     -0.565841      0.565841       228.743       229.309    
  12  0.427577     -0.849620     -0.639111      0.639111       229.521       230.160    
  13  0.519295     -0.655284     -0.492925      0.492925       231.342       231.835    
  14  0.157743      -1.84679      -1.38921       1.38921       230.239       231.628    
  15  0.408052     -0.896360     -0.674270      0.674270       231.316       231.990    
  16  0.784179     -0.243118     -0.182881      0.182881       231.575       231.757    
  17  0.932934     -0.694213E-01 -0.522208E-01  0.522208E-01   231.956       232.008    
  18  0.602319     -0.506968     -0.381357      0.381357       232.714       233.095    
  19  0.792109     -0.233056     -0.175312      0.175312       232.423       232.598    
  20  0.916935     -0.867189E-01 -0.652326E-01  0.652326E-01   233.051       233.116    
  21  0.245817      -1.40317      -1.05551       1.05551       233.251       234.306    
  22  0.722474     -0.325074     -0.244531      0.244531       233.369       233.613    
  23  0.448797     -0.801185     -0.602676      0.602676       234.095       234.698    
  24  0.147822      -1.91175      -1.43808       1.43808       234.636       236.074    
  25  0.826441     -0.190627     -0.143396      0.143396       234.623       234.766    
  26  0.136181      -1.99377      -1.49978       1.49978       235.287       236.787    
  27  0.555081     -0.588641     -0.442794      0.442794       236.044       236.487    
  28  0.421604     -0.863690     -0.649694      0.649694       236.725       237.374    
  29  0.934992     -0.672172E-01 -0.505629E-01  0.505629E-01   237.534       237.584    
  30  0.917081     -0.865597E-01 -0.651128E-01  0.651128E-01   238.451       238.516    
  31  0.211295      -1.55450      -1.16934       1.16934       238.614       239.783    
  32  0.336858      -1.08809     -0.818497      0.818497       239.298       240.117    
  33  0.210286      -1.55929      -1.17294       1.17294       239.000       240.173    
  34  0.575355     -0.552768     -0.415809      0.415809       240.350       240.765    
  35  0.822963     -0.194844     -0.146567      0.146567       243.574       243.720    
  36  0.510226E-01  -2.97549      -2.23825       2.23825       244.277       246.516    
  37  0.829304     -0.187169     -0.140794      0.140794       244.286       244.426    
  38  0.297206      -1.21333     -0.912705      0.912705       244.523       245.436    
  39  0.733070     -0.310514     -0.233578      0.233578       244.829       245.063    
  40  0.545801     -0.605502     -0.455477      0.455477       245.655       246.111    
  41  0.990988     -0.905277E-02 -0.680977E-02  0.680977E-02   246.469       246.475    
  42  0.671953     -0.397567     -0.299062      0.299062       244.202       244.501    
  43  0.594649     -0.519784     -0.390997      0.390997       246.707       247.098    
  44  0.698796     -0.358397     -0.269597      0.269597       244.750       245.020    
  45  0.703020     -0.352370     -0.265063      0.265063       247.008       247.273    
  46  0.634434     -0.455022     -0.342281      0.342281       246.646       246.988    
  47  0.691237     -0.369272     -0.277778      0.277778       247.925       248.203    
  48  0.902402     -0.102696     -0.772509E-01  0.772509E-01   248.986       249.063    
  49  0.433997     -0.834717     -0.627900      0.627900       248.983       249.610    
  50  0.593137     -0.522330     -0.392913      0.392913       249.047       249.439    
  51  0.744110     -0.295567     -0.222334      0.222334       250.450       250.673    
  52  0.804978     -0.216940     -0.163189      0.163189       250.929       251.092    
  53  0.228161      -1.47770      -1.11157       1.11157       250.480       251.592    
  54  0.906275     -0.984127E-01 -0.740291E-01  0.740291E-01   251.225       251.299    
  55  0.420606     -0.866058     -0.651475      0.651475       249.595       250.247    
  56  0.609275E-01  -2.79807      -2.10480       2.10480       250.658       252.763    
  57  0.958138     -0.427632E-01 -0.321678E-01  0.321678E-01   251.409       251.441    
  58  0.529622     -0.635592     -0.478112      0.478112       251.965       252.443    
  59  0.646076     -0.436838     -0.328603      0.328603       252.144       252.472    
  60  0.472837     -0.749005     -0.563424      0.563424       252.214       252.777    
  61  0.678092     -0.388473     -0.292221      0.292221       253.038       253.330    
  62  0.649085E-01  -2.73478      -2.05718       2.05718       253.059       255.116    
  63  0.587083E-01  -2.83517      -2.13271       2.13271       252.500       254.633    
  64  0.779281     -0.249383     -0.187594      0.187594       223.107       223.295    
loop,thermsimp(1:2)       50   1.02705      0.664264    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    537        249.83          0.88          1.09         23.10          0.00          0.05         25.12
Just calling func    0   0         25.11


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    249.83
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.752231               568
loop is:       50
neval is:      536
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       50      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:   0.752231               568
loop is:       51
neval is:      536


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      568
neval,tstepnext:      536     568

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.642127     -0.442969     -0.333215      0.333215       220.452       220.786    
   2  0.831300     -0.184764     -0.138985      0.138985       223.107       223.246    
   3  0.900454     -0.104857     -0.788763E-01  0.788763E-01   223.866       223.945    
   4  0.961218     -0.395545E-01 -0.297541E-01  0.297541E-01   224.398       224.427    
   5  0.684359     -0.379272     -0.285300      0.285300       223.989       224.274    
   6  0.717130     -0.332498     -0.250116      0.250116       224.656       224.906    
   7  0.332568      -1.10091     -0.828139      0.828139       227.244       228.072    
   8  0.733704     -0.309649     -0.232928      0.232928       225.796       226.029    
   9  0.774601E-01  -2.55799      -1.92420       1.92420       228.090       230.014    
  10  0.487558E-02  -5.32352      -4.00451       4.00451       227.988       231.992    
  11  0.239977      -1.42721      -1.07359       1.07359       228.743       229.817    
  12  0.890111     -0.116409     -0.875663E-01  0.875663E-01   227.857       227.945    
  13  0.429630     -0.844832     -0.635509      0.635509       229.521       230.157    
  14  0.759060     -0.275674     -0.207371      0.207371       230.239       230.446    
  15  0.173246      -1.75304      -1.31869       1.31869       231.575       232.893    
  16  0.416318     -0.876305     -0.659184      0.659184       231.342       232.001    
  17  0.109242      -2.21419      -1.66558       1.66558       231.316       232.981    
  18  0.746798     -0.291960     -0.219622      0.219622       231.956       232.176    
  19  0.276729      -1.28472     -0.966404      0.966404       232.423       233.390    
  20  0.709859     -0.342689     -0.257782      0.257782       232.714       232.972    
  21  0.924199     -0.788273E-01 -0.592963E-01  0.592963E-01   233.051       233.110    
  22  0.831505     -0.184517     -0.138800      0.138800       233.369       233.507    
  23  0.685310     -0.377884     -0.284256      0.284256       233.251       233.535    
  24  0.828829     -0.187742     -0.141225      0.141225       234.095       234.237    
  25  0.169988      -1.77203      -1.33297       1.33297       234.623       235.956    
  26  0.416558E-01  -3.17831      -2.39083       2.39083       234.636       237.026    
  27  0.248983      -1.39037      -1.04588       1.04588       236.044       237.090    
  28  0.982288     -0.178711E-01 -0.134432E-01  0.134432E-01   235.287       235.301    
  29  0.915863     -0.878881E-01 -0.661122E-01  0.661122E-01   236.725       236.791    
  30  0.325548      -1.12224     -0.844187      0.844187       237.534       238.378    
  31  0.598603     -0.513157     -0.386012      0.386012       238.451       238.837    
  32  0.509959     -0.673425     -0.506571      0.506571       238.614       239.121    
  33  0.580600     -0.543692     -0.408982      0.408982       239.298       239.707    
  34  0.917272     -0.863513E-01 -0.649561E-01  0.649561E-01   239.000       239.065    
  35  0.927434E-01  -2.37792      -1.78874       1.78874       240.350       242.138    
  36  0.176201      -1.73613      -1.30597       1.30597       243.574       244.880    
  37  0.479433     -0.735152     -0.553004      0.553004       244.286       244.839    
  38  0.258569      -1.35259      -1.01746       1.01746       244.202       245.219    
  39  0.479143     -0.735756     -0.553458      0.553458       244.750       245.304    
  40  0.167507      -1.78673      -1.34403       1.34403       244.829       246.173    
  41  0.862868     -0.147493     -0.110949      0.110949       244.523       244.634    
  42  0.492972     -0.707304     -0.532056      0.532056       245.655       246.187    
  43  0.801329     -0.221484     -0.166607      0.166607       246.469       246.635    
  44  0.246801      -1.39917      -1.05250       1.05250       244.277       245.330    
  45  0.701552     -0.354461     -0.266636      0.266636       246.646       246.912    
  46  0.814555     -0.205114     -0.154293      0.154293       246.707       246.861    
  47  0.379473     -0.968973     -0.728891      0.728891       247.008       247.737    
  48  0.428824     -0.846709     -0.636921      0.636921       247.925       248.562    
  49  0.957757     -0.431612E-01 -0.324672E-01  0.324672E-01   248.986       249.018    
  50  0.572954     -0.556949     -0.418955      0.418955       249.047       249.466    
  51  0.195151      -1.63398      -1.22913       1.22913       248.983       250.212    
  52  0.989770     -0.102824E-01 -0.773472E-02  0.773472E-02   249.595       249.603    
  53  0.390377     -0.940642     -0.707580      0.707580       250.450       251.158    
  54  0.474948     -0.744550     -0.560073      0.560073       250.929       251.489    
  55  0.371289     -0.990774     -0.745291      0.745291       251.225       251.970    
  56  0.932419     -0.699726E-01 -0.526355E-01  0.526355E-01   251.409       251.462    
  57  0.820649     -0.197660     -0.148686      0.148686       250.480       250.629    
  58  0.818465     -0.200325     -0.150691      0.150691       251.965       252.116    
  59  0.493072     -0.707099     -0.531902      0.531902       252.144       252.675    
  60  0.936419     -0.656925E-01 -0.494159E-01  0.494159E-01   250.658       250.707    
  61  0.157983      -1.84527      -1.38807       1.38807       252.214       253.602    
  62  0.414170     -0.881479     -0.663076      0.663076       253.038       253.701    
  63  0.476203     -0.741910     -0.558088      0.558088       252.500       253.058    
  64  0.981484     -0.186900E-01 -0.140592E-01  0.140592E-01   249.834       249.848    
loop,thermsimp(1:2)       51  0.333215      0.138985    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    538        252.61          0.88          1.09         23.08          0.03          0.04         25.12
Just calling func    0   0         25.13


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    252.61
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.752231               568
loop is:       51
neval is:      537
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       51      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:   0.752231               568
loop is:       52
neval is:      537


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      568
neval,tstepnext:      537     568

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.896160     -0.109636     -0.824719E-01  0.824719E-01   220.452       220.535    
   2  0.835424     -0.179816     -0.135263      0.135263       223.107       223.242    
   3  0.417746     -0.872882     -0.656609      0.656609       223.866       224.523    
   4  0.818506     -0.200274     -0.150652      0.150652       223.989       224.139    
   5  0.183909      -1.69331      -1.27376       1.27376       224.398       225.671    
   6  0.591356     -0.525336     -0.395174      0.395174       224.656       225.051    
   7  0.620368     -0.477443     -0.359148      0.359148       225.796       226.155    
   8  0.154560      -1.86718      -1.40455       1.40455       227.857       229.262    
   9  0.999372     -0.627923E-03 -0.472343E-03  0.472343E-03   227.244       227.245    
  10  0.862454     -0.147973     -0.111310      0.111310       228.743       228.854    
  11  0.801162     -0.221692     -0.166763      0.166763       228.090       228.257    
  12  0.148229      -1.90900      -1.43601       1.43601       229.521       230.957    
  13  0.598458     -0.513400     -0.386195      0.386195       230.239       230.625    
  14  0.417671     -0.873062     -0.656744      0.656744       227.988       228.645    
  15  0.132181      -2.02358      -1.52220       1.52220       231.342       232.864    
  16  0.633182     -0.456997     -0.343767      0.343767       231.956       232.300    
  17  0.900020     -0.105338     -0.792387E-01  0.792387E-01   231.575       231.654    
  18  0.714050     -0.336802     -0.253353      0.253353       232.714       232.967    
  19  0.523793     -0.646659     -0.486437      0.486437       231.316       231.802    
  20  0.240153E-01  -3.72906      -2.80512       2.80512       233.051       235.856    
  21  0.608931     -0.496050     -0.373144      0.373144       232.423       232.796    
  22  0.948101     -0.532939E-01 -0.400893E-01  0.400893E-01   233.369       233.409    
  23  0.266229      -1.32340     -0.995501      0.995501       233.251       234.246    
  24  0.573219     -0.556488     -0.418608      0.418608       234.095       234.514    
  25  0.349325      -1.05175     -0.791160      0.791160       235.287       236.079    
  26  0.323907      -1.12730     -0.847990      0.847990       234.623       235.471    
  27  0.795225E-01  -2.53172      -1.90443       1.90443       236.725       238.629    
  28  0.825606     -0.191637     -0.144155      0.144155       234.636       234.780    
  29  0.396524     -0.925018     -0.695827      0.695827       236.044       236.740    
  30  0.401444     -0.912687     -0.686551      0.686551       237.534       238.220    
  31  0.688595     -0.373102     -0.280658      0.280658       238.451       238.732    
  32  0.773187     -0.257234     -0.193499      0.193499       239.000       239.194    
  33  0.852559     -0.159512     -0.119990      0.119990       238.614       238.734    
  34  0.985405     -0.147025E-01 -0.110597E-01  0.110597E-01   239.298       239.309    
  35  0.556199     -0.586629     -0.441280      0.441280       240.350       240.791    
  36  0.913827     -0.901138E-01 -0.677864E-01  0.677864E-01   244.523       244.591    
  37  0.858782     -0.152240     -0.114520      0.114520       244.286       244.400    
  38  0.477249     -0.739717     -0.556438      0.556438       243.574       244.130    
  39  0.728564     -0.316680     -0.238216      0.238216       244.202       244.440    
  40  0.338280      -1.08388     -0.815330      0.815330       244.750       245.566    
  41  0.718699     -0.330313     -0.248471      0.248471       244.277       244.526    
  42  0.746009     -0.293017     -0.220417      0.220417       244.829       245.050    
  43  0.658362     -0.418001     -0.314433      0.314433       245.655       245.969    
  44  0.997855     -0.214685E-02 -0.161493E-02  0.161493E-02   246.469       246.470    
  45  0.506528     -0.680175     -0.511649      0.511649       246.707       247.219    
  46  0.808231E-01  -2.51549      -1.89223       1.89223       246.646       248.538    
  47  0.148828      -1.90497      -1.43297       1.43297       247.008       248.441    
  48  0.824318     -0.193199     -0.145330      0.145330       247.925       248.071    
  49  0.875043     -0.133482     -0.100409      0.100409       248.986       249.086    
  50  0.470042     -0.754934     -0.567885      0.567885       249.047       249.614    
  51  0.292819      -1.22820     -0.923891      0.923891       249.595       250.519    
  52  0.811396     -0.208999     -0.157215      0.157215       249.834       249.991    
  53  0.755021     -0.281010     -0.211385      0.211385       248.983       249.194    
  54  0.556253     -0.586533     -0.441208      0.441208       250.480       250.922    
  55  0.978213     -0.220282E-01 -0.165703E-01  0.165703E-01   250.658       250.675    
  56  0.636096     -0.452406     -0.340314      0.340314       250.450       250.791    
  57  0.404576     -0.904915     -0.680705      0.680705       251.409       252.090    
  58  0.300789      -1.20135     -0.903690      0.903690       250.929       251.832    
  59  0.449678     -0.799224     -0.601201      0.601201       251.225       251.826    
  60  0.519558     -0.654776     -0.492543      0.492543       251.965       252.457    
  61  0.193583      -1.64205      -1.23520       1.23520       252.144       253.379    
  62  0.846846     -0.166237     -0.125049      0.125049       252.500       252.625    
  63  0.431300     -0.840952     -0.632590      0.632590       252.214       252.846    
  64  0.350162      -1.04936     -0.789361      0.789361       252.607       253.397    
loop,thermsimp(1:2)       52  0.824719E-01  0.135263    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    539        253.04          0.88          1.09         23.13          0.00          0.04         25.13
Just calling func    0   0         25.14


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    253.04
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.752231               568
loop is:       52
neval is:      538
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       52      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:   0.752231               568
loop is:       53
neval is:      538


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      568
neval,tstepnext:      538     568

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.258600      -1.35247      -1.01737       1.01737       220.452       221.470    
   2  0.335714      -1.09150     -0.821058      0.821058       223.107       223.928    
   3  0.106818E-01  -4.53921      -3.41453       3.41453       223.989       227.403    
   4  0.435887     -0.830373     -0.624632      0.624632       223.866       224.491    
   5  0.776831     -0.252532     -0.189963      0.189963       224.656       224.846    
   6  0.729448     -0.315467     -0.237304      0.237304       224.398       224.635    
   7  0.616540     -0.483631     -0.363802      0.363802       225.796       226.160    
   8  0.832841     -0.182913     -0.137592      0.137592       227.244       227.382    
   9  0.673790     -0.394837     -0.297009      0.297009       228.090       228.387    
  10  0.535507     -0.624541     -0.469799      0.469799       227.988       228.458    
  11  0.396426     -0.925265     -0.696013      0.696013       228.743       229.439    
  12  0.333676      -1.09759     -0.825638      0.825638       227.857       228.683    
  13  0.562408     -0.575527     -0.432929      0.432929       230.239       230.672    
  14  0.988355     -0.117133E-01 -0.881107E-02  0.881107E-02   229.521       229.530    
  15  0.674910     -0.393176     -0.295759      0.295759       231.575       231.870    
  16  0.645375     -0.437924     -0.329420      0.329420       231.316       231.645    
  17  0.400913     -0.914011     -0.687547      0.687547       231.956       232.644    
  18  0.228290      -1.47714      -1.11115       1.11115       232.423       233.534    
  19  0.882505     -0.124991     -0.940220E-01  0.940220E-01   231.342       231.436    
  20  0.932806     -0.695579E-01 -0.523236E-01  0.523236E-01   232.714       232.766    
  21  0.664774     -0.408308     -0.307142      0.307142       233.369       233.676    
  22  0.559236     -0.581184     -0.437185      0.437185       233.251       233.688    
  23  0.961133     -0.396421E-01 -0.298201E-01  0.298201E-01   234.095       234.125    
  24  0.767901     -0.264095     -0.198660      0.198660       234.636       234.834    
  25  0.782742     -0.244952     -0.184261      0.184261       234.623       234.807    
  26  0.477575E-01  -3.04162      -2.28800       2.28800       233.051       235.339    
  27  0.760322     -0.274013     -0.206121      0.206121       235.287       235.494    
  28  0.498382     -0.696388     -0.523845      0.523845       236.044       236.568    
  29  0.131457      -2.02908      -1.52633       1.52633       237.534       239.060    
  30  0.689616     -0.371621     -0.279545      0.279545       236.725       237.004    
  31  0.178892E-01  -4.02356      -3.02664       3.02664       238.451       241.478    
  32  0.243405      -1.41303      -1.06293       1.06293       238.614       239.677    
  33  0.282687      -1.26341     -0.950380      0.950380       239.000       239.951    
  34  0.828546     -0.188083     -0.141482      0.141482       239.298       239.440    
  35  0.667217     -0.404640     -0.304383      0.304383       240.350       240.654    
  36  0.813372     -0.206566     -0.155386      0.155386       243.574       243.729    
  37  0.853524     -0.158382     -0.119140      0.119140       244.286       244.405    
  38  0.832184     -0.183702     -0.138187      0.138187       244.202       244.340    
  39  0.911849     -0.922808E-01 -0.694165E-01  0.694165E-01   244.277       244.347    
  40  0.258232      -1.35390      -1.01844       1.01844       244.523       245.541    
  41  0.742217     -0.298113     -0.224250      0.224250       244.829       245.053    
  42  0.854288     -0.157487     -0.118467      0.118467       244.750       244.869    
  43  0.966448     -0.341280E-01 -0.256721E-01  0.256721E-01   245.655       245.681    
  44  0.474756     -0.744954     -0.560377      0.560377       246.469       247.029    
  45  0.332138      -1.10221     -0.829113      0.829113       246.707       247.536    
  46  0.591089     -0.525788     -0.395514      0.395514       247.925       248.321    
  47  0.644797     -0.438820     -0.330094      0.330094       247.008       247.338    
  48  0.729783     -0.315009     -0.236959      0.236959       246.646       246.883    
  49  0.306227      -1.18343     -0.890211      0.890211       248.986       249.876    
  50  0.684977     -0.378370     -0.284622      0.284622       248.983       249.267    
  51  0.750542     -0.286959     -0.215860      0.215860       249.047       249.262    
  52  0.180972      -1.70941      -1.28587       1.28587       249.834       251.120    
  53  0.313831      -1.15890     -0.871760      0.871760       249.595       250.467    
  54  0.707162     -0.346495     -0.260644      0.260644       250.658       250.919    
  55  0.873653E-02  -4.74024      -3.56576       3.56576       250.450       254.016    
  56  0.194915      -1.63519      -1.23004       1.23004       250.480       251.710    
  57  0.866673     -0.143093     -0.107639      0.107639       251.225       251.333    
  58  0.264698      -1.32916     -0.999839      0.999839       250.929       251.929    
  59  0.304090      -1.19043     -0.895481      0.895481       251.409       252.304    
  60  0.602195     -0.507175     -0.381512      0.381512       251.965       252.346    
  61  0.210710      -1.55727      -1.17143       1.17143       252.500       253.672    
  62  0.438953     -0.823363     -0.619359      0.619359       252.214       252.833    
  63  0.471721E-01  -3.05395      -2.29728       2.29728       252.144       254.441    
  64  0.485967     -0.721614     -0.542820      0.542820       253.038       253.580    
loop,thermsimp(1:2)       53   1.01737      0.821058    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    540        233.51          0.88          1.09         23.07          0.05          0.05         25.14
Just calling func    0   0         25.14


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    233.51
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.752231               568
loop is:       53
neval is:      539
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       53      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:   0.752231               568
loop is:       54
neval is:      539


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      568
neval,tstepnext:      539     568

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.162942      -1.81436      -1.36482       1.36482       220.452       221.817    
   2  0.240839      -1.42363      -1.07090       1.07090       223.107       224.178    
   3  0.676863     -0.390287     -0.293586      0.293586       223.866       224.160    
   4  0.298793      -1.20800     -0.908698      0.908698       224.398       225.306    
   5  0.463460E-01  -3.07162      -2.31057       2.31057       224.656       226.967    
   6  0.424832E-01  -3.15865      -2.37603       2.37603       225.796       228.172    
   7  0.551542     -0.595037     -0.447605      0.447605       227.244       227.692    
   8  0.198453      -1.61721      -1.21651       1.21651       223.989       225.205    
   9  0.408741E-01  -3.19726      -2.40508       2.40508       228.090       230.495    
  10  0.926138     -0.767317E-01 -0.577199E-01  0.577199E-01   227.988       228.046    
  11  0.998189     -0.181307E-02 -0.136385E-02  0.136385E-02   227.857       227.859    
  12  0.221790      -1.50602      -1.13288       1.13288       228.743       229.876    
  13  0.512477     -0.668500     -0.502866      0.502866       229.521       230.024    
  14  0.716428     -0.333477     -0.250852      0.250852       230.239       230.490    
  15  0.542239     -0.612048     -0.460401      0.460401       231.342       231.802    
  16  0.237089      -1.43932      -1.08270       1.08270       231.316       232.398    
  17  0.520333     -0.653285     -0.491422      0.491422       231.575       232.066    
  18  0.516420     -0.660835     -0.497100      0.497100       231.956       232.453    
  19  0.927350     -0.754245E-01 -0.567366E-01  0.567366E-01   232.714       232.770    
  20  0.495169     -0.702857     -0.528711      0.528711       232.423       232.952    
  21  0.756269     -0.279358     -0.210142      0.210142       233.369       233.579    
  22  0.697909     -0.359666     -0.270552      0.270552       233.251       233.521    
  23  0.911964     -0.921545E-01 -0.693214E-01  0.693214E-01   234.095       234.165    
  24  0.278968      -1.27666     -0.960341      0.960341       234.623       235.583    
  25  0.103449E-02  -6.87384      -5.17072       5.17072       234.636       239.806    
  26  0.771333     -0.259634     -0.195305      0.195305       233.051       233.246    
  27  0.716983     -0.332703     -0.250269      0.250269       235.287       235.538    
  28  0.811579     -0.208773     -0.157046      0.157046       236.044       236.201    
  29  0.224231      -1.49508      -1.12464       1.12464       236.725       237.849    
  30  0.660210E-01  -2.71778      -2.04440       2.04440       237.534       239.578    
  31  0.524436     -0.645431     -0.485513      0.485513       239.298       239.784    
  32  0.289628      -1.23916     -0.932133      0.932133       238.614       239.546    
  33  0.578267     -0.547720     -0.412012      0.412012       239.000       239.412    
  34  0.377293     -0.974732     -0.733224      0.733224       240.350       241.083    
  35  0.709164     -0.343668     -0.258518      0.258518       238.451       238.710    
  36  0.524809     -0.644721     -0.484979      0.484979       243.574       244.059    
  37  0.223509      -1.49830      -1.12707       1.12707       244.202       245.329    
  38  0.934100     -0.681715E-01 -0.512807E-01  0.512807E-01   244.277       244.329    
  39  0.973288     -0.270756E-01 -0.203671E-01  0.203671E-01   244.286       244.306    
  40  0.876726     -0.131561     -0.989643E-01  0.989643E-01   244.750       244.849    
  41  0.284953      -1.25543     -0.944374      0.944374       244.829       245.774    
  42  0.803469     -0.218817     -0.164601      0.164601       244.523       244.688    
  43  0.394988     -0.928900     -0.698747      0.698747       245.655       246.354    
  44  0.554814     -0.589122     -0.443156      0.443156       246.646       247.089    
  45  0.973148     -0.272194E-01 -0.204753E-01  0.204753E-01   246.469       246.489    
  46  0.569309     -0.563333     -0.423756      0.423756       247.008       247.431    
  47  0.967634     -0.329011E-01 -0.247492E-01  0.247492E-01   246.707       246.732    
  48  0.427466     -0.849882     -0.639307      0.639307       247.925       248.565    
  49  0.552310     -0.593645     -0.446558      0.446558       249.047       249.493    
  50  0.228673      -1.47546      -1.10989       1.10989       248.983       250.092    
  51  0.538893     -0.618238     -0.465058      0.465058       248.986       249.451    
  52  0.910290     -0.939924E-01 -0.707040E-01  0.707040E-01   249.595       249.666    
  53  0.802319E-01  -2.52283      -1.89775       1.89775       250.658       252.556    
  54  0.589762     -0.528036     -0.397205      0.397205       249.834       250.231    
  55  0.823158     -0.194608     -0.146390      0.146390       251.225       251.371    
  56  0.349357      -1.05166     -0.791091      0.791091       250.480       251.271    
  57  0.530543     -0.633855     -0.476805      0.476805       250.929       251.406    
  58  0.756819     -0.278631     -0.209595      0.209595       251.409       251.619    
  59  0.725414     -0.321013     -0.241476      0.241476       251.965       252.206    
  60  0.558650     -0.582232     -0.437973      0.437973       252.214       252.652    
  61  0.376532     -0.976753     -0.734744      0.734744       253.038       253.772    
  62  0.135144      -2.00141      -1.50553       1.50553       252.500       254.006    
  63  0.978750     -0.214787E-01 -0.161569E-01  0.161569E-01   250.450       250.467    
  64  0.262402      -1.33788      -1.00639       1.00639       233.509       234.516    
loop,thermsimp(1:2)       54   1.36482       1.07090    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    541        223.43          0.88          1.09         23.07          0.20          0.04         25.27
Just calling func    0   0         25.28


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  540    223.43        4.734    -0.3299      4.883     -100.0     0.9872E-01
                      -1.364      3.068     -100.0      2.752     0.4604    
                       1.166     -1.399      2.400      0.000      0.000    
                     -0.4813      0.000      0.000      0.000     -1.221    

                      -2.500     0.1108E+05 0.1954E+05 -1428.     -5817.    
                      -2.000     -8.043     -3.273     -1.096      1.324    
                      -12.68     -1.868      1359.      0.000      3354.    

                       4764.      3323.      5073.      5329.      2500.    
                       4298.    -0.3868E-01-0.2632E-02  0.000    -0.1141    
                      0.1995    -0.1811     0.4496E-01 0.3600E-01-0.2264    

                     -0.2145    -0.7971      0.000     0.3054     0.8323E-01
                      0.8541E-01 0.1329     0.2153     0.1913     0.1694E-01
                      0.2846E-01-0.1210    -0.5360    -0.5136      0.000    

                      -2.289     -5.490      5.901     -1.015      0.000    
                       0.000      9.011      8.697     -5190.     -4.000    
                      0.2529     0.2528      8.872      8.120    -0.1204E+05

                      -4.000    -0.4743      2.235      9.411      9.201    
                      -6690.     -4.000     0.1487     0.9085      9.428    
                       9.009     -2116.     -2.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    223.43
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.752231               568
loop is:       54
neval is:      540
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       54      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:   0.752231               568
loop is:       55
neval is:      540


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      568
neval,tstepnext:      540     568

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.509602     -0.674124     -0.507097      0.507097       220.452       220.960    
   2  0.495514     -0.702160     -0.528187      0.528187       223.866       224.394    
   3  0.837782     -0.176998     -0.133143      0.133143       223.107       223.240    
   4  0.535509     -0.624537     -0.469796      0.469796       223.989       224.459    
   5  0.341674      -1.07390     -0.807820      0.807820       224.398       225.205    
   6  0.843270     -0.170469     -0.128232      0.128232       224.656       224.784    
   7  0.847493     -0.165473     -0.124474      0.124474       227.244       227.369    
   8  0.967616     -0.329200E-01 -0.247634E-01  0.247634E-01   227.857       227.882    
   9  0.837601     -0.177213     -0.133305      0.133305       227.988       228.121    
  10  0.796927E-01  -2.52958      -1.90283       1.90283       225.796       227.699    
  11  0.291170E-01  -3.53643      -2.66021       2.66021       228.743       231.403    
  12  0.128543      -2.05149      -1.54319       1.54319       229.521       231.064    
  13  0.195374      -1.63284      -1.22827       1.22827       230.239       231.467    
  14  0.711258     -0.340719     -0.256300      0.256300       228.090       228.346    
  15  0.738303     -0.303400     -0.228227      0.228227       231.342       231.570    
  16  0.513942     -0.665644     -0.500718      0.500718       231.575       232.075    
  17  0.717790     -0.331579     -0.249424      0.249424       231.316       231.565    
  18  0.709757     -0.342833     -0.257890      0.257890       231.956       232.214    
  19  0.836075     -0.179037     -0.134677      0.134677       232.714       232.848    
  20  0.885785     -0.121280     -0.912309E-01  0.912309E-01   232.423       232.514    
  21  0.374692     -0.981651     -0.738428      0.738428       233.051       233.789    
  22  0.233066      -1.45643      -1.09557       1.09557       233.251       234.346    
  23  0.475141     -0.744144     -0.559768      0.559768       233.369       233.928    
  24  0.567952     -0.565719     -0.425551      0.425551       234.095       234.521    
  25  0.928125     -0.745889E-01 -0.561081E-01  0.561081E-01   233.509       233.566    
  26  0.744574     -0.294943     -0.221865      0.221865       235.287       235.509    
  27  0.630340     -0.461496     -0.347152      0.347152       234.623       234.970    
  28  0.174068      -1.74831      -1.31513       1.31513       236.044       237.359    
  29  0.793145     -0.231750     -0.174329      0.174329       236.725       236.899    
  30  0.901240     -0.103984     -0.782197E-01  0.782197E-01   238.451       238.530    
  31  0.293792      -1.22488     -0.921395      0.921395       239.000       239.922    
  32  0.837829     -0.176941     -0.133101      0.133101       238.614       238.747    
  33  0.453305     -0.791191     -0.595158      0.595158       237.534       238.129    
  34  0.231101      -1.46490      -1.10194       1.10194       239.298       240.400    
  35  0.906016     -0.986982E-01 -0.742439E-01  0.742439E-01   234.636       234.710    
  36  0.251205      -1.38148      -1.03920       1.03920       240.350       241.389    
  37  0.518565     -0.656689     -0.493982      0.493982       243.574       244.068    
  38  0.737118     -0.305007     -0.229436      0.229436       244.286       244.515    
  39  0.229948      -1.46990      -1.10570       1.10570       244.277       245.383    
  40  0.221845      -1.50578      -1.13269       1.13269       244.523       245.656    
  41  0.511130     -0.671131     -0.504845      0.504845       244.750       245.255    
  42  0.137034      -1.98753      -1.49508       1.49508       244.202       245.697    
  43  0.870855     -0.138280     -0.104018      0.104018       244.829       244.933    
  44  0.528174     -0.638329     -0.480171      0.480171       245.655       246.135    
  45  0.152525      -1.88043      -1.41451       1.41451       246.469       247.883    
  46  0.339795E-01  -3.38200      -2.54404       2.54404       246.707       249.251    
  47  0.989348     -0.107091E-01 -0.805572E-02  0.805572E-02   246.646       246.654    
  48  0.951612     -0.495981E-01 -0.373092E-01  0.373092E-01   247.008       247.045    
  49  0.819787     -0.198711     -0.149476      0.149476       247.925       248.075    
  50  0.353143E-01  -3.34347      -2.51506       2.51506       248.986       251.501    
  51  0.353588      -1.03962     -0.782036      0.782036       249.047       249.829    
  52  0.546289     -0.604606     -0.454804      0.454804       249.595       250.050    
  53  0.463744     -0.768422     -0.578031      0.578031       248.983       249.561    
  54  0.227476      -1.48071      -1.11384       1.11384       249.834       250.948    
  55  0.448540     -0.801757     -0.603107      0.603107       250.450       251.054    
  56  0.305048      -1.18729     -0.893114      0.893114       250.480       251.373    
  57  0.190121      -1.66009      -1.24877       1.24877       251.225       252.474    
  58  0.202433      -1.59735      -1.20157       1.20157       250.929       252.130    
  59  0.460263     -0.775957     -0.583699      0.583699       251.409       251.993    
  60  0.862049     -0.148443     -0.111664      0.111664       251.965       252.076    
  61  0.973595     -0.267596E-01 -0.201294E-01  0.201294E-01   250.658       250.678    
  62  0.611233     -0.492276     -0.370305      0.370305       252.214       252.584    
  63  0.419634     -0.868372     -0.653216      0.653216       253.038       253.691    
  64  0.455365     -0.786657     -0.591747      0.591747       223.435       224.027    
loop,thermsimp(1:2)       55  0.507097      0.528187    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    542        251.04          0.88          1.09         23.10          0.16          0.04         25.27
Just calling func    0   0         25.27


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    251.04
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.752231               568
loop is:       55
neval is:      541
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       55      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:   0.752231               568
loop is:       56
neval is:      541


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      568
neval,tstepnext:      541     568

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.810055     -0.210654     -0.158460      0.158460       220.452       220.611    
   2  0.944369     -0.572379E-01 -0.430561E-01  0.430561E-01   223.107       223.150    
   3  0.256748      -1.35966      -1.02278       1.02278       223.435       224.458    
   4  0.857555     -0.153670     -0.115595      0.115595       223.866       223.982    
   5  0.301135      -1.20020     -0.902825      0.902825       223.989       224.892    
   6  0.765466     -0.267271     -0.201049      0.201049       224.656       224.857    
   7  0.595420     -0.518488     -0.390023      0.390023       224.398       224.788    
   8  0.184967      -1.68758      -1.26945       1.26945       227.244       228.514    
   9  0.451762     -0.794599     -0.597722      0.597722       225.796       226.393    
  10  0.214230E-01  -3.84329      -2.89104       2.89104       227.857       230.748    
  11  0.133176      -2.01609      -1.51656       1.51656       227.988       229.504    
  12  0.167638      -1.78595      -1.34345       1.34345       228.090       229.434    
  13  0.900249     -0.105084     -0.790473E-01  0.790473E-01   229.521       229.600    
  14  0.542907     -0.610818     -0.459476      0.459476       228.743       229.203    
  15  0.911342E-01  -2.39542      -1.80191       1.80191       230.239       232.041    
  16  0.664024     -0.409437     -0.307991      0.307991       231.316       231.624    
  17  0.976823     -0.234502E-01 -0.176400E-01  0.176400E-01   231.342       231.359    
  18  0.293738      -1.22507     -0.921532      0.921532       231.575       232.496    
  19  0.938951     -0.629922E-01 -0.473847E-01  0.473847E-01   231.956       232.004    
  20  0.393580     -0.932470     -0.701433      0.701433       232.423       233.125    
  21  0.303574      -1.19213     -0.896758      0.896758       232.714       233.611    
  22  0.346544      -1.05975     -0.797173      0.797173       233.509       234.307    
  23  0.118838      -2.13000      -1.60225       1.60225       233.051       234.653    
  24  0.384663E-01  -3.25797      -2.45075       2.45075       233.369       235.819    
  25  0.624565     -0.470700     -0.354075      0.354075       233.251       233.605    
  26  0.225711      -1.48850      -1.11969       1.11969       234.095       235.215    
  27  0.269639      -1.31067     -0.985927      0.985927       234.636       235.621    
  28  0.886893     -0.120031     -0.902914E-01  0.902914E-01   234.623       234.713    
  29  0.184969      -1.68757      -1.26944       1.26944       235.287       236.557    
  30  0.302378E-01  -3.49866      -2.63180       2.63180       236.725       239.357    
  31  0.233638      -1.45398      -1.09373       1.09373       236.044       237.137    
  32  0.494824     -0.703553     -0.529234      0.529234       237.534       238.063    
  33  0.833664     -0.181924     -0.136849      0.136849       238.451       238.588    
  34  0.659846     -0.415748     -0.312739      0.312739       238.614       238.927    
  35  0.761908     -0.271930     -0.204554      0.204554       239.000       239.205    
  36  0.691542E-01  -2.67142      -2.00952       2.00952       239.298       241.308    
  37  0.756803     -0.278653     -0.209611      0.209611       240.350       240.559    
  38  0.915830     -0.879244E-01 -0.661395E-01  0.661395E-01   243.574       243.640    
  39  0.358938      -1.02461     -0.770740      0.770740       244.286       245.056    
  40  0.712535     -0.338927     -0.254951      0.254951       244.829       245.084    
  41  0.756738     -0.278739     -0.209676      0.209676       244.750       244.960    
  42  0.295390E-02  -5.82463      -4.38147       4.38147       244.277       248.659    
  43  0.908633     -0.958136E-01 -0.720739E-01  0.720739E-01   244.523       244.595    
  44  0.979116     -0.211054E-01 -0.158762E-01  0.158762E-01   244.202       244.218    
  45  0.420519     -0.866265     -0.651631      0.651631       245.655       246.307    
  46  0.982205     -0.179549E-01 -0.135062E-01  0.135062E-01   246.646       246.659    
  47  0.851251     -0.161049     -0.121146      0.121146       247.008       247.129    
  48  0.594735     -0.519639     -0.390888      0.390888       246.469       246.860    
  49  0.957893     -0.430197E-01 -0.323607E-01  0.323607E-01   247.925       247.958    
  50  0.139820      -1.96740      -1.47994       1.47994       246.707       248.187    
  51  0.937433     -0.646098E-01 -0.486015E-01  0.486015E-01   248.983       249.031    
  52  0.530418     -0.634090     -0.476982      0.476982       249.047       249.524    
  53  0.202220      -1.59840      -1.20237       1.20237       249.595       250.798    
  54  0.442737     -0.814779     -0.612902      0.612902       250.658       251.271    
  55  0.547124     -0.603081     -0.453656      0.453656       249.834       250.287    
  56  0.881924     -0.125649     -0.945172E-01  0.945172E-01   250.450       250.545    
  57  0.392839     -0.934356     -0.702852      0.702852       250.480       251.183    
  58  0.931504     -0.709546E-01 -0.533742E-01  0.533742E-01   248.986       249.039    
  59  0.360908      -1.01913     -0.766622      0.766622       251.409       252.176    
  60  0.654294E-01  -2.72678      -2.05117       2.05117       251.965       254.016    
  61  0.872421     -0.136483     -0.102666      0.102666       250.929       251.031    
  62  0.964074     -0.365877E-01 -0.275224E-01  0.275224E-01   251.225       251.253    
  63  0.546019     -0.605101     -0.455176      0.455176       252.214       252.669    
  64  0.609920     -0.494427     -0.371923      0.371923       251.044       251.416    
loop,thermsimp(1:2)       56  0.158460      0.430561E-01

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    543        218.18          0.88          1.09         23.09          0.02          0.05         25.13
Just calling func    0   0         25.13


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    544        250.08          0.87          1.09         23.13          0.00          0.04         25.12
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    218.18
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.752231               568
loop is:       56
neval is:      543
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       56      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:   0.752231               568
loop is:       57
neval is:      543


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      568
neval,tstepnext:      543     568

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.357102      -1.02973     -0.774598      0.774598       220.452       221.227    
   2  0.625087     -0.469865     -0.353447      0.353447       223.107       223.460    
   3  0.526320E-01  -2.94443      -2.21489       2.21489       223.866       226.081    
   4  0.385670     -0.952774     -0.716706      0.716706       223.435       224.152    
   5  0.532637     -0.629916     -0.473842      0.473842       224.398       224.871    
   6  0.804876E-01  -2.51965      -1.89536       1.89536       224.656       226.551    
   7  0.622772     -0.473574     -0.356237      0.356237       223.989       224.345    
   8  0.102026      -2.28252      -1.71698       1.71698       225.796       227.513    
   9  0.418336     -0.871471     -0.655548      0.655548       227.244       227.900    
  10  0.578766     -0.546857     -0.411362      0.411362       228.743       229.155    
  11  0.465316     -0.765038     -0.575485      0.575485       228.090       228.666    
  12  0.166433      -1.79317      -1.34887       1.34887       227.988       229.337    
  13  0.290530      -1.23605     -0.929793      0.929793       229.521       230.451    
  14  0.991156     -0.888373E-02 -0.668262E-02  0.668262E-02   227.857       227.864    
  15  0.747098     -0.291559     -0.219319      0.219319       231.342       231.561    
  16  0.117051      -2.14514      -1.61364       1.61364       231.316       232.929    
  17  0.281481      -1.26769     -0.953596      0.953596       231.956       232.910    
  18  0.694526     -0.364526     -0.274208      0.274208       230.239       230.513    
  19  0.397704     -0.922047     -0.693592      0.693592       231.575       232.268    
  20  0.604235     -0.503792     -0.378968      0.378968       232.423       232.802    
  21  0.910420     -0.938492E-01 -0.705963E-01  0.705963E-01   233.251       233.321    
  22  0.496596     -0.699978     -0.526545      0.526545       232.714       233.240    
  23  0.605982     -0.500905     -0.376796      0.376796       233.509       233.886    
  24  0.372826     -0.986642     -0.742183      0.742183       233.051       233.793    
  25  0.839451     -0.175007     -0.131646      0.131646       234.623       234.754    
  26  0.523045E-01  -2.95067      -2.21959       2.21959       234.095       236.315    
  27  0.792630     -0.232398     -0.174817      0.174817       234.636       234.810    
  28  0.726993     -0.318838     -0.239840      0.239840       233.369       233.608    
  29  0.254118      -1.36996      -1.03052       1.03052       235.287       236.318    
  30  0.175759      -1.73864      -1.30786       1.30786       236.044       237.352    
  31  0.228322      -1.47700      -1.11105       1.11105       237.534       238.645    
  32  0.360945      -1.01903     -0.766545      0.766545       238.451       239.218    
  33  0.445035     -0.809602     -0.609008      0.609008       238.614       239.223    
  34  0.347058      -1.05826     -0.796058      0.796058       239.000       239.797    
  35  0.659666     -0.416022     -0.312945      0.312945       236.725       237.038    
  36  0.838841     -0.175734     -0.132192      0.132192       240.350       240.482    
  37  0.618959     -0.479716     -0.360857      0.360857       239.298       239.659    
  38  0.156886      -1.85224      -1.39331       1.39331       243.574       244.967    
  39  0.594357     -0.520275     -0.391367      0.391367       244.202       244.593    
  40  0.747079     -0.291585     -0.219339      0.219339       244.523       244.742    
  41  0.650924     -0.429362     -0.322979      0.322979       244.750       245.073    
  42  0.154177      -1.86965      -1.40641       1.40641       244.286       245.692    
  43  0.304320      -1.18968     -0.894911      0.894911       244.829       245.724    
  44  0.653765     -0.425007     -0.319703      0.319703       245.655       245.975    
  45  0.497625     -0.697908     -0.524988      0.524988       246.646       247.171    
  46  0.298681E-01  -3.51097      -2.64106       2.64106       246.469       249.110    
  47  0.430468     -0.842882     -0.634042      0.634042       247.008       247.642    
  48  0.380011     -0.967555     -0.727825      0.727825       247.925       248.653    
  49  0.716593     -0.333247     -0.250678      0.250678       246.707       246.958    
  50  0.100235      -2.30024      -1.73031       1.73031       244.277       246.008    
  51  0.133481      -2.01379      -1.51484       1.51484       248.983       250.497    
  52  0.485254     -0.723082     -0.543925      0.543925       248.986       249.530    
  53  0.978603     -0.216294E-01 -0.162703E-01  0.162703E-01   249.047       249.063    
  54  0.973934     -0.264113E-01 -0.198674E-01  0.198674E-01   249.834       249.854    
  55  0.744363     -0.295226     -0.222078      0.222078       250.450       250.673    
  56  0.201176      -1.60358      -1.20626       1.20626       249.595       250.802    
  57  0.260889      -1.34366      -1.01074       1.01074       250.929       251.940    
  58  0.948796     -0.525620E-01 -0.395387E-01  0.395387E-01   250.480       250.520    
  59  0.406545     -0.900060     -0.677053      0.677053       251.225       251.902    
  60  0.458258     -0.780323     -0.586983      0.586983       250.658       251.245    
  61  0.634385     -0.455099     -0.342339      0.342339       251.044       251.386    
  62  0.715647     -0.334568     -0.251673      0.251673       251.409       251.661    
  63  0.397754     -0.921922     -0.693499      0.693499       252.214       252.907    
  64  0.243226      -1.41376      -1.06348       1.06348       218.177       219.240    
loop,thermsimp(1:2)       57  0.774598      0.353447    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    545        243.94          0.88          1.09         23.07          0.05          0.04         25.14
Just calling func    0   0         25.14


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    243.94
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.752231               568
loop is:       57
neval is:      544
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       57      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:   0.752231               568
loop is:       58
neval is:      544


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      568
neval,tstepnext:      544     568

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.303389      -1.19274     -0.897215      0.897215       218.177       219.074    
   2  0.644709     -0.438956     -0.330196      0.330196       220.452       220.783    
   3  0.490084     -0.713178     -0.536475      0.536475       223.107       223.643    
   4  0.579401     -0.545760     -0.410538      0.410538       223.435       223.846    
   5  0.217372      -1.52614      -1.14801       1.14801       223.989       225.137    
   6  0.670771     -0.399327     -0.300386      0.300386       224.398       224.698    
   7  0.794394     -0.230176     -0.173146      0.173146       223.866       224.039    
   8  0.700220     -0.356360     -0.268065      0.268065       224.656       224.924    
   9  0.151193      -1.88920      -1.42111       1.42111       225.796       227.217    
  10  0.423588     -0.858994     -0.646162      0.646162       227.857       228.504    
  11  0.358369      -1.02619     -0.771933      0.771933       227.244       228.016    
  12  0.949750     -0.515563E-01 -0.387822E-01  0.387822E-01   228.090       228.129    
  13  0.245844      -1.40306      -1.05542       1.05542       228.743       229.799    
  14  0.775721     -0.253963     -0.191039      0.191039       227.988       228.179    
  15  0.103980      -2.26356      -1.70272       1.70272       229.521       231.224    
  16  0.282805E-01  -3.56558      -2.68214       2.68214       230.239       232.921    
  17  0.737879     -0.303975     -0.228659      0.228659       231.342       231.570    
  18  0.125115E-01  -4.38111      -3.29561       3.29561       231.575       234.870    
  19  0.788906     -0.237108     -0.178360      0.178360       232.423       232.601    
  20  0.941148     -0.606551E-01 -0.456266E-01  0.456266E-01   231.956       232.002    
  21  0.243470E-01  -3.71535      -2.79480       2.79480       231.316       234.111    
  22  0.350536      -1.04829     -0.788557      0.788557       232.714       233.502    
  23  0.178398      -1.72374      -1.29665       1.29665       233.251       234.548    
  24  0.600163     -0.510554     -0.384054      0.384054       233.369       233.753    
  25  0.835028     -0.180290     -0.135620      0.135620       233.051       233.186    
  26  0.344087      -1.06686     -0.802525      0.802525       233.509       234.312    
  27  0.754072     -0.282268     -0.212331      0.212331       234.623       234.835    
  28  0.138425      -1.97742      -1.48748       1.48748       234.636       236.123    
  29  0.759097     -0.275625     -0.207334      0.207334       234.095       234.303    
  30  0.967383     -0.331612E-01 -0.249449E-01  0.249449E-01   235.287       235.312    
  31  0.746015     -0.293010     -0.220411      0.220411       236.725       236.945    
  32  0.461640     -0.772969     -0.581451      0.581451       236.044       236.625    
  33  0.727095     -0.318698     -0.239734      0.239734       237.534       237.773    
  34  0.875405     -0.133069     -0.100098      0.100098       238.451       238.551    
  35  0.915573E-01  -2.39079      -1.79843       1.79843       238.614       240.412    
  36  0.471693     -0.751427     -0.565247      0.565247       239.298       239.864    
  37  0.142837      -1.94605      -1.46388       1.46388       239.000       240.464    
  38  0.882395     -0.125116     -0.941159E-01  0.941159E-01   240.350       240.444    
  39  0.299360      -1.20611     -0.907273      0.907273       244.202       245.109    
  40  0.846797     -0.166294     -0.125091      0.125091       244.523       244.648    
  41  0.619412     -0.478984     -0.360307      0.360307       243.574       243.934    
  42  0.862563     -0.147847     -0.111215      0.111215       244.750       244.862    
  43  0.507188     -0.678874     -0.510670      0.510670       244.286       244.796    
  44  0.309829      -1.17174     -0.881416      0.881416       244.829       245.711    
  45  0.531290     -0.632447     -0.475746      0.475746       245.655       246.131    
  46  0.460187E-01  -3.07871      -2.31590       2.31590       244.277       246.593    
  47  0.435359     -0.831585     -0.625544      0.625544       246.707       247.333    
  48  0.903617     -0.101349     -0.762382E-01  0.762382E-01   246.646       246.722    
  49  0.737071E-01  -2.60766      -1.96156       1.96156       247.008       248.969    
  50  0.130117      -2.03932      -1.53404       1.53404       247.925       249.459    
  51  0.963506     -0.371761E-01 -0.279650E-01  0.279650E-01   249.047       249.075    
  52  0.446669E-01  -3.10852      -2.33833       2.33833       246.469       248.807    
  53  0.200331      -1.60779      -1.20943       1.20943       248.986       250.195    
  54  0.252222      -1.37744      -1.03616       1.03616       249.834       250.870    
  55  0.693294     -0.366301     -0.275543      0.275543       248.983       249.258    
  56  0.839546     -0.174894     -0.131561      0.131561       250.480       250.612    
  57  0.225760E-01  -3.79087      -2.85161       2.85161       250.450       253.302    
  58  0.122689      -2.09810      -1.57826       1.57826       249.595       251.174    
  59  0.109751      -2.20954      -1.66208       1.66208       250.658       252.320    
  60  0.337256      -1.08691     -0.817610      0.817610       251.044       251.861    
  61  0.876200     -0.132161     -0.994153E-01  0.994153E-01   251.409       251.508    
  62  0.789892     -0.235859     -0.177421      0.177421       251.225       251.402    
  63  0.731670     -0.312425     -0.235016      0.235016       250.929       251.164    
  64  0.747123     -0.291525     -0.219294      0.219294       243.936       244.155    
loop,thermsimp(1:2)       58  0.897215      0.330196    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    546        214.80          0.87          1.09         23.12          0.02          0.05         25.14
Just calling func    0   0         25.15


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    547        229.76          0.88          1.08         23.08          0.03          0.04         25.11
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    214.80
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.752231               568
loop is:       58
neval is:      546
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       58      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    96.2856      0.500000    
T0,tstep,tfreq (these do not change):             63
current SAtemp,tstepnext are:   0.752231               568
loop is:       59
neval is:      546


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      568
neval,tstepnext:      546     568

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.773269     -0.257128     -0.193420      0.193420       218.177       218.370    
   2  0.583921     -0.537989     -0.404692      0.404692       220.452       220.857    
   3  0.656701E-01  -2.72311      -2.04841       2.04841       223.107       225.155    
   4  0.894191E-01  -2.41442      -1.81620       1.81620       223.435       225.251    
   5  0.354705      -1.03647     -0.779663      0.779663       223.866       224.646    
   6  0.526699     -0.641127     -0.482275      0.482275       224.398       224.880    
   7  0.769224     -0.262373     -0.197365      0.197365       224.656       224.853    
   8  0.729715     -0.315102     -0.237029      0.237029       223.989       224.226    
   9  0.978924E-01  -2.32389      -1.74810       1.74810       225.796       227.544    
  10  0.338047      -1.08457     -0.815847      0.815847       227.244       228.060    
  11  0.328790      -1.11233     -0.836732      0.836732       228.090       228.927    
  12  0.902094     -0.103037     -0.775075E-01  0.775075E-01   227.988       228.065    
  13  0.528650     -0.637429     -0.479494      0.479494       227.857       228.337    
  14  0.706617     -0.347267     -0.261225      0.261225       228.743       229.004    
  15  0.999709     -0.291154E-03 -0.219015E-03  0.219015E-03   229.521       229.521    
  16  0.547958     -0.601557     -0.452510      0.452510       231.342       231.794    
  17  0.561992     -0.576268     -0.433487      0.433487       231.956       232.390    
  18  0.978975     -0.212488E-01 -0.159840E-01  0.159840E-01   232.423       232.439    
  19  0.497838     -0.697481     -0.524667      0.524667       230.239       230.764    
  20  0.899264     -0.106179     -0.798709E-01  0.798709E-01   233.051       233.131    
  21  0.279408      -1.27508     -0.959157      0.959157       232.714       233.673    
  22  0.632548     -0.458000     -0.344522      0.344522       233.369       233.713    
  23  0.282789      -1.26305     -0.950109      0.950109       231.316       232.266    
  24  0.518456     -0.656900     -0.494140      0.494140       234.095       234.590    
  25  0.130585      -2.03573      -1.53134       1.53134       233.509       235.041    
  26  0.767980E-01  -2.56658      -1.93066       1.93066       233.251       235.182    
  27  0.814279     -0.205452     -0.154548      0.154548       234.623       234.777    
  28  0.889639E-01  -2.41952      -1.82004       1.82004       231.575       233.395    
  29  0.470746     -0.753437     -0.566758      0.566758       235.287       235.854    
  30  0.604709     -0.503008     -0.378378      0.378378       234.636       235.014    
  31  0.960406     -0.403992E-01 -0.303895E-01  0.303895E-01   236.044       236.074    
  32  0.225544      -1.48924      -1.12025       1.12025       236.725       237.845    
  33  0.662278     -0.412070     -0.309972      0.309972       237.534       237.844    
  34  0.826290     -0.190809     -0.143533      0.143533       238.451       238.595    
  35  0.556070     -0.586861     -0.441455      0.441455       239.298       239.740    
  36  0.284946      -1.25545     -0.944392      0.944392       238.614       239.558    
  37  0.606321     -0.500346     -0.376376      0.376376       240.350       240.726    
  38  0.672946     -0.396090     -0.297951      0.297951       239.000       239.298    
  39  0.310037      -1.17106     -0.880909      0.880909       243.574       244.454    
  40  0.422732     -0.861016     -0.647683      0.647683       243.936       244.583    
  41  0.251543      -1.38014      -1.03819       1.03819       244.523       245.561    
  42  0.925797     -0.771000E-01 -0.579970E-01  0.579970E-01   244.286       244.344    
  43  0.156113      -1.85718      -1.39703       1.39703       244.750       246.147    
  44  0.457425     -0.782143     -0.588352      0.588352       244.202       244.790    
  45  0.921892     -0.813271E-01 -0.611768E-01  0.611768E-01   244.829       244.890    
  46  0.993514     -0.650683E-02 -0.489464E-02  0.489464E-02   245.655       245.660    
  47  0.856821     -0.154526     -0.116239      0.116239       244.277       244.394    
  48  0.232993E-01  -3.75933      -2.82789       2.82789       246.646       249.473    
  49  0.871002     -0.138111     -0.103891      0.103891       246.707       246.811    
  50  0.556798     -0.585552     -0.440471      0.440471       246.469       246.909    
