nop,maxfn,iprint,nloop,iquad:   938000  20  95   1
stopcr,simp:    20.0000       0.00000    
T0,Tstep:    75.0866      0.500000    
Tfreq:   72
nop,maxfn,iprint,nloop,iquad:   938000  20  95   1
stopcr,simp:    20.0000       0.00000    
T0,Tstep:    75.0866      0.500000    
Tfreq:   72
 Estimating   72 parameters on   1 communicators
 Progress Report every  20 function evaluations
 EVAL.   FUNC.VALUE.          PARAMETER VALUES
iter,obj,time:      2        250.29          4.31          1.10         23.53          0.16          0.04         29.14
iter,obj,time:      3        251.22          0.87          1.12         23.59          0.12          0.05         25.75
iter,obj,time:      4        250.87          0.86          1.12         23.57          0.14          0.05         25.74
iter,obj,time:      5        253.40          0.86          1.12         23.62          0.11          0.05         25.76
iter,obj,time:      6        248.84          0.86          1.12         23.79          0.00          0.05         25.82
iter,obj,time:      7        239.04          0.87          1.13         23.85          0.00          0.05         25.89
iter,obj,time:      8        249.31          0.86          1.12         23.57          0.14          0.05         25.75
iter,obj,time:      9        251.01          0.86          1.12         23.61          0.13          0.06         25.77
iter,obj,time:     10        253.83          0.86          1.12         23.57          0.16          0.05         25.76
iter,obj,time:     11        248.74          0.86          1.12         23.57          0.12          0.04         25.72
iter,obj,time:     12        268.07          0.86          1.12         23.72          0.01          0.04         25.76
iter,obj,time:     13        285.57          0.87          1.12         23.60          0.11          0.05         25.75
iter,obj,time:     14        247.72          0.86          1.13         23.64          0.09          0.05         25.77
iter,obj,time:     15        273.43          0.86          1.12         23.83          0.02          0.05         25.88
iter,obj,time:     16        359.51          0.86          1.12         23.93          0.00          0.05         25.96
iter,obj,time:     17        250.28          0.86          1.12         23.64          0.09          0.05         25.77
iter,obj,time:     18        249.91          0.86          1.12         23.58          0.12          0.05         25.74
iter,obj,time:     19        250.29          0.86          1.12         23.64          0.09          0.04         25.76
iter,obj,time:     20        250.40          0.86          1.12         23.61          0.11          0.05         25.75
iter,obj,time:     21        250.29          0.86          1.12         23.61          0.12          0.05         25.76
iter,obj,time:     22        249.68          0.86          1.12         23.56          0.15          0.05         25.73
iter,obj,time:     23        244.74          0.86          1.12         23.60          0.14          0.06         25.77
iter,obj,time:     24        182.68          0.84          1.12         23.64          0.12          0.05         25.79
iter,obj,time:     25        209.71          0.86          1.12         23.57          0.17          0.05         25.77
iter,obj,time:     26        181.02          0.86          1.12         23.78          0.01          0.05         25.82
iter,obj,time:     27        187.49          0.87          1.13         23.96          0.00          0.05         26.01
iter,obj,time:     28        189.84          0.86          1.12         23.64          0.07          0.05         25.75
iter,obj,time:     29        223.89          0.86          1.12         23.59          0.12          0.05         25.74
iter,obj,time:     30        181.99          0.86          1.12         23.62          0.10          0.05         25.75
iter,obj,time:     31        261.74          0.86          1.12         23.61          0.12          0.05         25.75
iter,obj,time:     32        254.17          0.86          1.12         23.55          0.16          0.05         25.74
iter,obj,time:     33        248.10          0.86          1.12         23.61          0.11          0.05         25.75
iter,obj,time:     34        255.51          0.86          1.12         23.56          0.16          0.05         25.74
iter,obj,time:     35        253.31          0.86          1.12         23.95          0.00          0.05         25.98
iter,obj,time:     36        255.75          0.87          1.12         23.78          0.00          0.05         25.81
iter,obj,time:     37        251.57          0.86          1.12         23.63          0.09          0.05         25.76
iter,obj,time:     38        256.89          0.86          1.12         23.62          0.10          0.05         25.75
iter,obj,time:     39        250.65          0.86          1.12         23.60          0.11          0.05         25.74
iter,obj,time:     40        253.27          0.86          1.12         23.62          0.10          0.04         25.75
iter,obj,time:     41        244.43          0.87          1.12         23.71          0.02          0.05         25.77
iter,obj,time:     42        297.61          0.87          1.12         23.66          0.07          0.05         25.76
iter,obj,time:     43        267.20          0.86          1.12         23.59          0.14          0.04         25.75
iter,obj,time:     44        262.72          0.86          1.12         23.67          0.05          0.05         25.75
iter,obj,time:     45        256.04          0.86          1.12         23.58          0.14          0.05         25.75
iter,obj,time:     46        240.88          0.86          1.13         23.56          0.16          0.05         25.75
iter,obj,time:     47        246.93          0.86          1.12         23.63          0.10          0.04         25.75
iter,obj,time:     48        245.61          0.88          1.12         23.57          0.13          0.05         25.74
iter,obj,time:     49        246.21          0.86          1.12         23.63          0.09          0.05         25.76
iter,obj,time:     50        247.80          0.86          1.12         23.74          0.00          0.05         25.77
iter,obj,time:     51        316.25          0.87          1.12         23.59          0.13          0.05         25.76
iter,obj,time:     52        317.40          0.86          1.12         23.80          0.00          0.05         25.84
iter,obj,time:     53        338.93          0.87          1.12         23.83          0.00          0.05         25.87
iter,obj,time:     54        176.61          0.86          1.12         23.64          0.09          0.05         25.77
iter,obj,time:     55        250.29          0.86          1.12         23.62          0.10          0.04         25.75
iter,obj,time:     56        250.29          0.88          1.11         23.65          0.07          0.05         25.75
iter,obj,time:     57        252.56          0.86          1.12         23.58          0.14          0.05         25.75
iter,obj,time:     58        256.19          0.86          1.12         23.62          0.11          0.05         25.76
iter,obj,time:     59        293.04          0.86          1.12         23.62          0.09          0.05         25.75
iter,obj,time:     60        247.13          0.86          1.11         23.55          0.16          0.05         25.73
iter,obj,time:     61        246.95          0.86          1.11         23.81          0.05          0.05         25.88
iter,obj,time:     62        251.46          0.86          1.12         23.80          0.02          0.05         25.86
iter,obj,time:     63        243.05          0.87          1.12         23.66          0.07          0.04         25.77
iter,obj,time:     64        257.18          0.86          1.12         23.61          0.12          0.05         25.75
iter,obj,time:     65        256.41          0.87          1.10         23.64          0.12          0.05         25.79
iter,obj,time:     66        252.99          0.86          1.11         23.61          0.17          0.05         25.80
iter,obj,time:     67        251.16          0.86          1.12         23.58          0.14          0.05         25.76
iter,obj,time:     68        258.14          0.86          1.12         23.61          0.11          0.05         25.75
iter,obj,time:     69        243.86          0.86          1.13         23.57          0.14          0.05         25.74
iter,obj,time:     70        254.89          0.86          1.11         23.62          0.11          0.05         25.74
iter,obj,time:     71        250.87          0.86          1.11         23.55          0.17          0.05         25.73
iter,obj,time:     72        250.81          0.86          1.12         23.78          0.01          0.06         25.83
iter,obj,time:     73        250.35          0.86          1.12         23.95          0.00          0.05         25.99
iter,obj,time:     74        249.44          0.86          1.12         23.61          0.11          0.05         25.77

    1    250.29        1.806     -1.201      1.806     -102.6     0.8055    
                      0.6731      2.000     -99.70      3.811    -0.1311    
                       1.691     -1.468      1.475      0.000     -5.000    
                      -1.085      0.000      0.000      0.000     -1.221    

                      -2.500      9000.      9000.      0.000      0.000    
                     -0.5672     -6.248     -4.737     -7.327      2.963    
                      -14.13     -3.050      1018.      0.000      5003.    

                       6174.      5698.      6070.      8647.      1903.    
                       2445.     0.9930E-01-0.6726E-01  0.000    -0.4801    
                     -0.7189E-01-0.1270    -0.1266    -0.2151     0.7061E-02

                      -1.596    -0.2866E-01  0.000    -0.4949E-01 0.2181E-01
                      0.8541E-01 0.4836E-01-0.1622E-01-0.7894E-01 0.1460    
                     -0.2248E-01-0.4591E-01-0.1036    -0.3293      0.000    

                     -0.6883     -1.504     -2.000     -3.000    -0.3624    
                      0.1069      9.226      9.135    -0.2000E+05 -4.000    
                     -0.4904    -0.6107      9.372      8.425    -0.2000E+05

                      -4.000     0.1108E-01-0.7210      8.794      9.059    
                     -0.3000E+05 -7.000    -0.5533    -0.5281      9.410    
                       8.421    -0.3000E+05 -7.000    

    2    251.22       0.8056     -1.201      1.806     -102.6     0.8055    
                      0.6731      2.000     -99.70      3.811    -0.1311    
                       1.691     -1.468      1.475      0.000     -5.000    
                      -1.085      0.000      0.000      0.000     -1.221    

                      -2.500      9000.      9000.      0.000      0.000    
                     -0.5672     -6.248     -4.737     -7.327      2.963    
                      -14.13     -3.050      1018.      0.000      5003.    

                       6174.      5698.      6070.      8647.      1903.    
                       2445.     0.9930E-01-0.6726E-01  0.000    -0.4801    
                     -0.7189E-01-0.1270    -0.1266    -0.2151     0.7061E-02

                      -1.596    -0.2866E-01  0.000    -0.4949E-01 0.2181E-01
                      0.8541E-01 0.4836E-01-0.1622E-01-0.7894E-01 0.1460    
                     -0.2248E-01-0.4591E-01-0.1036    -0.3293      0.000    

                     -0.6883     -1.504     -2.000     -3.000    -0.3624    
                      0.1069      9.226      9.135    -0.2000E+05 -4.000    
                     -0.4904    -0.6107      9.372      8.425    -0.2000E+05

                      -4.000     0.1108E-01-0.7210      8.794      9.059    
                     -0.3000E+05 -7.000    -0.5533    -0.5281      9.410    
                       8.421    -0.3000E+05 -7.000    

    3    250.87        1.806     -2.201      1.806     -102.6     0.8055    
                      0.6731      2.000     -99.70      3.811    -0.1311    
                       1.691     -1.468      1.475      0.000     -5.000    
                      -1.085      0.000      0.000      0.000     -1.221    

                      -2.500      9000.      9000.      0.000      0.000    
                     -0.5672     -6.248     -4.737     -7.327      2.963    
                      -14.13     -3.050      1018.      0.000      5003.    

                       6174.      5698.      6070.      8647.      1903.    
                       2445.     0.9930E-01-0.6726E-01  0.000    -0.4801    
                     -0.7189E-01-0.1270    -0.1266    -0.2151     0.7061E-02

                      -1.596    -0.2866E-01  0.000    -0.4949E-01 0.2181E-01
                      0.8541E-01 0.4836E-01-0.1622E-01-0.7894E-01 0.1460    
                     -0.2248E-01-0.4591E-01-0.1036    -0.3293      0.000    

                     -0.6883     -1.504     -2.000     -3.000    -0.3624    
                      0.1069      9.226      9.135    -0.2000E+05 -4.000    
                     -0.4904    -0.6107      9.372      8.425    -0.2000E+05

                      -4.000     0.1108E-01-0.7210      8.794      9.059    
                     -0.3000E+05 -7.000    -0.5533    -0.5281      9.410    
                       8.421    -0.3000E+05 -7.000    

    4    253.40        1.806     -1.201     0.8056     -102.6     0.8055    
                      0.6731      2.000     -99.70      3.811    -0.1311    
                       1.691     -1.468      1.475      0.000     -5.000    
                      -1.085      0.000      0.000      0.000     -1.221    

                      -2.500      9000.      9000.      0.000      0.000    
                     -0.5672     -6.248     -4.737     -7.327      2.963    
                      -14.13     -3.050      1018.      0.000      5003.    

                       6174.      5698.      6070.      8647.      1903.    
                       2445.     0.9930E-01-0.6726E-01  0.000    -0.4801    
                     -0.7189E-01-0.1270    -0.1266    -0.2151     0.7061E-02

                      -1.596    -0.2866E-01  0.000    -0.4949E-01 0.2181E-01
                      0.8541E-01 0.4836E-01-0.1622E-01-0.7894E-01 0.1460    
                     -0.2248E-01-0.4591E-01-0.1036    -0.3293      0.000    

                     -0.6883     -1.504     -2.000     -3.000    -0.3624    
                      0.1069      9.226      9.135    -0.2000E+05 -4.000    
                     -0.4904    -0.6107      9.372      8.425    -0.2000E+05

                      -4.000     0.1108E-01-0.7210      8.794      9.059    
                     -0.3000E+05 -7.000    -0.5533    -0.5281      9.410    
                       8.421    -0.3000E+05 -7.000    

    5    248.84        1.806     -1.201      1.806     -102.6      1.806    
                      0.6731      2.000     -99.70      3.811    -0.1311    
                       1.691     -1.468      1.475      0.000     -5.000    
                      -1.085      0.000      0.000      0.000     -1.221    

                      -2.500      9000.      9000.      0.000      0.000    
                     -0.5672     -6.248     -4.737     -7.327      2.963    
                      -14.13     -3.050      1018.      0.000      5003.    

                       6174.      5698.      6070.      8647.      1903.    
                       2445.     0.9930E-01-0.6726E-01  0.000    -0.4801    
                     -0.7189E-01-0.1270    -0.1266    -0.2151     0.7061E-02

                      -1.596    -0.2866E-01  0.000    -0.4949E-01 0.2181E-01
                      0.8541E-01 0.4836E-01-0.1622E-01-0.7894E-01 0.1460    
                     -0.2248E-01-0.4591E-01-0.1036    -0.3293      0.000    

                     -0.6883     -1.504     -2.000     -3.000    -0.3624    
                      0.1069      9.226      9.135    -0.2000E+05 -4.000    
                     -0.4904    -0.6107      9.372      8.425    -0.2000E+05

                      -4.000     0.1108E-01-0.7210      8.794      9.059    
                     -0.3000E+05 -7.000    -0.5533    -0.5281      9.410    
                       8.421    -0.3000E+05 -7.000    

    6    239.04        1.806     -1.201      1.806     -102.6     0.8055    
                       1.673      2.000     -99.70      3.811    -0.1311    
                       1.691     -1.468      1.475      0.000     -5.000    
                      -1.085      0.000      0.000      0.000     -1.221    

                      -2.500      9000.      9000.      0.000      0.000    
                     -0.5672     -6.248     -4.737     -7.327      2.963    
                      -14.13     -3.050      1018.      0.000      5003.    

                       6174.      5698.      6070.      8647.      1903.    
                       2445.     0.9930E-01-0.6726E-01  0.000    -0.4801    
                     -0.7189E-01-0.1270    -0.1266    -0.2151     0.7061E-02

                      -1.596    -0.2866E-01  0.000    -0.4949E-01 0.2181E-01
                      0.8541E-01 0.4836E-01-0.1622E-01-0.7894E-01 0.1460    
                     -0.2248E-01-0.4591E-01-0.1036    -0.3293      0.000    

                     -0.6883     -1.504     -2.000     -3.000    -0.3624    
                      0.1069      9.226      9.135    -0.2000E+05 -4.000    
                     -0.4904    -0.6107      9.372      8.425    -0.2000E+05

                      -4.000     0.1108E-01-0.7210      8.794      9.059    
                     -0.3000E+05 -7.000    -0.5533    -0.5281      9.410    
                       8.421    -0.3000E+05 -7.000    

    7    249.31        1.806     -1.201      1.806     -102.6     0.8055    
                      0.6731      3.000     -99.70      3.811    -0.1311    
                       1.691     -1.468      1.475      0.000     -5.000    
                      -1.085      0.000      0.000      0.000     -1.221    

                      -2.500      9000.      9000.      0.000      0.000    
                     -0.5672     -6.248     -4.737     -7.327      2.963    
                      -14.13     -3.050      1018.      0.000      5003.    

                       6174.      5698.      6070.      8647.      1903.    
                       2445.     0.9930E-01-0.6726E-01  0.000    -0.4801    
                     -0.7189E-01-0.1270    -0.1266    -0.2151     0.7061E-02

                      -1.596    -0.2866E-01  0.000    -0.4949E-01 0.2181E-01
                      0.8541E-01 0.4836E-01-0.1622E-01-0.7894E-01 0.1460    
                     -0.2248E-01-0.4591E-01-0.1036    -0.3293      0.000    

                     -0.6883     -1.504     -2.000     -3.000    -0.3624    
                      0.1069      9.226      9.135    -0.2000E+05 -4.000    
                     -0.4904    -0.6107      9.372      8.425    -0.2000E+05

                      -4.000     0.1108E-01-0.7210      8.794      9.059    
                     -0.3000E+05 -7.000    -0.5533    -0.5281      9.410    
                       8.421    -0.3000E+05 -7.000    

    8    251.01        1.806     -1.201      1.806     -102.6     0.8055    
                      0.6731      2.000     -99.70      2.811    -0.1311    
                       1.691     -1.468      1.475      0.000     -5.000    
                      -1.085      0.000      0.000      0.000     -1.221    

                      -2.500      9000.      9000.      0.000      0.000    
                     -0.5672     -6.248     -4.737     -7.327      2.963    
                      -14.13     -3.050      1018.      0.000      5003.    

                       6174.      5698.      6070.      8647.      1903.    
                       2445.     0.9930E-01-0.6726E-01  0.000    -0.4801    
                     -0.7189E-01-0.1270    -0.1266    -0.2151     0.7061E-02

                      -1.596    -0.2866E-01  0.000    -0.4949E-01 0.2181E-01
                      0.8541E-01 0.4836E-01-0.1622E-01-0.7894E-01 0.1460    
                     -0.2248E-01-0.4591E-01-0.1036    -0.3293      0.000    

                     -0.6883     -1.504     -2.000     -3.000    -0.3624    
                      0.1069      9.226      9.135    -0.2000E+05 -4.000    
                     -0.4904    -0.6107      9.372      8.425    -0.2000E+05

                      -4.000     0.1108E-01-0.7210      8.794      9.059    
                     -0.3000E+05 -7.000    -0.5533    -0.5281      9.410    
                       8.421    -0.3000E+05 -7.000    

    9    253.83        1.806     -1.201      1.806     -102.6     0.8055    
                      0.6731      2.000     -99.70      3.811     -1.131    
                       1.691     -1.468      1.475      0.000     -5.000    
                      -1.085      0.000      0.000      0.000     -1.221    

                      -2.500      9000.      9000.      0.000      0.000    
                     -0.5672     -6.248     -4.737     -7.327      2.963    
                      -14.13     -3.050      1018.      0.000      5003.    

                       6174.      5698.      6070.      8647.      1903.    
                       2445.     0.9930E-01-0.6726E-01  0.000    -0.4801    
                     -0.7189E-01-0.1270    -0.1266    -0.2151     0.7061E-02

                      -1.596    -0.2866E-01  0.000    -0.4949E-01 0.2181E-01
                      0.8541E-01 0.4836E-01-0.1622E-01-0.7894E-01 0.1460    
                     -0.2248E-01-0.4591E-01-0.1036    -0.3293      0.000    

                     -0.6883     -1.504     -2.000     -3.000    -0.3624    
                      0.1069      9.226      9.135    -0.2000E+05 -4.000    
                     -0.4904    -0.6107      9.372      8.425    -0.2000E+05

                      -4.000     0.1108E-01-0.7210      8.794      9.059    
                     -0.3000E+05 -7.000    -0.5533    -0.5281      9.410    
                       8.421    -0.3000E+05 -7.000    

   10    248.74        1.806     -1.201      1.806     -102.6     0.8055    
                      0.6731      2.000     -99.70      3.811    -0.1311    
                       2.691     -1.468      1.475      0.000     -5.000    
                      -1.085      0.000      0.000      0.000     -1.221    

                      -2.500      9000.      9000.      0.000      0.000    
                     -0.5672     -6.248     -4.737     -7.327      2.963    
                      -14.13     -3.050      1018.      0.000      5003.    

                       6174.      5698.      6070.      8647.      1903.    
                       2445.     0.9930E-01-0.6726E-01  0.000    -0.4801    
                     -0.7189E-01-0.1270    -0.1266    -0.2151     0.7061E-02

                      -1.596    -0.2866E-01  0.000    -0.4949E-01 0.2181E-01
                      0.8541E-01 0.4836E-01-0.1622E-01-0.7894E-01 0.1460    
                     -0.2248E-01-0.4591E-01-0.1036    -0.3293      0.000    

                     -0.6883     -1.504     -2.000     -3.000    -0.3624    
                      0.1069      9.226      9.135    -0.2000E+05 -4.000    
                     -0.4904    -0.6107      9.372      8.425    -0.2000E+05

                      -4.000     0.1108E-01-0.7210      8.794      9.059    
                     -0.3000E+05 -7.000    -0.5533    -0.5281      9.410    
                       8.421    -0.3000E+05 -7.000    

   11    268.07        1.806     -1.201      1.806     -102.6     0.8055    
                      0.6731      2.000     -99.70      3.811    -0.1311    
                       1.691    -0.4681      1.475      0.000     -5.000    
                      -1.085      0.000      0.000      0.000     -1.221    

                      -2.500      9000.      9000.      0.000      0.000    
                     -0.5672     -6.248     -4.737     -7.327      2.963    
                      -14.13     -3.050      1018.      0.000      5003.    

                       6174.      5698.      6070.      8647.      1903.    
                       2445.     0.9930E-01-0.6726E-01  0.000    -0.4801    
                     -0.7189E-01-0.1270    -0.1266    -0.2151     0.7061E-02

                      -1.596    -0.2866E-01  0.000    -0.4949E-01 0.2181E-01
                      0.8541E-01 0.4836E-01-0.1622E-01-0.7894E-01 0.1460    
                     -0.2248E-01-0.4591E-01-0.1036    -0.3293      0.000    

                     -0.6883     -1.504     -2.000     -3.000    -0.3624    
                      0.1069      9.226      9.135    -0.2000E+05 -4.000    
                     -0.4904    -0.6107      9.372      8.425    -0.2000E+05

                      -4.000     0.1108E-01-0.7210      8.794      9.059    
                     -0.3000E+05 -7.000    -0.5533    -0.5281      9.410    
                       8.421    -0.3000E+05 -7.000    

   12    285.57        1.806     -1.201      1.806     -102.6     0.8055    
                      0.6731      2.000     -99.70      3.811    -0.1311    
                       1.691     -1.468     0.4746      0.000     -5.000    
                      -1.085      0.000      0.000      0.000     -1.221    

                      -2.500      9000.      9000.      0.000      0.000    
                     -0.5672     -6.248     -4.737     -7.327      2.963    
                      -14.13     -3.050      1018.      0.000      5003.    

                       6174.      5698.      6070.      8647.      1903.    
                       2445.     0.9930E-01-0.6726E-01  0.000    -0.4801    
                     -0.7189E-01-0.1270    -0.1266    -0.2151     0.7061E-02

                      -1.596    -0.2866E-01  0.000    -0.4949E-01 0.2181E-01
                      0.8541E-01 0.4836E-01-0.1622E-01-0.7894E-01 0.1460    
                     -0.2248E-01-0.4591E-01-0.1036    -0.3293      0.000    

                     -0.6883     -1.504     -2.000     -3.000    -0.3624    
                      0.1069      9.226      9.135    -0.2000E+05 -4.000    
                     -0.4904    -0.6107      9.372      8.425    -0.2000E+05

                      -4.000     0.1108E-01-0.7210      8.794      9.059    
                     -0.3000E+05 -7.000    -0.5533    -0.5281      9.410    
                       8.421    -0.3000E+05 -7.000    

   13    247.72        1.806     -1.201      1.806     -102.6     0.8055    
                      0.6731      2.000     -99.70      3.811    -0.1311    
                       1.691     -1.468      1.475      0.000     -5.000    
                     -0.8463E-01  0.000      0.000      0.000     -1.221    

                      -2.500      9000.      9000.      0.000      0.000    
                     -0.5672     -6.248     -4.737     -7.327      2.963    
                      -14.13     -3.050      1018.      0.000      5003.    

                       6174.      5698.      6070.      8647.      1903.    
                       2445.     0.9930E-01-0.6726E-01  0.000    -0.4801    
                     -0.7189E-01-0.1270    -0.1266    -0.2151     0.7061E-02

                      -1.596    -0.2866E-01  0.000    -0.4949E-01 0.2181E-01
                      0.8541E-01 0.4836E-01-0.1622E-01-0.7894E-01 0.1460    
                     -0.2248E-01-0.4591E-01-0.1036    -0.3293      0.000    

                     -0.6883     -1.504     -2.000     -3.000    -0.3624    
                      0.1069      9.226      9.135    -0.2000E+05 -4.000    
                     -0.4904    -0.6107      9.372      8.425    -0.2000E+05

                      -4.000     0.1108E-01-0.7210      8.794      9.059    
                     -0.3000E+05 -7.000    -0.5533    -0.5281      9.410    
                       8.421    -0.3000E+05 -7.000    

   14    273.43        1.806     -1.201      1.806     -102.6     0.8055    
                      0.6731      2.000     -99.70      3.811    -0.1311    
                       1.691     -1.468      1.475      0.000     -5.000    
                      -1.085      0.000      0.000      0.000     -1.221    

                      -2.500     0.1350E+05  9000.      0.000      0.000    
                     -0.5672     -6.248     -4.737     -7.327      2.963    
                      -14.13     -3.050      1018.      0.000      5003.    

                       6174.      5698.      6070.      8647.      1903.    
                       2445.     0.9930E-01-0.6726E-01  0.000    -0.4801    
                     -0.7189E-01-0.1270    -0.1266    -0.2151     0.7061E-02

                      -1.596    -0.2866E-01  0.000    -0.4949E-01 0.2181E-01
                      0.8541E-01 0.4836E-01-0.1622E-01-0.7894E-01 0.1460    
                     -0.2248E-01-0.4591E-01-0.1036    -0.3293      0.000    

                     -0.6883     -1.504     -2.000     -3.000    -0.3624    
                      0.1069      9.226      9.135    -0.2000E+05 -4.000    
                     -0.4904    -0.6107      9.372      8.425    -0.2000E+05

                      -4.000     0.1108E-01-0.7210      8.794      9.059    
                     -0.3000E+05 -7.000    -0.5533    -0.5281      9.410    
                       8.421    -0.3000E+05 -7.000    

   15    359.51        1.806     -1.201      1.806     -102.6     0.8055    
                      0.6731      2.000     -99.70      3.811    -0.1311    
                       1.691     -1.468      1.475      0.000     -5.000    
                      -1.085      0.000      0.000      0.000     -1.221    

                      -2.500      9000.     0.1350E+05  0.000      0.000    
                     -0.5672     -6.248     -4.737     -7.327      2.963    
                      -14.13     -3.050      1018.      0.000      5003.    

                       6174.      5698.      6070.      8647.      1903.    
                       2445.     0.9930E-01-0.6726E-01  0.000    -0.4801    
                     -0.7189E-01-0.1270    -0.1266    -0.2151     0.7061E-02

                      -1.596    -0.2866E-01  0.000    -0.4949E-01 0.2181E-01
                      0.8541E-01 0.4836E-01-0.1622E-01-0.7894E-01 0.1460    
                     -0.2248E-01-0.4591E-01-0.1036    -0.3293      0.000    

                     -0.6883     -1.504     -2.000     -3.000    -0.3624    
                      0.1069      9.226      9.135    -0.2000E+05 -4.000    
                     -0.4904    -0.6107      9.372      8.425    -0.2000E+05

                      -4.000     0.1108E-01-0.7210      8.794      9.059    
                     -0.3000E+05 -7.000    -0.5533    -0.5281      9.410    
                       8.421    -0.3000E+05 -7.000    

   16    250.28        1.806     -1.201      1.806     -102.6     0.8055    
                      0.6731      2.000     -99.70      3.811    -0.1311    
                       1.691     -1.468      1.475      0.000     -5.000    
                      -1.085      0.000      0.000      0.000     -1.221    

                      -2.500      9000.      9000.      0.000      0.000    
                     -0.5672     -4.248     -4.737     -7.327      2.963    
                      -14.13     -3.050      1018.      0.000      5003.    

                       6174.      5698.      6070.      8647.      1903.    
                       2445.     0.9930E-01-0.6726E-01  0.000    -0.4801    
                     -0.7189E-01-0.1270    -0.1266    -0.2151     0.7061E-02

                      -1.596    -0.2866E-01  0.000    -0.4949E-01 0.2181E-01
                      0.8541E-01 0.4836E-01-0.1622E-01-0.7894E-01 0.1460    
                     -0.2248E-01-0.4591E-01-0.1036    -0.3293      0.000    

                     -0.6883     -1.504     -2.000     -3.000    -0.3624    
                      0.1069      9.226      9.135    -0.2000E+05 -4.000    
                     -0.4904    -0.6107      9.372      8.425    -0.2000E+05

                      -4.000     0.1108E-01-0.7210      8.794      9.059    
                     -0.3000E+05 -7.000    -0.5533    -0.5281      9.410    
                       8.421    -0.3000E+05 -7.000    

   17    249.91        1.806     -1.201      1.806     -102.6     0.8055    
                      0.6731      2.000     -99.70      3.811    -0.1311    
                       1.691     -1.468      1.475      0.000     -5.000    
                      -1.085      0.000      0.000      0.000     -1.221    

                      -2.500      9000.      9000.      0.000      0.000    
                     -0.5672     -6.248     -2.737     -7.327      2.963    
                      -14.13     -3.050      1018.      0.000      5003.    

                       6174.      5698.      6070.      8647.      1903.    
                       2445.     0.9930E-01-0.6726E-01  0.000    -0.4801    
                     -0.7189E-01-0.1270    -0.1266    -0.2151     0.7061E-02

                      -1.596    -0.2866E-01  0.000    -0.4949E-01 0.2181E-01
                      0.8541E-01 0.4836E-01-0.1622E-01-0.7894E-01 0.1460    
                     -0.2248E-01-0.4591E-01-0.1036    -0.3293      0.000    

                     -0.6883     -1.504     -2.000     -3.000    -0.3624    
                      0.1069      9.226      9.135    -0.2000E+05 -4.000    
                     -0.4904    -0.6107      9.372      8.425    -0.2000E+05

                      -4.000     0.1108E-01-0.7210      8.794      9.059    
                     -0.3000E+05 -7.000    -0.5533    -0.5281      9.410    
                       8.421    -0.3000E+05 -7.000    

   18    250.29        1.806     -1.201      1.806     -102.6     0.8055    
                      0.6731      2.000     -99.70      3.811    -0.1311    
                       1.691     -1.468      1.475      0.000     -5.000    
                      -1.085      0.000      0.000      0.000     -1.221    

                      -2.500      9000.      9000.      0.000      0.000    
                     -0.5672     -6.248     -4.737     -5.327      2.963    
                      -14.13     -3.050      1018.      0.000      5003.    

                       6174.      5698.      6070.      8647.      1903.    
                       2445.     0.9930E-01-0.6726E-01  0.000    -0.4801    
                     -0.7189E-01-0.1270    -0.1266    -0.2151     0.7061E-02

                      -1.596    -0.2866E-01  0.000    -0.4949E-01 0.2181E-01
                      0.8541E-01 0.4836E-01-0.1622E-01-0.7894E-01 0.1460    
                     -0.2248E-01-0.4591E-01-0.1036    -0.3293      0.000    

                     -0.6883     -1.504     -2.000     -3.000    -0.3624    
                      0.1069      9.226      9.135    -0.2000E+05 -4.000    
                     -0.4904    -0.6107      9.372      8.425    -0.2000E+05

                      -4.000     0.1108E-01-0.7210      8.794      9.059    
                     -0.3000E+05 -7.000    -0.5533    -0.5281      9.410    
                       8.421    -0.3000E+05 -7.000    

   19    250.40        1.806     -1.201      1.806     -102.6     0.8055    
                      0.6731      2.000     -99.70      3.811    -0.1311    
                       1.691     -1.468      1.475      0.000     -5.000    
                      -1.085      0.000      0.000      0.000     -1.221    

                      -2.500      9000.      9000.      0.000      0.000    
                     -0.5672     -6.248     -4.737     -7.327      4.963    
                      -14.13     -3.050      1018.      0.000      5003.    

                       6174.      5698.      6070.      8647.      1903.    
                       2445.     0.9930E-01-0.6726E-01  0.000    -0.4801    
                     -0.7189E-01-0.1270    -0.1266    -0.2151     0.7061E-02

                      -1.596    -0.2866E-01  0.000    -0.4949E-01 0.2181E-01
                      0.8541E-01 0.4836E-01-0.1622E-01-0.7894E-01 0.1460    
                     -0.2248E-01-0.4591E-01-0.1036    -0.3293      0.000    

                     -0.6883     -1.504     -2.000     -3.000    -0.3624    
                      0.1069      9.226      9.135    -0.2000E+05 -4.000    
                     -0.4904    -0.6107      9.372      8.425    -0.2000E+05

                      -4.000     0.1108E-01-0.7210      8.794      9.059    
                     -0.3000E+05 -7.000    -0.5533    -0.5281      9.410    
                       8.421    -0.3000E+05 -7.000    

   20    250.29        1.806     -1.201      1.806     -102.6     0.8055    
                      0.6731      2.000     -99.70      3.811    -0.1311    
                       1.691     -1.468      1.475      0.000     -5.000    
                      -1.085      0.000      0.000      0.000     -1.221    

                      -2.500      9000.      9000.      0.000      0.000    
                     -0.5672     -6.248     -4.737     -7.327      2.963    
                      -12.13     -3.050      1018.      0.000      5003.    

                       6174.      5698.      6070.      8647.      1903.    
                       2445.     0.9930E-01-0.6726E-01  0.000    -0.4801    
                     -0.7189E-01-0.1270    -0.1266    -0.2151     0.7061E-02

                      -1.596    -0.2866E-01  0.000    -0.4949E-01 0.2181E-01
                      0.8541E-01 0.4836E-01-0.1622E-01-0.7894E-01 0.1460    
                     -0.2248E-01-0.4591E-01-0.1036    -0.3293      0.000    

                     -0.6883     -1.504     -2.000     -3.000    -0.3624    
                      0.1069      9.226      9.135    -0.2000E+05 -4.000    
                     -0.4904    -0.6107      9.372      8.425    -0.2000E+05

                      -4.000     0.1108E-01-0.7210      8.794      9.059    
                     -0.3000E+05 -7.000    -0.5533    -0.5281      9.410    
                       8.421    -0.3000E+05 -7.000    

   21    249.68        1.806     -1.201      1.806     -102.6     0.8055    
                      0.6731      2.000     -99.70      3.811    -0.1311    
                       1.691     -1.468      1.475      0.000     -5.000    
                      -1.085      0.000      0.000      0.000     -1.221    

                      -2.500      9000.      9000.      0.000      0.000    
                     -0.5672     -6.248     -4.737     -7.327      2.963    
                      -14.13     -2.050      1018.      0.000      5003.    

                       6174.      5698.      6070.      8647.      1903.    
                       2445.     0.9930E-01-0.6726E-01  0.000    -0.4801    
                     -0.7189E-01-0.1270    -0.1266    -0.2151     0.7061E-02

                      -1.596    -0.2866E-01  0.000    -0.4949E-01 0.2181E-01
                      0.8541E-01 0.4836E-01-0.1622E-01-0.7894E-01 0.1460    
                     -0.2248E-01-0.4591E-01-0.1036    -0.3293      0.000    

                     -0.6883     -1.504     -2.000     -3.000    -0.3624    
                      0.1069      9.226      9.135    -0.2000E+05 -4.000    
                     -0.4904    -0.6107      9.372      8.425    -0.2000E+05

                      -4.000     0.1108E-01-0.7210      8.794      9.059    
                     -0.3000E+05 -7.000    -0.5533    -0.5281      9.410    
                       8.421    -0.3000E+05 -7.000    

   22    244.74        1.806     -1.201      1.806     -102.6     0.8055    
                      0.6731      2.000     -99.70      3.811    -0.1311    
                       1.691     -1.468      1.475      0.000     -5.000    
                      -1.085      0.000      0.000      0.000     -1.221    

                      -2.500      9000.      9000.      0.000      0.000    
                     -0.5672     -6.248     -4.737     -7.327      2.963    
                      -14.13     -3.050      5092.      0.000      5003.    

                       6174.      5698.      6070.      8647.      1903.    
                       2445.     0.9930E-01-0.6726E-01  0.000    -0.4801    
                     -0.7189E-01-0.1270    -0.1266    -0.2151     0.7061E-02

                      -1.596    -0.2866E-01  0.000    -0.4949E-01 0.2181E-01
                      0.8541E-01 0.4836E-01-0.1622E-01-0.7894E-01 0.1460    
                     -0.2248E-01-0.4591E-01-0.1036    -0.3293      0.000    

                     -0.6883     -1.504     -2.000     -3.000    -0.3624    
                      0.1069      9.226      9.135    -0.2000E+05 -4.000    
                     -0.4904    -0.6107      9.372      8.425    -0.2000E+05

                      -4.000     0.1108E-01-0.7210      8.794      9.059    
                     -0.3000E+05 -7.000    -0.5533    -0.5281      9.410    
                       8.421    -0.3000E+05 -7.000    

   23    182.68        1.806     -1.201      1.806     -102.6     0.8055    
                      0.6731      2.000     -99.70      3.811    -0.1311    
                       1.691     -1.468      1.475      0.000     -5.000    
                      -1.085      0.000      0.000      0.000     -1.221    

                      -2.500      9000.      9000.      0.000      0.000    
                     -0.5672     -6.248     -4.737     -7.327      2.963    
                      -14.13     -3.050      1018.      0.000     0.2502E+05

                       6174.      5698.      6070.      8647.      1903.    
                       2445.     0.9930E-01-0.6726E-01  0.000    -0.4801    
                     -0.7189E-01-0.1270    -0.1266    -0.2151     0.7061E-02

                      -1.596    -0.2866E-01  0.000    -0.4949E-01 0.2181E-01
                      0.8541E-01 0.4836E-01-0.1622E-01-0.7894E-01 0.1460    
                     -0.2248E-01-0.4591E-01-0.1036    -0.3293      0.000    

                     -0.6883     -1.504     -2.000     -3.000    -0.3624    
                      0.1069      9.226      9.135    -0.2000E+05 -4.000    
                     -0.4904    -0.6107      9.372      8.425    -0.2000E+05

                      -4.000     0.1108E-01-0.7210      8.794      9.059    
                     -0.3000E+05 -7.000    -0.5533    -0.5281      9.410    
                       8.421    -0.3000E+05 -7.000    

   24    209.71        1.806     -1.201      1.806     -102.6     0.8055    
                      0.6731      2.000     -99.70      3.811    -0.1311    
                       1.691     -1.468      1.475      0.000     -5.000    
                      -1.085      0.000      0.000      0.000     -1.221    

                      -2.500      9000.      9000.      0.000      0.000    
                     -0.5672     -6.248     -4.737     -7.327      2.963    
                      -14.13     -3.050      1018.      0.000      5003.    

                      0.3087E+05  5698.      6070.      8647.      1903.    
                       2445.     0.9930E-01-0.6726E-01  0.000    -0.4801    
                     -0.7189E-01-0.1270    -0.1266    -0.2151     0.7061E-02

                      -1.596    -0.2866E-01  0.000    -0.4949E-01 0.2181E-01
                      0.8541E-01 0.4836E-01-0.1622E-01-0.7894E-01 0.1460    
                     -0.2248E-01-0.4591E-01-0.1036    -0.3293      0.000    

                     -0.6883     -1.504     -2.000     -3.000    -0.3624    
                      0.1069      9.226      9.135    -0.2000E+05 -4.000    
                     -0.4904    -0.6107      9.372      8.425    -0.2000E+05

                      -4.000     0.1108E-01-0.7210      8.794      9.059    
                     -0.3000E+05 -7.000    -0.5533    -0.5281      9.410    
                       8.421    -0.3000E+05 -7.000    

   25    181.02        1.806     -1.201      1.806     -102.6     0.8055    
                      0.6731      2.000     -99.70      3.811    -0.1311    
                       1.691     -1.468      1.475      0.000     -5.000    
                      -1.085      0.000      0.000      0.000     -1.221    

                      -2.500      9000.      9000.      0.000      0.000    
                     -0.5672     -6.248     -4.737     -7.327      2.963    
                      -14.13     -3.050      1018.      0.000      5003.    

                       6174.     0.2849E+05  6070.      8647.      1903.    
                       2445.     0.9930E-01-0.6726E-01  0.000    -0.4801    
                     -0.7189E-01-0.1270    -0.1266    -0.2151     0.7061E-02

                      -1.596    -0.2866E-01  0.000    -0.4949E-01 0.2181E-01
                      0.8541E-01 0.4836E-01-0.1622E-01-0.7894E-01 0.1460    
                     -0.2248E-01-0.4591E-01-0.1036    -0.3293      0.000    

                     -0.6883     -1.504     -2.000     -3.000    -0.3624    
                      0.1069      9.226      9.135    -0.2000E+05 -4.000    
                     -0.4904    -0.6107      9.372      8.425    -0.2000E+05

                      -4.000     0.1108E-01-0.7210      8.794      9.059    
                     -0.3000E+05 -7.000    -0.5533    -0.5281      9.410    
                       8.421    -0.3000E+05 -7.000    

   26    187.49        1.806     -1.201      1.806     -102.6     0.8055    
                      0.6731      2.000     -99.70      3.811    -0.1311    
                       1.691     -1.468      1.475      0.000     -5.000    
                      -1.085      0.000      0.000      0.000     -1.221    

                      -2.500      9000.      9000.      0.000      0.000    
                     -0.5672     -6.248     -4.737     -7.327      2.963    
                      -14.13     -3.050      1018.      0.000      5003.    

                       6174.      5698.     0.3035E+05  8647.      1903.    
                       2445.     0.9930E-01-0.6726E-01  0.000    -0.4801    
                     -0.7189E-01-0.1270    -0.1266    -0.2151     0.7061E-02

                      -1.596    -0.2866E-01  0.000    -0.4949E-01 0.2181E-01
                      0.8541E-01 0.4836E-01-0.1622E-01-0.7894E-01 0.1460    
                     -0.2248E-01-0.4591E-01-0.1036    -0.3293      0.000    

                     -0.6883     -1.504     -2.000     -3.000    -0.3624    
                      0.1069      9.226      9.135    -0.2000E+05 -4.000    
                     -0.4904    -0.6107      9.372      8.425    -0.2000E+05

                      -4.000     0.1108E-01-0.7210      8.794      9.059    
                     -0.3000E+05 -7.000    -0.5533    -0.5281      9.410    
                       8.421    -0.3000E+05 -7.000    

   27    189.84        1.806     -1.201      1.806     -102.6     0.8055    
                      0.6731      2.000     -99.70      3.811    -0.1311    
                       1.691     -1.468      1.475      0.000     -5.000    
                      -1.085      0.000      0.000      0.000     -1.221    

                      -2.500      9000.      9000.      0.000      0.000    
                     -0.5672     -6.248     -4.737     -7.327      2.963    
                      -14.13     -3.050      1018.      0.000      5003.    

                       6174.      5698.      6070.     0.4323E+05  1903.    
                       2445.     0.9930E-01-0.6726E-01  0.000    -0.4801    
                     -0.7189E-01-0.1270    -0.1266    -0.2151     0.7061E-02

                      -1.596    -0.2866E-01  0.000    -0.4949E-01 0.2181E-01
                      0.8541E-01 0.4836E-01-0.1622E-01-0.7894E-01 0.1460    
                     -0.2248E-01-0.4591E-01-0.1036    -0.3293      0.000    

                     -0.6883     -1.504     -2.000     -3.000    -0.3624    
                      0.1069      9.226      9.135    -0.2000E+05 -4.000    
                     -0.4904    -0.6107      9.372      8.425    -0.2000E+05

                      -4.000     0.1108E-01-0.7210      8.794      9.059    
                     -0.3000E+05 -7.000    -0.5533    -0.5281      9.410    
                       8.421    -0.3000E+05 -7.000    

   28    223.89        1.806     -1.201      1.806     -102.6     0.8055    
                      0.6731      2.000     -99.70      3.811    -0.1311    
                       1.691     -1.468      1.475      0.000     -5.000    
                      -1.085      0.000      0.000      0.000     -1.221    

                      -2.500      9000.      9000.      0.000      0.000    
                     -0.5672     -6.248     -4.737     -7.327      2.963    
                      -14.13     -3.050      1018.      0.000      5003.    

                       6174.      5698.      6070.      8647.      9513.    
                       2445.     0.9930E-01-0.6726E-01  0.000    -0.4801    
                     -0.7189E-01-0.1270    -0.1266    -0.2151     0.7061E-02

                      -1.596    -0.2866E-01  0.000    -0.4949E-01 0.2181E-01
                      0.8541E-01 0.4836E-01-0.1622E-01-0.7894E-01 0.1460    
                     -0.2248E-01-0.4591E-01-0.1036    -0.3293      0.000    

                     -0.6883     -1.504     -2.000     -3.000    -0.3624    
                      0.1069      9.226      9.135    -0.2000E+05 -4.000    
                     -0.4904    -0.6107      9.372      8.425    -0.2000E+05

                      -4.000     0.1108E-01-0.7210      8.794      9.059    
                     -0.3000E+05 -7.000    -0.5533    -0.5281      9.410    
                       8.421    -0.3000E+05 -7.000    

   29    181.99        1.806     -1.201      1.806     -102.6     0.8055    
                      0.6731      2.000     -99.70      3.811    -0.1311    
                       1.691     -1.468      1.475      0.000     -5.000    
                      -1.085      0.000      0.000      0.000     -1.221    

                      -2.500      9000.      9000.      0.000      0.000    
                     -0.5672     -6.248     -4.737     -7.327      2.963    
                      -14.13     -3.050      1018.      0.000      5003.    

                       6174.      5698.      6070.      8647.      1903.    
                      0.1223E+05 0.9930E-01-0.6726E-01  0.000    -0.4801    
                     -0.7189E-01-0.1270    -0.1266    -0.2151     0.7061E-02

                      -1.596    -0.2866E-01  0.000    -0.4949E-01 0.2181E-01
                      0.8541E-01 0.4836E-01-0.1622E-01-0.7894E-01 0.1460    
                     -0.2248E-01-0.4591E-01-0.1036    -0.3293      0.000    

                     -0.6883     -1.504     -2.000     -3.000    -0.3624    
                      0.1069      9.226      9.135    -0.2000E+05 -4.000    
                     -0.4904    -0.6107      9.372      8.425    -0.2000E+05

                      -4.000     0.1108E-01-0.7210      8.794      9.059    
                     -0.3000E+05 -7.000    -0.5533    -0.5281      9.410    
                       8.421    -0.3000E+05 -7.000    

   30    261.74        1.806     -1.201      1.806     -102.6     0.8055    
                      0.6731      2.000     -99.70      3.811    -0.1311    
                       1.691     -1.468      1.475      0.000     -5.000    
                      -1.085      0.000      0.000      0.000     -1.221    

                      -2.500      9000.      9000.      0.000      0.000    
                     -0.5672     -6.248     -4.737     -7.327      2.963    
                      -14.13     -3.050      1018.      0.000      5003.    

                       6174.      5698.      6070.      8647.      1903.    
                       2445.     0.3993    -0.6726E-01  0.000    -0.4801    
                     -0.7189E-01-0.1270    -0.1266    -0.2151     0.7061E-02

                      -1.596    -0.2866E-01  0.000    -0.4949E-01 0.2181E-01
                      0.8541E-01 0.4836E-01-0.1622E-01-0.7894E-01 0.1460    
                     -0.2248E-01-0.4591E-01-0.1036    -0.3293      0.000    

                     -0.6883     -1.504     -2.000     -3.000    -0.3624    
                      0.1069      9.226      9.135    -0.2000E+05 -4.000    
                     -0.4904    -0.6107      9.372      8.425    -0.2000E+05

                      -4.000     0.1108E-01-0.7210      8.794      9.059    
                     -0.3000E+05 -7.000    -0.5533    -0.5281      9.410    
                       8.421    -0.3000E+05 -7.000    

   31    254.17        1.806     -1.201      1.806     -102.6     0.8055    
                      0.6731      2.000     -99.70      3.811    -0.1311    
                       1.691     -1.468      1.475      0.000     -5.000    
                      -1.085      0.000      0.000      0.000     -1.221    

                      -2.500      9000.      9000.      0.000      0.000    
                     -0.5672     -6.248     -4.737     -7.327      2.963    
                      -14.13     -3.050      1018.      0.000      5003.    

                       6174.      5698.      6070.      8647.      1903.    
                       2445.     0.9930E-01 0.2327      0.000    -0.4801    
                     -0.7189E-01-0.1270    -0.1266    -0.2151     0.7061E-02

                      -1.596    -0.2866E-01  0.000    -0.4949E-01 0.2181E-01
                      0.8541E-01 0.4836E-01-0.1622E-01-0.7894E-01 0.1460    
                     -0.2248E-01-0.4591E-01-0.1036    -0.3293      0.000    

                     -0.6883     -1.504     -2.000     -3.000    -0.3624    
                      0.1069      9.226      9.135    -0.2000E+05 -4.000    
                     -0.4904    -0.6107      9.372      8.425    -0.2000E+05

                      -4.000     0.1108E-01-0.7210      8.794      9.059    
                     -0.3000E+05 -7.000    -0.5533    -0.5281      9.410    
                       8.421    -0.3000E+05 -7.000    

   32    248.10        1.806     -1.201      1.806     -102.6     0.8055    
                      0.6731      2.000     -99.70      3.811    -0.1311    
                       1.691     -1.468      1.475      0.000     -5.000    
                      -1.085      0.000      0.000      0.000     -1.221    

                      -2.500      9000.      9000.      0.000      0.000    
                     -0.5672     -6.248     -4.737     -7.327      2.963    
                      -14.13     -3.050      1018.      0.000      5003.    

                       6174.      5698.      6070.      8647.      1903.    
                       2445.     0.9930E-01-0.6726E-01  0.000    -0.1801    
                     -0.7189E-01-0.1270    -0.1266    -0.2151     0.7061E-02

                      -1.596    -0.2866E-01  0.000    -0.4949E-01 0.2181E-01
                      0.8541E-01 0.4836E-01-0.1622E-01-0.7894E-01 0.1460    
                     -0.2248E-01-0.4591E-01-0.1036    -0.3293      0.000    

                     -0.6883     -1.504     -2.000     -3.000    -0.3624    
                      0.1069      9.226      9.135    -0.2000E+05 -4.000    
                     -0.4904    -0.6107      9.372      8.425    -0.2000E+05

                      -4.000     0.1108E-01-0.7210      8.794      9.059    
                     -0.3000E+05 -7.000    -0.5533    -0.5281      9.410    
                       8.421    -0.3000E+05 -7.000    

   33    255.51        1.806     -1.201      1.806     -102.6     0.8055    
                      0.6731      2.000     -99.70      3.811    -0.1311    
                       1.691     -1.468      1.475      0.000     -5.000    
                      -1.085      0.000      0.000      0.000     -1.221    

                      -2.500      9000.      9000.      0.000      0.000    
                     -0.5672     -6.248     -4.737     -7.327      2.963    
                      -14.13     -3.050      1018.      0.000      5003.    

                       6174.      5698.      6070.      8647.      1903.    
                       2445.     0.9930E-01-0.6726E-01  0.000    -0.4801    
                      0.2281    -0.1270    -0.1266    -0.2151     0.7061E-02

                      -1.596    -0.2866E-01  0.000    -0.4949E-01 0.2181E-01
                      0.8541E-01 0.4836E-01-0.1622E-01-0.7894E-01 0.1460    
                     -0.2248E-01-0.4591E-01-0.1036    -0.3293      0.000    

                     -0.6883     -1.504     -2.000     -3.000    -0.3624    
                      0.1069      9.226      9.135    -0.2000E+05 -4.000    
                     -0.4904    -0.6107      9.372      8.425    -0.2000E+05

                      -4.000     0.1108E-01-0.7210      8.794      9.059    
                     -0.3000E+05 -7.000    -0.5533    -0.5281      9.410    
                       8.421    -0.3000E+05 -7.000    

   34    253.31        1.806     -1.201      1.806     -102.6     0.8055    
                      0.6731      2.000     -99.70      3.811    -0.1311    
                       1.691     -1.468      1.475      0.000     -5.000    
                      -1.085      0.000      0.000      0.000     -1.221    

                      -2.500      9000.      9000.      0.000      0.000    
                     -0.5672     -6.248     -4.737     -7.327      2.963    
                      -14.13     -3.050      1018.      0.000      5003.    

                       6174.      5698.      6070.      8647.      1903.    
                       2445.     0.9930E-01-0.6726E-01  0.000    -0.4801    
                     -0.7189E-01 0.1730    -0.1266    -0.2151     0.7061E-02

                      -1.596    -0.2866E-01  0.000    -0.4949E-01 0.2181E-01
                      0.8541E-01 0.4836E-01-0.1622E-01-0.7894E-01 0.1460    
                     -0.2248E-01-0.4591E-01-0.1036    -0.3293      0.000    

                     -0.6883     -1.504     -2.000     -3.000    -0.3624    
                      0.1069      9.226      9.135    -0.2000E+05 -4.000    
                     -0.4904    -0.6107      9.372      8.425    -0.2000E+05

                      -4.000     0.1108E-01-0.7210      8.794      9.059    
                     -0.3000E+05 -7.000    -0.5533    -0.5281      9.410    
                       8.421    -0.3000E+05 -7.000    

   35    255.75        1.806     -1.201      1.806     -102.6     0.8055    
                      0.6731      2.000     -99.70      3.811    -0.1311    
                       1.691     -1.468      1.475      0.000     -5.000    
                      -1.085      0.000      0.000      0.000     -1.221    

                      -2.500      9000.      9000.      0.000      0.000    
                     -0.5672     -6.248     -4.737     -7.327      2.963    
                      -14.13     -3.050      1018.      0.000      5003.    

                       6174.      5698.      6070.      8647.      1903.    
                       2445.     0.9930E-01-0.6726E-01  0.000    -0.4801    
                     -0.7189E-01-0.1270     0.1734    -0.2151     0.7061E-02

                      -1.596    -0.2866E-01  0.000    -0.4949E-01 0.2181E-01
                      0.8541E-01 0.4836E-01-0.1622E-01-0.7894E-01 0.1460    
                     -0.2248E-01-0.4591E-01-0.1036    -0.3293      0.000    

                     -0.6883     -1.504     -2.000     -3.000    -0.3624    
                      0.1069      9.226      9.135    -0.2000E+05 -4.000    
                     -0.4904    -0.6107      9.372      8.425    -0.2000E+05

                      -4.000     0.1108E-01-0.7210      8.794      9.059    
                     -0.3000E+05 -7.000    -0.5533    -0.5281      9.410    
                       8.421    -0.3000E+05 -7.000    

   36    251.57        1.806     -1.201      1.806     -102.6     0.8055    
                      0.6731      2.000     -99.70      3.811    -0.1311    
                       1.691     -1.468      1.475      0.000     -5.000    
                      -1.085      0.000      0.000      0.000     -1.221    

                      -2.500      9000.      9000.      0.000      0.000    
                     -0.5672     -6.248     -4.737     -7.327      2.963    
                      -14.13     -3.050      1018.      0.000      5003.    

                       6174.      5698.      6070.      8647.      1903.    
                       2445.     0.9930E-01-0.6726E-01  0.000    -0.4801    
                     -0.7189E-01-0.1270    -0.1266     0.8489E-01 0.7061E-02

                      -1.596    -0.2866E-01  0.000    -0.4949E-01 0.2181E-01
                      0.8541E-01 0.4836E-01-0.1622E-01-0.7894E-01 0.1460    
                     -0.2248E-01-0.4591E-01-0.1036    -0.3293      0.000    

                     -0.6883     -1.504     -2.000     -3.000    -0.3624    
                      0.1069      9.226      9.135    -0.2000E+05 -4.000    
                     -0.4904    -0.6107      9.372      8.425    -0.2000E+05

                      -4.000     0.1108E-01-0.7210      8.794      9.059    
                     -0.3000E+05 -7.000    -0.5533    -0.5281      9.410    
                       8.421    -0.3000E+05 -7.000    

   37    256.89        1.806     -1.201      1.806     -102.6     0.8055    
                      0.6731      2.000     -99.70      3.811    -0.1311    
                       1.691     -1.468      1.475      0.000     -5.000    
                      -1.085      0.000      0.000      0.000     -1.221    

                      -2.500      9000.      9000.      0.000      0.000    
                     -0.5672     -6.248     -4.737     -7.327      2.963    
                      -14.13     -3.050      1018.      0.000      5003.    

                       6174.      5698.      6070.      8647.      1903.    
                       2445.     0.9930E-01-0.6726E-01  0.000    -0.4801    
                     -0.7189E-01-0.1270    -0.1266    -0.2151     0.3071    

                      -1.596    -0.2866E-01  0.000    -0.4949E-01 0.2181E-01
                      0.8541E-01 0.4836E-01-0.1622E-01-0.7894E-01 0.1460    
                     -0.2248E-01-0.4591E-01-0.1036    -0.3293      0.000    

                     -0.6883     -1.504     -2.000     -3.000    -0.3624    
                      0.1069      9.226      9.135    -0.2000E+05 -4.000    
                     -0.4904    -0.6107      9.372      8.425    -0.2000E+05

                      -4.000     0.1108E-01-0.7210      8.794      9.059    
                     -0.3000E+05 -7.000    -0.5533    -0.5281      9.410    
                       8.421    -0.3000E+05 -7.000    

   38    250.65        1.806     -1.201      1.806     -102.6     0.8055    
                      0.6731      2.000     -99.70      3.811    -0.1311    
                       1.691     -1.468      1.475      0.000     -5.000    
                      -1.085      0.000      0.000      0.000     -1.221    

                      -2.500      9000.      9000.      0.000      0.000    
                     -0.5672     -6.248     -4.737     -7.327      2.963    
                      -14.13     -3.050      1018.      0.000      5003.    

                       6174.      5698.      6070.      8647.      1903.    
                       2445.     0.9930E-01-0.6726E-01  0.000    -0.4801    
                     -0.7189E-01-0.1270    -0.1266    -0.2151     0.7061E-02

                      -1.096    -0.2866E-01  0.000    -0.4949E-01 0.2181E-01
                      0.8541E-01 0.4836E-01-0.1622E-01-0.7894E-01 0.1460    
                     -0.2248E-01-0.4591E-01-0.1036    -0.3293      0.000    

                     -0.6883     -1.504     -2.000     -3.000    -0.3624    
                      0.1069      9.226      9.135    -0.2000E+05 -4.000    
                     -0.4904    -0.6107      9.372      8.425    -0.2000E+05

                      -4.000     0.1108E-01-0.7210      8.794      9.059    
                     -0.3000E+05 -7.000    -0.5533    -0.5281      9.410    
                       8.421    -0.3000E+05 -7.000    

   39    253.27        1.806     -1.201      1.806     -102.6     0.8055    
                      0.6731      2.000     -99.70      3.811    -0.1311    
                       1.691     -1.468      1.475      0.000     -5.000    
                      -1.085      0.000      0.000      0.000     -1.221    

                      -2.500      9000.      9000.      0.000      0.000    
                     -0.5672     -6.248     -4.737     -7.327      2.963    
                      -14.13     -3.050      1018.      0.000      5003.    

                       6174.      5698.      6070.      8647.      1903.    
                       2445.     0.9930E-01-0.6726E-01  0.000    -0.4801    
                     -0.7189E-01-0.1270    -0.1266    -0.2151     0.7061E-02

                      -1.596     0.4713      0.000    -0.4949E-01 0.2181E-01
                      0.8541E-01 0.4836E-01-0.1622E-01-0.7894E-01 0.1460    
                     -0.2248E-01-0.4591E-01-0.1036    -0.3293      0.000    

                     -0.6883     -1.504     -2.000     -3.000    -0.3624    
                      0.1069      9.226      9.135    -0.2000E+05 -4.000    
                     -0.4904    -0.6107      9.372      8.425    -0.2000E+05

                      -4.000     0.1108E-01-0.7210      8.794      9.059    
                     -0.3000E+05 -7.000    -0.5533    -0.5281      9.410    
                       8.421    -0.3000E+05 -7.000    

   40    244.43        1.806     -1.201      1.806     -102.6     0.8055    
                      0.6731      2.000     -99.70      3.811    -0.1311    
                       1.691     -1.468      1.475      0.000     -5.000    
                      -1.085      0.000      0.000      0.000     -1.221    

                      -2.500      9000.      9000.      0.000      0.000    
                     -0.5672     -6.248     -4.737     -7.327      2.963    
                      -14.13     -3.050      1018.      0.000      5003.    

                       6174.      5698.      6070.      8647.      1903.    
                       2445.     0.9930E-01-0.6726E-01  0.000    -0.4801    
                     -0.7189E-01-0.1270    -0.1266    -0.2151     0.7061E-02

                      -1.596    -0.2866E-01  0.000     0.2505     0.2181E-01
                      0.8541E-01 0.4836E-01-0.1622E-01-0.7894E-01 0.1460    
                     -0.2248E-01-0.4591E-01-0.1036    -0.3293      0.000    

                     -0.6883     -1.504     -2.000     -3.000    -0.3624    
                      0.1069      9.226      9.135    -0.2000E+05 -4.000    
                     -0.4904    -0.6107      9.372      8.425    -0.2000E+05

                      -4.000     0.1108E-01-0.7210      8.794      9.059    
                     -0.3000E+05 -7.000    -0.5533    -0.5281      9.410    
                       8.421    -0.3000E+05 -7.000    

   41    297.61        1.806     -1.201      1.806     -102.6     0.8055    
                      0.6731      2.000     -99.70      3.811    -0.1311    
                       1.691     -1.468      1.475      0.000     -5.000    
                      -1.085      0.000      0.000      0.000     -1.221    

                      -2.500      9000.      9000.      0.000      0.000    
                     -0.5672     -6.248     -4.737     -7.327      2.963    
                      -14.13     -3.050      1018.      0.000      5003.    

                       6174.      5698.      6070.      8647.      1903.    
                       2445.     0.9930E-01-0.6726E-01  0.000    -0.4801    
                     -0.7189E-01-0.1270    -0.1266    -0.2151     0.7061E-02

                      -1.596    -0.2866E-01  0.000    -0.4949E-01 0.3218    
                      0.8541E-01 0.4836E-01-0.1622E-01-0.7894E-01 0.1460    
                     -0.2248E-01-0.4591E-01-0.1036    -0.3293      0.000    

                     -0.6883     -1.504     -2.000     -3.000    -0.3624    
                      0.1069      9.226      9.135    -0.2000E+05 -4.000    
                     -0.4904    -0.6107      9.372      8.425    -0.2000E+05

                      -4.000     0.1108E-01-0.7210      8.794      9.059    
                     -0.3000E+05 -7.000    -0.5533    -0.5281      9.410    
                       8.421    -0.3000E+05 -7.000    

   42    267.20        1.806     -1.201      1.806     -102.6     0.8055    
                      0.6731      2.000     -99.70      3.811    -0.1311    
                       1.691     -1.468      1.475      0.000     -5.000    
                      -1.085      0.000      0.000      0.000     -1.221    

                      -2.500      9000.      9000.      0.000      0.000    
                     -0.5672     -6.248     -4.737     -7.327      2.963    
                      -14.13     -3.050      1018.      0.000      5003.    

                       6174.      5698.      6070.      8647.      1903.    
                       2445.     0.9930E-01-0.6726E-01  0.000    -0.4801    
                     -0.7189E-01-0.1270    -0.1266    -0.2151     0.7061E-02

                      -1.596    -0.2866E-01  0.000    -0.4949E-01 0.2181E-01
                      0.8541E-01 0.3484    -0.1622E-01-0.7894E-01 0.1460    
                     -0.2248E-01-0.4591E-01-0.1036    -0.3293      0.000    

                     -0.6883     -1.504     -2.000     -3.000    -0.3624    
                      0.1069      9.226      9.135    -0.2000E+05 -4.000    
                     -0.4904    -0.6107      9.372      8.425    -0.2000E+05

                      -4.000     0.1108E-01-0.7210      8.794      9.059    
                     -0.3000E+05 -7.000    -0.5533    -0.5281      9.410    
                       8.421    -0.3000E+05 -7.000    

   43    262.72        1.806     -1.201      1.806     -102.6     0.8055    
                      0.6731      2.000     -99.70      3.811    -0.1311    
                       1.691     -1.468      1.475      0.000     -5.000    
                      -1.085      0.000      0.000      0.000     -1.221    

                      -2.500      9000.      9000.      0.000      0.000    
                     -0.5672     -6.248     -4.737     -7.327      2.963    
                      -14.13     -3.050      1018.      0.000      5003.    

                       6174.      5698.      6070.      8647.      1903.    
                       2445.     0.9930E-01-0.6726E-01  0.000    -0.4801    
                     -0.7189E-01-0.1270    -0.1266    -0.2151     0.7061E-02

                      -1.596    -0.2866E-01  0.000    -0.4949E-01 0.2181E-01
                      0.8541E-01 0.4836E-01 0.2838    -0.7894E-01 0.1460    
                     -0.2248E-01-0.4591E-01-0.1036    -0.3293      0.000    

                     -0.6883     -1.504     -2.000     -3.000    -0.3624    
                      0.1069      9.226      9.135    -0.2000E+05 -4.000    
                     -0.4904    -0.6107      9.372      8.425    -0.2000E+05

                      -4.000     0.1108E-01-0.7210      8.794      9.059    
                     -0.3000E+05 -7.000    -0.5533    -0.5281      9.410    
                       8.421    -0.3000E+05 -7.000    

   44    256.04        1.806     -1.201      1.806     -102.6     0.8055    
                      0.6731      2.000     -99.70      3.811    -0.1311    
                       1.691     -1.468      1.475      0.000     -5.000    
                      -1.085      0.000      0.000      0.000     -1.221    

                      -2.500      9000.      9000.      0.000      0.000    
                     -0.5672     -6.248     -4.737     -7.327      2.963    
                      -14.13     -3.050      1018.      0.000      5003.    

                       6174.      5698.      6070.      8647.      1903.    
                       2445.     0.9930E-01-0.6726E-01  0.000    -0.4801    
                     -0.7189E-01-0.1270    -0.1266    -0.2151     0.7061E-02

                      -1.596    -0.2866E-01  0.000    -0.4949E-01 0.2181E-01
                      0.8541E-01 0.4836E-01-0.1622E-01 0.2211     0.1460    
                     -0.2248E-01-0.4591E-01-0.1036    -0.3293      0.000    

                     -0.6883     -1.504     -2.000     -3.000    -0.3624    
                      0.1069      9.226      9.135    -0.2000E+05 -4.000    
                     -0.4904    -0.6107      9.372      8.425    -0.2000E+05

                      -4.000     0.1108E-01-0.7210      8.794      9.059    
                     -0.3000E+05 -7.000    -0.5533    -0.5281      9.410    
                       8.421    -0.3000E+05 -7.000    

   45    240.88        1.806     -1.201      1.806     -102.6     0.8055    
                      0.6731      2.000     -99.70      3.811    -0.1311    
                       1.691     -1.468      1.475      0.000     -5.000    
                      -1.085      0.000      0.000      0.000     -1.221    

                      -2.500      9000.      9000.      0.000      0.000    
                     -0.5672     -6.248     -4.737     -7.327      2.963    
                      -14.13     -3.050      1018.      0.000      5003.    

                       6174.      5698.      6070.      8647.      1903.    
                       2445.     0.9930E-01-0.6726E-01  0.000    -0.4801    
                     -0.7189E-01-0.1270    -0.1266    -0.2151     0.7061E-02

                      -1.596    -0.2866E-01  0.000    -0.4949E-01 0.2181E-01
                      0.8541E-01 0.4836E-01-0.1622E-01-0.7894E-01 0.4460    
                     -0.2248E-01-0.4591E-01-0.1036    -0.3293      0.000    

                     -0.6883     -1.504     -2.000     -3.000    -0.3624    
                      0.1069      9.226      9.135    -0.2000E+05 -4.000    
                     -0.4904    -0.6107      9.372      8.425    -0.2000E+05

                      -4.000     0.1108E-01-0.7210      8.794      9.059    
                     -0.3000E+05 -7.000    -0.5533    -0.5281      9.410    
                       8.421    -0.3000E+05 -7.000    

   46    246.93        1.806     -1.201      1.806     -102.6     0.8055    
                      0.6731      2.000     -99.70      3.811    -0.1311    
                       1.691     -1.468      1.475      0.000     -5.000    
                      -1.085      0.000      0.000      0.000     -1.221    

                      -2.500      9000.      9000.      0.000      0.000    
                     -0.5672     -6.248     -4.737     -7.327      2.963    
                      -14.13     -3.050      1018.      0.000      5003.    

                       6174.      5698.      6070.      8647.      1903.    
                       2445.     0.9930E-01-0.6726E-01  0.000    -0.4801    
                     -0.7189E-01-0.1270    -0.1266    -0.2151     0.7061E-02

                      -1.596    -0.2866E-01  0.000    -0.4949E-01 0.2181E-01
                      0.8541E-01 0.4836E-01-0.1622E-01-0.7894E-01 0.1460    
                      0.2775    -0.4591E-01-0.1036    -0.3293      0.000    

                     -0.6883     -1.504     -2.000     -3.000    -0.3624    
                      0.1069      9.226      9.135    -0.2000E+05 -4.000    
                     -0.4904    -0.6107      9.372      8.425    -0.2000E+05

                      -4.000     0.1108E-01-0.7210      8.794      9.059    
                     -0.3000E+05 -7.000    -0.5533    -0.5281      9.410    
                       8.421    -0.3000E+05 -7.000    

   47    245.61        1.806     -1.201      1.806     -102.6     0.8055    
                      0.6731      2.000     -99.70      3.811    -0.1311    
                       1.691     -1.468      1.475      0.000     -5.000    
                      -1.085      0.000      0.000      0.000     -1.221    

                      -2.500      9000.      9000.      0.000      0.000    
                     -0.5672     -6.248     -4.737     -7.327      2.963    
                      -14.13     -3.050      1018.      0.000      5003.    

                       6174.      5698.      6070.      8647.      1903.    
                       2445.     0.9930E-01-0.6726E-01  0.000    -0.4801    
                     -0.7189E-01-0.1270    -0.1266    -0.2151     0.7061E-02

                      -1.596    -0.2866E-01  0.000    -0.4949E-01 0.2181E-01
                      0.8541E-01 0.4836E-01-0.1622E-01-0.7894E-01 0.1460    
                     -0.2248E-01 0.2541    -0.1036    -0.3293      0.000    

                     -0.6883     -1.504     -2.000     -3.000    -0.3624    
                      0.1069      9.226      9.135    -0.2000E+05 -4.000    
                     -0.4904    -0.6107      9.372      8.425    -0.2000E+05

                      -4.000     0.1108E-01-0.7210      8.794      9.059    
                     -0.3000E+05 -7.000    -0.5533    -0.5281      9.410    
                       8.421    -0.3000E+05 -7.000    

   48    246.21        1.806     -1.201      1.806     -102.6     0.8055    
                      0.6731      2.000     -99.70      3.811    -0.1311    
                       1.691     -1.468      1.475      0.000     -5.000    
                      -1.085      0.000      0.000      0.000     -1.221    

                      -2.500      9000.      9000.      0.000      0.000    
                     -0.5672     -6.248     -4.737     -7.327      2.963    
                      -14.13     -3.050      1018.      0.000      5003.    

                       6174.      5698.      6070.      8647.      1903.    
                       2445.     0.9930E-01-0.6726E-01  0.000    -0.4801    
                     -0.7189E-01-0.1270    -0.1266    -0.2151     0.7061E-02

                      -1.596    -0.2866E-01  0.000    -0.4949E-01 0.2181E-01
                      0.8541E-01 0.4836E-01-0.1622E-01-0.7894E-01 0.1460    
                     -0.2248E-01-0.4591E-01 0.1964    -0.3293      0.000    

                     -0.6883     -1.504     -2.000     -3.000    -0.3624    
                      0.1069      9.226      9.135    -0.2000E+05 -4.000    
                     -0.4904    -0.6107      9.372      8.425    -0.2000E+05

                      -4.000     0.1108E-01-0.7210      8.794      9.059    
                     -0.3000E+05 -7.000    -0.5533    -0.5281      9.410    
                       8.421    -0.3000E+05 -7.000    

   49    247.80        1.806     -1.201      1.806     -102.6     0.8055    
                      0.6731      2.000     -99.70      3.811    -0.1311    
                       1.691     -1.468      1.475      0.000     -5.000    
                      -1.085      0.000      0.000      0.000     -1.221    

                      -2.500      9000.      9000.      0.000      0.000    
                     -0.5672     -6.248     -4.737     -7.327      2.963    
                      -14.13     -3.050      1018.      0.000      5003.    

                       6174.      5698.      6070.      8647.      1903.    
                       2445.     0.9930E-01-0.6726E-01  0.000    -0.4801    
                     -0.7189E-01-0.1270    -0.1266    -0.2151     0.7061E-02

                      -1.596    -0.2866E-01  0.000    -0.4949E-01 0.2181E-01
                      0.8541E-01 0.4836E-01-0.1622E-01-0.7894E-01 0.1460    
                     -0.2248E-01-0.4591E-01-0.1036    -0.2926E-01  0.000    

                     -0.6883     -1.504     -2.000     -3.000    -0.3624    
                      0.1069      9.226      9.135    -0.2000E+05 -4.000    
                     -0.4904    -0.6107      9.372      8.425    -0.2000E+05

                      -4.000     0.1108E-01-0.7210      8.794      9.059    
                     -0.3000E+05 -7.000    -0.5533    -0.5281      9.410    
                       8.421    -0.3000E+05 -7.000    

   50    316.25        1.806     -1.201      1.806     -102.6     0.8055    
                      0.6731      2.000     -99.70      3.811    -0.1311    
                       1.691     -1.468      1.475      0.000     -5.000    
                      -1.085      0.000      0.000      0.000     -1.221    

                      -2.500      9000.      9000.      0.000      0.000    
                     -0.5672     -6.248     -4.737     -7.327      2.963    
                      -14.13     -3.050      1018.      0.000      5003.    

                       6174.      5698.      6070.      8647.      1903.    
                       2445.     0.9930E-01-0.6726E-01  0.000    -0.4801    
                     -0.7189E-01-0.1270    -0.1266    -0.2151     0.7061E-02

                      -1.596    -0.2866E-01  0.000    -0.4949E-01 0.2181E-01
                      0.8541E-01 0.4836E-01-0.1622E-01-0.7894E-01 0.1460    
                     -0.2248E-01-0.4591E-01-0.1036    -0.3293      0.000    

                      0.3117     -1.504     -2.000     -3.000    -0.3624    
                      0.1069      9.226      9.135    -0.2000E+05 -4.000    
                     -0.4904    -0.6107      9.372      8.425    -0.2000E+05

                      -4.000     0.1108E-01-0.7210      8.794      9.059    
                     -0.3000E+05 -7.000    -0.5533    -0.5281      9.410    
                       8.421    -0.3000E+05 -7.000    

   51    317.40        1.806     -1.201      1.806     -102.6     0.8055    
                      0.6731      2.000     -99.70      3.811    -0.1311    
                       1.691     -1.468      1.475      0.000     -5.000    
                      -1.085      0.000      0.000      0.000     -1.221    

                      -2.500      9000.      9000.      0.000      0.000    
                     -0.5672     -6.248     -4.737     -7.327      2.963    
                      -14.13     -3.050      1018.      0.000      5003.    

                       6174.      5698.      6070.      8647.      1903.    
                       2445.     0.9930E-01-0.6726E-01  0.000    -0.4801    
                     -0.7189E-01-0.1270    -0.1266    -0.2151     0.7061E-02

                      -1.596    -0.2866E-01  0.000    -0.4949E-01 0.2181E-01
                      0.8541E-01 0.4836E-01-0.1622E-01-0.7894E-01 0.1460    
                     -0.2248E-01-0.4591E-01-0.1036    -0.3293      0.000    

                     -0.6883    -0.5039     -2.000     -3.000    -0.3624    
                      0.1069      9.226      9.135    -0.2000E+05 -4.000    
                     -0.4904    -0.6107      9.372      8.425    -0.2000E+05

                      -4.000     0.1108E-01-0.7210      8.794      9.059    
                     -0.3000E+05 -7.000    -0.5533    -0.5281      9.410    
                       8.421    -0.3000E+05 -7.000    

   52    338.93        1.806     -1.201      1.806     -102.6     0.8055    
                      0.6731      2.000     -99.70      3.811    -0.1311    
                       1.691     -1.468      1.475      0.000     -5.000    
                      -1.085      0.000      0.000      0.000     -1.221    

                      -2.500      9000.      9000.      0.000      0.000    
                     -0.5672     -6.248     -4.737     -7.327      2.963    
                      -14.13     -3.050      1018.      0.000      5003.    

                       6174.      5698.      6070.      8647.      1903.    
                       2445.     0.9930E-01-0.6726E-01  0.000    -0.4801    
                     -0.7189E-01-0.1270    -0.1266    -0.2151     0.7061E-02

                      -1.596    -0.2866E-01  0.000    -0.4949E-01 0.2181E-01
                      0.8541E-01 0.4836E-01-0.1622E-01-0.7894E-01 0.1460    
                     -0.2248E-01-0.4591E-01-0.1036    -0.3293      0.000    

                     -0.6883     -1.504     -1.000     -3.000    -0.3624    
                      0.1069      9.226      9.135    -0.2000E+05 -4.000    
                     -0.4904    -0.6107      9.372      8.425    -0.2000E+05

                      -4.000     0.1108E-01-0.7210      8.794      9.059    
                     -0.3000E+05 -7.000    -0.5533    -0.5281      9.410    
                       8.421    -0.3000E+05 -7.000    

   53    176.61        1.806     -1.201      1.806     -102.6     0.8055    
                      0.6731      2.000     -99.70      3.811    -0.1311    
                       1.691     -1.468      1.475      0.000     -5.000    
                      -1.085      0.000      0.000      0.000     -1.221    

                      -2.500      9000.      9000.      0.000      0.000    
                     -0.5672     -6.248     -4.737     -7.327      2.963    
                      -14.13     -3.050      1018.      0.000      5003.    

                       6174.      5698.      6070.      8647.      1903.    
                       2445.     0.9930E-01-0.6726E-01  0.000    -0.4801    
                     -0.7189E-01-0.1270    -0.1266    -0.2151     0.7061E-02

                      -1.596    -0.2866E-01  0.000    -0.4949E-01 0.2181E-01
                      0.8541E-01 0.4836E-01-0.1622E-01-0.7894E-01 0.1460    
                     -0.2248E-01-0.4591E-01-0.1036    -0.3293      0.000    

                     -0.6883     -1.504     -2.000     -2.000    -0.3624    
                      0.1069      9.226      9.135    -0.2000E+05 -4.000    
                     -0.4904    -0.6107      9.372      8.425    -0.2000E+05

                      -4.000     0.1108E-01-0.7210      8.794      9.059    
                     -0.3000E+05 -7.000    -0.5533    -0.5281      9.410    
                       8.421    -0.3000E+05 -7.000    

   54    250.29        1.806     -1.201      1.806     -102.6     0.8055    
                      0.6731      2.000     -99.70      3.811    -0.1311    
                       1.691     -1.468      1.475      0.000     -5.000    
                      -1.085      0.000      0.000      0.000     -1.221    

                      -2.500      9000.      9000.      0.000      0.000    
                     -0.5672     -6.248     -4.737     -7.327      2.963    
                      -14.13     -3.050      1018.      0.000      5003.    

                       6174.      5698.      6070.      8647.      1903.    
                       2445.     0.9930E-01-0.6726E-01  0.000    -0.4801    
                     -0.7189E-01-0.1270    -0.1266    -0.2151     0.7061E-02

                      -1.596    -0.2866E-01  0.000    -0.4949E-01 0.2181E-01
                      0.8541E-01 0.4836E-01-0.1622E-01-0.7894E-01 0.1460    
                     -0.2248E-01-0.4591E-01-0.1036    -0.3293      0.000    

                     -0.6883     -1.504     -2.000     -3.000     0.6376    
                      0.1069      9.226      9.135    -0.2000E+05 -4.000    
                     -0.4904    -0.6107      9.372      8.425    -0.2000E+05

                      -4.000     0.1108E-01-0.7210      8.794      9.059    
                     -0.3000E+05 -7.000    -0.5533    -0.5281      9.410    
                       8.421    -0.3000E+05 -7.000    

   55    250.29        1.806     -1.201      1.806     -102.6     0.8055    
                      0.6731      2.000     -99.70      3.811    -0.1311    
                       1.691     -1.468      1.475      0.000     -5.000    
                      -1.085      0.000      0.000      0.000     -1.221    

                      -2.500      9000.      9000.      0.000      0.000    
                     -0.5672     -6.248     -4.737     -7.327      2.963    
                      -14.13     -3.050      1018.      0.000      5003.    

                       6174.      5698.      6070.      8647.      1903.    
                       2445.     0.9930E-01-0.6726E-01  0.000    -0.4801    
                     -0.7189E-01-0.1270    -0.1266    -0.2151     0.7061E-02

                      -1.596    -0.2866E-01  0.000    -0.4949E-01 0.2181E-01
                      0.8541E-01 0.4836E-01-0.1622E-01-0.7894E-01 0.1460    
                     -0.2248E-01-0.4591E-01-0.1036    -0.3293      0.000    

                     -0.6883     -1.504     -2.000     -3.000    -0.3624    
                       1.107      9.226      9.135    -0.2000E+05 -4.000    
                     -0.4904    -0.6107      9.372      8.425    -0.2000E+05

                      -4.000     0.1108E-01-0.7210      8.794      9.059    
                     -0.3000E+05 -7.000    -0.5533    -0.5281      9.410    
                       8.421    -0.3000E+05 -7.000    

   56    252.56        1.806     -1.201      1.806     -102.6     0.8055    
                      0.6731      2.000     -99.70      3.811    -0.1311    
                       1.691     -1.468      1.475      0.000     -5.000    
                      -1.085      0.000      0.000      0.000     -1.221    

                      -2.500      9000.      9000.      0.000      0.000    
                     -0.5672     -6.248     -4.737     -7.327      2.963    
                      -14.13     -3.050      1018.      0.000      5003.    

                       6174.      5698.      6070.      8647.      1903.    
                       2445.     0.9930E-01-0.6726E-01  0.000    -0.4801    
                     -0.7189E-01-0.1270    -0.1266    -0.2151     0.7061E-02

                      -1.596    -0.2866E-01  0.000    -0.4949E-01 0.2181E-01
                      0.8541E-01 0.4836E-01-0.1622E-01-0.7894E-01 0.1460    
                     -0.2248E-01-0.4591E-01-0.1036    -0.3293      0.000    

                     -0.6883     -1.504     -2.000     -3.000    -0.3624    
                      0.1069      9.526      9.135    -0.2000E+05 -4.000    
                     -0.4904    -0.6107      9.372      8.425    -0.2000E+05

                      -4.000     0.1108E-01-0.7210      8.794      9.059    
                     -0.3000E+05 -7.000    -0.5533    -0.5281      9.410    
                       8.421    -0.3000E+05 -7.000    

   57    256.19        1.806     -1.201      1.806     -102.6     0.8055    
                      0.6731      2.000     -99.70      3.811    -0.1311    
                       1.691     -1.468      1.475      0.000     -5.000    
                      -1.085      0.000      0.000      0.000     -1.221    

                      -2.500      9000.      9000.      0.000      0.000    
                     -0.5672     -6.248     -4.737     -7.327      2.963    
                      -14.13     -3.050      1018.      0.000      5003.    

                       6174.      5698.      6070.      8647.      1903.    
                       2445.     0.9930E-01-0.6726E-01  0.000    -0.4801    
                     -0.7189E-01-0.1270    -0.1266    -0.2151     0.7061E-02

                      -1.596    -0.2866E-01  0.000    -0.4949E-01 0.2181E-01
                      0.8541E-01 0.4836E-01-0.1622E-01-0.7894E-01 0.1460    
                     -0.2248E-01-0.4591E-01-0.1036    -0.3293      0.000    

                     -0.6883     -1.504     -2.000     -3.000    -0.3624    
                      0.1069      9.226      9.435    -0.2000E+05 -4.000    
                     -0.4904    -0.6107      9.372      8.425    -0.2000E+05

                      -4.000     0.1108E-01-0.7210      8.794      9.059    
                     -0.3000E+05 -7.000    -0.5533    -0.5281      9.410    
                       8.421    -0.3000E+05 -7.000    

   58    293.04        1.806     -1.201      1.806     -102.6     0.8055    
                      0.6731      2.000     -99.70      3.811    -0.1311    
                       1.691     -1.468      1.475      0.000     -5.000    
                      -1.085      0.000      0.000      0.000     -1.221    

                      -2.500      9000.      9000.      0.000      0.000    
                     -0.5672     -6.248     -4.737     -7.327      2.963    
                      -14.13     -3.050      1018.      0.000      5003.    

                       6174.      5698.      6070.      8647.      1903.    
                       2445.     0.9930E-01-0.6726E-01  0.000    -0.4801    
                     -0.7189E-01-0.1270    -0.1266    -0.2151     0.7061E-02

                      -1.596    -0.2866E-01  0.000    -0.4949E-01 0.2181E-01
                      0.8541E-01 0.4836E-01-0.1622E-01-0.7894E-01 0.1460    
                     -0.2248E-01-0.4591E-01-0.1036    -0.3293      0.000    

                     -0.6883     -1.504     -2.000     -3.000    -0.3624    
                      0.1069      9.226      9.135    -0.4000E+05 -4.000    
                     -0.4904    -0.6107      9.372      8.425    -0.2000E+05

                      -4.000     0.1108E-01-0.7210      8.794      9.059    
                     -0.3000E+05 -7.000    -0.5533    -0.5281      9.410    
                       8.421    -0.3000E+05 -7.000    

   59    247.13        1.806     -1.201      1.806     -102.6     0.8055    
                      0.6731      2.000     -99.70      3.811    -0.1311    
                       1.691     -1.468      1.475      0.000     -5.000    
                      -1.085      0.000      0.000      0.000     -1.221    

                      -2.500      9000.      9000.      0.000      0.000    
                     -0.5672     -6.248     -4.737     -7.327      2.963    
                      -14.13     -3.050      1018.      0.000      5003.    

                       6174.      5698.      6070.      8647.      1903.    
                       2445.     0.9930E-01-0.6726E-01  0.000    -0.4801    
                     -0.7189E-01-0.1270    -0.1266    -0.2151     0.7061E-02

                      -1.596    -0.2866E-01  0.000    -0.4949E-01 0.2181E-01
                      0.8541E-01 0.4836E-01-0.1622E-01-0.7894E-01 0.1460    
                     -0.2248E-01-0.4591E-01-0.1036    -0.3293      0.000    

                     -0.6883     -1.504     -2.000     -3.000    -0.3624    
                      0.1069      9.226      9.135    -0.2000E+05 -4.000    
                      0.5096    -0.6107      9.372      8.425    -0.2000E+05

                      -4.000     0.1108E-01-0.7210      8.794      9.059    
                     -0.3000E+05 -7.000    -0.5533    -0.5281      9.410    
                       8.421    -0.3000E+05 -7.000    

   60    246.95        1.806     -1.201      1.806     -102.6     0.8055    
                      0.6731      2.000     -99.70      3.811    -0.1311    
                       1.691     -1.468      1.475      0.000     -5.000    
                      -1.085      0.000      0.000      0.000     -1.221    

                      -2.500      9000.      9000.      0.000      0.000    
                     -0.5672     -6.248     -4.737     -7.327      2.963    
                      -14.13     -3.050      1018.      0.000      5003.    

                       6174.      5698.      6070.      8647.      1903.    
                       2445.     0.9930E-01-0.6726E-01  0.000    -0.4801    
                     -0.7189E-01-0.1270    -0.1266    -0.2151     0.7061E-02

                      -1.596    -0.2866E-01  0.000    -0.4949E-01 0.2181E-01
                      0.8541E-01 0.4836E-01-0.1622E-01-0.7894E-01 0.1460    
                     -0.2248E-01-0.4591E-01-0.1036    -0.3293      0.000    

                     -0.6883     -1.504     -2.000     -3.000    -0.3624    
                      0.1069      9.226      9.135    -0.2000E+05 -4.000    
                     -0.4904     0.3893      9.372      8.425    -0.2000E+05

                      -4.000     0.1108E-01-0.7210      8.794      9.059    
                     -0.3000E+05 -7.000    -0.5533    -0.5281      9.410    
                       8.421    -0.3000E+05 -7.000    

   61    251.46        1.806     -1.201      1.806     -102.6     0.8055    
                      0.6731      2.000     -99.70      3.811    -0.1311    
                       1.691     -1.468      1.475      0.000     -5.000    
                      -1.085      0.000      0.000      0.000     -1.221    

                      -2.500      9000.      9000.      0.000      0.000    
                     -0.5672     -6.248     -4.737     -7.327      2.963    
                      -14.13     -3.050      1018.      0.000      5003.    

                       6174.      5698.      6070.      8647.      1903.    
                       2445.     0.9930E-01-0.6726E-01  0.000    -0.4801    
                     -0.7189E-01-0.1270    -0.1266    -0.2151     0.7061E-02

                      -1.596    -0.2866E-01  0.000    -0.4949E-01 0.2181E-01
                      0.8541E-01 0.4836E-01-0.1622E-01-0.7894E-01 0.1460    
                     -0.2248E-01-0.4591E-01-0.1036    -0.3293      0.000    

                     -0.6883     -1.504     -2.000     -3.000    -0.3624    
                      0.1069      9.226      9.135    -0.2000E+05 -4.000    
                     -0.4904    -0.6107      9.672      8.425    -0.2000E+05

                      -4.000     0.1108E-01-0.7210      8.794      9.059    
                     -0.3000E+05 -7.000    -0.5533    -0.5281      9.410    
                       8.421    -0.3000E+05 -7.000    

   62    243.05        1.806     -1.201      1.806     -102.6     0.8055    
                      0.6731      2.000     -99.70      3.811    -0.1311    
                       1.691     -1.468      1.475      0.000     -5.000    
                      -1.085      0.000      0.000      0.000     -1.221    

                      -2.500      9000.      9000.      0.000      0.000    
                     -0.5672     -6.248     -4.737     -7.327      2.963    
                      -14.13     -3.050      1018.      0.000      5003.    

                       6174.      5698.      6070.      8647.      1903.    
                       2445.     0.9930E-01-0.6726E-01  0.000    -0.4801    
                     -0.7189E-01-0.1270    -0.1266    -0.2151     0.7061E-02

                      -1.596    -0.2866E-01  0.000    -0.4949E-01 0.2181E-01
                      0.8541E-01 0.4836E-01-0.1622E-01-0.7894E-01 0.1460    
                     -0.2248E-01-0.4591E-01-0.1036    -0.3293      0.000    

                     -0.6883     -1.504     -2.000     -3.000    -0.3624    
                      0.1069      9.226      9.135    -0.2000E+05 -4.000    
                     -0.4904    -0.6107      9.372      8.725    -0.2000E+05

                      -4.000     0.1108E-01-0.7210      8.794      9.059    
                     -0.3000E+05 -7.000    -0.5533    -0.5281      9.410    
                       8.421    -0.3000E+05 -7.000    

   63    257.18        1.806     -1.201      1.806     -102.6     0.8055    
                      0.6731      2.000     -99.70      3.811    -0.1311    
                       1.691     -1.468      1.475      0.000     -5.000    
                      -1.085      0.000      0.000      0.000     -1.221    

                      -2.500      9000.      9000.      0.000      0.000    
                     -0.5672     -6.248     -4.737     -7.327      2.963    
                      -14.13     -3.050      1018.      0.000      5003.    

                       6174.      5698.      6070.      8647.      1903.    
                       2445.     0.9930E-01-0.6726E-01  0.000    -0.4801    
                     -0.7189E-01-0.1270    -0.1266    -0.2151     0.7061E-02

                      -1.596    -0.2866E-01  0.000    -0.4949E-01 0.2181E-01
                      0.8541E-01 0.4836E-01-0.1622E-01-0.7894E-01 0.1460    
                     -0.2248E-01-0.4591E-01-0.1036    -0.3293      0.000    

                     -0.6883     -1.504     -2.000     -3.000    -0.3624    
                      0.1069      9.226      9.135    -0.2000E+05 -4.000    
                     -0.4904    -0.6107      9.372      8.425    -0.4000E+05

                      -4.000     0.1108E-01-0.7210      8.794      9.059    
                     -0.3000E+05 -7.000    -0.5533    -0.5281      9.410    
                       8.421    -0.3000E+05 -7.000    

   64    256.41        1.806     -1.201      1.806     -102.6     0.8055    
                      0.6731      2.000     -99.70      3.811    -0.1311    
                       1.691     -1.468      1.475      0.000     -5.000    
                      -1.085      0.000      0.000      0.000     -1.221    

                      -2.500      9000.      9000.      0.000      0.000    
                     -0.5672     -6.248     -4.737     -7.327      2.963    
                      -14.13     -3.050      1018.      0.000      5003.    

                       6174.      5698.      6070.      8647.      1903.    
                       2445.     0.9930E-01-0.6726E-01  0.000    -0.4801    
                     -0.7189E-01-0.1270    -0.1266    -0.2151     0.7061E-02

                      -1.596    -0.2866E-01  0.000    -0.4949E-01 0.2181E-01
                      0.8541E-01 0.4836E-01-0.1622E-01-0.7894E-01 0.1460    
                     -0.2248E-01-0.4591E-01-0.1036    -0.3293      0.000    

                     -0.6883     -1.504     -2.000     -3.000    -0.3624    
                      0.1069      9.226      9.135    -0.2000E+05 -4.000    
                     -0.4904    -0.6107      9.372      8.425    -0.2000E+05

                      -4.000      1.011    -0.7210      8.794      9.059    
                     -0.3000E+05 -7.000    -0.5533    -0.5281      9.410    
                       8.421    -0.3000E+05 -7.000    

   65    252.99        1.806     -1.201      1.806     -102.6     0.8055    
                      0.6731      2.000     -99.70      3.811    -0.1311    
                       1.691     -1.468      1.475      0.000     -5.000    
                      -1.085      0.000      0.000      0.000     -1.221    

                      -2.500      9000.      9000.      0.000      0.000    
                     -0.5672     -6.248     -4.737     -7.327      2.963    
                      -14.13     -3.050      1018.      0.000      5003.    

                       6174.      5698.      6070.      8647.      1903.    
                       2445.     0.9930E-01-0.6726E-01  0.000    -0.4801    
                     -0.7189E-01-0.1270    -0.1266    -0.2151     0.7061E-02

                      -1.596    -0.2866E-01  0.000    -0.4949E-01 0.2181E-01
                      0.8541E-01 0.4836E-01-0.1622E-01-0.7894E-01 0.1460    
                     -0.2248E-01-0.4591E-01-0.1036    -0.3293      0.000    

                     -0.6883     -1.504     -2.000     -3.000    -0.3624    
                      0.1069      9.226      9.135    -0.2000E+05 -4.000    
                     -0.4904    -0.6107      9.372      8.425    -0.2000E+05

                      -4.000     0.1108E-01 0.2790      8.794      9.059    
                     -0.3000E+05 -7.000    -0.5533    -0.5281      9.410    
                       8.421    -0.3000E+05 -7.000    

   66    251.16        1.806     -1.201      1.806     -102.6     0.8055    
                      0.6731      2.000     -99.70      3.811    -0.1311    
                       1.691     -1.468      1.475      0.000     -5.000    
                      -1.085      0.000      0.000      0.000     -1.221    

                      -2.500      9000.      9000.      0.000      0.000    
                     -0.5672     -6.248     -4.737     -7.327      2.963    
                      -14.13     -3.050      1018.      0.000      5003.    

                       6174.      5698.      6070.      8647.      1903.    
                       2445.     0.9930E-01-0.6726E-01  0.000    -0.4801    
                     -0.7189E-01-0.1270    -0.1266    -0.2151     0.7061E-02

                      -1.596    -0.2866E-01  0.000    -0.4949E-01 0.2181E-01
                      0.8541E-01 0.4836E-01-0.1622E-01-0.7894E-01 0.1460    
                     -0.2248E-01-0.4591E-01-0.1036    -0.3293      0.000    

                     -0.6883     -1.504     -2.000     -3.000    -0.3624    
                      0.1069      9.226      9.135    -0.2000E+05 -4.000    
                     -0.4904    -0.6107      9.372      8.425    -0.2000E+05

                      -4.000     0.1108E-01-0.7210      9.094      9.059    
                     -0.3000E+05 -7.000    -0.5533    -0.5281      9.410    
                       8.421    -0.3000E+05 -7.000    

   67    258.14        1.806     -1.201      1.806     -102.6     0.8055    
                      0.6731      2.000     -99.70      3.811    -0.1311    
                       1.691     -1.468      1.475      0.000     -5.000    
                      -1.085      0.000      0.000      0.000     -1.221    

                      -2.500      9000.      9000.      0.000      0.000    
                     -0.5672     -6.248     -4.737     -7.327      2.963    
                      -14.13     -3.050      1018.      0.000      5003.    

                       6174.      5698.      6070.      8647.      1903.    
                       2445.     0.9930E-01-0.6726E-01  0.000    -0.4801    
                     -0.7189E-01-0.1270    -0.1266    -0.2151     0.7061E-02

                      -1.596    -0.2866E-01  0.000    -0.4949E-01 0.2181E-01
                      0.8541E-01 0.4836E-01-0.1622E-01-0.7894E-01 0.1460    
                     -0.2248E-01-0.4591E-01-0.1036    -0.3293      0.000    

                     -0.6883     -1.504     -2.000     -3.000    -0.3624    
                      0.1069      9.226      9.135    -0.2000E+05 -4.000    
                     -0.4904    -0.6107      9.372      8.425    -0.2000E+05

                      -4.000     0.1108E-01-0.7210      8.794      9.359    
                     -0.3000E+05 -7.000    -0.5533    -0.5281      9.410    
                       8.421    -0.3000E+05 -7.000    

   68    243.86        1.806     -1.201      1.806     -102.6     0.8055    
                      0.6731      2.000     -99.70      3.811    -0.1311    
                       1.691     -1.468      1.475      0.000     -5.000    
                      -1.085      0.000      0.000      0.000     -1.221    

                      -2.500      9000.      9000.      0.000      0.000    
                     -0.5672     -6.248     -4.737     -7.327      2.963    
                      -14.13     -3.050      1018.      0.000      5003.    

                       6174.      5698.      6070.      8647.      1903.    
                       2445.     0.9930E-01-0.6726E-01  0.000    -0.4801    
                     -0.7189E-01-0.1270    -0.1266    -0.2151     0.7061E-02

                      -1.596    -0.2866E-01  0.000    -0.4949E-01 0.2181E-01
                      0.8541E-01 0.4836E-01-0.1622E-01-0.7894E-01 0.1460    
                     -0.2248E-01-0.4591E-01-0.1036    -0.3293      0.000    

                     -0.6883     -1.504     -2.000     -3.000    -0.3624    
                      0.1069      9.226      9.135    -0.2000E+05 -4.000    
                     -0.4904    -0.6107      9.372      8.425    -0.2000E+05

                      -4.000     0.1108E-01-0.7210      8.794      9.059    
                     -0.6000E+05 -7.000    -0.5533    -0.5281      9.410    
                       8.421    -0.3000E+05 -7.000    

   69    254.89        1.806     -1.201      1.806     -102.6     0.8055    
                      0.6731      2.000     -99.70      3.811    -0.1311    
                       1.691     -1.468      1.475      0.000     -5.000    
                      -1.085      0.000      0.000      0.000     -1.221    

                      -2.500      9000.      9000.      0.000      0.000    
                     -0.5672     -6.248     -4.737     -7.327      2.963    
                      -14.13     -3.050      1018.      0.000      5003.    

                       6174.      5698.      6070.      8647.      1903.    
                       2445.     0.9930E-01-0.6726E-01  0.000    -0.4801    
                     -0.7189E-01-0.1270    -0.1266    -0.2151     0.7061E-02

                      -1.596    -0.2866E-01  0.000    -0.4949E-01 0.2181E-01
                      0.8541E-01 0.4836E-01-0.1622E-01-0.7894E-01 0.1460    
                     -0.2248E-01-0.4591E-01-0.1036    -0.3293      0.000    

                     -0.6883     -1.504     -2.000     -3.000    -0.3624    
                      0.1069      9.226      9.135    -0.2000E+05 -4.000    
                     -0.4904    -0.6107      9.372      8.425    -0.2000E+05

                      -4.000     0.1108E-01-0.7210      8.794      9.059    
                     -0.3000E+05 -7.000     0.4467    -0.5281      9.410    
                       8.421    -0.3000E+05 -7.000    

   70    250.87        1.806     -1.201      1.806     -102.6     0.8055    
                      0.6731      2.000     -99.70      3.811    -0.1311    
                       1.691     -1.468      1.475      0.000     -5.000    
                      -1.085      0.000      0.000      0.000     -1.221    

                      -2.500      9000.      9000.      0.000      0.000    
                     -0.5672     -6.248     -4.737     -7.327      2.963    
                      -14.13     -3.050      1018.      0.000      5003.    

                       6174.      5698.      6070.      8647.      1903.    
                       2445.     0.9930E-01-0.6726E-01  0.000    -0.4801    
                     -0.7189E-01-0.1270    -0.1266    -0.2151     0.7061E-02

                      -1.596    -0.2866E-01  0.000    -0.4949E-01 0.2181E-01
                      0.8541E-01 0.4836E-01-0.1622E-01-0.7894E-01 0.1460    
                     -0.2248E-01-0.4591E-01-0.1036    -0.3293      0.000    

                     -0.6883     -1.504     -2.000     -3.000    -0.3624    
                      0.1069      9.226      9.135    -0.2000E+05 -4.000    
                     -0.4904    -0.6107      9.372      8.425    -0.2000E+05

                      -4.000     0.1108E-01-0.7210      8.794      9.059    
                     -0.3000E+05 -7.000    -0.5533     0.4719      9.410    
                       8.421    -0.3000E+05 -7.000    

   71    250.81        1.806     -1.201      1.806     -102.6     0.8055    
                      0.6731      2.000     -99.70      3.811    -0.1311    
                       1.691     -1.468      1.475      0.000     -5.000    
                      -1.085      0.000      0.000      0.000     -1.221    

                      -2.500      9000.      9000.      0.000      0.000    
                     -0.5672     -6.248     -4.737     -7.327      2.963    
                      -14.13     -3.050      1018.      0.000      5003.    

                       6174.      5698.      6070.      8647.      1903.    
                       2445.     0.9930E-01-0.6726E-01  0.000    -0.4801    
                     -0.7189E-01-0.1270    -0.1266    -0.2151     0.7061E-02

                      -1.596    -0.2866E-01  0.000    -0.4949E-01 0.2181E-01
                      0.8541E-01 0.4836E-01-0.1622E-01-0.7894E-01 0.1460    
                     -0.2248E-01-0.4591E-01-0.1036    -0.3293      0.000    

                     -0.6883     -1.504     -2.000     -3.000    -0.3624    
                      0.1069      9.226      9.135    -0.2000E+05 -4.000    
                     -0.4904    -0.6107      9.372      8.425    -0.2000E+05

                      -4.000     0.1108E-01-0.7210      8.794      9.059    
                     -0.3000E+05 -7.000    -0.5533    -0.5281      9.710    
                       8.421    -0.3000E+05 -7.000    

   72    250.35        1.806     -1.201      1.806     -102.6     0.8055    
                      0.6731      2.000     -99.70      3.811    -0.1311    
                       1.691     -1.468      1.475      0.000     -5.000    
                      -1.085      0.000      0.000      0.000     -1.221    

                      -2.500      9000.      9000.      0.000      0.000    
                     -0.5672     -6.248     -4.737     -7.327      2.963    
                      -14.13     -3.050      1018.      0.000      5003.    

                       6174.      5698.      6070.      8647.      1903.    
                       2445.     0.9930E-01-0.6726E-01  0.000    -0.4801    
                     -0.7189E-01-0.1270    -0.1266    -0.2151     0.7061E-02

                      -1.596    -0.2866E-01  0.000    -0.4949E-01 0.2181E-01
                      0.8541E-01 0.4836E-01-0.1622E-01-0.7894E-01 0.1460    
                     -0.2248E-01-0.4591E-01-0.1036    -0.3293      0.000    

                     -0.6883     -1.504     -2.000     -3.000    -0.3624    
                      0.1069      9.226      9.135    -0.2000E+05 -4.000    
                     -0.4904    -0.6107      9.372      8.425    -0.2000E+05

                      -4.000     0.1108E-01-0.7210      8.794      9.059    
                     -0.3000E+05 -7.000    -0.5533    -0.5281      9.410    
                       8.721    -0.3000E+05 -7.000    

   73    249.44        1.806     -1.201      1.806     -102.6     0.8055    
                      0.6731      2.000     -99.70      3.811    -0.1311    
                       1.691     -1.468      1.475      0.000     -5.000    
                      -1.085      0.000      0.000      0.000     -1.221    

                      -2.500      9000.      9000.      0.000      0.000    
                     -0.5672     -6.248     -4.737     -7.327      2.963    
                      -14.13     -3.050      1018.      0.000      5003.    

                       6174.      5698.      6070.      8647.      1903.    
                       2445.     0.9930E-01-0.6726E-01  0.000    -0.4801    
                     -0.7189E-01-0.1270    -0.1266    -0.2151     0.7061E-02

                      -1.596    -0.2866E-01  0.000    -0.4949E-01 0.2181E-01
                      0.8541E-01 0.4836E-01-0.1622E-01-0.7894E-01 0.1460    
                     -0.2248E-01-0.4591E-01-0.1036    -0.3293      0.000    

                     -0.6883     -1.504     -2.000     -3.000    -0.3624    
                      0.1069      9.226      9.135    -0.2000E+05 -4.000    
                     -0.4904    -0.6107      9.372      8.425    -0.2000E+05

                      -4.000     0.1108E-01-0.7210      8.794      9.059    
                     -0.3000E+05 -7.000    -0.5533    -0.5281      9.410    
                       8.421    -0.6000E+05 -7.000    
 finished setting up initial simplex
 count number of function evaluations which here is neval=np1          73          73

beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    75.0866      0.500000    
T0,tstep,tfreq (these do not change):             72
current SAtemp,tstepnext are:    75.0866               145
loop is:        1
neval is:       73


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      145
neval,tstepnext:       73     145

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.228570      -1.47591      -110.821       110.821       250.289       361.110    
   2  0.709707     -0.342904      -25.7475       25.7475       251.224       276.972    
   3  0.151889      -1.88460      -141.508       141.508       250.873       392.381    
   4  0.456170E-01  -3.08747      -231.828       231.828       253.404       485.232    
   5  0.882557     -0.124932      -9.38070       9.38070       248.838       258.219    
   6  0.711292     -0.340672      -25.5799       25.5799       239.039       264.619    
   7  0.241669      -1.42019      -106.637       106.637       249.306       355.944    
   8  0.682871     -0.381450      -28.6418       28.6418       251.012       279.654    
   9  0.500657     -0.691834      -51.9475       51.9475       253.828       305.776    
  10  0.494633     -0.703939      -52.8564       52.8564       248.738       301.594    
  11  0.437126     -0.827535      -62.1368       62.1368       268.071       330.208    
  12  0.462981     -0.770069      -57.8219       57.8219       285.567       343.389    
  13  0.988878     -0.111840E-01 -0.839768      0.839768       247.717       248.557    
  14  0.878158     -0.129929      -9.75593       9.75593       273.435       283.190    
  15  0.825605     -0.191638      -14.3895       14.3895       359.512       373.902    
  16  0.966665     -0.339033E-01  -2.54569       2.54569       250.277       252.823    
  17  0.340930      -1.07608      -80.7990       80.7990       249.912       330.710    
  18  0.288920      -1.24161      -93.2281       93.2281       250.286       343.514    
  19  0.442843     -0.814539      -61.1610       61.1610       250.401       311.562    
  20  0.878635     -0.129386      -9.71513       9.71513       250.289       260.004    
  21  0.198777E-01  -3.91816      -294.201       294.201       249.676       543.877    
  22  0.315829      -1.15255      -86.5413       86.5413       244.735       331.277    
  23  0.208690      -1.56690      -117.654       117.654       182.678       300.332    
  24  0.849393     -0.163234      -12.2567       12.2567       209.714       221.970    
  25  0.945818     -0.557056E-01  -4.18274       4.18274       181.022       185.204    
  26  0.567839     -0.565917      -42.4928       42.4928       187.491       229.984    
  27  0.718388     -0.330745      -24.8345       24.8345       189.837       214.671    
  28  0.115406      -2.15930      -162.134       162.134       223.887       386.021    
  29  0.659869E-01  -2.71830      -204.108       204.108       181.994       386.101    
  30  0.171393      -1.76380      -132.438       132.438       261.740       394.178    
  31  0.161953      -1.82045      -136.692       136.692       254.170       390.862    
  32  0.455406     -0.786566      -59.0605       59.0605       248.098       307.159    
  33  0.788693     -0.237378      -17.8239       17.8239       255.512       273.336    
  34  0.157754      -1.84672      -138.664       138.664       253.308       391.972    
  35  0.126279      -2.06926      -155.374       155.374       255.750       411.123    
  36  0.646962     -0.435467      -32.6978       32.6978       251.568       284.266    
  37  0.730769     -0.313658      -23.5515       23.5515       256.885       280.437    
  38  0.443446E-01  -3.11577      -233.952       233.952       250.646       484.598    
  39  0.219048      -1.51847      -114.016       114.016       253.272       367.288    
  40  0.311223E-01  -3.46983      -260.538       260.538       244.431       504.969    
  41  0.864417     -0.145700      -10.9401       10.9401       297.606       308.547    
  42  0.372606     -0.987233      -74.1280       74.1280       267.199       341.327    
  43  0.599250E-01  -2.81466      -211.343       211.343       262.721       474.065    
  44  0.250528      -1.38418      -103.934       103.934       256.039       359.973    
  45  0.404968E-01  -3.20653      -240.768       240.768       240.875       481.643    
  46  0.792822     -0.232156      -17.4318       17.4318       246.931       264.363    
  47  0.826691     -0.190324      -14.2908       14.2908       245.610       259.901    
  48  0.258424      -1.35316      -101.604       101.604       246.206       347.810    
  49  0.713620     -0.337405      -25.3346       25.3346       247.802       273.137    
  50  0.936186     -0.659413E-01  -4.95131       4.95131       316.249       321.200    
  51  0.655367E-01  -2.72514      -204.622       204.622       317.398       522.020    
  52  0.178790      -1.72154      -129.265       129.265       338.931       468.196    
  53  0.110644E-01  -4.50403      -338.192       338.192       176.615       514.807    
  54  0.459577     -0.777448      -58.3759       58.3759       250.289       308.665    
  55  0.210706      -1.55729      -116.932       116.932       250.289       367.221    
  56  0.667378     -0.404399      -30.3649       30.3649       252.558       282.923    
  57  0.787749     -0.238575      -17.9138       17.9138       256.190       274.104    
  58  0.774339E-01  -2.55833      -192.096       192.096       293.045       485.141    
  59  0.154999      -1.86434      -139.987       139.987       247.129       387.116    
  60  0.510712     -0.671950      -50.4545       50.4545       246.946       297.401    
  61  0.628107     -0.465044      -34.9186       34.9186       251.457       286.376    
  62  0.850273     -0.162197      -12.1788       12.1788       243.047       255.226    
  63  0.355976      -1.03289      -77.5563       77.5563       257.184       334.741    
  64  0.531318     -0.632394      -47.4843       47.4843       256.405       303.889    
  65  0.404575     -0.904917      -67.9472       67.9472       252.992       320.940    
  66  0.240103      -1.42669      -107.125       107.125       251.161       358.286    
  67  0.288602      -1.24271      -93.3107       93.3107       258.141       351.452    
  68  0.870493     -0.138695      -10.4142       10.4142       243.859       254.273    
  69  0.453038     -0.791780      -59.4520       59.4520       254.890       314.342    
  70  0.259221      -1.35008      -101.373       101.373       250.870       352.242    
  71  0.201751      -1.60072      -120.193       120.193       250.810       371.002    
  72  0.390245     -0.940979      -70.6549       70.6549       250.354       321.009    
  73  0.311089      -1.16768      -87.6768       87.6768       249.445       337.122    
loop,thermsimp(1:2)        1   110.821       25.7475    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     75        224.64          0.84          1.12         23.66          0.09          0.05         25.76
Just calling func    0   0         25.76


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    224.64
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    75.0866               145
loop is:        1
neval is:       74
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        1      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    75.0866      0.500000    
T0,tstep,tfreq (these do not change):             72
current SAtemp,tstepnext are:    75.0866               145
loop is:        2
neval is:       74


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      145
neval,tstepnext:       74     145

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.352733      -1.04204      -78.2435       78.2435       181.022       259.265    
   2  0.440787     -0.819193      -61.5104       61.5104       189.837       251.347    
   3  0.685789     -0.377185      -28.3216       28.3216       209.714       238.035    
   4  0.673104     -0.395856      -29.7235       29.7235       187.491       217.214    
   5  0.655536     -0.422301      -31.7092       31.7092       247.717       279.426    
   6  0.422838     -0.860766      -64.6320       64.6320       250.277       314.909    
   7  0.300870      -1.20108      -90.1848       90.1848       243.859       334.043    
   8  0.776987     -0.252331      -18.9467       18.9467       243.047       261.994    
   9  0.170551      -1.76872      -132.807       132.807       248.838       381.646    
  10  0.587497     -0.531884      -39.9374       39.9374       245.610       285.547    
  11  0.250425      -1.38459      -103.964       103.964       250.289       354.253    
  12  0.776362E-01  -2.55572      -191.900       191.900       246.931       438.832    
  13  0.766647     -0.265729      -19.9527       19.9527       239.039       258.992    
  14  0.480193     -0.733568      -55.0811       55.0811       247.802       302.883    
  15  0.434643     -0.833231      -62.5645       62.5645       255.512       318.077    
  16  0.815924E-01  -2.50602      -188.168       188.168       256.190       444.359    
  17  0.724257E-01  -2.62519      -197.117       197.117       251.224       448.341    
  18  0.573795     -0.555483      -41.7093       41.7093       251.012       292.721    
  19  0.196096      -1.62915      -122.327       122.327       256.885       379.212    
  20  0.240673      -1.42432      -106.947       106.947       252.558       359.505    
  21  0.194228      -1.63872      -123.046       123.046       273.435       396.481    
  22  0.236387      -1.44229      -108.296       108.296       251.568       359.864    
  23  0.261662      -1.34070      -100.669       100.669       251.457       352.126    
  24  0.146321      -1.92195      -144.313       144.313       246.946       391.259    
  25  0.169637      -1.77410      -133.211       133.211       182.678       315.889    
  26  0.886717     -0.120229      -9.02760       9.02760       248.738       257.765    
  27  0.253412      -1.37274      -103.074       103.074       256.405       359.480    
  28  0.470820     -0.753279      -56.5612       56.5612       253.828       310.389    
  29  0.329871      -1.10905      -83.2752       83.2752       248.098       331.374    
  30  0.726784     -0.319126      -23.9621       23.9621       297.606       321.568    
  31  0.612351     -0.490450      -36.8263       36.8263       250.289       287.115    
  32  0.146573      -1.92023      -144.184       144.184       250.401       394.585    
  33  0.812633     -0.207476      -15.5786       15.5786       254.890       270.469    
  34  0.486789     -0.719925      -54.0567       54.0567       252.992       307.049    
  35  0.653508     -0.425400      -31.9419       31.9419       250.354       282.296    
  36  0.180127      -1.71409      -128.706       128.706       316.249       444.954    
  37  0.155218      -1.86292      -139.881       139.881       268.071       407.952    
  38  0.830615     -0.185589      -13.9352       13.9352       249.912       263.847    
  39  0.728345     -0.316980      -23.8009       23.8009       244.735       268.536    
  40  0.262318      -1.33820      -100.481       100.481       257.184       357.665    
  41  0.234222      -1.45148      -108.987       108.987       249.445       358.432    
  42  0.250201      -1.38549      -104.032       104.032       267.199       371.231    
  43  0.898433     -0.107103      -8.04203       8.04203       285.567       293.609    
  44  0.580277     -0.544250      -40.8659       40.8659       250.286       291.152    
  45  0.823617     -0.194050      -14.5705       14.5705       246.206       260.777    
  46  0.820676     -0.197627      -14.8391       14.8391       258.141       272.981    
  47  0.502494     -0.688171      -51.6724       51.6724       250.870       302.542    
  48  0.751016     -0.286329      -21.4995       21.4995       249.306       270.806    
  49  0.360461      -1.02037      -76.6162       76.6162       251.161       327.778    
  50  0.948712     -0.526497E-01  -3.95329       3.95329       256.039       259.992    
  51  0.452918     -0.792045      -59.4720       59.4720       250.289       309.761    
  52  0.182886      -1.69889      -127.564       127.564       250.289       377.853    
  53  0.986780     -0.133085E-01 -0.999292      0.999292       253.272       254.271    
  54  0.720276     -0.328121      -24.6375       24.6375       250.810       275.447    
  55  0.999574     -0.426396E-03 -0.320167E-01  0.320167E-01   359.512       359.544    
  56  0.573447     -0.556089      -41.7549       41.7549       223.887       265.641    
  57  0.441160E-01  -3.12093      -234.340       234.340       181.994       416.334    
  58  0.596470     -0.516726      -38.7992       38.7992       247.129       285.929    
  59  0.561679E-01  -2.87941      -216.205       216.205       254.170       470.376    
  60  0.664610     -0.408554      -30.6770       30.6770       253.308       283.985    
  61  0.875363     -0.133117      -9.99528       9.99528       250.873       260.868    
  62  0.969943     -0.305184E-01  -2.29152       2.29152       261.740       264.032    
  63  0.692714     -0.367138      -27.5672       27.5672       255.750       283.317    
  64  0.107969      -2.22591      -167.136       167.136       338.931       506.067    
  65  0.530030     -0.634822      -47.6667       47.6667       262.721       310.388    
  66  0.246082      -1.40209      -105.278       105.278       240.875       346.153    
  67  0.561065     -0.577919      -43.3940       43.3940       250.646       294.040    
  68  0.888085     -0.118688      -8.91188       8.91188       293.045       301.957    
  69  0.180192      -1.71373      -128.678       128.678       253.404       382.082    
  70  0.259121      -1.35046      -101.401       101.401       244.431       345.833    
  71  0.728967     -0.316127      -23.7369       23.7369       176.615       200.352    
  72  0.546722     -0.603814      -45.3384       45.3384       317.398       362.737    
  73  0.334936      -1.09382      -82.1309       82.1309       224.643       306.774    
loop,thermsimp(1:2)        2   78.2435       61.5104    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     76        288.53          0.86          1.12         23.56          0.16          0.05         25.75
Just calling func    0   0         25.75


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     77        285.04          0.85          1.12         23.61          0.11          0.05         25.74
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    285.04
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    75.0866               145
loop is:        2
neval is:       76
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        2      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    75.0866      0.500000    
T0,tstep,tfreq (these do not change):             72
current SAtemp,tstepnext are:    75.0866               145
loop is:        3
neval is:       76


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      145
neval,tstepnext:       76     145

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.167898      -1.78440      -133.985       133.985       176.615       310.599    
   2  0.274399      -1.29317      -97.0999       97.0999       187.491       284.591    
   3  0.597410E-01  -2.81774      -211.574       211.574       209.714       421.288    
   4  0.283115E-01  -3.56449      -267.645       267.645       189.837       457.482    
   5  0.901069     -0.104174      -7.82207       7.82207       253.272       261.094    
   6  0.717939     -0.331371      -24.8815       24.8815       248.738       273.619    
   7  0.294866      -1.22123      -91.6983       91.6983       239.039       330.738    
   8  0.935651     -0.665127E-01  -4.99422       4.99422       181.022       186.016    
   9  0.314362      -1.15721      -86.8910       86.8910       256.039       342.930    
  10  0.807729     -0.213529      -16.0332       16.0332       246.206       262.240    
  11  0.757191     -0.278140      -20.8846       20.8846       250.873       271.757    
  12  0.508654     -0.675987      -50.7576       50.7576       243.047       293.805    
  13  0.722060     -0.325647      -24.4517       24.4517       249.912       274.363    
  14  0.424032     -0.857947      -64.4203       64.4203       261.740       326.160    
  15  0.786154     -0.240602      -18.0660       18.0660       223.887       241.953    
  16  0.399894     -0.916557      -68.8211       68.8211       244.735       313.556    
  17  0.757416     -0.277843      -20.8623       20.8623       254.890       275.752    
  18  0.637270     -0.450563      -33.8312       33.8312       249.306       283.138    
  19  0.586055     -0.534342      -40.1219       40.1219       258.141       298.263    
  20  0.821724     -0.196351      -14.7433       14.7433       250.810       265.553    
  21  0.921558     -0.816897E-01  -6.13380       6.13380       247.717       253.851    
  22  0.985596     -0.145083E-01  -1.08938       1.08938       250.354       251.443    
  23  0.257194      -1.35793      -101.962       101.962       255.750       357.712    
  24  0.921438E-01  -2.38440      -179.037       179.037       253.308       432.345    
  25  0.114653      -2.16584      -162.626       162.626       245.610       408.236    
  26  0.379827     -0.968040      -72.6869       72.6869       247.129       319.816    
  27  0.541451     -0.613503      -46.0658       46.0658       250.289       296.355    
  28  0.544274     -0.608302      -45.6754       45.6754       250.286       295.961    
  29  0.934365     -0.678883E-01  -5.09750       5.09750       251.012       256.109    
  30  0.266419E-01  -3.62527      -272.209       272.209       285.567       557.776    
  31  0.919572     -0.838466E-01  -6.29575       6.29575       250.646       256.941    
  32  0.864639     -0.145444      -10.9209       10.9209       293.045       303.966    
  33  0.341156      -1.07542      -80.7494       80.7494       250.870       331.619    
  34  0.803175     -0.219182      -16.4577       16.4577       247.802       264.260    
  35  0.699424     -0.357498      -26.8433       26.8433       224.643       251.487    
  36  0.223868E-01  -3.79928      -285.275       285.275       252.992       538.268    
  37  0.605689     -0.501389      -37.6476       37.6476       250.289       287.936    
  38  0.312349      -1.16363      -87.3733       87.3733       262.721       350.095    
  39  0.437501     -0.826675      -62.0723       62.0723       253.828       315.900    
  40  0.303330      -1.19293      -89.5733       89.5733       250.277       339.850    
  41  0.129735      -2.04226      -153.346       153.346       182.678       336.024    
  42  0.954352     -0.467224E-01  -3.50823       3.50823       255.512       259.021    
  43  0.519807     -0.654297      -49.1290       49.1290       297.606       346.735    
  44  0.950560     -0.507036E-01  -3.80716       3.80716       251.161       254.969    
  45  0.443941     -0.812064      -60.9751       60.9751       248.098       309.074    
  46  0.911446     -0.927229E-01  -6.96225       6.96225       243.859       250.821    
  47  0.782475     -0.245293      -18.4182       18.4182       244.431       262.850    
  48  0.412534     -0.885438      -66.4845       66.4845       240.875       307.360    
  49  0.843850     -0.169780      -12.7482       12.7482       251.457       264.206    
  50  0.149432      -1.90091      -142.733       142.733       250.289       393.022    
  51  0.292747      -1.22845      -92.2400       92.2400       257.184       349.424    
  52  0.579908E-02  -5.15006      -386.700       386.700       249.445       636.145    
  53  0.164431      -1.80526      -135.551       135.551       256.405       391.956    
  54  0.963795     -0.368765E-01  -2.76893       2.76893       252.558       255.327    
  55  0.536638     -0.622432      -46.7363       46.7363       359.512       406.249    
  56  0.231620      -1.46266      -109.826       109.826       251.568       361.394    
  57  0.452632E-01  -3.09526      -232.413       232.413       317.398       549.811    
  58  0.241294      -1.42174      -106.754       106.754       267.199       373.953    
  59  0.757653     -0.277529      -20.8387       20.8387       250.289       271.127    
  60  0.504715     -0.683762      -51.3413       51.3413       256.885       308.226    
  61  0.878562     -0.129469      -9.72141       9.72141       248.838       258.560    
  62  0.874452     -0.134158      -10.0735       10.0735       253.404       263.477    
  63  0.370953     -0.991680      -74.4619       74.4619       246.946       321.408    
  64  0.757717     -0.277446      -20.8324       20.8324       250.401       271.234    
  65  0.642844     -0.441853      -33.1773       33.1773       273.435       306.612    
  66  0.616137     -0.484286      -36.3634       36.3634       268.071       304.434    
  67  0.551578     -0.594972      -44.6744       44.6744       181.994       226.668    
  68  0.483778E-01  -3.02871      -227.416       227.416       246.931       474.347    
  69  0.839664     -0.174753      -13.1216       13.1216       256.190       269.312    
  70  0.334065      -1.09642      -82.3265       82.3265       316.249       398.575    
  71  0.995512     -0.449855E-02 -0.337781      0.337781       251.224       251.562    
  72  0.214896      -1.53760      -115.453       115.453       254.170       369.624    
  73  0.541100     -0.614151      -46.1146       46.1146       285.045       331.159    
loop,thermsimp(1:2)        3   133.985       97.0999    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     78        183.05          0.84          1.11         23.56          0.20          0.05         25.76
Just calling func    0   0         25.76


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     79        399.74          0.86          1.12         23.65          0.09          0.05         25.77
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    183.05
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    75.0866               145
loop is:        3
neval is:       78
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        3      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    75.0866      0.500000    
T0,tstep,tfreq (these do not change):             72
current SAtemp,tstepnext are:    75.0866               145
loop is:        4
neval is:       78


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      145
neval,tstepnext:       78     145

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.883237     -0.124162      -9.32290       9.32290       181.022       190.345    
   2  0.114178      -2.16999      -162.937       162.937       181.994       344.931    
   3  0.217017      -1.52778      -114.716       114.716       223.887       338.602    
   4  0.138317      -1.97821      -148.537       148.537       243.859       392.395    
   5  0.832728     -0.183048      -13.7445       13.7445       250.354       264.098    
   6  0.390825     -0.939496      -70.5436       70.5436       224.643       295.187    
   7  0.283633      -1.26007      -94.6148       94.6148       251.224       345.839    
   8  0.725809     -0.320468      -24.0629       24.0629       247.717       271.780    
   9  0.506121     -0.680979      -51.1324       51.1324       251.161       302.294    
  10  0.216234      -1.53139      -114.987       114.987       252.558       367.546    
  11  0.637942     -0.449509      -33.7521       33.7521       251.012       284.764    
  12  0.536707     -0.622302      -46.7266       46.7266       250.646       297.372    
  13  0.231844      -1.46169      -109.753       109.753       248.838       358.592    
  14  0.491379     -0.710540      -53.3521       53.3521       255.512       308.865    
  15  0.825774     -0.191434      -14.3742       14.3742       253.272       267.646    
  16  0.671593     -0.398102      -29.8922       29.8922       246.206       276.099    
  17  0.549103     -0.599470      -45.0121       45.0121       244.431       289.444    
  18  0.659287     -0.416597      -31.2809       31.2809       253.404       284.685    
  19  0.205012      -1.58469      -118.989       118.989       251.457       370.446    
  20  0.400541E-02  -5.52011      -414.486       414.486       247.802       662.288    
  21  0.750831     -0.286575      -21.5179       21.5179       250.810       272.328    
  22  0.619921     -0.478162      -35.9036       35.9036       256.190       292.094    
  23  0.435226     -0.831889      -62.4637       62.4637       250.289       312.752    
  24  0.460974     -0.774414      -58.1482       58.1482       250.401       308.550    
  25  0.891582E-01  -2.41734      -181.510       181.510       250.873       432.383    
  26  0.589618E-01  -2.83087      -212.560       212.560       248.738       461.298    
  27  0.541391     -0.613613      -46.0741       46.0741       249.912       295.986    
  28  0.545108E-01  -2.90936      -218.454       218.454       254.890       473.344    
  29  0.744722     -0.294744      -22.1313       22.1313       249.306       271.438    
  30  0.712477     -0.339008      -25.4549       25.4549       187.491       212.946    
  31  0.563836     -0.572992      -43.0240       43.0240       250.289       293.313    
  32  0.161455      -1.82353      -136.922       136.922       243.047       379.970    
  33  0.640738     -0.445135      -33.4237       33.4237       250.286       283.710    
  34  0.157494      -1.84837      -138.788       138.788       250.289       389.076    
  35  0.695323     -0.363378      -27.2848       27.2848       258.141       285.426    
  36  0.792798     -0.232186      -17.4341       17.4341       293.045       310.479    
  37  0.940634     -0.612017E-01  -4.59543       4.59543       268.071       272.666    
  38  0.750008     -0.287672      -21.6003       21.6003       273.435       295.035    
  39  0.298939E-01  -3.51010      -263.562       263.562       240.875       504.437    
  40  0.633510     -0.456480      -34.2755       34.2755       256.885       291.161    
  41  0.465723     -0.764164      -57.3785       57.3785       248.098       305.477    
  42  0.916259     -0.874560E-01  -6.56677       6.56677       176.615       183.182    
  43  0.451376     -0.795456      -59.7281       59.7281       244.735       304.463    
  44  0.414090     -0.881672      -66.2018       66.2018       253.828       320.030    
  45  0.273092      -1.29795      -97.4585       97.4585       247.129       344.588    
  46  0.361379      -1.01783      -76.4252       76.4252       246.946       323.371    
  47  0.548848     -0.599934      -45.0470       45.0470       261.740       306.787    
  48  0.832309     -0.183552      -13.7823       13.7823       239.039       252.821    
  49  0.673017     -0.395985      -29.7332       29.7332       285.045       314.778    
  50  0.692516     -0.367425      -27.5887       27.5887       250.870       278.458    
  51  0.354468E-01  -3.33972      -250.769       250.769       182.678       433.447    
  52  0.987850     -0.122240E-01 -0.917856      0.917856       250.277       251.195    
  53  0.659676     -0.416007      -31.2365       31.2365       256.039       287.275    
  54  0.276145      -1.28683      -96.6238       96.6238       297.606       394.230    
  55  0.426927     -0.851141      -63.9093       63.9093       257.184       321.094    
  56  0.221817      -1.50590      -113.073       113.073       262.721       375.794    
  57  0.911956     -0.921634E-01  -6.92024       6.92024       255.750       262.670    
  58  0.791973     -0.233228      -17.5123       17.5123       251.568       269.080    
  59  0.805447     -0.216358      -16.2456       16.2456       254.170       270.416    
  60  0.887840     -0.118963      -8.93255       8.93255       267.199       276.132    
  61  0.978176     -0.220657E-01  -1.65684       1.65684       256.405       258.062    
  62  0.539899     -0.616372      -46.2813       46.2813       250.289       296.570    
  63  0.313742      -1.15918      -87.0392       87.0392       316.249       403.288    
  64  0.355768      -1.03348      -77.6002       77.6002       359.512       437.112    
  65  0.413366     -0.883423      -66.3332       66.3332       245.610       311.943    
  66  0.352288      -1.04331      -78.3383       78.3383       209.714       288.052    
  67  0.269512      -1.31114      -98.4492       98.4492       253.308       351.757    
  68  0.841976E-01  -2.47459      -185.809       185.809       189.837       375.645    
  69  0.964450     -0.361976E-01  -2.71795       2.71795       246.931       249.649    
  70  0.554883     -0.588998      -44.2258       44.2258       252.992       297.218    
  71  0.192411      -1.64812      -123.752       123.752       317.398       441.150    
  72  0.834093     -0.181411      -13.6215       13.6215       285.567       299.189    
  73  0.606638     -0.499823      -37.5300       37.5300       183.049       220.579    
loop,thermsimp(1:2)        4   9.32290       162.937    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     80        225.56          0.86          1.12         23.62          0.12          0.05         25.77
Just calling func    0   0         25.77


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     81        214.20          0.86          1.12         23.58          0.17          0.05         25.78
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

   80    214.20        1.744     -1.263      1.744     -102.6     0.8675    
                      0.7350      2.062     -99.70      3.749    -0.1931    
                       1.753     -1.406      1.413      0.000     -5.000    
                      -1.023      0.000      0.000      0.000     -1.221    

                      -2.500      9279.      9279.      0.000      0.000    
                     -0.5672     -6.124     -4.613     -7.203      3.087    
                      -14.01     -3.110      1271.      0.000      6243.    

                       7704.      7110.      7574.     0.1079E+05  2374.    
                       3051.     0.1179    -0.4867E-01  0.000    -0.4615    
                     -0.5330E-01-0.1084    -0.1080    -0.1965     0.2564E-01

                      -1.565     0.2313E-02  0.000    -0.3090E-01 0.4039E-01
                      0.8541E-01 0.6694E-01 0.2364E-02-0.6036E-01 0.1646    
                     -0.3893E-02-0.2733E-01-0.8500E-01 -1.227      0.000    

                     -0.6264     -1.442     -2.170     -2.938    -0.3005    
                      0.1689      9.244      9.154    -0.2124E+05 -4.000    
                     -0.4284    -0.5488      9.391      8.443    -0.2124E+05

                      -4.000     0.7303E-01-0.6590      8.812      9.077    
                     -0.3186E+05 -7.000    -0.4913    -0.4662      9.429    
                       8.440    -0.2848E+05 -7.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    214.20
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    75.0866               145
loop is:        4
neval is:       80
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        4      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    75.0866      0.500000    
T0,tstep,tfreq (these do not change):             72
current SAtemp,tstepnext are:    75.0866               145
loop is:        5
neval is:       80


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      145
neval,tstepnext:       80     145

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.968189     -0.323278E-01  -2.42739       2.42739       176.615       179.042    
   2  0.384676     -0.955353      -71.7342       71.7342       181.022       252.756    
   3  0.472770     -0.749146      -56.2509       56.2509       187.491       243.742    
   4  0.131186      -2.03114      -152.511       152.511       183.049       335.560    
   5  0.387497     -0.948046      -71.1856       71.1856       246.931       318.117    
   6  0.474858     -0.744739      -55.9199       55.9199       250.277       306.197    
   7  0.654056     -0.424563      -31.8790       31.8790       239.039       270.918    
   8  0.375266     -0.980119      -73.5938       73.5938       256.405       329.999    
   9  0.605577     -0.501574      -37.6615       37.6615       255.750       293.411    
  10  0.485605     -0.722360      -54.2396       54.2396       250.354       304.593    
  11  0.503843     -0.685490      -51.4712       51.4712       253.272       304.743    
  12  0.374521     -0.982108      -73.7432       73.7432       251.568       325.311    
  13  0.955542E-01  -2.34806      -176.308       176.308       254.170       430.478    
  14  0.902567     -0.102512      -7.69728       7.69728       249.306       257.004    
  15  0.347215      -1.05781      -79.4274       79.4274       247.717       327.144    
  16  0.893138     -0.113014      -8.48585       8.48585       250.810       259.296    
  17  0.561145     -0.577776      -43.3832       43.3832       268.071       311.454    
  18  0.667287     -0.404536      -30.3752       30.3752       246.206       276.582    
  19  0.601102     -0.508991      -38.2184       38.2184       267.199       305.418    
  20  0.569928     -0.562245      -42.2171       42.2171       250.870       293.087    
  21  0.655926     -0.421708      -31.6646       31.6646       250.286       281.951    
  22  0.355892      -1.03313      -77.5740       77.5740       253.404       330.978    
  23  0.208013      -1.57015      -117.897       117.897       251.012       368.909    
  24  0.879772     -0.128093      -9.61805       9.61805       258.141       267.759    
  25  0.114206E-01  -4.47233      -335.812       335.812       256.039       591.851    
  26  0.950245     -0.510357E-01  -3.83210       3.83210       209.714       213.546    
  27  0.321268      -1.13548      -85.2593       85.2593       244.431       329.691    
  28  0.379005     -0.970207      -72.8496       72.8496       256.885       329.735    
  29  0.117960      -2.13741      -160.491       160.491       256.190       416.681    
  30  0.822558     -0.195337      -14.6672       14.6672       250.289       264.956    
  31  0.671085     -0.398860      -29.9491       29.9491       273.435       303.384    
  32  0.220279      -1.51286      -113.596       113.596       224.643       338.239    
  33  0.836335     -0.178727      -13.4200       13.4200       249.912       263.331    
  34  0.982442E-01  -2.32030      -174.223       174.223       250.289       424.512    
  35  0.912526     -0.915389E-01  -6.87334       6.87334       252.992       259.866    
  36  0.758802     -0.276015      -20.7250       20.7250       250.646       271.371    
  37  0.562651     -0.575096      -43.1820       43.1820       285.567       328.749    
  38  0.248142      -1.39375      -104.652       104.652       251.161       355.814    
  39  0.864881     -0.145163      -10.8998       10.8998       244.735       255.635    
  40  0.495151     -0.702893      -52.7779       52.7779       248.098       300.876    
  41  0.112352E-01  -4.48870      -337.041       337.041       261.740       598.781    
  42  0.745500     -0.293700      -22.0529       22.0529       250.401       272.454    
  43  0.405071     -0.903693      -67.8552       67.8552       255.512       323.368    
  44  0.617259     -0.482466      -36.2268       36.2268       293.045       329.272    
  45  0.992755     -0.727089E-02 -0.545946      0.545946       245.610       246.156    
  46  0.888739     -0.117952      -8.85663       8.85663       250.289       259.145    
  47  0.976701     -0.235748E-01  -1.77015       1.77015       285.045       286.815    
  48  0.461976     -0.772242      -57.9851       57.9851       253.828       311.813    
  49  0.150581      -1.89325      -142.158       142.158       257.184       399.342    
  50  0.726286E-01  -2.62240      -196.907       196.907       246.946       443.853    
  51  0.280837      -1.26998      -95.3585       95.3585       223.887       319.245    
  52  0.727959     -0.317510      -23.8407       23.8407       247.129       270.970    
  53  0.565225     -0.570532      -42.8393       42.8393       181.994       224.833    
  54  0.884775     -0.122422      -9.19228       9.19228       251.224       260.417    
  55  0.289837      -1.23844      -92.9901       92.9901       253.308       346.298    
  56  0.282389      -1.26447      -94.9447       94.9447       248.838       343.783    
  57  0.737455     -0.304550      -22.8676       22.8676       252.558       275.426    
  58  0.436668E-02  -5.43375      -408.002       408.002       251.457       659.459    
  59  0.809492     -0.211348      -15.8694       15.8694       189.837       205.706    
  60  0.957786E-01  -2.34572      -176.132       176.132       262.721       438.853    
  61  0.335750      -1.09139      -81.9487       81.9487       243.047       324.996    
  62  0.687327     -0.374945      -28.1533       28.1533       250.289       278.442    
  63  0.340103      -1.07851      -80.9813       80.9813       243.859       324.840    
  64  0.902520     -0.102564      -7.70118       7.70118       297.606       305.308    
  65  0.872595     -0.136284      -10.2331       10.2331       316.249       326.482    
  66  0.773535     -0.256784      -19.2811       19.2811       250.873       270.154    
  67  0.627340     -0.466267      -35.0104       35.0104       182.678       217.689    
  68  0.918418     -0.851028E-01  -6.39008       6.39008       359.512       365.902    
  69  0.347451      -1.05713      -79.3765       79.3765       317.398       396.775    
  70  0.962049     -0.386898E-01  -2.90508       2.90508       248.738       251.643    
  71  0.716962     -0.332732      -24.9837       24.9837       254.890       279.874    
  72  0.423789     -0.858520      -64.4634       64.4634       240.875       305.339    
  73  0.899832E-01  -2.40813      -180.819       180.819       214.200       395.019    
loop,thermsimp(1:2)        5   2.42739       71.7342    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     82        228.32          0.86          1.12         23.69          0.06          0.05         25.77
Just calling func    0   0         25.77


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    228.32
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    75.0866               145
loop is:        5
neval is:       81
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        5      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    75.0866      0.500000    
T0,tstep,tfreq (these do not change):             72
current SAtemp,tstepnext are:    75.0866               145
loop is:        6
neval is:       81


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      145
neval,tstepnext:       81     145

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.806234     -0.215382      -16.1723       16.1723       176.615       192.787    
   2  0.337878      -1.08507      -81.4743       81.4743       189.837       271.311    
   3  0.930612     -0.719127E-01  -5.39968       5.39968       209.714       215.113    
   4  0.843645     -0.170024      -12.7665       12.7665       182.678       195.445    
   5  0.757799     -0.277337      -20.8243       20.8243       181.994       202.818    
   6  0.627925     -0.465335      -34.9404       34.9404       187.491       222.431    
   7  0.412314     -0.885971      -66.5245       66.5245       245.610       312.134    
   8  0.282274      -1.26488      -94.9753       94.9753       248.738       343.713    
   9  0.426609E-01  -3.15447      -236.859       236.859       181.022       417.880    
  10  0.484876     -0.723862      -54.3523       54.3523       244.735       299.088    
  11  0.372210     -0.988296      -74.2078       74.2078       249.306       323.514    
  12  0.740507     -0.300421      -22.5576       22.5576       250.289       272.846    
  13  0.361519      -1.01744      -76.3963       76.3963       250.810       327.206    
  14  0.421034     -0.865042      -64.9531       64.9531       252.992       317.945    
  15  0.780595     -0.247699      -18.5989       18.5989       251.224       269.823    
  16  0.758410     -0.276531      -20.7638       20.7638       249.912       270.675    
  17  0.522921E-01  -2.95091      -221.574       221.574       250.289       471.863    
  18  0.609673     -0.494833      -37.1553       37.1553       258.141       295.297    
  19  0.204029      -1.58949      -119.349       119.349       250.873       370.222    
  20  0.516385     -0.660902      -49.6249       49.6249       239.039       288.664    
  21  0.323918      -1.12726      -84.6424       84.6424       247.129       331.772    
  22  0.671820     -0.397765      -29.8669       29.8669       250.646       280.512    
  23  0.850344     -0.162114      -12.1726       12.1726       250.401       262.574    
  24  0.515631     -0.662364      -49.7346       49.7346       252.558       302.293    
  25  0.919408     -0.840249E-01  -6.30915       6.30915       246.206       252.516    
  26  0.516519     -0.660643      -49.6054       49.6054       250.289       299.894    
  27  0.986900     -0.131869E-01 -0.990157      0.990157       254.890       255.880    
  28  0.127351      -2.06081      -154.739       154.739       250.286       405.025    
  29  0.775028E-01  -2.55744      -192.030       192.030       285.045       477.074    
  30  0.778307     -0.250634      -18.8193       18.8193       250.870       269.689    
  31  0.548570     -0.600441      -45.0851       45.0851       255.750       300.835    
  32  0.191672      -1.65197      -124.041       124.041       248.098       372.139    
  33  0.593733     -0.521326      -39.1446       39.1446       273.435       312.579    
  34  0.612853     -0.489631      -36.7647       36.7647       250.354       287.118    
  35  0.872749     -0.136107      -10.2198       10.2198       253.272       263.492    
  36  0.291105E-01  -3.53666      -265.556       265.556       297.606       563.162    
  37  0.310804      -1.16859      -87.7456       87.7456       240.875       328.621    
  38  0.238051      -1.43527      -107.770       107.770       267.199       374.969    
  39  0.600295     -0.510334      -38.3192       38.3192       250.277       288.596    
  40  0.856575     -0.154813      -11.6244       11.6244       268.071       279.695    
  41  0.127990      -2.05580      -154.363       154.363       253.828       408.192    
  42  0.390396E-01  -3.24318      -243.519       243.519       246.931       490.451    
  43  0.469298E-01  -3.05910      -229.698       229.698       223.887       453.584    
  44  0.170208      -1.77073      -132.958       132.958       255.512       388.471    
  45  0.457801     -0.781320      -58.6667       58.6667       243.859       302.525    
  46  0.451589     -0.794982      -59.6925       59.6925       243.047       302.740    
  47  0.601844     -0.507757      -38.1257       38.1257       251.568       289.694    
  48  0.923684     -0.793857E-01  -5.96080       5.96080       316.249       322.209    
  49  0.113154      -2.17901      -163.614       163.614       247.717       411.331    
  50  0.652894     -0.426340      -32.0125       32.0125       285.567       317.580    
  51  0.600010     -0.510809      -38.3549       38.3549       293.045       331.400    
  52  0.768679     -0.263082      -19.7539       19.7539       244.431       264.185    
  53  0.999310     -0.690144E-03 -0.518206E-01  0.518206E-01   256.885       256.937    
  54  0.798907     -0.224511      -16.8577       16.8577       256.405       273.263    
  55  0.246243      -1.40144      -105.229       105.229       253.404       358.633    
  56  0.798424     -0.225115      -16.9032       16.9032       183.049       199.952    
  57  0.120926      -2.11257      -158.626       158.626       224.643       383.269    
  58  0.771675     -0.259192      -19.4619       19.4619       248.838       268.300    
  59  0.670629     -0.399540      -30.0001       30.0001       253.308       283.308    
  60  0.127505      -2.05960      -154.648       154.648       251.161       405.810    
  61  0.375387     -0.979799      -73.5698       73.5698       359.512       433.082    
  62  0.572534E-01  -2.86027      -214.768       214.768       251.012       465.780    
  63  0.358654      -1.02540      -76.9935       76.9935       214.200       291.194    
  64  0.903087     -0.101937      -7.65410       7.65410       317.398       325.052    
  65  0.112925      -2.18103      -163.766       163.766       257.184       420.950    
  66  0.727950     -0.317523      -23.8417       23.8417       256.190       280.032    
  67  0.703618E-01  -2.65411      -199.288       199.288       250.289       449.576    
  68  0.461106     -0.774128      -58.1266       58.1266       254.170       312.297    
  69  0.546854     -0.603573      -45.3203       45.3203       262.721       308.042    
  70  0.264522      -1.32983      -99.8526       99.8526       246.946       346.799    
  71  0.562280     -0.575755      -43.2315       43.2315       256.039       299.270    
  72  0.745931     -0.293123      -22.0096       22.0096       261.740       283.750    
  73  0.753398E-01  -2.58575      -194.155       194.155       228.323       422.478    
loop,thermsimp(1:2)        6   16.1723       81.4743    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     83        227.95          0.87          1.13         23.60          0.12          0.04         25.76
Just calling func    0   0         25.76


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     84        277.19          0.84          1.11         23.76          0.02          0.06         25.79
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    227.95
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    75.0866               145
loop is:        6
neval is:       83
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        6      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    75.0866      0.500000    
T0,tstep,tfreq (these do not change):             72
current SAtemp,tstepnext are:    75.0866               145
loop is:        7
neval is:       83


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      145
neval,tstepnext:       83     145

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.117714      -2.13949      -160.647       160.647       176.615       337.262    
   2  0.421875     -0.863045      -64.8032       64.8032       182.678       247.481    
   3  0.700103     -0.356528      -26.7705       26.7705       183.049       209.819    
   4  0.209367      -1.56367      -117.410       117.410       181.994       299.404    
   5  0.117251      -2.14344      -160.943       160.943       209.714       370.657    
   6  0.898330     -0.107218      -8.05061       8.05061       187.491       195.541    
   7  0.209806      -1.56157      -117.253       117.253       246.206       363.460    
   8  0.917155     -0.864790E-01  -6.49341       6.49341       254.890       261.383    
   9  0.120514E-01  -4.41857      -331.776       331.776       256.885       588.661    
  10  0.189983      -1.66082      -124.706       124.706       250.401       375.107    
  11  0.257131      -1.35817      -101.980       101.980       253.272       355.252    
  12  0.913158E-01  -2.39343      -179.715       179.715       244.431       424.146    
  13  0.336531      -1.08906      -81.7741       81.7741       248.838       330.613    
  14  0.318351      -1.14460      -85.9442       85.9442       250.870       336.814    
  15  0.919606     -0.838101E-01  -6.29301       6.29301       251.224       257.517    
  16  0.719771E-01  -2.63141      -197.583       197.583       249.912       447.495    
  17  0.788730E-01  -2.53992      -190.714       190.714       189.837       380.551    
  18  0.905929     -0.987941E-01  -7.41811       7.41811       250.289       257.707    
  19  0.665501     -0.407215      -30.5764       30.5764       256.405       286.982    
  20  0.812159     -0.208059      -15.6225       15.6225       268.071       283.694    
  21  0.412726E-01  -3.18756      -239.343       239.343       256.190       495.533    
  22  0.256064      -1.36233      -102.293       102.293       250.646       352.938    
  23  0.277519      -1.28187      -96.2510       96.2510       253.308       349.559    
  24  0.279550      -1.27457      -95.7034       95.7034       261.740       357.443    
  25  0.857884     -0.153286      -11.5097       11.5097       250.354       261.863    
  26  0.205158      -1.58398      -118.935       118.935       250.277       369.212    
  27  0.482085     -0.729635      -54.7858       54.7858       239.039       293.825    
  28  0.494966E-01  -3.00585      -225.699       225.699       251.568       477.267    
  29  0.338791      -1.08237      -81.2717       81.2717       214.200       295.472    
  30  0.249491E-01  -3.69092      -277.138       277.138       258.141       535.280    
  31  0.480710     -0.732491      -55.0003       55.0003       244.735       299.735    
  32  0.908951E-01  -2.39805      -180.061       180.061       256.039       436.100    
  33  0.283223      -1.26152      -94.7234       94.7234       250.289       345.012    
  34  0.277734      -1.28109      -96.1928       96.1928       255.750       351.943    
  35  0.504407     -0.684372      -51.3872       51.3872       252.558       303.946    
  36  0.251881      -1.37880      -103.529       103.529       243.859       347.388    
  37  0.568193     -0.565294      -42.4460       42.4460       243.047       285.493    
  38  0.186135      -1.68128      -126.242       126.242       262.721       388.963    
  39  0.964582     -0.360604E-01  -2.70765       2.70765       245.610       248.317    
  40  0.493045     -0.707155      -53.0979       53.0979       254.170       307.268    
  41  0.477950     -0.738248      -55.4326       55.4326       273.435       328.867    
  42  0.114879      -2.16388      -162.478       162.478       285.567       448.045    
  43  0.324003      -1.12700      -84.6227       84.6227       252.992       337.615    
  44  0.720573     -0.327708      -24.6065       24.6065       316.249       340.855    
  45  0.934913     -0.673019E-01  -5.05348       5.05348       249.306       254.360    
  46  0.516467     -0.660745      -49.6131       49.6131       317.398       367.011    
  47  0.351513      -1.04551      -78.5036       78.5036       250.810       329.313    
  48  0.310221      -1.17047      -87.8868       87.8868       240.875       328.762    
  49  0.467571     -0.760204      -57.0811       57.0811       293.045       350.126    
  50  0.700644     -0.355756      -26.7125       26.7125       247.129       273.842    
  51  0.608579E-01  -2.79921      -210.183       210.183       248.738       458.921    
  52  0.360106      -1.02136      -76.6903       76.6903       246.946       323.637    
  53  0.355744      -1.03354      -77.6054       77.6054       253.404       331.009    
  54  0.356778      -1.03064      -77.3873       77.3873       250.873       328.260    
  55  0.209214      -1.56440      -117.465       117.465       248.098       365.564    
  56  0.513034     -0.667413      -50.1138       50.1138       267.199       317.313    
  57  0.131750      -2.02685      -152.189       152.189       224.643       376.832    
  58  0.860948     -0.149721      -11.2420       11.2420       255.512       266.755    
  59  0.245301      -1.40527      -105.517       105.517       250.286       355.803    
  60  0.411604     -0.887695      -66.6540       66.6540       251.161       317.815    
  61  0.444838     -0.810046      -60.8236       60.8236       253.828       314.652    
  62  0.173997      -1.74872      -131.305       131.305       247.717       379.022    
  63  0.616177     -0.484222      -36.3586       36.3586       181.022       217.380    
  64  0.794601     -0.229915      -17.2635       17.2635       257.184       274.448    
  65  0.926158     -0.767101E-01  -5.75990       5.75990       228.323       234.083    
  66  0.614053     -0.487673      -36.6177       36.6177       359.512       396.130    
  67  0.228742      -1.47516      -110.765       110.765       250.289       361.053    
  68  0.162916      -1.81452      -136.246       136.246       223.887       360.133    
  69  0.437909     -0.825744      -62.0023       62.0023       251.012       313.014    
  70  0.966188     -0.343970E-01  -2.58275       2.58275       250.289       252.871    
  71  0.756703     -0.278785      -20.9330       20.9330       285.045       305.978    
  72  0.537306     -0.621187      -46.6428       46.6428       246.931       293.574    
  73  0.544827     -0.607287      -45.5991       45.5991       227.952       273.551    
loop,thermsimp(1:2)        7   160.647       64.8032    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     85        232.53          0.86          1.12         23.63          0.11          0.05         25.77
Just calling func    0   0         25.77


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     86        239.11          0.86          1.12         23.63          0.09          0.05         25.74
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    232.53
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    75.0866               145
loop is:        7
neval is:       85
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        7      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    75.0866      0.500000    
T0,tstep,tfreq (these do not change):             72
current SAtemp,tstepnext are:    75.0866               145
loop is:        8
neval is:       85


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      145
neval,tstepnext:       85     145

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.487401     -0.718668      -53.9624       53.9624       187.491       241.453    
   2  0.568497     -0.564760      -42.4059       42.4059       183.049       225.455    
   3  0.632037E-01  -2.76139      -207.344       207.344       181.022       388.365    
   4  0.184325      -1.69105      -126.975       126.975       228.323       355.299    
   5  0.949772     -0.515332E-01  -3.86945       3.86945       182.678       186.548    
   6  0.512179     -0.669081      -50.2390       50.2390       245.610       295.849    
   7  0.573767     -0.555532      -41.7130       41.7130       250.289       292.002    
   8  0.590189     -0.527312      -39.5941       39.5941       249.306       288.901    
   9  0.323917      -1.12727      -84.6428       84.6428       251.224       335.867    
  10  0.246420E-01  -3.70330      -278.069       278.069       250.289       528.357    
  11  0.923153E-01  -2.38255      -178.897       178.897       254.890       433.787    
  12  0.236043      -1.44374      -108.406       108.406       250.354       358.759    
  13  0.885388     -0.121730      -9.14026       9.14026       255.512       264.653    
  14  0.617726     -0.481710      -36.1700       36.1700       227.952       264.122    
  15  0.349992      -1.04985      -78.8294       78.8294       247.129       325.959    
  16  0.892028     -0.114257      -8.57920       8.57920       257.184       265.763    
  17  0.382423     -0.961227      -72.1753       72.1753       268.071       340.246    
  18  0.850527     -0.161899      -12.1565       12.1565       243.047       255.204    
  19  0.653461     -0.425472      -31.9472       31.9472       256.405       288.352    
  20  0.413959     -0.881988      -66.2255       66.2255       246.931       313.157    
  21  0.807813     -0.213424      -16.0253       16.0253       239.039       255.065    
  22  0.348045      -1.05542      -79.2482       79.2482       214.200       293.449    
  23  0.435267     -0.831795      -62.4567       62.4567       181.994       244.450    
  24  0.434284     -0.834056      -62.6264       62.6264       244.735       307.362    
  25  0.983564     -0.165728E-01  -1.24440       1.24440       252.558       253.803    
  26  0.545923     -0.605277      -45.4482       45.4482       285.045       330.493    
  27  0.227140      -1.48219      -111.292       111.292       254.170       365.463    
  28  0.965085     -0.355395E-01  -2.66854       2.66854       251.012       253.680    
  29  0.183882      -1.69346      -127.156       127.156       253.828       380.984    
  30  0.187300E-02  -6.28022      -471.560       471.560       267.199       738.759    
  31  0.428736     -0.846914      -63.5919       63.5919       251.161       314.753    
  32  0.459764     -0.777041      -58.3454       58.3454       246.946       305.292    
  33  0.914786     -0.890649E-01  -6.68758       6.68758       250.873       257.560    
  34  0.872236     -0.136696      -10.2640       10.2640       240.875       251.139    
  35  0.789367     -0.236524      -17.7598       17.7598       273.435       291.194    
  36  0.619233E-01  -2.78186      -208.880       208.880       250.810       459.690    
  37  0.138004E-01  -4.28306      -321.600       321.600       248.838       570.439    
  38  0.287035      -1.24815      -93.7194       93.7194       253.404       347.123    
  39  0.138758E-01  -4.27761      -321.191       321.191       250.870       572.061    
  40  0.593330     -0.522005      -39.1956       39.1956       176.615       215.810    
  41  0.399445     -0.917679      -68.9054       68.9054       252.992       321.898    
  42  0.982947     -0.172001E-01  -1.29150       1.29150       316.249       317.540    
  43  0.259534      -1.34887      -101.282       101.282       250.289       351.571    
  44  0.816592E-01  -2.50520      -188.107       188.107       243.859       431.966    
  45  0.166083      -1.79527      -134.801       134.801       253.308       388.108    
  46  0.967370     -0.331741E-01  -2.49093       2.49093       293.045       295.536    
  47  0.371024     -0.991488      -74.4475       74.4475       255.750       330.197    
  48  0.941964     -0.597885E-01  -4.48932       4.48932       250.646       255.135    
  49  0.130219      -2.03854      -153.067       153.067       253.272       406.338    
  50  0.599455     -0.511734      -38.4244       38.4244       250.286       288.710    
  51  0.519323     -0.655230      -49.1990       49.1990       261.740       310.939    
  52  0.829175     -0.187324      -14.0656       14.0656       223.887       237.952    
  53  0.341525      -1.07433      -80.6681       80.6681       250.289       330.957    
  54  0.686480     -0.376178      -28.2459       28.2459       246.206       274.452    
  55  0.273157      -1.29771      -97.4407       97.4407       248.098       345.539    
  56  0.472999     -0.748662      -56.2145       56.2145       317.398       373.613    
  57  0.591611     -0.524905      -39.4134       39.4134       250.277       289.690    
  58  0.253673      -1.37171      -102.997       102.997       209.714       312.711    
  59  0.522398     -0.649326      -48.7557       48.7557       250.401       299.157    
  60  0.927744     -0.749995E-01  -5.63146       5.63146       224.643       230.275    
  61  0.470581     -0.753787      -56.5993       56.5993       247.717       304.316    
  62  0.365015      -1.00782      -75.6735       75.6735       189.837       265.510    
  63  0.732288     -0.311582      -23.3956       23.3956       262.721       286.117    
  64  0.536772E-01  -2.92477      -219.611       219.611       359.512       579.123    
  65  0.725826     -0.320444      -24.0611       24.0611       244.431       268.493    
  66  0.806822     -0.214652      -16.1175       16.1175       256.039       272.156    
  67  0.104580E-01  -4.56039      -342.424       342.424       249.912       592.336    
  68  0.818881     -0.199816      -15.0035       15.0035       285.567       300.571    
  69  0.330445      -1.10732      -83.1446       83.1446       248.738       331.882    
  70  0.316989      -1.14889      -86.2662       86.2662       251.568       337.834    
  71  0.776875     -0.252476      -18.9576       18.9576       256.190       275.148    
  72  0.782540     -0.245210      -18.4120       18.4120       258.141       276.553    
  73  0.972988     -0.273831E-01  -2.05610       2.05610       232.534       234.591    
loop,thermsimp(1:2)        8   53.9624       42.4059    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     87        229.87          0.82          1.12         23.63          0.14          0.05         25.77
Just calling func    0   0         25.77


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    229.87
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    75.0866               145
loop is:        8
neval is:       86
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        8      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    75.0866      0.500000    
T0,tstep,tfreq (these do not change):             72
current SAtemp,tstepnext are:    75.0866               145
loop is:        9
neval is:       86


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      145
neval,tstepnext:       86     145

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.878288E-01  -2.43237      -182.638       182.638       182.678       365.316    
   2  0.192227      -1.64908      -123.824       123.824       176.615       300.439    
   3  0.872733     -0.136126      -10.2212       10.2212       183.049       193.270    
   4  0.444113     -0.811675      -60.9459       60.9459       224.643       285.589    
   5  0.194382      -1.63793      -122.987       122.987       232.534       355.521    
   6  0.358074      -1.02702      -77.1152       77.1152       223.887       301.002    
   7  0.461693     -0.772855      -58.0311       58.0311       187.491       245.522    
   8  0.180202      -1.71368      -128.674       128.674       181.994       310.668    
   9  0.944954     -0.566187E-01  -4.25131       4.25131       240.875       245.127    
  10  0.738770     -0.302769      -22.7339       22.7339       251.012       273.746    
  11  0.822491E-01  -2.49800      -187.567       187.567       252.558       440.125    
  12  0.313602      -1.15963      -87.0727       87.0727       239.039       326.112    
  13  0.978185     -0.220567E-01  -1.65616       1.65616       250.646       252.302    
  14  0.540591E-01  -2.91768      -219.079       219.079       243.047       462.126    
  15  0.872885     -0.135951      -10.2081       10.2081       250.873       261.081    
  16  0.209079      -1.56504      -117.514       117.514       227.952       345.466    
  17  0.789205E-01  -2.53931      -190.668       190.668       255.512       446.181    
  18  0.746404     -0.292489      -21.9620       21.9620       189.837       211.799    
  19  0.110219      -2.20529      -165.588       165.588       257.184       422.772    
  20  0.656016     -0.421570      -31.6542       31.6542       244.431       276.086    
  21  0.665675     -0.406953      -30.5567       30.5567       256.039       286.596    
  22  0.563292     -0.573957      -43.0965       43.0965       246.206       289.303    
  23  0.615044     -0.486062      -36.4967       36.4967       256.190       292.687    
  24  0.128081      -2.05509      -154.310       154.310       258.141       412.451    
  25  0.459916     -0.776711      -58.3206       58.3206       262.721       321.042    
  26  0.433297     -0.836332      -62.7974       62.7974       256.405       319.203    
  27  0.225675      -1.48866      -111.778       111.778       250.286       362.064    
  28  0.808805     -0.212197      -15.9332       15.9332       249.306       265.240    
  29  0.578238     -0.547770      -41.1302       41.1302       250.277       291.407    
  30  0.569572     -0.562871      -42.2641       42.2641       273.435       315.699    
  31  0.291272      -1.23350      -92.6191       92.6191       250.289       342.908    
  32  0.144426      -1.93499      -145.292       145.292       214.200       359.492    
  33  0.908321     -0.961572E-01  -7.22012       7.22012       293.045       300.265    
  34  0.593166     -0.522281      -39.2163       39.2163       245.610       284.826    
  35  0.327630      -1.11587      -83.7870       83.7870       250.401       334.188    
  36  0.823214E-01  -2.49712      -187.501       187.501       285.567       473.068    
  37  0.742531     -0.297691      -22.3526       22.3526       247.717       270.070    
  38  0.476201E-01  -3.04450      -228.601       228.601       246.946       475.548    
  39  0.183829      -1.69375      -127.178       127.178       244.735       371.913    
  40  0.417257     -0.874053      -65.6297       65.6297       261.740       327.370    
  41  0.647723E-01  -2.73688      -205.503       205.503       209.714       415.216    
  42  0.123950E-01  -4.39046      -329.665       329.665       246.931       576.596    
  43  0.281372E-01  -3.57066      -268.109       268.109       251.161       519.271    
  44  0.883044     -0.124380      -9.33927       9.33927       316.249       325.588    
  45  0.445413     -0.808754      -60.7266       60.7266       252.992       313.719    
  46  0.418101     -0.872031      -65.4779       65.4779       247.129       312.607    
  47  0.301534      -1.19887      -90.0193       90.0193       255.750       345.769    
  48  0.674500     -0.393783      -29.5678       29.5678       285.045       314.612    
  49  0.732783     -0.310905      -23.3448       23.3448       250.289       273.634    
  50  0.970355     -0.300929E-01  -2.25958       2.25958       248.738       250.997    
  51  0.981589     -0.185824E-01  -1.39529       1.39529       251.224       252.620    
  52  0.677253     -0.389711      -29.2620       29.2620       251.568       280.830    
  53  0.800731     -0.222230      -16.6865       16.6865       268.071       284.758    
  54  0.529544     -0.635738      -47.7354       47.7354       248.098       295.834    
  55  0.814619     -0.205035      -15.3954       15.3954       253.404       268.799    
  56  0.909218     -0.951702E-01  -7.14601       7.14601       250.289       257.435    
  57  0.269472      -1.31129      -98.4604       98.4604       228.323       326.784    
  58  0.166504      -1.79274      -134.610       134.610       250.354       384.964    
  59  0.328775      -1.11238      -83.5249       83.5249       254.170       337.695    
  60  0.333602      -1.09781      -82.4307       82.4307       317.398       399.829    
  61  0.213893      -1.54228      -115.804       115.804       253.828       369.633    
  62  0.401720     -0.911999      -68.4789       68.4789       253.308       321.787    
  63  0.453769     -0.790168      -59.3310       59.3310       181.022       240.353    
  64  0.649690E-01  -2.73384      -205.275       205.275       253.272       458.547    
  65  0.510128     -0.673093      -50.5403       50.5403       243.859       294.399    
  66  0.430053     -0.843847      -63.3616       63.3616       254.890       318.252    
  67  0.528469E-01  -2.94036      -220.781       220.781       250.810       471.591    
  68  0.887506     -0.119339      -8.96080       8.96080       250.289       259.250    
  69  0.499442     -0.694264      -52.1299       52.1299       248.838       300.968    
  70  0.432451     -0.838287      -62.9442       62.9442       250.870       313.814    
  71  0.637121     -0.450796      -33.8487       33.8487       359.512       393.361    
  72  0.523182     -0.647826      -48.6430       48.6430       249.912       298.555    
  73  0.221333      -1.50809      -113.237       113.237       229.865       343.102    
loop,thermsimp(1:2)        9   182.638       123.824    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     88        236.90          0.86          1.12         23.80          0.00          0.05         25.84
Just calling func    0   0         25.84


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    236.90
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    75.0866               145
loop is:        9
neval is:       87
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        9      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    75.0866      0.500000    
T0,tstep,tfreq (these do not change):             72
current SAtemp,tstepnext are:    75.0866               145
loop is:       10
neval is:       87


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      145
neval,tstepnext:       87     145

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.611807     -0.491339      -36.8930       36.8930       183.049       219.942    
   2  0.877337     -0.130865      -9.82618       9.82618       189.837       199.663    
   3  0.821280     -0.196891      -14.7839       14.7839       181.022       195.806    
   4  0.989636     -0.104181E-01 -0.782260      0.782260       240.875       241.658    
   5  0.492813     -0.707625      -53.1332       53.1332       187.491       240.624    
   6  0.904083     -0.100835      -7.57133       7.57133       248.738       256.309    
   7  0.490620     -0.712086      -53.4681       53.4681       250.646       304.114    
   8  0.572439     -0.557850      -41.8870       41.8870       251.224       293.111    
   9  0.588753     -0.529749      -39.7771       39.7771       250.289       290.066    
  10  0.341799      -1.07353      -80.6078       80.6078       250.289       330.897    
  11  0.449605     -0.799385      -60.0231       60.0231       250.873       310.896    
  12  0.740720     -0.300132      -22.5359       22.5359       249.306       271.842    
  13  0.173164E-01  -4.05610      -304.559       304.559       253.404       557.963    
  14  0.828389     -0.188272      -14.1367       14.1367       247.717       261.854    
  15  0.110451      -2.20318      -165.430       165.430       250.289       415.718    
  16  0.646816     -0.435693      -32.7147       32.7147       251.012       283.727    
  17  0.857676     -0.153529      -11.5279       11.5279       244.431       255.959    
  18  0.691202E-02  -4.97449      -373.518       373.518       251.568       625.086    
  19  0.530885     -0.633210      -47.5456       47.5456       268.071       315.617    
  20  0.742957     -0.297117      -22.3095       22.3095       245.610       267.919    
  21  0.883526E-01  -2.42642      -182.192       182.192       224.643       406.835    
  22  0.599138     -0.512263      -38.4641       38.4641       256.039       294.503    
  23  0.476407     -0.741482      -55.6754       55.6754       246.206       301.882    
  24  0.509994E-01  -2.97594      -223.453       223.453       250.277       473.731    
  25  0.669768     -0.400824      -30.0965       30.0965       256.190       286.287    
  26  0.874430     -0.134183      -10.0753       10.0753       243.859       253.934    
  27  0.830739     -0.185440      -13.9240       13.9240       248.098       262.022    
  28  0.166673      -1.79172      -134.534       134.534       249.912       384.446    
  29  0.578742     -0.546898      -41.0647       41.0647       293.045       334.110    
  30  0.433531     -0.835791      -62.7567       62.7567       176.615       239.372    
  31  0.979127     -0.210935E-01  -1.58384       1.58384       248.838       250.422    
  32  0.310252      -1.17037      -87.8792       87.8792       223.887       311.766    
  33  0.686879     -0.375597      -28.2023       28.2023       181.994       210.196    
  34  0.243104      -1.41427      -106.193       106.193       247.129       353.322    
  35  0.459407     -0.777818      -58.4037       58.4037       252.992       311.396    
  36  0.332163      -1.10213      -82.7551       82.7551       250.870       333.625    
  37  0.512243     -0.668956      -50.2296       50.2296       285.045       335.274    
  38  0.323240      -1.12936      -84.7999       84.7999       273.435       358.234    
  39  0.667455     -0.404284      -30.3563       30.3563       254.890       285.246    
  40  0.460037     -0.776449      -58.3009       58.3009       256.405       314.706    
  41  0.227415      -1.48098      -111.202       111.202       262.721       373.923    
  42  0.636494     -0.451780      -33.9226       33.9226       253.308       287.231    
  43  0.432078     -0.839149      -63.0088       63.0088       316.249       379.257    
  44  0.609015     -0.495913      -37.2364       37.2364       239.039       276.276    
  45  0.427755     -0.849205      -63.7639       63.7639       228.323       292.087    
  46  0.496712     -0.699745      -52.5415       52.5415       261.740       314.282    
  47  0.295308      -1.21974      -91.5859       91.5859       250.401       341.987    
  48  0.928979     -0.736692E-01  -5.53157       5.53157       254.170       259.702    
  49  0.245696E-01  -3.70625      -278.289       278.289       250.289       528.578    
  50  0.833617E-01  -2.48457      -186.558       186.558       229.865       416.423    
  51  0.499690     -0.693767      -52.0926       52.0926       227.952       280.045    
  52  0.320552      -1.13771      -85.4269       85.4269       255.750       341.177    
  53  0.151030E-01  -4.19286      -314.828       314.828       232.534       547.362    
  54  0.551054     -0.595922      -44.7457       44.7457       214.200       258.946    
  55  0.786630     -0.239997      -18.0205       18.0205       250.286       268.307    
  56  0.793760E-01  -2.53356      -190.236       190.236       182.678       372.915    
  57  0.456771     -0.783574      -58.8359       58.8359       253.828       312.664    
  58  0.613263     -0.488962      -36.7145       36.7145       244.735       281.450    
  59  0.407581     -0.897515      -67.3914       67.3914       250.354       317.745    
  60  0.214329      -1.54024      -115.651       115.651       359.512       475.164    
  61  0.543052     -0.610551      -45.8442       45.8442       317.398       363.243    
  62  0.861407     -0.149188      -11.2020       11.2020       258.141       269.343    
  63  0.727563     -0.318055      -23.8817       23.8817       209.714       233.595    
  64  0.954867     -0.461830E-01  -3.46772       3.46772       257.184       260.652    
  65  0.209413      -1.56345      -117.394       117.394       252.558       369.952    
  66  0.218233E-02  -6.12736      -460.083       460.083       255.512       715.595    
  67  0.990675     -0.936839E-02 -0.703441      0.703441       253.272       253.975    
  68  0.874543     -0.134054      -10.0656       10.0656       243.047       253.113    
  69  0.276161      -1.28677      -96.6194       96.6194       250.810       347.429    
  70  0.319398      -1.14132      -85.6975       85.6975       285.567       371.265    
  71  0.160691      -1.82827      -137.279       137.279       246.946       384.225    
  72  0.612149     -0.490779      -36.8509       36.8509       251.161       288.012    
  73  0.832427     -0.183410      -13.7716       13.7716       236.903       250.675    
loop,thermsimp(1:2)       10   36.8930       9.82618    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     89        231.69          0.87          1.12         23.88          0.00          0.05         25.91
Just calling func    0   0         25.91


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     90        244.92          0.86          1.12         23.59          0.12          0.05         25.75
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    231.69
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    75.0866               145
loop is:       10
neval is:       89
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       10      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    75.0866      0.500000    
T0,tstep,tfreq (these do not change):             72
current SAtemp,tstepnext are:    75.0866               145
loop is:       11
neval is:       89


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      145
neval,tstepnext:       89     145

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.356780      -1.03064      -77.3870       77.3870       181.022       258.409    
   2  0.318207      -1.14505      -85.9783       85.9783       189.837       275.815    
   3  0.410972E-01  -3.19181      -239.663       239.663       181.994       421.656    
   4  0.217948      -1.52350      -114.394       114.394       183.049       297.443    
   5  0.460755     -0.774888      -58.1837       58.1837       209.714       267.897    
   6  0.694214     -0.364975      -27.4047       27.4047       176.615       204.020    
   7  0.237764      -1.43648      -107.860       107.860       187.491       295.351    
   8  0.635477     -0.453379      -34.0427       34.0427       240.875       274.918    
   9  0.882831E-01  -2.42721      -182.251       182.251       248.838       431.089    
  10  0.889613     -0.116969      -8.78279       8.78279       236.903       245.686    
  11  0.236395      -1.44225      -108.294       108.294       243.047       351.341    
  12  0.785560     -0.241359      -18.1228       18.1228       243.859       261.981    
  13  0.253594      -1.37202      -103.020       103.020       253.272       356.292    
  14  0.767743     -0.264300      -19.8454       19.8454       244.431       264.277    
  15  0.425111     -0.855405      -64.2295       64.2295       248.738       312.967    
  16  0.334680E-01  -3.39717      -255.082       255.082       214.200       469.282    
  17  0.737903     -0.303943      -22.8220       22.8220       254.170       276.992    
  18  0.530906     -0.633170      -47.5426       47.5426       257.184       304.727    
  19  0.811772     -0.208536      -15.6583       15.6583       247.717       263.375    
  20  0.781494     -0.246548      -18.5125       18.5125       248.098       266.611    
  21  0.668871     -0.402164      -30.1972       30.1972       245.610       275.807    
  22  0.609633     -0.494898      -37.1602       37.1602       250.286       287.446    
  23  0.732795E-01  -2.61347      -196.237       196.237       258.141       454.378    
  24  0.999755     -0.244962E-03 -0.183934E-01  0.183934E-01   249.306       249.325    
  25  0.556911     -0.585350      -43.9520       43.9520       239.039       282.991    
  26  0.381942     -0.962485      -72.2698       72.2698       227.952       300.222    
  27  0.230973      -1.46546      -110.036       110.036       244.735       354.771    
  28  0.791084     -0.234351      -17.5967       17.5967       251.012       268.609    
  29  0.122039      -2.10341      -157.938       157.938       254.890       412.828    
  30  0.411383     -0.888231      -66.6943       66.6943       256.190       322.885    
  31  0.753656     -0.282819      -21.2359       21.2359       253.308       274.544    
  32  0.846821     -0.166266      -12.4844       12.4844       251.161       263.646    
  33  0.577745     -0.548622      -41.1942       41.1942       250.289       291.483    
  34  0.859903     -0.150936      -11.3333       11.3333       228.323       239.657    
  35  0.915816     -0.879395E-01  -6.60308       6.60308       251.224       257.828    
  36  0.220499      -1.51186      -113.521       113.521       256.039       369.559    
  37  0.539962     -0.616256      -46.2726       46.2726       246.206       292.479    
  38  0.810725     -0.209827      -15.7552       15.7552       250.646       266.401    
  39  0.901567     -0.103621      -7.78053       7.78053       250.873       258.653    
  40  0.196148      -1.62888      -122.307       122.307       252.992       375.300    
  41  0.413437     -0.883250      -66.3202       66.3202       223.887       290.207    
  42  0.192892      -1.64562      -123.564       123.564       253.828       377.392    
  43  0.194290      -1.63840      -123.022       123.022       261.740       384.762    
  44  0.988313     -0.117563E-01 -0.882741      0.882741       256.405       257.288    
  45  0.917980     -0.855792E-01  -6.42585       6.42585       268.071       274.497    
  46  0.136083      -1.99449      -149.759       149.759       250.354       400.113    
  47  0.847126     -0.165905      -12.4573       12.4573       250.289       262.746    
  48  0.513003     -0.667474      -50.1183       50.1183       250.870       300.988    
  49  0.562161     -0.575967      -43.2474       43.2474       293.045       336.292    
  50  0.926079     -0.767957E-01  -5.76633       5.76633       285.045       290.811    
  51  0.890313     -0.116182      -8.72371       8.72371       255.750       264.474    
  52  0.857665     -0.153542      -11.5289       11.5289       250.401       261.930    
  53  0.599877     -0.511031      -38.3716       38.3716       250.810       289.181    
  54  0.835330     -0.179929      -13.5102       13.5102       247.129       260.640    
  55  0.323336      -1.12906      -84.7776       84.7776       273.435       358.212    
  56  0.305042      -1.18731      -89.1508       89.1508       317.398       406.549    
  57  0.980883     -0.193016E-01  -1.44929       1.44929       252.558       254.008    
  58  0.129682      -2.04267      -153.377       153.377       285.567       438.944    
  59  0.738352     -0.303335      -22.7764       22.7764       182.678       205.455    
  60  0.383117     -0.959416      -72.0393       72.0393       262.721       334.761    
  61  0.524900     -0.644547      -48.3969       48.3969       316.249       364.645    
  62  0.594829     -0.519481      -39.0060       39.0060       246.946       285.952    
  63  0.596925     -0.515963      -38.7419       38.7419       249.912       288.653    
  64  0.462523     -0.771060      -57.8963       57.8963       224.643       282.540    
  65  0.837977     -0.176764      -13.2726       13.2726       250.289       263.561    
  66  0.380204     -0.967046      -72.6122       72.6122       229.865       302.477    
  67  0.135974E-01  -4.29788      -322.713       322.713       250.277       572.990    
  68  0.816466     -0.202771      -15.2254       15.2254       359.512       374.738    
  69  0.877970     -0.130143      -9.77197       9.77197       250.289       260.061    
  70  0.468378     -0.758480      -56.9517       56.9517       232.534       289.486    
  71  0.238817E-01  -3.73464      -280.422       280.422       253.404       533.826    
  72  0.517025     -0.659665      -49.5320       49.5320       251.568       301.100    
  73  0.583879     -0.538062      -40.4013       40.4013       231.693       272.094    
loop,thermsimp(1:2)       11   77.3870       85.9783    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     91        229.06          0.86          1.12         23.65          0.08          0.05         25.75
Just calling func    0   0         25.75


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    229.06
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    75.0866               145
loop is:       11
neval is:       90
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       11      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    75.0866      0.500000    
T0,tstep,tfreq (these do not change):             72
current SAtemp,tstepnext are:    75.0866               145
loop is:       12
neval is:       90


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      145
neval,tstepnext:       90     145

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.759790E-01  -2.57730      -193.521       193.521       176.615       370.135    
   2  0.804470     -0.217571      -16.3367       16.3367       182.678       199.015    
   3  0.984017     -0.161120E-01  -1.20979       1.20979       228.323       229.533    
   4  0.587639     -0.531643      -39.9193       39.9193       236.903       276.822    
   5  0.523810     -0.646626      -48.5529       48.5529       249.306       297.859    
   6  0.930607     -0.719181E-01  -5.40008       5.40008       252.558       257.959    
   7  0.360114E-01  -3.32392      -249.582       249.582       256.405       505.987    
   8  0.963815     -0.368556E-01  -2.76736       2.76736       251.224       253.992    
   9  0.201264E-01  -3.90572      -293.267       293.267       181.022       474.289    
  10  0.954897     -0.461522E-01  -3.46541       3.46541       250.873       254.338    
  11  0.374160     -0.983071      -73.8155       73.8155       250.289       324.104    
  12  0.174967      -1.74316      -130.888       130.888       247.129       378.017    
  13  0.381618     -0.963335      -72.3335       72.3335       250.401       322.735    
  14  0.191097      -1.65498      -124.267       124.267       243.859       368.125    
  15  0.425287     -0.854991      -64.1984       64.1984       250.289       314.487    
  16  0.426180     -0.852893      -64.0409       64.0409       247.717       311.758    
  17  0.615671     -0.485042      -36.4202       36.4202       250.289       286.709    
  18  0.787264     -0.239192      -17.9601       17.9601       251.161       269.122    
  19  0.812636     -0.207472      -15.5784       15.5784       244.431       260.010    
  20  0.917241E-01  -2.38897      -179.380       179.380       255.750       435.130    
  21  0.671310     -0.398525      -29.9239       29.9239       250.646       280.569    
  22  0.548174     -0.601162      -45.1392       45.1392       248.098       293.238    
  23  0.134851      -2.00359      -150.442       150.442       209.714       360.156    
  24  0.373236     -0.985545      -74.0012       74.0012       251.012       325.013    
  25  0.578774     -0.546843      -41.0606       41.0606       231.693       272.754    
  26  0.910021     -0.942872E-01  -7.07970       7.07970       268.071       275.151    
  27  0.192323      -1.64858      -123.786       123.786       253.308       377.094    
  28  0.366342      -1.00419      -75.4011       75.4011       240.875       316.276    
  29  0.686994     -0.375430      -28.1898       28.1898       245.610       273.800    
  30  0.486551     -0.720414      -54.0935       54.0935       189.837       243.930    
  31  0.256801      -1.35945      -102.077       102.077       254.170       356.247    
  32  0.284977      -1.25535      -94.2598       94.2598       224.643       318.903    
  33  0.903072     -0.101953      -7.65527       7.65527       239.039       246.694    
  34  0.226450      -1.48523      -111.521       111.521       246.946       358.467    
  35  0.446078     -0.807261      -60.6145       60.6145       250.286       310.900    
  36  0.152634      -1.87971      -141.141       141.141       249.912       391.053    
  37  0.511955     -0.669518      -50.2719       50.2719       250.810       301.082    
  38  0.513138     -0.667210      -50.0985       50.0985       232.534       282.633    
  39  0.637309     -0.450501      -33.8266       33.8266       223.887       257.713    
  40  0.861477     -0.149107      -11.1959       11.1959       285.045       296.241    
  41  0.817364     -0.201671      -15.1428       15.1428       250.289       265.431    
  42  0.793820     -0.230898      -17.3373       17.3373       246.206       263.544    
  43  0.253309      -1.37315      -103.105       103.105       187.491       290.596    
  44  0.702532     -0.353065      -26.5104       26.5104       183.049       209.559    
  45  0.822324     -0.195620      -14.6885       14.6885       227.952       242.641    
  46  0.720485     -0.327831      -24.6157       24.6157       250.870       275.485    
  47  0.881589     -0.126029      -9.46312       9.46312       251.568       261.031    
  48  0.584479     -0.537035      -40.3242       40.3242       229.865       270.189    
  49  0.697197     -0.360688      -27.0828       27.0828       257.184       284.267    
  50  0.320931      -1.13653      -85.3382       85.3382       248.738       334.076    
  51  0.780071     -0.248371      -18.6493       18.6493       256.190       274.840    
  52  0.318322E-01  -3.44728      -258.844       258.844       262.721       521.566    
  53  0.693387     -0.366167      -27.4942       27.4942       293.045       320.539    
  54  0.332128      -1.10223      -82.7630       82.7630       243.047       325.810    
  55  0.891883E-01  -2.41701      -181.485       181.485       244.735       426.220    
  56  0.960735     -0.400567E-01  -3.00772       3.00772       253.272       256.279    
  57  0.726634     -0.319332      -23.9776       23.9776       273.435       297.412    
  58  0.867850     -0.141737      -10.6425       10.6425       316.249       326.891    
  59  0.960075     -0.407444E-01  -3.05936       3.05936       256.039       259.098    
  60  0.303374E-01  -3.49537      -262.456       262.456       359.512       621.968    
  61  0.159557      -1.83535      -137.810       137.810       252.992       390.803    
  62  0.487506     -0.718453      -53.9462       53.9462       253.828       307.774    
  63  0.978612E-01  -2.32420      -174.517       174.517       261.740       436.257    
  64  0.405010     -0.903843      -67.8665       67.8665       250.354       318.220    
  65  0.199088      -1.61401      -121.190       121.190       317.398       438.589    
  66  0.621424     -0.475741      -35.7218       35.7218       254.890       290.612    
  67  0.630612     -0.461065      -34.6198       34.6198       181.994       216.613    
  68  0.842429     -0.171466      -12.8748       12.8748       248.838       261.713    
  69  0.887493     -0.119355      -8.96197       8.96197       285.567       294.529    
  70  0.813538     -0.206363      -15.4951       15.4951       258.141       273.636    
  71  0.901945     -0.103202      -7.74909       7.74909       214.200       221.949    
  72  0.789044E-01  -2.53952      -190.684       190.684       253.404       444.088    
  73  0.325005      -1.12391      -84.3910       84.3910       229.060       313.451    
loop,thermsimp(1:2)       12   193.521       16.3367    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     92        196.53          0.86          1.14         23.57          0.16          0.05         25.78
Just calling func    0   0         25.78


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     93        239.20          0.86          1.12         23.72          0.02          0.06         25.78
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    196.53
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    75.0866               145
loop is:       12
neval is:       92
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       12      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    75.0866      0.500000    
T0,tstep,tfreq (these do not change):             72
current SAtemp,tstepnext are:    75.0866               145
loop is:       13
neval is:       92


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      145
neval,tstepnext:       92     145

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.872435     -0.136467      -10.2468       10.2468       182.678       192.925    
   2  0.311340      -1.16687      -87.6163       87.6163       183.049       270.665    
   3  0.293828      -1.22476      -91.9631       91.9631       181.994       273.957    
   4  0.586668     -0.533296      -40.0434       40.0434       214.200       254.244    
   5  0.360311      -1.02079      -76.6475       76.6475       228.323       304.971    
   6  0.315643      -1.15314      -86.5855       86.5855       227.952       314.538    
   7  0.481464     -0.730923      -54.8825       54.8825       189.837       244.719    
   8  0.720279     -0.328116      -24.6371       24.6371       239.039       263.676    
   9  0.551471     -0.595166      -44.6890       44.6890       251.224       295.913    
  10  0.524434     -0.645435      -48.4636       48.4636       250.873       299.336    
  11  0.781600     -0.246412      -18.5022       18.5022       253.272       271.774    
  12  0.353648      -1.03945      -78.0490       78.0490       223.887       301.936    
  13  0.451044     -0.796190      -59.7832       59.7832       252.558       312.342    
  14  0.325353      -1.12284      -84.3105       84.3105       256.039       340.349    
  15  0.312157      -1.16425      -87.4194       87.4194       244.431       331.851    
  16  0.432418     -0.838362      -62.9498       62.9498       251.568       314.518    
  17  0.296543      -1.21556      -91.2725       91.2725       248.838       340.111    
  18  0.705416     -0.348967      -26.2028       26.2028       246.206       272.409    
  19  0.146505      -1.92069      -144.218       144.218       250.289       394.507    
  20  0.471608     -0.751607      -56.4356       56.4356       251.161       307.597    
  21  0.633095     -0.457134      -34.3247       34.3247       229.865       264.190    
  22  0.754855     -0.281230      -21.1166       21.1166       231.693       252.810    
  23  0.444501E-01  -3.11339      -233.774       233.774       258.141       491.915    
  24  0.160973      -1.82652      -137.147       137.147       245.610       382.757    
  25  0.943694     -0.579536E-01  -4.35154       4.35154       256.190       260.542    
  26  0.187304      -1.67502      -125.772       125.772       268.071       393.843    
  27  0.840922     -0.173257      -13.0093       13.0093       250.870       263.879    
  28  0.888648     -0.118054      -8.86426       8.86426       236.903       245.767    
  29  0.920614E-01  -2.38530      -179.104       179.104       250.646       429.750    
  30  0.906493     -0.981722E-01  -7.37142       7.37142       232.534       239.906    
  31  0.221761      -1.50616      -113.092       113.092       257.184       370.277    
  32  0.248725      -1.39141      -104.476       104.476       250.289       354.765    
  33  0.315928      -1.15224      -86.5180       86.5180       187.491       274.009    
  34  0.949967     -0.513283E-01  -3.85407       3.85407       254.890       258.744    
  35  0.802748     -0.219715      -16.4976       16.4976       248.098       264.596    
  36  0.558987     -0.581628      -43.6725       43.6725       285.567       329.240    
  37  0.638133     -0.449209      -33.7296       33.7296       285.045       318.774    
  38  0.637852     -0.449648      -33.7626       33.7626       273.435       307.197    
  39  0.382908     -0.959961      -72.0802       72.0802       249.306       321.387    
  40  0.982834     -0.173149E-01  -1.30012       1.30012       250.810       252.110    
  41  0.497022     -0.699120      -52.4946       52.4946       253.828       306.323    
  42  0.263620      -1.33325      -100.109       100.109       250.286       350.395    
  43  0.296939      -1.21423      -91.1724       91.1724       247.717       338.889    
  44  0.784161     -0.243141      -18.2567       18.2567       229.060       247.317    
  45  0.545321     -0.606380      -45.5310       45.5310       250.289       295.820    
  46  0.770080     -0.261260      -19.6172       19.6172       240.875       260.492    
  47  0.358755      -1.02511      -76.9724       76.9724       250.354       327.326    
  48  0.325126      -1.12354      -84.3630       84.3630       224.643       309.006    
  49  0.599396     -0.511832      -38.4318       38.4318       293.045       331.477    
  50  0.323708      -1.12791      -84.6913       84.6913       250.401       335.093    
  51  0.329142      -1.11127      -83.4411       83.4411       250.289       333.730    
  52  0.685661     -0.377371      -28.3355       28.3355       251.012       279.347    
  53  0.360361      -1.02065      -76.6370       76.6370       243.047       319.684    
  54  0.665281     -0.407545      -30.6012       30.6012       316.249       346.850    
  55  0.983321     -0.168196E-01  -1.26293       1.26293       248.738       250.001    
  56  0.644247     -0.439672      -33.0135       33.0135       254.170       287.184    
  57  0.735645     -0.307008      -23.0522       23.0522       246.946       269.998    
  58  0.680276     -0.385257      -28.9277       28.9277       209.714       238.641    
  59  0.864073     -0.146098      -10.9700       10.9700       243.859       254.829    
  60  0.788785     -0.237262      -17.8152       17.8152       176.615       194.430    
  61  0.429383     -0.845405      -63.4786       63.4786       253.308       316.787    
  62  0.798857     -0.224573      -16.8624       16.8624       247.129       263.992    
  63  0.946983     -0.544737E-01  -4.09024       4.09024       252.992       257.083    
  64  0.229664      -1.47114      -110.463       110.463       249.912       360.374    
  65  0.655912     -0.421729      -31.6662       31.6662       244.735       276.401    
  66  0.236982      -1.43977      -108.107       108.107       255.750       363.857    
  67  0.588628     -0.529960      -39.7929       39.7929       261.740       301.533    
  68  0.430113     -0.843707      -63.3511       63.3511       317.398       380.749    
  69  0.384455     -0.955929      -71.7775       71.7775       253.404       325.181    
  70  0.162044E-01  -4.12247      -309.542       309.542       181.022       490.564    
  71  0.769503     -0.262010      -19.6734       19.6734       256.405       276.079    
  72  0.220892      -1.51008      -113.387       113.387       262.721       376.108    
  73  0.978294E-01  -2.32453      -174.541       174.541       196.531       371.072    
loop,thermsimp(1:2)       13   10.2468       87.6163    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     94        220.15          0.86          1.12         23.62          0.11          0.05         25.77
Just calling func    0   0         25.77


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    220.15
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    75.0866               145
loop is:       13
neval is:       93
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       13      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    75.0866      0.500000    
T0,tstep,tfreq (these do not change):             72
current SAtemp,tstepnext are:    75.0866               145
loop is:       14
neval is:       93


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      145
neval,tstepnext:       93     145

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.344597      -1.06538      -79.9958       79.9958       182.678       262.674    
   2  0.267720      -1.31781      -98.9502       98.9502       176.615       275.565    
   3  0.279825      -1.27359      -95.6297       95.6297       209.714       305.343    
   4  0.281095      -1.26906      -95.2897       95.2897       232.534       327.824    
   5  0.245867      -1.40297      -105.344       105.344       189.837       295.181    
   6  0.914239     -0.896636E-01  -6.73253       6.73253       236.903       243.636    
   7  0.180116      -1.71415      -128.710       128.710       229.060       357.770    
   8  0.567917     -0.565780      -42.4825       42.4825       248.738       291.220    
   9  0.431941     -0.839465      -63.0326       63.0326       250.810       313.842    
  10  0.877920     -0.130199      -9.77624       9.77624       231.693       241.469    
  11  0.280355      -1.27170      -95.4874       95.4874       214.200       309.688    
  12  0.486947     -0.719601      -54.0324       54.0324       243.859       297.891    
  13  0.216546      -1.52995      -114.879       114.879       252.992       367.871    
  14  0.483718E-02  -5.33142      -400.319       400.319       254.890       655.209    
  15  0.785152E-03  -7.14963      -536.842       536.842       240.875       777.717    
  16  0.300781      -1.20137      -90.2069       90.2069       256.190       346.397    
  17  0.869691     -0.139618      -10.4834       10.4834       239.039       249.523    
  18  0.694261E-01  -2.66749      -200.293       200.293       250.870       451.163    
  19  0.635475     -0.453382      -34.0429       34.0429       247.129       281.172    
  20  0.894977     -0.110958      -8.33142       8.33142       229.865       238.196    
  21  0.442267     -0.815841      -61.2587       61.2587       248.098       309.357    
  22  0.283362      -1.26103      -94.6864       94.6864       246.946       341.633    
  23  0.518611     -0.656601      -49.3019       49.3019       183.049       232.351    
  24  0.858122E-01  -2.45559      -184.382       184.382       253.272       437.654    
  25  0.461153     -0.774026      -58.1190       58.1190       246.206       304.325    
  26  0.180026      -1.71465      -128.748       128.748       181.994       310.741    
  27  0.446938E-01  -3.10792      -233.363       233.363       187.491       420.854    
  28  0.152352      -1.88156      -141.280       141.280       256.405       397.685    
  29  0.163937E-01  -4.11086      -308.671       308.671       244.735       553.406    
  30  0.721347     -0.326635      -24.5259       24.5259       251.012       275.538    
  31  0.813323     -0.206626      -15.5149       15.5149       254.170       269.685    
  32  0.569343     -0.563273      -42.2942       42.2942       250.289       292.583    
  33  0.275899      -1.28772      -96.6905       96.6905       251.224       347.915    
  34  0.933187     -0.691492E-01  -5.19218       5.19218       250.873       256.065    
  35  0.716570     -0.333279      -25.0248       25.0248       261.740       286.765    
  36  0.405413     -0.902848      -67.7918       67.7918       223.887       291.678    
  37  0.907528     -0.970314E-01  -7.28576       7.28576       228.323       235.609    
  38  0.554651     -0.589416      -44.2572       44.2572       253.828       298.085    
  39  0.419962     -0.867592      -65.1445       65.1445       273.435       338.579    
  40  0.824173     -0.193375      -14.5199       14.5199       251.161       265.681    
  41  0.865647     -0.144278      -10.8334       10.8334       224.643       235.477    
  42  0.300944      -1.20083      -90.1664       90.1664       252.558       342.725    
  43  0.339688      -1.07973      -81.0732       81.0732       251.568       332.641    
  44  0.217032      -1.52771      -114.711       114.711       227.952       342.663    
  45  0.792618E-01  -2.53500      -190.345       190.345       253.308       443.652    
  46  0.997677     -0.232582E-02 -0.174638      0.174638       285.045       285.219    
  47  0.174239      -1.74733      -131.201       131.201       243.047       374.248    
  48  0.834084     -0.181422      -13.6223       13.6223       249.306       262.929    
  49  0.324404      -1.12577      -84.5300       84.5300       253.404       337.934    
  50  0.927598     -0.751564E-01  -5.64324       5.64324       250.354       255.997    
  51  0.981384     -0.187911E-01  -1.41096       1.41096       285.567       286.978    
  52  0.849105     -0.163572      -12.2821       12.2821       293.045       305.327    
  53  0.148698      -1.90584      -143.103       143.103       244.431       387.535    
  54  0.389930     -0.941789      -70.7158       70.7158       250.289       321.004    
  55  0.183568      -1.69517      -127.285       127.285       250.401       377.686    
  56  0.661220     -0.413669      -31.0610       31.0610       247.717       278.778    
  57  0.242183      -1.41806      -106.477       106.477       248.838       355.316    
  58  0.182262      -1.70231      -127.821       127.821       256.039       383.860    
  59  0.299801      -1.20464      -90.4521       90.4521       316.249       406.701    
  60  0.950117     -0.511698E-01  -3.84217       3.84217       250.286       254.128    
  61  0.184593      -1.68960      -126.867       126.867       250.289       377.155    
  62  0.730970     -0.313382      -23.5308       23.5308       249.912       273.442    
  63  0.753232E-01  -2.58597      -194.171       194.171       255.750       449.921    
  64  0.501460     -0.690231      -51.8271       51.8271       257.184       309.011    
  65  0.513248E-01  -2.96958      -222.976       222.976       196.531       419.507    
  66  0.931416     -0.710492E-01  -5.33485       5.33485       262.721       268.056    
  67  0.637420E-01  -2.75291      -206.707       206.707       317.398       524.105    
  68  0.322234E-01  -3.43506      -257.927       257.927       245.610       503.537    
  69  0.791156     -0.234260      -17.5898       17.5898       268.071       285.661    
  70  0.606746     -0.499645      -37.5166       37.5166       250.289       287.805    
  71  0.115774      -2.15611      -161.895       161.895       250.646       412.541    
  72  0.574132     -0.554896      -41.6653       41.6653       181.022       222.687    
  73  0.877193     -0.131028      -9.83847       9.83847       220.149       229.988    
loop,thermsimp(1:2)       14   79.9958       98.9502    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     95        208.93          0.85          1.12         23.60          0.16          0.06         25.79
Just calling func    0   0         25.79


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     96        216.28          0.87          1.13         23.95          0.01          0.05         26.01
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    208.93
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    75.0866               145
loop is:       14
neval is:       95
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       14      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    75.0866      0.500000    
T0,tstep,tfreq (these do not change):             72
current SAtemp,tstepnext are:    75.0866               145
loop is:       15
neval is:       95


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      145
neval,tstepnext:       95     145

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.229949      -1.46990      -110.370       110.370       181.022       291.391    
   2  0.322822      -1.13066      -84.8971       84.8971       220.149       305.046    
   3  0.327586      -1.11601      -83.7971       83.7971       183.049       266.846    
   4  0.799078     -0.224296      -16.8417       16.8417       224.643       241.485    
   5  0.698072     -0.359433      -26.9886       26.9886       228.323       255.312    
   6  0.733871     -0.309421      -23.2334       23.2334       229.865       253.098    
   7  0.823872     -0.193740      -14.5473       14.5473       231.693       246.240    
   8  0.800045     -0.223087      -16.7509       16.7509       236.903       253.654    
   9  0.162010      -1.82010      -136.665       136.665       239.039       375.704    
  10  0.113138      -2.17915      -163.625       163.625       250.286       413.911    
  11  0.973966     -0.263784E-01  -1.98066       1.98066       250.354       252.334    
  12  0.998107     -0.189521E-02 -0.142305      0.142305       250.873       251.015    
  13  0.631351     -0.459893      -34.5318       34.5318       182.678       217.210    
  14  0.698229     -0.359208      -26.9717       26.9717       249.306       276.278    
  15  0.359252      -1.02373      -76.8685       76.8685       251.161       328.030    
  16  0.936266     -0.658562E-01  -4.94492       4.94492       262.721       267.666    
  17  0.843107     -0.170662      -12.8144       12.8144       254.170       266.985    
  18  0.181284      -1.70769      -128.225       128.225       249.912       378.136    
  19  0.354246      -1.03777      -77.9223       77.9223       251.012       328.934    
  20  0.981540     -0.186324E-01  -1.39904       1.39904       176.615       178.014    
  21  0.582284E-01  -2.84338      -213.500       213.500       247.717       461.217    
  22  0.935088     -0.671143E-01  -5.03939       5.03939       247.129       252.169    
  23  0.682144     -0.382515      -28.7217       28.7217       285.045       313.766    
  24  0.441439     -0.817715      -61.3994       61.3994       268.071       329.470    
  25  0.325829      -1.12138      -84.2008       84.2008       261.740       345.941    
  26  0.956968E-01  -2.34657      -176.196       176.196       285.567       461.763    
  27  0.465124E-01  -3.06804      -230.368       230.368       250.289       480.657    
  28  0.645503     -0.437726      -32.8674       32.8674       248.738       281.605    
  29  0.184751      -1.68875      -126.802       126.802       223.887       350.689    
  30  0.676303     -0.391115      -29.3675       29.3675       250.289       279.656    
  31  0.408248     -0.895880      -67.2686       67.2686       189.837       257.106    
  32  0.215511      -1.53474      -115.239       115.239       243.859       359.097    
  33  0.762109     -0.271666      -20.3985       20.3985       253.828       274.227    
  34  0.445022     -0.809632      -60.7925       60.7925       246.206       306.999    
  35  0.667113     -0.404797      -30.3948       30.3948       293.045       323.440    
  36  0.995785     -0.422376E-02 -0.317148      0.317148       209.714       210.031    
  37  0.278840      -1.27712      -95.8945       95.8945       257.184       353.079    
  38  0.624255     -0.471196      -35.3805       35.3805       248.098       283.479    
  39  0.368212     -0.999097      -75.0188       75.0188       214.200       289.219    
  40  0.330266      -1.10786      -83.1853       83.1853       181.994       265.179    
  41  0.969155     -0.313304E-01  -2.35250       2.35250       250.810       253.162    
  42  0.686816     -0.375688      -28.2091       28.2091       250.289       278.498    
  43  0.201053      -1.60419      -120.453       120.453       232.534       352.987    
  44  0.481166     -0.731544      -54.9291       54.9291       251.568       306.497    
  45  0.992829     -0.719725E-02 -0.540417      0.540417       253.404       253.944    
  46  0.665697     -0.406921      -30.5543       30.5543       273.435       303.989    
  47  0.991934E-02  -4.61327      -346.395       346.395       246.946       593.341    
  48  0.211644      -1.55285      -116.598       116.598       227.952       344.550    
  49  0.908243E-01  -2.39883      -180.120       180.120       252.558       432.678    
  50  0.643762     -0.440426      -33.0701       33.0701       256.190       289.260    
  51  0.568794E-01  -2.86682      -215.260       215.260       251.224       466.484    
  52  0.159466      -1.83592      -137.853       137.853       248.838       386.692    
  53  0.918851     -0.846310E-01  -6.35465       6.35465       229.060       235.415    
  54  0.865178     -0.144820      -10.8740       10.8740       252.992       263.866    
  55  0.826009     -0.191150      -14.3528       14.3528       243.047       257.400    
  56  0.665816E-02  -5.01191      -376.327       376.327       250.289       626.616    
  57  0.998155     -0.184716E-02 -0.138697      0.138697       250.401       250.540    
  58  0.875957E-01  -2.43502      -182.838       182.838       256.039       438.877    
  59  0.546955     -0.603388      -45.3064       45.3064       244.431       289.738    
  60  0.953933     -0.471617E-01  -3.54121       3.54121       256.405       259.946    
  61  0.131488      -2.02884      -152.339       152.339       316.249       468.587    
  62  0.415197     -0.879003      -66.0014       66.0014       250.646       316.647    
  63  0.543800E-02  -5.21434      -391.527       391.527       196.531       588.058    
  64  0.821907     -0.196128      -14.7266       14.7266       187.491       202.217    
  65  0.590302     -0.527122      -39.5798       39.5798       253.272       292.852    
  66  0.380117     -0.967276      -72.6295       72.6295       253.308       325.937    
  67  0.640684     -0.445218      -33.4299       33.4299       255.750       289.180    
  68  0.268290      -1.31569      -98.7904       98.7904       250.870       349.660    
  69  0.625870     -0.468612      -35.1865       35.1865       245.610       280.796    
  70  0.937362     -0.646862E-01  -4.85707       4.85707       317.398       322.255    
  71  0.246375      -1.40090      -105.189       105.189       244.735       349.924    
  72  0.163534      -1.81073      -135.962       135.962       254.890       390.852    
  73  0.231078      -1.46500      -110.002       110.002       208.927       318.929    
loop,thermsimp(1:2)       15   110.370       84.8971    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     97        221.70          0.87          1.12         23.59          0.14          0.05         25.76
Just calling func    0   0         25.76


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    221.70
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    75.0866               145
loop is:       15
neval is:       96
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       15      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    75.0866      0.500000    
T0,tstep,tfreq (these do not change):             72
current SAtemp,tstepnext are:    75.0866               145
loop is:       16
neval is:       96


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      145
neval,tstepnext:       96     145

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.557805     -0.583747      -43.8316       43.8316       176.615       220.446    
   2  0.850944     -0.161409      -12.1197       12.1197       187.491       199.611    
   3  0.343999      -1.06712      -80.1261       80.1261       209.714       289.840    
   4  0.481777E-02  -5.33544      -400.620       400.620       182.678       583.299    
   5  0.146991      -1.91738      -143.970       143.970       229.060       373.030    
   6  0.545677     -0.605728      -45.4820       45.4820       224.643       270.125    
   7  0.761940     -0.271888      -20.4151       20.4151       231.693       252.108    
   8  0.944477     -0.571238E-01  -4.28923       4.28923       250.401       254.691    
   9  0.965249     -0.353688E-01  -2.65572       2.65572       250.873       253.528    
  10  0.634176     -0.455429      -34.1966       34.1966       247.129       281.326    
  11  0.793205     -0.231673      -17.3956       17.3956       250.354       267.749    
  12  0.743605     -0.296246      -22.2441       22.2441       229.865       252.109    
  13  0.983069E-01  -2.31966      -174.175       174.175       250.810       424.985    
  14  0.618437     -0.480560      -36.0836       36.0836       236.903       272.987    
  15  0.429182     -0.845875      -63.5139       63.5139       253.404       316.918    
  16  0.771528     -0.259382      -19.4761       19.4761       228.323       247.799    
  17  0.218286      -1.52195      -114.278       114.278       189.837       304.115    
  18  0.556408     -0.586254      -44.0198       44.0198       243.047       287.067    
  19  0.526292     -0.641899      -48.1981       48.1981       256.405       304.603    
  20  0.665532     -0.407169      -30.5729       30.5729       252.992       283.565    
  21  0.261756      -1.34034      -100.642       100.642       181.994       282.635    
  22  0.975508     -0.247971E-01  -1.86193       1.86193       183.049       184.911    
  23  0.257613      -1.35630      -101.840       101.840       254.170       356.010    
  24  0.981555E-01  -2.32120      -174.291       174.291       262.721       437.012    
  25  0.955054     -0.459870E-01  -3.45301       3.45301       253.828       257.281    
  26  0.887906     -0.118890      -8.92703       8.92703       249.306       258.233    
  27  0.407043     -0.898837      -67.4906       67.4906       250.289       317.779    
  28  0.876870     -0.131396      -9.86610       9.86610       250.289       260.155    
  29  0.957152     -0.437935E-01  -3.28831       3.28831       245.610       248.898    
  30  0.827730     -0.189068      -14.1965       14.1965       248.738       262.934    
  31  0.289027      -1.24124      -93.2002       93.2002       248.098       341.299    
  32  0.125230      -2.07760      -156.000       156.000       255.750       411.750    
  33  0.242443      -1.41699      -106.397       106.397       214.200       320.597    
  34  0.654103     -0.424490      -31.8735       31.8735       256.190       288.064    
  35  0.811871     -0.208414      -15.6491       15.6491       244.431       260.081    
  36  0.145201E-01  -4.23222      -317.783       317.783       181.022       498.805    
  37  0.344449      -1.06581      -80.0279       80.0279       253.272       333.300    
  38  0.265532      -1.32602      -99.5663       99.5663       273.435       373.001    
  39  0.811851     -0.208438      -15.6509       15.6509       220.149       235.800    
  40  0.983290E-01  -2.31944      -174.159       174.159       251.568       425.727    
  41  0.347314      -1.05753      -79.4061       79.4061       246.206       325.613    
  42  0.923773     -0.792888E-01  -5.95353       5.95353       285.045       290.998    
  43  0.690375     -0.370520      -27.8211       27.8211       250.646       278.467    
  44  0.227523      -1.48051      -111.166       111.166       208.927       320.093    
  45  0.652275     -0.427289      -32.0837       32.0837       317.398       349.482    
  46  0.669640     -0.401014      -30.1108       30.1108       293.045       323.156    
  47  0.288804      -1.24201      -93.2581       93.2581       253.308       346.566    
  48  0.404648     -0.904738      -67.9337       67.9337       251.161       319.095    
  49  0.371042     -0.991440      -74.4439       74.4439       251.012       325.456    
  50  0.308424      -1.17628      -88.3229       88.3229       268.071       356.394    
  51  0.911221     -0.929703E-01  -6.98083       6.98083       227.952       234.933    
  52  0.615436     -0.485425      -36.4489       36.4489       261.740       298.189    
  53  0.780328     -0.248041      -18.6245       18.6245       250.870       269.494    
  54  0.127539      -2.05933      -154.628       154.628       244.735       399.363    
  55  0.709081     -0.343786      -25.8137       25.8137       223.887       249.700    
  56  0.974925     -0.253942E-01  -1.90677       1.90677       232.534       234.441    
  57  0.834943     -0.180392      -13.5450       13.5450       257.184       270.729    
  58  0.696274     -0.362013      -27.1823       27.1823       243.859       271.041    
  59  0.623965     -0.471660      -35.4154       35.4154       239.039       274.455    
  60  0.620467     -0.477282      -35.8375       35.8375       249.912       285.749    
  61  0.983840E-01  -2.31888      -174.117       174.117       248.838       422.955    
  62  0.452904     -0.792074      -59.4742       59.4742       254.890       314.364    
  63  0.731276     -0.312965      -23.4995       23.4995       250.286       273.786    
  64  0.136630      -1.99048      -149.458       149.458       252.558       402.017    
  65  0.819737     -0.198772      -14.9251       14.9251       256.039       270.964    
  66  0.415452     -0.878387      -65.9551       65.9551       247.717       313.672    
  67  0.931580     -0.708731E-01  -5.32162       5.32162       285.567       290.889    
  68  0.763119     -0.270341      -20.2990       20.2990       251.224       271.523    
  69  0.214680      -1.53861      -115.529       115.529       316.249       431.777    
  70  0.548736     -0.600138      -45.0623       45.0623       250.289       295.351    
  71  0.981486     -0.186872E-01  -1.40316       1.40316       196.531       197.934    
  72  0.475333     -0.743740      -55.8449       55.8449       246.946       302.791    
  73  0.484810     -0.723998      -54.3626       54.3626       221.702       276.064    
loop,thermsimp(1:2)       16   43.8316       12.1197    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     98        196.83          0.86          1.12         23.67          0.05          0.05         25.75
Just calling func    0   0         25.75


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     99        199.41          0.86          1.12         23.61          0.09          0.05         25.73
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    196.83
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    75.0866               145
loop is:       16
neval is:       98
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       16      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    75.0866      0.500000    
T0,tstep,tfreq (these do not change):             72
current SAtemp,tstepnext are:    75.0866               145
loop is:       17
neval is:       98


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      145
neval,tstepnext:       98     145

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.739792     -0.301387      -22.6301       22.6301       183.049       205.679    
   2  0.527958     -0.638738      -47.9607       47.9607       196.531       244.492    
   3  0.326119      -1.12049      -84.1339       84.1339       187.491       271.625    
   4  0.647061     -0.435314      -32.6863       32.6863       176.615       209.301    
   5  0.419805     -0.867966      -65.1726       65.1726       232.534       297.707    
   6  0.218417      -1.52135      -114.233       114.233       227.952       342.185    
   7  0.168864      -1.77866      -133.554       133.554       220.149       353.703    
   8  0.761417     -0.272575      -20.4667       20.4667       228.323       248.790    
   9  0.383989     -0.957143      -71.8686       71.8686       245.610       317.478    
  10  0.104774      -2.25595      -169.392       169.392       223.887       393.278    
  11  0.167912      -1.78432      -133.978       133.978       231.693       365.672    
  12  0.997930     -0.207190E-02 -0.155572      0.155572       229.865       230.021    
  13  0.493294     -0.706650      -53.0600       53.0600       250.873       303.933    
  14  0.483048     -0.727639      -54.6360       54.6360       250.401       305.037    
  15  0.715967     -0.334121      -25.0880       25.0880       253.828       278.916    
  16  0.595423E-01  -2.82107      -211.824       211.824       249.306       461.131    
  17  0.636569     -0.451662      -33.9138       33.9138       244.431       278.345    
  18  0.482980     -0.727779      -54.6465       54.6465       250.289       304.935    
  19  0.500121     -0.692905      -52.0279       52.0279       248.738       300.766    
  20  0.426980     -0.851018      -63.9000       63.9000       250.354       314.254    
  21  0.546576     -0.604082      -45.3585       45.3585       250.870       296.228    
  22  0.142720      -1.94687      -146.184       146.184       224.643       370.827    
  23  0.473622     -0.747346      -56.1157       56.1157       257.184       313.300    
  24  0.892718E-01  -2.41607      -181.414       181.414       256.039       437.453    
  25  0.660659     -0.414518      -31.1247       31.1247       243.859       274.983    
  26  0.328755      -1.11244      -83.5296       83.5296       251.224       334.754    
  27  0.544150     -0.608530      -45.6925       45.6925       236.903       282.596    
  28  0.199068      -1.61411      -121.198       121.198       250.286       371.484    
  29  0.685070     -0.378234      -28.4003       28.4003       239.039       267.440    
  30  0.500258     -0.692632      -52.0074       52.0074       221.702       273.709    
  31  0.130607      -2.03556      -152.844       152.844       250.646       403.489    
  32  0.982013E-01  -2.32074      -174.256       174.256       247.129       421.386    
  33  0.581494E-01  -2.84474      -213.602       213.602       181.994       395.595    
  34  0.841391     -0.172699      -12.9674       12.9674       252.992       265.960    
  35  0.838937E-01  -2.47820      -186.080       186.080       249.912       435.991    
  36  0.729848     -0.314919      -23.6462       23.6462       243.047       266.693    
  37  0.748292     -0.289962      -21.7723       21.7723       256.190       277.963    
  38  0.229216      -1.47309      -110.609       110.609       209.714       320.323    
  39  0.710713     -0.341487      -25.6411       25.6411       285.567       311.208    
  40  0.511506     -0.670395      -50.3377       50.3377       285.045       335.382    
  41  0.106756      -2.23721      -167.984       167.984       250.289       418.273    
  42  0.583466     -0.538770      -40.4544       40.4544       261.740       302.194    
  43  0.993140E-01  -2.30947      -173.410       173.410       246.946       420.357    
  44  0.461224     -0.773871      -58.1073       58.1073       189.837       247.944    
  45  0.574465     -0.554316      -41.6217       41.6217       256.405       298.027    
  46  0.715977     -0.334107      -25.0870       25.0870       247.717       272.804    
  47  0.877584     -0.130583      -9.80503       9.80503       254.890       264.695    
  48  0.492354     -0.708558      -53.2032       53.2032       253.404       306.607    
  49  0.874926     -0.133616      -10.0328       10.0328       250.289       260.322    
  50  0.800367     -0.222685      -16.7206       16.7206       251.161       267.882    
  51  0.507308     -0.678636      -50.9565       50.9565       208.927       259.883    
  52  0.727831     -0.317686      -23.8540       23.8540       214.200       238.054    
  53  0.899777E-01  -2.40819      -180.823       180.823       293.045       473.868    
  54  0.392780     -0.934505      -70.1688       70.1688       251.012       321.181    
  55  0.585301     -0.535629      -40.2186       40.2186       246.206       286.425    
  56  0.522884     -0.648395      -48.6858       48.6858       253.272       301.958    
  57  0.559213     -0.581225      -43.6422       43.6422       248.098       291.741    
  58  0.116989      -2.14568      -161.112       161.112       253.308       414.420    
  59  0.411020     -0.889113      -66.7605       66.7605       317.398       384.159    
  60  0.484202     -0.725253      -54.4568       54.4568       254.170       308.627    
  61  0.771761     -0.259080      -19.4534       19.4534       268.071       287.524    
  62  0.908486     -0.959755E-01  -7.20647       7.20647       273.435       280.641    
  63  0.340814      -1.07642      -80.8246       80.8246       229.060       309.885    
  64  0.519873     -0.654172      -49.1195       49.1195       244.735       293.855    
  65  0.516320     -0.661029      -49.6344       49.6344       252.558       302.193    
  66  0.495555     -0.702076      -52.7165       52.7165       255.750       308.466    
  67  0.291626      -1.23228      -92.5279       92.5279       248.838       341.366    
  68  0.492590     -0.708077      -53.1671       53.1671       250.810       303.977    
  69  0.545663E-01  -2.90834      -218.377       218.377       251.568       469.945    
  70  0.200869      -1.60510      -120.522       120.522       316.249       436.770    
  71  0.434763     -0.832954      -62.5437       62.5437       262.721       325.265    
  72  0.241886E-01  -3.72187      -279.463       279.463       181.022       460.485    
  73  0.846355     -0.166816      -12.5257       12.5257       196.829       209.354    
loop,thermsimp(1:2)       17   22.6301       47.9607    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    100        183.17          0.86          1.12         23.62          0.11          0.05         25.77
Just calling func    0   0         25.77


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    101        668.92          0.86          1.12         23.61          0.15          0.04         25.78
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  100    668.92        1.715     -1.292      1.715     -102.6     0.8964    
                      0.7639      2.091     -99.70      3.720    -0.2220    
                       1.782     -1.377      1.384      0.000     -5.000    
                     -0.9938      0.000      0.000      0.000     -1.221    

                      -2.500      9409.      8843.      0.000      0.000    
                     -0.5672     -6.325     -4.555     -7.145      3.145    
                      -14.18     -3.138      1389.      0.000      4567.    

                       8417.      7769.      8276.     0.1179E+05  2594.    
                       3333.     0.1265    -0.4000E-01  0.000    -0.4528    
                     -0.8447E-01-0.9972E-01-0.9933E-01-0.1879    -0.8935E-02

                      -1.550     0.1676E-01  0.000    -0.2223E-01 0.4613E-02
                      0.8541E-01 0.3353E-01 0.1103E-01-0.5169E-01 0.1375    
                     -0.3617E-01-0.1866E-01-0.7633E-01-0.3959      0.000    

                     -0.5975     -1.413     -2.249     -2.909    -0.2716    
                      0.1978      9.253      9.162     0.3929E+05 -4.000    
                     -0.3995    -0.5199      9.354      8.452    -0.2182E+05

                      -4.000     0.1019    -0.6301      8.821      9.049    
                     -0.3273E+05 -7.000    -0.4624    -0.4373      9.437    
                       8.449    -0.2777E+05 -7.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    183.17
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    75.0866               145
loop is:       17
neval is:      100
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       17      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    75.0866      0.500000    
T0,tstep,tfreq (these do not change):             72
current SAtemp,tstepnext are:    75.0866               145
loop is:       18
neval is:      100


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      145
neval,tstepnext:      100     145

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.382860     -0.960086      -72.0896       72.0896       183.049       255.138    
   2  0.293468      -1.22599      -92.0553       92.0553       176.615       268.670    
   3  0.954036     -0.470539E-01  -3.53311       3.53311       196.829       200.362    
   4  0.452934     -0.792010      -59.4693       59.4693       229.865       289.334    
   5  0.251692      -1.37955      -103.586       103.586       214.200       317.786    
   6  0.881081     -0.126605      -9.50637       9.50637       196.531       206.037    
   7  0.855311     -0.156290      -11.7353       11.7353       189.837       201.572    
   8  0.576474     -0.550824      -41.3595       41.3595       228.323       269.683    
   9  0.433835     -0.835090      -62.7041       62.7041       208.927       271.631    
  10  0.298626      -1.20856      -90.7470       90.7470       250.289       341.036    
  11  0.269991      -1.30937      -98.3159       98.3159       254.890       353.206    
  12  0.884826     -0.122364      -9.18790       9.18790       252.992       262.180    
  13  0.664124     -0.409287      -30.7319       30.7319       243.047       273.779    
  14  0.580836     -0.543287      -40.7936       40.7936       239.039       279.833    
  15  0.285501      -1.25351      -94.1217       94.1217       251.161       345.283    
  16  0.690757     -0.369967      -27.7796       27.7796       187.491       215.270    
  17  0.578320     -0.547628      -41.1195       41.1195       247.717       288.837    
  18  0.563230     -0.574067      -43.1048       43.1048       221.702       264.806    
  19  0.681565     -0.383363      -28.7854       28.7854       243.859       272.644    
  20  0.453362     -0.791065      -59.3984       59.3984       256.190       315.589    
  21  0.645457     -0.437797      -32.8727       32.8727       244.431       277.304    
  22  0.982222E-01  -2.32052      -174.240       174.240       253.828       428.068    
  23  0.843064     -0.170712      -12.8182       12.8182       273.435       286.253    
  24  0.505683     -0.681845      -51.1975       51.1975       236.903       288.101    
  25  0.350376      -1.04875      -78.7471       78.7471       246.206       324.954    
  26  0.367167      -1.00194      -75.2323       75.2323       268.071       343.303    
  27  0.268175      -1.31611      -98.8225       98.8225       248.098       346.921    
  28  0.989085E-01  -2.31356      -173.717       173.717       244.735       418.453    
  29  0.349392      -1.05156      -78.9582       78.9582       250.870       329.828    
  30  0.945468     -0.560755E-01  -4.21052       4.21052       232.534       236.745    
  31  0.305400      -1.18613      -89.0626       89.0626       256.405       345.468    
  32  0.942706     -0.590006E-01  -4.43016       4.43016       248.738       253.168    
  33  0.778346     -0.250584      -18.8155       18.8155       253.272       272.087    
  34  0.256449      -1.36083      -102.180       102.180       252.558       354.738    
  35  0.338120      -1.08436      -81.4205       81.4205       261.740       343.161    
  36  0.644609     -0.439112      -32.9714       32.9714       250.873       283.844    
  37  0.420837     -0.865509      -64.9881       64.9881       250.810       315.798    
  38  0.793406     -0.231421      -17.3766       17.3766       250.289       267.665    
  39  0.685561     -0.377517      -28.3465       28.3465       250.401       278.748    
  40  0.278740      -1.27748      -95.9214       95.9214       253.404       349.325    
  41  0.414078     -0.881700      -66.2039       66.2039       255.750       321.954    
  42  0.999720     -0.280334E-03 -0.210493E-01  0.210493E-01   254.170       254.192    
  43  0.714259     -0.336509      -25.2673       25.2673       229.060       254.327    
  44  0.713371     -0.337753      -25.3608       25.3608       285.567       310.928    
  45  0.451360     -0.795490      -59.7307       59.7307       257.184       316.915    
  46  0.887280     -0.119595      -8.97999       8.97999       250.354       259.334    
  47  0.234319      -1.45107      -108.956       108.956       245.610       354.566    
  48  0.277567E-01  -3.58428      -269.131       269.131       209.714       478.845    
  49  0.582411     -0.540579      -40.5902       40.5902       251.012       291.602    
  50  0.969019     -0.314707E-01  -2.36303       2.36303       262.721       265.084    
  51  0.441889     -0.816696      -61.3229       61.3229       251.224       312.547    
  52  0.150247      -1.89548      -142.325       142.325       285.045       427.370    
  53  0.901555E-01  -2.40622      -180.675       180.675       248.838       429.513    
  54  0.274120      -1.29419      -97.1764       97.1764       227.952       325.129    
  55  0.166801      -1.79095      -134.477       134.477       220.149       354.626    
  56  0.783053     -0.244555      -18.3628       18.3628       231.693       250.056    
  57  0.541655     -0.613126      -46.0375       46.0375       224.643       270.681    
  58  0.113786      -2.17344      -163.196       163.196       250.286       413.482    
  59  0.794080     -0.230571      -17.3128       17.3128       317.398       334.711    
  60  0.266758      -1.32141      -99.2203       99.2203       223.887       323.107    
  61  0.637690     -0.449903      -33.7817       33.7817       181.994       215.775    
  62  0.912681     -0.913685E-01  -6.86055       6.86055       250.646       257.506    
  63  0.303728      -1.19162      -89.4749       89.4749       253.308       342.783    
  64  0.318303      -1.14475      -85.9555       85.9555       250.289       336.244    
  65  0.255833      -1.36323      -102.360       102.360       246.946       349.307    
  66  0.988998     -0.110626E-01 -0.830654      0.830654       247.129       247.960    
  67  0.335641      -1.09171      -81.9729       81.9729       249.912       331.884    
  68  0.575346     -0.552784      -41.5067       41.5067       316.249       357.755    
  69  0.439298E-01  -3.12516      -234.658       234.658       256.039       490.697    
  70  0.179935      -1.71516      -128.785       128.785       181.022       309.807    
  71  0.939813     -0.620740E-01  -4.66092       4.66092       249.306       253.967    
  72  0.787717     -0.238616      -17.9169       17.9169       251.568       269.485    
  73  0.622521     -0.473978      -35.5894       35.5894       183.173       218.762    
loop,thermsimp(1:2)       18   72.0896       92.0553    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    102        217.96          0.83          1.11         23.61          0.16          0.06         25.77
Just calling func    0   0         25.77


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    103        220.48          0.85          1.12         23.57          0.17          0.05         25.75
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    217.96
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    75.0866               145
loop is:       18
neval is:      102
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       18      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    75.0866      0.500000    
T0,tstep,tfreq (these do not change):             72
current SAtemp,tstepnext are:    75.0866               145
loop is:       19
neval is:      102


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      145
neval,tstepnext:      102     145

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.352992      -1.04131      -78.1884       78.1884       196.829       275.017    
   2  0.270835E-01  -3.60883      -270.975       270.975       189.837       460.812    
   3  0.923755     -0.793087E-01  -5.95502       5.95502       196.531       202.486    
   4  0.535520     -0.624517      -46.8929       46.8929       187.491       234.384    
   5  0.629344     -0.463078      -34.7709       34.7709       181.994       216.765    
   6  0.572648E-01  -2.86007      -214.753       214.753       183.173       397.926    
   7  0.353113E-01  -3.34355      -251.056       251.056       232.534       483.591    
   8  0.580838     -0.543283      -40.7933       40.7933       247.129       287.923    
   9  0.370403     -0.993164      -74.5733       74.5733       231.693       306.266    
  10  0.443010     -0.814162      -61.1327       61.1327       248.738       309.870    
  11  0.188704      -1.66757      -125.213       125.213       249.306       374.519    
  12  0.177608      -1.72818      -129.763       129.763       254.170       383.934    
  13  0.694998     -0.363847      -27.3200       27.3200       229.060       256.380    
  14  0.160742      -1.82796      -137.255       137.255       183.049       320.304    
  15  0.290050      -1.23770      -92.9349       92.9349       250.646       343.580    
  16  0.441138E-01  -3.12098      -234.344       234.344       250.354       484.698    
  17  0.372461     -0.987622      -74.1572       74.1572       252.992       327.150    
  18  0.652779     -0.426517      -32.0257       32.0257       221.702       253.727    
  19  0.998108     -0.189387E-02 -0.142205      0.142205       262.721       262.863    
  20  0.741140     -0.299566      -22.4934       22.4934       250.289       272.782    
  21  0.623042     -0.473141      -35.5266       35.5266       176.615       212.141    
  22  0.504617     -0.683955      -51.3559       51.3559       251.568       302.924    
  23  0.872499     -0.136394      -10.2414       10.2414       228.323       238.565    
  24  0.142620      -1.94757      -146.236       146.236       224.643       370.880    
  25  0.580285     -0.544236      -40.8648       40.8648       208.927       249.792    
  26  0.860063E-01  -2.45334      -184.213       184.213       253.272       437.484    
  27  0.401846     -0.911687      -68.4555       68.4555       243.859       312.314    
  28  0.161242      -1.82485      -137.022       137.022       243.047       380.069    
  29  0.550753     -0.596469      -44.7869       44.7869       244.431       289.218    
  30  0.815012     -0.204553      -15.3592       15.3592       250.401       265.761    
  31  0.438663     -0.824024      -61.8731       61.8731       239.039       300.912    
  32  0.542283     -0.611968      -45.9506       45.9506       250.873       296.823    
  33  0.943132E-01  -2.36113      -177.290       177.290       273.435       450.724    
  34  0.236587      -1.44144      -108.233       108.233       236.903       345.136    
  35  0.283068      -1.26207      -94.7644       94.7644       247.717       342.481    
  36  0.973178     -0.271886E-01  -2.04150       2.04150       229.865       231.907    
  37  0.596723     -0.516302      -38.7673       38.7673       251.012       289.779    
  38  0.595114     -0.519003      -38.9701       38.9701       181.022       219.992    
  39  0.948736     -0.526250E-01  -3.95143       3.95143       285.567       289.519    
  40  0.216072E-01  -3.83473      -287.937       287.937       251.224       539.161    
  41  0.440213     -0.820496      -61.6083       61.6083       256.190       317.799    
  42  0.905197     -0.996023E-01  -7.47880       7.47880       250.810       258.289    
  43  0.158396      -1.84266      -138.359       138.359       257.184       395.543    
  44  0.287789      -1.24553      -93.5224       93.5224       214.200       307.723    
  45  0.238244      -1.43446      -107.709       107.709       255.750       363.459    
  46  0.363881      -1.01093      -75.9071       75.9071       223.887       299.794    
  47  0.828805     -0.187771      -14.0991       14.0991       246.206       260.306    
  48  0.587140     -0.532492      -39.9830       39.9830       227.952       267.935    
  49  0.141687      -1.95414      -146.730       146.730       250.870       397.599    
  50  0.879115     -0.128839      -9.67408       9.67408       249.912       259.586    
  51  0.742190     -0.298150      -22.3871       22.3871       317.398       339.785    
  52  0.218958      -1.51887      -114.047       114.047       250.289       364.336    
  53  0.333192      -1.09904      -82.5230       82.5230       250.289       332.812    
  54  0.356774      -1.03065      -77.3883       77.3883       253.308       330.696    
  55  0.739597     -0.301650      -22.6499       22.6499       261.740       284.390    
  56  0.224658E-01  -3.79576      -285.011       285.011       268.071       553.082    
  57  0.338214      -1.08408      -81.3996       81.3996       251.161       332.561    
  58  0.227014      -1.48275      -111.334       111.334       256.405       367.740    
  59  0.289792E-01  -3.54118      -265.895       265.895       248.098       513.993    
  60  0.871226     -0.137854      -10.3510       10.3510       246.946       257.297    
  61  0.159622      -1.83495      -137.780       137.780       253.404       391.184    
  62  0.581826     -0.541584      -40.6657       40.6657       254.890       295.556    
  63  0.733467E-02  -4.91514      -369.061       369.061       245.610       614.671    
  64  0.646078     -0.436835      -32.8005       32.8005       220.149       252.950    
  65  0.976710     -0.235653E-01  -1.76944       1.76944       252.558       254.328    
  66  0.390127     -0.941284      -70.6778       70.6778       316.249       386.926    
  67  0.394291     -0.930666      -69.8806       69.8806       250.286       320.167    
  68  0.796004     -0.228151      -17.1311       17.1311       244.735       261.866    
  69  0.393786     -0.931948      -69.9768       69.9768       285.045       355.021    
  70  0.672353     -0.396971      -29.8072       29.8072       253.828       283.635    
  71  0.856786E-01  -2.45715      -184.499       184.499       248.838       433.338    
  72  0.769351     -0.262207      -19.6883       19.6883       209.714       229.402    
  73  0.161441E-01  -4.12620      -309.822       309.822       217.956       527.779    
loop,thermsimp(1:2)       19   78.1884       270.975    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    104        226.07          0.86          1.12         23.59          0.16          0.05         25.77
Just calling func    0   0         25.76


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    105        244.04          0.86          1.12         23.71          0.05          0.05         25.78
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    226.07
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    75.0866               145
loop is:       19
neval is:      104
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       19      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    75.0866      0.500000    
T0,tstep,tfreq (these do not change):             72
current SAtemp,tstepnext are:    75.0866               145
loop is:       20
neval is:      104


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      145
neval,tstepnext:      104     145

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.534746     -0.625963      -47.0014       47.0014       196.531       243.532    
   2  0.288348      -1.24359      -93.3769       93.3769       176.615       269.992    
   3  0.910112E-01  -2.39677      -179.966       179.966       181.994       361.959    
   4  0.213812      -1.54266      -115.833       115.833       181.022       296.855    
   5  0.575222     -0.552999      -41.5228       41.5228       209.714       251.236    
   6  0.855707     -0.155827      -11.7005       11.7005       229.865       241.566    
   7  0.818692     -0.200047      -15.0209       15.0209       187.491       202.512    
   8  0.309911      -1.17147      -87.9618       87.9618       228.323       316.285    
   9  0.773438     -0.256910      -19.2905       19.2905       208.927       228.217    
  10  0.440502E-01  -3.12243      -234.452       234.452       220.149       454.602    
  11  0.211655      -1.55280      -116.594       116.594       221.702       338.296    
  12  0.713577     -0.337465      -25.3391       25.3391       252.558       277.898    
  13  0.927405     -0.753650E-01  -5.65891       5.65891       229.060       234.719    
  14  0.360229      -1.02101      -76.6645       76.6645       246.946       323.611    
  15  0.911872     -0.922553E-01  -6.92714       6.92714       250.810       257.737    
  16  0.800691     -0.222280      -16.6903       16.6903       249.912       266.602    
  17  0.169830      -1.77296      -133.126       133.126       246.206       379.332    
  18  0.581014     -0.542980      -40.7706       40.7706       244.735       285.506    
  19  0.869395     -0.139958      -10.5089       10.5089       262.721       273.230    
  20  0.773880     -0.256338      -19.2476       19.2476       250.401       269.649    
  21  0.496085     -0.701008      -52.6363       52.6363       227.952       280.589    
  22  0.530037     -0.634809      -47.6656       47.6656       250.289       297.954    
  23  0.239414      -1.42956      -107.341       107.341       196.829       304.170    
  24  0.595728     -0.517972      -38.8927       38.8927       253.828       292.721    
  25  0.170793      -1.76730      -132.701       132.701       261.740       394.441    
  26  0.983027     -0.171183E-01  -1.28535       1.28535       247.129       248.415    
  27  0.608714     -0.496407      -37.2735       37.2735       244.431       281.705    
  28  0.518727     -0.656378      -49.2852       49.2852       285.567       334.852    
  29  0.887918     -0.118876      -8.92598       8.92598       251.012       259.938    
  30  0.140498      -1.96256      -147.362       147.362       254.890       402.252    
  31  0.256308      -1.36138      -102.221       102.221       250.873       353.094    
  32  0.887238     -0.119642      -8.98349       8.98349       223.887       232.870    
  33  0.306042      -1.18403      -88.9050       88.9050       239.039       327.944    
  34  0.993873     -0.614632E-02 -0.461506      0.461506       251.568       252.030    
  35  0.275412E-01  -3.59207      -269.717       269.717       231.693       501.410    
  36  0.698960     -0.358161      -26.8931       26.8931       214.200       241.093    
  37  0.268424      -1.31519      -98.7528       98.7528       248.738       347.491    
  38  0.580935E-01  -2.84570      -213.674       213.674       243.859       457.533    
  39  0.242705      -1.41591      -106.316       106.316       256.190       362.506    
  40  0.443517     -0.813019      -61.0469       61.0469       250.286       311.333    
  41  0.904179     -0.100728      -7.56331       7.56331       183.049       190.612    
  42  0.454025     -0.789603      -59.2886       59.2886       252.992       312.281    
  43  0.592994     -0.522572      -39.2381       39.2381       253.308       292.546    
  44  0.401796     -0.911812      -68.4648       68.4648       251.161       319.626    
  45  0.130776      -2.03427      -152.746       152.746       250.289       403.035    
  46  0.709753     -0.342839      -25.7426       25.7426       317.398       343.141    
  47  0.388071     -0.946568      -71.0746       71.0746       247.717       318.792    
  48  0.362521      -1.01467      -76.1883       76.1883       250.646       326.834    
  49  0.285379      -1.25394      -94.1539       94.1539       236.903       331.057    
  50  0.286508      -1.24999      -93.8574       93.8574       285.045       378.902    
  51  0.951542     -0.496714E-01  -3.72966       3.72966       255.750       259.480    
  52  0.122933      -2.09612      -157.390       157.390       250.289       407.679    
  53  0.210928      -1.55624      -116.853       116.853       256.405       373.258    
  54  0.860093     -0.150715      -11.3167       11.3167       224.643       235.960    
  55  0.997563     -0.243951E-02 -0.183175      0.183175       249.306       249.490    
  56  0.750720     -0.286722      -21.5290       21.5290       243.047       264.576    
  57  0.667101     -0.404814      -30.3961       30.3961       254.170       284.567    
  58  0.508750E-01  -2.97838      -223.637       223.637       316.249       539.885    
  59  0.552474     -0.593349      -44.5526       44.5526       253.404       297.957    
  60  0.514478     -0.664602      -49.9027       49.9027       257.184       307.087    
  61  0.539834     -0.616494      -46.2904       46.2904       250.870       297.160    
  62  0.610888     -0.492841      -37.0058       37.0058       183.173       220.179    
  63  0.328075      -1.11451      -83.6851       83.6851       248.838       332.523    
  64  0.894692     -0.111276      -8.35536       8.35536       253.272       261.627    
  65  0.810283     -0.210372      -15.7961       15.7961       273.435       289.231    
  66  0.691642     -0.368687      -27.6834       27.6834       189.837       217.520    
  67  0.896896     -0.108815      -8.17054       8.17054       232.534       240.705    
  68  0.742287     -0.298020      -22.3773       22.3773       250.354       272.731    
  69  0.974450     -0.258821E-01  -1.94340       1.94340       248.098       250.042    
  70  0.339669      -1.07978      -81.0772       81.0772       217.956       299.034    
  71  0.854515     -0.157221      -11.8052       11.8052       251.224       263.030    
  72  0.153353      -1.87501      -140.788       140.788       268.071       408.859    
  73  0.883349     -0.124034      -9.31332       9.31332       226.067       235.380    
loop,thermsimp(1:2)       20   47.0014       93.3769    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    106        201.53          0.86          1.12         23.62          0.10          0.05         25.74
Just calling func    0   0         25.74


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    107        194.81          0.86          1.12         23.66          0.09          0.05         25.77
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    194.81
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    75.0866               145
loop is:       20
neval is:      106
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       20      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    75.0866      0.500000    
T0,tstep,tfreq (these do not change):             72
current SAtemp,tstepnext are:    75.0866               145
loop is:       21
neval is:      106


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      145
neval,tstepnext:      106     145

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.297422      -1.21260      -91.0503       91.0503       183.049       274.099    
   2  0.663536     -0.410173      -30.7985       30.7985       187.491       218.289    
   3  0.263982      -1.33188      -100.006       100.006       189.837       289.843    
   4  0.792402     -0.232686      -17.4716       17.4716       183.173       200.644    
   5  0.624731     -0.470434      -35.3233       35.3233       208.927       244.250    
   6  0.170977      -1.76622      -132.620       132.620       223.887       356.506    
   7  0.362487      -1.01477      -76.1955       76.1955       229.060       305.255    
   8  0.659245     -0.416659      -31.2855       31.2855       226.067       257.353    
   9  0.746481E-03  -7.20014      -540.634       540.634       224.643       765.277    
  10  0.690046     -0.370998      -27.8570       27.8570       232.534       260.391    
  11  0.905636     -0.991173E-01  -7.44238       7.44238       214.200       221.643    
  12  0.317643      -1.14683      -86.1114       86.1114       229.865       315.976    
  13  0.321948      -1.13336      -85.1005       85.1005       196.531       281.632    
  14  0.293974      -1.22426      -91.9259       91.9259       247.129       339.055    
  15  0.679275     -0.386729      -29.0382       29.0382       249.306       278.345    
  16  0.180340      -1.71291      -128.617       128.617       248.098       376.715    
  17  0.539600     -0.616927      -46.3230       46.3230       209.714       256.037    
  18  0.260315      -1.34586      -101.056       101.056       251.568       352.624    
  19  0.256777      -1.35955      -102.084       102.084       250.810       352.894    
  20  0.518851     -0.656138      -49.2672       49.2672       255.750       305.017    
  21  0.485887     -0.721780      -54.1960       54.1960       251.012       305.208    
  22  0.562814     -0.574805      -43.1602       43.1602       253.272       296.432    
  23  0.906369     -0.983082E-01  -7.38163       7.38163       251.224       258.606    
  24  0.332143      -1.10219      -82.7597       82.7597       243.047       325.807    
  25  0.912001E-01  -2.39470      -179.810       179.810       249.912       429.721    
  26  0.302569      -1.19545      -89.7620       89.7620       250.401       340.163    
  27  0.362040      -1.01600      -76.2880       76.2880       176.615       252.903    
  28  0.630870     -0.460656      -34.5891       34.5891       250.354       284.943    
  29  0.685312     -0.377881      -28.3738       28.3738       262.721       291.095    
  30  0.329910      -1.10894      -83.2663       83.2663       252.558       335.825    
  31  0.906630E-01  -2.40061      -180.253       180.253       227.952       408.206    
  32  0.339749      -1.07955      -81.0597       81.0597       244.431       325.491    
  33  0.783039     -0.244573      -18.3641       18.3641       254.170       272.535    
  34  0.322673      -1.13112      -84.9317       84.9317       244.735       329.667    
  35  0.255311      -1.36527      -102.514       102.514       273.435       375.948    
  36  0.645921     -0.437078      -32.8187       32.8187       253.308       286.127    
  37  0.240122      -1.42661      -107.119       107.119       253.828       360.947    
  38  0.224638      -1.49326      -112.124       112.124       181.022       293.146    
  39  0.682659     -0.381760      -28.6650       28.6650       250.870       279.535    
  40  0.533856     -0.627629      -47.1265       47.1265       250.289       297.415    
  41  0.439620E-02  -5.42701      -407.496       407.496       253.404       660.900    
  42  0.409891     -0.891863      -66.9670       66.9670       217.956       284.923    
  43  0.379406     -0.969149      -72.7701       72.7701       196.829       269.599    
  44  0.982111     -0.180514E-01  -1.35542       1.35542       257.184       258.540    
  45  0.243530      -1.41251      -106.061       106.061       250.286       356.347    
  46  0.709323     -0.343445      -25.7881       25.7881       252.992       278.780    
  47  0.212014      -1.55110      -116.467       116.467       228.323       344.790    
  48  0.530919     -0.633146      -47.5408       47.5408       247.717       295.258    
  49  0.439600     -0.821890      -61.7130       61.7130       251.161       312.874    
  50  0.304385      -1.18946      -89.3126       89.3126       246.946       336.259    
  51  0.850253     -0.162221      -12.1806       12.1806       250.646       262.826    
  52  0.686564     -0.376055      -28.2367       28.2367       239.039       267.276    
  53  0.894299     -0.111715      -8.38828       8.38828       236.903       245.291    
  54  0.724097E-02  -4.92800      -370.027       370.027       248.838       618.865    
  55  0.666382     -0.405892      -30.4770       30.4770       285.567       316.044    
  56  0.216072      -1.53214      -115.044       115.044       221.702       336.745    
  57  0.481454     -0.730944      -54.8841       54.8841       317.398       372.282    
  58  0.107413      -2.23107      -167.524       167.524       248.738       416.261    
  59  0.943557     -0.580990E-01  -4.36246       4.36246       250.873       255.235    
  60  0.259811      -1.34780      -101.202       101.202       181.994       283.195    
  61  0.526852     -0.640836      -48.1182       48.1182       256.190       304.309    
  62  0.306319E-01  -3.48571      -261.730       261.730       256.405       518.136    
  63  0.180513      -1.71195      -128.545       128.545       285.045       413.589    
  64  0.901495     -0.103701      -7.78655       7.78655       246.206       253.993    
  65  0.274530      -1.29269      -97.0641       97.0641       261.740       358.804    
  66  0.773836     -0.256395      -19.2518       19.2518       254.890       274.142    
  67  0.158774      -1.84027      -138.180       138.180       250.289       388.469    
  68  0.514226     -0.665093      -49.9395       49.9395       250.289       300.228    
  69  0.312978      -1.16162      -87.2224       87.2224       268.071       355.293    
  70  0.917534     -0.860656E-01  -6.46237       6.46237       220.149       226.612    
  71  0.548182     -0.601148      -45.1382       45.1382       243.859       288.997    
  72  0.131177      -2.03121      -152.516       152.516       231.693       384.210    
  73  0.407078     -0.898750      -67.4841       67.4841       194.808       262.293    
loop,thermsimp(1:2)       21   91.0503       30.7985    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    108        220.71          0.86          1.12         23.75          0.02          0.05         25.80
Just calling func    0   0         25.80


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    109        216.45          0.86          1.12         23.60          0.13          0.05         25.76
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    216.45
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    75.0866               145
loop is:       21
neval is:      108
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       21      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    75.0866      0.500000    
T0,tstep,tfreq (these do not change):             72
current SAtemp,tstepnext are:    75.0866               145
loop is:       22
neval is:      108


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      145
neval,tstepnext:      108     145

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.383671     -0.957969      -71.9306       71.9306       183.173       255.103    
   2  0.741480     -0.299107      -22.4589       22.4589       187.491       209.950    
   3  0.138898      -1.97401      -148.222       148.222       214.200       362.422    
   4  0.751974E-01  -2.58764      -194.297       194.297       220.149       414.446    
   5  0.824485     -0.192996      -14.4914       14.4914       208.927       223.418    
   6  0.982900     -0.172482E-01  -1.29511       1.29511       236.903       238.198    
   7  0.693409     -0.366136      -27.4919       27.4919       176.615       204.107    
   8  0.941572     -0.602045E-01  -4.52055       4.52055       246.206       250.727    
   9  0.812713     -0.207378      -15.5713       15.5713       250.873       266.444    
  10  0.879507     -0.128393      -9.64061       9.64061       209.714       219.354    
  11  0.418958     -0.869984      -65.3241       65.3241       226.067       291.391    
  12  0.314952      -1.15533      -86.7501       86.7501       257.184       343.934    
  13  0.812426     -0.207731      -15.5978       15.5978       251.224       266.822    
  14  0.213788      -1.54277      -115.841       115.841       232.534       348.376    
  15  0.521629     -0.650798      -48.8662       48.8662       194.808       243.675    
  16  0.287143      -1.24777      -93.6912       93.6912       250.646       344.337    
  17  0.518340     -0.657125      -49.3413       49.3413       239.039       288.380    
  18  0.712802E-02  -4.94372      -371.207       371.207       196.829       568.036    
  19  0.579935     -0.544838      -40.9101       40.9101       254.170       295.081    
  20  0.508101E-02  -5.28224      -396.626       396.626       183.049       579.674    
  21  0.984466     -0.156557E-01  -1.17554       1.17554       254.890       256.066    
  22  0.394325     -0.930579      -69.8740       69.8740       249.306       319.180    
  23  0.837309     -0.177562      -13.3325       13.3325       252.992       266.325    
  24  0.683519     -0.380501      -28.5705       28.5705       250.870       279.440    
  25  0.892337     -0.113912      -8.55325       8.55325       196.531       205.084    
  26  0.297675      -1.21175      -90.9865       90.9865       181.994       272.980    
  27  0.566054     -0.569065      -42.7292       42.7292       217.956       260.686    
  28  0.325499E-01  -3.42498      -257.170       257.170       250.354       507.524    
  29  0.721169     -0.326882      -24.5445       24.5445       253.308       277.852    
  30  0.370449     -0.993040      -74.5640       74.5640       243.859       318.423    
  31  0.398952     -0.918913      -68.9981       68.9981       189.837       258.835    
  32  0.942469     -0.592518E-01  -4.44902       4.44902       262.721       267.170    
  33  0.379045     -0.970101      -72.8416       72.8416       181.022       253.863    
  34  0.218373      -1.52155      -114.248       114.248       247.717       361.965    
  35  0.413944     -0.882024      -66.2282       66.2282       253.272       319.500    
  36  0.452532     -0.792896      -59.5359       59.5359       250.289       309.825    
  37  0.938896     -0.630505E-01  -4.73425       4.73425       250.289       255.023    
  38  0.389299     -0.943409      -70.8373       70.8373       256.190       327.028    
  39  0.943794     -0.578471E-01  -4.34354       4.34354       255.750       260.093    
  40  0.706887     -0.346884      -26.0464       26.0464       251.012       277.058    
  41  0.274873      -1.29145      -96.9703       96.9703       229.060       326.030    
  42  0.343864      -1.06751      -80.1556       80.1556       251.161       331.317    
  43  0.869527E-01  -2.44239      -183.391       183.391       229.865       413.256    
  44  0.859615     -0.151271      -11.3584       11.3584       285.567       296.926    
  45  0.264079      -1.33151      -99.9783       99.9783       244.431       344.410    
  46  0.494871     -0.703457      -52.8202       52.8202       243.047       295.867    
  47  0.112943      -2.18087      -163.754       163.754       244.735       408.490    
  48  0.358273      -1.02646      -77.0734       77.0734       252.558       329.632    
  49  0.215257      -1.53592      -115.327       115.327       246.946       362.273    
  50  0.441681     -0.817166      -61.3583       61.3583       221.702       283.060    
  51  0.888276     -0.118473      -8.89575       8.89575       247.129       256.025    
  52  0.780286     -0.248095      -18.6286       18.6286       250.401       269.030    
  53  0.488747     -0.715911      -53.7553       53.7553       228.323       282.079    
  54  0.683795     -0.380097      -28.5402       28.5402       251.568       280.108    
  55  0.466986     -0.761456      -57.1751       57.1751       250.810       307.985    
  56  0.900497     -0.104809      -7.86973       7.86973       268.071       275.941    
  57  0.876058     -0.132323      -9.93566       9.93566       250.286       260.222    
  58  0.413808     -0.882354      -66.2530       66.2530       223.887       290.140    
  59  0.268165      -1.31615      -98.8255       98.8255       261.740       360.566    
  60  0.637465     -0.450255      -33.8082       33.8082       253.828       287.636    
  61  0.476344     -0.741616      -55.6854       55.6854       317.398       373.084    
  62  0.878474     -0.129569      -9.72891       9.72891       273.435       283.163    
  63  0.185973      -1.68216      -126.307       126.307       248.098       374.406    
  64  0.802667E-03  -7.12757      -535.185       535.185       231.693       766.878    
  65  0.480758     -0.732390      -54.9927       54.9927       250.289       305.281    
  66  0.789279     -0.236635      -17.7681       17.7681       227.952       245.720    
  67  0.174217      -1.74745      -131.210       131.210       285.045       416.255    
  68  0.825561     -0.191692      -14.3935       14.3935       248.738       263.131    
  69  0.532291     -0.630566      -47.3471       47.3471       249.912       297.259    
  70  0.118632E-01  -4.43431      -332.957       332.957       256.405       589.363    
  71  0.214857      -1.53778      -115.467       115.467       248.838       364.305    
  72  0.111318      -2.19536      -164.842       164.842       253.404       418.246    
  73  0.823034     -0.194758      -14.6237       14.6237       216.448       231.072    
loop,thermsimp(1:2)       22   71.9306       22.4589    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    110        226.03          0.87          1.12         23.87          0.02          0.05         25.93
Just calling func    0   0         25.93


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    111        284.45          0.84          1.12         23.56          0.16          0.05         25.73
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    226.03
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    75.0866               145
loop is:       22
neval is:      110
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       22      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    75.0866      0.500000    
T0,tstep,tfreq (these do not change):             72
current SAtemp,tstepnext are:    75.0866               145
loop is:       23
neval is:      110


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      145
neval,tstepnext:      110     145

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.327656      -1.11579      -83.7810       83.7810       176.615       260.396    
   2  0.736029     -0.306486      -23.0130       23.0130       196.531       219.544    
   3  0.608436     -0.496864      -37.3078       37.3078       187.491       224.799    
   4  0.584882     -0.536346      -40.2724       40.2724       209.714       249.986    
   5  0.617514     -0.482053      -36.1957       36.1957       208.927       245.123    
   6  0.376473     -0.976909      -73.3528       73.3528       216.448       289.801    
   7  0.535145     -0.625218      -46.9455       46.9455       236.903       283.849    
   8  0.341783      -1.07358      -80.6114       80.6114       194.808       275.420    
   9  0.804208E-01  -2.52048      -189.254       189.254       227.952       417.207    
  10  0.660499     -0.414760      -31.1429       31.1429       246.206       277.349    
  11  0.739860E-01  -2.60388      -195.516       195.516       181.022       376.538    
  12  0.203251      -1.59331      -119.636       119.636       250.289       369.925    
  13  0.637025     -0.450946      -33.8600       33.8600       183.173       217.033    
  14  0.687460     -0.374752      -28.1388       28.1388       247.129       275.268    
  15  0.663581     -0.410105      -30.7934       30.7934       254.890       285.683    
  16  0.579690     -0.545263      -40.9419       40.9419       189.837       230.779    
  17  0.775653     -0.254050      -19.0758       19.0758       255.750       274.826    
  18  0.284124      -1.25834      -94.4848       94.4848       250.286       344.771    
  19  0.317710      -1.14662      -86.0955       86.0955       217.956       304.052    
  20  0.958871     -0.419990E-01  -3.15357       3.15357       248.738       251.891    
  21  0.582932     -0.539685      -40.5231       40.5231       252.992       293.516    
  22  0.905476     -0.992942E-01  -7.45567       7.45567       250.873       258.328    
  23  0.225214      -1.49070      -111.932       111.932       251.224       363.156    
  24  0.618260     -0.480846      -36.1051       36.1051       262.721       298.826    
  25  0.608706     -0.496420      -37.2745       37.2745       250.401       287.676    
  26  0.651052     -0.429165      -32.2246       32.2246       181.994       214.218    
  27  0.138439E-02  -6.58249      -494.257       494.257       268.071       762.328    
  28  0.157375      -1.84913      -138.845       138.845       251.012       389.856    
  29  0.168063      -1.78342      -133.911       133.911       253.308       387.219    
  30  0.924354     -0.786598E-01  -5.90630       5.90630       250.870       256.776    
  31  0.985585     -0.145204E-01  -1.09029       1.09029       251.568       252.658    
  32  0.540844E-01  -2.91721      -219.043       219.043       228.323       447.367    
  33  0.535345     -0.624843      -46.9174       46.9174       221.702       268.619    
  34  0.736351     -0.306048      -22.9801       22.9801       273.435       296.415    
  35  0.283062E-01  -3.56467      -267.659       267.659       253.828       521.488    
  36  0.690743     -0.369987      -27.7811       27.7811       239.039       266.820    
  37  0.260994      -1.34326      -100.861       100.861       223.887       324.747    
  38  0.243637      -1.41208      -106.028       106.028       226.067       332.095    
  39  0.850226     -0.162253      -12.1830       12.1830       254.170       266.354    
  40  0.589307     -0.528809      -39.7065       39.7065       243.047       282.754    
  41  0.515087     -0.663420      -49.8140       49.8140       285.567       335.381    
  42  0.348855      -1.05310      -79.0737       79.0737       249.912       328.985    
  43  0.791407     -0.233943      -17.5660       17.5660       250.289       267.855    
  44  0.370775     -0.992160      -74.4979       74.4979       250.810       325.308    
  45  0.676021     -0.391531      -29.3988       29.3988       250.289       279.687    
  46  0.125601      -2.07465      -155.778       155.778       243.859       399.637    
  47  0.582904     -0.539733      -40.5267       40.5267       249.306       289.833    
  48  0.818994     -0.199679      -14.9932       14.9932       253.272       268.265    
  49  0.291406      -1.23304      -92.5846       92.5846       229.060       321.645    
  50  0.887104     -0.119794      -8.99489       8.99489       256.190       265.185    
  51  0.666242     -0.406102      -30.4928       30.4928       252.558       283.051    
  52  0.931047     -0.714460E-01  -5.36464       5.36464       251.161       256.526    
  53  0.169651      -1.77401      -133.204       133.204       257.184       390.389    
  54  0.228429      -1.47653      -110.868       110.868       250.646       361.513    
  55  0.453181     -0.791463      -59.4283       59.4283       244.431       303.860    
  56  0.376518     -0.976789      -73.3438       73.3438       232.534       305.878    
  57  0.551543     -0.595035      -44.6792       44.6792       261.740       306.419    
  58  0.837469     -0.177371      -13.3182       13.3182       247.717       261.035    
  59  0.436148     -0.829773      -62.3048       62.3048       246.946       309.251    
  60  0.245765      -1.40338      -105.375       105.375       214.200       319.575    
  61  0.727782     -0.317754      -23.8591       23.8591       248.838       272.697    
  62  0.677441     -0.389433      -29.2412       29.2412       317.398       346.640    
  63  0.835222     -0.180057      -13.5199       13.5199       248.098       261.618    
  64  0.964839     -0.357941E-01  -2.68766       2.68766       244.735       247.423    
  65  0.799790     -0.223406      -16.7748       16.7748       229.865       246.640    
  66  0.274169      -1.29401      -97.1628       97.1628       220.149       317.312    
  67  0.342685      -1.07094      -80.4136       80.4136       285.045       365.458    
  68  0.688325     -0.373494      -28.0444       28.0444       253.404       281.448    
  69  0.683936     -0.379890      -28.5247       28.5247       250.354       278.878    
  70  0.779136     -0.249570      -18.7394       18.7394       196.829       215.568    
  71  0.806749     -0.214742      -16.1243       16.1243       183.049       199.173    
  72  0.645551     -0.437652      -32.8618       32.8618       256.405       289.267    
  73  0.403078     -0.908624      -68.2255       68.2255       226.033       294.258    
loop,thermsimp(1:2)       23   83.7810       23.0130    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    112        205.25          0.86          1.12         23.69          0.06          0.05         25.78
Just calling func    0   0         25.77


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    113        207.28          0.86          1.12         23.58          0.14          0.05         25.74
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    205.25
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    75.0866               145
loop is:       23
neval is:      112
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       23      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    75.0866      0.500000    
T0,tstep,tfreq (these do not change):             72
current SAtemp,tstepnext are:    75.0866               145
loop is:       24
neval is:      112


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      145
neval,tstepnext:      112     145

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.291502      -1.23271      -92.5599       92.5599       183.049       275.609    
   2  0.991852     -0.818183E-02 -0.614346      0.614346       181.994       182.608    
   3  0.317368      -1.14769      -86.1765       86.1765       196.829       283.005    
   4  0.737330     -0.304720      -22.8804       22.8804       183.173       206.053    
   5  0.834641     -0.180753      -13.5721       13.5721       196.531       210.103    
   6  0.464401     -0.767007      -57.5920       57.5920       187.491       245.083    
   7  0.592116     -0.524053      -39.3494       39.3494       189.837       229.186    
   8  0.464372     -0.767069      -57.5966       57.5966       208.927       266.524    
   9  0.636055E-01  -2.75505      -206.868       206.868       229.865       436.733    
  10  0.712927     -0.338376      -25.4075       25.4075       244.735       270.143    
  11  0.265597      -1.32578      -99.5480       99.5480       209.714       309.262    
  12  0.152318      -1.88178      -141.297       141.297       248.738       390.035    
  13  0.629580     -0.462703      -34.7428       34.7428       251.568       286.311    
  14  0.849464     -0.163150      -12.2503       12.2503       251.161       263.412    
  15  0.487816     -0.717817      -53.8984       53.8984       250.870       304.768    
  16  0.374667     -0.981718      -73.7139       73.7139       250.873       324.586    
  17  0.657383     -0.419488      -31.4979       31.4979       176.615       208.113    
  18  0.846901     -0.166172      -12.4773       12.4773       247.717       260.194    
  19  0.201185      -1.60353      -120.404       120.404       248.098       368.502    
  20  0.771980     -0.258797      -19.4322       19.4322       256.190       275.623    
  21  0.507739     -0.677788      -50.8928       50.8928       254.170       305.063    
  22  0.280262      -1.27203      -95.5126       95.5126       239.039       334.552    
  23  0.285359      -1.25401      -94.1592       94.1592       250.289       344.448    
  24  0.246191      -1.40165      -105.245       105.245       253.272       358.517    
  25  0.559989E-01  -2.88242      -216.431       216.431       221.702       438.133    
  26  0.330462      -1.10726      -83.1407       83.1407       248.838       331.979    
  27  0.899405     -0.106022      -7.96085       7.96085       255.750       263.711    
  28  0.637003     -0.450981      -33.8626       33.8626       247.129       280.992    
  29  0.699726E-01  -2.65965      -199.704       199.704       194.808       394.513    
  30  0.677191     -0.389802      -29.2689       29.2689       246.206       275.475    
  31  0.649507     -0.431542      -32.4030       32.4030       250.354       282.757    
  32  0.527986     -0.638685      -47.9567       47.9567       250.289       298.245    
  33  0.374870E-01  -3.28376      -246.567       246.567       253.404       499.971    
  34  0.448697     -0.801407      -60.1750       60.1750       243.047       303.222    
  35  0.809612     -0.211200      -15.8583       15.8583       252.558       268.417    
  36  0.836235     -0.178846      -13.4289       13.4289       236.903       250.332    
  37  0.198161      -1.61867      -121.541       121.541       254.890       376.431    
  38  0.222702      -1.50192      -112.774       112.774       250.401       363.176    
  39  0.888863     -0.117812      -8.84609       8.84609       256.405       265.251    
  40  0.868267     -0.141256      -10.6064       10.6064       216.448       227.054    
  41  0.164066      -1.80749      -135.718       135.718       249.306       385.024    
  42  0.163797      -1.80912      -135.841       135.841       252.992       388.833    
  43  0.883498     -0.123867      -9.30072       9.30072       226.033       235.334    
  44  0.749983     -0.287705      -21.6028       21.6028       273.435       295.037    
  45  0.666691     -0.405428      -30.4422       30.4422       262.721       293.163    
  46  0.978530     -0.217038E-01  -1.62966       1.62966       244.431       246.061    
  47  0.442024     -0.816391      -61.3001       61.3001       217.956       279.256    
  48  0.228080      -1.47806      -110.982       110.982       232.534       343.517    
  49  0.226174      -1.48645      -111.612       111.612       261.740       373.352    
  50  0.388394     -0.945736      -71.0121       71.0121       246.946       317.958    
  51  0.257425      -1.35703      -101.894       101.894       220.149       322.044    
  52  0.707288     -0.346317      -26.0038       26.0038       214.200       240.204    
  53  0.518387     -0.657032      -49.3343       49.3343       229.060       278.394    
  54  0.628700     -0.464102      -34.8478       34.8478       223.887       258.734    
  55  0.981249     -0.189295E-01  -1.42135       1.42135       250.810       252.231    
  56  0.928260     -0.744431E-01  -5.58968       5.58968       249.912       255.501    
  57  0.752004E-02  -4.89018      -367.187       367.187       226.067       593.254    
  58  0.930611     -0.719140E-01  -5.39978       5.39978       285.567       290.967    
  59  0.552686     -0.592965      -44.5237       44.5237       250.286       294.810    
  60  0.695877     -0.362583      -27.2251       27.2251       317.398       344.623    
  61  0.432533     -0.838096      -62.9298       62.9298       250.646       313.575    
  62  0.127859      -2.05683      -154.440       154.440       251.224       405.665    
  63  0.304427      -1.18932      -89.3024       89.3024       285.045       374.347    
  64  0.938376     -0.636043E-01  -4.77583       4.77583       250.289       255.065    
  65  0.958131     -0.427711E-01  -3.21153       3.21153       181.022       184.233    
  66  0.177025      -1.73147      -130.010       130.010       253.308       383.318    
  67  0.352264      -1.04338      -78.3435       78.3435       251.012       329.355    
  68  0.915612     -0.881621E-01  -6.61979       6.61979       257.184       263.804    
  69  0.891986     -0.114305      -8.58275       8.58275       243.859       252.441    
  70  0.754865     -0.281216      -21.1156       21.1156       227.952       249.068    
  71  0.616120     -0.484313      -36.3655       36.3655       228.323       264.689    
  72  0.873159     -0.135638      -10.1846       10.1846       253.828       264.013    
  73  0.437761     -0.826082      -62.0277       62.0277       205.251       267.279    
loop,thermsimp(1:2)       24   92.5599      0.614346    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    114        229.70          0.86          1.12         23.65          0.08          0.05         25.75
Just calling func    0   0         25.75


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    115        393.35          0.87          1.12         23.58          0.12          0.04         25.73
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    229.70
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    75.0866               145
loop is:       24
neval is:      114
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       24      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    75.0866      0.500000    
T0,tstep,tfreq (these do not change):             72
current SAtemp,tstepnext are:    75.0866               145
loop is:       25
neval is:      114


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      145
neval,tstepnext:      114     145

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.145902      -1.92482      -144.528       144.528       181.994       326.522    
   2  0.438196     -0.825090      -61.9532       61.9532       181.022       242.975    
   3  0.637359     -0.450422      -33.8207       33.8207       183.173       216.994    
   4  0.122813      -2.09709      -157.463       157.463       176.615       334.078    
   5  0.926899     -0.759107E-01  -5.69987       5.69987       196.531       202.231    
   6  0.456580     -0.783992      -58.8673       58.8673       216.448       275.315    
   7  0.988763     -0.113008E-01 -0.848542      0.848542       189.837       190.685    
   8  0.499609     -0.693930      -52.1048       52.1048       226.033       278.138    
   9  0.432617     -0.837902      -62.9152       62.9152       214.200       277.116    
  10  0.403570     -0.907406      -68.1340       68.1340       187.491       255.625    
  11  0.435824     -0.830517      -62.3607       62.3607       244.431       306.792    
  12  0.504807     -0.683579      -51.3276       51.3276       227.952       279.280    
  13  0.778763     -0.250048      -18.7753       18.7753       236.903       255.678    
  14  0.429140     -0.845972      -63.5212       63.5212       250.810       314.331    
  15  0.597763     -0.514562      -38.6367       38.6367       243.859       282.495    
  16  0.425932     -0.853476      -64.0846       64.0846       250.289       314.373    
  17  0.825778     -0.191430      -14.3738       14.3738       249.912       264.285    
  18  0.448772     -0.801241      -60.1625       60.1625       223.887       284.049    
  19  0.701335     -0.354770      -26.6385       26.6385       247.717       274.355    
  20  0.425857     -0.853651      -64.0978       64.0978       251.161       315.259    
  21  0.800815     -0.222126      -16.6787       16.6787       255.750       272.429    
  22  0.724239     -0.322634      -24.2255       24.2255       257.184       281.410    
  23  0.312194      -1.16413      -87.4106       87.4106       253.828       341.239    
  24  0.796592     -0.227412      -17.0756       17.0756       228.323       245.399    
  25  0.164146      -1.80700      -135.682       135.682       256.405       392.087    
  26  0.503041     -0.687083      -51.5907       51.5907       208.927       260.518    
  27  0.640838     -0.444978      -33.4119       33.4119       205.251       238.663    
  28  0.327752      -1.11550      -83.7590       83.7590       252.558       336.317    
  29  0.720325     -0.328053      -24.6324       24.6324       244.735       269.368    
  30  0.447570     -0.803922      -60.3637       60.3637       246.206       306.570    
  31  0.377461     -0.974289      -73.1561       73.1561       183.049       256.205    
  32  0.951264     -0.499633E-01  -3.75158       3.75158       256.190       259.942    
  33  0.610405     -0.493632      -37.0652       37.0652       229.060       266.125    
  34  0.564697     -0.571466      -42.9094       42.9094       217.956       260.866    
  35  0.993998     -0.601974E-02 -0.452002      0.452002       247.129       247.581    
  36  0.908032     -0.964757E-01  -7.24403       7.24403       250.354       257.598    
  37  0.731210     -0.313055      -23.5062       23.5062       196.829       220.335    
  38  0.818812     -0.199901      -15.0099       15.0099       251.568       266.578    
  39  0.423172     -0.859976      -64.5727       64.5727       285.567       350.140    
  40  0.554414     -0.589843      -44.2893       44.2893       262.721       307.011    
  41  0.244903E-01  -3.70948      -278.532       278.532       250.286       528.818    
  42  0.337898      -1.08501      -81.4698       81.4698       273.435       354.904    
  43  0.634521E-01  -2.75747      -207.049       207.049       250.289       457.338    
  44  0.824978     -0.192398      -14.4465       14.4465       243.047       257.494    
  45  0.954123     -0.469622E-01  -3.52623       3.52623       250.870       254.396    
  46  0.807852     -0.213376      -16.0217       16.0217       254.170       270.192    
  47  0.335430      -1.09234      -82.0202       82.0202       209.714       291.734    
  48  0.266194      -1.32353      -99.3795       99.3795       250.646       350.025    
  49  0.797818     -0.225874      -16.9602       16.9602       246.946       263.906    
  50  0.710601     -0.341644      -25.6529       25.6529       220.149       245.802    
  51  0.469059     -0.757026      -56.8425       56.8425       250.873       307.715    
  52  0.256457E-01  -3.66338      -275.071       275.071       251.012       526.083    
  53  0.620630     -0.477020      -35.8178       35.8178       248.838       284.656    
  54  0.600237     -0.510431      -38.3265       38.3265       239.039       277.366    
  55  0.959467     -0.413769E-01  -3.10685       3.10685       232.534       235.641    
  56  0.541492     -0.613428      -46.0602       46.0602       250.289       296.349    
  57  0.577789     -0.548547      -41.1885       41.1885       317.398       358.587    
  58  0.701570     -0.354435      -26.6133       26.6133       253.272       279.885    
  59  0.274557E-01  -3.59518      -269.950       269.950       250.401       520.351    
  60  0.584746     -0.536578      -40.2898       40.2898       248.098       288.388    
  61  0.131184      -2.03115      -152.512       152.512       261.740       414.252    
  62  0.986883     -0.132037E-01 -0.991422      0.991422       285.045       286.036    
  63  0.257198      -1.35791      -101.961       101.961       254.890       356.851    
  64  0.831173     -0.184917      -13.8848       13.8848       253.308       267.193    
  65  0.332503      -1.10111      -82.6783       82.6783       249.306       331.985    
  66  0.123451      -2.09191      -157.074       157.074       252.992       410.067    
  67  0.545729     -0.605633      -45.4750       45.4750       248.738       294.213    
  68  0.194995      -1.63478      -122.750       122.750       194.808       317.559    
  69  0.811658     -0.208676      -15.6688       15.6688       251.224       266.893    
  70  0.610911     -0.492804      -37.0030       37.0030       229.865       266.868    
  71  0.482852     -0.728044      -54.6664       54.6664       221.702       276.368    
  72  0.487726     -0.718001      -53.9122       53.9122       253.404       307.316    
  73  0.650526     -0.429973      -32.2852       32.2852       229.701       261.987    
loop,thermsimp(1:2)       25   144.528       61.9532    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    116        209.56          0.83          1.11         23.61          0.18          0.05         25.77
Just calling func    0   0         25.77


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    117        202.86          0.86          1.12         23.60          0.16          0.05         25.80
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    202.86
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    75.0866               145
loop is:       25
neval is:      116
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       25      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    75.0866      0.500000    
T0,tstep,tfreq (these do not change):             72
current SAtemp,tstepnext are:    75.0866               145
loop is:       26
neval is:      116


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      145
neval,tstepnext:      116     145

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.781042     -0.247126      -18.5558       18.5558       189.837       208.393    
   2  0.928800     -0.738619E-01  -5.54604       5.54604       196.531       202.077    
   3  0.727994     -0.317462      -23.8372       23.8372       183.173       207.010    
   4  0.109723E-01  -4.51238      -338.820       338.820       196.829       535.648    
   5  0.160096      -1.83198      -137.557       137.557       232.534       370.092    
   6  0.497079     -0.699006      -52.4860       52.4860       205.251       257.737    
   7  0.789473     -0.236389      -17.7497       17.7497       181.022       198.771    
   8  0.763780     -0.269476      -20.2340       20.2340       228.323       248.557    
   9  0.217288      -1.52653      -114.622       114.622       220.149       334.771    
  10  0.867642     -0.141976      -10.6605       10.6605       247.129       257.790    
  11  0.740966     -0.299800      -22.5110       22.5110       250.870       273.381    
  12  0.999757     -0.242662E-03 -0.182207E-01  0.182207E-01   187.491       187.509    
  13  0.587476     -0.531920      -39.9400       39.9400       236.903       276.843    
  14  0.703619     -0.351518      -26.3943       26.3943       183.049       209.443    
  15  0.740946     -0.299828      -22.5131       22.5131       243.047       265.560    
  16  0.335927      -1.09086      -81.9090       81.9090       250.354       332.263    
  17  0.736553     -0.305774      -22.9595       22.9595       256.190       279.150    
  18  0.597397     -0.515174      -38.6827       38.6827       208.927       247.610    
  19  0.126601      -2.06672      -155.183       155.183       217.956       373.139    
  20  0.990194     -0.985477E-02 -0.739961      0.739961       229.701       230.441    
  21  0.716453     -0.333443      -25.0371       25.0371       246.946       271.983    
  22  0.279233E-01  -3.57829      -268.682       268.682       249.912       518.593    
  23  0.413932     -0.882054      -66.2304       66.2304       229.060       295.290    
  24  0.109516      -2.21168      -166.068       166.068       251.568       417.636    
  25  0.440749     -0.819279      -61.5169       61.5169       229.865       291.382    
  26  0.412115     -0.886453      -66.5608       66.5608       251.224       317.785    
  27  0.146963      -1.91758      -143.984       143.984       253.308       397.292    
  28  0.345919      -1.06155      -79.7082       79.7082       244.735       324.443    
  29  0.343614      -1.06824      -80.2102       80.2102       254.170       334.381    
  30  0.600334E-01  -2.81285      -211.208       211.208       255.750       466.958    
  31  0.751538     -0.285634      -21.4473       21.4473       247.717       269.164    
  32  0.878119     -0.129973      -9.75926       9.75926       216.448       226.207    
  33  0.544046     -0.608721      -45.7068       45.7068       221.702       267.408    
  34  0.931023     -0.714714E-01  -5.36655       5.36655       214.200       219.567    
  35  0.131968      -2.02520      -152.065       152.065       239.039       391.105    
  36  0.826694E-01  -2.49291      -187.184       187.184       226.033       413.217    
  37  0.174702E-02  -6.34984      -476.788       476.788       227.952       704.740    
  38  0.233470      -1.45470      -109.229       109.229       253.272       362.501    
  39  0.232927      -1.45703      -109.403       109.403       257.184       366.588    
  40  0.958279     -0.426163E-01  -3.19992       3.19992       243.859       247.059    
  41  0.820100     -0.198330      -14.8919       14.8919       223.887       238.778    
  42  0.305797      -1.18483      -88.9652       88.9652       248.838       337.804    
  43  0.260853      -1.34380      -100.901       100.901       285.045       385.946    
  44  0.960408     -0.403967E-01  -3.03325       3.03325       248.098       251.132    
  45  0.318957      -1.14270      -85.8014       85.8014       209.714       295.515    
  46  0.146887      -1.91809      -144.023       144.023       248.738       392.761    
  47  0.787623     -0.238735      -17.9258       17.9258       250.289       268.215    
  48  0.452412     -0.793163      -59.5559       59.5559       246.206       305.762    
  49  0.218339      -1.52170      -114.260       114.260       244.431       358.691    
  50  0.177672      -1.72782      -129.736       129.736       262.721       392.457    
  51  0.928922     -0.737304E-01  -5.53617       5.53617       253.404       258.940    
  52  0.341447      -1.07456      -80.6852       80.6852       250.873       331.558    
  53  0.462674     -0.770732      -57.8717       57.8717       250.810       308.681    
  54  0.125513      -2.07534      -155.831       155.831       250.289       406.119    
  55  0.354899      -1.03592      -77.7838       77.7838       251.161       328.945    
  56  0.341830      -1.07344      -80.6012       80.6012       194.808       275.410    
  57  0.604983     -0.502555      -37.7352       37.7352       181.994       219.729    
  58  0.223932      -1.49641      -112.361       112.361       249.306       361.667    
  59  0.146473      -1.92091      -144.235       144.235       176.615       320.850    
  60  0.997224     -0.277992E-02 -0.208734      0.208734       252.558       252.767    
  61  0.430465     -0.842888      -63.2896       63.2896       253.828       317.118    
  62  0.712472     -0.339015      -25.4555       25.4555       250.646       276.101    
  63  0.303370      -1.19280      -89.5635       89.5635       285.567       375.131    
  64  0.676458E-01  -2.69347      -202.244       202.244       273.435       475.678    
  65  0.226497      -1.48502      -111.505       111.505       254.890       366.395    
  66  0.590955     -0.526015      -39.4967       39.4967       317.398       356.895    
  67  0.914813     -0.890359E-01  -6.68541       6.68541       256.405       263.091    
  68  0.157483      -1.84844      -138.793       138.793       252.992       391.785    
  69  0.117954E-01  -4.44005      -333.388       333.388       261.740       595.128    
  70  0.589104     -0.529153      -39.7323       39.7323       250.289       290.021    
  71  0.826668     -0.190352      -14.2929       14.2929       250.401       264.694    
  72  0.535992     -0.623635      -46.8267       46.8267       251.012       297.839    
  73  0.460564     -0.775304      -58.2149       58.2149       202.861       261.076    
loop,thermsimp(1:2)       26   18.5558       5.54604    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    118        249.93          0.86          1.12         24.02          0.05          0.05         26.11
Just calling func    0   0         26.10


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    249.93
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    75.0866               145
loop is:       26
neval is:      117
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       26      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    75.0866      0.500000    
T0,tstep,tfreq (these do not change):             72
current SAtemp,tstepnext are:    75.0866               145
loop is:       27
neval is:      117


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      145
neval,tstepnext:      117     145

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.818509     -0.200271      -15.0377       15.0377       187.491       202.529    
   2  0.309452      -1.17295      -88.0731       88.0731       181.022       269.095    
   3  0.303638      -1.19192      -89.4972       89.4972       196.531       286.028    
   4  0.754457     -0.281757      -21.1562       21.1562       183.173       204.329    
   5  0.623133     -0.472996      -35.5157       35.5157       189.837       225.353    
   6  0.989422E-01  -2.31322      -173.692       173.692       183.049       356.740    
   7  0.695126     -0.363662      -27.3062       27.3062       214.200       241.506    
   8  0.832210E-01  -2.48626      -186.684       186.684       181.994       368.678    
   9  0.869521     -0.139813      -10.4981       10.4981       216.448       226.946    
  10  0.488136     -0.717160      -53.8491       53.8491       229.701       283.551    
  11  0.579877     -0.544940      -40.9177       40.9177       223.887       264.804    
  12  0.480435     -0.733064      -55.0433       55.0433       243.859       298.902    
  13  0.792626     -0.232404      -17.4504       17.4504       208.927       226.377    
  14  0.870230     -0.138998      -10.4369       10.4369       228.323       238.760    
  15  0.886361     -0.120631      -9.05775       9.05775       248.098       257.156    
  16  0.358181      -1.02672      -77.0928       77.0928       252.558       329.651    
  17  0.560125     -0.579594      -43.5198       43.5198       205.251       248.771    
  18  0.546151     -0.604859      -45.4168       45.4168       247.129       292.546    
  19  0.732086     -0.311858      -23.4164       23.4164       253.404       276.820    
  20  0.590102     -0.527460      -39.6052       39.6052       202.861       242.467    
  21  0.867355     -0.142307      -10.6854       10.6854       256.405       267.091    
  22  0.749758     -0.288005      -21.6253       21.6253       250.401       272.027    
  23  0.721970     -0.325772      -24.4611       24.4611       243.047       267.508    
  24  0.596865     -0.516065      -38.7496       38.7496       221.702       260.451    
  25  0.878161     -0.129925      -9.75562       9.75562       250.289       260.044    
  26  0.558752E-01  -2.88463      -216.597       216.597       247.717       464.314    
  27  0.555543     -0.587810      -44.1367       44.1367       246.946       291.083    
  28  0.597562     -0.514897      -38.6618       38.6618       250.870       289.532    
  29  0.995329     -0.468202E-02 -0.351557      0.351557       194.808       195.160    
  30  0.206787      -1.57606      -118.341       118.341       250.646       368.987    
  31  0.645457     -0.437797      -32.8727       32.8727       236.903       269.776    
  32  0.871352     -0.137710      -10.3401       10.3401       256.190       266.530    
  33  0.701360     -0.354733      -26.6357       26.6357       250.289       276.924    
  34  0.936151     -0.659784E-01  -4.95410       4.95410       229.865       234.819    
  35  0.590091     -0.527478      -39.6065       39.6065       229.060       268.667    
  36  0.750433     -0.287105      -21.5577       21.5577       209.714       231.271    
  37  0.326255      -1.12007      -84.1026       84.1026       251.012       335.115    
  38  0.873133     -0.135668      -10.1868       10.1868       246.206       256.393    
  39  0.621627     -0.475415      -35.6973       35.6973       250.810       286.507    
  40  0.153041      -1.87705      -140.941       140.941       253.828       394.770    
  41  0.196696      -1.62610      -122.098       122.098       251.224       373.322    
  42  0.365028      -1.00778      -75.6709       75.6709       176.615       252.286    
  43  0.398429     -0.920226      -69.0967       69.0967       244.735       313.832    
  44  0.549691     -0.598399      -44.9318       44.9318       251.161       296.093    
  45  0.994179     -0.583795E-02 -0.438352      0.438352       250.873       251.311    
  46  0.147335E-01  -4.21763      -316.688       316.688       250.354       567.041    
  47  0.224737      -1.49282      -112.091       112.091       254.170       366.262    
  48  0.182172      -1.70281      -127.858       127.858       220.149       348.007    
  49  0.230919      -1.46569      -110.054       110.054       248.838       358.892    
  50  0.491818     -0.709647      -53.2850       53.2850       317.398       370.683    
  51  0.370754     -0.992217      -74.5022       74.5022       244.431       318.934    
  52  0.785622     -0.241279      -18.1168       18.1168       249.306       267.423    
  53  0.476284     -0.741742      -55.6949       55.6949       253.272       308.967    
  54  0.958799     -0.420736E-01  -3.15916       3.15916       254.890       258.049    
  55  0.305133      -1.18701      -89.1284       89.1284       257.184       346.313    
  56  0.270329      -1.30812      -98.2220       98.2220       232.534       330.757    
  57  0.130426      -2.03695      -152.948       152.948       217.956       370.904    
  58  0.222171      -1.50431      -112.953       112.953       285.567       398.520    
  59  0.233872      -1.45298      -109.099       109.099       285.045       394.144    
  60  0.916355E-02  -4.69252      -352.346       352.346       239.039       591.385    
  61  0.400634     -0.914708      -68.6823       68.6823       252.992       321.675    
  62  0.354647E-01  -3.33922      -250.730       250.730       262.721       513.452    
  63  0.453450     -0.790870      -59.3837       59.3837       248.738       308.122    
  64  0.411527     -0.887880      -66.6679       66.6679       253.308       319.976    
  65  0.607753     -0.497987      -37.3921       37.3921       250.289       287.681    
  66  0.157481      -1.84845      -138.794       138.794       226.033       364.827    
  67  0.260711E-01  -3.64693      -273.835       273.835       251.568       525.404    
  68  0.183987      -1.69289      -127.113       127.113       255.750       382.863    
  69  0.704951     -0.349627      -26.2523       26.2523       273.435       299.687    
  70  0.337767      -1.08540      -81.4989       81.4989       249.912       331.410    
  71  0.718219     -0.330981      -24.8522       24.8522       196.829       221.681    
  72  0.102024      -2.28254      -171.388       171.388       261.740       433.129    
  73  0.357156      -1.02958      -77.3078       77.3078       249.934       327.242    
loop,thermsimp(1:2)       27   15.0377       88.0731    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    119        212.29          0.86          1.12         23.71          0.06          0.05         25.80
Just calling func    0   0         25.81


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    120        206.99          0.86          1.12         23.59          0.09          0.05         25.70
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    206.99
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    75.0866               145
loop is:       27
neval is:      119
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       27      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    75.0866      0.500000    
T0,tstep,tfreq (these do not change):             72
current SAtemp,tstepnext are:    75.0866               145
loop is:       28
neval is:      119


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      145
neval,tstepnext:      119     145

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.808657     -0.212380      -15.9469       15.9469       194.808       210.755    
   2  0.162004E-01  -4.12272      -309.561       309.561       187.491       497.052    
   3  0.446841E-01  -3.10814      -233.379       233.379       183.173       416.552    
   4  0.757954     -0.277132      -20.8089       20.8089       196.829       217.637    
   5  0.525315     -0.643757      -48.3376       48.3376       189.837       238.175    
   6  0.229940      -1.46994      -110.373       110.373       208.927       319.300    
   7  0.273310E-01  -3.59973      -270.292       270.292       216.448       486.740    
   8  0.228047      -1.47820      -110.993       110.993       209.714       320.707    
   9  0.963384E-01  -2.33989      -175.694       175.694       229.865       405.559    
  10  0.495504     -0.702179      -52.7242       52.7242       228.323       281.048    
  11  0.930436     -0.721018E-01  -5.41388       5.41388       214.200       219.614    
  12  0.138744      -1.97513      -148.306       148.306       202.861       351.167    
  13  0.676381     -0.390999      -29.3588       29.3588       205.251       234.610    
  14  0.763696     -0.269586      -20.2423       20.2423       250.873       271.115    
  15  0.282468      -1.26419      -94.9238       94.9238       176.615       271.539    
  16  0.359172      -1.02395      -76.8852       76.8852       246.206       323.092    
  17  0.392258     -0.935834      -70.2686       70.2686       248.098       318.367    
  18  0.524686     -0.644955      -48.4274       48.4274       254.890       303.317    
  19  0.850465     -0.161972      -12.1619       12.1619       250.289       262.451    
  20  0.227056      -1.48256      -111.320       111.320       221.702       333.022    
  21  0.942039     -0.597082E-01  -4.48329       4.48329       223.887       228.370    
  22  0.807336     -0.214016      -16.0697       16.0697       256.190       272.260    
  23  0.345853      -1.06174      -79.7226       79.7226       256.405       336.128    
  24  0.762940     -0.270575      -20.3166       20.3166       249.306       269.623    
  25  0.589959     -0.527702      -39.6233       39.6233       243.047       282.670    
  26  0.563539     -0.573518      -43.0635       43.0635       229.060       272.124    
  27  0.812044     -0.208201      -15.6331       15.6331       181.022       196.655    
  28  0.735850     -0.306729      -23.0313       23.0313       236.903       259.934    
  29  0.396292     -0.925605      -69.5005       69.5005       250.401       319.902    
  30  0.623568     -0.472298      -35.4633       35.4633       253.404       288.867    
  31  0.925937     -0.769486E-01  -5.77781       5.77781       250.289       256.067    
  32  0.880074     -0.127749      -9.59227       9.59227       229.701       239.294    
  33  0.379958     -0.967693      -72.6608       72.6608       196.531       269.192    
  34  0.842940E-01  -2.47344      -185.723       185.723       250.810       436.532    
  35  0.199092      -1.61399      -121.189       121.189       250.289       371.478    
  36  0.625899     -0.468566      -35.1830       35.1830       250.870       286.053    
  37  0.888337     -0.118405      -8.89060       8.89060       246.946       255.837    
  38  0.959633     -0.412048E-01  -3.09393       3.09393       247.129       250.223    
  39  0.289813      -1.23852      -92.9961       92.9961       251.161       344.158    
  40  0.889440     -0.117163      -8.79739       8.79739       243.859       252.656    
  41  0.797260     -0.226575      -17.0127       17.0127       273.435       290.447    
  42  0.451097     -0.796073      -59.7744       59.7744       248.738       308.512    
  43  0.609578     -0.494989      -37.1670       37.1670       253.272       290.439    
  44  0.910850     -0.933770E-01  -7.01136       7.01136       244.735       251.747    
  45  0.448191     -0.802536      -60.2597       60.2597       244.431       304.691    
  46  0.831229     -0.184850      -13.8797       13.8797       253.308       267.188    
  47  0.246260      -1.40137      -105.224       105.224       252.992       358.216    
  48  0.280480      -1.27125      -95.4540       95.4540       249.934       345.388    
  49  0.161513      -1.82317      -136.896       136.896       252.558       389.454    
  50  0.337020      -1.08761      -81.6652       81.6652       232.534       314.200    
  51  0.160136      -1.83173      -137.538       137.538       249.912       387.450    
  52  0.268039      -1.31662      -98.8608       98.8608       251.012       349.873    
  53  0.907744     -0.967928E-01  -7.26784       7.26784       257.184       264.452    
  54  0.237998      -1.43549      -107.786       107.786       220.149       327.936    
  55  0.932063     -0.703547E-01  -5.28270       5.28270       183.049       188.331    
  56  0.304233      -1.18996      -89.3503       89.3503       248.838       338.189    
  57  0.471578     -0.751672      -56.4405       56.4405       226.033       282.473    
  58  0.985625     -0.144798E-01  -1.08724       1.08724       254.170       255.258    
  59  0.576194     -0.551311      -41.3961       41.3961       181.994       223.390    
  60  0.561463     -0.577209      -43.3407       43.3407       250.646       293.986    
  61  0.762775     -0.270792      -20.3329       20.3329       317.398       337.731    
  62  0.728042     -0.317397      -23.8322       23.8322       217.956       241.789    
  63  0.246589      -1.40003      -105.124       105.124       251.224       356.348    
  64  0.128678      -2.05044      -153.961       153.961       255.750       409.711    
  65  0.646131     -0.436753      -32.7943       32.7943       285.045       317.839    
  66  0.520849E-01  -2.95488      -221.872       221.872       253.828       475.700    
  67  0.103665      -2.26659      -170.190       170.190       285.567       455.758    
  68  0.209683      -1.56216      -117.297       117.297       261.740       379.037    
  69  0.401865     -0.911640      -68.4520       68.4520       247.717       316.169    
  70  0.111589      -2.19294      -164.660       164.660       262.721       427.381    
  71  0.683688     -0.380253      -28.5519       28.5519       251.568       280.120    
  72  0.912223     -0.918706E-01  -6.89825       6.89825       250.354       257.252    
  73  0.651148E-01  -2.73160      -205.107       205.107       206.991       412.098    
loop,thermsimp(1:2)       28   15.9469       309.561    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    121        197.71          0.86          1.12         23.64          0.12          0.04         25.79
Just calling func    0   0         25.79


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    122        194.26          0.86          1.12         23.58          0.14          0.04         25.75
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  120    197.71        1.749     -1.258      1.749     -102.6     0.8623    
                      0.6172      2.057     -99.70      3.754    -0.1879    
                       1.748     -1.478      1.418      0.000     -5.000    
                      -1.028      0.000      0.000      0.000     -1.221    

                      -2.500      9255.      8849.      0.000      0.000    
                     -0.5672     -6.320     -4.624     -7.458      3.077    
                      -14.18     -2.969      1250.      0.000      4521.    

                       7576.      6992.    -0.1751E+05 0.1061E+05  2335.    
                       3000.     0.1163    -0.5023E-01  0.000    -0.4631    
                     -0.6244E-01-0.1099    -0.1095    -0.1981    -0.5739E-02

                      -1.567    -0.2747E-03  0.000    -0.3245E-01 0.2651E-01
                      0.8541E-01 0.3637E-01 0.8112E-03-0.8488E-01 0.1374    
                     -0.3369E-01-0.3240E-01-0.8655E-01-0.3749      0.000    

                     -0.7794     -1.447     -2.170     -2.943    -0.3057    
                      0.1637      9.243      9.152    -0.1956E+05 -4.000    
                     -0.4336    -0.5540      9.359      8.442    -0.2114E+05

                      -4.000     0.6785E-01-0.6642      8.811      9.050    
                     -0.3170E+05 -7.000    -0.4965    -0.4713      9.427    
                       8.438    -0.2839E+05 -7.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    194.26
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    75.0866               145
loop is:       28
neval is:      121
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       28      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    75.0866      0.500000    
T0,tstep,tfreq (these do not change):             72
current SAtemp,tstepnext are:    75.0866               145
loop is:       29
neval is:      121


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      145
neval,tstepnext:      121     145

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.115886      -2.15515      -161.823       161.823       183.049       344.872    
   2  0.685048     -0.378267      -28.4028       28.4028       181.022       209.425    
   3  0.739526     -0.301746      -22.6571       22.6571       194.808       217.466    
   4  0.161448      -1.82357      -136.926       136.926       196.829       333.754    
   5  0.819608     -0.198929      -14.9369       14.9369       214.200       229.137    
   6  0.750679     -0.286777      -21.5331       21.5331       181.994       203.527    
   7  0.797409     -0.226388      -16.9987       16.9987       223.887       240.885    
   8  0.193123      -1.64443      -123.475       123.475       205.251       328.726    
   9  0.189346E-01  -3.96676      -297.851       297.851       189.837       487.688    
  10  0.715264     -0.335103      -25.1618       25.1618       229.701       254.863    
  11  0.384856     -0.954886      -71.6992       71.6992       217.956       289.656    
  12  0.268023      -1.31668      -98.8653       98.8653       247.129       345.995    
  13  0.777164     -0.252104      -18.9296       18.9296       244.735       263.665    
  14  0.707495E-01  -2.64861      -198.875       198.875       243.859       442.734    
  15  0.233610      -1.45410      -109.184       109.184       254.170       363.354    
  16  0.193057      -1.64477      -123.500       123.500       246.946       370.447    
  17  0.486879     -0.719739      -54.0428       54.0428       250.289       304.332    
  18  0.735370     -0.307381      -23.0802       23.0802       250.354       273.434    
  19  0.147509      -1.91387      -143.706       143.706       236.903       380.609    
  20  0.739111     -0.302308      -22.6992       22.6992       250.289       272.988    
  21  0.886241     -0.120766      -9.06790       9.06790       257.184       266.252    
  22  0.158672      -1.84092      -138.228       138.228       253.308       391.536    
  23  0.143658      -1.94032      -145.692       145.692       196.531       342.223    
  24  0.637431E-02  -5.05548      -379.599       379.599       249.306       628.905    
  25  0.753372     -0.283196      -21.2643       21.2643       250.873       272.137    
  26  0.555831     -0.587292      -44.0978       44.0978       176.615       220.713    
  27  0.280013      -1.27292      -95.5791       95.5791       229.060       324.639    
  28  0.811304     -0.209112      -15.7015       15.7015       256.190       271.892    
  29  0.972296E-02  -4.63327      -347.896       347.896       251.568       599.464    
  30  0.713459     -0.337631      -25.3516       25.3516       228.323       253.675    
  31  0.194621      -1.63670      -122.894       122.894       226.033       348.927    
  32  0.492587     -0.708083      -53.1676       53.1676       243.047       296.215    
  33  0.759094E-01  -2.57821      -193.589       193.589       250.870       444.459    
  34  0.494544     -0.704119      -52.8699       52.8699       253.404       306.274    
  35  0.297023      -1.21395      -91.1511       91.1511       253.272       344.423    
  36  0.429878E-01  -3.14684      -236.285       236.285       273.435       509.720    
  37  0.490931     -0.711452      -53.4205       53.4205       250.646       304.066    
  38  0.534417     -0.626578      -47.0476       47.0476       254.890       301.938    
  39  0.254967      -1.36662      -102.615       102.615       244.431       347.046    
  40  0.995945     -0.406335E-02 -0.305103      0.305103       248.738       249.043    
  41  0.428814E-01  -3.14932      -236.471       236.471       232.534       469.006    
  42  0.332915      -1.09987      -82.5854       82.5854       247.717       330.302    
  43  0.657266     -0.419666      -31.5113       31.5113       285.045       316.556    
  44  0.301071      -1.20041      -90.1346       90.1346       248.098       338.233    
  45  0.998178     -0.182349E-02 -0.136920      0.136920       208.927       209.064    
  46  0.533372     -0.628536      -47.1946       47.1946       250.401       297.596    
  47  0.244746      -1.40753      -105.687       105.687       209.714       315.401    
  48  0.345321      -1.06328      -79.8383       79.8383       246.206       326.045    
  49  0.339541      -1.08016      -81.1057       81.1057       220.149       301.255    
  50  0.456434     -0.784311      -58.8913       58.8913       221.702       280.593    
  51  0.510210     -0.672933      -50.5283       50.5283       256.405       306.933    
  52  0.678441     -0.387958      -29.1305       29.1305       317.398       346.529    
  53  0.802552     -0.219958      -16.5159       16.5159       248.838       265.354    
  54  0.542503     -0.611562      -45.9202       45.9202       251.161       297.082    
  55  0.887113     -0.119783      -8.99412       8.99412       249.934       258.928    
  56  0.631934     -0.458971      -34.4626       34.4626       251.012       285.474    
  57  0.776760     -0.252624      -18.9687       18.9687       202.861       221.830    
  58  0.764990     -0.267893      -20.1152       20.1152       251.224       271.340    
  59  0.329328      -1.11070      -83.3987       83.3987       252.992       336.391    
  60  0.304425      -1.18933      -89.3028       89.3028       250.289       339.591    
  61  0.992863     -0.716266E-02 -0.537820      0.537820       261.740       262.278    
  62  0.545111     -0.606767      -45.5600       45.5600       249.912       295.472    
  63  0.215175      -1.53630      -115.356       115.356       252.558       367.914    
  64  0.486479     -0.720562      -54.1046       54.1046       229.865       283.970    
  65  0.323711      -1.12790      -84.6905       84.6905       255.750       340.440    
  66  0.339000      -1.08176      -81.2254       81.2254       206.991       288.217    
  67  0.494013     -0.705193      -52.9505       52.9505       183.173       236.123    
  68  0.496084     -0.701011      -52.6365       52.6365       262.721       315.358    
  69  0.736144     -0.306329      -23.0012       23.0012       250.810       273.811    
  70  0.106083E-01  -4.54612      -341.353       341.353       285.567       626.920    
  71  0.106417      -2.24039      -168.223       168.223       253.828       422.051    
  72  0.378322     -0.972010      -72.9850       72.9850       216.448       289.433    
  73  0.180300      -1.71314      -128.634       128.634       194.261       322.894    
loop,thermsimp(1:2)       29   161.823       28.4028    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    123        209.51          0.86          1.12         23.55          0.16          0.05         25.74
Just calling func    0   0         25.74


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    124        207.13          0.86          1.12         23.61          0.12          0.05         25.75
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    207.13
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    75.0866               145
loop is:       29
neval is:      123
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       29      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    75.0866      0.500000    
T0,tstep,tfreq (these do not change):             72
current SAtemp,tstepnext are:    75.0866               145
loop is:       30
neval is:      123


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      145
neval,tstepnext:      123     145

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.396389E-01  -3.22794      -242.375       242.375       181.994       424.369    
   2  0.712690     -0.338709      -25.4325       25.4325       208.927       234.359    
   3  0.284498      -1.25703      -94.3861       94.3861       181.022       275.408    
   4  0.132414      -2.02182      -151.812       151.812       194.808       346.620    
   5  0.868558     -0.140920      -10.5812       10.5812       176.615       187.196    
   6  0.695240     -0.363498      -27.2938       27.2938       202.861       230.155    
   7  0.777362     -0.251849      -18.9105       18.9105       214.200       233.111    
   8  0.302494      -1.19569      -89.7806       89.7806       183.173       272.953    
   9  0.710188     -0.342225      -25.6965       25.6965       223.887       249.583    
  10  0.884530     -0.122698      -9.21300       9.21300       248.738       257.951    
  11  0.146421E-01  -4.22386      -317.155       317.155       228.323       545.478    
  12  0.834801     -0.180562      -13.5578       13.5578       229.701       243.259    
  13  0.414011     -0.881863      -66.2161       66.2161       249.934       316.150    
  14  0.655777     -0.421935      -31.6817       31.6817       261.740       293.422    
  15  0.530106     -0.634679      -47.6559       47.6559       244.735       292.391    
  16  0.325231      -1.12322      -84.3388       84.3388       248.838       333.177    
  17  0.293550      -1.22571      -92.0343       92.0343       257.184       349.219    
  18  0.194161      -1.63907      -123.072       123.072       251.224       374.297    
  19  0.589029E-01  -2.83186      -212.635       212.635       256.190       468.825    
  20  0.385142     -0.954143      -71.6434       71.6434       250.873       322.516    
  21  0.287461      -1.24667      -93.6081       93.6081       250.289       343.897    
  22  0.528518     -0.637678      -47.8811       47.8811       250.354       298.235    
  23  0.517042     -0.659630      -49.5294       49.5294       250.810       300.339    
  24  0.453375     -0.791035      -59.3961       59.3961       221.702       281.098    
  25  0.695596     -0.362986      -27.2554       27.2554       229.865       257.120    
  26  0.645178     -0.438228      -32.9051       32.9051       251.012       283.917    
  27  0.696076     -0.362297      -27.2037       27.2037       206.991       234.195    
  28  0.483522     -0.726659      -54.5623       54.5623       216.448       271.010    
  29  0.155396E-01  -4.16436      -312.688       312.688       217.956       530.644    
  30  0.883154     -0.124256      -9.32996       9.32996       249.912       259.241    
  31  0.525944     -0.642561      -48.2478       48.2478       243.047       291.295    
  32  0.746799     -0.291959      -21.9222       21.9222       251.161       273.084    
  33  0.458658     -0.779449      -58.5262       58.5262       250.401       308.928    
  34  0.614284     -0.487298      -36.5896       36.5896       220.149       256.739    
  35  0.581412     -0.542295      -40.7191       40.7191       254.890       295.609    
  36  0.820935     -0.197312      -14.8155       14.8155       250.646       265.461    
  37  0.852366     -0.159739      -11.9943       11.9943       250.289       262.283    
  38  0.527059     -0.640443      -48.0887       48.0887       253.404       301.493    
  39  0.376404     -0.977092      -73.3665       73.3665       256.405       329.772    
  40  0.729525E-01  -2.61795      -196.573       196.573       262.721       459.294    
  41  0.342258      -1.07219      -80.5072       80.5072       209.714       290.221    
  42  0.955065     -0.459761E-01  -3.45219       3.45219       285.045       288.497    
  43  0.508654E-01  -2.97857      -223.651       223.651       194.261       417.912    
  44  0.471716     -0.751379      -56.4185       56.4185       229.060       285.478    
  45  0.137118      -1.98691      -149.191       149.191       246.206       395.397    
  46  0.844826     -0.168625      -12.6614       12.6614       205.251       217.913    
  47  0.841708     -0.172322      -12.9391       12.9391       247.717       260.656    
  48  0.360396E-01  -3.32314      -249.523       249.523       196.829       446.352    
  49  0.953282     -0.478444E-01  -3.59247       3.59247       252.992       256.585    
  50  0.503408     -0.686355      -51.5360       51.5360       248.098       299.635    
  51  0.593854     -0.521122      -39.1293       39.1293       250.289       289.418    
  52  0.524910     -0.644528      -48.3954       48.3954       255.750       304.145    
  53  0.730244     -0.314377      -23.6055       23.6055       196.531       220.136    
  54  0.828919     -0.187632      -14.0887       14.0887       253.272       267.360    
  55  0.151629      -1.88632      -141.637       141.637       183.049       324.686    
  56  0.431672     -0.840089      -63.0794       63.0794       247.129       310.209    
  57  0.449333     -0.799990      -60.0685       60.0685       317.398       377.467    
  58  0.116759      -2.14764      -161.259       161.259       244.431       405.691    
  59  0.578588     -0.547165      -41.0848       41.0848       226.033       267.118    
  60  0.119282      -2.12627      -159.654       159.654       254.170       413.825    
  61  0.643272E-01  -2.74377      -206.021       206.021       252.558       458.579    
  62  0.906211     -0.984834E-01  -7.39478       7.39478       246.946       254.341    
  63  0.811859     -0.208429      -15.6502       15.6502       236.903       252.553    
  64  0.119821      -2.12175      -159.315       159.315       253.308       412.623    
  65  0.827508     -0.189336      -14.2166       14.2166       253.828       268.045    
  66  0.597713     -0.514645      -38.6429       38.6429       243.859       282.502    
  67  0.408976     -0.894099      -67.1348       67.1348       250.870       318.005    
  68  0.889044     -0.117608      -8.83080       8.83080       232.534       241.365    
  69  0.623536     -0.472349      -35.4671       35.4671       189.837       225.304    
  70  0.477389     -0.739423      -55.5208       55.5208       273.435       328.955    
  71  0.313804      -1.15899      -87.0245       87.0245       251.568       338.593    
  72  0.814527     -0.205148      -15.4039       15.4039       285.567       300.971    
  73  0.133792      -2.01147      -151.035       151.035       207.128       358.163    
loop,thermsimp(1:2)       30   242.375       25.4325    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    125        211.77          0.86          1.12         23.57          0.18          0.05         25.79
Just calling func    0   0         25.79


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    126        201.82          0.86          1.12         23.64          0.10          0.05         25.77
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    201.82
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    75.0866               145
loop is:       30
neval is:      125
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       30      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    75.0866      0.500000    
T0,tstep,tfreq (these do not change):             72
current SAtemp,tstepnext are:    75.0866               145
loop is:       31
neval is:      125


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      145
neval,tstepnext:      125     145

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.248581      -1.39199      -104.520       104.520       176.615       281.135    
   2  0.247647      -1.39575      -104.802       104.802       205.251       310.054    
   3  0.396263     -0.925678      -69.5061       69.5061       196.531       266.037    
   4  0.386461     -0.950723      -71.3866       71.3866       189.837       261.224    
   5  0.729285     -0.315691      -23.7041       23.7041       202.861       226.566    
   6  0.665866     -0.406667      -30.5353       30.5353       214.200       244.736    
   7  0.385122     -0.954194      -71.6472       71.6472       206.991       278.639    
   8  0.625701     -0.468883      -35.2068       35.2068       208.927       244.134    
   9  0.392668     -0.934792      -70.1904       70.1904       232.534       302.725    
  10  0.698356     -0.359026      -26.9581       26.9581       229.701       256.660    
  11  0.537534E-01  -2.92335      -219.504       219.504       223.887       443.391    
  12  0.289307      -1.24027      -93.1275       93.1275       236.903       330.031    
  13  0.138460E-01  -4.27976      -321.353       321.353       246.946       568.299    
  14  0.824110     -0.193451      -14.5256       14.5256       252.992       267.518    
  15  0.560983     -0.578065      -43.4049       43.4049       220.149       263.554    
  16  0.116087E-01  -4.45600      -334.586       334.586       229.865       564.451    
  17  0.218033      -1.52311      -114.365       114.365       248.738       363.103    
  18  0.893705E-01  -2.41497      -181.332       181.332       249.912       431.243    
  19  0.304886      -1.18782      -89.1891       89.1891       247.717       336.906    
  20  0.179833      -1.71573      -128.828       128.828       250.289       379.117    
  21  0.867378     -0.142281      -10.6834       10.6834       250.646       261.329    
  22  0.243287      -1.41351      -106.136       106.136       226.033       332.169    
  23  0.772489     -0.258138      -19.3827       19.3827       253.272       272.654    
  24  0.321011      -1.13628      -85.3195       85.3195       253.828       339.148    
  25  0.499417     -0.694314      -52.1337       52.1337       216.448       268.581    
  26  0.396806     -0.924307      -69.4031       69.4031       183.173       252.576    
  27  0.580203E-01  -2.84696      -213.769       213.769       251.161       464.930    
  28  0.854206     -0.157583      -11.8324       11.8324       181.022       192.854    
  29  0.914649     -0.892145E-01  -6.69881       6.69881       221.702       228.400    
  30  0.167601      -1.78617      -134.117       134.117       243.859       377.976    
  31  0.350137      -1.04943      -78.7982       78.7982       251.012       329.810    
  32  0.522932     -0.648304      -48.6789       48.6789       229.060       277.739    
  33  0.538779     -0.618450      -46.4373       46.4373       285.045       331.482    
  34  0.693066     -0.366629      -27.5290       27.5290       250.289       277.818    
  35  0.361961      -1.01622      -76.3044       76.3044       209.714       286.018    
  36  0.310665      -1.16904      -87.7793       87.7793       243.047       330.826    
  37  0.818669     -0.200076      -15.0230       15.0230       244.735       259.758    
  38  0.582861     -0.539807      -40.5323       40.5323       261.740       302.272    
  39  0.401728     -0.911979      -68.4774       68.4774       254.890       323.367    
  40  0.171089      -1.76557      -132.571       132.571       250.354       382.925    
  41  0.980174     -0.200248E-01  -1.50359       1.50359       248.098       249.602    
  42  0.495496     -0.702196      -52.7256       52.7256       250.810       303.535    
  43  0.436683     -0.828549      -62.2129       62.2129       285.567       347.780    
  44  0.910411     -0.938588E-01  -7.04754       7.04754       253.404       260.452    
  45  0.649932     -0.430887      -32.3539       32.3539       255.750       288.104    
  46  0.755226     -0.280738      -21.0796       21.0796       250.401       271.481    
  47  0.927352     -0.754221E-01  -5.66319       5.66319       247.129       252.793    
  48  0.848028     -0.164842      -12.3774       12.3774       249.934       262.312    
  49  0.146193      -1.92283      -144.379       144.379       250.870       395.249    
  50  0.571278     -0.559879      -42.0394       42.0394       250.873       292.912    
  51  0.244418      -1.40888      -105.788       105.788       183.049       288.836    
  52  0.979014     -0.212091E-01  -1.59252       1.59252       273.435       275.027    
  53  0.235747      -1.44500      -108.500       108.500       256.405       364.905    
  54  0.486927     -0.719642      -54.0355       54.0355       248.838       302.874    
  55  0.694010     -0.365269      -27.4268       27.4268       251.568       278.995    
  56  0.392305     -0.935716      -70.2598       70.2598       250.289       320.548    
  57  0.334373      -1.09550      -82.2573       82.2573       194.808       277.066    
  58  0.526166     -0.642138      -48.2160       48.2160       257.184       305.400    
  59  0.701539     -0.354479      -26.6166       26.6166       207.128       233.745    
  60  0.447845     -0.803307      -60.3176       60.3176       251.224       311.542    
  61  0.927856     -0.748784E-01  -5.62237       5.62237       317.398       323.021    
  62  0.453274     -0.791258      -59.4129       59.4129       246.206       305.619    
  63  0.291736      -1.23190      -92.4995       92.4995       244.431       336.931    
  64  0.497643E-02  -5.30304      -398.188       398.188       253.308       651.495    
  65  0.972200E-01  -2.33078      -175.010       175.010       254.170       429.181    
  66  0.821987     -0.196031      -14.7193       14.7193       194.261       208.980    
  67  0.652134     -0.427506      -32.0999       32.0999       181.994       214.094    
  68  0.774447     -0.255606      -19.1926       19.1926       196.829       216.021    
  69  0.103131      -2.27176      -170.579       170.579       252.558       423.137    
  70  0.767617E-01  -2.56705      -192.751       192.751       262.721       455.472    
  71  0.965592     -0.350134E-01  -2.62904       2.62904       256.190       258.819    
  72  0.631959     -0.458930      -34.4595       34.4595       217.956       252.416    
  73  0.276224      -1.28654      -96.6023       96.6023       201.825       298.427    
loop,thermsimp(1:2)       31   104.520       104.802    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    127        212.34          0.86          1.12         23.61          0.11          0.05         25.75
Just calling func    0   0         25.75


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    128        214.01          0.85          1.12         23.63          0.13          0.05         25.77
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    212.34
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    75.0866               145
loop is:       31
neval is:      127
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       31      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    75.0866      0.500000    
T0,tstep,tfreq (these do not change):             72
current SAtemp,tstepnext are:    75.0866               145
loop is:       32
neval is:      127


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      145
neval,tstepnext:      127     145

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.996070     -0.393760E-02 -0.295661      0.295661       181.022       181.317    
   2  0.758684E-02  -4.88134      -366.523       366.523       194.261       560.784    
   3  0.404439     -0.905254      -67.9725       67.9725       181.994       249.966    
   4  0.947917E-01  -2.35607      -176.910       176.910       196.829       373.738    
   5  0.834417     -0.181022      -13.5923       13.5923       202.861       216.454    
   6  0.891274     -0.115104      -8.64275       8.64275       221.702       230.344    
   7  0.744451     -0.295108      -22.1587       22.1587       207.128       229.287    
   8  0.559638     -0.580466      -43.5852       43.5852       208.927       252.512    
   9  0.821724     -0.196351      -14.7433       14.7433       214.200       228.944    
  10  0.847292     -0.165710      -12.4426       12.4426       248.098       260.541    
  11  0.661676     -0.412979      -31.0092       31.0092       217.956       248.966    
  12  0.993427     -0.659478E-02 -0.495180      0.495180       183.173       183.668    
  13  0.425996     -0.853326      -64.0734       64.0734       247.129       311.203    
  14  0.673132     -0.395813      -29.7203       29.7203       229.701       259.422    
  15  0.234810      -1.44898      -108.799       108.799       256.190       364.989    
  16  0.122926      -2.09617      -157.394       157.394       244.735       402.130    
  17  0.523553     -0.647118      -48.5899       48.5899       253.404       301.994    
  18  0.959317     -0.415333E-01  -3.11860       3.11860       189.837       192.956    
  19  0.321726      -1.13406      -85.1524       85.1524       250.646       335.798    
  20  0.493112     -0.707018      -53.0876       53.0876       249.934       303.022    
  21  0.416134     -0.876748      -65.8320       65.8320       220.149       285.981    
  22  0.409432     -0.892985      -67.0512       67.0512       196.531       263.582    
  23  0.657956     -0.418617      -31.4325       31.4325       252.992       284.425    
  24  0.904324     -0.100567      -7.55127       7.55127       216.448       223.999    
  25  0.714426     -0.336276      -25.2498       25.2498       250.401       275.651    
  26  0.150521      -1.89365      -142.188       142.188       253.272       395.460    
  27  0.758740     -0.276096      -20.7311       20.7311       273.435       294.166    
  28  0.359105      -1.02414      -76.8992       76.8992       194.808       271.708    
  29  0.666937     -0.405060      -30.4146       30.4146       229.060       259.475    
  30  0.343213      -1.06940      -80.2979       80.2979       250.289       330.587    
  31  0.484849     -0.723918      -54.3566       54.3566       206.991       261.348    
  32  0.874661     -0.133919      -10.0555       10.0555       251.568       261.624    
  33  0.994710     -0.530415E-02 -0.398271      0.398271       176.615       177.013    
  34  0.821923     -0.196109      -14.7252       14.7252       209.714       224.439    
  35  0.954096E-02  -4.65216      -349.315       349.315       255.750       605.065    
  36  0.240030      -1.42699      -107.148       107.148       183.049       290.196    
  37  0.279003      -1.27653      -95.8504       95.8504       250.873       346.723    
  38  0.553830     -0.590898      -44.3685       44.3685       201.825       246.193    
  39  0.400809     -0.914271      -68.6495       68.6495       261.740       330.390    
  40  0.146125      -1.92330      -144.414       144.414       232.534       376.948    
  41  0.811879     -0.208403      -15.6483       15.6483       248.838       264.487    
  42  0.349149      -1.05226      -79.0104       79.0104       250.810       329.820    
  43  0.897422     -0.108229      -8.12654       8.12654       257.184       265.311    
  44  0.114492      -2.16725      -162.732       162.732       246.206       408.938    
  45  0.831901E-01  -2.48663      -186.712       186.712       205.251       391.964    
  46  0.721169     -0.326882      -24.5445       24.5445       251.224       275.769    
  47  0.801724     -0.220991      -16.5935       16.5935       250.289       266.882    
  48  0.466569     -0.762349      -57.2422       57.2422       317.398       374.641    
  49  0.103404      -2.26911      -170.380       170.380       254.890       425.270    
  50  0.417206     -0.874175      -65.6388       65.6388       251.012       316.651    
  51  0.267666      -1.31802      -98.9653       98.9653       236.903       335.868    
  52  0.670232     -0.400131      -30.0445       30.0445       243.047       273.092    
  53  0.161265      -1.82470      -137.011       137.011       285.045       422.055    
  54  0.414706     -0.880185      -66.0901       66.0901       226.033       292.123    
  55  0.501015     -0.691119      -51.8938       51.8938       247.717       299.611    
  56  0.516090     -0.661474      -49.6679       49.6679       244.431       294.099    
  57  0.424740     -0.856278      -64.2950       64.2950       253.828       318.123    
  58  0.303796      -1.19140      -89.4580       89.4580       285.567       375.025    
  59  0.803455     -0.218834      -16.4315       16.4315       248.738       265.169    
  60  0.416256     -0.876456      -65.8101       65.8101       256.405       322.215    
  61  0.760689     -0.273531      -20.5385       20.5385       243.859       264.397    
  62  0.995587     -0.442238E-02 -0.332062      0.332062       250.289       250.621    
  63  0.961804     -0.389449E-01  -2.92424       2.92424       250.354       253.278    
  64  0.321618      -1.13439      -85.1776       85.1776       250.870       336.047    
  65  0.850055     -0.162454      -12.1981       12.1981       252.558       264.757    
  66  0.408700     -0.894773      -67.1854       67.1854       254.170       321.356    
  67  0.204039E-01  -3.89203      -292.239       292.239       249.912       542.151    
  68  0.195538      -1.63200      -122.541       122.541       223.887       346.428    
  69  0.577737     -0.548636      -41.1952       41.1952       262.721       303.916    
  70  0.958394     -0.424960E-01  -3.19088       3.19088       251.161       254.352    
  71  0.570540     -0.561172      -42.1365       42.1365       229.865       272.002    
  72  0.509347     -0.674626      -50.6554       50.6554       246.946       297.602    
  73  0.805802     -0.215917      -16.2125       16.2125       212.336       228.548    
loop,thermsimp(1:2)       32  0.295661       366.523    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    129        212.69          0.86          1.12         23.80          0.04          0.05         25.87
Just calling func    0   0         25.87


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    212.69
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    75.0866               145
loop is:       32
neval is:      128
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       32      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    75.0866      0.500000    
T0,tstep,tfreq (these do not change):             72
current SAtemp,tstepnext are:    75.0866               145
loop is:       33
neval is:      128


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      145
neval,tstepnext:      128     145

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.455591     -0.786160      -59.0301       59.0301       176.615       235.645    
   2  0.588265E-01  -2.83316      -212.733       212.733       181.022       393.754    
   3  0.787103E-01  -2.54198      -190.869       190.869       183.173       374.042    
   4  0.597713     -0.514644      -38.6429       38.6429       189.837       228.480    
   5  0.110741      -2.20056      -165.233       165.233       202.861       368.094    
   6  0.677861     -0.388813      -29.1946       29.1946       216.448       245.642    
   7  0.307724      -1.17855      -88.4934       88.4934       209.714       298.207    
   8  0.550587     -0.596770      -44.8095       44.8095       212.336       257.145    
   9  0.601295     -0.508669      -38.1942       38.1942       214.200       252.395    
  10  0.487121     -0.719243      -54.0055       54.0055       207.128       261.134    
  11  0.146295      -1.92213      -144.326       144.326       221.702       366.028    
  12  0.714050     -0.336802      -25.2893       25.2893       201.825       227.114    
  13  0.723089     -0.324223      -24.3448       24.3448       217.956       242.301    
  14  0.805432     -0.216376      -16.2470       16.2470       181.994       198.241    
  15  0.123280      -2.09329      -157.178       157.178       250.289       407.467    
  16  0.853039     -0.158950      -11.9350       11.9350       208.927       220.862    
  17  0.288289      -1.24379      -93.3920       93.3920       250.354       343.746    
  18  0.705126     -0.349379      -26.2337       26.2337       251.161       277.395    
  19  0.772420     -0.258227      -19.3894       19.3894       229.701       249.091    
  20  0.962845     -0.378631E-01  -2.84301       2.84301       229.060       231.903    
  21  0.245802      -1.40323      -105.364       105.364       248.098       353.462    
  22  0.752702     -0.284087      -21.3311       21.3311       206.991       228.322    
  23  0.729896     -0.314853      -23.6412       23.6412       251.568       275.209    
  24  0.869278     -0.140092      -10.5191       10.5191       196.531       207.050    
  25  0.597817E-01  -2.81706      -211.523       211.523       243.859       455.382    
  26  0.984108     -0.160195E-01  -1.20285       1.20285       248.838       250.041    
  27  0.278288      -1.27910      -96.0432       96.0432       252.558       348.602    
  28  0.588278     -0.530555      -39.8376       39.8376       248.738       288.575    
  29  0.807614     -0.213671      -16.0438       16.0438       257.184       273.228    
  30  0.428679     -0.847047      -63.6019       63.6019       250.289       313.891    
  31  0.452991     -0.791883      -59.4598       59.4598       194.808       254.268    
  32  0.678742     -0.387514      -29.0971       29.0971       229.865       258.962    
  33  0.504500     -0.684188      -51.3733       51.3733       243.047       294.420    
  34  0.894800     -0.111155      -8.34625       8.34625       250.401       258.748    
  35  0.854311     -0.157461      -11.8232       11.8232       251.224       263.048    
  36  0.756230     -0.279410      -20.9799       20.9799       252.992       273.972    
  37  0.744369     -0.295219      -22.1670       22.1670       220.149       242.316    
  38  0.435758     -0.830668      -62.3720       62.3720       183.049       245.421    
  39  0.677387     -0.389513      -29.2472       29.2472       226.033       255.280    
  40  0.504989     -0.683219      -51.3006       51.3006       244.431       295.732    
  41  0.325676      -1.12185      -84.2361       84.2361       273.435       357.671    
  42  0.147207      -1.91591      -143.859       143.859       246.946       390.806    
  43  0.432041     -0.839234      -63.0153       63.0153       247.717       310.732    
  44  0.615972     -0.484555      -36.3836       36.3836       253.404       289.788    
  45  0.150867      -1.89136      -142.016       142.016       249.934       391.950    
  46  0.464307     -0.767210      -57.6072       57.6072       262.721       320.328    
  47  0.379753     -0.968234      -72.7014       72.7014       247.129       319.831    
  48  0.886192     -0.120822      -9.07210       9.07210       251.012       260.084    
  49  0.231751E-01  -3.76468      -282.677       282.677       253.828       536.505    
  50  0.257662      -1.35611      -101.825       101.825       254.170       355.996    
  51  0.470381E-01  -3.05680      -229.525       229.525       256.405       485.930    
  52  0.972366     -0.280233E-01  -2.10418       2.10418       250.810       252.914    
  53  0.242054      -1.41860      -106.518       106.518       261.740       368.258    
  54  0.660577     -0.414642      -31.1341       31.1341       250.289       281.423    
  55  0.234396      -1.45074      -108.931       108.931       250.646       359.577    
  56  0.891547     -0.114797      -8.61973       8.61973       236.903       245.523    
  57  0.408879E-01  -3.19692      -240.046       240.046       250.870       490.916    
  58  0.577007     -0.549901      -41.2902       41.2902       223.887       265.177    
  59  0.851462     -0.160801      -12.0740       12.0740       250.873       262.947    
  60  0.733240     -0.310283      -23.2981       23.2981       256.190       279.488    
  61  0.219002E-01  -3.82126      -286.925       286.925       196.829       483.754    
  62  0.293643      -1.22539      -92.0104       92.0104       317.398       409.409    
  63  0.552105     -0.594017      -44.6027       44.6027       285.567       330.170    
  64  0.638007E-01  -2.75199      -206.638       206.638       232.534       439.172    
  65  0.332554      -1.10095      -82.6668       82.6668       205.251       287.918    
  66  0.365239      -1.00720      -75.6276       75.6276       253.272       328.899    
  67  0.160984      -1.82645      -137.142       137.142       244.735       381.877    
  68  0.149423      -1.90098      -142.738       142.738       246.206       388.944    
  69  0.142989      -1.94499      -146.043       146.043       285.045       431.087    
  70  0.516056     -0.661540      -49.6728       49.6728       254.890       304.563    
  71  0.719056E-01  -2.63240      -197.658       197.658       249.912       447.570    
  72  0.968385     -0.321257E-01  -2.41221       2.41221       194.261       196.673    
  73  0.888186     -0.118574      -8.90329       8.90329       212.685       221.588    
loop,thermsimp(1:2)       33   59.0301       212.733    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    130        207.35          0.86          1.12         23.84          0.03          0.05         25.91
Just calling func    0   0         25.91


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    131        197.89          0.86          1.12         23.59          0.15          0.05         25.77
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    197.89
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    75.0866               145
loop is:       33
neval is:      130
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       33      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    75.0866      0.500000    
T0,tstep,tfreq (these do not change):             72
current SAtemp,tstepnext are:    75.0866               145
loop is:       34
neval is:      130


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      145
neval,tstepnext:      130     145

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.961594E-01  -2.34175      -175.834       175.834       194.261       370.095    
   2  0.298819      -1.20792      -90.6985       90.6985       181.994       272.692    
   3  0.706385     -0.347595      -26.0998       26.0998       196.531       222.631    
   4  0.958764     -0.421100E-01  -3.16189       3.16189       208.927       212.089    
   5  0.306496      -1.18255      -88.7937       88.7937       212.685       301.479    
   6  0.905447     -0.993270E-01  -7.45812       7.45812       201.825       209.283    
   7  0.234113      -1.45195      -109.022       109.022       206.991       316.013    
   8  0.704141     -0.350777      -26.3386       26.3386       189.837       216.176    
   9  0.908200     -0.962902E-01  -7.23010       7.23010       229.060       236.290    
  10  0.656383     -0.421011      -31.6123       31.6123       176.615       208.227    
  11  0.967894     -0.326327E-01  -2.45028       2.45028       217.956       220.407    
  12  0.754670     -0.281475      -21.1350       21.1350       220.149       241.284    
  13  0.488960     -0.715475      -53.7226       53.7226       183.049       236.771    
  14  0.451577     -0.795009      -59.6945       59.6945       236.903       296.598    
  15  0.387599E-01  -3.25037      -244.059       244.059       216.448       460.507    
  16  0.210942E-02  -6.16134      -462.634       462.634       229.701       692.336    
  17  0.656530     -0.420787      -31.5954       31.5954       248.838       280.434    
  18  0.181246      -1.70790      -128.241       128.241       214.200       342.441    
  19  0.758879     -0.275913      -20.7174       20.7174       250.810       271.527    
  20  0.392052     -0.936362      -70.3082       70.3082       194.808       265.117    
  21  0.406710     -0.899654      -67.5520       67.5520       226.033       293.585    
  22  0.830107     -0.186201      -13.9812       13.9812       212.336       226.317    
  23  0.311833      -1.16529      -87.4976       87.4976       250.401       337.899    
  24  0.945407     -0.561396E-01  -4.21534       4.21534       229.865       234.080    
  25  0.303319      -1.19297      -89.5761       89.5761       251.012       340.588    
  26  0.284230      -1.25797      -94.4568       94.4568       207.128       301.585    
  27  0.292492      -1.22932      -92.3052       92.3052       250.873       343.178    
  28  0.401496     -0.912557      -68.5208       68.5208       251.224       319.745    
  29  0.379648     -0.968510      -72.7222       72.7222       223.887       296.609    
  30  0.723496E-01  -2.62625      -197.196       197.196       257.184       454.380    
  31  0.940338     -0.615157E-01  -4.61901       4.61901       252.992       257.611    
  32  0.766237     -0.266264      -19.9928       19.9928       251.568       271.561    
  33  0.984920     -0.151946E-01  -1.14091       1.14091       251.161       252.302    
  34  0.552546     -0.593218      -44.5428       44.5428       256.190       300.733    
  35  0.735557     -0.307128      -23.0612       23.0612       250.289       273.350    
  36  0.142195      -1.95056      -146.461       146.461       205.251       351.712    
  37  0.304783      -1.18816      -89.2145       89.2145       248.738       337.952    
  38  0.868582     -0.140894      -10.5792       10.5792       253.404       263.983    
  39  0.382741     -0.960397      -72.1130       72.1130       243.047       315.160    
  40  0.273812      -1.29531      -97.2607       97.2607       244.431       341.692    
  41  0.601920     -0.507631      -38.1163       38.1163       209.714       247.830    
  42  0.827744     -0.189051      -14.1952       14.1952       254.890       269.085    
  43  0.881186E-01  -2.42907      -182.391       182.391       247.717       430.108    
  44  0.386744     -0.949994      -71.3318       71.3318       250.289       321.621    
  45  0.852312     -0.159803      -11.9991       11.9991       247.129       259.129    
  46  0.830189     -0.186102      -13.9738       13.9738       262.721       276.695    
  47  0.216531      -1.53002      -114.884       114.884       253.272       368.156    
  48  0.835540     -0.179677      -13.4913       13.4913       285.567       299.059    
  49  0.962152     -0.385824E-01  -2.89702       2.89702       250.354       253.251    
  50  0.866477     -0.143320      -10.7614       10.7614       252.558       263.320    
  51  0.640111     -0.446114      -33.4972       33.4972       248.098       281.596    
  52  0.103467      -2.26850      -170.334       170.334       254.170       424.505    
  53  0.746080     -0.292923      -21.9946       21.9946       273.435       295.429    
  54  0.154266      -1.86908      -140.343       140.343       250.646       390.988    
  55  0.479981     -0.734008      -55.1142       55.1142       221.702       276.816    
  56  0.641740     -0.443572      -33.3063       33.3063       202.861       236.168    
  57  0.282342      -1.26463      -94.9571       94.9571       261.740       356.697    
  58  0.691857     -0.368376      -27.6601       27.6601       183.173       210.833    
  59  0.774818     -0.255127      -19.1566       19.1566       244.735       263.892    
  60  0.950647     -0.506124E-01  -3.80032       3.80032       246.206       250.007    
  61  0.946272E-01  -2.35781      -177.040       177.040       246.946       423.986    
  62  0.936976     -0.650979E-01  -4.88798       4.88798       249.934       254.822    
  63  0.339755      -1.07953      -81.0584       81.0584       181.022       262.080    
  64  0.781991     -0.245913      -18.4647       18.4647       250.289       268.753    
  65  0.524538     -0.645237      -48.4487       48.4487       317.398       365.847    
  66  0.740186     -0.300853      -22.5900       22.5900       285.045       307.635    
  67  0.713516     -0.337550      -25.3455       25.3455       232.534       257.880    
  68  0.760009     -0.274425      -20.6057       20.6057       249.912       270.517    
  69  0.813040     -0.206975      -15.5410       15.5410       243.859       259.400    
  70  0.177817E-01  -4.02959      -302.568       302.568       196.829       499.396    
  71  0.585717     -0.534918      -40.1652       40.1652       256.405       296.570    
  72  0.151688      -1.88593      -141.608       141.608       250.870       392.478    
  73  0.870493     -0.138695      -10.4142       10.4142       197.890       208.305    
loop,thermsimp(1:2)       34   175.834       90.6985    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    132        220.20          0.86          1.12         23.57          0.18          0.05         25.78
Just calling func    0   0         25.78


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    133        233.35          0.86          1.12         23.60          0.16          0.05         25.78
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    220.20
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    75.0866               145
loop is:       34
neval is:      132
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       34      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    75.0866      0.500000    
T0,tstep,tfreq (these do not change):             72
current SAtemp,tstepnext are:    75.0866               145
loop is:       35
neval is:      132


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      145
neval,tstepnext:      132     145

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.348096      -1.05528      -79.2372       79.2372       176.615       255.852    
   2  0.175000      -1.74297      -130.874       130.874       197.890       328.764    
   3  0.131587      -2.02809      -152.282       152.282       201.825       354.107    
   4  0.301717      -1.19826      -89.9736       89.9736       183.173       273.146    
   5  0.166877      -1.79050      -134.443       134.443       208.927       343.370    
   6  0.481073     -0.731736      -54.9436       54.9436       189.837       244.780    
   7  0.706381     -0.347600      -26.1001       26.1001       217.956       244.056    
   8  0.702617     -0.352943      -26.5013       26.5013       196.531       223.032    
   9  0.552795     -0.592767      -44.5089       44.5089       212.336       256.844    
  10  0.495420     -0.702349      -52.7370       52.7370       229.865       282.602    
  11  0.479343     -0.735339      -55.2141       55.2141       202.861       258.076    
  12  0.462659     -0.770765      -57.8742       57.8742       229.060       286.934    
  13  0.631315E-01  -2.76253      -207.429       207.429       183.049       390.478    
  14  0.785681     -0.241205      -18.1113       18.1113       220.149       238.261    
  15  0.767932     -0.264055      -19.8270       19.8270       209.714       229.541    
  16  0.262689E-01  -3.63937      -273.268       273.268       246.206       519.474    
  17  0.871353     -0.137708      -10.3400       10.3400       251.161       261.502    
  18  0.618350     -0.480701      -36.0942       36.0942       250.354       286.448    
  19  0.196090      -1.62918      -122.330       122.330       249.934       372.264    
  20  0.925050     -0.779078E-01  -5.84984       5.84984       252.992       258.842    
  21  0.903269     -0.101735      -7.63895       7.63895       232.534       240.173    
  22  0.958828     -0.420436E-01  -3.15691       3.15691       247.129       250.286    
  23  0.969274     -0.312081E-01  -2.34331       2.34331       243.859       246.202    
  24  0.313932      -1.15858      -86.9937       86.9937       181.022       268.015    
  25  0.106324      -2.24126      -168.289       168.289       252.558       420.847    
  26  0.718705     -0.330304      -24.8014       24.8014       244.735       269.537    
  27  0.751116     -0.286195      -21.4894       21.4894       253.404       274.893    
  28  0.996391     -0.361592E-02 -0.271507      0.271507       194.808       195.080    
  29  0.313387      -1.16032      -87.1243       87.1243       250.289       337.413    
  30  0.305057      -1.18726      -89.1470       89.1470       254.890       344.037    
  31  0.408833     -0.894447      -67.1610       67.1610       249.912       317.073    
  32  0.589856     -0.527877      -39.6365       39.6365       250.810       290.446    
  33  0.808683     -0.212349      -15.9445       15.9445       251.568       267.513    
  34  0.481635     -0.730569      -54.8559       54.8559       181.994       236.850    
  35  0.677481     -0.389374      -29.2368       29.2368       250.289       279.525    
  36  0.673605     -0.395111      -29.6675       29.6675       262.721       292.389    
  37  0.409374E-01  -3.19571      -239.955       239.955       221.702       461.657    
  38  0.362144      -1.01571      -76.2665       76.2665       248.838       325.105    
  39  0.364718E-01  -3.31122      -248.628       248.628       248.098       496.726    
  40  0.280272      -1.27199      -95.5097       95.5097       226.033       321.543    
  41  0.532528     -0.630120      -47.3136       47.3136       273.435       320.748    
  42  0.901591     -0.103595      -7.77857       7.77857       256.405       264.184    
  43  0.262858      -1.33614      -100.326       100.326       236.903       337.229    
  44  0.168755      -1.77931      -133.602       133.602       223.887       357.489    
  45  0.504619     -0.683952      -51.3556       51.3556       285.567       336.923    
  46  0.900650     -0.104639      -7.85697       7.85697       256.190       264.047    
  47  0.438495     -0.824406      -61.9018       61.9018       212.685       274.587    
  48  0.984597     -0.155233E-01  -1.16559       1.16559       207.128       208.294    
  49  0.469739     -0.755579      -56.7339       56.7339       285.045       341.778    
  50  0.252111      -1.37789      -103.461       103.461       243.047       346.508    
  51  0.764692     -0.268282      -20.1444       20.1444       206.991       227.136    
  52  0.848445     -0.164351      -12.3405       12.3405       251.224       263.565    
  53  0.705739     -0.348509      -26.1684       26.1684       250.289       276.457    
  54  0.449895     -0.798741      -59.9748       59.9748       250.401       310.376    
  55  0.742135     -0.298224      -22.3927       22.3927       248.738       271.130    
  56  0.305311      -1.18642      -89.0846       89.0846       251.012       340.096    
  57  0.798408     -0.225136      -16.9047       16.9047       244.431       261.336    
  58  0.807590     -0.213700      -16.0460       16.0460       214.200       230.246    
  59  0.768432     -0.263404      -19.7781       19.7781       250.873       270.651    
  60  0.895397     -0.110488      -8.29620       8.29620       205.251       213.548    
  61  0.585964     -0.534497      -40.1336       40.1336       261.740       301.874    
  62  0.785258     -0.241743      -18.1516       18.1516       317.398       335.550    
  63  0.311021      -1.16790      -87.6933       87.6933       253.272       340.965    
  64  0.803571     -0.218690      -16.4207       16.4207       194.261       210.682    
  65  0.879509     -0.128391      -9.64045       9.64045       250.646       260.286    
  66  0.605375     -0.501907      -37.6865       37.6865       250.870       288.556    
  67  0.774979     -0.254920      -19.1411       19.1411       246.946       266.087    
  68  0.621445     -0.475708      -35.7193       35.7193       254.170       289.890    
  69  0.755932     -0.279804      -21.0095       21.0095       247.717       268.727    
  70  0.211323E-01  -3.85695      -289.606       289.606       257.184       546.790    
  71  0.616355     -0.483932      -36.3368       36.3368       216.448       252.785    
  72  0.102593      -2.27699      -170.971       170.971       196.829       367.800    
  73  0.728301     -0.317041      -23.8055       23.8055       220.199       244.005    
loop,thermsimp(1:2)       35   79.2372       130.874    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    134        180.81          0.86          1.12         23.61          0.14          0.05         25.78
Just calling func    0   0         25.78


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    135        365.02          0.86          1.12         23.66          0.13          0.05         25.82
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    180.81
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    75.0866               145
loop is:       35
neval is:      134
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       35      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    75.0866      0.500000    
T0,tstep,tfreq (these do not change):             72
current SAtemp,tstepnext are:    75.0866               145
loop is:       36
neval is:      134


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      145
neval,tstepnext:      134     145

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.757905E-01  -2.57978      -193.707       193.707       194.808       388.516    
   2  0.962370     -0.383559E-01  -2.88001       2.88001       207.128       210.008    
   3  0.356737      -1.03076      -77.3960       77.3960       194.261       271.657    
   4  0.884319     -0.122937      -9.23094       9.23094       205.251       214.482    
   5  0.919725E-01  -2.38627      -179.177       179.177       196.531       375.708    
   6  0.900184     -0.105156      -7.89580       7.89580       206.991       214.887    
   7  0.390055     -0.941468      -70.6916       70.6916       209.714       280.405    
   8  0.263976      -1.33190      -100.008       100.008       214.200       314.208    
   9  0.898455     -0.107078      -8.04015       8.04015       181.994       190.034    
  10  0.697674E-01  -2.66259      -199.925       199.925       220.149       420.074    
  11  0.888938     -0.117727      -8.83974       8.83974       232.534       241.374    
  12  0.824147     -0.193406      -14.5222       14.5222       220.199       234.722    
  13  0.941109     -0.606968E-01  -4.55752       4.55752       217.956       222.514    
  14  0.885654     -0.121429      -9.11768       9.11768       189.837       198.955    
  15  0.798208     -0.225386      -16.9234       16.9234       243.859       260.782    
  16  0.365331      -1.00695      -75.6087       75.6087       247.129       322.738    
  17  0.519490     -0.654907      -49.1747       49.1747       216.448       265.623    
  18  0.922741     -0.804065E-01  -6.03745       6.03745       176.615       182.652    
  19  0.877443     -0.130744      -9.81709       9.81709       212.336       222.153    
  20  0.584844     -0.536410      -40.2772       40.2772       202.861       243.139    
  21  0.671390     -0.398406      -29.9149       29.9149       252.992       282.907    
  22  0.203335      -1.59290      -119.605       119.605       250.646       370.251    
  23  0.330236E-01  -3.41053      -256.085       256.085       244.431       500.517    
  24  0.879725     -0.128146      -9.62208       9.62208       251.161       260.784    
  25  0.833976     -0.181550      -13.6320       13.6320       251.224       264.856    
  26  0.901698     -0.103475      -7.76960       7.76960       256.190       263.960    
  27  0.692847     -0.366946      -27.5527       27.5527       256.405       283.958    
  28  0.550572     -0.596797      -44.8115       44.8115       246.946       291.758    
  29  0.158383E-01  -4.14532      -311.258       311.258       251.568       562.826    
  30  0.503246     -0.686677      -51.5602       51.5602       181.022       232.582    
  31  0.648812     -0.432612      -32.4834       32.4834       247.717       280.200    
  32  0.306980      -1.18097      -88.6753       88.6753       244.735       333.410    
  33  0.205188      -1.58383      -118.924       118.924       250.873       369.797    
  34  0.265146      -1.32748      -99.6756       99.6756       248.738       348.413    
  35  0.272730E-01  -3.60186      -270.451       270.451       183.173       453.624    
  36  0.262990E-01  -3.63823      -273.182       273.182       212.685       485.867    
  37  0.492753     -0.707748      -53.1424       53.1424       253.404       306.546    
  38  0.255065      -1.36624      -102.586       102.586       250.289       352.875    
  39  0.623259     -0.472794      -35.5005       35.5005       250.289       285.789    
  40  0.949296     -0.520343E-01  -3.90708       3.90708       229.865       233.772    
  41  0.982394     -0.177630E-01  -1.33376       1.33376       250.354       251.687    
  42  0.566450     -0.568366      -42.6766       42.6766       229.060       271.737    
  43  0.557613     -0.584090      -43.8573       43.8573       250.870       294.727    
  44  0.900731     -0.104549      -7.85022       7.85022       254.170       262.021    
  45  0.671339     -0.398481      -29.9206       29.9206       250.810       280.730    
  46  0.650454     -0.430084      -32.2936       32.2936       262.721       295.015    
  47  0.749315     -0.288595      -21.6697       21.6697       261.740       283.410    
  48  0.667497     -0.404220      -30.3515       30.3515       250.401       280.753    
  49  0.132870      -2.01838      -151.554       151.554       249.912       401.465    
  50  0.964787     -0.358480E-01  -2.69170       2.69170       273.435       276.126    
  51  0.835780     -0.179390      -13.4698       13.4698       226.033       239.503    
  52  0.601609     -0.508148      -38.1551       38.1551       248.838       286.993    
  53  0.937321     -0.647298E-01  -4.86034       4.86034       197.890       202.751    
  54  0.467877     -0.759550      -57.0321       57.0321       317.398       374.430    
  55  0.953249     -0.478789E-01  -3.59506       3.59506       285.567       289.162    
  56  0.827724     -0.189076      -14.1971       14.1971       236.903       251.100    
  57  0.624780     -0.470355      -35.3174       35.3174       250.289       285.606    
  58  0.821535     -0.196581      -14.7606       14.7606       251.012       265.772    
  59  0.625285     -0.469548      -35.2568       35.2568       253.272       288.529    
  60  0.581213     -0.542638      -40.7448       40.7448       285.045       325.789    
  61  0.855886E-01  -2.45820      -184.578       184.578       208.927       393.505    
  62  0.262334      -1.33814      -100.476       100.476       254.890       355.366    
  63  0.978265     -0.219749E-01  -1.65002       1.65002       243.047       244.697    
  64  0.600842     -0.509423      -38.2509       38.2509       201.825       240.076    
  65  0.476413     -0.741470      -55.6745       55.6745       223.887       279.561    
  66  0.922813     -0.803282E-01  -6.03158       6.03158       196.829       202.860    
  67  0.468949     -0.757261      -56.8601       56.8601       249.934       306.794    
  68  0.832153E-01  -2.48632      -186.690       186.690       183.049       369.738    
  69  0.927485     -0.752786E-01  -5.65241       5.65241       252.558       258.211    
  70  0.487372     -0.718728      -53.9668       53.9668       221.702       275.668    
  71  0.410125     -0.891292      -66.9241       66.9241       248.098       315.023    
  72  0.961670     -0.390839E-01  -2.93468       2.93468       246.206       249.141    
  73  0.683411     -0.380659      -28.5824       28.5824       180.815       209.397    
loop,thermsimp(1:2)       36   193.707       2.88001    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    136        210.11          0.86          1.12         23.93          0.00          0.05         25.97
Just calling func    0   0         25.97


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    137        213.95          0.86          1.12         23.92          0.01          0.05         25.96
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    210.11
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    75.0866               145
loop is:       36
neval is:      136
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       36      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    75.0866      0.500000    
T0,tstep,tfreq (these do not change):             72
current SAtemp,tstepnext are:    75.0866               145
loop is:       37
neval is:      136


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      145
neval,tstepnext:      136     145

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.939165     -0.627646E-01  -4.71278       4.71278       176.615       181.328    
   2  0.112532E-01  -4.48710      -336.921       336.921       181.994       518.915    
   3  0.907929     -0.965891E-01  -7.25254       7.25254       189.837       197.089    
   4  0.478640     -0.736807      -55.3243       55.3243       197.890       253.215    
   5  0.737686     -0.304237      -22.8441       22.8441       196.829       219.673    
   6  0.114880      -2.16387      -162.478       162.478       180.815       343.292    
   7  0.309837      -1.17171      -87.9797       87.9797       207.128       295.108    
   8  0.469091     -0.756958      -56.8374       56.8374       205.251       262.089    
   9  0.721151     -0.326907      -24.5463       24.5463       206.991       231.538    
  10  0.557251     -0.584740      -43.9062       43.9062       212.336       256.242    
  11  0.581534     -0.542085      -40.7034       40.7034       217.956       258.660    
  12  0.501412     -0.690326      -51.8343       51.8343       181.022       232.856    
  13  0.783062     -0.244543      -18.3619       18.3619       229.865       248.227    
  14  0.571322     -0.559803      -42.0337       42.0337       220.199       262.233    
  15  0.902729E-01  -2.40492      -180.577       180.577       226.033       406.610    
  16  0.695403E-01  -2.66585      -200.170       200.170       201.825       401.995    
  17  0.128872      -2.04894      -153.848       153.848       232.534       386.382    
  18  0.940828E-01  -2.36358      -177.473       177.473       202.861       380.335    
  19  0.326350      -1.11979      -84.0809       84.0809       243.047       327.128    
  20  0.102915      -2.27385      -170.736       170.736       246.206       416.943    
  21  0.324524      -1.12540      -84.5021       84.5021       236.903       321.405    
  22  0.259454      -1.34918      -101.305       101.305       250.354       351.659    
  23  0.782812     -0.244863      -18.3859       18.3859       252.558       270.944    
  24  0.383591     -0.958178      -71.9464       71.9464       243.859       315.805    
  25  0.626880     -0.466999      -35.0654       35.0654       251.161       286.227    
  26  0.292269      -1.23008      -92.3625       92.3625       254.170       346.533    
  27  0.448852     -0.801062      -60.1490       60.1490       256.190       316.339    
  28  0.685432     -0.377706      -28.3607       28.3607       251.224       279.585    
  29  0.995399     -0.461118E-02 -0.346238      0.346238       216.448       216.794    
  30  0.163323      -1.81203      -136.059       136.059       251.012       387.071    
  31  0.952940     -0.482038E-01  -3.61946       3.61946       194.261       197.880    
  32  0.861306     -0.149306      -11.2109       11.2109       229.060       240.271    
  33  0.587276     -0.532261      -39.9657       39.9657       221.702       261.667    
  34  0.908704     -0.957357E-01  -7.18847       7.18847       273.435       280.623    
  35  0.585935     -0.534546      -40.1372       40.1372       223.887       264.024    
  36  0.429836     -0.844352      -63.3995       63.3995       247.717       311.117    
  37  0.726203     -0.319926      -24.0222       24.0222       209.714       233.736    
  38  0.151145E-01  -4.19210      -314.770       314.770       250.810       565.580    
  39  0.927869     -0.748646E-01  -5.62133       5.62133       250.401       256.023    
  40  0.961645     -0.391099E-01  -2.93663       2.93663       252.992       255.929    
  41  0.253977      -1.37051      -102.907       102.907       261.740       364.647    
  42  0.768038     -0.263917      -19.8166       19.8166       256.405       276.222    
  43  0.569441E-01  -2.86569      -215.175       215.175       250.289       465.463    
  44  0.103919      -2.26415      -170.007       170.007       250.289       420.296    
  45  0.312226      -1.16403      -87.4029       87.4029       248.838       336.241    
  46  0.473636E-02  -5.35249      -401.900       401.900       253.272       655.172    
  47  0.192099      -1.64975      -123.874       123.874       285.567       409.441    
  48  0.799429     -0.223858      -16.8087       16.8087       246.946       263.755    
  49  0.164379      -1.80558      -135.575       135.575       250.870       386.445    
  50  0.421896     -0.862996      -64.7995       64.7995       262.721       327.521    
  51  0.361660      -1.01705      -76.3669       76.3669       253.404       329.771    
  52  0.346541      -1.05975      -79.5734       79.5734       249.934       329.508    
  53  0.728715     -0.316473      -23.7629       23.7629       214.200       237.963    
  54  0.305329      -1.18637      -89.0801       89.0801       248.098       337.179    
  55  0.547244     -0.602861      -45.2668       45.2668       247.129       292.396    
  56  0.942790     -0.589122E-01  -4.42351       4.42351       285.045       289.468    
  57  0.846801     -0.166290      -12.4862       12.4862       244.735       257.221    
  58  0.961806     -0.389424E-01  -2.92406       2.92406       248.738       251.662    
  59  0.101104      -2.29161      -172.069       172.069       250.289       422.358    
  60  0.181736      -1.70520      -128.038       128.038       254.890       382.928    
  61  0.298004      -1.21065      -90.9035       90.9035       183.049       273.952    
  62  0.840699E-01  -2.47611      -185.922       185.922       250.873       436.795    
  63  0.796444     -0.227598      -17.0896       17.0896       250.646       267.735    
  64  0.294043      -1.22403      -91.9082       91.9082       317.398       409.307    
  65  0.156591      -1.85412      -139.219       139.219       196.531       335.750    
  66  0.973381     -0.269794E-01  -2.02579       2.02579       194.808       196.834    
  67  0.515799     -0.662038      -49.7102       49.7102       208.927       258.637    
  68  0.211924      -1.55153      -116.499       116.499       249.912       366.411    
  69  0.830172     -0.186122      -13.9753       13.9753       220.149       234.125    
  70  0.666225     -0.406128      -30.4948       30.4948       183.173       213.668    
  71  0.756659     -0.278843      -20.9374       20.9374       212.685       233.623    
  72  0.799292     -0.224029      -16.8216       16.8216       244.431       261.253    
  73  0.644747     -0.438898      -32.9553       32.9553       210.105       243.061    
loop,thermsimp(1:2)       37   4.71278       336.921    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    138        202.84          0.87          1.12         23.83          0.00          0.05         25.87
Just calling func    0   0         25.87


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    202.84
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    75.0866               145
loop is:       37
neval is:      137
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       37      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    75.0866      0.500000    
T0,tstep,tfreq (these do not change):             72
current SAtemp,tstepnext are:    75.0866               145
loop is:       38
neval is:      137


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      145
neval,tstepnext:      137     145

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.371753     -0.989525      -74.3001       74.3001       176.615       250.915    
   2  0.687927     -0.374072      -28.0878       28.0878       194.808       222.896    
   3  0.288957      -1.24148      -93.2183       93.2183       189.837       283.055    
   4  0.192838      -1.64590      -123.585       123.585       194.261       317.846    
   5  0.369869     -0.994607      -74.6817       74.6817       183.173       257.855    
   6  0.735973     -0.306562      -23.0187       23.0187       216.448       239.467    
   7  0.637144     -0.450760      -33.8460       33.8460       196.829       230.675    
   8  0.703934     -0.351071      -26.3607       26.3607       206.991       233.352    
   9  0.864279     -0.145859      -10.9521       10.9521       181.022       191.974    
  10  0.473452     -0.747705      -56.1426       56.1426       212.685       268.828    
  11  0.242010      -1.41877      -106.531       106.531       209.714       316.245    
  12  0.510769     -0.671838      -50.4460       50.4460       220.149       270.595    
  13  0.829624     -0.186782      -14.0249       14.0249       214.200       228.225    
  14  0.228911      -1.47442      -110.709       110.709       229.060       339.769    
  15  0.310006      -1.17116      -87.9388       87.9388       210.105       298.044    
  16  0.248341      -1.39295      -104.592       104.592       229.865       334.457    
  17  0.723214     -0.324050      -24.3318       24.3318       248.738       273.070    
  18  0.420900     -0.865360      -64.9770       64.9770       197.890       262.867    
  19  0.133903      -2.01064      -150.972       150.972       252.992       403.964    
  20  0.571916     -0.558763      -41.9557       41.9557       250.401       292.357    
  21  0.609104     -0.495766      -37.2254       37.2254       212.336       249.561    
  22  0.582057     -0.541186      -40.6358       40.6358       244.735       285.371    
  23  0.440731     -0.819321      -61.5201       61.5201       208.927       270.447    
  24  0.211006      -1.55587      -116.825       116.825       217.956       334.781    
  25  0.665769     -0.406813      -30.5462       30.5462       244.431       274.978    
  26  0.766062     -0.266493      -20.0100       20.0100       221.702       241.712    
  27  0.321416E-01  -3.43760      -258.118       258.118       205.251       463.369    
  28  0.165897E-01  -4.09897      -307.778       307.778       220.199       527.977    
  29  0.634553     -0.454835      -34.1520       34.1520       246.946       281.098    
  30  0.981834     -0.183335E-01  -1.37660       1.37660       223.887       225.263    
  31  0.511720     -0.669978      -50.3064       50.3064       250.646       300.952    
  32  0.426358     -0.852477      -64.0096       64.0096       252.558       316.568    
  33  0.500527     -0.692094      -51.9670       51.9670       183.049       235.016    
  34  0.100483      -2.29777      -172.532       172.532       256.405       428.937    
  35  0.837324     -0.177545      -13.3312       13.3312       251.224       264.556    
  36  0.257741      -1.35580      -101.802       101.802       273.435       375.237    
  37  0.437184     -0.827401      -62.1267       62.1267       251.161       313.288    
  38  0.707529     -0.345976      -25.9782       25.9782       285.045       311.023    
  39  0.538379     -0.619193      -46.4931       46.4931       247.129       293.623    
  40  0.611820     -0.491317      -36.8913       36.8913       207.128       244.019    
  41  0.404533     -0.905022      -67.9550       67.9550       247.717       315.672    
  42  0.902499     -0.102588      -7.70300       7.70300       243.859       251.562    
  43  0.704299     -0.350552      -26.3218       26.3218       256.190       282.512    
  44  0.511818     -0.669786      -50.2919       50.2919       236.903       287.195    
  45  0.748131     -0.290178      -21.7885       21.7885       243.047       264.836    
  46  0.296598      -1.21538      -91.2586       91.2586       262.721       353.980    
  47  0.805122     -0.216762      -16.2759       16.2759       249.934       266.210    
  48  0.525063     -0.644236      -48.3735       48.3735       253.404       301.778    
  49  0.192567      -1.64731      -123.691       123.691       196.531       320.222    
  50  0.991898     -0.813527E-02 -0.610850      0.610850       248.838       249.449    
  51  0.238175      -1.43475      -107.730       107.730       248.098       355.829    
  52  0.627675     -0.465733      -34.9703       34.9703       180.815       215.785    
  53  0.328849      -1.11216      -83.5080       83.5080       254.170       337.678    
  54  0.697651     -0.360037      -27.0340       27.0340       250.354       277.388    
  55  0.154345      -1.86857      -140.304       140.304       261.740       402.045    
  56  0.196838      -1.62537      -122.044       122.044       249.912       371.955    
  57  0.397903     -0.921546      -69.1958       69.1958       202.861       272.057    
  58  0.746135E-01  -2.59543      -194.882       194.882       254.890       449.772    
  59  0.283843      -1.25934      -94.5592       94.5592       232.534       327.094    
  60  0.540853E-02  -5.21978      -391.936       391.936       250.870       642.805    
  61  0.534720     -0.626011      -47.0051       47.0051       251.012       298.017    
  62  0.909816     -0.945126E-01  -7.09663       7.09663       201.825       208.922    
  63  0.190142      -1.65998      -124.643       124.643       226.033       350.675    
  64  0.150854      -1.89144      -142.022       142.022       317.398       459.420    
  65  0.385455     -0.953330      -71.5824       71.5824       285.567       357.150    
  66  0.655101     -0.422966      -31.7591       31.7591       246.206       277.966    
  67  0.527025     -0.640508      -48.0935       48.0935       250.289       298.382    
  68  0.110501      -2.20273      -165.396       165.396       250.289       415.684    
  69  0.206094      -1.57942      -118.593       118.593       250.873       369.466    
  70  0.961998     -0.387429E-01  -2.90907       2.90907       250.289       253.198    
  71  0.842154     -0.171793      -12.8993       12.8993       181.994       194.893    
  72  0.178445      -1.72347      -129.410       129.410       250.810       380.220    
  73  0.742172     -0.298174      -22.3889       22.3889       202.842       225.231    
loop,thermsimp(1:2)       38   74.3001       28.0878    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    139        204.74          0.86          1.12         23.56          0.19          0.05         25.78
Just calling func    0   0         25.78


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    140        192.86          0.86          1.13         23.64          0.10          0.05         25.78
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    192.86
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    75.0866               145
loop is:       38
neval is:      139
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       38      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    75.0866      0.500000    
T0,tstep,tfreq (these do not change):             72
current SAtemp,tstepnext are:    75.0866               145
loop is:       39
neval is:      139


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      145
neval,tstepnext:      139     145

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.724264     -0.322600      -24.2229       24.2229       181.022       205.245    
   2  0.309663      -1.17227      -88.0218       88.0218       181.994       270.015    
   3  0.688114     -0.373801      -28.0674       28.0674       201.825       229.892    
   4  0.677876     -0.388791      -29.1930       29.1930       180.815       210.008    
   5  0.283701      -1.25984      -94.5968       94.5968       194.808       289.405    
   6  0.183733      -1.69427      -127.217       127.217       202.842       330.059    
   7  0.243414      -1.41299      -106.097       106.097       223.887       329.983    
   8  0.785389     -0.241576      -18.1391       18.1391       214.200       232.339    
   9  0.258033      -1.35467      -101.718       101.718       196.829       298.546    
  10  0.137887      -1.98132      -148.771       148.771       206.991       355.762    
  11  0.386520     -0.950573      -71.3753       71.3753       183.049       254.424    
  12  0.882934     -0.124505      -9.34868       9.34868       216.448       225.796    
  13  0.395106     -0.928602      -69.7255       69.7255       221.702       291.427    
  14  0.107633      -2.22903      -167.370       167.370       207.128       374.499    
  15  0.434094     -0.834495      -62.6594       62.6594       248.838       311.498    
  16  0.558484     -0.582529      -43.7402       43.7402       212.336       256.076    
  17  0.102706      -2.27589      -170.889       170.889       176.615       347.503    
  18  0.325804      -1.12146      -84.2065       84.2065       243.859       328.065    
  19  0.693871     -0.365469      -27.4418       27.4418       250.289       277.731    
  20  0.832622     -0.183176      -13.7540       13.7540       183.173       196.927    
  21  0.691207     -0.369316      -27.7307       27.7307       197.890       225.621    
  22  0.903946     -0.100985      -7.58264       7.58264       251.224       258.807    
  23  0.258785E-01  -3.65434      -274.392       274.392       243.047       517.439    
  24  0.247338      -1.39700      -104.896       104.896       249.934       354.830    
  25  0.861464     -0.149122      -11.1971       11.1971       212.685       223.882    
  26  0.954919     -0.461290E-01  -3.46367       3.46367       208.927       212.391    
  27  0.579638     -0.545352      -40.9486       40.9486       220.149       261.098    
  28  0.537182     -0.621418      -46.6602       46.6602       202.861       249.522    
  29  0.407710     -0.897199      -67.3676       67.3676       248.738       316.105    
  30  0.958466     -0.424211E-01  -3.18525       3.18525       244.431       247.617    
  31  0.884674     -0.122536      -9.20082       9.20082       250.354       259.555    
  32  0.395055     -0.928731      -69.7353       69.7353       246.206       315.942    
  33  0.325425      -1.12262      -84.2939       84.2939       246.946       331.240    
  34  0.679842     -0.385895      -28.9756       28.9756       256.190       285.166    
  35  0.765292     -0.267498      -20.0855       20.0855       189.837       209.922    
  36  0.217460      -1.52574      -114.563       114.563       244.735       359.298    
  37  0.181189      -1.70822      -128.264       128.264       236.903       365.167    
  38  0.518456     -0.656899      -49.3244       49.3244       250.401       299.726    
  39  0.249864E-01  -3.68942      -277.026       277.026       247.129       524.156    
  40  0.336654      -1.08870      -81.7468       81.7468       251.012       332.759    
  41  0.873801     -0.134903      -10.1294       10.1294       210.105       220.235    
  42  0.478904     -0.736255      -55.2829       55.2829       250.289       305.572    
  43  0.819950     -0.198512      -14.9056       14.9056       250.646       265.551    
  44  0.966813     -0.337500E-01  -2.53417       2.53417       253.404       255.938    
  45  0.514109     -0.665319      -49.9566       49.9566       285.045       335.001    
  46  0.483734     -0.726221      -54.5295       54.5295       251.161       305.691    
  47  0.227743E-01  -3.78212      -283.987       283.987       247.717       531.704    
  48  0.409495     -0.892830      -67.0396       67.0396       209.714       276.753    
  49  0.198361      -1.61767      -121.465       121.465       252.558       374.024    
  50  0.925767     -0.771331E-01  -5.79166       5.79166       194.261       200.053    
  51  0.842113     -0.171842      -12.9030       12.9030       196.531       209.434    
  52  0.347114E-01  -3.36069      -252.343       252.343       232.534       484.877    
  53  0.215814      -1.53334      -115.133       115.133       229.865       344.998    
  54  0.219309      -1.51727      -113.927       113.927       217.956       331.883    
  55  0.940126     -0.617416E-01  -4.63596       4.63596       254.170       258.806    
  56  0.663408     -0.410365      -30.8129       30.8129       229.060       259.873    
  57  0.630947     -0.460533      -34.5799       34.5799       226.033       260.613    
  58  0.719671     -0.328961      -24.7005       24.7005       262.721       287.422    
  59  0.939094     -0.628392E-01  -4.71838       4.71838       248.098       252.817    
  60  0.901520     -0.103673      -7.78447       7.78447       285.567       293.352    
  61  0.771028     -0.260031      -19.5248       19.5248       250.873       270.397    
  62  0.320616      -1.13751      -85.4118       85.4118       249.912       335.323    
  63  0.893890     -0.112173      -8.42267       8.42267       273.435       281.857    
  64  0.874332     -0.134295      -10.0838       10.0838       250.810       260.894    
  65  0.363931      -1.01079      -75.8969       75.8969       261.740       337.637    
  66  0.140534      -1.96231      -147.343       147.343       252.992       400.336    
  67  0.432559     -0.838038      -62.9254       62.9254       250.289       313.214    
  68  0.446579     -0.806139      -60.5303       60.5303       256.405       316.935    
  69  0.830196     -0.186093      -13.9731       13.9731       254.890       268.863    
  70  0.324418      -1.12572      -84.5267       84.5267       317.398       401.925    
  71  0.645984E-01  -2.73957      -205.705       205.705       205.251       410.956    
  72  0.465516     -0.764609      -57.4119       57.4119       220.199       277.611    
  73  0.456901     -0.783288      -58.8144       58.8144       192.862       251.676    
loop,thermsimp(1:2)       39   24.2229       88.0218    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    141        199.96          0.86          1.14         23.58          0.15          0.05         25.77
Just calling func    0   0         25.77


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    142        187.00          0.86          1.12         23.64          0.15          0.04         25.80
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  140    199.96        1.723     -1.284      1.723     -102.6     0.8882    
                      0.5817      1.926     -99.70      3.728    -0.8107E-01
                       1.774     -1.484      1.392      0.000     -5.000    
                      -2.030      0.000      0.000      0.000     -1.221    

                      -2.500      9372.      8748.      0.000      0.000    
                     -0.5672     -6.368     -4.572     -7.539      3.128    
                      -14.22     -2.927      1355.      0.000      4171.    

                       8215.      7582.      4074.     0.1151E+05  2532.    
                       3253.     0.1241    -0.4247E-01  0.000    -0.4553    
                     -0.5972E-01-0.1238    -0.1228    -0.2086    -0.1402E-01

                      -1.554    -0.1707E-01  0.000    -0.2469E-01 0.2777E-01
                      0.8541E-01 0.2852E-01 0.8571E-02-0.8943E-01 0.1314    
                     -0.4111E-01-0.4573E-01-0.7879E-01-0.3959      0.000    

                     -0.8259     -1.421     -2.248     -2.917    -0.2798    
                      0.1896      9.251      9.160    -0.1924E+05 -4.000    
                     -0.4077    -0.5281      9.396      8.450    -0.2040E+05

                      -4.000     0.9372E-01-0.6383      8.819      9.043    
                     -0.3248E+05 -7.000    -0.4706    -0.5581      9.435    
                       8.446    -0.2765E+05 -7.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    187.00
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    75.0866               145
loop is:       39
neval is:      141
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       39      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    75.0866      0.500000    
T0,tstep,tfreq (these do not change):             72
current SAtemp,tstepnext are:    75.0866               145
loop is:       40
neval is:      141


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      145
neval,tstepnext:      141     145

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.954632     -0.464296E-01  -3.48624       3.48624       183.173       186.659    
   2  0.450411     -0.797594      -59.8887       59.8887       194.261       254.150    
   3  0.691912E-01  -2.67088      -200.548       200.548       181.022       381.569    
   4  0.740935     -0.299842      -22.5141       22.5141       196.531       219.045    
   5  0.452531     -0.792898      -59.5361       59.5361       189.837       249.373    
   6  0.461330     -0.773642      -58.0902       58.0902       180.815       238.905    
   7  0.102999      -2.27303      -170.674       170.674       208.927       379.601    
   8  0.475106     -0.744217      -55.8808       55.8808       210.105       265.986    
   9  0.240275      -1.42597      -107.071       107.071       212.685       319.756    
  10  0.276707E-01  -3.58738      -269.364       269.364       197.890       467.255    
  11  0.132701E-01  -4.32224      -324.542       324.542       216.448       540.990    
  12  0.997219     -0.278509E-02 -0.209123      0.209123       201.825       202.034    
  13  0.563305     -0.573934      -43.0948       43.0948       214.200       257.295    
  14  0.347949      -1.05570      -79.2690       79.2690       244.431       323.700    
  15  0.546018     -0.605103      -45.4352       45.4352       202.861       248.297    
  16  0.343968      -1.06721      -80.1329       80.1329       192.862       272.995    
  17  0.945234     -0.563230E-01  -4.22910       4.22910       248.098       252.328    
  18  0.346208      -1.06072      -79.6455       79.6455       183.049       262.694    
  19  0.406433     -0.900337      -67.6032       67.6032       253.404       321.007    
  20  0.632259     -0.458455      -34.4239       34.4239       212.336       246.759    
  21  0.983930     -0.162002E-01  -1.21642       1.21642       254.170       255.387    
  22  0.200798      -1.60546      -120.548       120.548       251.224       371.773    
  23  0.223962      -1.49628      -112.350       112.350       250.354       362.704    
  24  0.594322     -0.520335      -39.0702       39.0702       229.060       268.130    
  25  0.875298     -0.133191      -10.0009       10.0009       226.033       236.034    
  26  0.327822      -1.11529      -83.7430       83.7430       250.810       334.553    
  27  0.215105      -1.53663      -115.380       115.380       220.149       335.530    
  28  0.905181     -0.996198E-01  -7.48012       7.48012       250.646       258.126    
  29  0.699086     -0.357981      -26.8796       26.8796       254.890       281.770    
  30  0.747401     -0.291154      -21.8618       21.8618       181.994       203.855    
  31  0.699189     -0.357834      -26.8685       26.8685       250.873       277.741    
  32  0.563488     -0.573610      -43.0704       43.0704       209.714       252.784    
  33  0.155576      -1.86062      -139.708       139.708       220.199       359.907    
  34  0.380593     -0.966025      -72.5355       72.5355       250.289       322.824    
  35  0.626112     -0.468226      -35.1575       35.1575       273.435       308.592    
  36  0.372369     -0.987870      -74.1758       74.1758       256.190       330.366    
  37  0.517531     -0.658686      -49.4585       49.4585       262.721       312.180    
  38  0.673247     -0.395643      -29.7075       29.7075       194.808       224.516    
  39  0.741527     -0.299044      -22.4542       22.4542       221.702       244.156    
  40  0.280982      -1.26947      -95.3198       95.3198       285.567       380.887    
  41  0.331745      -1.10339      -82.8497       82.8497       196.829       279.678    
  42  0.712030     -0.339635      -25.5020       25.5020       250.401       275.903    
  43  0.200581      -1.60654      -120.629       120.629       250.289       370.918    
  44  0.989915     -0.101357E-01 -0.761056      0.761056       251.161       251.923    
  45  0.808031     -0.213155      -16.0051       16.0051       248.838       264.843    
  46  0.893446     -0.112670      -8.46000       8.46000       250.289       258.749    
  47  0.364885      -1.00817      -75.7002       75.7002       246.206       321.907    
  48  0.923731     -0.793347E-01  -5.95697       5.95697       248.738       254.695    
  49  0.504880     -0.683434      -51.3167       51.3167       256.405       307.722    
  50  0.724988     -0.321600      -24.1479       24.1479       243.859       268.007    
  51  0.927322     -0.754540E-01  -5.66558       5.66558       223.887       229.552    
  52  0.857721     -0.153476      -11.5240       11.5240       202.842       214.366    
  53  0.943333     -0.583361E-01  -4.38026       4.38026       246.946       251.327    
  54  0.794551     -0.229978      -17.2682       17.2682       217.956       235.225    
  55  0.732400     -0.311429      -23.3841       23.3841       251.012       274.396    
  56  0.143434      -1.94188      -145.809       145.809       285.045       430.854    
  57  0.859384     -0.151540      -11.3786       11.3786       249.912       261.290    
  58  0.677471     -0.389389      -29.2379       29.2379       261.740       290.978    
  59  0.258745      -1.35191      -101.510       101.510       229.865       331.375    
  60  0.380926E-01  -3.26773      -245.363       245.363       176.615       421.978    
  61  0.563373     -0.573814      -43.0857       43.0857       249.934       293.020    
  62  0.985538     -0.145678E-01  -1.09384       1.09384       206.991       208.085    
  63  0.647297     -0.434951      -32.6590       32.6590       244.735       277.394    
  64  0.608092     -0.497430      -37.3503       37.3503       236.903       274.253    
  65  0.944821     -0.567601E-01  -4.26192       4.26192       252.558       256.820    
  66  0.458402E-01  -3.08259      -231.461       231.461       207.128       438.590    
  67  0.573743E-01  -2.85816      -214.609       214.609       252.992       467.602    
  68  0.755011     -0.281022      -21.1010       21.1010       317.398       338.499    
  69  0.199134      -1.61378      -121.173       121.173       205.251       326.425    
  70  0.364851      -1.00827      -75.7073       75.7073       232.534       308.242    
  71  0.868783     -0.140661      -10.5618       10.5618       243.047       253.609    
  72  0.658442     -0.417879      -31.3771       31.3771       247.129       278.507    
  73  0.257054      -1.35847      -102.003       102.003       186.996       288.998    
loop,thermsimp(1:2)       40   3.48624       59.8887    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    143        206.53          0.86          1.12         23.59          0.15          0.05         25.78
Just calling func    0   0         25.78


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    144        223.83          0.86          1.12         23.64          0.12          0.05         25.79
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    206.53
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    75.0866               145
loop is:       40
neval is:      143
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       40      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    75.0866      0.500000    
T0,tstep,tfreq (these do not change):             72
current SAtemp,tstepnext are:    75.0866               145
loop is:       41
neval is:      143


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      145
neval,tstepnext:      143     145

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.357965      -1.02732      -77.1380       77.1380       183.173       260.311    
   2  0.414955     -0.879585      -66.0451       66.0451       201.825       267.870    
   3  0.407443     -0.897854      -67.4168       67.4168       181.994       249.410    
   4  0.883897     -0.123414      -9.26677       9.26677       206.991       216.258    
   5  0.520045     -0.653840      -49.0947       49.0947       202.842       251.937    
   6  0.634521     -0.454885      -34.1557       34.1557       196.531       230.687    
   7  0.344406      -1.06594      -80.0375       80.0375       194.808       274.846    
   8  0.545595     -0.605879      -45.4934       45.4934       223.887       269.380    
   9  0.766876     -0.265430      -19.9302       19.9302       217.956       237.887    
  10  0.639043     -0.447783      -33.6225       33.6225       226.033       259.655    
  11  0.850701     -0.161694      -12.1411       12.1411       180.815       192.956    
  12  0.832060     -0.183851      -13.8048       13.8048       221.702       235.506    
  13  0.728209     -0.317167      -23.8150       23.8150       212.336       236.151    
  14  0.531327     -0.632378      -47.4831       47.4831       202.861       250.345    
  15  0.188974E-01  -3.96873      -297.998       297.998       189.837       487.835    
  16  0.246817      -1.39911      -105.054       105.054       246.946       352.000    
  17  0.935336     -0.668496E-01  -5.01951       5.01951       251.161       256.181    
  18  0.730823     -0.313585      -23.5460       23.5460       248.098       271.644    
  19  0.482288     -0.729213      -54.7541       54.7541       209.714       264.468    
  20  0.782974E-04  -9.45500      -709.944       709.944       243.047       952.991    
  21  0.258744      -1.35192      -101.511       101.511       194.261       295.772    
  22  0.389044     -0.944063      -70.8865       70.8865       248.738       319.624    
  23  0.611459E-01  -2.79449      -209.829       209.829       254.170       463.999    
  24  0.124922      -2.08006      -156.185       156.185       252.558       408.743    
  25  0.253683      -1.37167      -102.994       102.994       214.200       317.194    
  26  0.781437     -0.246621      -18.5179       18.5179       250.646       269.163    
  27  0.835634     -0.179565      -13.4829       13.4829       250.289       263.772    
  28  0.542030     -0.612434      -45.9856       45.9856       249.912       295.897    
  29  0.463443     -0.769071      -57.7469       57.7469       183.049       240.796    
  30  0.120587      -2.11538      -158.837       158.837       248.838       407.675    
  31  0.733316     -0.310178      -23.2902       23.2902       210.105       233.395    
  32  0.955530     -0.454889E-01  -3.41561       3.41561       243.859       247.274    
  33  0.419735     -0.868132      -65.1851       65.1851       229.060       294.245    
  34  0.284829      -1.25587      -94.2987       94.2987       192.862       287.160    
  35  0.924079     -0.789582E-01  -5.92870       5.92870       236.903       242.832    
  36  0.432674     -0.837770      -62.9053       62.9053       251.012       313.917    
  37  0.155293      -1.86244      -139.844       139.844       250.401       390.246    
  38  0.634342     -0.455168      -34.1770       34.1770       244.735       278.912    
  39  0.935635     -0.665293E-01  -4.99546       4.99546       250.873       255.868    
  40  0.931832     -0.706024E-01  -5.30129       5.30129       247.129       252.431    
  41  0.875970     -0.132424      -9.94325       9.94325       196.829       206.772    
  42  0.273544      -1.29629      -97.3342       97.3342       254.890       352.224    
  43  0.799596     -0.223649      -16.7931       16.7931       186.996       203.789    
  44  0.772883     -0.257628      -19.3444       19.3444       261.740       281.084    
  45  0.274276      -1.29362      -97.1337       97.1337       249.934       347.068    
  46  0.116034      -2.15387      -161.727       161.727       256.405       418.132    
  47  0.700214     -0.356369      -26.7586       26.7586       232.534       259.293    
  48  0.704184E-01  -2.65330      -199.227       199.227       273.435       472.662    
  49  0.699980E-01  -2.65929      -199.677       199.677       262.721       462.398    
  50  0.186964      -1.67684      -125.908       125.908       212.685       338.593    
  51  0.342641      -1.07107      -80.4232       80.4232       253.404       333.827    
  52  0.989806     -0.102462E-01 -0.769350      0.769350       246.206       246.976    
  53  0.216227      -1.53143      -114.990       114.990       250.289       365.278    
  54  0.233793      -1.45332      -109.125       109.125       244.431       353.556    
  55  0.404477     -0.905159      -67.9654       67.9654       205.251       273.217    
  56  0.164502      -1.80483      -135.519       135.519       256.190       391.709    
  57  0.561765E-01  -2.87926      -216.194       216.194       229.865       446.059    
  58  0.169196E-01  -4.07928      -306.299       306.299       250.810       557.109    
  59  0.486948     -0.719597      -54.0321       54.0321       220.149       274.181    
  60  0.640730     -0.445148      -33.4246       33.4246       317.398       350.823    
  61  0.940004     -0.618708E-01  -4.64567       4.64567       220.199       224.845    
  62  0.216981      -1.52795      -114.728       114.728       250.354       365.082    
  63  0.131817      -2.02634      -152.151       152.151       250.289       402.440    
  64  0.996981     -0.302401E-02 -0.227062      0.227062       251.224       251.451    
  65  0.534925     -0.625629      -46.9763       46.9763       208.927       255.903    
  66  0.151104      -1.88978      -141.898       141.898       285.567       427.465    
  67  0.228761      -1.47508      -110.759       110.759       181.022       291.780    
  68  0.187751      -1.67264      -125.593       125.593       176.615       302.208    
  69  0.417030     -0.874597      -65.6705       65.6705       285.045       350.715    
  70  0.239615      -1.42872      -107.278       107.278       207.128       314.406    
  71  0.937866E-02  -4.66932      -350.603       350.603       197.890       548.494    
  72  0.929880     -0.727002E-01  -5.45881       5.45881       252.992       258.451    
  73  0.463017     -0.769992      -57.8161       57.8161       206.532       264.349    
loop,thermsimp(1:2)       41   77.1380       66.0451    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    145        204.62          0.82          1.11         23.60          0.20          0.05         25.79
Just calling func    0   0         25.79


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    146        196.34          0.86          1.11         23.66          0.11          0.04         25.77
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    196.34
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    75.0866               145
loop is:       41
neval is:      145
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       41      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    75.0866      0.500000    
T0,tstep,tfreq (these do not change):             72
current SAtemp,tstepnext are:    75.0866               145
loop is:       42
neval is:      145


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      145
neval,tstepnext:      145     145

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.559413E-01  -2.88345      -216.509       216.509       180.815       397.324    
   2  0.688513     -0.373221      -28.0239       28.0239       186.996       215.019    
   3  0.530653     -0.633647      -47.5784       47.5784       196.829       244.407    
   4  0.542886     -0.610856      -45.8671       45.8671       206.991       252.858    
   5  0.603382     -0.505205      -37.9341       37.9341       220.199       258.133    
   6  0.478412     -0.737283      -55.3601       55.3601       196.531       251.891    
   7  0.809657     -0.211144      -15.8541       15.8541       210.105       225.959    
   8  0.764585     -0.268422      -20.1549       20.1549       221.702       241.857    
   9  0.228600      -1.47578      -110.811       110.811       212.336       323.147    
  10  0.495526     -0.702136      -52.7210       52.7210       217.956       270.677    
  11  0.368264     -0.998954      -75.0081       75.0081       183.049       258.057    
  12  0.407647     -0.897355      -67.3793       67.3793       236.903       304.282    
  13  0.316165      -1.15149      -86.4616       86.4616       246.206       332.668    
  14  0.458518     -0.779756      -58.5493       58.5493       243.859       302.408    
  15  0.643610     -0.440663      -33.0879       33.0879       181.994       215.081    
  16  0.316553E-01  -3.45285      -259.263       259.263       202.861       462.124    
  17  0.570171     -0.561819      -42.1851       42.1851       251.224       293.410    
  18  0.448642E-01  -3.10412      -233.078       233.078       202.842       435.920    
  19  0.128957      -2.04828      -153.798       153.798       247.129       400.928    
  20  0.159422      -1.83620      -137.874       137.874       250.873       388.747    
  21  0.154083      -1.87026      -140.432       140.432       208.927       349.359    
  22  0.696997     -0.360974      -27.1043       27.1043       251.161       278.266    
  23  0.579421     -0.545727      -40.9768       40.9768       252.992       293.969    
  24  0.528206     -0.638269      -47.9255       47.9255       232.534       280.460    
  25  0.322914      -1.13037      -84.8755       84.8755       226.033       310.908    
  26  0.369562     -0.995437      -74.7440       74.7440       183.173       257.917    
  27  0.134248      -2.00806      -150.779       150.779       250.289       401.067    
  28  0.950150     -0.511358E-01  -3.83961       3.83961       206.532       210.372    
  29  0.138040      -1.98021      -148.687       148.687       209.714       358.401    
  30  0.316838      -1.14936      -86.3018       86.3018       201.825       288.127    
  31  0.151783      -1.88530      -141.561       141.561       250.646       392.207    
  32  0.338674      -1.08272      -81.2976       81.2976       223.887       305.184    
  33  0.814165     -0.205592      -15.4372       15.4372       248.098       263.536    
  34  0.578183     -0.547865      -41.1373       41.1373       205.251       246.389    
  35  0.208707      -1.56682      -117.647       117.647       220.149       337.797    
  36  0.540561     -0.615147      -46.1893       46.1893       194.808       240.998    
  37  0.910129     -0.941686E-01  -7.07080       7.07080       244.735       251.806    
  38  0.907740     -0.967972E-01  -7.26817       7.26817       261.740       269.008    
  39  0.549661     -0.598453      -44.9358       44.9358       192.862       237.797    
  40  0.193889      -1.64047      -123.177       123.177       181.022       304.199    
  41  0.807651     -0.213625      -16.0404       16.0404       229.060       245.100    
  42  0.613777     -0.488124      -36.6515       36.6515       194.261       230.912    
  43  0.664452     -0.408793      -30.6949       30.6949       249.912       280.606    
  44  0.584630     -0.536776      -40.3047       40.3047       176.615       216.920    
  45  0.618915     -0.479787      -36.0256       36.0256       251.012       287.038    
  46  0.542097     -0.612311      -45.9764       45.9764       207.128       253.104    
  47  0.133641      -2.01260      -151.119       151.119       214.200       365.320    
  48  0.479627     -0.734747      -55.1696       55.1696       248.738       303.907    
  49  0.225939      -1.48749      -111.691       111.691       253.404       365.095    
  50  0.324869      -1.12433      -84.4223       84.4223       212.685       297.107    
  51  0.669051     -0.401895      -30.1770       30.1770       249.934       280.111    
  52  0.602039     -0.507434      -38.1015       38.1015       285.045       323.146    
  53  0.143076      -1.94438      -145.997       145.997       317.398       463.395    
  54  0.897604     -0.108026      -8.11132       8.11132       246.946       255.058    
  55  0.165810      -1.79691      -134.924       134.924       254.890       389.814    
  56  0.468567     -0.758077      -56.9214       56.9214       244.431       301.353    
  57  0.641740     -0.443572      -33.3063       33.3063       250.354       283.660    
  58  0.904980     -0.998426E-01  -7.49684       7.49684       250.289       257.786    
  59  0.674132     -0.394330      -29.6089       29.6089       250.401       280.010    
  60  0.756363     -0.279234      -20.9667       20.9667       256.190       277.157    
  61  0.113892      -2.17251      -163.126       163.126       250.289       413.415    
  62  0.835916     -0.179227      -13.4576       13.4576       248.838       262.296    
  63  0.284183      -1.25814      -94.4692       94.4692       252.558       347.028    
  64  0.276674      -1.28492      -96.4800       96.4800       256.405       352.885    
  65  0.686678     -0.375890      -28.2243       28.2243       285.567       313.791    
  66  0.567044     -0.567318      -42.5980       42.5980       229.865       272.463    
  67  0.416554     -0.875738      -65.7562       65.7562       262.721       328.477    
  68  0.810149     -0.210537      -15.8085       15.8085       254.170       269.979    
  69  0.979175     -0.210445E-01  -1.58016       1.58016       273.435       275.015    
  70  0.334686      -1.09456      -82.1870       82.1870       189.837       272.024    
  71  0.331108      -1.10531      -82.9939       82.9939       197.890       280.884    
  72  0.734322     -0.308808      -23.1873       23.1873       250.810       273.997    
  73  0.958186E-01  -2.34530      -176.101       176.101       196.339       372.439    
loop,thermsimp(1:2)       42   216.509       28.0239    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    147        195.60          0.86          1.12         23.65          0.11          0.05         25.78
Just calling func    0   0         25.78


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    148        191.17          0.86          1.12         23.50          0.23          0.05         25.75
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    191.17
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    75.0866               145
loop is:       42
neval is:      147
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       42      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    75.0866      0.500000    
T0,tstep,tfreq (these do not change):             72
current SAtemp,tstepnext are:    75.0866               145
loop is:       43
neval is:      147


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 




neval>tstepnex so lower away!t
---> lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
     new SAtemp,tstepnext are :    37.5433               217

 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      217
neval,tstepnext:      147     217

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.788601     -0.237495      -8.91633       8.91633       206.532       215.449    
   2  0.796559     -0.227454      -8.53937       8.53937       186.996       195.535    
   3  0.784232     -0.243051      -9.12493       9.12493       181.994       191.118    
   4  0.503549     -0.686074      -25.7575       25.7575       176.615       202.372    
   5  0.468337     -0.758566      -28.4791       28.4791       210.105       238.584    
   6  0.198518      -1.61688      -60.7029       60.7029       194.261       254.964    
   7  0.857529     -0.153700      -5.77040       5.77040       192.862       198.632    
   8  0.845427     -0.167913      -6.30401       6.30401       194.808       201.112    
   9  0.710919     -0.341197      -12.8097       12.8097       221.702       234.511    
  10  0.934107     -0.681640E-01  -2.55910       2.55910       196.829       199.388    
  11  0.565087     -0.570775      -21.4288       21.4288       229.060       250.489    
  12  0.147377      -1.91476      -71.8864       71.8864       205.251       277.138    
  13  0.471965     -0.750851      -28.1894       28.1894       244.735       272.925    
  14  0.287319      -1.24716      -46.8225       46.8225       196.531       243.354    
  15  0.526906     -0.640733      -24.0553       24.0553       206.991       231.047    
  16  0.176999      -1.73161      -65.0104       65.0104       207.128       272.139    
  17  0.868579     -0.140897      -5.28972       5.28972       246.946       252.236    
  18  0.621282     -0.475971      -17.8695       17.8695       250.289       268.158    
  19  0.181881      -1.70440      -63.9890       63.9890       183.173       247.162    
  20  0.565209     -0.570560      -21.4207       21.4207       183.049       204.469    
  21  0.927617     -0.751364E-01  -2.82087       2.82087       220.199       223.020    
  22  0.296120      -1.21699      -45.6898       45.6898       248.838       294.528    
  23  0.152389      -1.88132      -70.6309       70.6309       248.098       318.729    
  24  0.508731     -0.675835      -25.3731       25.3731       261.740       287.113    
  25  0.389654     -0.942496      -35.3844       35.3844       254.170       289.555    
  26  0.770754     -0.260386      -9.77576       9.77576       217.956       227.732    
  27  0.144347      -1.93554      -72.6664       72.6664       189.837       262.503    
  28  0.690124     -0.370884      -13.9242       13.9242       229.865       243.789    
  29  0.882429     -0.125077      -4.69581       4.69581       250.810       255.506    
  30  0.781105     -0.247045      -9.27490       9.27490       273.435       282.709    
  31  0.331946      -1.10278      -41.4021       41.4021       256.190       297.592    
  32  0.157011      -1.85144      -69.5090       69.5090       251.161       320.671    
  33  0.734200     -0.308973      -11.5999       11.5999       250.401       262.001    
  34  0.563390     -0.573784      -21.5417       21.5417       249.934       271.476    
  35  0.349498      -1.05126      -39.4677       39.4677       232.534       272.002    
  36  0.256822      -1.35937      -51.0353       51.0353       249.912       300.947    
  37  0.563556     -0.573488      -21.5306       21.5306       197.890       219.421    
  38  0.945419E-01  -2.35871      -88.5539       88.5539       250.354       338.908    
  39  0.571450     -0.559577      -21.0084       21.0084       251.012       272.020    
  40  0.583029E-01  -2.84210      -106.702       106.702       201.825       308.527    
  41  0.428808     -0.846746      -31.7897       31.7897       251.224       283.014    
  42  0.628450     -0.464499      -17.4388       17.4388       252.992       270.431    
  43  0.152789      -1.87869      -70.5324       70.5324       212.685       283.218    
  44  0.787004E-01  -2.54211      -95.4391       95.4391       244.431       339.871    
  45  0.170927E-01  -4.06911      -152.768       152.768       243.859       396.626    
  46  0.531078     -0.632847      -23.7592       23.7592       248.738       272.497    
  47  0.206082E-01  -3.88206      -145.746       145.746       181.022       326.767    
  48  0.909565     -0.947891E-01  -3.55870       3.55870       236.903       240.462    
  49  0.456291     -0.784625      -29.4574       29.4574       223.887       253.344    
  50  0.997425E-02  -4.60775      -172.990       172.990       226.033       399.023    
  51  0.251070      -1.38202      -51.8857       51.8857       285.567       337.453    
  52  0.548517     -0.600536      -22.5461       22.5461       285.045       307.591    
  53  0.210242      -1.55950      -58.5487       58.5487       212.336       270.884    
  54  0.848361     -0.164449      -6.17397       6.17397       262.721       268.895    
  55  0.160491E-01  -4.13210      -155.133       155.133       246.206       401.339    
  56  0.407967     -0.896570      -33.6602       33.6602       220.149       253.810    
  57  0.859929     -0.150905      -5.66549       5.66549       252.558       258.224    
  58  0.406052     -0.901274      -33.8368       33.8368       208.927       242.764    
  59  0.743169     -0.296832      -11.1441       11.1441       256.405       267.549    
  60  0.434823     -0.832817      -31.2667       31.2667       209.714       240.980    
  61  0.559897     -0.580003      -21.7752       21.7752       253.404       275.179    
  62  0.277128      -1.28328      -48.1784       48.1784       214.200       262.379    
  63  0.839691     -0.174721      -6.55962       6.55962       196.339       202.898    
  64  0.641867     -0.443375      -16.6458       16.6458       250.873       267.518    
  65  0.309074      -1.17417      -44.0824       44.0824       254.890       298.972    
  66  0.552351     -0.593572      -22.2846       22.2846       250.646       272.930    
  67  0.764824     -0.268109      -10.0657       10.0657       180.815       190.881    
  68  0.857070     -0.154235      -5.79050       5.79050       247.129       252.920    
  69  0.650112     -0.430610      -16.1665       16.1665       250.289       266.455    
  70  0.128926      -2.04851      -76.9080       76.9080       250.289       327.197    
  71  0.370422     -0.993113      -37.2847       37.2847       202.842       240.127    
  72  0.795676     -0.228564      -8.58104       8.58104       202.861       211.443    
  73  0.365230      -1.00723      -37.8147       37.8147       191.170       228.985    
loop,thermsimp(1:2)       43   8.91633       8.53937    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    149        199.09          0.86          1.12         23.68          0.08          0.05         25.78
Just calling func    0   0         25.78


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    150        187.83          0.86          1.12         23.79          0.04          0.05         25.86
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    187.83
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    37.5433               217
loop is:       43
neval is:      149
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       43      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    75.0866      0.500000    
T0,tstep,tfreq (these do not change):             72
current SAtemp,tstepnext are:    37.5433               217
loop is:       44
neval is:      149


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      217
neval,tstepnext:      149     217

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.104987      -2.25392      -84.6196       84.6196       180.815       265.435    
   2  0.780131E-01  -2.55088      -95.7684       95.7684       181.994       277.762    
   3  0.723689     -0.323394      -12.1413       12.1413       186.996       199.137    
   4  0.439896     -0.821218      -30.8312       30.8312       192.862       223.693    
   5  0.967364     -0.331803E-01  -1.24570       1.24570       196.829       198.074    
   6  0.235884      -1.44441      -54.2281       54.2281       194.808       249.037    
   7  0.311956      -1.16489      -43.7340       43.7340       176.615       220.349    
   8  0.600573     -0.509870      -19.1422       19.1422       196.339       215.481    
   9  0.781739     -0.246234      -9.24445       9.24445       183.049       192.293    
  10  0.505036     -0.683126      -25.6468       25.6468       202.861       228.508    
  11  0.896130     -0.109670      -4.11738       4.11738       206.532       210.650    
  12  0.545040     -0.606897      -22.7849       22.7849       197.890       220.675    
  13  0.338019      -1.08465      -40.7215       40.7215       220.199       260.921    
  14  0.200467      -1.60711      -60.3361       60.3361       217.956       278.292    
  15  0.548763     -0.600089      -22.5293       22.5293       191.170       213.699    
  16  0.897241     -0.108431      -4.07085       4.07085       206.991       211.062    
  17  0.229905      -1.47009      -55.1920       55.1920       221.702       276.894    
  18  0.387828     -0.947193      -35.5608       35.5608       210.105       245.666    
  19  0.789400     -0.236482      -8.87833       8.87833       202.842       211.720    
  20  0.495667     -0.701851      -26.3498       26.3498       236.903       263.253    
  21  0.818926     -0.199761      -7.49970       7.49970       209.714       217.213    
  22  0.181319      -1.70750      -64.1051       64.1051       208.927       273.032    
  23  0.901986     -0.103156      -3.87283       3.87283       196.531       200.404    
  24  0.933790E-01  -2.37109      -89.0185       89.0185       229.865       318.884    
  25  0.171523      -1.76304      -66.1902       66.1902       183.173       249.363    
  26  0.648450     -0.433170      -16.2626       16.2626       229.060       245.323    
  27  0.777448     -0.251739      -9.45110       9.45110       246.946       256.397    
  28  0.777670     -0.251453      -9.44037       9.44037       247.129       256.570    
  29  0.972420     -0.279672E-01  -1.04998       1.04998       223.887       224.937    
  30  0.825305     -0.192002      -7.20838       7.20838       220.149       227.358    
  31  0.470649     -0.753642      -28.2942       28.2942       194.261       222.555    
  32  0.263953      -1.33198      -50.0070       50.0070       250.810       300.817    
  33  0.857551     -0.153675      -5.76947       5.76947       252.558       258.328    
  34  0.950157     -0.511279E-01  -1.91951       1.91951       250.401       252.321    
  35  0.866482     -0.143314      -5.38048       5.38048       214.200       219.581    
  36  0.904889     -0.999433E-01  -3.75220       3.75220       189.837       193.589    
  37  0.297565      -1.21212      -45.5071       45.5071       250.289       295.796    
  38  0.902696     -0.102369      -3.84328       3.84328       250.873       254.716    
  39  0.800054     -0.223076      -8.37502       8.37502       256.405       264.780    
  40  0.534162     -0.627057      -23.5418       23.5418       250.289       273.830    
  41  0.593018     -0.522530      -19.6175       19.6175       262.721       282.339    
  42  0.682417E-01  -2.68470      -100.793       100.793       252.992       353.785    
  43  0.336048      -1.09050      -40.9410       40.9410       212.336       253.277    
  44  0.576540     -0.550710      -20.6755       20.6755       249.934       270.610    
  45  0.217955      -1.52347      -57.1960       57.1960       232.534       289.730    
  46  0.281607      -1.26724      -47.5764       47.5764       251.012       298.588    
  47  0.306631      -1.18211      -44.3803       44.3803       207.128       251.508    
  48  0.676335E-01  -2.69365      -101.129       101.129       248.738       349.866    
  49  0.145631      -1.92668      -72.3339       72.3339       244.735       317.069    
  50  0.820952     -0.197291      -7.40695       7.40695       250.646       258.053    
  51  0.224137      -1.49550      -56.1459       56.1459       253.404       309.550    
  52  0.738282     -0.303430      -11.3918       11.3918       205.251       216.643    
  53  0.364089      -1.01036      -37.9321       37.9321       273.435       311.367    
  54  0.321068      -1.13610      -42.6530       42.6530       251.224       293.877    
  55  0.179504      -1.71756      -64.4828       64.4828       212.685       277.168    
  56  0.808596     -0.212456      -7.97631       7.97631       261.740       269.716    
  57  0.974692     -0.256343E-01 -0.962395      0.962395       254.170       255.133    
  58  0.559434     -0.580830      -21.8063       21.8063       248.838       270.645    
  59  0.443035E-01  -3.11669      -117.011       117.011       256.190       373.201    
  60  0.711672     -0.340139      -12.7699       12.7699       254.890       267.660    
  61  0.578255     -0.547741      -20.5640       20.5640       249.912       270.475    
  62  0.102770      -2.27527      -85.4210       85.4210       285.045       370.466    
  63  0.813100     -0.206901      -7.76774       7.76774       201.825       209.593    
  64  0.612419     -0.490339      -18.4090       18.4090       248.098       266.507    
  65  0.406120     -0.901107      -33.8305       33.8305       251.161       284.992    
  66  0.255858      -1.36313      -51.1765       51.1765       181.022       232.198    
  67  0.622680     -0.473723      -17.7851       17.7851       250.289       268.074    
  68  0.428339     -0.847839      -31.8307       31.8307       285.567       317.398    
  69  0.594560     -0.519934      -19.5200       19.5200       250.354       269.874    
  70  0.921341     -0.819246E-01  -3.07572       3.07572       244.431       247.507    
  71  0.152539      -1.88033      -70.5939       70.5939       243.859       314.453    
  72  0.539176     -0.617712      -23.1910       23.1910       226.033       249.224    
  73  0.179134      -1.71962      -64.5603       64.5603       187.830       252.391    
loop,thermsimp(1:2)       44   84.6196       95.7684    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    151        201.52          0.86          1.12         23.81          0.05          0.05         25.89
Just calling func    0   0         25.89


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    152        200.13          0.86          1.12         23.70          0.06          0.04         25.79
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    200.13
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    37.5433               217
loop is:       44
neval is:      151
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       44      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    75.0866      0.500000    
T0,tstep,tfreq (these do not change):             72
current SAtemp,tstepnext are:    37.5433               217
loop is:       45
neval is:      151


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      217
neval,tstepnext:      151     217

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.872614     -0.136261      -5.11570       5.11570       183.049       188.164    
   2  0.990306     -0.974175E-02 -0.365738      0.365738       189.837       190.203    
   3  0.488656     -0.716096      -26.8846       26.8846       196.829       223.713    
   4  0.865115E-01  -2.44748      -91.8864       91.8864       186.996       278.882    
   5  0.234262      -1.45132      -54.4872       54.4872       196.531       251.018    
   6  0.906541     -0.981186E-01  -3.68370       3.68370       201.825       205.509    
   7  0.680454     -0.384995      -14.4540       14.4540       206.532       220.986    
   8  0.575574     -0.552388      -20.7385       20.7385       206.991       227.730    
   9  0.537443E-02  -5.22610      -196.205       196.205       202.842       399.047    
  10  0.421676     -0.863518      -32.4193       32.4193       191.170       223.589    
  11  0.297588      -1.21204      -45.5041       45.5041       196.339       241.843    
  12  0.119337      -2.12581      -79.8098       79.8098       205.251       285.061    
  13  0.958276     -0.426192E-01  -1.60007       1.60007       209.714       211.314    
  14  0.115549      -2.15806      -81.0206       81.0206       214.200       295.221    
  15  0.104220      -2.26125      -84.8950       84.8950       176.615       261.510    
  16  0.719503     -0.329194      -12.3590       12.3590       197.890       210.250    
  17  0.875656     -0.132782      -4.98506       4.98506       194.261       199.246    
  18  0.578760     -0.546868      -20.5312       20.5312       192.862       213.393    
  19  0.923704     -0.793639E-01  -2.97958       2.97958       223.887       226.866    
  20  0.457980     -0.780930      -29.3187       29.3187       220.149       249.468    
  21  0.783173     -0.244401      -9.17563       9.17563       202.861       212.037    
  22  0.764479     -0.268561      -10.0827       10.0827       181.022       191.104    
  23  0.496891     -0.699384      -26.2572       26.2572       229.060       255.317    
  24  0.554859     -0.589041      -22.1146       22.1146       210.105       232.220    
  25  0.734503E-02  -4.91373      -184.478       184.478       244.431       428.909    
  26  0.117643      -2.14010      -80.3466       80.3466       194.808       275.155    
  27  0.145440      -1.92799      -72.3832       72.3832       226.033       298.416    
  28  0.375449     -0.979633      -36.7787       36.7787       183.173       219.951    
  29  0.954324E-01  -2.34934      -88.2019       88.2019       207.128       295.330    
  30  0.449085     -0.800543      -30.0550       30.0550       250.401       280.456    
  31  0.354483      -1.03709      -38.9359       38.9359       187.830       226.766    
  32  0.153971      -1.87099      -70.2431       70.2431       212.336       282.579    
  33  0.871598     -0.137427      -5.15945       5.15945       250.873       256.032    
  34  0.633061     -0.457188      -17.1643       17.1643       254.170       271.335    
  35  0.947022E-01  -2.35702      -88.4902       88.4902       246.946       335.437    
  36  0.793812     -0.230909      -8.66909       8.66909       247.129       255.799    
  37  0.760585     -0.273667      -10.2744       10.2744       250.646       260.920    
  38  0.124312      -2.08496      -78.2764       78.2764       252.558       330.835    
  39  0.961605E-03  -6.94691      -260.810       260.810       220.199       481.009    
  40  0.672529     -0.396710      -14.8938       14.8938       236.903       251.797    
  41  0.749847E-01  -2.59047      -97.2548       97.2548       256.405       353.660    
  42  0.982441     -0.177147E-01 -0.665069      0.665069       180.815       181.480    
  43  0.340727      -1.07667      -40.4219       40.4219       248.098       288.520    
  44  0.915043     -0.887846E-01  -3.33327       3.33327       254.890       258.223    
  45  0.150614      -1.89303      -71.0707       71.0707       250.289       321.359    
  46  0.892785     -0.113409      -4.25775       4.25775       261.740       265.998    
  47  0.844073     -0.169516      -6.36418       6.36418       250.354       256.718    
  48  0.469949     -0.755131      -28.3501       28.3501       249.912       278.262    
  49  0.389072     -0.943991      -35.4406       35.4406       249.934       285.375    
  50  0.738049     -0.303745      -11.4036       11.4036       248.838       260.242    
  51  0.250173      -1.38560      -52.0201       52.0201       208.927       260.947    
  52  0.383245     -0.959081      -36.0071       36.0071       250.289       286.296    
  53  0.384434     -0.955983      -35.8908       35.8908       221.702       257.592    
  54  0.479018E-01  -3.03860      -114.079       114.079       212.685       326.764    
  55  0.819285     -0.199323      -7.48326       7.48326       181.994       189.477    
  56  0.568165     -0.565344      -21.2249       21.2249       217.956       239.181    
  57  0.918732     -0.847606E-01  -3.18219       3.18219       262.721       265.903    
  58  0.374258     -0.982809      -36.8979       36.8979       251.161       288.059    
  59  0.966524     -0.340496E-01  -1.27834       1.27834       232.534       233.813    
  60  0.505261     -0.682680      -25.6300       25.6300       251.224       276.854    
  61  0.283819      -1.25942      -47.2827       47.2827       250.289       297.571    
  62  0.448920     -0.800911      -30.0688       30.0688       251.012       281.081    
  63  0.398648     -0.919676      -34.5277       34.5277       250.810       285.337    
  64  0.625742     -0.468817      -17.6009       17.6009       253.404       271.005    
  65  0.924606     -0.783881E-01  -2.94295       2.94295       273.435       276.377    
  66  0.546966     -0.603368      -22.6524       22.6524       243.859       266.511    
  67  0.372518     -0.987471      -37.0729       37.0729       244.735       281.808    
  68  0.167437      -1.78715      -67.0955       67.0955       285.567       352.663    
  69  0.142610      -1.94764      -73.1209       73.1209       229.865       302.986    
  70  0.935319     -0.668675E-01  -2.51043       2.51043       248.738       251.248    
  71  0.100396      -2.29864      -86.2984       86.2984       252.992       339.291    
  72  0.179415E-01  -4.02064      -150.948       150.948       285.045       435.993    
  73  0.733830     -0.309478      -11.6188       11.6188       200.132       211.751    
loop,thermsimp(1:2)       45   5.11570      0.365738    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    153        201.85          0.86          1.12         23.59          0.18          0.05         25.80
Just calling func    0   0         25.80


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    154        320.07          0.86          1.12         23.64          0.08          0.05         25.75
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    201.85
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    37.5433               217
loop is:       45
neval is:      153
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       45      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    75.0866      0.500000    
T0,tstep,tfreq (these do not change):             72
current SAtemp,tstepnext are:    37.5433               217
loop is:       46
neval is:      153


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      217
neval,tstepnext:      153     217

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.880559E-01  -2.42978      -91.2221       91.2221       180.815       272.037    
   2  0.312747      -1.16236      -43.6389       43.6389       183.049       226.688    
   3  0.317683      -1.14670      -43.0509       43.0509       181.994       225.044    
   4  0.693053     -0.366649      -13.7652       13.7652       189.837       203.602    
   5  0.361881      -1.01644      -38.1605       38.1605       181.022       219.182    
   6  0.127478      -2.05981      -77.3321       77.3321       194.261       271.593    
   7  0.718706     -0.330302      -12.4006       12.4006       201.825       214.226    
   8  0.609419E-01  -2.79783      -105.040       105.040       197.890       302.930    
   9  0.320798      -1.13695      -42.6847       42.6847       209.714       252.398    
  10  0.343503      -1.06856      -40.1173       40.1173       200.132       240.249    
  11  0.671828     -0.397753      -14.9330       14.9330       202.861       217.794    
  12  0.616702     -0.483369      -18.1473       18.1473       192.862       211.009    
  13  0.806358E-01  -2.51781      -94.5270       94.5270       183.173       277.700    
  14  0.997284     -0.271972E-02 -0.102107      0.102107       206.532       206.634    
  15  0.554344     -0.589969      -22.1494       22.1494       191.170       213.319    
  16  0.411057     -0.889023      -33.3769       33.3769       196.829       230.205    
  17  0.846258E-01  -2.46952      -92.7138       92.7138       187.830       280.544    
  18  0.737439     -0.304571      -11.4346       11.4346       223.887       235.321    
  19  0.393790     -0.931939      -34.9881       34.9881       206.991       241.979    
  20  0.965947     -0.346467E-01  -1.30075       1.30075       210.105       211.406    
  21  0.150166      -1.89601      -71.1826       71.1826       232.534       303.717    
  22  0.212005      -1.55114      -58.2351       58.2351       217.956       276.191    
  23  0.615060     -0.486036      -18.2474       18.2474       196.339       214.586    
  24  0.382142     -0.961962      -36.1152       36.1152       220.149       256.265    
  25  0.249044      -1.39013      -52.1900       52.1900       196.531       248.721    
  26  0.245943      -1.40266      -52.6604       52.6604       248.738       301.398    
  27  0.108882      -2.21749      -83.2521       83.2521       236.903       320.155    
  28  0.199835      -1.61026      -60.4546       60.4546       229.060       289.515    
  29  0.863954     -0.146235      -5.49016       5.49016       247.129       252.620    
  30  0.392842     -0.934347      -35.0785       35.0785       250.873       285.951    
  31  0.770596     -0.260592      -9.78347       9.78347       250.354       260.137    
  32  0.149868      -1.89800      -71.2573       71.2573       221.702       292.959    
  33  0.234154      -1.45178      -54.5044       54.5044       254.890       309.394    
  34  0.611512     -0.491821      -18.4646       18.4646       248.838       267.303    
  35  0.518093E-01  -2.96019      -111.135       111.135       250.646       361.781    
  36  0.567953     -0.565716      -21.2389       21.2389       208.927       230.166    
  37  0.190847      -1.65628      -62.1824       62.1824       176.615       238.797    
  38  0.104561      -2.25798      -84.7721       84.7721       262.721       347.493    
  39  0.135276      -2.00044      -75.1031       75.1031       261.740       336.843    
  40  0.262364      -1.33802      -50.2338       50.2338       243.859       294.092    
  41  0.463951     -0.767976      -28.8324       28.8324       253.404       282.236    
  42  0.419672     -0.868282      -32.5982       32.5982       254.170       286.769    
  43  0.897011     -0.108687      -4.08046       4.08046       194.808       198.889    
  44  0.818933     -0.199754      -7.49941       7.49941       273.435       280.934    
  45  0.136906      -1.98846      -74.6535       74.6535       251.224       325.878    
  46  0.561722     -0.576748      -21.6530       21.6530       249.912       271.565    
  47  0.991681     -0.835368E-02 -0.313625      0.313625       186.996       187.309    
  48  0.653388     -0.425585      -15.9779       15.9779       250.401       266.379    
  49  0.578557     -0.547219      -20.5444       20.5444       251.012       271.556    
  50  0.784121     -0.243191      -9.13021       9.13021       244.735       253.865    
  51  0.827307     -0.189579      -7.11743       7.11743       212.336       219.453    
  52  0.994261     -0.575522E-02 -0.216070      0.216070       205.251       205.468    
  53  0.274030      -1.29452      -48.6005       48.6005       250.810       299.410    
  54  0.879777     -0.128087      -4.80879       4.80879       249.934       254.743    
  55  0.694576E-01  -2.66704      -100.129       100.129       250.289       350.418    
  56  0.431517E-01  -3.14303      -118.000       118.000       251.161       369.161    
  57  0.620633     -0.477015      -17.9087       17.9087       248.098       266.007    
  58  0.166702      -1.79155      -67.2607       67.2607       214.200       281.461    
  59  0.785136E-01  -2.54448      -95.5283       95.5283       207.128       302.656    
  60  0.440162     -0.820613      -30.8085       30.8085       250.289       281.097    
  61  0.924092     -0.789432E-01  -2.96379       2.96379       226.033       228.997    
  62  0.957397     -0.435372E-01  -1.63453       1.63453       229.865       231.500    
  63  0.817312     -0.201734      -7.57376       7.57376       250.289       257.862    
  64  0.345978      -1.06138      -39.8477       39.8477       212.685       252.533    
  65  0.814305E-02  -4.81059      -180.605       180.605       252.558       433.164    
  66  0.961102     -0.396751E-01  -1.48953       1.48953       246.946       248.436    
  67  0.918841E-01  -2.38723      -89.6244       89.6244       252.992       342.617    
  68  0.875898     -0.132506      -4.97470       4.97470       285.567       290.542    
  69  0.884301     -0.122958      -4.61625       4.61625       256.405       261.021    
  70  0.822040E-01  -2.49855      -93.8039       93.8039       202.842       296.646    
  71  0.674949     -0.393119      -14.7590       14.7590       244.431       259.190    
  72  0.890073     -0.116452      -4.37197       4.37197       285.045       289.417    
  73  0.102417      -2.27870      -85.5500       85.5500       201.853       287.403    
loop,thermsimp(1:2)       46   91.2221       43.6389    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    155        198.36          0.85          1.12         23.62          0.14          0.05         25.77
Just calling func    0   0         25.77


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    156        194.72          0.84          1.12         23.66          0.09          0.05         25.76
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    194.72
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    37.5433               217
loop is:       46
neval is:      155
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       46      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    75.0866      0.500000    
T0,tstep,tfreq (these do not change):             72
current SAtemp,tstepnext are:    37.5433               217
loop is:       47
neval is:      155


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      217
neval,tstepnext:      155     217

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.419083E-01  -3.17227      -119.098       119.098       186.996       306.093    
   2  0.581082     -0.542864      -20.3809       20.3809       194.808       215.189    
   3  0.690143     -0.370857      -13.9232       13.9232       189.837       203.760    
   4  0.958690     -0.421877E-01  -1.58386       1.58386       205.251       206.835    
   5  0.947492     -0.539367E-01  -2.02496       2.02496       206.532       208.557    
   6  0.253816E-01  -3.67373      -137.924       137.924       192.862       330.786    
   7  0.811950     -0.208316      -7.82087       7.82087       210.105       217.926    
   8  0.448512     -0.801821      -30.1030       30.1030       191.170       221.273    
   9  0.625244     -0.469613      -17.6308       17.6308       201.825       219.456    
  10  0.557627     -0.584065      -21.9277       21.9277       196.339       218.266    
  11  0.762657     -0.270947      -10.1723       10.1723       202.861       213.034    
  12  0.579328     -0.545887      -20.4944       20.4944       181.022       201.516    
  13  0.168395      -1.78144      -66.8813       66.8813       212.336       279.217    
  14  0.993282     -0.674111E-02 -0.253083      0.253083       181.994       182.247    
  15  0.573458     -0.556070      -20.8767       20.8767       183.049       203.925    
  16  0.900456     -0.104854      -3.93655       3.93655       226.033       229.969    
  17  0.961937     -0.388068E-01  -1.45693       1.45693       208.927       210.384    
  18  0.685702     -0.377312      -14.1656       14.1656       196.829       210.994    
  19  0.335644      -1.09171      -40.9862       40.9862       229.865       270.851    
  20  0.726392     -0.319666      -12.0013       12.0013       223.887       235.888    
  21  0.523515     -0.647189      -24.2976       24.2976       176.615       200.912    
  22  0.877914     -0.130206      -4.88838       4.88838       200.132       205.021    
  23  0.893563     -0.112539      -4.22508       4.22508       206.991       211.216    
  24  0.829449     -0.186994      -7.02038       7.02038       246.946       253.967    
  25  0.454457     -0.788653      -29.6086       29.6086       196.531       226.140    
  26  0.261407      -1.34168      -50.3710       50.3710       209.714       260.085    
  27  0.144225      -1.93638      -72.6982       72.6982       212.685       285.383    
  28  0.963744     -0.369299E-01  -1.38647       1.38647       247.129       248.516    
  29  0.267843      -1.31735      -49.4579       49.4579       244.735       294.193    
  30  0.251943E-01  -3.68114      -138.202       138.202       249.934       388.136    
  31  0.321532      -1.13466      -42.5988       42.5988       220.149       262.748    
  32  0.440903     -0.818930      -30.7453       30.7453       250.289       281.034    
  33  0.214416      -1.53984      -57.8106       57.8106       244.431       302.242    
  34  0.212185      -1.55030      -58.2034       58.2034       250.354       308.557    
  35  0.948253E-01  -2.35572      -88.4415       88.4415       256.405       344.847    
  36  0.507627     -0.678008      -25.4547       25.4547       248.098       273.553    
  37  0.415074     -0.879299      -33.0118       33.0118       250.401       283.413    
  38  0.768069     -0.263876      -9.90678       9.90678       248.838       258.745    
  39  0.462999E-01  -3.07261      -115.356       115.356       251.012       366.368    
  40  0.835390     -0.179856      -6.75241       6.75241       249.912       256.664    
  41  0.678734     -0.387526      -14.5490       14.5490       194.261       208.810    
  42  0.363569      -1.01179      -37.9858       37.9858       180.815       218.801    
  43  0.677161     -0.389846      -14.6361       14.6361       217.956       232.592    
  44  0.506668     -0.679899      -25.5257       25.5257       183.173       208.698    
  45  0.875658     -0.132779      -4.98497       4.98497       187.830       192.815    
  46  0.924863     -0.781102E-01  -2.93251       2.93251       273.435       276.367    
  47  0.794570E-01  -2.53254      -95.0799       95.0799       250.289       345.369    
  48  0.449212     -0.800261      -30.0444       30.0444       214.200       244.245    
  49  0.658987     -0.417051      -15.6575       15.6575       253.404       269.061    
  50  0.674357     -0.393995      -14.7919       14.7919       250.873       265.664    
  51  0.436334     -0.829348      -31.1365       31.1365       254.170       285.307    
  52  0.331871      -1.10301      -41.4106       41.4106       201.853       243.263    
  53  0.233029      -1.45659      -54.6854       54.6854       285.045       339.730    
  54  0.207666      -1.57183      -59.0115       59.0115       229.060       288.072    
  55  0.801765     -0.220940      -8.29482       8.29482       285.567       293.862    
  56  0.614336E-01  -2.78980      -104.738       104.738       221.702       326.440    
  57  0.167288      -1.78804      -67.1288       67.1288       243.859       310.987    
  58  0.718808     -0.330162      -12.3954       12.3954       202.842       215.237    
  59  0.981938     -0.182272E-01 -0.684310      0.684310       250.810       251.494    
  60  0.759328     -0.275322      -10.3365       10.3365       248.738       259.074    
  61  0.290749      -1.23530      -46.3771       46.3771       207.128       253.505    
  62  0.887200     -0.119685      -4.49337       4.49337       197.890       202.384    
  63  0.186280      -1.68051      -63.0917       63.0917       232.534       295.626    
  64  0.427708     -0.849315      -31.8861       31.8861       254.890       286.776    
  65  0.252777      -1.37525      -51.6314       51.6314       236.903       288.534    
  66  0.648648     -0.432865      -16.2512       16.2512       251.224       267.476    
  67  0.823358     -0.194364      -7.29708       7.29708       261.740       269.037    
  68  0.352572      -1.04250      -39.1389       39.1389       252.992       292.131    
  69  0.217910      -1.52367      -57.2037       57.2037       262.721       319.925    
  70  0.297394      -1.21270      -45.5287       45.5287       250.289       295.817    
  71  0.597449     -0.515086      -19.3380       19.3380       250.646       269.984    
  72  0.327024      -1.11772      -41.9630       41.9630       251.161       293.124    
  73  0.264314      -1.33062      -49.9558       49.9558       194.719       244.674    
loop,thermsimp(1:2)       47   119.098       20.3809    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    157        212.22          0.86          1.12         23.57          0.17          0.04         25.77
Just calling func    0   0         25.77


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    212.22
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    37.5433               217
loop is:       47
neval is:      156
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       47      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    75.0866      0.500000    
T0,tstep,tfreq (these do not change):             72
current SAtemp,tstepnext are:    37.5433               217
loop is:       48
neval is:      156


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      217
neval,tstepnext:      156     217

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.566816     -0.567720      -21.3141       21.3141       181.994       203.308    
   2  0.216137      -1.53184      -57.5104       57.5104       187.830       245.341    
   3  0.476425     -0.741444      -27.8363       27.8363       176.615       204.451    
   4  0.184047      -1.69256      -63.5445       63.5445       181.022       244.566    
   5  0.722630     -0.324858      -12.1963       12.1963       197.890       210.087    
   6  0.887750     -0.119065      -4.47009       4.47009       189.837       194.307    
   7  0.236344      -1.44247      -54.1550       54.1550       183.049       237.204    
   8  0.798055     -0.225578      -8.46893       8.46893       200.132       208.601    
   9  0.425454     -0.854597      -32.0844       32.0844       205.251       237.336    
  10  0.605701     -0.501368      -18.8230       18.8230       206.532       225.355    
  11  0.742456     -0.297792      -11.1801       11.1801       183.173       194.353    
  12  0.378462E-01  -3.27423      -122.925       122.925       194.261       317.186    
  13  0.341910      -1.07321      -40.2918       40.2918       208.927       249.219    
  14  0.794971E-01  -2.53203      -95.0609       95.0609       196.829       291.889    
  15  0.586423     -0.533715      -20.0374       20.0374       206.991       227.029    
  16  0.990523     -0.952170E-02 -0.357476      0.357476       202.861       203.219    
  17  0.348475      -1.05419      -39.5777       39.5777       194.808       234.386    
  18  0.998034     -0.196755E-02 -0.738683E-01  0.738683E-01   202.842       202.916    
  19  0.616072     -0.484391      -18.1856       18.1856       210.105       228.291    
  20  0.427239     -0.850411      -31.9272       31.9272       196.339       228.266    
  21  0.598160     -0.513898      -19.2934       19.2934       180.815       200.108    
  22  0.642831     -0.441873      -16.5894       16.5894       201.825       218.414    
  23  0.392766     -0.934541      -35.0857       35.0857       191.170       226.256    
  24  0.738407     -0.303260      -11.3854       11.3854       196.531       207.916    
  25  0.334341      -1.09559      -41.1322       41.1322       226.033       267.165    
  26  0.997912     -0.208996E-02 -0.784639E-01  0.784639E-01   217.956       218.035    
  27  0.492305E-01  -3.01124      -113.052       113.052       223.887       336.939    
  28  0.304734      -1.18832      -44.6133       44.6133       201.853       246.466    
  29  0.159886      -1.83330      -68.8280       68.8280       214.200       283.028    
  30  0.991331     -0.870666E-02 -0.326877      0.326877       194.719       195.046    
  31  0.735164     -0.307662      -11.5507       11.5507       247.129       258.680    
  32  0.279948      -1.27315      -47.7983       47.7983       250.810       298.608    
  33  0.457260     -0.782502      -29.3777       29.3777       207.128       236.506    
  34  0.678170     -0.388358      -14.5802       14.5802       246.946       261.527    
  35  0.689603     -0.371639      -13.9526       13.9526       249.912       263.864    
  36  0.468470     -0.758283      -28.4684       28.4684       248.838       277.307    
  37  0.937429     -0.646141E-01  -2.42583       2.42583       248.738       251.164    
  38  0.115915      -2.15490      -80.9020       80.9020       209.714       290.616    
  39  0.125789      -2.07315      -77.8328       77.8328       220.149       297.982    
  40  0.137562      -1.98368      -74.4740       74.4740       250.873       325.347    
  41  0.273901      -1.29499      -48.6181       48.6181       251.224       299.843    
  42  0.934963     -0.672484E-01  -2.52473       2.52473       261.740       264.265    
  43  0.450296     -0.797850      -29.9539       29.9539       253.404       283.358    
  44  0.681645     -0.383246      -14.3883       14.3883       250.646       265.034    
  45  0.282914E-01  -3.56520      -133.849       133.849       229.865       363.714    
  46  0.962226     -0.385062E-01  -1.44565       1.44565       248.098       249.544    
  47  0.771412     -0.259533      -9.74371       9.74371       273.435       283.178    
  48  0.778208     -0.250761      -9.41442       9.41442       212.336       221.750    
  49  0.945686     -0.558450E-01  -2.09661       2.09661       250.289       252.385    
  50  0.648669     -0.432833      -16.2500       16.2500       250.401       266.651    
  51  0.214283      -1.54046      -57.8338       57.8338       254.170       312.004    
  52  0.692999     -0.366726      -13.7681       13.7681       212.685       226.453    
  53  0.966323     -0.342573E-01  -1.28613       1.28613       254.890       256.176    
  54  0.975007     -0.253104E-01 -0.950237      0.950237       229.060       230.010    
  55  0.947991E-01  -2.35600      -88.4518       88.4518       236.903       325.355    
  56  0.195092      -1.63429      -61.3565       61.3565       252.992       314.349    
  57  0.459282     -0.778091      -29.2121       29.2121       251.161       280.374    
  58  0.563954     -0.572782      -21.5041       21.5041       285.567       307.071    
  59  0.482884     -0.727978      -27.3307       27.3307       244.735       272.066    
  60  0.270357      -1.30801      -49.1072       49.1072       232.534       281.642    
  61  0.184282      -1.69129      -63.4965       63.4965       250.289       313.785    
  62  0.486455     -0.720611      -27.0541       27.0541       244.431       271.486    
  63  0.348603      -1.05382      -39.5640       39.5640       186.996       226.560    
  64  0.556175     -0.586673      -22.0256       22.0256       250.354       272.379    
  65  0.125277      -2.07723      -77.9860       77.9860       243.859       321.845    
  66  0.473622     -0.747346      -28.0579       28.0579       262.721       290.779    
  67  0.762738     -0.270841      -10.1683       10.1683       221.702       231.870    
  68  0.898920     -0.106561      -4.00066       4.00066       192.862       196.862    
  69  0.646772E-01  -2.73835      -102.807       102.807       285.045       387.851    
  70  0.303985      -1.19078      -44.7057       44.7057       256.405       301.111    
  71  0.561577     -0.577006      -21.6627       21.6627       250.289       271.951    
  72  0.522748     -0.648656      -24.3527       24.3527       251.012       275.365    
  73  0.916158     -0.875659E-01  -3.28751       3.28751       212.216       215.503    
loop,thermsimp(1:2)       48   21.3141       57.5104    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    158        304.19          0.86          1.12         23.65          0.12          0.05         25.80
Just calling func    0   0         25.80


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    304.19
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    37.5433               217
loop is:       48
neval is:      157
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       48      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    75.0866      0.500000    
T0,tstep,tfreq (these do not change):             72
current SAtemp,tstepnext are:    37.5433               217
loop is:       49
neval is:      157


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      217
neval,tstepnext:      157     217

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.180970      -1.70942      -64.1774       64.1774       189.837       254.014    
   2  0.335083      -1.09338      -41.0490       41.0490       183.173       224.222    
   3  0.585160     -0.535871      -20.1184       20.1184       194.719       214.837    
   4  0.445729     -0.808044      -30.3366       30.3366       192.862       223.198    
   5  0.963605     -0.370741E-01  -1.39188       1.39188       180.815       182.207    
   6  0.538074     -0.619758      -23.2678       23.2678       202.842       226.110    
   7  0.971443     -0.289729E-01  -1.08774       1.08774       202.861       203.949    
   8  0.817136     -0.201950      -7.58187       7.58187       181.994       189.575    
   9  0.216943      -1.52812      -57.3707       57.3707       176.615       233.986    
  10  0.572311     -0.558074      -20.9519       20.9519       196.531       217.483    
  11  0.511761     -0.669897      -25.1501       25.1501       200.132       225.282    
  12  0.331920E-01  -3.40545      -127.852       127.852       197.890       325.742    
  13  0.662680     -0.411462      -15.4477       15.4477       212.216       227.663    
  14  0.578679     -0.547007      -20.5364       20.5364       217.956       238.493    
  15  0.473979     -0.746592      -28.0295       28.0295       201.825       229.854    
  16  0.243750      -1.41161      -52.9966       52.9966       212.336       265.332    
  17  0.784227     -0.243057      -9.12518       9.12518       206.532       215.658    
  18  0.215065      -1.53682      -57.6971       57.6971       191.170       248.867    
  19  0.813272     -0.206689      -7.75980       7.75980       212.685       220.445    
  20  0.877336     -0.130865      -4.91311       4.91311       186.996       191.909    
  21  0.911070     -0.931357E-01  -3.49662       3.49662       206.991       210.488    
  22  0.424500     -0.856844      -32.1688       32.1688       196.339       228.508    
  23  0.122508      -2.09958      -78.8252       78.8252       210.105       288.930    
  24  0.173199      -1.75331      -65.8252       65.8252       229.060       294.885    
  25  0.243010      -1.41465      -53.1108       53.1108       221.702       274.812    
  26  0.618804     -0.479966      -18.0195       18.0195       194.808       212.828    
  27  0.365303      -1.00703      -37.8072       37.8072       207.128       244.935    
  28  0.178054      -1.72567      -64.7873       64.7873       183.049       247.836    
  29  0.416122     -0.876776      -32.9171       32.9171       205.251       238.169    
  30  0.789287     -0.236625      -8.88370       8.88370       181.022       189.905    
  31  0.786736     -0.239863      -9.00526       9.00526       187.830       196.836    
  32  0.295880      -1.21780      -45.7202       45.7202       201.853       247.573    
  33  0.418649     -0.870722      -32.6898       32.6898       208.927       241.617    
  34  0.706992     -0.346736      -13.0176       13.0176       248.098       261.116    
  35  0.281863      -1.26633      -47.5423       47.5423       248.738       296.280    
  36  0.357290      -1.02921      -38.6399       38.6399       250.289       288.929    
  37  0.174180      -1.74767      -65.6132       65.6132       254.890       320.503    
  38  0.190924      -1.65588      -62.1672       62.1672       247.129       309.297    
  39  0.630369     -0.461449      -17.3243       17.3243       246.946       264.271    
  40  0.252261      -1.37729      -51.7081       51.7081       249.912       301.620    
  41  0.359213      -1.02384      -38.4384       38.4384       261.740       300.178    
  42  0.740344     -0.300640      -11.2870       11.2870       250.646       261.933    
  43  0.283211      -1.26156      -47.3633       47.3633       250.401       297.765    
  44  0.965119     -0.355039E-01  -1.33293       1.33293       226.033       227.366    
  45  0.389600     -0.942634      -35.3896       35.3896       244.431       279.821    
  46  0.598383     -0.513525      -19.2794       19.2794       250.289       269.568    
  47  0.631795     -0.459190      -17.2395       17.2395       244.735       261.975    
  48  0.997460     -0.254363E-02 -0.954964E-01  0.954964E-01   250.354       250.449    
  49  0.192532      -1.64749      -61.8524       61.8524       251.012       312.864    
  50  0.769348     -0.262212      -9.84429       9.84429       248.838       258.683    
  51  0.740745     -0.300099      -11.2667       11.2667       251.161       262.428    
  52  0.590587     -0.526639      -19.7718       19.7718       232.534       252.306    
  53  0.628310E-01  -2.76731      -103.894       103.894       214.200       318.094    
  54  0.515529     -0.662562      -24.8748       24.8748       273.435       298.309    
  55  0.306025      -1.18409      -44.4546       44.4546       253.404       297.859    
  56  0.686790     -0.375726      -14.1060       14.1060       209.714       223.820    
  57  0.357910      -1.02747      -38.5748       38.5748       262.721       301.296    
  58  0.267469      -1.31875      -49.5103       49.5103       196.829       246.339    
  59  0.410193     -0.891128      -33.4559       33.4559       220.149       253.605    
  60  0.490314     -0.712709      -26.7575       26.7575       250.810       277.567    
  61  0.395217     -0.928320      -34.8522       34.8522       251.224       286.077    
  62  0.641491E-01  -2.74655      -103.114       103.114       256.405       359.520    
  63  0.610173     -0.494012      -18.5468       18.5468       285.567       304.114    
  64  0.657523     -0.419276      -15.7410       15.7410       254.170       269.911    
  65  0.172961      -1.75469      -65.8768       65.8768       250.289       316.166    
  66  0.166793      -1.79100      -67.2400       67.2400       252.992       320.232    
  67  0.184181      -1.69184      -63.5172       63.5172       194.261       257.778    
  68  0.728490     -0.316781      -11.8930       11.8930       243.859       255.752    
  69  0.307541      -1.17915      -44.2691       44.2691       250.873       295.142    
  70  0.929000     -0.736468E-01  -2.76495       2.76495       236.903       239.668    
  71  0.111633      -2.19254      -82.3153       82.3153       223.887       306.202    
  72  0.920233     -0.831286E-01  -3.12092       3.12092       229.865       232.986    
  73  0.808772     -0.212238      -7.96813       7.96813       304.190       312.158    
loop,thermsimp(1:2)       49   64.1774       41.0490    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    159        188.17          0.86          1.12         23.61          0.10          0.05         25.74
Just calling func    0   0         25.74


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    188.17
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    37.5433               217
loop is:       49
neval is:      158
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       49      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    75.0866      0.500000    
T0,tstep,tfreq (these do not change):             72
current SAtemp,tstepnext are:    37.5433               217
loop is:       50
neval is:      158


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      217
neval,tstepnext:      158     217

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.317228E-01  -3.45072      -129.551       129.551       180.815       310.366    
   2  0.601445     -0.508421      -19.0878       19.0878       181.994       201.081    
   3  0.651191     -0.428952      -16.1043       16.1043       181.022       197.126    
   4  0.187303      -1.67503      -62.8860       62.8860       186.996       249.882    
   5  0.664603     -0.408566      -15.3389       15.3389       187.830       203.169    
   6  0.945236     -0.563208E-01  -2.11447       2.11447       202.861       204.976    
   7  0.865870     -0.144020      -5.40699       5.40699       206.991       212.398    
   8  0.674117     -0.394351      -14.8052       14.8052       194.808       209.614    
   9  0.959689E-01  -2.34373      -87.9914       87.9914       194.719       282.710    
  10  0.663337     -0.410472      -15.4105       15.4105       206.532       221.943    
  11  0.384854     -0.954891      -35.8498       35.8498       196.531       232.381    
  12  0.892338     -0.113910      -4.27657       4.27657       212.685       216.962    
  13  0.470837     -0.753243      -28.2792       28.2792       192.862       221.141    
  14  0.262618      -1.33706      -50.1975       50.1975       209.714       259.911    
  15  0.877143     -0.131085      -4.92135       4.92135       183.173       188.094    
  16  0.262102      -1.33902      -50.2713       50.2713       200.132       250.404    
  17  0.306130      -1.18375      -44.4418       44.4418       202.842       247.284    
  18  0.251844      -1.37895      -51.7702       51.7702       226.033       277.803    
  19  0.371147     -0.991157      -37.2113       37.2113       212.216       249.427    
  20  0.244393E-01  -3.71156      -139.344       139.344       196.339       335.683    
  21  0.550903     -0.596197      -22.3832       22.3832       201.825       224.208    
  22  0.509078     -0.675154      -25.3475       25.3475       229.865       255.213    
  23  0.741178     -0.299515      -11.2448       11.2448       176.615       187.860    
  24  0.585965     -0.534496      -20.0667       20.0667       205.251       225.318    
  25  0.602491     -0.506683      -19.0226       19.0226       217.956       236.979    
  26  0.532366     -0.630423      -23.6682       23.6682       236.903       260.571    
  27  0.264247      -1.33087      -49.9653       49.9653       208.927       258.892    
  28  0.468512     -0.758194      -28.4651       28.4651       207.128       235.593    
  29  0.338122      -1.08435      -40.7101       40.7101       196.829       237.539    
  30  0.815455     -0.204008      -7.65915       7.65915       201.853       209.512    
  31  0.126007      -2.07142      -77.7679       77.7679       183.049       260.817    
  32  0.391435     -0.937937      -35.2133       35.2133       191.170       226.383    
  33  0.477179     -0.739864      -27.7770       27.7770       250.354       278.131    
  34  0.926058     -0.768180E-01  -2.88400       2.88400       232.534       235.418    
  35  0.305992E-01  -3.48678      -130.905       130.905       220.149       351.055    
  36  0.142122      -1.95107      -73.2496       73.2496       189.837       263.087    
  37  0.934627E-01  -2.37019      -88.9849       88.9849       243.859       332.844    
  38  0.933240     -0.690924E-01  -2.59396       2.59396       194.261       196.855    
  39  0.551354     -0.595378      -22.3525       22.3525       248.838       271.191    
  40  0.167646      -1.78590      -67.0486       67.0486       248.098       315.147    
  41  0.657770     -0.418900      -15.7269       15.7269       250.646       266.372    
  42  0.937012     -0.650587E-01  -2.44252       2.44252       244.735       247.178    
  43  0.435130     -0.832109      -31.2401       31.2401       251.161       282.402    
  44  0.346278E-01  -3.36310      -126.262       126.262       246.946       373.208    
  45  0.529273     -0.636251      -23.8870       23.8870       212.336       236.223    
  46  0.543808     -0.609159      -22.8698       22.8698       250.289       273.159    
  47  0.476993     -0.740254      -27.7916       27.7916       254.170       281.962    
  48  0.602365     -0.506891      -19.0304       19.0304       221.702       240.732    
  49  0.429141     -0.845970      -31.7605       31.7605       250.810       282.570    
  50  0.161300E-01  -4.12707      -154.944       154.944       244.431       399.375    
  51  0.806405     -0.215169      -8.07817       8.07817       251.224       259.303    
  52  0.577848E-01  -2.85103      -107.037       107.037       250.289       357.326    
  53  0.992308     -0.772154E-02 -0.289892      0.289892       210.105       210.395    
  54  0.130687      -2.03495      -76.3989       76.3989       229.060       305.459    
  55  0.844072     -0.169518      -6.36425       6.36425       250.873       257.237    
  56  0.900890     -0.104372      -3.91849       3.91849       248.738       252.656    
  57  0.886923E-01  -2.42258      -90.9517       90.9517       250.401       341.353    
  58  0.675479     -0.392334      -14.7295       14.7295       253.404       268.134    
  59  0.486368     -0.720791      -27.0609       27.0609       273.435       300.495    
  60  0.868319E-01  -2.44378      -91.7476       91.7476       261.740       353.488    
  61  0.536051     -0.623527      -23.4093       23.4093       262.721       286.131    
  62  0.916344     -0.873636E-01  -3.27992       3.27992       249.912       253.191    
  63  0.264660E-01  -3.63190      -136.353       136.353       285.567       421.921    
  64  0.765006     -0.267871      -10.0568       10.0568       223.887       233.943    
  65  0.755495     -0.280383      -10.5265       10.5265       247.129       257.656    
  66  0.149819      -1.89833      -71.2694       71.2694       304.190       375.459    
  67  0.514409     -0.664736      -24.9564       24.9564       251.012       275.968    
  68  0.902494E-01  -2.40518      -90.2984       90.2984       250.289       340.587    
  69  0.837965     -0.176779      -6.63687       6.63687       214.200       220.837    
  70  0.833448     -0.182184      -6.83979       6.83979       252.992       259.832    
  71  0.830623     -0.185580      -6.96728       6.96728       254.890       261.857    
  72  0.391825     -0.936940      -35.1758       35.1758       197.890       233.066    
  73  0.561993     -0.576266      -21.6349       21.6349       188.172       209.807    
loop,thermsimp(1:2)       50   129.551       19.0878    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    160        191.57          0.86          1.12         23.57          0.18          0.05         25.77
Just calling func    0   0         25.77


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    161        231.44          0.86          1.11         23.83          0.02          0.05         25.87
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  160    231.44        1.564     -1.443      1.564     -102.6      1.047    
                      0.3816      1.763     -99.70      3.569     0.3388E-01
                       1.933     -1.529      4.289      0.000     -5.000    
                      -1.182      0.000      0.000      0.000     -1.221    

                      -2.500     0.1009E+05  8320.      0.000      0.000    
                     -0.5672     -6.572     -4.254     -7.974      3.446    
                      -14.37     -3.153      2002.      0.000      2796.    

                      0.1214E+05 0.1120E+05 -327.8     0.1700E+05  3740.    
                       4806.     0.1717     0.5166E-02  0.000    -0.4077    
                     -0.2802E-01-0.1207    -0.1185    -0.2008    -0.4998E-01

                      -1.475    -0.2271E-02  0.000     0.2294E-01 0.1019E-01
                      0.8541E-01-0.5184E-02 0.5620E-01-0.1064     0.1070    
                     -0.7262E-01-0.5291E-02-0.1152    -0.5171      0.000    

                      -1.084     -1.558     -2.346     -2.759    -0.1210    
                      0.3483      9.225      9.128    -0.1798E+05 -4.000    
                     -0.2489    -0.3693      9.450      8.404    -0.2084E+05

                      -4.000     0.1398    -0.4796      8.866      9.017    
                     -0.3724E+05 -7.000    -0.3119    -0.6441      9.482    
                       8.494    -0.2351E+05 -7.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    191.57
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    37.5433               217
loop is:       50
neval is:      160
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       50      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    75.0866      0.500000    
T0,tstep,tfreq (these do not change):             72
current SAtemp,tstepnext are:    37.5433               217
loop is:       51
neval is:      160


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      217
neval,tstepnext:      160     217

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.929295     -0.733287E-01  -2.75300       2.75300       176.615       179.368    
   2  0.669511     -0.401208      -15.0627       15.0627       183.173       198.236    
   3  0.863337E-01  -2.44954      -91.9637       91.9637       194.261       286.225    
   4  0.279945      -1.27316      -47.7987       47.7987       181.022       228.820    
   5  0.832640     -0.183154      -6.87621       6.87621       181.994       188.870    
   6  0.848933     -0.163775      -6.14867       6.14867       187.830       193.979    
   7  0.141794      -1.95338      -73.3365       73.3365       202.861       276.198    
   8  0.208764      -1.56655      -58.8136       58.8136       201.853       260.666    
   9  0.755787     -0.279996      -10.5120       10.5120       194.808       205.320    
  10  0.177416      -1.72926      -64.9221       64.9221       188.172       253.094    
  11  0.405148     -0.903503      -33.9205       33.9205       210.105       244.026    
  12  0.640380     -0.445693      -16.7328       16.7328       206.991       223.724    
  13  0.548060     -0.601370      -22.5774       22.5774       212.685       235.263    
  14  0.773287     -0.257105      -9.65257       9.65257       214.200       223.853    
  15  0.180768      -1.71054      -64.2193       64.2193       192.862       257.081    
  16  0.135846      -1.99624      -74.9453       74.9453       206.532       281.478    
  17  0.601016     -0.509133      -19.1146       19.1146       201.825       220.939    
  18  0.302263      -1.19646      -44.9190       44.9190       205.251       250.170    
  19  0.189428      -1.66374      -62.4625       62.4625       191.170       253.633    
  20  0.737158     -0.304953      -11.4489       11.4489       196.531       207.980    
  21  0.790680     -0.234862      -8.81749       8.81749       197.890       206.708    
  22  0.177192E-01  -4.03310      -151.416       151.416       223.887       375.303    
  23  0.236042      -1.44375      -54.2030       54.2030       232.534       286.737    
  24  0.459229     -0.778206      -29.2164       29.2164       207.128       236.345    
  25  0.586479E-01  -2.83620      -106.480       106.480       212.336       318.816    
  26  0.263766      -1.33269      -50.0337       50.0337       217.956       267.990    
  27  0.942550     -0.591663E-01  -2.22130       2.22130       196.829       199.050    
  28  0.106855      -2.23628      -83.9573       83.9573       221.702       305.659    
  29  0.710700     -0.341505      -12.8212       12.8212       244.735       257.556    
  30  0.207109E-01  -3.87709      -145.559       145.559       202.842       348.401    
  31  0.901203     -0.104025      -3.90544       3.90544       212.216       216.121    
  32  0.949751     -0.515555E-01  -1.93557       1.93557       186.996       188.931    
  33  0.343487      -1.06861      -40.1191       40.1191       200.132       240.251    
  34  0.875043     -0.133483      -5.01138       5.01138       248.738       253.749    
  35  0.122447E-01  -4.40266      -165.291       165.291       249.912       415.202    
  36  0.820650     -0.197659      -7.42077       7.42077       229.865       237.286    
  37  0.748866     -0.289195      -10.8573       10.8573       250.873       261.730    
  38  0.594525     -0.519992      -19.5222       19.5222       247.129       266.652    
  39  0.927863E-01  -2.37746      -89.2576       89.2576       208.927       298.185    
  40  0.631335     -0.459918      -17.2669       17.2669       251.224       268.491    
  41  0.282620      -1.26365      -47.4417       47.4417       252.992       300.434    
  42  0.707811     -0.345578      -12.9741       12.9741       209.714       222.688    
  43  0.930463     -0.720730E-01  -2.70586       2.70586       236.903       239.609    
  44  0.988563     -0.115032E-01 -0.431870      0.431870       183.049       183.481    
  45  0.869439     -0.139907      -5.25258       5.25258       254.890       260.143    
  46  0.693921     -0.365397      -13.7182       13.7182       189.837       203.555    
  47  0.731753     -0.312312      -11.7252       11.7252       250.646       262.371    
  48  0.848712     -0.164035      -6.15842       6.15842       253.404       259.562    
  49  0.174447      -1.74613      -65.5557       65.5557       248.838       314.394    
  50  0.313212      -1.16087      -43.5831       43.5831       250.289       293.872    
  51  0.880789     -0.126937      -4.76563       4.76563       251.012       255.778    
  52  0.441967     -0.816520      -30.6549       30.6549       226.033       256.688    
  53  0.624106     -0.471435      -17.6992       17.6992       250.354       268.053    
  54  0.447426     -0.804244      -30.1940       30.1940       254.170       284.364    
  55  0.681696     -0.383171      -14.3855       14.3855       251.161       265.547    
  56  0.336384      -1.08950      -40.9035       40.9035       250.810       291.713    
  57  0.197044      -1.62433      -60.9826       60.9826       194.719       255.701    
  58  0.186834E-01  -3.98012      -149.427       149.427       262.721       412.148    
  59  0.467980     -0.759329      -28.5077       28.5077       273.435       301.942    
  60  0.607270     -0.498782      -18.7259       18.7259       229.060       247.786    
  61  0.299128      -1.20689      -45.3105       45.3105       180.815       226.125    
  62  0.166354      -1.79364      -67.3390       67.3390       248.098       315.437    
  63  0.542834     -0.610952      -22.9371       22.9371       243.859       266.796    
  64  0.811476     -0.208901      -7.84283       7.84283       196.339       204.182    
  65  0.520065     -0.653802      -24.5459       24.5459       250.289       274.835    
  66  0.955839     -0.451662E-01  -1.69569       1.69569       250.401       252.097    
  67  0.729602     -0.315256      -11.8357       11.8357       220.149       231.985    
  68  0.792398     -0.232691      -8.73599       8.73599       261.740       270.476    
  69  0.803787     -0.218421      -8.20023       8.20023       250.289       258.489    
  70  0.812756     -0.207324      -7.78365       7.78365       246.946       254.730    
  71  0.189528      -1.66322      -62.4428       62.4428       304.190       366.633    
  72  0.898459     -0.107074      -4.01991       4.01991       244.431       248.451    
  73  0.676452     -0.390894      -14.6755       14.6755       191.566       206.242    
loop,thermsimp(1:2)       51   2.75300       15.0627    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    162        186.49          0.87          1.12         23.84          0.01          0.05         25.88
Just calling func    0   0         25.88


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    186.49
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    37.5433               217
loop is:       51
neval is:      161
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       51      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    75.0866      0.500000    
T0,tstep,tfreq (these do not change):             72
current SAtemp,tstepnext are:    37.5433               217
loop is:       52
neval is:      161


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      217
neval,tstepnext:      161     217

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.658032     -0.418502      -15.7120       15.7120       176.615       192.327    
   2  0.385391     -0.953496      -35.7974       35.7974       183.049       218.846    
   3  0.323679      -1.12800      -42.3489       42.3489       181.994       224.342    
   4  0.402516E-01  -3.21260      -120.612       120.612       186.996       307.607    
   5  0.866022     -0.143846      -5.40044       5.40044       187.830       193.231    
   6  0.560147     -0.579555      -21.7584       21.7584       183.173       204.931    
   7  0.389098     -0.943925      -35.4381       35.4381       196.829       232.267    
   8  0.470755     -0.753417      -28.2857       28.2857       189.837       218.123    
   9  0.794299     -0.230295      -8.64604       8.64604       196.339       204.985    
  10  0.897132     -0.108553      -4.07543       4.07543       194.808       198.884    
  11  0.359474      -1.02311      -38.4111       38.4111       191.566       229.977    
  12  0.604694     -0.503032      -18.8855       18.8855       197.890       216.776    
  13  0.101554      -2.28717      -85.8678       85.8678       196.531       282.399    
  14  0.274480      -1.29288      -48.5388       48.5388       212.216       260.755    
  15  0.916086     -0.876445E-01  -3.29046       3.29046       201.825       205.115    
  16  0.820070E-01  -2.50095      -93.8939       93.8939       209.714       303.608    
  17  0.975902     -0.243929E-01 -0.915791      0.915791       206.991       207.907    
  18  0.131665      -2.02750      -76.1190       76.1190       214.200       290.319    
  19  0.751313     -0.285933      -10.7349       10.7349       180.815       191.550    
  20  0.775324     -0.254475      -9.55382       9.55382       181.022       190.576    
  21  0.237000      -1.43969      -54.0509       54.0509       220.149       274.200    
  22  0.113641      -2.17471      -81.6457       81.6457       212.685       294.331    
  23  0.762281     -0.271440      -10.1907       10.1907       207.128       217.319    
  24  0.783730     -0.243690      -9.14894       9.14894       229.865       239.014    
  25  0.492891     -0.707468      -26.5607       26.5607       236.903       263.464    
  26  0.471904     -0.750980      -28.1943       28.1943       200.132       228.327    
  27  0.855781     -0.155740      -5.84701       5.84701       210.105       215.952    
  28  0.636473     -0.451814      -16.9626       16.9626       229.060       246.023    
  29  0.433340     -0.836232      -31.3949       31.3949       244.431       275.826    
  30  0.482236     -0.729321      -27.3811       27.3811       205.251       232.633    
  31  0.855143E-01  -2.45907      -92.3217       92.3217       250.401       342.723    
  32  0.916579     -0.871071E-01  -3.27029       3.27029       188.172       191.443    
  33  0.232519      -1.45878      -54.7676       54.7676       191.170       245.938    
  34  0.283977      -1.25886      -47.2618       47.2618       248.738       296.000    
  35  0.401228E-01  -3.21581      -120.732       120.732       246.946       367.679    
  36  0.235231      -1.44719      -54.3322       54.3322       194.719       249.051    
  37  0.233426      -1.45489      -54.6213       54.6213       251.012       305.633    
  38  0.903594     -0.101376      -3.80598       3.80598       226.033       229.839    
  39  0.857571     -0.153651      -5.76856       5.76856       192.862       198.630    
  40  0.444085     -0.811739      -30.4754       30.4754       244.735       275.211    
  41  0.151055      -1.89011      -70.9611       70.9611       250.289       321.250    
  42  0.745694     -0.293440      -11.0167       11.0167       253.404       264.421    
  43  0.470647E-01  -3.05623      -114.741       114.741       254.890       369.631    
  44  0.344459      -1.06578      -40.0129       40.0129       201.853       241.866    
  45  0.592738     -0.523004      -19.6353       19.6353       250.873       270.508    
  46  0.754292     -0.281975      -10.5863       10.5863       250.646       261.232    
  47  0.162950      -1.81431      -68.1153       68.1153       251.161       319.277    
  48  0.939100     -0.628333E-01  -2.35897       2.35897       247.129       249.488    
  49  0.966845     -0.337175E-01  -1.26587       1.26587       243.859       245.125    
  50  0.287323      -1.24715      -46.8220       46.8220       217.956       264.778    
  51  0.835081     -0.180227      -6.76630       6.76630       250.354       257.120    
  52  0.836052     -0.179064      -6.72265       6.72265       251.224       257.947    
  53  0.382321     -0.961495      -36.0977       36.0977       261.740       297.838    
  54  0.873869     -0.134824      -5.06175       5.06175       250.289       255.350    
  55  0.169635      -1.77411      -66.6058       66.6058       202.861       269.467    
  56  0.511680     -0.670055      -25.1561       25.1561       206.532       231.688    
  57  0.687848     -0.374188      -14.0482       14.0482       254.170       268.219    
  58  0.659885     -0.415689      -15.6063       15.6063       194.261       209.867    
  59  0.615967     -0.484562      -18.1920       18.1920       232.534       250.727    
  60  0.600029     -0.510778      -19.1763       19.1763       250.810       269.986    
  61  0.166513      -1.79268      -67.3032       67.3032       250.289       317.592    
  62  0.730640     -0.313835      -11.7824       11.7824       208.927       220.709    
  63  0.168194      -1.78264      -66.9262       66.9262       252.992       319.919    
  64  0.562652E-01  -2.87768      -108.038       108.038       273.435       381.472    
  65  0.787921     -0.238357      -8.94870       8.94870       221.702       230.650    
  66  0.937052     -0.650163E-01  -2.44093       2.44093       248.838       251.279    
  67  0.548780     -0.600057      -22.5281       22.5281       248.098       270.627    
  68  0.893892     -0.112170      -4.21123       4.21123       212.336       216.547    
  69  0.192558E-01  -3.94994      -148.294       148.294       202.842       351.136    
  70  0.818438     -0.200358      -7.52210       7.52210       304.190       311.712    
  71  0.621039     -0.476361      -17.8842       17.8842       223.887       241.771    
  72  0.868045     -0.141511      -5.31280       5.31280       262.721       268.034    
  73  0.579309     -0.545920      -20.4956       20.4956       186.491       206.987    
loop,thermsimp(1:2)       52   15.7120       35.7974    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    163        188.76          0.86          1.12         23.67          0.09          0.04         25.78
Just calling func    0   0         25.78


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    164        223.26          0.85          1.12         23.57          0.21          0.05         25.80
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    188.76
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    37.5433               217
loop is:       52
neval is:      163
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       52      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    75.0866      0.500000    
T0,tstep,tfreq (these do not change):             72
current SAtemp,tstepnext are:    37.5433               217
loop is:       53
neval is:      163


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      217
neval,tstepnext:      163     217

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.581749     -0.541717      -20.3378       20.3378       181.022       201.360    
   2  0.307993      -1.17768      -44.2139       44.2139       188.172       232.386    
   3  0.551684     -0.594779      -22.3300       22.3300       180.815       203.145    
   4  0.969976     -0.304835E-01  -1.14445       1.14445       176.615       177.759    
   5  0.401714     -0.912015      -34.2401       34.2401       187.830       222.070    
   6  0.336211      -1.09002      -40.9228       40.9228       192.862       233.784    
   7  0.649191     -0.432028      -16.2197       16.2197       194.808       211.028    
   8  0.426986     -0.851005      -31.9495       31.9495       183.173       215.122    
   9  0.479997     -0.733976      -27.5559       27.5559       196.339       223.895    
  10  0.441527     -0.817516      -30.6923       30.6923       201.825       232.517    
  11  0.218988      -1.51874      -57.0185       57.0185       186.491       243.510    
  12  0.935549     -0.666221E-01  -2.50121       2.50121       206.991       209.493    
  13  0.159996      -1.83261      -68.8022       68.8022       194.261       263.063    
  14  0.486870     -0.719759      -27.0221       27.0221       210.105       237.127    
  15  0.835520     -0.179701      -6.74655       6.74655       212.336       219.082    
  16  0.643759     -0.440431      -16.5352       16.5352       197.890       214.426    
  17  0.177188      -1.73054      -64.9703       64.9703       207.128       272.098    
  18  0.408356     -0.895617      -33.6244       33.6244       189.837       223.461    
  19  0.463768     -0.768371      -28.8472       28.8472       183.049       211.896    
  20  0.616820     -0.483178      -18.1401       18.1401       208.927       227.067    
  21  0.377083     -0.975289      -36.6156       36.6156       181.994       218.609    
  22  0.278016      -1.28008      -48.0583       48.0583       200.132       248.191    
  23  0.746435     -0.292446      -10.9794       10.9794       226.033       237.012    
  24  0.872234     -0.136697      -5.13206       5.13206       191.566       196.698    
  25  0.887073E-01  -2.42241      -90.9454       90.9454       221.702       312.647    
  26  0.124913      -2.08014      -78.0953       78.0953       206.532       284.628    
  27  0.918160     -0.853835E-01  -3.20558       3.20558       196.829       200.034    
  28  0.924603     -0.783912E-01  -2.94307       2.94307       205.251       208.195    
  29  0.863214     -0.147092      -5.52234       5.52234       229.865       235.387    
  30  0.823499E-02  -4.79936      -180.184       180.184       223.887       404.071    
  31  0.548113     -0.601275      -22.5738       22.5738       201.853       224.427    
  32  0.800553     -0.222452      -8.35158       8.35158       243.859       252.210    
  33  0.180829      -1.71020      -64.2066       64.2066       191.170       255.377    
  34  0.968975E-01  -2.33410      -87.6299       87.6299       229.060       316.690    
  35  0.749847     -0.287886      -10.8082       10.8082       194.719       205.527    
  36  0.902028     -0.103110      -3.87109       3.87109       247.129       251.001    
  37  0.312083      -1.16449      -43.7187       43.7187       232.534       276.253    
  38  0.472691     -0.749313      -28.1317       28.1317       248.838       276.970    
  39  0.970346     -0.301026E-01  -1.13015       1.13015       250.289       251.419    
  40  0.485853     -0.721850      -27.1006       27.1006       250.354       277.454    
  41  0.604658     -0.503092      -18.8877       18.8877       251.224       270.112    
  42  0.172238      -1.75888      -66.0342       66.0342       212.216       278.250    
  43  0.359079E-01  -3.32680      -124.899       124.899       250.646       375.545    
  44  0.464923     -0.765884      -28.7538       28.7538       236.903       265.657    
  45  0.293512      -1.22584      -46.0220       46.0220       253.404       299.426    
  46  0.572788     -0.557239      -20.9206       20.9206       217.956       238.877    
  47  0.931713     -0.707300E-01  -2.65544       2.65544       262.721       265.377    
  48  0.983012     -0.171340E-01 -0.643268      0.643268       254.170       254.814    
  49  0.572194     -0.558278      -20.9596       20.9596       202.861       223.821    
  50  0.272189      -1.30126      -48.8536       48.8536       250.810       299.663    
  51  0.521081     -0.651849      -24.4726       24.4726       250.873       275.345    
  52  0.560075     -0.579685      -21.7633       21.7633       248.098       269.862    
  53  0.442251     -0.815877      -30.6307       30.6307       220.149       250.780    
  54  0.541873     -0.612723      -23.0037       23.0037       244.735       267.739    
  55  0.619019     -0.479619      -18.0065       18.0065       244.431       262.438    
  56  0.554460     -0.589760      -22.1416       22.1416       196.531       218.673    
  57  0.942853     -0.588454E-01  -2.20925       2.20925       214.200       216.410    
  58  0.289656E-01  -3.54165      -132.965       132.965       212.685       345.650    
  59  0.420166     -0.867105      -32.5540       32.5540       248.738       281.292    
  60  0.304886      -1.18782      -44.5946       44.5946       261.740       306.335    
  61  0.799970     -0.223182      -8.37898       8.37898       209.714       218.093    
  62  0.330194      -1.10808      -41.6008       41.6008       251.012       292.613    
  63  0.193095      -1.64457      -61.7426       61.7426       186.996       248.738    
  64  0.151812      -1.88511      -70.7733       70.7733       304.190       374.963    
  65  0.463265     -0.769456      -28.8879       28.8879       250.289       279.177    
  66  0.468691     -0.757811      -28.4507       28.4507       251.161       279.612    
  67  0.442877     -0.814463      -30.5776       30.5776       252.992       283.570    
  68  0.652140     -0.427496      -16.0496       16.0496       250.289       266.338    
  69  0.258134      -1.35428      -50.8441       50.8441       250.401       301.246    
  70  0.530519E-01  -2.93648      -110.245       110.245       202.842       313.087    
  71  0.479897     -0.734184      -27.5637       27.5637       246.946       274.510    
  72  0.266463      -1.32252      -49.6517       49.6517       254.890       304.542    
  73  0.380965     -0.965047      -36.2311       36.2311       188.759       224.990    
loop,thermsimp(1:2)       53   20.3378       44.2139    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    165        182.34          0.86          1.12         23.65          0.10          0.05         25.77
Just calling func    0   0         25.77


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    166        192.88          0.85          1.11         23.54          0.21          0.05         25.75
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    182.34
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    37.5433               217
loop is:       53
neval is:      165
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       53      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    75.0866      0.500000    
T0,tstep,tfreq (these do not change):             72
current SAtemp,tstepnext are:    37.5433               217
loop is:       54
neval is:      165


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      217
neval,tstepnext:      165     217

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.565968     -0.569218      -21.3703       21.3703       176.615       197.985    
   2  0.698829     -0.358349      -13.4536       13.4536       191.566       205.020    
   3  0.550231     -0.597418      -22.4290       22.4290       196.829       219.258    
   4  0.844966     -0.168459      -6.32450       6.32450       181.022       187.346    
   5  0.139804      -1.96751      -73.8669       73.8669       180.815       254.682    
   6  0.119451      -2.12485      -79.7739       79.7739       194.719       274.493    
   7  0.474112     -0.746312      -28.0190       28.0190       205.251       233.270    
   8  0.293024      -1.22750      -46.0844       46.0844       206.991       253.076    
   9  0.760137     -0.274256      -10.2965       10.2965       194.808       205.105    
  10  0.216376      -1.53074      -57.4689       57.4689       183.049       240.518    
  11  0.837069     -0.177849      -6.67703       6.67703       197.890       204.568    
  12  0.969258     -0.312245E-01  -1.17227       1.17227       183.173       184.345    
  13  0.335918      -1.09089      -40.9556       40.9556       214.200       255.156    
  14  0.966643     -0.339265E-01  -1.27371       1.27371       209.714       210.987    
  15  0.723887     -0.323119      -12.1310       12.1310       181.994       194.125    
  16  0.459929E-01  -3.07927      -115.606       115.606       196.531       312.137    
  17  0.536724     -0.622271      -23.3621       23.3621       212.336       235.698    
  18  0.432574     -0.838001      -31.4613       31.4613       187.830       219.292    
  19  0.160308      -1.83066      -68.7290       68.7290       189.837       258.566    
  20  0.885158     -0.121989      -4.57987       4.57987       202.861       207.441    
  21  0.753783     -0.282650      -10.6116       10.6116       196.339       206.950    
  22  0.135562      -1.99832      -75.0237       75.0237       201.853       276.876    
  23  0.817964     -0.200937      -7.54383       7.54383       188.759       196.303    
  24  0.286617      -1.24961      -46.9145       46.9145       208.927       255.841    
  25  0.319126      -1.14217      -42.8808       42.8808       188.172       231.053    
  26  0.104479E-01  -4.56135      -171.248       171.248       201.825       373.073    
  27  0.671407     -0.398379      -14.9565       14.9565       192.862       207.818    
  28  0.782955     -0.244680      -9.18611       9.18611       229.865       239.051    
  29  0.186689      -1.67831      -63.0094       63.0094       226.033       289.042    
  30  0.462519     -0.771067      -28.9484       28.9484       210.105       239.054    
  31  0.203171      -1.59371      -59.8330       59.8330       217.956       277.789    
  32  0.851762E-01  -2.46303      -92.4704       92.4704       186.491       278.962    
  33  0.702824     -0.352649      -13.2396       13.2396       200.132       213.372    
  34  0.747923     -0.290456      -10.9047       10.9047       186.996       197.900    
  35  0.224450      -1.49410      -56.0936       56.0936       220.149       276.243    
  36  0.243563E-02  -6.01755      -225.919       225.919       247.129       473.048    
  37  0.160790      -1.82766      -68.6163       68.6163       250.289       318.905    
  38  0.880431     -0.127343      -4.78089       4.78089       243.859       248.640    
  39  0.507306     -0.678640      -25.4784       25.4784       254.170       279.649    
  40  0.266019      -1.32419      -49.7144       49.7144       191.170       240.884    
  41  0.310751      -1.16876      -43.8792       43.8792       244.431       288.311    
  42  0.945006     -0.565640E-01  -2.12360       2.12360       194.261       196.384    
  43  0.265699E-01  -3.62797      -136.206       136.206       262.721       398.927    
  44  0.652842     -0.426420      -16.0092       16.0092       236.903       252.912    
  45  0.799409     -0.223882      -8.40528       8.40528       250.289       258.694    
  46  0.543529     -0.609672      -22.8891       22.8891       244.735       267.624    
  47  0.361947      -1.01626      -38.1537       38.1537       248.098       286.252    
  48  0.398721     -0.919492      -34.5208       34.5208       251.224       285.745    
  49  0.349489      -1.05128      -39.4686       39.4686       207.128       246.597    
  50  0.948739     -0.526212E-01  -1.97558       1.97558       246.946       248.922    
  51  0.346176      -1.06081      -39.8262       39.8262       250.873       290.699    
  52  0.678244     -0.388248      -14.5761       14.5761       232.534       247.111    
  53  0.858518     -0.152547      -5.72714       5.72714       248.838       254.566    
  54  0.835860E-01  -2.48188      -93.1779       93.1779       250.354       343.532    
  55  0.762568     -0.271063      -10.1766       10.1766       212.216       222.392    
  56  0.273927      -1.29489      -48.6146       48.6146       250.289       298.903    
  57  0.729557     -0.315318      -11.8381       11.8381       251.161       263.000    
  58  0.320381      -1.13825      -42.7335       42.7335       248.738       291.471    
  59  0.818134     -0.200729      -7.53602       7.53602       252.992       260.528    
  60  0.639548     -0.446993      -16.7816       16.7816       206.532       223.314    
  61  0.976107     -0.241828E-01 -0.907902      0.907902       251.012       251.920    
  62  0.232128      -1.46046      -54.8307       54.8307       253.404       308.235    
  63  0.215412      -1.53520      -57.6367       57.6367       250.810       308.446    
  64  0.770868     -0.260238      -9.77021       9.77021       250.401       260.172    
  65  0.147419E-01  -4.21706      -158.322       158.322       254.890       413.212    
  66  0.102273      -2.28010      -85.6027       85.6027       261.740       347.343    
  67  0.625951     -0.468483      -17.5884       17.5884       221.702       239.290    
  68  0.176925      -1.73203      -65.0260       65.0260       202.842       267.868    
  69  0.638162E-02  -5.05433      -189.756       189.756       229.060       418.816    
  70  0.301443      -1.19917      -45.0209       45.0209       212.685       257.706    
  71  0.586975     -0.532773      -20.0021       20.0021       304.190       324.192    
  72  0.595449     -0.518439      -19.4639       19.4639       250.646       270.109    
  73  0.189180      -1.66506      -62.5118       62.5118       182.339       244.850    
loop,thermsimp(1:2)       54   21.3703       13.4536    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    167        183.52          0.86          1.12         23.62          0.18          0.05         25.83
Just calling func    0   0         25.83


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    168        182.99          0.86          1.12         23.60          0.22          0.05         25.85
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    182.99
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    37.5433               217
loop is:       54
neval is:      167
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       54      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    75.0866      0.500000    
T0,tstep,tfreq (these do not change):             72
current SAtemp,tstepnext are:    37.5433               217
loop is:       55
neval is:      167


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      217
neval,tstepnext:      167     217

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.194359      -1.63805      -61.4977       61.4977       183.173       244.671    
   2  0.875287     -0.133204      -5.00090       5.00090       181.022       186.023    
   3  0.103612      -2.26710      -85.1143       85.1143       181.994       267.108    
   4  0.159072      -1.83840      -69.0196       69.0196       188.759       257.778    
   5  0.118738      -2.13084      -79.9987       79.9987       194.261       274.260    
   6  0.294105      -1.22382      -45.9462       45.9462       186.996       232.942    
   7  0.967643     -0.328919E-01  -1.23487       1.23487       176.615       177.850    
   8  0.675183     -0.392772      -14.7460       14.7460       197.890       212.636    
   9  0.170112      -1.77130      -66.5004       66.5004       191.566       258.066    
  10  0.990992     -0.904902E-02 -0.339730      0.339730       194.808       195.148    
  11  0.198513      -1.61690      -60.7039       60.7039       196.339       257.043    
  12  0.404817E-01  -3.20690      -120.398       120.398       202.861       323.259    
  13  0.834933E-01  -2.48299      -93.2196       93.2196       192.862       286.081    
  14  0.458935     -0.778848      -29.2405       29.2405       209.714       238.954    
  15  0.929311     -0.733118E-01  -2.75237       2.75237       200.132       202.885    
  16  0.593071     -0.522440      -19.6141       19.6141       196.829       216.443    
  17  0.963359E-01  -2.33991      -87.8481       87.8481       187.830       275.679    
  18  0.383119E-01  -3.26200      -122.466       122.466       212.216       334.682    
  19  0.841843     -0.172161      -6.46351       6.46351       206.532       212.996    
  20  0.874261     -0.134376      -5.04494       5.04494       188.172       193.217    
  21  0.706443     -0.347513      -13.0468       13.0468       205.251       218.298    
  22  0.423649E-01  -3.16143      -118.691       118.691       212.336       331.026    
  23  0.904835     -0.100003      -3.75444       3.75444       229.865       233.619    
  24  0.728800     -0.316356      -11.8771       11.8771       210.105       221.982    
  25  0.764304     -0.268790      -10.0913       10.0913       221.702       231.793    
  26  0.578519     -0.547284      -20.5468       20.5468       183.049       203.595    
  27  0.321737      -1.13402      -42.5749       42.5749       191.170       233.745    
  28  0.592944     -0.522656      -19.6222       19.6222       182.339       201.961    
  29  0.159596      -1.83511      -68.8962       68.8962       207.128       276.024    
  30  0.797332     -0.226484      -8.50295       8.50295       232.534       241.037    
  31  0.263979      -1.33189      -50.0034       50.0034       243.859       293.862    
  32  0.449355     -0.799942      -30.0325       30.0325       246.946       276.979    
  33  0.859901     -0.150938      -5.66670       5.66670       251.012       256.679    
  34  0.730093     -0.314584      -11.8105       11.8105       236.903       248.714    
  35  0.484666     -0.724295      -27.1924       27.1924       206.991       234.184    
  36  0.180217      -1.71359      -64.3339       64.3339       248.838       313.172    
  37  0.857397     -0.153854      -5.77620       5.77620       180.815       186.591    
  38  0.502370     -0.688418      -25.8455       25.8455       214.200       240.046    
  39  0.245408      -1.40484      -52.7422       52.7422       208.927       261.669    
  40  0.134540      -2.00590      -75.3079       75.3079       212.685       287.993    
  41  0.468137     -0.758995      -28.4952       28.4952       189.837       218.332    
  42  0.864548E-01  -2.44813      -91.9110       91.9110       250.289       342.200    
  43  0.178791      -1.72154      -64.6323       64.6323       250.401       315.034    
  44  0.690351     -0.370555      -13.9118       13.9118       252.992       266.904    
  45  0.731648     -0.312455      -11.7306       11.7306       251.161       262.892    
  46  0.857623     -0.153591      -5.76630       5.76630       244.735       250.502    
  47  0.754956     -0.281095      -10.5532       10.5532       202.842       213.395    
  48  0.355557      -1.03407      -38.8224       38.8224       250.646       289.468    
  49  0.200964      -1.60463      -60.2432       60.2432       194.719       254.962    
  50  0.243499      -1.41264      -53.0353       53.0353       220.149       273.185    
  51  0.796288     -0.227794      -8.55215       8.55215       201.853       210.405    
  52  0.256937      -1.35892      -51.0185       51.0185       217.956       268.975    
  53  0.591760     -0.524655      -19.6973       19.6973       186.491       206.188    
  54  0.799227     -0.224110      -8.41382       8.41382       254.170       262.584    
  55  0.115295E-01  -4.46285      -167.550       167.550       251.224       418.774    
  56  0.559205     -0.581239      -21.8216       21.8216       248.098       269.920    
  57  0.742198     -0.298139      -11.1931       11.1931       244.431       255.625    
  58  0.543157     -0.610356      -22.9148       22.9148       226.033       248.948    
  59  0.100933      -2.29330      -86.0980       86.0980       250.873       336.971    
  60  0.201228      -1.60332      -60.1938       60.1938       248.738       308.932    
  61  0.602159E-01  -2.80982      -105.490       105.490       250.289       355.779    
  62  0.107777      -2.22769      -83.6350       83.6350       253.404       337.039    
  63  0.131787E-01  -4.32915      -162.531       162.531       250.810       413.341    
  64  0.756826     -0.278622      -10.4604       10.4604       196.531       206.991    
  65  0.617120     -0.482691      -18.1218       18.1218       250.289       268.411    
  66  0.885328     -0.121797      -4.57266       4.57266       304.190       308.763    
  67  0.617093     -0.482736      -18.1235       18.1235       250.354       268.477    
  68  0.654899     -0.423274      -15.8911       15.8911       261.740       277.631    
  69  0.847740     -0.165181      -6.20143       6.20143       201.825       208.026    
  70  0.121451E-01  -4.41083      -165.597       165.597       262.721       428.318    
  71  0.861782     -0.148752      -5.58466       5.58466       254.890       260.475    
  72  0.786555     -0.240093      -9.01387       9.01387       229.060       238.074    
  73  0.634771     -0.454491      -17.0631       17.0631       182.994       200.057    
loop,thermsimp(1:2)       55   61.4977       5.00090    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    169        183.84          0.87          1.11         23.76          0.00          0.05         25.79
Just calling func    0   0         25.79


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    170        197.44          0.86          1.12         23.66          0.12          0.04         25.80
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    183.84
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    37.5433               217
loop is:       55
neval is:      169
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       55      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    75.0866      0.500000    
T0,tstep,tfreq (these do not change):             72
current SAtemp,tstepnext are:    37.5433               217
loop is:       56
neval is:      169


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      217
neval,tstepnext:      169     217

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.141299      -1.95688      -73.4677       73.4677       176.615       250.083    
   2  0.197548      -1.62177      -60.8868       60.8868       181.022       241.909    
   3  0.774000     -0.256183      -9.61795       9.61795       180.815       190.433    
   4  0.170284      -1.77029      -66.4625       66.4625       188.172       254.635    
   5  0.250636      -1.38376      -51.9508       51.9508       194.808       246.759    
   6  0.907951     -0.965652E-01  -3.62538       3.62538       182.994       186.620    
   7  0.611678     -0.491549      -18.4544       18.4544       182.339       200.793    
   8  0.735945E-02  -4.91177      -184.404       184.404       200.132       384.536    
   9  0.309131      -1.17399      -44.0755       44.0755       183.049       227.124    
  10  0.577854     -0.548434      -20.5900       20.5900       186.491       207.081    
  11  0.931529     -0.709274E-01  -2.66285       2.66285       196.531       199.194    
  12  0.665703     -0.406912      -15.2768       15.2768       201.825       217.102    
  13  0.585695     -0.534955      -20.0840       20.0840       201.853       221.937    
  14  0.295001      -1.22078      -45.8320       45.8320       197.890       243.722    
  15  0.317712E-01  -3.44920      -129.494       129.494       206.532       336.027    
  16  0.222963      -1.50075      -56.3431       56.3431       202.842       259.185    
  17  0.325931      -1.12107      -42.0887       42.0887       196.829       238.917    
  18  0.785098     -0.241947      -9.08348       9.08348       205.251       214.335    
  19  0.550467     -0.596988      -22.4129       22.4129       189.837       212.250    
  20  0.780222     -0.248176      -9.31736       9.31736       210.105       219.423    
  21  0.130712      -2.03476      -76.3915       76.3915       221.702       298.093    
  22  0.873397     -0.135365      -5.08204       5.08204       186.996       192.078    
  23  0.366975      -1.00246      -37.6357       37.6357       229.865       267.501    
  24  0.813244     -0.206724      -7.76110       7.76110       191.170       198.931    
  25  0.782660E-01  -2.54764      -95.6469       95.6469       206.991       302.638    
  26  0.700327     -0.356208      -13.3732       13.3732       229.060       242.433    
  27  0.437766     -0.826071      -31.0134       31.0134       209.714       240.727    
  28  0.508966E-01  -2.97796      -111.802       111.802       214.200       326.003    
  29  0.276850      -1.28428      -48.2160       48.2160       232.534       280.751    
  30  0.792031     -0.233154      -8.75338       8.75338       183.173       191.926    
  31  0.174747      -1.74441      -65.4911       65.4911       236.903       302.394    
  32  0.469718     -0.755623      -28.3686       28.3686       226.033       254.401    
  33  0.252316      -1.37707      -51.6998       51.6998       244.735       296.435    
  34  0.980061     -0.201409E-01 -0.756154      0.756154       194.719       195.475    
  35  0.838300     -0.176379      -6.62187       6.62187       244.431       251.053    
  36  0.369385     -0.995915      -37.3899       37.3899       251.012       288.402    
  37  0.923139     -0.799751E-01  -3.00253       3.00253       196.339       199.341    
  38  0.592446     -0.523496      -19.6538       19.6538       188.759       208.413    
  39  0.348787      -1.05329      -39.5441       39.5441       191.566       231.110    
  40  0.569584     -0.562850      -21.1312       21.1312       254.890       276.021    
  41  0.543034E-01  -2.91317      -109.370       109.370       208.927       318.297    
  42  0.582662     -0.540148      -20.2789       20.2789       254.170       274.449    
  43  0.702825     -0.352648      -13.2396       13.2396       251.161       264.401    
  44  0.941375     -0.604140E-01  -2.26814       2.26814       252.992       255.261    
  45  0.258857      -1.35148      -50.7390       50.7390       181.994       232.733    
  46  0.116535      -2.14956      -80.7017       80.7017       250.289       330.990    
  47  0.102671      -2.27622      -85.4570       85.4570       250.354       335.811    
  48  0.172023      -1.76013      -66.0809       66.0809       217.956       284.037    
  49  0.434982E-01  -3.13504      -117.700       117.700       248.098       365.798    
  50  0.852122     -0.160026      -6.00791       6.00791       220.149       226.157    
  51  0.583521     -0.538675      -20.2236       20.2236       194.261       214.484    
  52  0.843374     -0.170345      -6.39531       6.39531       187.830       194.226    
  53  0.194743      -1.63607      -61.4236       61.4236       207.128       268.552    
  54  0.191808      -1.65126      -61.9937       61.9937       246.946       308.940    
  55  0.656555     -0.420749      -15.7963       15.7963       261.740       277.536    
  56  0.468384E-01  -3.06105      -114.922       114.922       192.862       307.784    
  57  0.812217     -0.207988      -7.80854       7.80854       212.685       220.494    
  58  0.852265     -0.159858      -6.00158       6.00158       250.646       256.647    
  59  0.340213      -1.07818      -40.4785       40.4785       243.859       284.337    
  60  0.655911     -0.421730      -15.8331       15.8331       304.190       320.023    
  61  0.329724      -1.10950      -41.6543       41.6543       248.738       290.392    
  62  0.362242      -1.01544      -38.1230       38.1230       248.838       286.961    
  63  0.273539      -1.29631      -48.6678       48.6678       250.401       299.069    
  64  0.524351     -0.645594      -24.2377       24.2377       202.861       227.099    
  65  0.817273     -0.201783      -7.57559       7.57559       212.336       219.911    
  66  0.642237     -0.442797      -16.6241       16.6241       212.216       228.840    
  67  0.276178      -1.28671      -48.3073       48.3073       250.873       299.180    
  68  0.721954     -0.325793      -12.2314       12.2314       253.404       265.635    
  69  0.676913     -0.390212      -14.6499       14.6499       250.289       264.939    
  70  0.148059      -1.91014      -71.7131       71.7131       250.289       322.002    
  71  0.692932     -0.366824      -13.7718       13.7718       250.810       264.582    
  72  0.749770     -0.287989      -10.8121       10.8121       251.224       262.036    
  73  0.513445     -0.666612      -25.0268       25.0268       183.839       208.866    
loop,thermsimp(1:2)       56   73.4677       60.8868    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    171        292.70          0.86          1.13         23.60          0.16          0.05         25.79
Just calling func    0   0         25.79


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    292.70
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    37.5433               217
loop is:       56
neval is:      170
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       56      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    75.0866      0.500000    
T0,tstep,tfreq (these do not change):             72
current SAtemp,tstepnext are:    37.5433               217
loop is:       57
neval is:      170


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      217
neval,tstepnext:      170     217

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.662269     -0.412083      -15.4710       15.4710       182.994       198.465    
   2  0.724212     -0.322671      -12.1141       12.1141       180.815       192.929    
   3  0.633711     -0.456163      -17.1259       17.1259       183.173       200.299    
   4  0.448566     -0.801700      -30.0985       30.0985       186.996       217.094    
   5  0.964228     -0.364273E-01  -1.36760       1.36760       187.830       189.198    
   6  0.714306     -0.336444      -12.6312       12.6312       194.719       207.350    
   7  0.528330     -0.638035      -23.9539       23.9539       191.170       215.124    
   8  0.654127     -0.424453      -15.9354       15.9354       196.531       212.466    
   9  0.368899     -0.997232      -37.4394       37.4394       196.339       233.778    
  10  0.227697      -1.47974      -55.5543       55.5543       182.339       237.893    
  11  0.612266     -0.490588      -18.4183       18.4183       186.491       204.909    
  12  0.313777      -1.15907      -43.5155       43.5155       188.759       232.274    
  13  0.258526      -1.35276      -50.7871       50.7871       183.839       234.626    
  14  0.119298      -2.12613      -79.8221       79.8221       189.837       269.659    
  15  0.213331      -1.54491      -58.0010       58.0010       205.251       263.252    
  16  0.294218      -1.22343      -45.9318       45.9318       194.261       240.193    
  17  0.352988      -1.04132      -39.0947       39.0947       201.825       240.920    
  18  0.348706      -1.05353      -39.5528       39.5528       210.105       249.658    
  19  0.449249     -0.800179      -30.0413       30.0413       212.336       242.377    
  20  0.879121     -0.128833      -4.83681       4.83681       212.685       217.522    
  21  0.464081     -0.767695      -28.8218       28.8218       201.853       230.675    
  22  0.497582     -0.697995      -26.2050       26.2050       220.149       246.354    
  23  0.920207     -0.831566E-01  -3.12197       3.12197       202.861       205.983    
  24  0.811773     -0.208535      -7.82909       7.82909       183.049       190.878    
  25  0.190651      -1.65731      -62.2209       62.2209       212.216       274.437    
  26  0.645174     -0.438235      -16.4528       16.4528       191.566       208.019    
  27  0.668343     -0.402954      -15.1282       15.1282       181.994       197.122    
  28  0.765111     -0.267735      -10.0517       10.0517       196.829       206.880    
  29  0.991779     -0.825499E-02 -0.309920      0.309920       209.714       210.024    
  30  0.136888      -1.98859      -74.6584       74.6584       181.022       255.680    
  31  0.645145E-01  -2.74086      -102.901       102.901       229.060       331.961    
  32  0.408515E-01  -3.19781      -120.056       120.056       197.890       317.947    
  33  0.264109      -1.33140      -49.9850       49.9850       194.808       244.793    
  34  0.382737     -0.960407      -36.0568       36.0568       176.615       212.672    
  35  0.402738E-02  -5.51464      -207.038       207.038       244.431       451.469    
  36  0.318074      -1.14547      -43.0047       43.0047       226.033       269.038    
  37  0.245237      -1.40553      -52.7683       52.7683       188.172       240.941    
  38  0.519766     -0.654377      -24.5675       24.5675       252.992       277.560    
  39  0.255147      -1.36592      -51.2810       51.2810       250.646       301.927    
  40  0.833841     -0.181712      -6.82207       6.82207       202.842       209.664    
  41  0.696242E-01  -2.66464      -100.040       100.040       251.224       351.264    
  42  0.487295     -0.718886      -26.9894       26.9894       251.161       278.151    
  43  0.276229E-01  -3.58911      -134.747       134.747       250.810       385.557    
  44  0.638327     -0.448905      -16.8534       16.8534       250.289       267.142    
  45  0.206684      -1.57657      -59.1895       59.1895       253.404       312.593    
  46  0.736003     -0.306521      -11.5078       11.5078       229.865       241.373    
  47  0.217444E-01  -3.82840      -143.731       143.731       207.128       350.859    
  48  0.956929     -0.440260E-01  -1.65288       1.65288       254.170       255.823    
  49  0.883561     -0.123795      -4.64766       4.64766       254.890       259.538    
  50  0.700901     -0.355388      -13.3425       13.3425       261.740       275.083    
  51  0.201997      -1.59950      -60.0506       60.0506       232.534       292.585    
  52  0.412152     -0.886362      -33.2770       33.2770       217.956       251.233    
  53  0.890450     -0.116029      -4.35611       4.35611       243.859       248.215    
  54  0.417423     -0.873654      -32.7999       32.7999       248.838       281.638    
  55  0.426501     -0.852140      -31.9922       31.9922       251.012       283.004    
  56  0.983871     -0.162605E-01 -0.610472      0.610472       248.738       249.348    
  57  0.384350     -0.956201      -35.8989       35.8989       244.735       280.634    
  58  0.155937      -1.85830      -69.7669       69.7669       221.702       291.468    
  59  0.361264      -1.01815      -38.2246       38.2246       250.401       288.626    
  60  0.538177     -0.619568      -23.2606       23.2606       250.873       274.133    
  61  0.514362E-01  -2.96741      -111.406       111.406       236.903       348.310    
  62  0.994100     -0.591759E-02 -0.222166      0.222166       206.991       207.213    
  63  0.622557     -0.473920      -17.7925       17.7925       192.862       210.654    
  64  0.703606     -0.351537      -13.1979       13.1979       246.946       260.144    
  65  0.151986      -1.88396      -70.7303       70.7303       208.927       279.657    
  66  0.105360      -2.25037      -84.4863       84.4863       304.190       388.676    
  67  0.572995     -0.556878      -20.9071       20.9071       250.289       271.196    
  68  0.201032      -1.60429      -60.2304       60.2304       214.200       274.431    
  69  0.786519     -0.240139      -9.01561       9.01561       250.289       259.304    
  70  0.251709E-01  -3.68207      -138.237       138.237       250.354       388.591    
  71  0.574605     -0.554072      -20.8017       20.8017       206.532       227.334    
  72  0.842012     -0.171961      -6.45598       6.45598       248.098       254.554    
  73  0.705908E-02  -4.95344      -185.969       185.969       292.696       478.665    
loop,thermsimp(1:2)       57   15.4710       12.1141    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    172        200.13          0.87          1.11         23.64          0.13          0.05         25.79
Just calling func    0   0         25.79


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    173        260.63          0.86          1.11         23.56          0.21          0.05         25.79
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    200.13
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    37.5433               217
loop is:       57
neval is:      172
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       57      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    75.0866      0.500000    
T0,tstep,tfreq (these do not change):             72
current SAtemp,tstepnext are:    37.5433               217
loop is:       58
neval is:      172


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      217
neval,tstepnext:      172     217

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.584865E-01  -2.83896      -106.584       106.584       187.830       294.414    
   2  0.104884      -2.25490      -84.6566       84.6566       183.049       267.705    
   3  0.784254     -0.243023      -9.12387       9.12387       180.815       189.939    
   4  0.813133     -0.206861      -7.76624       7.76624       181.994       189.760    
   5  0.490778     -0.711764      -26.7220       26.7220       182.994       209.716    
   6  0.168573      -1.78039      -66.8416       66.8416       183.173       250.014    
   7  0.450161     -0.798149      -29.9652       29.9652       186.491       216.456    
   8  0.828233     -0.188461      -7.07544       7.07544       202.861       209.937    
   9  0.994731     -0.528342E-02 -0.198357      0.198357       196.829       197.027    
  10  0.813340     -0.206606      -7.75668       7.75668       206.991       214.748    
  11  0.776133     -0.253432      -9.51467       9.51467       194.719       204.233    
  12  0.729556     -0.315319      -11.8381       11.8381       191.566       203.404    
  13  0.530451     -0.634028      -23.8035       23.8035       202.842       226.645    
  14  0.752564E-01  -2.58685      -97.1191       97.1191       209.714       306.833    
  15  0.918457     -0.850597E-01  -3.19342       3.19342       192.862       196.055    
  16  0.162642      -1.81621      -68.1864       68.1864       196.531       264.717    
  17  0.725851     -0.320411      -12.0293       12.0293       176.615       188.644    
  18  0.322292      -1.13230      -42.5102       42.5102       191.170       233.680    
  19  0.838064     -0.176661      -6.63244       6.63244       186.996       193.628    
  20  0.346062E-01  -3.36372      -126.285       126.285       212.685       338.970    
  21  0.442915     -0.814377      -30.5744       30.5744       206.532       237.107    
  22  0.143708      -1.93997      -72.8330       72.8330       201.853       274.686    
  23  0.940845     -0.609769E-01  -2.28928       2.28928       188.759       191.048    
  24  0.972503     -0.278816E-01  -1.04677       1.04677       196.339       197.386    
  25  0.291831      -1.23158      -46.2376       46.2376       183.839       230.077    
  26  0.211976      -1.55128      -58.2403       58.2403       182.339       240.579    
  27  0.695427     -0.363229      -13.6368       13.6368       194.261       207.898    
  28  0.982540E-01  -2.32020      -87.1079       87.1079       201.825       288.933    
  29  0.730742     -0.313695      -11.7771       11.7771       188.172       199.949    
  30  0.417794     -0.872766      -32.7665       32.7665       229.865       262.632    
  31  0.868385     -0.141121      -5.29813       5.29813       212.336       217.634    
  32  0.300897      -1.20099      -45.0890       45.0890       194.808       239.897    
  33  0.917219     -0.864093E-01  -3.24409       3.24409       220.149       223.393    
  34  0.304394      -1.18943      -44.6552       44.6552       243.859       288.514    
  35  0.856500     -0.154901      -5.81551       5.81551       248.738       254.553    
  36  0.310652      -1.16908      -43.8912       43.8912       210.105       253.996    
  37  0.846275     -0.166911      -6.26640       6.26640       217.956       224.223    
  38  0.206825      -1.57588      -59.1639       59.1639       248.098       307.262    
  39  0.606376     -0.500256      -18.7813       18.7813       181.022       199.803    
  40  0.840015     -0.174336      -6.54513       6.54513       254.170       260.716    
  41  0.348835      -1.05315      -39.5389       39.5389       250.289       289.828    
  42  0.857325     -0.153939      -5.77937       5.77937       254.890       260.669    
  43  0.308035E-01  -3.48013      -130.655       130.655       246.946       377.602    
  44  0.400632     -0.914711      -34.3413       34.3413       205.251       239.593    
  45  0.242237      -1.41784      -53.2303       53.2303       250.289       303.519    
  46  0.407771     -0.897050      -33.6782       33.6782       226.033       259.711    
  47  0.430691     -0.842364      -31.6251       31.6251       189.837       221.462    
  48  0.415503     -0.878266      -32.9730       32.9730       250.289       283.262    
  49  0.593575     -0.521591      -19.5823       19.5823       250.873       270.455    
  50  0.973620     -0.267342E-01  -1.00369       1.00369       214.200       215.204    
  51  0.510257     -0.672840      -25.2606       25.2606       212.216       237.476    
  52  0.796475     -0.227560      -8.54334       8.54334       261.740       270.283    
  53  0.213576      -1.54376      -57.9580       57.9580       252.992       310.950    
  54  0.865534     -0.144409      -5.42159       5.42159       251.161       256.583    
  55  0.920053     -0.833240E-01  -3.12826       3.12826       208.927       212.055    
  56  0.534624     -0.626192      -23.5093       23.5093       244.735       268.245    
  57  0.963687     -0.369888E-01  -1.38868       1.38868       248.838       250.227    
  58  0.498139     -0.696877      -26.1631       26.1631       251.012       277.175    
  59  0.987058     -0.130264E-01 -0.489055      0.489055       250.401       250.890    
  60  0.488276E-01  -3.01946      -113.360       113.360       221.702       335.062    
  61  0.597381E-01  -2.81779      -105.789       105.789       232.534       338.323    
  62  0.589016     -0.529301      -19.8717       19.8717       250.646       270.517    
  63  0.680503     -0.384923      -14.4513       14.4513       253.404       267.855    
  64  0.793494     -0.231310      -8.68414       8.68414       197.890       206.575    
  65  0.269936E-01  -3.61216      -135.612       135.612       229.060       364.672    
  66  0.392490     -0.935245      -35.1122       35.1122       236.903       272.015    
  67  0.150218      -1.89567      -71.1696       71.1696       207.128       278.298    
  68  0.959939     -0.408856E-01  -1.53498       1.53498       251.224       252.759    
  69  0.559076     -0.581471      -21.8303       21.8303       250.810       272.640    
  70  0.820359     -0.198013      -7.43406       7.43406       250.354       257.788    
  71  0.876568     -0.131741      -4.94598       4.94598       304.190       309.136    
  72  0.338606      -1.08292      -40.6563       40.6563       244.431       285.088    
  73  0.877240     -0.130975      -4.91722       4.91722       200.132       205.049    
loop,thermsimp(1:2)       58   106.584       84.6566    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    174        182.46          0.85          1.13         23.60          0.18          0.05         25.82
Just calling func    0   0         25.81


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    175        186.22          0.86          1.12         23.99          0.00          0.05         26.02
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    182.46
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    37.5433               217
loop is:       58
neval is:      174
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       58      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    75.0866      0.500000    
T0,tstep,tfreq (these do not change):             72
current SAtemp,tstepnext are:    37.5433               217
loop is:       59
neval is:      174


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      217
neval,tstepnext:      174     217

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.330032      -1.10857      -41.6192       41.6192       176.615       218.234    
   2  0.939148     -0.627826E-01  -2.35707       2.35707       181.994       184.351    
   3  0.130906      -2.03328      -76.3360       76.3360       180.815       257.151    
   4  0.664370     -0.408916      -15.3521       15.3521       188.759       204.111    
   5  0.490908     -0.711498      -26.7120       26.7120       186.996       213.708    
   6  0.711731     -0.340055      -12.7668       12.7668       192.862       205.628    
   7  0.676080     -0.391444      -14.6961       14.6961       196.829       211.525    
   8  0.611139     -0.492432      -18.4875       18.4875       196.339       214.826    
   9  0.614246     -0.487359      -18.2971       18.2971       181.022       199.319    
  10  0.988045     -0.120275E-01 -0.451554      0.451554       188.172       188.624    
  11  0.232883      -1.45722      -54.7088       54.7088       191.566       246.275    
  12  0.450825     -0.796675      -29.9098       29.9098       194.719       224.629    
  13  0.493319     -0.706599      -26.5280       26.5280       200.132       226.660    
  14  0.191184      -1.65452      -62.1162       62.1162       197.890       260.007    
  15  0.894136     -0.111897      -4.20100       4.20100       194.261       198.462    
  16  0.391751     -0.937128      -35.1829       35.1829       182.994       218.177    
  17  0.236278      -1.44275      -54.1655       54.1655       202.861       257.027    
  18  0.496874E-01  -3.00200      -112.705       112.705       208.927       321.632    
  19  0.784524     -0.242678      -9.11095       9.11095       206.991       216.102    
  20  0.292328      -1.22988      -46.1738       46.1738       214.200       260.374    
  21  0.832247E-01  -2.48621      -93.3406       93.3406       186.491       279.832    
  22  0.423133     -0.860069      -32.2898       32.2898       212.336       244.625    
  23  0.234472      -1.45042      -54.4535       54.4535       189.837       244.290    
  24  0.868463     -0.141031      -5.29475       5.29475       220.149       225.444    
  25  0.122969      -2.09582      -78.6841       78.6841       217.956       296.640    
  26  0.811771     -0.208537      -7.82917       7.82917       202.842       210.671    
  27  0.786834     -0.239738      -9.00057       9.00057       183.839       192.840    
  28  0.163144      -1.81312      -68.0705       68.0705       191.170       259.241    
  29  0.571103     -0.560186      -21.0312       21.0312       206.532       227.564    
  30  0.769982     -0.261388      -9.81335       9.81335       212.216       222.029    
  31  0.471769     -0.751265      -28.2050       28.2050       205.251       233.456    
  32  0.584935     -0.536254      -20.1327       20.1327       194.808       214.941    
  33  0.416140     -0.876734      -32.9155       32.9155       182.339       215.254    
  34  0.106525E-01  -4.54196      -170.520       170.520       183.173       353.693    
  35  0.595424     -0.518482      -19.4655       19.4655       248.838       268.304    
  36  0.302400      -1.19600      -44.9019       44.9019       250.401       295.303    
  37  0.629701     -0.462510      -17.3641       17.3641       251.224       268.589    
  38  0.939026E-01  -2.36550      -88.8086       88.8086       210.105       298.914    
  39  0.911727     -0.924151E-01  -3.46957       3.46957       248.738       252.207    
  40  0.289502      -1.23959      -46.5384       46.5384       251.161       297.700    
  41  0.326571      -1.11911      -42.0150       42.0150       250.354       292.369    
  42  0.972366     -0.280231E-01  -1.05208       1.05208       226.033       227.085    
  43  0.823413     -0.194297      -7.29455       7.29455       254.890       262.185    
  44  0.790717     -0.234815      -8.81573       8.81573       254.170       262.986    
  45  0.167922      -1.78426      -66.9869       66.9869       229.865       296.852    
  46  0.804665     -0.217329      -8.15926       8.15926       196.531       204.690    
  47  0.154714      -1.86617      -70.0624       70.0624       183.049       253.111    
  48  0.240456      -1.42522      -53.5074       53.5074       253.404       306.911    
  49  0.351787      -1.04473      -39.2226       39.2226       244.735       283.958    
  50  0.666429E-01  -2.70841      -101.683       101.683       261.740       363.423    
  51  0.484113     -0.725437      -27.2353       27.2353       250.873       278.108    
  52  0.298509      -1.20896      -45.3882       45.3882       250.646       296.034    
  53  0.982136     -0.180253E-01 -0.676729      0.676729       236.903       237.580    
  54  0.799723     -0.223490      -8.39056       8.39056       250.810       259.200    
  55  0.559799     -0.580177      -21.7818       21.7818       201.853       223.634    
  56  0.492929     -0.707390      -26.5578       26.5578       251.012       277.570    
  57  0.655290     -0.422678      -15.8687       15.8687       207.128       222.997    
  58  0.426949     -0.851091      -31.9528       31.9528       250.289       282.241    
  59  0.575269     -0.552918      -20.7584       20.7584       244.431       265.190    
  60  0.252283      -1.37721      -51.7049       51.7049       243.859       295.563    
  61  0.628464     -0.464477      -17.4380       17.4380       201.825       219.263    
  62  0.847342E-01  -2.46824      -92.6657       92.6657       250.289       342.954    
  63  0.701567     -0.354439      -13.3068       13.3068       187.830       201.137    
  64  0.171664      -1.76222      -66.1595       66.1595       250.289       316.448    
  65  0.395346     -0.927995      -34.8400       34.8400       209.714       244.554    
  66  0.397662     -0.922153      -34.6207       34.6207       248.098       282.719    
  67  0.166798      -1.79097      -67.2389       67.2389       304.190       371.429    
  68  0.100957      -2.29306      -86.0891       86.0891       252.992       339.082    
  69  0.725220     -0.321280      -12.0619       12.0619       221.702       233.764    
  70  0.856561     -0.154829      -5.81280       5.81280       232.534       238.347    
  71  0.421738     -0.863372      -32.4138       32.4138       212.685       245.099    
  72  0.294072      -1.22393      -45.9504       45.9504       229.060       275.010    
  73  0.138461      -1.97717      -74.2294       74.2294       182.465       256.694    
loop,thermsimp(1:2)       59   41.6192       2.35707    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    176        260.07          0.83          1.12         23.75          0.05          0.05         25.80
Just calling func    0   0         25.80


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    260.07
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    37.5433               217
loop is:       59
neval is:      175
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       59      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    75.0866      0.500000    
T0,tstep,tfreq (these do not change):             72
current SAtemp,tstepnext are:    37.5433               217
loop is:       60
neval is:      175


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      217
neval,tstepnext:      175     217

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.304136      -1.19028      -44.6871       44.6871       181.994       226.681    
   2  0.843344     -0.170380      -6.39662       6.39662       188.172       194.569    
   3  0.457815     -0.781289      -29.3322       29.3322       183.839       213.171    
   4  0.933709     -0.685899E-01  -2.57509       2.57509       194.261       196.836    
   5  0.887159     -0.119731      -4.49508       4.49508       181.022       185.517    
   6  0.786211     -0.240530      -9.03030       9.03030       187.830       196.861    
   7  0.794803     -0.229661      -8.62223       8.62223       188.759       197.381    
   8  0.573435E-01  -2.85870      -107.325       107.325       196.531       303.856    
   9  0.647106     -0.435245      -16.3405       16.3405       192.862       209.202    
  10  0.110118      -2.20620      -82.8282       82.8282       202.842       285.670    
  11  0.339548      -1.08014      -40.5520       40.5520       196.829       237.381    
  12  0.635246     -0.453742      -17.0350       17.0350       186.996       204.031    
  13  0.488392     -0.716638      -26.9050       26.9050       196.339       223.244    
  14  0.602571     -0.506549      -19.0175       19.0175       194.808       213.826    
  15  0.710041     -0.342433      -12.8561       12.8561       182.339       195.195    
  16  0.585763     -0.534840      -20.0797       20.0797       206.991       227.071    
  17  0.288010      -1.24476      -46.7324       46.7324       182.994       229.727    
  18  0.455238     -0.786934      -29.5441       29.5441       176.615       206.159    
  19  0.723984     -0.322986      -12.1260       12.1260       201.825       213.951    
  20  0.554067     -0.590470      -22.1682       22.1682       212.216       234.384    
  21  0.646516     -0.436157      -16.3748       16.3748       207.128       223.503    
  22  0.271985      -1.30201      -48.8817       48.8817       201.853       250.734    
  23  0.901636E-02  -4.70871      -176.781       176.781       194.719       371.499    
  24  0.383616     -0.958114      -35.9708       35.9708       220.149       256.120    
  25  0.443516     -0.813022      -30.5235       30.5235       200.132       230.656    
  26  0.223023      -1.50048      -56.3331       56.3331       226.033       282.366    
  27  0.123255      -2.09350      -78.5968       78.5968       206.532       285.129    
  28  0.817485     -0.201523      -7.56584       7.56584       205.251       212.817    
  29  0.333893      -1.09693      -41.1825       41.1825       221.702       262.884    
  30  0.867877     -0.141706      -5.32010       5.32010       236.903       242.223    
  31  0.365747      -1.00581      -37.7616       37.7616       232.534       270.296    
  32  0.429445     -0.845262      -31.7339       31.7339       189.837       221.571    
  33  0.856620     -0.154761      -5.81024       5.81024       209.714       215.524    
  34  0.729532     -0.315352      -11.8394       11.8394       212.336       224.175    
  35  0.315845      -1.15251      -43.2689       43.2689       212.685       255.954    
  36  0.547596     -0.602217      -22.6092       22.6092       191.566       214.175    
  37  0.752130     -0.284846      -10.6941       10.6941       248.738       259.432    
  38  0.806451     -0.215112      -8.07602       8.07602       183.049       191.125    
  39  0.618613     -0.480275      -18.0311       18.0311       182.465       200.496    
  40  0.630350     -0.461480      -17.3255       17.3255       202.861       220.187    
  41  0.251741      -1.37935      -51.7855       51.7855       180.815       232.600    
  42  0.846504     -0.166640      -6.25621       6.25621       250.810       257.066    
  43  0.830791     -0.185377      -6.95965       6.95965       191.170       198.130    
  44  0.566838     -0.567681      -21.3126       21.3126       197.890       219.203    
  45  0.499450E-01  -2.99683      -112.511       112.511       214.200       326.711    
  46  0.976301     -0.239838E-01 -0.900433      0.900433       254.890       255.790    
  47  0.401049     -0.913672      -34.3023       34.3023       254.170       288.473    
  48  0.709931E-01  -2.64517      -99.3085       99.3085       244.431       343.740    
  49  0.920370E-02  -4.68815      -176.009       176.009       248.838       424.847    
  50  0.379723     -0.968314      -36.3537       36.3537       251.224       287.578    
  51  0.207569      -1.57229      -59.0291       59.0291       229.060       288.089    
  52  0.745673     -0.293468      -11.0177       11.0177       251.012       262.030    
  53  0.915877     -0.878737E-01  -3.29907       3.29907       250.873       254.172    
  54  0.836769     -0.178207      -6.69049       6.69049       186.491       193.182    
  55  0.769684E-01  -2.56436      -96.2746       96.2746       250.289       346.563    
  56  0.797754     -0.225955      -8.48311       8.48311       248.098       256.582    
  57  0.555189     -0.588446      -22.0922       22.0922       244.735       266.827    
  58  0.134224      -2.00825      -75.3962       75.3962       250.354       325.750    
  59  0.796234     -0.227862      -8.55470       8.55470       250.401       258.956    
  60  0.628721     -0.464068      -17.4226       17.4226       243.859       261.281    
  61  0.460391     -0.775679      -29.1216       29.1216       250.646       279.767    
  62  0.137302      -1.98558      -74.5451       74.5451       217.956       292.501    
  63  0.504249     -0.684686      -25.7054       25.7054       229.865       255.570    
  64  0.548486     -0.600594      -22.5483       22.5483       251.161       273.710    
  65  0.479259     -0.735514      -27.6136       27.6136       210.105       237.719    
  66  0.763784     -0.269471      -10.1168       10.1168       253.404       263.521    
  67  0.896024     -0.109788      -4.12180       4.12180       250.289       254.411    
  68  0.873307     -0.135468      -5.08591       5.08591       208.927       214.013    
  69  0.469885     -0.755268      -28.3553       28.3553       252.992       281.348    
  70  0.705401     -0.348988      -13.1022       13.1022       250.289       263.391    
  71  0.997081     -0.292289E-02 -0.109735      0.109735       183.173       183.283    
  72  0.204925      -1.58511      -59.5103       59.5103       261.740       321.250    
  73  0.676158     -0.391329      -14.6918       14.6918       260.067       274.759    
loop,thermsimp(1:2)       60   44.6871       6.39662    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    177        188.59          0.86          1.12         23.64          0.11          0.04         25.78
Just calling func    0   0         25.77


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    188.59
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    37.5433               217
loop is:       60
neval is:      176
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       60      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    75.0866      0.500000    
T0,tstep,tfreq (these do not change):             72
current SAtemp,tstepnext are:    37.5433               217
loop is:       61
neval is:      176


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      217
neval,tstepnext:      176     217

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.829682     -0.186713      -7.00982       7.00982       183.173       190.183    
   2  0.735850     -0.306729      -11.5156       11.5156       181.022       192.537    
   3  0.828786     -0.187793      -7.05038       7.05038       183.049       190.099    
   4  0.592078     -0.524118      -19.6771       19.6771       186.491       206.168    
   5  0.691797E-01  -2.67105      -100.280       100.280       188.172       288.452    
   6  0.772335     -0.258337      -9.69882       9.69882       182.339       192.037    
   7  0.504563     -0.684063      -25.6820       25.6820       194.261       219.943    
   8  0.700615     -0.355797      -13.3578       13.3578       187.830       201.188    
   9  0.764596     -0.268408      -10.0769       10.0769       188.759       198.836    
  10  0.459614     -0.777368      -29.1850       29.1850       191.170       220.355    
  11  0.931193     -0.712882E-01  -2.67639       2.67639       182.465       185.141    
  12  0.502482E-01  -2.99078      -112.284       112.284       186.996       299.279    
  13  0.498197     -0.696760      -26.1587       26.1587       176.615       202.774    
  14  0.551534E-01  -2.89764      -108.787       108.787       192.862       301.648    
  15  0.172209      -1.75905      -66.0405       66.0405       205.251       271.292    
  16  0.238868E-01  -3.73443      -140.203       140.203       183.839       324.042    
  17  0.699366     -0.357581      -13.4248       13.4248       194.808       208.233    
  18  0.764093     -0.269066      -10.1016       10.1016       201.825       211.927    
  19  0.465633     -0.764357      -28.6965       28.6965       208.927       237.623    
  20  0.209906      -1.56110      -58.6088       58.6088       191.566       250.175    
  21  0.216891      -1.52836      -57.3797       57.3797       209.714       267.093    
  22  0.795854E-01  -2.53092      -95.0193       95.0193       197.890       292.910    
  23  0.701683     -0.354273      -13.3006       13.3006       202.861       216.162    
  24  0.574425     -0.554385      -20.8134       20.8134       189.837       210.650    
  25  0.674968     -0.393090      -14.7579       14.7579       196.339       211.097    
  26  0.684189     -0.379521      -14.2485       14.2485       207.128       221.377    
  27  0.541862     -0.612745      -23.0045       23.0045       212.336       235.340    
  28  0.668027     -0.403426      -15.1459       15.1459       181.994       197.140    
  29  0.353251      -1.04058      -39.0667       39.0667       206.991       246.058    
  30  0.778708     -0.250119      -9.39031       9.39031       182.994       192.385    
  31  0.829283     -0.187194      -7.02788       7.02788       200.132       207.160    
  32  0.679297     -0.386697      -14.5179       14.5179       180.815       195.333    
  33  0.536301     -0.623060      -23.3917       23.3917       212.216       235.607    
  34  0.247738      -1.39538      -52.3873       52.3873       196.829       249.216    
  35  0.271399      -1.30416      -48.9626       48.9626       210.105       259.068    
  36  0.284124      -1.25835      -47.2425       47.2425       236.903       284.146    
  37  0.664442     -0.408808      -15.3480       15.3480       201.853       217.201    
  38  0.874508     -0.134094      -5.03431       5.03431       250.873       255.907    
  39  0.916444     -0.872538E-01  -3.27580       3.27580       250.289       253.565    
  40  0.295165      -1.22022      -45.8111       45.8111       229.865       275.676    
  41  0.242592      -1.41637      -53.1754       53.1754       254.890       308.065    
  42  0.396124     -0.926028      -34.7662       34.7662       212.685       247.451    
  43  0.509193E-01  -2.97751      -111.786       111.786       220.149       331.935    
  44  0.778911     -0.249858      -9.38050       9.38050       248.098       257.479    
  45  0.351009      -1.04694      -39.3057       39.3057       250.810       290.115    
  46  0.480934     -0.732025      -27.4827       27.4827       250.401       277.884    
  47  0.908579     -0.958731E-01  -3.59939       3.59939       248.738       252.337    
  48  0.898885     -0.106600      -4.00211       4.00211       243.859       247.861    
  49  0.561121     -0.577819      -21.6932       21.6932       251.012       272.705    
  50  0.851109     -0.161215      -6.05256       6.05256       221.702       227.754    
  51  0.975854     -0.244425E-01 -0.917653      0.917653       250.289       251.206    
  52  0.187829      -1.67223      -62.7809       62.7809       253.404       316.185    
  53  0.962131     -0.386049E-01  -1.44935       1.44935       244.735       246.185    
  54  0.823812     -0.193813      -7.27638       7.27638       232.534       239.811    
  55  0.765207     -0.267609      -10.0469       10.0469       251.161       261.208    
  56  0.207984      -1.57030      -58.9541       58.9541       260.067       319.021    
  57  0.675792     -0.391869      -14.7121       14.7121       250.646       265.358    
  58  0.641275     -0.444296      -16.6804       16.6804       252.992       269.673    
  59  0.621346E-01  -2.77845      -104.312       104.312       226.033       330.345    
  60  0.911977E-01  -2.39473      -89.9059       89.9059       206.532       296.438    
  61  0.697078     -0.360859      -13.5478       13.5478       202.842       216.390    
  62  0.760976     -0.273154      -10.2551       10.2551       251.224       261.480    
  63  0.812117     -0.208111      -7.81317       7.81317       229.060       236.873    
  64  0.654868     -0.423322      -15.8929       15.8929       254.170       270.063    
  65  0.263345E-02  -5.93946      -222.987       222.987       217.956       440.943    
  66  0.180895      -1.70984      -64.1929       64.1929       196.531       260.724    
  67  0.830100     -0.186209      -6.99090       6.99090       261.740       268.731    
  68  0.396842E-01  -3.22680      -121.145       121.145       250.354       371.499    
  69  0.862274     -0.148182      -5.56323       5.56323       214.200       219.764    
  70  0.362095      -1.01585      -38.1383       38.1383       244.431       282.570    
  71  0.156544      -1.85442      -69.6211       69.6211       250.289       319.910    
  72  0.103594      -2.26727      -85.1210       85.1210       194.719       279.840    
  73  0.147771      -1.91209      -71.7862       71.7862       188.593       260.379    
loop,thermsimp(1:2)       61   7.00982       11.5156    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    178        186.96          0.86          1.12         23.58          0.13          0.05         25.74
Just calling func    0   0         25.74


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    179        188.83          0.86          1.13         23.68          0.03          0.05         25.75
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    186.96
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    37.5433               217
loop is:       61
neval is:      178
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       61      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    75.0866      0.500000    
T0,tstep,tfreq (these do not change):             72
current SAtemp,tstepnext are:    37.5433               217
loop is:       62
neval is:      178


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      217
neval,tstepnext:      178     217

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.917395     -0.862167E-01  -3.23686       3.23686       182.465       185.702    
   2  0.899579E-01  -2.40841      -90.4198       90.4198       183.049       273.468    
   3  0.997625     -0.237830E-02 -0.892894E-01  0.892894E-01   183.173       183.262    
   4  0.224083      -1.49574      -56.1550       56.1550       182.339       238.494    
   5  0.120769      -2.11388      -79.3620       79.3620       182.994       262.356    
   6  0.302676E-01  -3.49768      -131.314       131.314       181.022       312.336    
   7  0.315161      -1.15467      -43.3502       43.3502       180.815       224.165    
   8  0.155895      -1.85857      -69.7770       69.7770       181.994       251.771    
   9  0.467639     -0.760060      -28.5351       28.5351       188.759       217.294    
  10  0.277823      -1.28077      -48.0843       48.0843       187.830       235.915    
  11  0.712282     -0.339281      -12.7377       12.7377       176.615       189.353    
  12  0.929560     -0.730437E-01  -2.74230       2.74230       186.491       189.233    
  13  0.499024     -0.695101      -26.0964       26.0964       200.132       226.229    
  14  0.940347     -0.615066E-01  -2.30916       2.30916       194.808       197.118    
  15  0.714006     -0.336864      -12.6470       12.6470       189.837       202.484    
  16  0.162603      -1.81644      -68.1953       68.1953       196.339       264.534    
  17  0.663729     -0.409881      -15.3883       15.3883       201.825       217.213    
  18  0.314148      -1.15789      -43.4711       43.4711       202.861       246.333    
  19  0.497386     -0.698388      -26.2198       26.2198       202.842       229.062    
  20  0.368387     -0.998622      -37.4916       37.4916       201.853       239.344    
  21  0.326342      -1.11981      -42.0413       42.0413       214.200       256.242    
  22  0.442952     -0.814294      -30.5713       30.5713       194.261       224.832    
  23  0.929694     -0.729000E-01  -2.73691       2.73691       191.170       193.907    
  24  0.945450E-01  -2.35868      -88.5526       88.5526       207.128       295.681    
  25  0.407158     -0.898555      -33.7347       33.7347       221.702       255.436    
  26  0.706679     -0.347179      -13.0343       13.0343       212.336       225.370    
  27  0.657848     -0.418781      -15.7224       15.7224       212.216       227.938    
  28  0.968040     -0.324817E-01  -1.21947       1.21947       229.060       230.279    
  29  0.330387      -1.10749      -41.5788       41.5788       208.927       250.506    
  30  0.756161     -0.279501      -10.4934       10.4934       232.534       243.028    
  31  0.307772      -1.17840      -44.2409       44.2409       206.991       251.232    
  32  0.759008E-01  -2.57833      -96.7989       96.7989       244.735       341.534    
  33  0.615618E-01  -2.78771      -104.660       104.660       212.685       317.345    
  34  0.545984     -0.605166      -22.7199       22.7199       243.859       266.579    
  35  0.339865      -1.07921      -40.5170       40.5170       196.829       237.345    
  36  0.816477     -0.202757      -7.61217       7.61217       191.566       199.178    
  37  0.932889     -0.694691E-01  -2.60810       2.60810       250.289       252.897    
  38  0.667042     -0.404902      -15.2014       15.2014       248.738       263.939    
  39  0.583049     -0.539484      -20.2540       20.2540       250.289       270.543    
  40  0.210192      -1.55973      -58.5576       58.5576       250.873       309.430    
  41  0.158846      -1.83982      -69.0730       69.0730       248.098       317.172    
  42  0.360401      -1.02054      -38.3143       38.3143       210.105       248.420    
  43  0.508154     -0.676971      -25.4157       25.4157       188.593       214.008    
  44  0.873303     -0.135473      -5.08610       5.08610       196.531       201.617    
  45  0.650524     -0.429977      -16.1428       16.1428       251.161       267.304    
  46  0.805601     -0.216166      -8.11559       8.11559       251.224       259.340    
  47  0.312590E-03  -8.07062      -302.998       302.998       250.646       553.643    
  48  0.892261     -0.113997      -4.27982       4.27982       209.714       213.993    
  49  0.504672     -0.683846      -25.6738       25.6738       261.740       287.414    
  50  0.269834      -1.30995      -49.1797       49.1797       252.992       302.172    
  51  0.752889     -0.283838      -10.6562       10.6562       254.170       264.827    
  52  0.952800     -0.483498E-01  -1.81521       1.81521       205.251       207.067    
  53  0.147189E-01  -4.21863      -158.381       158.381       251.012       409.393    
  54  0.213392      -1.54462      -57.9903       57.9903       229.865       287.855    
  55  0.278061      -1.27992      -48.0523       48.0523       250.401       298.454    
  56  0.668800     -0.402271      -15.1026       15.1026       194.719       209.821    
  57  0.674989     -0.393058      -14.7567       14.7567       244.431       259.188    
  58  0.186370      -1.68002      -63.0735       63.0735       236.903       299.977    
  59  0.133078      -2.01682      -75.7179       75.7179       188.172       263.890    
  60  0.519821     -0.654270      -24.5635       24.5635       250.810       275.373    
  61  0.136847      -1.98889      -74.6695       74.6695       197.890       272.560    
  62  0.604880     -0.502725      -18.8740       18.8740       206.532       225.406    
  63  0.301519      -1.19892      -45.0115       45.0115       186.996       232.007    
  64  0.531506     -0.632040      -23.7289       23.7289       192.862       216.590    
  65  0.554963     -0.588854      -22.1075       22.1075       254.890       276.998    
  66  0.264726      -1.32906      -49.8973       49.8973       253.404       303.301    
  67  0.520437     -0.653087      -24.5190       24.5190       260.067       284.586    
  68  0.457095     -0.782865      -29.3913       29.3913       250.289       279.680    
  69  0.349515      -1.05121      -39.4659       39.4659       183.839       223.305    
  70  0.624446E-01  -2.77348      -104.125       104.125       226.033       330.158    
  71  0.659983     -0.415541      -15.6008       15.6008       220.149       235.750    
  72  0.171300      -1.76434      -66.2391       66.2391       250.354       316.593    
  73  0.458973E-01  -3.08135      -115.684       115.684       186.965       302.649    
loop,thermsimp(1:2)       62   3.23686       90.4198    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    180        185.34          0.87          1.12         23.64          0.09          0.05         25.77
Just calling func    0   0         25.77


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    181        191.42          0.85          1.12         23.62          0.14          0.05         25.78
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  180    191.42        1.492     -1.515      1.492     -102.6      1.004    
                      0.2971      1.695     -99.70      3.497     0.8111E-01
                       2.005     -1.546      1.309      0.000     -5.000    
                      -1.209      0.000      0.000      0.000     -1.221    

                      -2.500      9782.      8159.      0.000      0.000    
                     -0.5672     -6.650     -4.398     -8.161      3.591    
                      -14.43     -3.185      2297.      0.000      2304.    

                      0.1392E+05 0.1285E+05 -2179.     0.1950E+05  3253.    
                       5514.     0.1934     0.2689E-01  0.000    -0.3859    
                     -0.1240E-01-0.1184    -0.1157    -0.1962    -0.6387E-01

                      -2.966     0.6175E-02  0.000     0.4467E-01 0.9748E-02
                      0.8541E-01-0.1811E-01 0.4022E-01-0.7934E-01 0.9794E-01
                     -0.8460E-01 0.7074E-02-0.1182    -0.5666      0.000    

                      -1.199     -1.573     -2.781     -2.686    -0.4861E-01
                      0.4208      9.225      9.126    -0.1755E+05 -4.000    
                     -0.4349    -0.4192      9.476      8.398    -0.2112E+05

                      -4.000     0.1728    -0.4071      8.888      9.007    
                     -0.3942E+05 -7.000    -0.2395    -0.6769      9.504    
                       8.516    -0.2192E+05 -7.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    185.34
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    37.5433               217
loop is:       62
neval is:      180
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       62      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    75.0866      0.500000    
T0,tstep,tfreq (these do not change):             72
current SAtemp,tstepnext are:    37.5433               217
loop is:       63
neval is:      180


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      217
neval,tstepnext:      180     217

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.617195     -0.482570      -18.1173       18.1173       183.173       201.290    
   2  0.828850     -0.187716      -7.04746       7.04746       182.465       189.512    
   3  0.138898      -1.97402      -74.1112       74.1112       186.491       260.602    
   4  0.174947      -1.74327      -65.4482       65.4482       176.615       242.063    
   5  0.452367E-01  -3.09585      -116.228       116.228       191.170       307.398    
   6  0.982229     -0.179305E-01 -0.673169      0.673169       194.808       195.482    
   7  0.855728     -0.155803      -5.84936       5.84936       191.566       197.415    
   8  0.350750      -1.04768      -39.3334       39.3334       196.531       235.864    
   9  0.880054     -0.127772      -4.79699       4.79699       189.837       194.634    
  10  0.106511      -2.23950      -84.0784       84.0784       205.251       289.330    
  11  0.336060      -1.09047      -40.9397       40.9397       194.719       235.658    
  12  0.904819     -0.100020      -3.75509       3.75509       209.714       213.469    
  13  0.765597     -0.267099      -10.0278       10.0278       188.593       198.620    
  14  0.551789     -0.594589      -22.3228       22.3228       192.862       215.184    
  15  0.832435     -0.183400      -6.88543       6.88543       201.825       208.710    
  16  0.353494      -1.03989      -39.0409       39.0409       188.759       227.800    
  17  0.510104     -0.673140      -25.2719       25.2719       183.839       209.111    
  18  0.523162     -0.647863      -24.3229       24.3229       180.815       205.138    
  19  0.953043     -0.480957E-01  -1.80567       1.80567       194.261       196.067    
  20  0.267001E-01  -3.62309      -136.023       136.023       212.336       348.358    
  21  0.280924      -1.26967      -47.6676       47.6676       206.532       254.200    
  22  0.956868     -0.440901E-01  -1.65529       1.65529       200.132       201.788    
  23  0.779725     -0.248814      -9.34129       9.34129       212.216       221.557    
  24  0.901061     -0.104183      -3.91137       3.91137       202.842       206.753    
  25  0.533391     -0.628501      -23.5960       23.5960       229.060       252.656    
  26  0.642536     -0.442333      -16.6066       16.6066       186.996       203.602    
  27  0.520565E-01  -2.95543      -110.956       110.956       220.149       331.106    
  28  0.330080      -1.10842      -41.6138       41.6138       187.830       229.444    
  29  0.280801      -1.27011      -47.6841       47.6841       196.829       244.513    
  30  0.144013      -1.93785      -72.7533       72.7533       182.339       255.092    
  31  0.201537      -1.60178      -60.1361       60.1361       201.853       261.989    
  32  0.920188     -0.831777E-01  -3.12277       3.12277       232.534       235.657    
  33  0.747222     -0.291393      -10.9399       10.9399       202.861       213.801    
  34  0.697959     -0.359595      -13.5004       13.5004       210.105       223.606    
  35  0.492949     -0.707349      -26.5562       26.5562       208.927       235.483    
  36  0.378001     -0.972857      -36.5243       36.5243       206.991       243.516    
  37  0.936484     -0.656225E-01  -2.46369       2.46369       181.994       184.457    
  38  0.458232     -0.780381      -29.2981       29.2981       250.289       279.587    
  39  0.286796      -1.24898      -46.8910       46.8910       221.702       268.593    
  40  0.524458     -0.645389      -24.2300       24.2300       214.200       238.430    
  41  0.126679      -2.06610      -77.5682       77.5682       244.431       322.000    
  42  0.645270     -0.438086      -16.4472       16.4472       251.224       267.672    
  43  0.996049     -0.395919E-02 -0.148641      0.148641       182.994       183.143    
  44  0.470695     -0.753545      -28.2906       28.2906       188.172       216.463    
  45  0.783048     -0.244561      -9.18162       9.18162       248.738       257.919    
  46  0.682425     -0.382103      -14.3454       14.3454       196.339       210.684    
  47  0.623779     -0.471960      -17.7189       17.7189       254.170       271.889    
  48  0.138146      -1.97945      -74.3150       74.3150       243.859       318.174    
  49  0.317697      -1.14666      -43.0492       43.0492       251.161       294.211    
  50  0.215616      -1.53426      -57.6010       57.6010       250.289       307.890    
  51  0.392653     -0.934829      -35.0966       35.0966       197.890       232.987    
  52  0.311957      -1.16489      -43.7338       43.7338       183.049       226.783    
  53  0.665567     -0.407116      -15.2845       15.2845       250.810       266.094    
  54  0.124333      -2.08479      -78.2699       78.2699       254.890       333.160    
  55  0.175373      -1.74084      -65.3569       65.3569       250.289       315.646    
  56  0.712195E-01  -2.64199      -99.1890       99.1890       260.067       359.256    
  57  0.626551E-01  -2.77011      -103.999       103.999       261.740       365.739    
  58  0.869671     -0.139640      -5.24255       5.24255       229.865       235.108    
  59  0.112950      -2.18081      -81.8747       81.8747       207.128       289.003    
  60  0.837299     -0.177574      -6.66670       6.66670       250.401       257.068    
  61  0.380546     -0.966149      -36.2724       36.2724       236.903       273.175    
  62  0.225371      -1.49001      -55.9398       55.9398       252.992       308.932    
  63  0.556139     -0.586737      -22.0280       22.0280       186.965       208.993    
  64  0.909618     -0.947309E-01  -3.55651       3.55651       253.404       256.961    
  65  0.432012     -0.839301      -31.5102       31.5102       250.873       282.383    
  66  0.554192     -0.590244      -22.1597       22.1597       181.022       203.181    
  67  0.264884      -1.32846      -49.8749       49.8749       250.354       300.229    
  68  0.667330     -0.404471      -15.1852       15.1852       248.098       263.284    
  69  0.445504     -0.808549      -30.3556       30.3556       212.685       243.041    
  70  0.194275      -1.63848      -61.5141       61.5141       226.033       287.547    
  71  0.886150     -0.120869      -4.53780       4.53780       244.735       249.273    
  72  0.487114     -0.719257      -27.0033       27.0033       251.012       278.015    
  73  0.195816E-01  -3.93317      -147.664       147.664       185.336       333.000    
loop,thermsimp(1:2)       63   18.1173       7.04746    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    182        184.95          0.86          1.12         23.62          0.11          0.05         25.76
Just calling func    0   0         25.76


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    183        194.55          0.86          1.12         23.57          0.18          0.05         25.77
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    184.95
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    37.5433               217
loop is:       63
neval is:      182
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       63      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    75.0866      0.500000    
T0,tstep,tfreq (these do not change):             72
current SAtemp,tstepnext are:    37.5433               217
loop is:       64
neval is:      182


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      217
neval,tstepnext:      182     217

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.816548     -0.202670      -7.60888       7.60888       182.994       190.603    
   2  0.209930      -1.56098      -58.6044       58.6044       181.994       240.598    
   3  0.710991     -0.341096      -12.8059       12.8059       182.465       195.271    
   4  0.967365     -0.331789E-01  -1.24565       1.24565       189.837       191.083    
   5  0.650635E-01  -2.73239      -102.583       102.583       194.808       297.391    
   6  0.578340     -0.547593      -20.5585       20.5585       194.261       214.819    
   7  0.928890E-01  -2.37635      -89.2160       89.2160       191.566       280.782    
   8  0.486974     -0.719546      -27.0141       27.0141       188.593       215.607    
   9  0.560625     -0.578703      -21.7264       21.7264       183.173       204.899    
  10  0.552834     -0.592698      -22.2518       22.2518       200.132       222.384    
  11  0.744529E-01  -2.59759      -97.5221       97.5221       181.022       278.544    
  12  0.937600     -0.644318E-01  -2.41898       2.41898       186.996       189.415    
  13  0.154459      -1.86783      -70.1244       70.1244       180.815       250.939    
  14  0.186893E-02  -6.28239      -235.862       235.862       202.842       438.704    
  15  0.250797      -1.38311      -51.9266       51.9266       201.825       253.752    
  16  0.924847E-01  -2.38071      -89.3798       89.3798       186.965       276.345    
  17  0.476680     -0.740911      -27.8162       27.8162       183.839       211.655    
  18  0.266527      -1.32228      -49.6427       49.6427       196.339       245.981    
  19  0.369755     -0.994916      -37.3524       37.3524       209.714       247.066    
  20  0.595561     -0.518252      -19.4569       19.4569       202.861       222.318    
  21  0.636070     -0.452447      -16.9864       16.9864       192.862       209.848    
  22  0.447294     -0.804540      -30.2051       30.2051       188.172       218.377    
  23  0.964945     -0.356839E-01  -1.33969       1.33969       212.216       213.555    
  24  0.752421     -0.284460      -10.6796       10.6796       210.105       220.785    
  25  0.705556     -0.348769      -13.0939       13.0939       183.049       196.143    
  26  0.943467     -0.581939E-01  -2.18479       2.18479       188.759       190.944    
  27  0.272564      -1.29988      -48.8018       48.8018       187.830       236.632    
  28  0.215815      -1.53333      -57.5664       57.5664       197.890       255.457    
  29  0.756955     -0.278452      -10.4540       10.4540       229.865       240.319    
  30  0.538381     -0.619189      -23.2464       23.2464       208.927       232.173    
  31  0.182967      -1.69845      -63.7654       63.7654       232.534       296.300    
  32  0.644758     -0.438881      -16.4770       16.4770       194.719       211.196    
  33  0.939477     -0.624320E-01  -2.34390       2.34390       196.531       198.875    
  34  0.663186     -0.410699      -15.4190       15.4190       214.200       229.619    
  35  0.795014     -0.229396      -8.61229       8.61229       176.615       185.227    
  36  0.630792     -0.460779      -17.2992       17.2992       212.685       229.984    
  37  0.151039      -1.89022      -70.9650       70.9650       206.991       277.956    
  38  0.668306     -0.403009      -15.1303       15.1303       196.829       211.959    
  39  0.683820     -0.380061      -14.2688       14.2688       244.735       259.004    
  40  0.122229      -2.10186      -78.9107       78.9107       229.060       307.971    
  41  0.664453     -0.408791      -15.3473       15.3473       206.532       221.880    
  42  0.548687     -0.600228      -22.5345       22.5345       182.339       204.873    
  43  0.931535     -0.709210E-01  -2.66261       2.66261       253.404       256.067    
  44  0.139742      -1.96796      -73.8837       73.8837       250.401       324.285    
  45  0.429142     -0.845967      -31.7604       31.7604       248.738       280.498    
  46  0.531147     -0.632717      -23.7543       23.7543       186.491       210.245    
  47  0.575558     -0.552416      -20.7395       20.7395       201.853       222.592    
  48  0.336537      -1.08905      -40.8864       40.8864       248.098       288.985    
  49  0.324486      -1.12551      -42.2555       42.2555       250.810       293.065    
  50  0.652768     -0.426534      -16.0135       16.0135       251.224       267.238    
  51  0.537860     -0.620158      -23.2828       23.2828       221.702       244.984    
  52  0.415288     -0.878782      -32.9924       32.9924       254.170       287.163    
  53  0.771827     -0.258995      -9.72354       9.72354       236.903       246.627    
  54  0.537995     -0.619906      -23.2733       23.2733       251.012       274.285    
  55  0.438537     -0.824310      -30.9473       30.9473       250.289       281.236    
  56  0.872114     -0.136835      -5.13723       5.13723       250.873       256.010    
  57  0.974519E-01  -2.32840      -87.4157       87.4157       226.033       313.449    
  58  0.245035      -1.40635      -52.7992       52.7992       207.128       259.927    
  59  0.285418      -1.25380      -47.0718       47.0718       205.251       252.323    
  60  0.598735     -0.512936      -19.2573       19.2573       251.161       270.419    
  61  0.440039     -0.820892      -30.8190       30.8190       250.354       281.173    
  62  0.115587      -2.15774      -81.0085       81.0085       191.170       272.179    
  63  0.479716     -0.734560      -27.5778       27.5778       250.289       277.867    
  64  0.423297     -0.859681      -32.2753       32.2753       252.992       285.268    
  65  0.385689E-01  -3.25531      -122.215       122.215       250.289       372.504    
  66  0.504564     -0.684061      -25.6819       25.6819       243.859       269.541    
  67  0.406483     -0.900213      -33.7970       33.7970       244.431       278.228    
  68  0.362573E-01  -3.31712      -124.535       124.535       220.149       344.685    
  69  0.666448E-03  -7.31355      -274.575       274.575       185.336       459.911    
  70  0.428061     -0.848489      -31.8551       31.8551       254.890       286.745    
  71  0.324089      -1.12674      -42.3015       42.3015       212.336       254.637    
  72  0.491354     -0.710591      -26.6779       26.6779       260.067       286.745    
  73  0.610139E-02  -5.09924      -191.442       191.442       184.949       376.391    
loop,thermsimp(1:2)       64   7.60888       58.6044    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    184        237.97          0.85          1.12         23.68          0.09          0.05         25.79
Just calling func    0   0         25.79


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    185        268.85          0.84          1.13         23.61          0.13          0.05         25.77
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    237.97
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    37.5433               217
loop is:       64
neval is:      184
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       64      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    75.0866      0.500000    
T0,tstep,tfreq (these do not change):             72
current SAtemp,tstepnext are:    37.5433               217
loop is:       65
neval is:      184


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      217
neval,tstepnext:      184     217

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.367522      -1.00097      -37.5798       37.5798       176.615       214.195    
   2  0.298218      -1.20993      -45.4248       45.4248       186.996       232.420    
   3  0.374092     -0.983254      -36.9146       36.9146       182.994       219.909    
   4  0.417366     -0.873791      -32.8050       32.8050       188.759       221.564    
   5  0.299382      -1.20604      -45.2786       45.2786       189.837       235.116    
   6  0.373029     -0.986099      -37.0214       37.0214       182.465       219.486    
   7  0.628224     -0.464858      -17.4523       17.4523       183.049       200.501    
   8  0.111397      -2.19465      -82.3945       82.3945       196.531       278.926    
   9  0.983555     -0.165818E-01 -0.622535      0.622535       182.339       182.961    
  10  0.394578     -0.929938      -34.9129       34.9129       183.173       218.086    
  11  0.410639     -0.890042      -33.4151       33.4151       192.862       226.277    
  12  0.700680     -0.355705      -13.3543       13.3543       186.491       199.845    
  13  0.223946      -1.49635      -56.1780       56.1780       194.719       250.897    
  14  0.651113E-01  -2.73166      -102.555       102.555       183.839       286.394    
  15  0.704010     -0.350963      -13.1763       13.1763       196.829       210.005    
  16  0.172411      -1.75787      -65.9964       65.9964       212.216       278.212    
  17  0.567412     -0.566670      -21.2747       21.2747       194.261       215.536    
  18  0.186334      -1.68021      -63.0807       63.0807       188.593       251.673    
  19  0.677524     -0.389310      -14.6160       14.6160       188.172       202.788    
  20  0.362270      -1.01537      -38.1202       38.1202       210.105       248.225    
  21  0.603880     -0.504381      -18.9361       18.9361       206.532       225.468    
  22  0.782208     -0.245635      -9.22194       9.22194       202.861       212.083    
  23  0.129808      -2.04170      -76.6522       76.6522       200.132       276.784    
  24  0.284816      -1.25591      -47.1511       47.1511       201.853       249.004    
  25  0.246930      -1.39865      -52.5100       52.5100       214.200       266.710    
  26  0.256917      -1.35900      -51.0214       51.0214       212.685       263.707    
  27  0.240545      -1.42485      -53.4935       53.4935       208.927       262.420    
  28  0.218018      -1.52318      -57.1851       57.1851       187.830       245.016    
  29  0.235583E-01  -3.74828      -140.723       140.723       229.865       370.588    
  30  0.114660      -2.16578      -81.3106       81.3106       181.994       263.304    
  31  0.119129      -2.12755      -79.8753       79.8753       221.702       301.577    
  32  0.471707     -0.751398      -28.2100       28.2100       196.339       224.549    
  33  0.607413     -0.498546      -18.7170       18.7170       236.903       255.620    
  34  0.568731     -0.564347      -21.1874       21.1874       209.714       230.901    
  35  0.587492     -0.531893      -19.9690       19.9690       180.815       200.784    
  36  0.411259     -0.888533      -33.3585       33.3585       205.251       238.610    
  37  0.836192     -0.178897      -6.71637       6.71637       201.825       208.541    
  38  0.152977      -1.87747      -70.4863       70.4863       212.336       282.822    
  39  0.941831     -0.599291E-01  -2.24994       2.24994       197.890       200.140    
  40  0.936595     -0.655045E-01  -2.45926       2.45926       250.873       253.332    
  41  0.856621     -0.154759      -5.81017       5.81017       253.404       259.214    
  42  0.484786     -0.724047      -27.1831       27.1831       244.735       271.918    
  43  0.188261      -1.66993      -62.6945       62.6945       207.128       269.823    
  44  0.957606     -0.433189E-01  -1.62634       1.62634       251.224       252.851    
  45  0.234891      -1.44863      -54.3865       54.3865       243.859       298.245    
  46  0.758920     -0.275858      -10.3566       10.3566       251.161       261.518    
  47  0.135340      -1.99997      -75.0854       75.0854       191.170       266.255    
  48  0.779121E-01  -2.55217      -95.8170       95.8170       251.012       346.829    
  49  0.573767     -0.555531      -20.8565       20.8565       186.965       207.821    
  50  0.982512     -0.176424E-01 -0.662354      0.662354       250.289       250.951    
  51  0.109579      -2.21111      -83.0124       83.0124       206.991       290.004    
  52  0.714543     -0.336113      -12.6188       12.6188       244.431       257.050    
  53  0.573216     -0.556492      -20.8925       20.8925       181.022       201.914    
  54  0.389116     -0.943877      -35.4363       35.4363       248.738       284.174    
  55  0.149817      -1.89834      -71.2701       71.2701       191.566       262.836    
  56  0.623269     -0.472778      -17.7496       17.7496       250.354       268.103    
  57  0.682320E-02  -4.98743      -187.244       187.244       250.289       437.533    
  58  0.641698     -0.443637      -16.6556       16.6556       252.992       269.648    
  59  0.233363      -1.45516      -54.6316       54.6316       254.890       309.522    
  60  0.881483     -0.126150      -4.73609       4.73609       260.067       264.803    
  61  0.264921      -1.32832      -49.8696       49.8696       254.170       304.040    
  62  0.941652     -0.601200E-01  -2.25710       2.25710       248.098       250.356    
  63  0.179971      -1.71496      -64.3852       64.3852       250.810       315.195    
  64  0.381207E-01  -3.26700      -122.654       122.654       232.534       355.188    
  65  0.998657     -0.134405E-02 -0.504601E-01  0.504601E-01   194.808       194.859    
  66  0.553871     -0.590823      -22.1815       22.1815       229.060       251.241    
  67  0.599651     -0.511408      -19.2000       19.2000       226.033       245.233    
  68  0.834589     -0.180815      -6.78841       6.78841       250.401       257.190    
  69  0.622560     -0.473915      -17.7923       17.7923       220.149       237.942    
  70  0.437672E-03  -7.73404      -290.361       290.361       250.289       540.650    
  71  0.881230     -0.126437      -4.74686       4.74686       184.949       189.695    
  72  0.793726     -0.231017      -8.67315       8.67315       202.842       211.515    
  73  0.499689     -0.693770      -26.0464       26.0464       237.969       264.016    
loop,thermsimp(1:2)       65   37.5798       45.4248    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    186        184.66          0.86          1.12         23.93          0.02          0.05         25.99
Just calling func    0   0         25.99


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    187        191.22          0.87          1.12         23.68          0.10          0.04         25.80
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    184.66
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    37.5433               217
loop is:       65
neval is:      186
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       65      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    75.0866      0.500000    
T0,tstep,tfreq (these do not change):             72
current SAtemp,tstepnext are:    37.5433               217
loop is:       66
neval is:      186


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      217
neval,tstepnext:      186     217

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.255462      -1.36468      -51.2346       51.2346       182.339       233.573    
   2  0.513427E-01  -2.96923      -111.475       111.475       184.949       296.423    
   3  0.288453      -1.24322      -46.6748       46.6748       194.808       241.483    
   4  0.107044      -2.23452      -83.8911       83.8911       186.491       270.382    
   5  0.756779     -0.278684      -10.4627       10.4627       197.890       208.353    
   6  0.333762      -1.09733      -41.1973       41.1973       183.049       224.246    
   7  0.270335      -1.30809      -49.1102       49.1102       180.815       229.925    
   8  0.666278E-01  -2.70863      -101.691       101.691       181.022       282.713    
   9  0.517510     -0.658727      -24.7308       24.7308       188.172       212.903    
  10  0.719680     -0.328949      -12.3498       12.3498       186.965       199.315    
  11  0.401542     -0.912442      -34.2561       34.2561       201.825       236.081    
  12  0.408125     -0.896181      -33.6456       33.6456       196.829       230.474    
  13  0.481086     -0.731710      -27.4708       27.4708       202.842       230.313    
  14  0.166952E-01  -4.09263      -153.651       153.651       202.861       356.512    
  15  0.913266     -0.907286E-01  -3.40625       3.40625       176.615       180.021    
  16  0.972084     -0.283134E-01  -1.06298       1.06298       194.261       195.324    
  17  0.889421     -0.117184      -4.39949       4.39949       183.173       187.572    
  18  0.171754      -1.76169      -66.1398       66.1398       182.465       248.605    
  19  0.925876     -0.770155E-01  -2.89141       2.89141       182.994       185.886    
  20  0.992897     -0.712866E-02 -0.267633      0.267633       188.759       189.027    
  21  0.118575E-01  -4.43479      -166.497       166.497       196.339       362.836    
  22  0.492413     -0.708438      -26.5971       26.5971       206.532       233.129    
  23  0.952433     -0.487360E-01  -1.82971       1.82971       192.862       194.691    
  24  0.591826     -0.524543      -19.6931       19.6931       209.714       229.407    
  25  0.762199     -0.271548      -10.1948       10.1948       186.996       197.190    
  26  0.613492     -0.488588      -18.3432       18.3432       189.837       208.180    
  27  0.134863      -2.00350      -75.2180       75.2180       220.149       295.367    
  28  0.633670     -0.456227      -17.1283       17.1283       205.251       222.380    
  29  0.829625     -0.186782      -7.01240       7.01240       187.830       194.843    
  30  0.148219      -1.90906      -71.6726       71.6726       226.033       297.705    
  31  0.198093      -1.61902      -60.7833       60.7833       210.105       270.889    
  32  0.321318      -1.13532      -42.6238       42.6238       201.853       244.476    
  33  0.475408     -0.743582      -27.9165       27.9165       248.098       276.015    
  34  0.196520      -1.62699      -61.0827       61.0827       194.719       255.801    
  35  0.637413     -0.450337      -16.9072       16.9072       250.289       267.196    
  36  0.596751     -0.516255      -19.3819       19.3819       229.060       248.442    
  37  0.351361      -1.04594      -39.2681       39.2681       188.593       227.861    
  38  0.111764      -2.19136      -82.2710       82.2710       251.224       333.495    
  39  0.213579      -1.54375      -57.9574       57.9574       250.873       308.830    
  40  0.799647     -0.223585      -8.39414       8.39414       236.903       245.297    
  41  0.670682     -0.399460      -14.9971       14.9971       244.431       259.429    
  42  0.104235      -2.26111      -84.8895       84.8895       250.401       335.291    
  43  0.607160E-01  -2.80155      -105.179       105.179       253.404       358.583    
  44  0.462312     -0.771516      -28.9653       28.9653       251.161       280.127    
  45  0.269658      -1.31060      -49.2042       49.2042       208.927       258.131    
  46  0.678606     -0.387714      -14.5561       14.5561       191.566       206.122    
  47  0.669051     -0.401895      -15.0885       15.0885       181.994       197.082    
  48  0.551912     -0.594367      -22.3145       22.3145       212.685       235.000    
  49  0.116070E-01  -4.45614      -167.298       167.298       237.969       405.268    
  50  0.911337     -0.928428E-01  -3.48563       3.48563       260.067       263.553    
  51  0.302404      -1.19599      -44.9014       44.9014       191.170       236.071    
  52  0.527926     -0.638800      -23.9826       23.9826       214.200       238.183    
  53  0.204835      -1.58555      -59.5268       59.5268       250.354       309.880    
  54  0.761388     -0.272612      -10.2347       10.2347       252.992       263.227    
  55  0.189928      -1.66111      -62.3636       62.3636       207.128       269.492    
  56  0.423830     -0.858422      -32.2280       32.2280       244.735       276.963    
  57  0.895148     -0.110767      -4.15855       4.15855       200.132       204.291    
  58  0.109823      -2.20889      -82.9289       82.9289       212.216       295.145    
  59  0.960076     -0.407431E-01  -1.52963       1.52963       196.531       198.061    
  60  0.694180     -0.365024      -13.7042       13.7042       212.336       226.040    
  61  0.302866      -1.19446      -44.8441       44.8441       248.738       293.582    
  62  0.213503      -1.54410      -57.9707       57.9707       183.839       241.810    
  63  0.949162     -0.521754E-01  -1.95884       1.95884       206.991       208.950    
  64  0.912779     -0.912617E-01  -3.42627       3.42627       243.859       247.285    
  65  0.393978     -0.931461      -34.9701       34.9701       221.702       256.672    
  66  0.957683     -0.432380E-01  -1.62330       1.62330       254.170       255.794    
  67  0.785605     -0.241301      -9.05924       9.05924       254.890       263.949    
  68  0.670559     -0.399644      -15.0040       15.0040       250.810       265.814    
  69  0.793392     -0.231438      -8.68894       8.68894       251.012       259.701    
  70  0.594443     -0.520131      -19.5274       19.5274       232.534       252.062    
  71  0.298128      -1.21023      -45.4361       45.4361       229.865       275.301    
  72  0.233680      -1.45380      -54.5805       54.5805       250.289       304.869    
  73  0.410779     -0.889700      -33.4023       33.4023       184.656       218.058    
loop,thermsimp(1:2)       66   51.2346       111.475    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    188        184.70          0.86          1.12         23.61          0.12          0.05         25.75
Just calling func    0   0         25.75


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    189        192.69          0.86          1.12         23.74          0.02          0.04         25.79
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    184.70
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    37.5433               217
loop is:       66
neval is:      188
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       66      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    75.0866      0.500000    
T0,tstep,tfreq (these do not change):             72
current SAtemp,tstepnext are:    37.5433               217
loop is:       67
neval is:      188


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      217
neval,tstepnext:      188     217

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.297913      -1.21095      -45.4632       45.4632       176.615       222.078    
   2  0.840396     -0.173882      -6.52809       6.52809       182.994       189.522    
   3  0.165782      -1.79708      -67.4684       67.4684       183.173       250.641    
   4  0.516202E-01  -2.96384      -111.272       111.272       188.759       300.031    
   5  0.163201      -1.81278      -68.0576       68.0576       192.862       260.919    
   6  0.201529      -1.60182      -60.1376       60.1376       187.830       247.968    
   7  0.791805     -0.233441      -8.76413       8.76413       194.261       203.025    
   8  0.306466      -1.18265      -44.4005       44.4005       181.994       226.394    
   9  0.625963     -0.468465      -17.5877       17.5877       186.996       204.583    
  10  0.255827      -1.36325      -51.1811       51.1811       196.531       247.712    
  11  0.275269      -1.29001      -48.4311       48.4311       186.965       235.396    
  12  0.546374     -0.604451      -22.6931       22.6931       200.132       222.825    
  13  0.738275E-01  -2.60602      -97.8387       97.8387       191.566       289.405    
  14  0.459460     -0.777704      -29.1976       29.1976       189.837       219.035    
  15  0.245891      -1.40287      -52.6682       52.6682       197.890       250.559    
  16  0.818144E-01  -2.50330      -93.9822       93.9822       206.991       300.974    
  17  0.791963     -0.233241      -8.75665       8.75665       188.172       196.929    
  18  0.652560     -0.426852      -16.0254       16.0254       184.656       200.681    
  19  0.743237     -0.296740      -11.1406       11.1406       205.251       216.392    
  20  0.146095      -1.92350      -72.2145       72.2145       183.049       255.263    
  21  0.747148     -0.291492      -10.9436       10.9436       212.336       223.279    
  22  0.935024E-01  -2.36977      -88.9689       88.9689       188.593       277.562    
  23  0.924202     -0.788243E-01  -2.95933       2.95933       209.714       212.673    
  24  0.193934      -1.64024      -61.5799       61.5799       180.815       242.395    
  25  0.112499      -2.18481      -82.0249       82.0249       202.842       284.867    
  26  0.609079     -0.495807      -18.6142       18.6142       196.829       215.443    
  27  0.387822     -0.947210      -35.5614       35.5614       206.532       242.094    
  28  0.151976      -1.88403      -70.7329       70.7329       182.339       253.072    
  29  0.820125     -0.198299      -7.44479       7.44479       212.685       220.130    
  30  0.100865      -2.29397      -86.1233       86.1233       191.170       277.293    
  31  0.246930      -1.39865      -52.5100       52.5100       201.825       254.335    
  32  0.101973      -2.28305      -85.7131       85.7131       214.200       299.913    
  33  0.389401     -0.943145      -35.4088       35.4088       194.808       230.217    
  34  0.573635     -0.555762      -20.8651       20.8651       183.839       204.704    
  35  0.730896E-01  -2.61607      -98.2159       98.2159       201.853       300.069    
  36  0.260104      -1.34667      -50.5585       50.5585       236.903       287.462    
  37  0.562102     -0.576073      -21.6277       21.6277       243.859       265.486    
  38  0.159056      -1.83850      -69.0234       69.0234       229.060       298.083    
  39  0.779134E-02  -4.85474      -182.263       182.263       182.465       364.728    
  40  0.693208     -0.366425      -13.7568       13.7568       232.534       246.291    
  41  0.600279     -0.510361      -19.1606       19.1606       254.170       273.331    
  42  0.419387     -0.868962      -32.6237       32.6237       194.719       227.342    
  43  0.952036     -0.491524E-01  -1.84534       1.84534       221.702       223.547    
  44  0.613955     -0.487834      -18.3149       18.3149       208.927       227.242    
  45  0.842752     -0.171082      -6.42300       6.42300       244.431       250.854    
  46  0.733219     -0.310311      -11.6501       11.6501       251.012       262.662    
  47  0.776088     -0.253489      -9.51683       9.51683       252.992       262.509    
  48  0.965215     -0.354047E-01  -1.32921       1.32921       260.067       261.397    
  49  0.487812     -0.717826      -26.9496       26.9496       254.890       281.840    
  50  0.864492     -0.145613      -5.46678       5.46678       250.810       256.277    
  51  0.334607      -1.09480      -41.1024       41.1024       250.289       291.391    
  52  0.267438      -1.31887      -49.5146       49.5146       207.128       256.643    
  53  0.333561      -1.09793      -41.2199       41.2199       186.491       227.711    
  54  0.593184     -0.522250      -19.6070       19.6070       210.105       229.712    
  55  0.832475     -0.183352      -6.88365       6.88365       229.865       236.749    
  56  0.642050     -0.443089      -16.6350       16.6350       248.098       264.734    
  57  0.799223     -0.224116      -8.41404       8.41404       244.735       253.149    
  58  0.184219      -1.69163      -63.5095       63.5095       251.161       314.671    
  59  0.478229     -0.737666      -27.6944       27.6944       181.022       208.716    
  60  0.604888     -0.502712      -18.8735       18.8735       248.738       267.611    
  61  0.575395     -0.552698      -20.7501       20.7501       212.216       232.966    
  62  0.325892E-01  -3.42377      -128.540       128.540       220.149       348.689    
  63  0.759877     -0.274599      -10.3094       10.3094       184.949       195.258    
  64  0.214378      -1.54002      -57.8173       57.8173       226.033       283.850    
  65  0.668091     -0.403331      -15.1424       15.1424       250.289       265.431    
  66  0.601122     -0.508958      -19.1080       19.1080       250.873       269.981    
  67  0.378138     -0.972496      -36.5107       36.5107       250.354       286.864    
  68  0.849119     -0.163556      -6.14044       6.14044       251.224       257.365    
  69  0.426509     -0.852121      -31.9915       31.9915       250.401       282.393    
  70  0.558114E-01  -2.88578      -108.342       108.342       202.861       311.203    
  71  0.344448      -1.06581      -40.0141       40.0141       253.404       293.418    
  72  0.354132      -1.03809      -38.9731       38.9731       196.339       235.312    
  73  0.387730     -0.947445      -35.5702       35.5702       184.702       220.272    
loop,thermsimp(1:2)       67   45.4632       6.52809    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    190        227.10          0.83          1.11         23.58          0.21          0.05         25.78
Just calling func    0   0         25.78


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    191        304.00          0.86          1.11         23.53          0.19          0.05         25.73
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    227.10
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    37.5433               217
loop is:       67
neval is:      190
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       67      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    75.0866      0.500000    
T0,tstep,tfreq (these do not change):             72
current SAtemp,tstepnext are:    37.5433               217
loop is:       68
neval is:      190


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      217
neval,tstepnext:      190     217

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.944296E-02  -4.66249      -175.045       175.045       182.994       358.039    
   2  0.714357     -0.336373      -12.6286       12.6286       184.949       197.577    
   3  0.997096     -0.290808E-02 -0.109179      0.109179       188.172       188.281    
   4  0.905437     -0.993373E-01  -3.72945       3.72945       184.656       188.385    
   5  0.307060      -1.18071      -44.3278       44.3278       194.261       238.589    
   6  0.179061      -1.72003      -64.5755       64.5755       186.996       251.571    
   7  0.384312     -0.956301      -35.9027       35.9027       183.839       219.742    
   8  0.901101     -0.104138      -3.90970       3.90970       181.022       184.931    
   9  0.606170     -0.500594      -18.7940       18.7940       209.714       228.508    
  10  0.515234     -0.663133      -24.8962       24.8962       196.829       221.725    
  11  0.639447     -0.447152      -16.7876       16.7876       205.251       222.039    
  12  0.820429     -0.197928      -7.43086       7.43086       189.837       197.268    
  13  0.521739     -0.650587      -24.4252       24.4252       212.685       237.110    
  14  0.767979     -0.263993      -9.91117       9.91117       184.702       194.613    
  15  0.530366     -0.634187      -23.8095       23.8095       176.615       200.424    
  16  0.732471     -0.311332      -11.6884       11.6884       200.132       211.821    
  17  0.440461     -0.819933      -30.7830       30.7830       212.336       243.119    
  18  0.595715     -0.517993      -19.4472       19.4472       221.702       241.149    
  19  0.407958     -0.896592      -33.6610       33.6610       181.994       215.655    
  20  0.544683     -0.607550      -22.8095       22.8095       208.927       231.736    
  21  0.611386E-01  -2.79461      -104.919       104.919       194.719       299.638    
  22  0.135041      -2.00218      -75.1683       75.1683       186.491       261.659    
  23  0.547242     -0.602864      -22.6335       22.6335       210.105       232.739    
  24  0.214436      -1.53975      -57.8072       57.8072       194.808       252.616    
  25  0.340220      -1.07816      -40.4778       40.4778       212.216       252.694    
  26  0.270394      -1.30787      -49.1019       49.1019       196.339       245.441    
  27  0.605229     -0.502149      -18.8523       18.8523       186.965       205.817    
  28  0.630206     -0.461709      -17.3341       17.3341       229.865       247.199    
  29  0.942476     -0.592449E-01  -2.22425       2.22425       206.532       208.757    
  30  0.293125      -1.22716      -46.0716       46.0716       180.815       226.887    
  31  0.526210     -0.642056      -24.1049       24.1049       232.534       256.639    
  32  0.972201     -0.281927E-01  -1.05845       1.05845       196.531       197.589    
  33  0.570000     -0.562119      -21.1038       21.1038       187.830       208.934    
  34  0.752945     -0.283763      -10.6534       10.6534       197.890       208.544    
  35  0.333005      -1.09960      -41.2825       41.2825       183.173       224.455    
  36  0.430444     -0.842939      -31.6467       31.6467       244.431       276.078    
  37  0.106505      -2.23957      -84.0807       84.0807       182.339       266.419    
  38  0.327953      -1.11488      -41.8564       41.8564       244.735       286.592    
  39  0.586631     -0.533359      -20.0241       20.0241       201.825       221.849    
  40  0.563274     -0.573989      -21.5495       21.5495       183.049       204.598    
  41  0.802100     -0.220522      -8.27911       8.27911       250.810       259.089    
  42  0.594871     -0.519411      -19.5004       19.5004       207.128       226.629    
  43  0.816066     -0.203261      -7.63107       7.63107       251.224       258.856    
  44  0.170795E-01  -4.06987      -152.797       152.797       192.862       345.658    
  45  0.554958     -0.588864      -22.1079       22.1079       260.067       282.175    
  46  0.674023     -0.394492      -14.8105       14.8105       252.992       267.803    
  47  0.371758     -0.989512      -37.1495       37.1495       251.012       288.161    
  48  0.309440      -1.17299      -44.0380       44.0380       248.098       292.136    
  49  0.182337      -1.70190      -63.8949       63.8949       250.289       314.184    
  50  0.443504     -0.813049      -30.5245       30.5245       243.859       274.383    
  51  0.407824     -0.896918      -33.6733       33.6733       248.738       282.411    
  52  0.140254      -1.96430      -73.7462       73.7462       250.873       324.619    
  53  0.801043     -0.221840      -8.32861       8.32861       254.170       262.499    
  54  0.922923     -0.802099E-01  -3.01134       3.01134       191.170       194.181    
  55  0.982391     -0.177663E-01 -0.667005      0.667005       188.593       189.260    
  56  0.830509     -0.185717      -6.97243       6.97243       254.890       261.862    
  57  0.459056     -0.778583      -29.2306       29.2306       250.401       279.632    
  58  0.918078     -0.854734E-01  -3.20895       3.20895       226.033       229.242    
  59  0.858811E-01  -2.45479      -92.1610       92.1610       202.842       295.003    
  60  0.642813E-01  -2.74449      -103.037       103.037       250.354       353.391    
  61  0.328642      -1.11279      -41.7777       41.7777       236.903       278.681    
  62  0.238578      -1.43306      -53.8018       53.8018       191.566       245.368    
  63  0.183249      -1.69691      -63.7076       63.7076       250.289       313.996    
  64  0.575307     -0.552852      -20.7559       20.7559       253.404       274.160    
  65  0.509614     -0.674103      -25.3080       25.3080       229.060       254.368    
  66  0.528199     -0.638283      -23.9632       23.9632       214.200       238.164    
  67  0.114575      -2.16652      -81.3384       81.3384       188.759       270.097    
  68  0.227493      -1.48064      -55.5880       55.5880       201.853       257.441    
  69  0.451305     -0.795613      -29.8699       29.8699       206.991       236.861    
  70  0.873604     -0.135128      -5.07314       5.07314       202.861       207.935    
  71  0.457086     -0.782884      -29.3921       29.3921       251.161       280.554    
  72  0.587276     -0.532261      -19.9828       19.9828       220.149       240.132    
  73  0.193860E-01  -3.94320      -148.041       148.041       227.103       375.144    
loop,thermsimp(1:2)       68   175.045       12.6286    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    192        182.46          0.86          1.12         23.57          0.21          0.05         25.82
Just calling func    0   0         25.82


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    193        181.59          0.86          1.12         23.61          0.22          0.05         25.86
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    181.59
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    37.5433               217
loop is:       68
neval is:      192
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       68      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    75.0866      0.500000    
T0,tstep,tfreq (these do not change):             72
current SAtemp,tstepnext are:    37.5433               217
loop is:       69
neval is:      192


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      217
neval,tstepnext:      192     217

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.521048     -0.651914      -24.4750       24.4750       181.022       205.497    
   2  0.554375     -0.589913      -22.1473       22.1473       188.172       210.320    
   3  0.404373     -0.905418      -33.9924       33.9924       184.656       218.648    
   4  0.632877     -0.457478      -17.1753       17.1753       188.593       205.768    
   5  0.395261     -0.928209      -34.8480       34.8480       191.170       226.018    
   6  0.715068     -0.335378      -12.5912       12.5912       184.702       197.293    
   7  0.918313     -0.852174E-01  -3.19934       3.19934       189.837       193.036    
   8  0.529514E-01  -2.93838      -110.317       110.317       184.949       295.265    
   9  0.284219      -1.25801      -47.2299       47.2299       196.531       243.761    
  10  0.809402     -0.211460      -7.93891       7.93891       176.615       184.554    
  11  0.604758     -0.502928      -18.8816       18.8816       183.049       201.930    
  12  0.624772     -0.470369      -17.6592       17.6592       186.965       204.624    
  13  0.622683     -0.473718      -17.7849       17.7849       202.861       220.646    
  14  0.491656     -0.709976      -26.6548       26.6548       197.890       224.545    
  15  0.823484     -0.194211      -7.29132       7.29132       206.532       213.824    
  16  0.185629E-01  -3.98659      -149.670       149.670       187.830       337.500    
  17  0.911253     -0.929346E-01  -3.48907       3.48907       200.132       203.621    
  18  0.825116     -0.192231      -7.21699       7.21699       181.994       189.211    
  19  0.902913     -0.102129      -3.83428       3.83428       183.839       187.673    
  20  0.869925     -0.139348      -5.23160       5.23160       196.829       202.060    
  21  0.135445      -1.99919      -75.0562       75.0562       201.825       276.881    
  22  0.516840     -0.660022      -24.7794       24.7794       205.251       230.031    
  23  0.127583      -2.05899      -77.3013       77.3013       183.173       260.474    
  24  0.237062E-01  -3.74202      -140.488       140.488       207.128       347.616    
  25  0.456233     -0.784753      -29.4622       29.4622       180.815       210.277    
  26  0.547397     -0.602581      -22.6229       22.6229       209.714       232.337    
  27  0.231746E-02  -6.06728      -227.786       227.786       226.033       453.819    
  28  0.467213     -0.760969      -28.5693       28.5693       208.927       237.496    
  29  0.397333     -0.922981      -34.6518       34.6518       210.105       244.757    
  30  0.291343      -1.23325      -46.3004       46.3004       206.991       253.292    
  31  0.964262     -0.363922E-01  -1.36628       1.36628       212.685       214.051    
  32  0.260485      -1.34521      -50.5036       50.5036       214.200       264.704    
  33  0.868574     -0.140902      -5.28994       5.28994       194.261       199.551    
  34  0.832573     -0.183235      -6.87924       6.87924       220.149       227.029    
  35  0.240383      -1.42552      -53.5188       53.5188       221.702       275.220    
  36  0.878342     -0.129719      -4.87008       4.87008       212.336       217.206    
  37  0.168707      -1.77959      -66.8118       66.8118       191.566       258.378    
  38  0.348015      -1.05551      -39.6274       39.6274       196.339       235.966    
  39  0.846224     -0.166971      -6.26866       6.26866       229.865       236.134    
  40  0.842580     -0.171286      -6.43065       6.43065       186.996       193.426    
  41  0.230401      -1.46794      -55.1112       55.1112       194.808       249.920    
  42  0.441962     -0.816531      -30.6553       30.6553       212.216       242.871    
  43  0.772036     -0.258724      -9.71336       9.71336       229.060       238.773    
  44  0.970063     -0.303946E-01  -1.14111       1.14111       232.534       233.676    
  45  0.610535     -0.493419      -18.5246       18.5246       201.853       220.377    
  46  0.548201     -0.601114      -22.5678       22.5678       251.224       273.792    
  47  0.322533      -1.13155      -42.4821       42.4821       250.810       293.292    
  48  0.194318E-01  -3.94084      -147.952       147.952       186.491       334.443    
  49  0.219930      -1.51445      -56.8573       56.8573       254.890       311.747    
  50  0.538995E-01  -2.92063      -109.650       109.650       254.170       363.821    
  51  0.189941      -1.66104      -62.3609       62.3609       182.339       244.700    
  52  0.339787      -1.07944      -40.5257       40.5257       252.992       293.518    
  53  0.783417     -0.244091      -9.16397       9.16397       188.759       197.923    
  54  0.347888      -1.05587      -39.6410       39.6410       253.404       293.045    
  55  0.511342     -0.670716      -25.1809       25.1809       243.859       269.040    
  56  0.656791     -0.420389      -15.7828       15.7828       244.431       260.214    
  57  0.433072E-01  -3.13944      -117.865       117.865       236.903       354.768    
  58  0.940019     -0.618557E-01  -2.32227       2.32227       250.401       252.724    
  59  0.560131     -0.579584      -21.7595       21.7595       251.161       272.921    
  60  0.335604      -1.09182      -40.9907       40.9907       260.067       301.058    
  61  0.677192     -0.389801      -14.6344       14.6344       248.738       263.372    
  62  0.166447      -1.79308      -67.3180       67.3180       244.735       312.053    
  63  0.966787     -0.337766E-01  -1.26809       1.26809       251.012       252.280    
  64  0.501486     -0.690179      -25.9116       25.9116       248.098       274.010    
  65  0.339741      -1.07957      -40.5307       40.5307       202.842       243.373    
  66  0.920721     -0.825986E-01  -3.10102       3.10102       194.719       197.820    
  67  0.215901      -1.53293      -57.5514       57.5514       250.289       307.840    
  68  0.259645      -1.34844      -50.6250       50.6250       250.289       300.914    
  69  0.927059     -0.757381E-01  -2.84346       2.84346       250.873       253.716    
  70  0.766870E-02  -4.87061      -182.859       182.859       192.862       375.720    
  71  0.398597     -0.919805      -34.5325       34.5325       250.354       284.886    
  72  0.870407     -0.138794      -5.21078       5.21078       182.994       188.205    
  73  0.571318     -0.559809      -21.0171       21.0171       181.591       202.608    
loop,thermsimp(1:2)       69   24.4750       22.1473    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    194        188.63          0.87          1.11         23.71          0.04          0.05         25.78
Just calling func    0   0         25.78


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    195        201.20          0.86          1.12         23.97          0.01          0.05         26.00
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    188.63
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    37.5433               217
loop is:       69
neval is:      194
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       69      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    75.0866      0.500000    
T0,tstep,tfreq (these do not change):             72
current SAtemp,tstepnext are:    37.5433               217
loop is:       70
neval is:      194


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      217
neval,tstepnext:      194     217

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.242177      -1.41809      -53.2396       53.2396       176.615       229.855    
   2  0.384023     -0.957054      -35.9310       35.9310       183.839       219.770    
   3  0.672379     -0.396933      -14.9022       14.9022       182.994       197.896    
   4  0.204591      -1.58674      -59.5715       59.5715       181.994       241.565    
   5  0.145151      -1.92998      -72.4578       72.4578       189.837       262.295    
   6  0.235757      -1.44495      -54.2483       54.2483       186.996       241.244    
   7  0.882595     -0.124889      -4.68875       4.68875       184.702       189.391    
   8  0.215562      -1.53451      -57.6105       57.6105       194.719       252.329    
   9  0.248905      -1.39068      -52.2108       52.2108       188.759       240.970    
  10  0.695481     -0.363152      -13.6339       13.6339       194.261       207.895    
  11  0.515786     -0.662063      -24.8560       24.8560       183.049       207.905    
  12  0.956817     -0.441428E-01  -1.65727       1.65727       196.829       198.486    
  13  0.256477      -1.36072      -51.0857       51.0857       181.591       232.676    
  14  0.870409     -0.138792      -5.21071       5.21071       200.132       205.343    
  15  0.296335      -1.21627      -45.6626       45.6626       186.965       232.627    
  16  0.563087     -0.574322      -21.5619       21.5619       181.022       202.584    
  17  0.860973     -0.149692      -5.61993       5.61993       188.593       194.213    
  18  0.336353      -1.08959      -40.9069       40.9069       180.815       221.722    
  19  0.432238     -0.838780      -31.4906       31.4906       188.172       219.663    
  20  0.411587     -0.887734      -33.3285       33.3285       206.532       239.861    
  21  0.685679     -0.377346      -14.1668       14.1668       212.685       226.852    
  22  0.178038E-01  -4.02835      -151.237       151.237       212.336       363.573    
  23  0.330516      -1.10710      -41.5642       41.5642       184.656       226.220    
  24  0.987115     -0.129685E-01 -0.486879      0.486879       201.853       202.340    
  25  0.702947     -0.352474      -13.2330       13.2330       202.861       216.094    
  26  0.159040      -1.83860      -69.0270       69.0270       197.890       266.918    
  27  0.329714      -1.10953      -41.6555       41.6555       191.170       232.826    
  28  0.542452     -0.611656      -22.9636       22.9636       220.149       243.113    
  29  0.484074     -0.725518      -27.2384       27.2384       205.251       232.490    
  30  0.574330     -0.554551      -20.8197       20.8197       209.714       230.533    
  31  0.987944     -0.121288E-01 -0.455357      0.455357       232.534       232.990    
  32  0.565195E-01  -2.87317      -107.868       107.868       196.339       304.207    
  33  0.662626     -0.411545      -15.4508       15.4508       229.865       245.316    
  34  0.462195     -0.771769      -28.9747       28.9747       208.927       237.902    
  35  0.413957     -0.881994      -33.1130       33.1130       229.060       262.173    
  36  0.627825     -0.465493      -17.4762       17.4762       212.216       229.692    
  37  0.373783E-01  -3.28667      -123.392       123.392       202.842       326.234    
  38  0.318481      -1.14419      -42.9568       42.9568       196.531       239.488    
  39  0.193037      -1.64487      -61.7540       61.7540       182.339       244.093    
  40  0.246573      -1.40010      -52.5644       52.5644       210.105       262.670    
  41  0.913643     -0.903152E-01  -3.39073       3.39073       194.808       198.199    
  42  0.593287     -0.522077      -19.6005       19.6005       251.012       270.612    
  43  0.323913      -1.12728      -42.3218       42.3218       250.401       292.723    
  44  0.270579E-01  -3.60978      -135.523       135.523       206.991       342.514    
  45  0.684823     -0.378595      -14.2137       14.2137       250.873       265.086    
  46  0.279340      -1.27532      -47.8799       47.8799       191.566       239.446    
  47  0.285511      -1.25348      -47.0596       47.0596       244.431       291.491    
  48  0.361874      -1.01646      -38.1612       38.1612       183.173       221.334    
  49  0.779291     -0.249370      -9.36219       9.36219       248.738       258.100    
  50  0.590933     -0.526053      -19.7498       19.7498       214.200       233.950    
  51  0.493821E-01  -3.00817      -112.937       112.937       243.859       356.795    
  52  0.736348     -0.306053      -11.4902       11.4902       251.161       262.652    
  53  0.300670      -1.20174      -45.1173       45.1173       251.224       296.342    
  54  0.329072      -1.11148      -41.7285       41.7285       248.098       289.827    
  55  0.238483      -1.43346      -53.8167       53.8167       221.702       275.518    
  56  0.296796      -1.21471      -45.6042       45.6042       201.825       247.429    
  57  0.878745     -0.129261      -4.85288       4.85288       250.354       255.207    
  58  0.493874     -0.705475      -26.4859       26.4859       253.404       279.890    
  59  0.112522      -2.18461      -82.0175       82.0175       250.810       332.827    
  60  0.642649     -0.442156      -16.6000       16.6000       252.992       269.592    
  61  0.688378     -0.373417      -14.0193       14.0193       184.949       198.968    
  62  0.879214     -0.128727      -4.83284       4.83284       250.289       255.122    
  63  0.621151E-01  -2.77877      -104.324       104.324       260.067       364.391    
  64  0.270748      -1.30657      -49.0528       49.0528       250.289       299.342    
  65  0.871636     -0.137384      -5.15784       5.15784       254.890       260.048    
  66  0.188105      -1.67075      -62.7256       62.7256       244.735       307.461    
  67  0.394507     -0.930118      -34.9197       34.9197       186.491       221.411    
  68  0.532895     -0.629431      -23.6309       23.6309       187.830       211.461    
  69  0.925318     -0.776179E-01  -2.91403       2.91403       207.128       210.042    
  70  0.306237      -1.18340      -44.4286       44.4286       236.903       281.332    
  71  0.214861E-01  -3.84035      -144.179       144.179       254.170       398.350    
  72  0.995041     -0.497146E-02 -0.186645      0.186645       192.862       193.048    
  73  0.391846     -0.936888      -35.1739       35.1739       188.629       223.803    
loop,thermsimp(1:2)       70   53.2396       35.9310    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    196        187.01          0.88          1.12         23.55          0.16          0.05         25.76
Just calling func    0   0         25.76


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    197        200.72          0.86          1.12         23.60          0.14          0.05         25.76
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    187.01
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    37.5433               217
loop is:       70
neval is:      196
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       70      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    75.0866      0.500000    
T0,tstep,tfreq (these do not change):             72
current SAtemp,tstepnext are:    37.5433               217
loop is:       71
neval is:      196


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      217
neval,tstepnext:      196     217

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.810305     -0.210344      -7.89701       7.89701       184.702       192.599    
   2  0.601567     -0.508218      -19.0802       19.0802       192.862       211.942    
   3  0.190401      -1.65862      -62.2702       62.2702       188.593       250.863    
   4  0.827263     -0.189632      -7.11942       7.11942       182.994       190.114    
   5  0.581677     -0.541840      -20.3425       20.3425       194.808       215.151    
   6  0.680336     -0.385169      -14.4605       14.4605       196.829       211.289    
   7  0.641383     -0.444128      -16.6740       16.6740       184.949       201.623    
   8  0.593931     -0.520992      -19.5598       19.5598       201.853       221.412    
   9  0.326400      -1.11963      -42.0347       42.0347       181.022       223.056    
  10  0.964323     -0.363286E-01  -1.36390       1.36390       200.132       201.496    
  11  0.481751     -0.730328      -27.4189       27.4189       194.261       221.680    
  12  0.230624E-01  -3.76955      -141.521       141.521       183.049       324.570    
  13  0.214859      -1.53777      -57.7332       57.7332       207.128       264.861    
  14  0.325804      -1.12146      -42.1033       42.1033       187.830       229.934    
  15  0.668745     -0.402353      -15.1057       15.1057       202.861       217.967    
  16  0.803263     -0.219073      -8.22472       8.22472       188.172       196.397    
  17  0.465531     -0.764577      -28.7047       28.7047       183.839       212.544    
  18  0.589796     -0.527978      -19.8221       19.8221       183.173       202.995    
  19  0.783335     -0.244195      -9.16790       9.16790       186.491       195.659    
  20  0.937099     -0.649659E-01  -2.43903       2.43903       180.815       183.254    
  21  0.504081     -0.685019      -25.7179       25.7179       188.629       214.347    
  22  0.368431E-01  -3.30109      -123.934       123.934       184.656       308.590    
  23  0.462712     -0.770651      -28.9328       28.9328       212.685       241.618    
  24  0.172447      -1.75767      -65.9886       65.9886       212.216       278.204    
  25  0.361979      -1.01617      -38.1504       38.1504       176.615       214.765    
  26  0.616189     -0.484202      -18.1786       18.1786       209.714       227.892    
  27  0.495582     -0.702023      -26.3563       26.3563       205.251       231.608    
  28  0.492859     -0.707532      -26.5631       26.5631       186.965       213.528    
  29  0.189027      -1.66586      -62.5421       62.5421       181.591       244.133    
  30  0.336237      -1.08994      -40.9199       40.9199       191.170       232.090    
  31  0.997382     -0.262184E-02 -0.984324E-01  0.984324E-01   232.534       232.633    
  32  0.629287     -0.463168      -17.3888       17.3888       214.200       231.589    
  33  0.226178      -1.48644      -55.8057       55.8057       208.927       264.733    
  34  0.522315     -0.649483      -24.3838       24.3838       191.566       215.950    
  35  0.238835E-02  -6.03715      -226.655       226.655       196.531       423.186    
  36  0.123092E-01  -4.39741      -165.093       165.093       206.532       371.626    
  37  0.488141     -0.717152      -26.9242       26.9242       188.759       215.683    
  38  0.925188     -0.777584E-01  -2.91931       2.91931       186.996       189.915    
  39  0.676413     -0.390952      -14.6776       14.6776       181.994       196.671    
  40  0.638827     -0.448121      -16.8240       16.8240       220.149       236.973    
  41  0.789998     -0.235725      -8.84989       8.84989       182.339       191.189    
  42  0.453703E-01  -3.09290      -116.118       116.118       229.865       345.983    
  43  0.866893     -0.142840      -5.36269       5.36269       201.825       207.188    
  44  0.122493E-01  -4.40228      -165.276       165.276       194.719       359.995    
  45  0.172311      -1.75846      -66.0183       66.0183       250.289       316.307    
  46  0.899580     -0.105827      -3.97309       3.97309       250.354       254.327    
  47  0.857845     -0.153332      -5.75659       5.75659       248.738       254.494    
  48  0.176813      -1.73266      -65.0499       65.0499       254.890       319.940    
  49  0.795271E-01  -2.53166      -95.0468       95.0468       229.060       324.107    
  50  0.461368     -0.773559      -29.0420       29.0420       189.837       218.879    
  51  0.727625     -0.317970      -11.9376       11.9376       251.161       263.099    
  52  0.106879      -2.23606      -83.9491       83.9491       210.105       294.054    
  53  0.169411      -1.77543      -66.6553       66.6553       250.873       317.528    
  54  0.150923      -1.89099      -70.9939       70.9939       197.890       268.884    
  55  0.970144     -0.303104E-01  -1.13795       1.13795       252.992       254.130    
  56  0.819386     -0.199200      -7.47862       7.47862       251.012       258.491    
  57  0.855509     -0.156059      -5.85897       5.85897       221.702       227.561    
  58  0.248182      -1.39359      -52.3200       52.3200       253.404       305.724    
  59  0.632181     -0.458580      -17.2166       17.2166       236.903       254.120    
  60  0.626090     -0.468262      -17.5801       17.5801       248.098       265.679    
  61  0.122722      -2.09783      -78.7595       78.7595       244.431       323.191    
  62  0.656077     -0.421477      -15.8236       15.8236       250.401       266.225    
  63  0.811645     -0.208692      -7.83499       7.83499       251.224       259.059    
  64  0.241419E-05  -12.9341      -485.591       485.591       250.289       735.879    
  65  0.450747     -0.796849      -29.9163       29.9163       196.339       226.255    
  66  0.299124      -1.20690      -45.3110       45.3110       244.735       290.046    
  67  0.156254      -1.85627      -69.6907       69.6907       202.842       272.533    
  68  0.323711      -1.12790      -42.3452       42.3452       250.810       293.155    
  69  0.447335     -0.804447      -30.2016       30.2016       206.991       237.193    
  70  0.457702     -0.781538      -29.3415       29.3415       243.859       273.200    
  71  0.532478     -0.630214      -23.6603       23.6603       212.336       235.996    
  72  0.847970E-01  -2.46749      -92.6379       92.6379       260.067       352.705    
  73  0.624219     -0.471254      -17.6924       17.6924       187.014       204.707    
loop,thermsimp(1:2)       71   7.89701       19.0802    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    198        183.15          0.86          1.12         23.65          0.10          0.05         25.78
Just calling func    0   0         25.78


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    199        196.36          0.86          1.12         23.58          0.19          0.05         25.80
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    183.15
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    37.5433               217
loop is:       71
neval is:      198
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       71      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    75.0866      0.500000    
T0,tstep,tfreq (these do not change):             72
current SAtemp,tstepnext are:    37.5433               217
loop is:       72
neval is:      198


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      217
neval,tstepnext:      198     217

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.870330     -0.138883      -5.21412       5.21412       180.815       186.029    
   2  0.470451     -0.754063      -28.3100       28.3100       186.996       215.306    
   3  0.615627     -0.485114      -18.2128       18.2128       182.994       201.207    
   4  0.291899      -1.23135      -46.2289       46.2289       182.339       228.567    
   5  0.584822     -0.536448      -20.1400       20.1400       184.702       204.842    
   6  0.681731     -0.383120      -14.3836       14.3836       186.491       200.875    
   7  0.680149     -0.385444      -14.4708       14.4708       188.172       202.643    
   8  0.560478     -0.578966      -21.7363       21.7363       181.994       203.730    
   9  0.392299     -0.935730      -35.1304       35.1304       200.132       235.263    
  10  0.586793     -0.533083      -20.0137       20.0137       184.949       204.962    
  11  0.461418     -0.773452      -29.0379       29.0379       183.173       212.211    
  12  0.142886      -1.94571      -73.0484       73.0484       187.014       260.063    
  13  0.960325     -0.404831E-01  -1.51987       1.51987       201.825       203.345    
  14  0.547176     -0.602984      -22.6380       22.6380       196.829       219.467    
  15  0.817596     -0.201386      -7.56071       7.56071       192.862       200.422    
  16  0.184065      -1.69247      -63.5408       63.5408       183.839       247.380    
  17  0.763954     -0.269247      -10.1084       10.1084       186.965       197.073    
  18  0.740640     -0.300240      -11.2720       11.2720       188.629       199.901    
  19  0.257299      -1.35751      -50.9656       50.9656       176.615       227.580    
  20  0.274950      -1.29117      -48.4747       48.4747       194.808       243.283    
  21  0.850599     -0.161814      -6.07504       6.07504       188.759       194.834    
  22  0.265651      -1.32557      -49.7664       49.7664       191.566       241.332    
  23  0.388810     -0.944665      -35.4658       35.4658       202.861       238.327    
  24  0.921262     -0.820106E-01  -3.07895       3.07895       189.837       192.916    
  25  0.622168     -0.474545      -17.8160       17.8160       201.853       219.669    
  26  0.831499     -0.184526      -6.92770       6.92770       194.261       201.189    
  27  0.777776     -0.251317      -9.43527       9.43527       181.022       190.457    
  28  0.519638     -0.654624      -24.5767       24.5767       196.339       220.916    
  29  0.343480      -1.06863      -40.1198       40.1198       221.702       261.821    
  30  0.379182     -0.969738      -36.4072       36.4072       209.714       246.121    
  31  0.509964     -0.673415      -25.2822       25.2822       187.830       213.113    
  32  0.457294E-01  -3.08501      -115.822       115.822       214.200       330.022    
  33  0.952238     -0.489400E-01  -1.83737       1.83737       205.251       207.089    
  34  0.198116      -1.61890      -60.7789       60.7789       191.170       251.949    
  35  0.863922     -0.146273      -5.49158       5.49158       232.534       238.026    
  36  0.765944     -0.266646      -10.0108       10.0108       212.336       222.346    
  37  0.849389     -0.163238      -6.12851       6.12851       220.149       226.278    
  38  0.488339     -0.716745      -26.9090       26.9090       206.991       233.900    
  39  0.969632     -0.308388E-01  -1.15779       1.15779       212.685       213.843    
  40  0.971690     -0.287184E-01  -1.07818       1.07818       181.591       182.669    
  41  0.690522     -0.370307      -13.9026       13.9026       188.593       202.495    
  42  0.266028      -1.32415      -49.7131       49.7131       236.903       286.616    
  43  0.581296     -0.542495      -20.3671       20.3671       252.992       273.359    
  44  0.636654     -0.451529      -16.9519       16.9519       250.354       267.306    
  45  0.947680     -0.537383E-01  -2.01751       2.01751       248.738       250.755    
  46  0.792806     -0.232176      -8.71667       8.71667       251.012       259.729    
  47  0.420588     -0.866101      -32.5163       32.5163       251.224       283.741    
  48  0.780043     -0.248407      -9.32601       9.32601       251.161       260.487    
  49  0.834700E-01  -2.48327      -93.2301       93.2301       208.927       302.157    
  50  0.707823     -0.345562      -12.9735       12.9735       207.128       220.102    
  51  0.836500     -0.178529      -6.70258       6.70258       248.098       254.801    
  52  0.111614      -2.19271      -82.3214       82.3214       250.401       332.723    
  53  0.690314     -0.370608      -13.9139       13.9139       197.890       211.804    
  54  0.200139      -1.60874      -60.3976       60.3976       202.842       263.240    
  55  0.182543E-01  -4.00336      -150.299       150.299       243.859       394.158    
  56  0.248611      -1.39187      -52.2553       52.2553       212.216       264.471    
  57  0.951106     -0.501293E-01  -1.88202       1.88202       244.735       246.617    
  58  0.576942     -0.550013      -20.6493       20.6493       250.810       271.459    
  59  0.335384      -1.09248      -41.0153       41.0153       210.105       251.121    
  60  0.137719E-01  -4.28512      -160.878       160.878       253.404       414.282    
  61  0.839758     -0.174642      -6.55664       6.55664       184.656       191.212    
  62  0.324640      -1.12504      -42.2377       42.2377       250.289       292.526    
  63  0.758550     -0.276346      -10.3749       10.3749       250.873       261.248    
  64  0.704737     -0.349931      -13.1376       13.1376       254.890       268.028    
  65  0.848812     -0.163918      -6.15402       6.15402       244.431       250.586    
  66  0.881053     -0.126637      -4.75437       4.75437       229.060       233.814    
  67  0.191937      -1.65059      -61.9685       61.9685       183.049       245.017    
  68  0.646624     -0.435990      -16.3685       16.3685       229.865       246.234    
  69  0.424145     -0.857680      -32.2001       32.2001       260.067       292.267    
  70  0.760934     -0.273209      -10.2572       10.2572       194.719       204.976    
  71  0.774467     -0.255580      -9.59531       9.59531       206.532       216.128    
  72  0.253405      -1.37276      -51.5381       51.5381       196.531       248.069    
  73  0.251414      -1.38065      -51.8343       51.8343       183.150       234.984    
loop,thermsimp(1:2)       72   5.21412       28.3100    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    200        182.29          0.86          1.12         23.69          0.06          0.05         25.78
Just calling func    0   0         25.78


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    201        195.53          0.86          1.12         23.60          0.14          0.05         25.77
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  200    195.53        1.430     -1.577      4.485     -102.6      1.049    
                      0.2190      1.631     -99.70      3.435     0.1259    
                       2.067     -1.563      1.276      0.000     -5.000    
                      -1.236      0.000      0.000      0.000     -1.221    

                      -2.500      9934.      8020.      0.000      0.000    
                     -0.5672     -6.717     -4.331     -8.334      3.715    
                      -14.47     -3.224      2550.      0.000      1877.    

                      0.1546E+05 0.1427E+05 -3895.     0.2165E+05  3518.    
                       6122.     0.1754     0.1079E-01  0.000    -0.3673    
                     -0.3578E-01-0.1172    -0.1140    -0.1929    -0.7799E-01

                      -1.469     0.1242E-01  0.000     0.6330E-01 0.7608E-02
                      0.8541E-01-0.3134E-01 0.5128E-01-0.7961E-01 0.9013E-01
                     -0.9698E-01 0.1958E-01-0.1217    -0.6136      0.000    

                      -1.290     -1.588     -2.915     -2.624    -0.9916E-01
                      0.4829      9.224      9.124    -0.1716E+05 -4.000    
                     -0.4247    -0.5006      9.498      8.392    -0.2131E+05

                      -4.000     0.2043    -0.3450      8.907      8.998    
                     -0.4128E+05 -7.000    -0.1773    -0.7088      9.523    
                       8.534    -0.2032E+05 -7.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    182.29
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    37.5433               217
loop is:       72
neval is:      200
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       72      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    75.0866      0.500000    
T0,tstep,tfreq (these do not change):             72
current SAtemp,tstepnext are:    37.5433               217
loop is:       73
neval is:      200


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      217
neval,tstepnext:      200     217

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.741909     -0.298528      -11.2077       11.2077       181.591       192.798    
   2  0.823468     -0.194230      -7.29205       7.29205       180.815       188.107    
   3  0.352913      -1.04153      -39.1027       39.1027       181.022       220.124    
   4  0.268511      -1.31486      -49.3643       49.3643       184.656       234.020    
   5  0.137541      -1.98383      -74.4797       74.4797       189.837       264.317    
   6  0.953738     -0.473661E-01  -1.77828       1.77828       188.759       190.537    
   7  0.366602      -1.00348      -37.6739       37.6739       186.965       224.639    
   8  0.861530     -0.149046      -5.59567       5.59567       188.629       194.225    
   9  0.190086      -1.66028      -62.3323       62.3323       192.862       255.194    
  10  0.931621     -0.708293E-01  -2.65917       2.65917       186.491       189.150    
  11  0.135562      -1.99833      -75.0239       75.0239       194.261       269.285    
  12  0.577052     -0.549824      -20.6422       20.6422       182.994       203.637    
  13  0.937511     -0.645266E-01  -2.42254       2.42254       188.593       191.015    
  14  0.836727     -0.178258      -6.69238       6.69238       188.172       194.865    
  15  0.124731      -2.08159      -78.1498       78.1498       201.825       279.975    
  16  0.830758     -0.185417      -6.96117       6.96117       181.994       188.955    
  17  0.925849     -0.770442E-01  -2.89250       2.89250       184.702       187.595    
  18  0.945668     -0.558633E-01  -2.09729       2.09729       184.949       187.046    
  19  0.700762     -0.355587      -13.3499       13.3499       194.719       208.069    
  20  0.585168E-01  -2.83844      -106.564       106.564       205.251       311.816    
  21  0.241985      -1.41888      -53.2694       53.2694       197.890       251.160    
  22  0.426115     -0.853047      -32.0262       32.0262       183.173       215.199    
  23  0.730656     -0.313813      -11.7816       11.7816       187.830       199.612    
  24  0.227460      -1.48078      -55.5934       55.5934       212.685       268.279    
  25  0.824070     -0.193500      -7.26462       7.26462       186.996       194.260    
  26  0.912829     -0.912064E-01  -3.42419       3.42419       206.532       209.957    
  27  0.130860      -2.03363      -76.3491       76.3491       196.829       273.178    
  28  0.126999      -2.06358      -77.4735       77.4735       201.853       279.326    
  29  0.394828E-01  -3.23189      -121.336       121.336       207.128       328.464    
  30  0.927793     -0.749466E-01  -2.81374       2.81374       196.339       199.153    
  31  0.161762      -1.82163      -68.3900       68.3900       212.336       280.726    
  32  0.510374     -0.672611      -25.2521       25.2521       220.149       245.401    
  33  0.930607     -0.719186E-01  -2.70006       2.70006       176.615       179.315    
  34  0.825283E-01  -2.49461      -93.6560       93.6560       182.339       275.995    
  35  0.569143     -0.563624      -21.1603       21.1603       229.060       250.220    
  36  0.732951     -0.310676      -11.6638       11.6638       206.991       218.655    
  37  0.554950     -0.588877      -22.1084       22.1084       183.150       205.258    
  38  0.614368     -0.487160      -18.2896       18.2896       200.132       218.422    
  39  0.127889      -2.05659      -77.2113       77.2113       232.534       309.746    
  40  0.510007     -0.673330      -25.2790       25.2790       202.861       228.140    
  41  0.206107      -1.57936      -59.2944       59.2944       191.566       250.861    
  42  0.812962E-01  -2.50966      -94.2208       94.2208       194.808       289.029    
  43  0.711913     -0.339799      -12.7572       12.7572       183.049       195.806    
  44  0.649899     -0.430939      -16.1789       16.1789       209.714       225.892    
  45  0.102708      -2.27587      -85.4436       85.4436       229.865       315.309    
  46  0.152702      -1.87927      -70.5539       70.5539       244.735       315.289    
  47  0.827734     -0.189064      -7.09809       7.09809       183.839       190.937    
  48  0.558329     -0.582808      -21.8805       21.8805       196.531       218.412    
  49  0.174746      -1.74442      -65.4914       65.4914       244.431       309.923    
  50  0.107247      -2.23262      -83.8201       83.8201       248.738       332.558    
  51  0.988891     -0.111711E-01 -0.419399      0.419399       210.105       210.525    
  52  0.388651     -0.945075      -35.4812       35.4812       191.170       226.651    
  53  0.580190     -0.544399      -20.4385       20.4385       248.098       268.537    
  54  0.519409E-01  -2.95765      -111.040       111.040       251.012       362.052    
  55  0.418368     -0.871393      -32.7150       32.7150       187.014       219.729    
  56  0.435950     -0.830228      -31.1695       31.1695       251.161       282.331    
  57  0.226091      -1.48682      -55.8200       55.8200       250.873       306.693    
  58  0.371316     -0.990702      -37.1942       37.1942       221.702       258.896    
  59  0.113770      -2.17358      -81.6034       81.6034       202.842       284.445    
  60  0.335886      -1.09098      -40.9592       40.9592       212.216       253.175    
  61  0.733883     -0.309406      -11.6161       11.6161       250.354       261.970    
  62  0.127704      -2.05804      -77.2658       77.2658       254.890       332.156    
  63  0.205687      -1.58140      -59.3710       59.3710       250.810       310.181    
  64  0.315213      -1.15451      -43.3440       43.3440       252.992       296.336    
  65  0.329345      -1.11065      -41.6975       41.6975       251.224       292.922    
  66  0.193213      -1.64396      -61.7198       61.7198       236.903       298.623    
  67  0.593921     -0.521008      -19.5604       19.5604       260.067       279.628    
  68  0.128520      -2.05167      -77.0265       77.0265       250.289       327.315    
  69  0.201122      -1.60384      -60.2136       60.2136       208.927       269.141    
  70  0.699786E-01  -2.65957      -99.8489       99.8489       214.200       314.049    
  71  0.830255     -0.186022      -6.98389       6.98389       250.401       257.385    
  72  0.266599      -1.32201      -49.6325       49.6325       243.859       293.491    
  73  0.170782      -1.76737      -66.3529       66.3529       182.286       248.639    
loop,thermsimp(1:2)       73   11.2077       7.29205    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    202        182.39          0.86          1.12         23.76          0.01          0.05         25.79
Just calling func    0   0         25.79


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    203        196.34          0.86          1.13         23.56          0.25          0.05         25.85
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    182.39
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    37.5433               217
loop is:       73
neval is:      202
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       73      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    75.0866      0.500000    
T0,tstep,tfreq (these do not change):             72
current SAtemp,tstepnext are:    37.5433               217
loop is:       74
neval is:      202


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      217
neval,tstepnext:      202     217

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.835960     -0.179175      -6.72682       6.72682       176.615       183.342    
   2  0.439366     -0.822423      -30.8765       30.8765       184.949       215.825    
   3  0.603094     -0.505682      -18.9850       18.9850       184.702       203.687    
   4  0.695854E-01  -2.66520      -100.060       100.060       180.815       280.875    
   5  0.273021      -1.29821      -48.7390       48.7390       181.994       230.733    
   6  0.418319     -0.871511      -32.7194       32.7194       186.491       219.211    
   7  0.688437     -0.373331      -14.0161       14.0161       188.759       202.775    
   8  0.400930     -0.913969      -34.3134       34.3134       183.839       218.152    
   9  0.569492     -0.563010      -21.1373       21.1373       188.593       209.730    
  10  0.812441     -0.207712      -7.79819       7.79819       181.591       189.389    
  11  0.222094      -1.50465      -56.4897       56.4897       188.629       245.119    
  12  0.695761     -0.362749      -13.6188       13.6188       186.996       200.614    
  13  0.909536E-01  -2.39741      -90.0066       90.0066       188.172       278.179    
  14  0.297191      -1.21338      -45.5542       45.5542       183.049       228.603    
  15  0.806729     -0.214767      -8.06307       8.06307       196.339       204.402    
  16  0.407021     -0.898891      -33.7473       33.7473       187.830       221.578    
  17  0.520426     -0.653107      -24.5198       24.5198       182.994       207.514    
  18  0.826852     -0.190129      -7.13808       7.13808       183.150       190.288    
  19  0.729268     -0.315714      -11.8529       11.8529       194.719       206.572    
  20  0.344086      -1.06687      -40.0536       40.0536       206.532       246.586    
  21  0.280849      -1.26994      -47.6777       47.6777       210.105       257.783    
  22  0.301244E-01  -3.50242      -131.492       131.492       183.173       314.665    
  23  0.503253     -0.686663      -25.7796       25.7796       196.531       222.311    
  24  0.549007     -0.599644      -22.5126       22.5126       200.132       222.645    
  25  0.814230     -0.205513      -7.71562       7.71562       206.991       214.707    
  26  0.641489     -0.443963      -16.6678       16.6678       187.014       203.682    
  27  0.248696      -1.39152      -52.2424       52.2424       181.022       233.264    
  28  0.684472     -0.379107      -14.2329       14.2329       186.965       201.198    
  29  0.815126     -0.204413      -7.67433       7.67433       209.714       217.388    
  30  0.388210     -0.946208      -35.5238       35.5238       191.170       226.694    
  31  0.670538     -0.399675      -15.0051       15.0051       202.861       217.867    
  32  0.851104     -0.161221      -6.05276       6.05276       184.656       190.709    
  33  0.381078     -0.964752      -36.2200       36.2200       220.149       256.369    
  34  0.776256     -0.253273      -9.50870       9.50870       182.286       191.795    
  35  0.168040      -1.78355      -66.9604       66.9604       229.060       296.020    
  36  0.229069      -1.47373      -55.3287       55.3287       191.566       246.895    
  37  0.917563     -0.860337E-01  -3.22999       3.22999       197.890       201.120    
  38  0.161815      -1.82130      -68.3777       68.3777       212.216       280.593    
  39  0.355170      -1.03516      -38.8633       38.8633       192.862       231.725    
  40  0.221709      -1.50639      -56.5548       56.5548       250.401       306.956    
  41  0.424436     -0.856993      -32.1744       32.1744       221.702       253.876    
  42  0.337698      -1.08560      -40.7571       40.7571       250.354       291.111    
  43  0.574481     -0.554289      -20.8098       20.8098       189.837       210.647    
  44  0.614536     -0.486888      -18.2794       18.2794       212.685       230.965    
  45  0.345602      -1.06247      -39.8886       39.8886       248.098       287.987    
  46  0.330006      -1.10864      -41.6222       41.6222       208.927       250.549    
  47  0.934389     -0.678626E-01  -2.54779       2.54779       194.261       196.809    
  48  0.884466     -0.122771      -4.60923       4.60923       196.829       201.438    
  49  0.928979     -0.736686E-01  -2.76576       2.76576       182.339       185.104    
  50  0.788461     -0.237672      -8.92299       8.92299       201.853       210.776    
  51  0.963462     -0.372219E-01  -1.39743       1.39743       260.067       261.465    
  52  0.630201     -0.461716      -17.3343       17.3343       201.825       219.159    
  53  0.797085     -0.226794      -8.51459       8.51459       212.336       220.850    
  54  0.389249     -0.943537      -35.4235       35.4235       251.161       286.585    
  55  0.660522     -0.414724      -15.5701       15.5701       202.842       218.412    
  56  0.520011     -0.653905      -24.5498       24.5498       194.808       219.358    
  57  0.270094      -1.30899      -49.1437       49.1437       251.224       300.368    
  58  0.218485      -1.52104      -57.1047       57.1047       243.859       300.963    
  59  0.391194     -0.938551      -35.2363       35.2363       252.992       288.229    
  60  0.740024     -0.301073      -11.3033       11.3033       236.903       248.206    
  61  0.184403      -1.69063      -63.4720       63.4720       250.873       314.345    
  62  0.309007E-01  -3.47698      -130.537       130.537       232.534       363.072    
  63  0.916682     -0.869952E-01  -3.26609       3.26609       244.431       247.698    
  64  0.268894      -1.31344      -49.3109       49.3109       250.810       300.121    
  65  0.705018     -0.349532      -13.1226       13.1226       205.251       218.374    
  66  0.748256     -0.290010      -10.8879       10.8879       214.200       225.088    
  67  0.828532     -0.188099      -7.06187       7.06187       244.735       251.797    
  68  0.336848      -1.08812      -40.8517       40.8517       229.865       270.717    
  69  0.686319     -0.376413      -14.1318       14.1318       250.289       264.420    
  70  0.731123     -0.313173      -11.7576       11.7576       207.128       218.886    
  71  0.793361     -0.231477      -8.69040       8.69040       254.890       263.580    
  72  0.755239     -0.280722      -10.5392       10.5392       248.738       259.277    
  73  0.962869     -0.378380E-01  -1.42057       1.42057       182.391       183.812    
loop,thermsimp(1:2)       74   6.72682       30.8765    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    204        184.34          0.86          1.13         23.42          0.30          0.05         25.76
Just calling func    0   0         25.76


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    205        231.73          0.86          1.12         23.48          0.23          0.05         25.75
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    184.34
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    37.5433               217
loop is:       74
neval is:      204
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       74      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    75.0866      0.500000    
T0,tstep,tfreq (these do not change):             72
current SAtemp,tstepnext are:    37.5433               217
loop is:       75
neval is:      204


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      217
neval,tstepnext:      204     217

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.374776     -0.981426      -36.8460       36.8460       176.615       213.461    
   2  0.269095      -1.31269      -49.2827       49.2827       182.391       231.674    
   3  0.301960      -1.19746      -44.9566       44.9566       182.339       227.295    
   4  0.927593     -0.751619E-01  -2.82183       2.82183       181.591       184.412    
   5  0.783450     -0.244048      -9.16236       9.16236       183.150       192.312    
   6  0.716705     -0.333091      -12.5053       12.5053       184.656       197.161    
   7  0.728578     -0.316661      -11.8885       11.8885       182.286       194.175    
   8  0.752541     -0.284300      -10.6735       10.6735       194.261       204.934    
   9  0.111710      -2.19185      -82.2892       82.2892       186.996       269.285    
  10  0.202752E-01  -3.89836      -146.357       146.357       197.890       344.248    
  11  0.967738     -0.327937E-01  -1.23118       1.23118       186.965       188.196    
  12  0.530869     -0.633240      -23.7739       23.7739       196.829       220.602    
  13  0.752699E-01  -2.58668      -97.1123       97.1123       188.759       285.871    
  14  0.658334     -0.418043      -15.6947       15.6947       187.014       202.709    
  15  0.383542     -0.958305      -35.9779       35.9779       184.702       220.680    
  16  0.280803      -1.27010      -47.6839       47.6839       196.339       244.023    
  17  0.976909     -0.233616E-01 -0.877071      0.877071       194.719       195.596    
  18  0.611898     -0.491189      -18.4409       18.4409       182.994       201.435    
  19  0.860469     -0.150278      -5.64194       5.64194       188.593       194.235    
  20  0.375446     -0.979641      -36.7790       36.7790       189.837       226.616    
  21  0.964573     -0.360702E-01  -1.35419       1.35419       201.853       203.207    
  22  0.865663     -0.144259      -5.41596       5.41596       206.991       212.407    
  23  0.498009     -0.697137      -26.1728       26.1728       184.949       211.121    
  24  0.732547     -0.311228      -11.6845       11.6845       209.714       221.398    
  25  0.293766      -1.22497      -45.9895       45.9895       202.861       248.851    
  26  0.805097     -0.216793      -8.13913       8.13913       183.839       191.978    
  27  0.236791      -1.44058      -54.0840       54.0840       205.251       259.335    
  28  0.759809     -0.274688      -10.3127       10.3127       202.842       213.155    
  29  0.279804      -1.27367      -47.8176       47.8176       207.128       254.946    
  30  0.862550     -0.147862      -5.55125       5.55125       201.825       207.376    
  31  0.784800     -0.242327      -9.09774       9.09774       186.491       195.589    
  32  0.231425      -1.46350      -54.9446       54.9446       194.808       249.753    
  33  0.839725     -0.174681      -6.55811       6.55811       212.336       218.894    
  34  0.204862      -1.58542      -59.5219       59.5219       187.830       247.352    
  35  0.741170     -0.299525      -11.2452       11.2452       196.531       207.776    
  36  0.838703     -0.175898      -6.60379       6.60379       200.132       206.736    
  37  0.287711      -1.24580      -46.7713       46.7713       214.200       260.972    
  38  0.937479     -0.645611E-01  -2.42384       2.42384       191.170       193.594    
  39  0.188655      -1.66783      -62.6160       62.6160       183.049       245.665    
  40  0.818317     -0.200505      -7.52763       7.52763       181.994       189.521    
  41  0.903487     -0.101493      -3.81039       3.81039       212.685       216.496    
  42  0.148828      -1.90496      -71.5187       71.5187       192.862       264.380    
  43  0.573616E-01  -2.85838      -107.313       107.313       181.022       288.335    
  44  0.792726E-01  -2.53486      -95.1671       95.1671       188.629       283.796    
  45  0.150401      -1.89445      -71.1240       71.1240       206.532       277.656    
  46  0.511444     -0.670518      -25.1735       25.1735       191.566       216.740    
  47  0.179810      -1.71585      -64.4188       64.4188       244.431       308.850    
  48  0.167282      -1.78808      -67.1303       67.1303       236.903       304.033    
  49  0.589016     -0.529302      -19.8717       19.8717       208.927       228.799    
  50  0.974997     -0.253206E-01 -0.950621      0.950621       244.735       245.686    
  51  0.750240     -0.287363      -10.7885       10.7885       221.702       232.490    
  52  0.695153     -0.363624      -13.6516       13.6516       220.149       233.801    
  53  0.166976      -1.78991      -67.1990       67.1990       210.105       277.304    
  54  0.228686      -1.47540      -55.3915       55.3915       248.738       304.129    
  55  0.728220     -0.317152      -11.9069       11.9069       260.067       271.974    
  56  0.321968      -1.13330      -42.5480       42.5480       254.890       297.438    
  57  0.494283     -0.704647      -26.4548       26.4548       250.289       276.743    
  58  0.398916     -0.919004      -34.5025       34.5025       229.865       264.367    
  59  0.130321      -2.03776      -76.5042       76.5042       188.172       264.676    
  60  0.131470E-01  -4.33156      -162.621       162.621       212.216       374.837    
  61  0.868361E-03  -7.04890      -264.639       264.639       180.815       445.454    
  62  0.572113     -0.558419      -20.9649       20.9649       251.161       272.126    
  63  0.201897      -1.60000      -60.0692       60.0692       248.098       308.168    
  64  0.795960     -0.228206      -8.56762       8.56762       252.992       261.560    
  65  0.904277E-01  -2.40321      -90.2243       90.2243       250.354       340.578    
  66  0.976775E-01  -2.32608      -87.3289       87.3289       229.060       316.389    
  67  0.231524      -1.46307      -54.9285       54.9285       250.810       305.738    
  68  0.542363     -0.611819      -22.9697       22.9697       251.224       274.194    
  69  0.332318      -1.10166      -41.3601       41.3601       243.859       285.219    
  70  0.840822     -0.173375      -6.50908       6.50908       250.401       256.911    
  71  0.528412E-01  -2.94046      -110.395       110.395       250.873       361.267    
  72  0.191882      -1.65087      -61.9793       61.9793       183.173       245.152    
  73  0.950825     -0.504248E-01  -1.89311       1.89311       184.342       186.235    
loop,thermsimp(1:2)       75   36.8460       49.2827    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    206        190.22          0.86          1.12         23.52          0.23          0.05         25.78
Just calling func    0   0         25.78


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    207        182.38          0.86          1.13         23.84          0.15          0.05         26.02
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    182.38
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    37.5433               217
loop is:       75
neval is:      206
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       75      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    75.0866      0.500000    
T0,tstep,tfreq (these do not change):             72
current SAtemp,tstepnext are:    37.5433               217
loop is:       76
neval is:      206


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      217
neval,tstepnext:      206     217

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.497287E-01  -3.00117      -112.674       112.674       181.591       294.265    
   2  0.604222     -0.503814      -18.9148       18.9148       184.342       203.257    
   3  0.106168      -2.24273      -84.1995       84.1995       186.965       271.164    
   4  0.342113      -1.07261      -40.2694       40.2694       181.994       222.263    
   5  0.473442     -0.747725      -28.0721       28.0721       183.839       211.911    
   6  0.100866E-01  -4.59655      -172.570       172.570       183.150       355.720    
   7  0.911848     -0.922817E-01  -3.46456       3.46456       191.170       194.635    
   8  0.633547     -0.456421      -17.1355       17.1355       182.286       199.422    
   9  0.729024     -0.316048      -11.8655       11.8655       188.593       200.458    
  10  0.620163     -0.477772      -17.9372       17.9372       186.491       204.428    
  11  0.867018     -0.142695      -5.35725       5.35725       194.719       200.076    
  12  0.969344E-01  -2.33372      -87.6156       87.6156       184.656       272.271    
  13  0.358466      -1.02592      -38.5165       38.5165       182.994       221.511    
  14  0.953168     -0.479638E-01  -1.80072       1.80072       187.014       188.815    
  15  0.684510     -0.379052      -14.2309       14.2309       201.853       216.084    
  16  0.482047     -0.729713      -27.3958       27.3958       194.261       221.657    
  17  0.974791     -0.255318E-01 -0.958550      0.958550       200.132       201.091    
  18  0.978669     -0.215619E-01 -0.809506      0.809506       201.825       202.634    
  19  0.929785     -0.728022E-01  -2.73324       2.73324       196.531       199.264    
  20  0.715020     -0.335444      -12.5937       12.5937       184.949       197.542    
  21  0.598247     -0.513752      -19.2880       19.2880       206.991       226.279    
  22  0.107080      -2.23418      -83.8785       83.8785       202.842       286.721    
  23  0.559093     -0.581439      -21.8291       21.8291       176.615       198.444    
  24  0.933094     -0.692491E-01  -2.59984       2.59984       212.685       215.285    
  25  0.470169E-01  -3.05725      -114.779       114.779       191.566       306.345    
  26  0.166768      -1.79115      -67.2458       67.2458       212.336       279.581    
  27  0.331277      -1.10480      -41.4779       41.4779       196.829       238.306    
  28  0.961755     -0.389952E-01  -1.46401       1.46401       184.702       186.166    
  29  0.464366E-01  -3.06967      -115.245       115.245       209.714       324.959    
  30  0.966136E-03  -6.94221      -260.633       260.633       189.837       450.470    
  31  0.941012     -0.607999E-01  -2.28263       2.28263       182.339       184.621    
  32  0.201947E-01  -3.90233      -146.507       146.507       208.927       355.433    
  33  0.679249     -0.386768      -14.5205       14.5205       182.391       196.912    
  34  0.318772      -1.14328      -42.9224       42.9224       221.702       264.624    
  35  0.388100     -0.946493      -35.5345       35.5345       220.149       255.684    
  36  0.658606     -0.417629      -15.6792       15.6792       196.339       212.018    
  37  0.774362     -0.255715      -9.60040       9.60040       183.173       192.773    
  38  0.704871     -0.349740      -13.1304       13.1304       183.049       196.179    
  39  0.274189      -1.29394      -48.5787       48.5787       244.735       293.314    
  40  0.881806     -0.125783      -4.72230       4.72230       187.830       192.553    
  41  0.198448      -1.61723      -60.7160       60.7160       202.861       263.577    
  42  0.342590      -1.07122      -40.2172       40.2172       194.808       235.026    
  43  0.603787     -0.504534      -18.9419       18.9419       207.128       226.070    
  44  0.667409     -0.404353      -15.1807       15.1807       250.401       265.582    
  45  0.317014      -1.14881      -43.1301       43.1301       205.251       248.382    
  46  0.368458     -0.998429      -37.4843       37.4843       214.200       251.685    
  47  0.139912      -1.96674      -73.8380       73.8380       252.992       326.830    
  48  0.537645     -0.620557      -23.2978       23.2978       229.865       253.163    
  49  0.159021      -1.83872      -69.0317       69.0317       192.862       261.893    
  50  0.729011     -0.316067      -11.8662       11.8662       188.172       200.038    
  51  0.802486     -0.220041      -8.26109       8.26109       186.996       195.257    
  52  0.249203      -1.38949      -52.1660       52.1660       260.067       312.233    
  53  0.282362      -1.26456      -47.4759       47.4759       251.161       298.637    
  54  0.803878     -0.218308      -8.19599       8.19599       251.224       259.420    
  55  0.183401      -1.69608      -63.6764       63.6764       250.289       313.965    
  56  0.144999      -1.93103      -72.4972       72.4972       210.105       282.602    
  57  0.821026     -0.197200      -7.40355       7.40355       206.532       213.936    
  58  0.391750     -0.937132      -35.1830       35.1830       188.629       223.812    
  59  0.605745     -0.501297      -18.8203       18.8203       243.859       262.679    
  60  0.759982E-01  -2.57705      -96.7508       96.7508       188.759       285.510    
  61  0.856619     -0.154762      -5.81027       5.81027       181.022       186.832    
  62  0.200085      -1.60901      -60.4077       60.4077       254.890       315.298    
  63  0.623969     -0.471654      -17.7075       17.7075       236.903       254.611    
  64  0.668527     -0.402679      -15.1179       15.1179       248.738       263.856    
  65  0.926898     -0.759121E-01  -2.84999       2.84999       250.810       253.660    
  66  0.972428     -0.279590E-01  -1.04967       1.04967       248.098       249.148    
  67  0.230218      -1.46873      -55.1409       55.1409       244.431       299.572    
  68  0.756442E-01  -2.58171      -96.9261       96.9261       229.060       325.986    
  69  0.209346      -1.56377      -58.7089       58.7089       250.354       309.063    
  70  0.198646      -1.61623      -60.6787       60.6787       197.890       258.569    
  71  0.196542E-01  -3.92947      -147.525       147.525       250.873       398.398    
  72  0.654679     -0.423610      -15.9037       15.9037       212.216       228.119    
  73  0.519808     -0.654295      -24.5644       24.5644       182.376       206.940    
loop,thermsimp(1:2)       76   112.674       18.9148    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    208        187.39          0.86          1.12         23.46          0.27          0.05         25.75
Just calling func    0   0         25.75


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    209        194.63          0.86          1.12         23.39          0.37          0.05         25.80
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    187.39
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    37.5433               217
loop is:       76
neval is:      208
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       76      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    75.0866      0.500000    
T0,tstep,tfreq (these do not change):             72
current SAtemp,tstepnext are:    37.5433               217
loop is:       77
neval is:      208


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      217
neval,tstepnext:      208     217

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.596761     -0.516238      -19.3813       19.3813       182.339       201.720    
   2  0.476930     -0.740385      -27.7965       27.7965       184.702       212.499    
   3  0.845382     -0.167966      -6.30600       6.30600       181.022       187.328    
   4  0.397814     -0.921770      -34.6063       34.6063       187.014       221.621    
   5  0.249923      -1.38660      -52.0577       52.0577       187.830       239.888    
   6  0.591552     -0.525005      -19.7104       19.7104       183.173       202.883    
   7  0.143111      -1.94414      -72.9893       72.9893       191.170       264.159    
   8  0.306099      -1.18385      -44.4455       44.4455       186.996       231.441    
   9  0.441827     -0.816836      -30.6667       30.6667       183.049       213.715    
  10  0.504521     -0.684146      -25.6851       25.6851       182.391       208.076    
  11  0.127660      -2.05839      -77.2787       77.2787       184.949       262.227    
  12  0.333524      -1.09804      -41.2241       41.2241       176.615       217.839    
  13  0.130890      -2.03340      -76.3404       76.3404       196.531       272.871    
  14  0.307732      -1.17853      -44.2457       44.2457       182.286       226.532    
  15  0.154434E-01  -4.17057      -156.577       156.577       188.172       344.749    
  16  0.357863      -1.02761      -38.5797       38.5797       194.719       233.298    
  17  0.271898      -1.30233      -48.8937       48.8937       188.593       237.486    
  18  0.906228E-01  -2.40105      -90.1433       90.1433       200.132       290.276    
  19  0.344142      -1.06670      -40.0475       40.0475       201.825       241.872    
  20  0.392886     -0.934237      -35.0743       35.0743       184.342       219.416    
  21  0.454318     -0.788958      -29.6201       29.6201       186.491       216.111    
  22  0.384129     -0.956778      -35.9206       35.9206       182.376       218.296    
  23  0.354037      -1.03835      -38.9832       38.9832       183.839       222.822    
  24  0.154212      -1.86943      -70.1846       70.1846       196.339       266.523    
  25  0.816320     -0.202949      -7.61939       7.61939       206.532       214.152    
  26  0.994970     -0.504291E-02 -0.189327      0.189327       212.685       212.875    
  27  0.374719E-01  -3.28416      -123.298       123.298       201.853       325.151    
  28  0.227113      -1.48231      -55.6507       55.6507       182.994       238.645    
  29  0.410587     -0.890167      -33.4198       33.4198       194.261       227.681    
  30  0.104540E-01  -4.56077      -171.226       171.226       181.994       353.220    
  31  0.994826     -0.518730E-02 -0.194748      0.194748       188.629       188.824    
  32  0.738930     -0.302553      -11.3588       11.3588       207.128       218.487    
  33  0.715904     -0.334209      -12.5473       12.5473       206.991       219.539    
  34  0.128324      -2.05320      -77.0839       77.0839       212.216       289.300    
  35  0.856095     -0.155374      -5.83324       5.83324       194.808       200.642    
  36  0.423967     -0.858099      -32.2159       32.2159       196.829       229.044    
  37  0.504650     -0.683890      -25.6755       25.6755       205.251       230.927    
  38  0.347036      -1.05833      -39.7331       39.7331       248.098       287.832    
  39  0.906779     -0.978566E-01  -3.67386       3.67386       214.200       217.874    
  40  0.616911     -0.483030      -18.1346       18.1346       229.865       248.000    
  41  0.540209     -0.615800      -23.1192       23.1192       250.810       273.929    
  42  0.772932     -0.257564      -9.66980       9.66980       236.903       246.573    
  43  0.544989     -0.606989      -22.7884       22.7884       220.149       242.938    
  44  0.951523     -0.496917E-01  -1.86559       1.86559       197.890       199.756    
  45  0.172505      -1.75733      -65.9760       65.9760       251.224       317.200    
  46  0.871391     -0.137665      -5.16839       5.16839       192.862       198.030    
  47  0.127604      -2.05882      -77.2949       77.2949       243.859       321.154    
  48  0.785934     -0.240882      -9.04352       9.04352       202.861       211.905    
  49  0.815977     -0.203369      -7.63515       7.63515       248.738       256.373    
  50  0.350587      -1.04815      -39.3509       39.3509       221.702       261.053    
  51  0.739645     -0.301584      -11.3225       11.3225       250.401       261.724    
  52  0.996274     -0.373345E-02 -0.140166      0.140166       186.965       187.105    
  53  0.303822      -1.19131      -44.7259       44.7259       184.656       229.382    
  54  0.708260     -0.344944      -12.9504       12.9504       212.336       225.286    
  55  0.646268     -0.436541      -16.3892       16.3892       210.105       226.494    
  56  0.696585     -0.361566      -13.5744       13.5744       188.759       202.333    
  57  0.439732     -0.821591      -30.8452       30.8452       202.842       233.687    
  58  0.791452     -0.233886      -8.78085       8.78085       244.735       253.516    
  59  0.202743      -1.59581      -59.9121       59.9121       181.591       241.503    
  60  0.547790E-01  -2.90445      -109.043       109.043       251.161       360.204    
  61  0.663631     -0.410029      -15.3938       15.3938       244.431       259.825    
  62  0.838292     -0.176388      -6.62220       6.62220       191.566       198.188    
  63  0.450238     -0.797979      -29.9588       29.9588       250.354       280.313    
  64  0.209610      -1.56251      -58.6617       58.6617       260.067       318.729    
  65  0.502241     -0.688676      -25.8552       25.8552       250.289       276.144    
  66  0.837306     -0.177566      -6.66642       6.66642       254.890       261.556    
  67  0.345973      -1.06139      -39.8482       39.8482       209.714       249.562    
  68  0.558861     -0.581855      -21.8448       21.8448       229.060       250.905    
  69  0.293365      -1.22634      -46.0408       46.0408       252.992       299.033    
  70  0.234701      -1.44944      -54.4169       54.4169       208.927       263.344    
  71  0.762859E-01  -2.57327      -96.6090       96.6090       183.150       279.759    
  72  0.994504     -0.551100E-02 -0.206901      0.206901       250.873       251.079    
  73  0.674972     -0.393084      -14.7577       14.7577       187.385       202.143    
loop,thermsimp(1:2)       77   19.3813       27.7965    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    210        190.34          0.86          1.13         23.47          0.27          0.04         25.78
Just calling func    0   0         25.78


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    190.34
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    37.5433               217
loop is:       77
neval is:      209
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       77      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    75.0866      0.500000    
T0,tstep,tfreq (these do not change):             72
current SAtemp,tstepnext are:    37.5433               217
loop is:       78
neval is:      209


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      217
neval,tstepnext:      209     217

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.941883     -0.598737E-01  -2.24786       2.24786       186.965       189.213    
   2  0.368209     -0.999105      -37.5097       37.5097       181.022       218.531    
   3  0.508630     -0.676034      -25.3805       25.3805       188.629       214.010    
   4  0.744324     -0.295279      -11.0858       11.0858       192.862       203.947    
   5  0.401586     -0.912333      -34.2520       34.2520       191.566       225.818    
   6  0.712794     -0.338563      -12.7108       12.7108       197.890       210.601    
   7  0.186976      -1.67678      -62.9517       62.9517       194.808       257.760    
   8  0.688451     -0.373311      -14.0153       14.0153       182.339       196.354    
   9  0.668652     -0.402492      -15.1109       15.1109       187.385       202.496    
  10  0.656767     -0.420426      -15.7842       15.7842       188.759       204.543    
  11  0.853336     -0.158602      -5.95446       5.95446       183.173       189.127    
  12  0.556440     -0.586195      -22.0077       22.0077       182.391       204.399    
  13  0.258558E-01  -3.65522      -137.229       137.229       202.861       340.090    
  14  0.121003E-01  -4.41452      -165.736       165.736       184.702       350.438    
  15  0.150890      -1.89120      -71.0019       71.0019       212.685       283.687    
  16  0.820074     -0.198360      -7.44711       7.44711       183.049       190.496    
  17  0.151452      -1.88748      -70.8624       70.8624       206.532       277.395    
  18  0.305465      -1.18592      -44.5234       44.5234       186.491       231.015    
  19  0.533202     -0.628854      -23.6093       23.6093       176.615       200.224    
  20  0.143416      -1.94201      -72.9094       72.9094       214.200       287.110    
  21  0.687081     -0.375303      -14.0901       14.0901       182.376       196.466    
  22  0.546247     -0.604685      -22.7019       22.7019       207.128       229.830    
  23  0.356987      -1.03006      -38.6717       38.6717       184.342       223.013    
  24  0.545718     -0.605653      -22.7382       22.7382       206.991       229.730    
  25  0.789688     -0.236117      -8.86461       8.86461       187.014       195.879    
  26  0.752086     -0.284904      -10.6963       10.6963       183.839       194.535    
  27  0.388816     -0.944650      -35.4653       35.4653       212.336       247.801    
  28  0.988428     -0.116395E-01 -0.436987      0.436987       210.105       210.542    
  29  0.124991      -2.07952      -78.0719       78.0719       182.286       260.358    
  30  0.568214     -0.565257      -21.2216       21.2216       194.261       215.482    
  31  0.551032     -0.595962      -22.3744       22.3744       196.829       219.203    
  32  0.423622     -0.858913      -32.2464       32.2464       184.656       216.902    
  33  0.647554     -0.434553      -16.3146       16.3146       205.251       221.566    
  34  0.686255     -0.376506      -14.1353       14.1353       186.996       201.131    
  35  0.548072     -0.601349      -22.5766       22.5766       194.719       217.295    
  36  0.880777     -0.126951      -4.76616       4.76616       202.842       207.608    
  37  0.894918     -0.111023      -4.16816       4.16816       188.593       192.761    
  38  0.241077      -1.42264      -53.4106       53.4106       182.994       236.405    
  39  0.546141     -0.604877      -22.7091       22.7091       187.830       210.540    
  40  0.266590      -1.32204      -49.6339       49.6339       181.591       231.224    
  41  0.575085     -0.553238      -20.7704       20.7704       201.825       222.595    
  42  0.907139     -0.974596E-01  -3.65896       3.65896       220.149       223.808    
  43  0.469109     -0.756920      -28.4173       28.4173       236.903       265.320    
  44  0.738008     -0.303801      -11.4057       11.4057       229.865       241.271    
  45  0.557598     -0.584116      -21.9297       21.9297       209.714       231.643    
  46  0.305677      -1.18523      -44.4973       44.4973       229.060       273.557    
  47  0.392927     -0.934131      -35.0704       35.0704       250.873       285.943    
  48  0.121997      -2.10376      -78.9819       78.9819       244.735       323.717    
  49  0.712082     -0.339563      -12.7483       12.7483       248.738       261.486    
  50  0.342132      -1.07256      -40.2674       40.2674       244.431       284.699    
  51  0.288307      -1.24373      -46.6937       46.6937       221.702       268.395    
  52  0.554777     -0.589188      -22.1201       22.1201       254.890       277.010    
  53  0.116597E-01  -4.45161      -167.128       167.128       250.401       417.530    
  54  0.844148     -0.169427      -6.36085       6.36085       184.949       191.309    
  55  0.910896     -0.933267E-01  -3.50379       3.50379       208.927       212.431    
  56  0.257100      -1.35829      -50.9948       50.9948       191.170       242.165    
  57  0.340199      -1.07823      -40.4801       40.4801       196.339       236.819    
  58  0.656010     -0.421580      -15.8275       15.8275       196.531       212.359    
  59  0.894739     -0.111224      -4.17571       4.17571       250.810       254.985    
  60  0.226933      -1.48310      -55.6805       55.6805       250.289       305.969    
  61  0.478182     -0.737763      -27.6981       27.6981       183.150       210.848    
  62  0.361863      -1.01649      -38.1624       38.1624       250.354       288.516    
  63  0.415757     -0.877654      -32.9500       32.9500       248.098       281.049    
  64  0.540919     -0.614487      -23.0699       23.0699       212.216       235.286    
  65  0.489341     -0.714697      -26.8321       26.8321       200.132       226.964    
  66  0.963632     -0.370456E-01  -1.39082       1.39082       252.992       254.383    
  67  0.312700      -1.16251      -43.6445       43.6445       251.224       294.869    
  68  0.145861      -1.92510      -72.2746       72.2746       260.067       332.342    
  69  0.960223     -0.405895E-01  -1.52386       1.52386       243.859       245.383    
  70  0.490262     -0.712815      -26.7614       26.7614       201.853       228.614    
  71  0.565539     -0.569975      -21.3988       21.3988       188.172       209.571    
  72  0.818412     -0.200389      -7.52326       7.52326       181.994       189.517    
  73  0.213411      -1.54453      -57.9869       57.9869       190.338       248.325    
loop,thermsimp(1:2)       78   2.24786       37.5097    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    211        191.93          0.87          1.12         23.42          0.30          0.05         25.76
Just calling func    0   0         25.76


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    212        201.97          0.86          1.11         23.77          0.08          0.05         25.87
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    191.93
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    37.5433               217
loop is:       78
neval is:      211
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       78      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    75.0866      0.500000    
T0,tstep,tfreq (these do not change):             72
current SAtemp,tstepnext are:    37.5433               217
loop is:       79
neval is:      211


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      217
neval,tstepnext:      211     217

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.708826E-01  -2.64673      -99.3670       99.3670       183.173       282.540    
   2  0.952063     -0.491245E-01  -1.84429       1.84429       186.965       188.809    
   3  0.207928      -1.57057      -58.9642       58.9642       181.994       240.958    
   4  0.564009     -0.572686      -21.5005       21.5005       183.049       204.549    
   5  0.461636     -0.772979      -29.0202       29.0202       184.949       213.969    
   6  0.683812     -0.380072      -14.2691       14.2691       188.593       202.862    
   7  0.153569      -1.87360      -70.3412       70.3412       183.839       254.180    
   8  0.605650     -0.501453      -18.8262       18.8262       187.014       205.840    
   9  0.257296      -1.35753      -50.9661       50.9661       182.339       233.305    
  10  0.517987     -0.657805      -24.6962       24.6962       182.376       207.072    
  11  0.571129     -0.560140      -21.0295       21.0295       176.615       197.644    
  12  0.735134     -0.307703      -11.5522       11.5522       186.996       198.548    
  13  0.766340E-02  -4.87130      -182.885       182.885       187.385       370.270    
  14  0.435932     -0.830269      -31.1711       31.1711       192.862       224.033    
  15  0.513945     -0.665639      -24.9903       24.9903       182.391       207.382    
  16  0.447046     -0.805095      -30.2259       30.2259       188.759       218.985    
  17  0.244813      -1.40726      -52.8331       52.8331       202.842       255.675    
  18  0.183933      -1.69318      -63.5677       63.5677       188.172       251.740    
  19  0.413164     -0.883910      -33.1849       33.1849       187.830       221.015    
  20  0.869613     -0.139707      -5.24508       5.24508       210.105       215.350    
  21  0.853260     -0.158691      -5.95777       5.95777       197.890       203.848    
  22  0.138067      -1.98001      -74.3362       74.3362       183.150       257.486    
  23  0.940528     -0.613134E-01  -2.30191       2.30191       196.531       198.833    
  24  0.694939     -0.363931      -13.6632       13.6632       208.927       222.590    
  25  0.962776     -0.379346E-01  -1.42419       1.42419       188.629       190.053    
  26  0.378266     -0.972158      -36.4980       36.4980       194.261       230.759    
  27  0.855922     -0.155576      -5.84083       5.84083       184.656       190.497    
  28  0.393452     -0.932797      -35.0203       35.0203       194.719       229.739    
  29  0.253590      -1.37204      -51.5108       51.5108       181.022       232.533    
  30  0.777948     -0.251096      -9.42697       9.42697       196.829       206.256    
  31  0.654890     -0.423288      -15.8916       15.8916       205.251       221.143    
  32  0.690016E-01  -2.67363      -100.377       100.377       201.825       302.202    
  33  0.101034      -2.29229      -86.0603       86.0603       184.342       270.402    
  34  0.684533     -0.379019      -14.2296       14.2296       220.149       234.379    
  35  0.592603     -0.523230      -19.6438       19.6438       191.566       211.210    
  36  0.904830     -0.100009      -3.75465       3.75465       200.132       203.887    
  37  0.400244     -0.915681      -34.3777       34.3777       201.853       236.230    
  38  0.698191     -0.359263      -13.4879       13.4879       206.991       220.479    
  39  0.551449E-01  -2.89779      -108.793       108.793       207.128       315.921    
  40  0.500493     -0.692161      -25.9860       25.9860       186.491       212.477    
  41  0.289592      -1.23928      -46.5268       46.5268       181.591       228.117    
  42  0.447163     -0.804833      -30.2161       30.2161       209.714       239.930    
  43  0.690940     -0.369702      -13.8798       13.8798       212.216       226.096    
  44  0.631068     -0.460341      -17.2827       17.2827       182.994       200.277    
  45  0.926041     -0.768363E-01  -2.88469       2.88469       196.339       199.223    
  46  0.436187     -0.829684      -31.1491       31.1491       229.865       261.014    
  47  0.314139      -1.15792      -43.4721       43.4721       191.170       234.642    
  48  0.363110      -1.01305      -38.0332       38.0332       243.859       281.892    
  49  0.446982     -0.805238      -30.2313       30.2313       212.336       242.567    
  50  0.541529     -0.613360      -23.0275       23.0275       190.338       213.366    
  51  0.415529     -0.878202      -32.9706       32.9706       252.992       285.963    
  52  0.559792     -0.580190      -21.7823       21.7823       250.810       272.592    
  53  0.931332     -0.711389E-01  -2.67079       2.67079       194.808       197.479    
  54  0.653342     -0.425655      -15.9805       15.9805       182.286       198.267    
  55  0.254324E-01  -3.67173      -137.849       137.849       248.738       386.587    
  56  0.365877      -1.00546      -37.7482       37.7482       236.903       274.651    
  57  0.187661      -1.67312      -62.8143       62.8143       221.702       284.516    
  58  0.592744     -0.522993      -19.6349       19.6349       229.060       248.695    
  59  0.211036      -1.55573      -58.4071       58.4071       254.890       313.297    
  60  0.718956     -0.329955      -12.3876       12.3876       206.532       218.920    
  61  0.170082      -1.77147      -66.5070       66.5070       248.098       314.605    
  62  0.190051      -1.66046      -62.3393       62.3393       212.685       275.024    
  63  0.275889      -1.28776      -48.3466       48.3466       244.431       292.778    
  64  0.670664     -0.399487      -14.9981       14.9981       250.873       265.871    
  65  0.294211      -1.22346      -45.9326       45.9326       214.200       260.133    
  66  0.710312     -0.342050      -12.8417       12.8417       250.354       263.195    
  67  0.432365     -0.838485      -31.4795       31.4795       251.224       282.704    
  68  0.488453     -0.716511      -26.9002       26.9002       250.289       277.189    
  69  0.250523      -1.38421      -51.9676       51.9676       244.735       296.703    
  70  0.842097     -0.171860      -6.45218       6.45218       260.067       266.520    
  71  0.403041     -0.908716      -34.1162       34.1162       202.861       236.978    
  72  0.576391     -0.550969      -20.6852       20.6852       184.702       205.387    
  73  0.577169     -0.549620      -20.6345       20.6345       191.928       212.563    
loop,thermsimp(1:2)       79   99.3670       1.84429    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    213        190.86          0.87          1.12         23.69          0.14          0.05         25.87
Just calling func    0   0         25.87


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    214        204.64          0.86          1.11         23.55          0.28          0.05         25.86
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    190.86
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    37.5433               217
loop is:       79
neval is:      213
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       79      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    75.0866      0.500000    
T0,tstep,tfreq (these do not change):             72
current SAtemp,tstepnext are:    37.5433               217
loop is:       80
neval is:      213


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      217
neval,tstepnext:      213     217

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.668425     -0.402832      -15.1236       15.1236       186.965       202.088    
   2  0.238500      -1.43339      -53.8141       53.8141       188.629       242.443    
   3  0.689211     -0.372208      -13.9739       13.9739       184.656       198.630    
   4  0.540774     -0.614753      -23.0799       23.0799       194.808       217.888    
   5  0.178857      -1.72117      -64.6184       64.6184       176.615       241.233    
   6  0.884253     -0.123012      -4.61829       4.61829       182.286       186.905    
   7  0.755546     -0.280314      -10.5239       10.5239       186.996       197.519    
   8  0.654086E-01  -2.72710      -102.384       102.384       196.531       298.915    
   9  0.802958     -0.219452      -8.23897       8.23897       196.339       204.578    
  10  0.840665     -0.173562      -6.51607       6.51607       182.994       189.510    
  11  0.864930     -0.145107      -5.44778       5.44778       188.593       194.040    
  12  0.728243     -0.317120      -11.9057       11.9057       197.890       209.796    
  13  0.453086     -0.791672      -29.7220       29.7220       200.132       229.854    
  14  0.702549E-01  -2.65563      -99.7010       99.7010       183.049       282.750    
  15  0.610595     -0.493321      -18.5209       18.5209       184.702       203.223    
  16  0.728410E-02  -4.92206      -184.790       184.790       187.014       371.805    
  17  0.913763     -0.901841E-01  -3.38581       3.38581       196.829       200.214    
  18  0.165001      -1.80180      -67.6457       67.6457       182.376       250.021    
  19  0.917747E-01  -2.38842      -89.6691       89.6691       182.391       272.061    
  20  0.338507      -1.08321      -40.6673       40.6673       191.566       232.233    
  21  0.357666      -1.02815      -38.6003       38.6003       186.491       225.091    
  22  0.389441     -0.943044      -35.4050       35.4050       191.928       227.333    
  23  0.879897     -0.127950      -4.80367       4.80367       190.338       195.142    
  24  0.418897     -0.870129      -32.6675       32.6675       184.949       217.616    
  25  0.838426     -0.176230      -6.61624       6.61624       210.105       216.721    
  26  0.185169      -1.68649      -63.3162       63.3162       206.532       269.849    
  27  0.200952      -1.60469      -60.2452       60.2452       188.759       249.004    
  28  0.877256     -0.130957      -4.91654       4.91654       206.991       211.908    
  29  0.386592     -0.950385      -35.6806       35.6806       187.830       223.511    
  30  0.888706     -0.117988      -4.42967       4.42967       205.251       209.681    
  31  0.105408      -2.24991      -84.4692       84.4692       208.927       293.396    
  32  0.994268     -0.574873E-02 -0.215826      0.215826       192.862       193.077    
  33  0.764077     -0.269087      -10.1024       10.1024       212.216       222.318    
  34  0.812108     -0.208121      -7.81357       7.81357       181.591       189.404    
  35  0.121669      -2.10645      -79.0832       79.0832       194.719       273.802    
  36  0.637909     -0.449559      -16.8779       16.8779       194.261       211.139    
  37  0.316007E-02  -5.75716      -216.143       216.143       181.022       397.165    
  38  0.229677      -1.47108      -55.2293       55.2293       182.339       237.568    
  39  0.521374     -0.651288      -24.4515       24.4515       220.149       244.601    
  40  0.391402     -0.938019      -35.2163       35.2163       191.170       226.386    
  41  0.327357      -1.11670      -41.9247       41.9247       201.853       243.777    
  42  0.963139     -0.375576E-01  -1.41004       1.41004       202.861       204.271    
  43  0.174261      -1.74720      -65.5956       65.5956       209.714       275.309    
  44  0.331602      -1.10382      -41.4410       41.4410       181.994       223.435    
  45  0.526338     -0.641812      -24.0958       24.0958       212.336       236.431    
  46  0.413265     -0.883667      -33.1758       33.1758       229.060       262.236    
  47  0.541510E-02  -5.21856      -195.922       195.922       188.172       384.094    
  48  0.781613     -0.246396      -9.25050       9.25050       183.839       193.089    
  49  0.656825     -0.420337      -15.7809       15.7809       202.842       218.623    
  50  0.584791     -0.536501      -20.1420       20.1420       183.150       203.292    
  51  0.811204     -0.209236      -7.85541       7.85541       214.200       222.056    
  52  0.421027     -0.865059      -32.4772       32.4772       229.865       262.342    
  53  0.663739     -0.409866      -15.3877       15.3877       250.354       265.741    
  54  0.164765      -1.80323      -67.6994       67.6994       250.873       318.572    
  55  0.883187E-01  -2.42680      -91.1102       91.1102       260.067       351.178    
  56  0.825424     -0.191858      -7.20298       7.20298       184.342       191.545    
  57  0.201966E-01  -3.90224      -146.503       146.503       250.810       397.313    
  58  0.174898      -1.74355      -65.4587       65.4587       236.903       302.362    
  59  0.477008     -0.740222      -27.7904       27.7904       212.685       240.476    
  60  0.162167E-01  -4.12171      -154.743       154.743       250.289       405.032    
  61  0.378219     -0.972282      -36.5027       36.5027       243.859       280.361    
  62  0.980713     -0.194752E-01 -0.731164      0.731164       183.173       183.904    
  63  0.232487      -1.45892      -54.7727       54.7727       251.224       305.997    
  64  0.962055     -0.386832E-01  -1.45230       1.45230       221.702       223.154    
  65  0.761875     -0.271973      -10.2108       10.2108       252.992       263.203    
  66  0.673649     -0.395046      -14.8313       14.8313       244.431       259.263    
  67  0.979237     -0.209814E-01 -0.787712      0.787712       244.735       245.523    
  68  0.361942      -1.01627      -38.1542       38.1542       201.825       239.979    
  69  0.191552      -1.65259      -62.0438       62.0438       254.890       316.934    
  70  0.708040     -0.345254      -12.9620       12.9620       248.098       261.060    
  71  0.676759     -0.390440      -14.6584       14.6584       207.128       221.787    
  72  0.647357     -0.434857      -16.3260       16.3260       187.385       203.711    
  73  0.516122     -0.661412      -24.8316       24.8316       190.859       215.691    
loop,thermsimp(1:2)       80   15.1236       53.8141    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    215        189.96          0.86          1.12         23.46          0.29          0.05         25.78
Just calling func    0   0         25.78


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    216        203.30          0.86          1.11         23.43          0.35          0.05         25.81
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    189.96
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    37.5433               217
loop is:       80
neval is:      215
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       80      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    75.0866      0.500000    
T0,tstep,tfreq (these do not change):             72
current SAtemp,tstepnext are:    37.5433               217
loop is:       81
neval is:      215


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      217
neval,tstepnext:      215     217

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.270023      -1.30925      -49.1535       49.1535       183.173       232.326    
   2  0.879265     -0.128669      -4.83065       4.83065       182.286       187.117    
   3  0.684902     -0.378479      -14.2094       14.2094       181.591       195.800    
   4  0.893896     -0.112166      -4.21107       4.21107       182.994       187.205    
   5  0.476761     -0.740739      -27.8098       27.8098       184.342       212.152    
   6  0.755167     -0.280817      -10.5428       10.5428       192.862       203.404    
   7  0.452407     -0.793173      -29.7783       29.7783       183.839       213.617    
   8  0.723906     -0.323093      -12.1300       12.1300       188.593       200.723    
   9  0.451260     -0.795711      -29.8736       29.8736       190.338       220.212    
  10  0.668265     -0.403071      -15.1326       15.1326       186.996       202.128    
  11  0.777249     -0.251995      -9.46073       9.46073       184.656       194.117    
  12  0.342240      -1.07224      -40.2556       40.2556       196.829       237.084    
  13  0.639156     -0.447606      -16.8046       16.8046       186.965       203.769    
  14  0.166924      -1.79022      -67.2107       67.2107       184.702       251.913    
  15  0.375260     -0.980137      -36.7976       36.7976       183.150       219.948    
  16  0.299730      -1.20487      -45.2349       45.2349       187.385       232.620    
  17  0.407119     -0.898650      -33.7383       33.7383       202.861       236.600    
  18  0.762992E-01  -2.57309      -96.6024       96.6024       196.339       292.941    
  19  0.281066      -1.26917      -47.6487       47.6487       205.251       252.900    
  20  0.220512      -1.51180      -56.7580       56.7580       197.890       254.649    
  21  0.389846     -0.942004      -35.3660       35.3660       194.261       229.627    
  22  0.660048     -0.415443      -15.5971       15.5971       206.991       222.588    
  23  0.150026      -1.89695      -71.2177       71.2177       190.859       262.077    
  24  0.113767      -2.17360      -81.6041       81.6041       210.105       291.709    
  25  0.810589     -0.209994      -7.88387       7.88387       184.949       192.832    
  26  0.247911      -1.39468      -52.3611       52.3611       194.808       247.170    
  27  0.408875     -0.894345      -33.5767       33.5767       202.842       236.419    
  28  0.310528      -1.16948      -43.9062       43.9062       207.128       251.034    
  29  0.663027     -0.410939      -15.4280       15.4280       214.200       229.628    
  30  0.798362     -0.225193      -8.45448       8.45448       212.216       220.670    
  31  0.564885     -0.571133      -21.4422       21.4422       221.702       243.144    
  32  0.473510E-02  -5.35275      -200.960       200.960       181.994       382.954    
  33  0.933475E-01  -2.37143      -89.0312       89.0312       187.830       276.862    
  34  0.931702     -0.707423E-01  -2.65590       2.65590       186.491       189.147    
  35  0.341741      -1.07370      -40.3104       40.3104       191.170       231.480    
  36  0.171330      -1.76417      -66.2326       66.2326       191.928       258.161    
  37  0.355860      -1.03322      -38.7904       38.7904       200.132       238.923    
  38  0.469639     -0.755790      -28.3749       28.3749       191.566       219.941    
  39  0.805376     -0.216446      -8.12609       8.12609       212.336       220.462    
  40  0.651615     -0.428301      -16.0799       16.0799       182.339       198.418    
  41  0.126831      -2.06490      -77.5231       77.5231       201.825       279.348    
  42  0.715737     -0.334442      -12.5561       12.5561       212.685       225.241    
  43  0.444007     -0.811915      -30.4820       30.4820       176.615       207.097    
  44  0.887105     -0.119791      -4.49736       4.49736       188.629       193.126    
  45  0.492139     -0.708993      -26.6179       26.6179       201.853       228.471    
  46  0.590315     -0.527098      -19.7890       19.7890       220.149       239.938    
  47  0.313130      -1.16114      -43.5929       43.5929       244.735       288.328    
  48  0.824070     -0.193500      -7.26463       7.26463       188.759       196.024    
  49  0.785026     -0.242039      -9.08695       9.08695       182.376       191.463    
  50  0.105781      -2.24638      -84.3365       84.3365       244.431       328.768    
  51  0.644933     -0.438608      -16.4668       16.4668       248.098       264.565    
  52  0.656932     -0.420175      -15.7748       15.7748       229.060       244.835    
  53  0.418239     -0.871703      -32.7266       32.7266       229.865       262.592    
  54  0.191132      -1.65479      -62.1262       62.1262       252.992       315.119    
  55  0.493587     -0.706055      -26.5077       26.5077       250.354       276.861    
  56  0.490289     -0.712761      -26.7594       26.7594       206.532       233.292    
  57  0.703124     -0.352222      -13.2236       13.2236       182.391       195.615    
  58  0.514219E-01  -2.96769      -111.417       111.417       194.719       306.136    
  59  0.967122     -0.334307E-01  -1.25510       1.25510       209.714       210.969    
  60  0.164565      -1.80445      -67.7449       67.7449       243.859       311.604    
  61  0.787129     -0.239363      -8.98648       8.98648       183.049       192.035    
  62  0.877224     -0.130993      -4.91791       4.91791       208.927       213.845    
  63  0.826666     -0.190355      -7.14654       7.14654       196.531       203.678    
  64  0.478850     -0.736368      -27.6457       27.6457       236.903       264.549    
  65  0.850214E-01  -2.46485      -92.5387       92.5387       251.224       343.763    
  66  0.752587     -0.284239      -10.6713       10.6713       254.890       265.561    
  67  0.286540      -1.24988      -46.9245       46.9245       250.873       297.797    
  68  0.581717     -0.541771      -20.3399       20.3399       260.067       280.407    
  69  0.907599     -0.969526E-01  -3.63992       3.63992       187.014       190.654    
  70  0.159227      -1.83743      -68.9831       68.9831       188.172       257.155    
  71  0.740279     -0.300729      -11.2903       11.2903       181.022       192.312    
  72  0.899153     -0.106302      -3.99091       3.99091       250.810       254.801    
  73  0.456914     -0.783261      -29.4062       29.4062       189.965       219.371    
loop,thermsimp(1:2)       81   49.1535       4.83065    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    217        189.34          0.87          1.12         23.43          0.28          0.05         25.75
Just calling func    0   0         25.75


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    218        215.24          0.87          1.12         23.52          0.21          0.04         25.76
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    189.34
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    37.5433               217
loop is:       81
neval is:      217
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       81      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    75.0866      0.500000    
T0,tstep,tfreq (these do not change):             72
current SAtemp,tstepnext are:    37.5433               217
loop is:       82
neval is:      217


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      217
neval,tstepnext:      217     217

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.130014E-01  -4.34270      -163.039       163.039       182.286       345.326    
   2  0.906957E-01  -2.40025      -90.1131       90.1131       182.994       273.107    
   3  0.973677     -0.266758E-01  -1.00150       1.00150       186.491       187.493    
   4  0.764409     -0.268653      -10.0861       10.0861       187.014       197.100    
   5  0.647718     -0.434300      -16.3051       16.3051       182.376       198.681    
   6  0.450945     -0.796410      -29.8998       29.8998       183.049       212.949    
   7  0.342138      -1.07254      -40.2667       40.2667       181.022       221.288    
   8  0.491560     -0.710170      -26.6621       26.6621       184.949       211.611    
   9  0.728901     -0.316218      -11.8719       11.8719       188.629       200.501    
  10  0.361124      -1.01853      -38.2392       38.2392       184.656       222.895    
  11  0.187026      -1.67651      -62.9416       62.9416       182.391       245.333    
  12  0.560514     -0.578901      -21.7339       21.7339       181.591       203.324    
  13  0.218776      -1.51971      -57.0548       57.0548       188.759       245.814    
  14  0.109271      -2.21392      -83.1179       83.1179       182.339       265.457    
  15  0.263420E-01  -3.63659      -136.530       136.530       188.593       325.122    
  16  0.654642     -0.423667      -15.9059       15.9059       186.996       202.901    
  17  0.975959     -0.243343E-01 -0.913589      0.913589       192.862       193.775    
  18  0.107212      -2.23295      -83.8322       83.8322       196.531       280.363    
  19  0.972340     -0.280494E-01  -1.05307       1.05307       186.965       188.018    
  20  0.259158      -1.35032      -50.6954       50.6954       176.615       227.310    
  21  0.889970     -0.116568      -4.37633       4.37633       209.714       214.090    
  22  0.956672     -0.442943E-01  -1.66295       1.66295       184.342       186.005    
  23  0.299261      -1.20644      -45.2937       45.2937       183.839       229.133    
  24  0.114836      -2.16425      -81.2531       81.2531       208.927       290.180    
  25  0.728848     -0.316291      -11.8746       11.8746       189.965       201.840    
  26  0.650336     -0.430267      -16.1536       16.1536       191.566       207.720    
  27  0.816983     -0.202137      -7.58890       7.58890       183.150       190.739    
  28  0.507860     -0.677550      -25.4375       25.4375       190.338       215.776    
  29  0.920661     -0.826634E-01  -3.10346       3.10346       212.336       215.439    
  30  0.253772      -1.37132      -51.4839       51.4839       212.216       263.700    
  31  0.667512     -0.404198      -15.1749       15.1749       206.991       222.166    
  32  0.772715     -0.257844      -9.68033       9.68033       212.685       222.366    
  33  0.757620     -0.277573      -10.4210       10.4210       201.853       212.274    
  34  0.776421     -0.253060      -9.50072       9.50072       194.261       203.762    
  35  0.886642     -0.120314      -4.51700       4.51700       214.200       218.717    
  36  0.238693E-01  -3.73516      -140.230       140.230       191.170       331.400    
  37  0.303957      -1.19087      -44.7092       44.7092       183.173       227.882    
  38  0.875267     -0.133226      -5.00175       5.00175       187.385       192.387    
  39  0.144246      -1.93624      -72.6927       72.6927       206.532       279.225    
  40  0.993963     -0.605564E-02 -0.227349      0.227349       202.842       203.069    
  41  0.172168      -1.75928      -66.0493       66.0493       202.861       268.911    
  42  0.979713     -0.204952E-01 -0.769459      0.769459       196.829       197.598    
  43  0.938694     -0.632658E-01  -2.37521       2.37521       200.132       202.507    
  44  0.716061     -0.333990      -12.5391       12.5391       220.149       232.688    
  45  0.764601     -0.268402      -10.0767       10.0767       221.702       231.778    
  46  0.546951     -0.603396      -22.6535       22.6535       229.060       251.713    
  47  0.104442      -2.25912      -84.8148       84.8148       194.808       279.623    
  48  0.669980     -0.400508      -15.0364       15.0364       207.128       222.165    
  49  0.255048      -1.36630      -51.2955       51.2955       184.702       235.998    
  50  0.761153     -0.272921      -10.2464       10.2464       205.251       215.498    
  51  0.273269      -1.29730      -48.7049       48.7049       197.890       246.595    
  52  0.789047E-01  -2.53951      -95.3418       95.3418       250.810       346.152    
  53  0.723703     -0.323374      -12.1405       12.1405       188.172       200.313    
  54  0.535422     -0.624699      -23.4533       23.4533       191.928       215.382    
  55  0.394266     -0.930730      -34.9427       34.9427       190.859       225.802    
  56  0.334209      -1.09599      -41.1470       41.1470       229.865       271.012    
  57  0.713084     -0.338156      -12.6955       12.6955       236.903       249.599    
  58  0.335811      -1.09121      -40.9675       40.9675       248.098       289.066    
  59  0.877329     -0.130873      -4.91341       4.91341       254.890       259.803    
  60  0.804760     -0.217212      -8.15485       8.15485       250.354       258.509    
  61  0.676806     -0.390371      -14.6558       14.6558       187.830       202.486    
  62  0.139025      -1.97310      -74.0768       74.0768       201.825       275.902    
  63  0.453238     -0.791339      -29.7095       29.7095       260.067       289.777    
  64  0.174629      -1.74509      -65.5166       65.5166       244.735       310.252    
  65  0.770625     -0.260553      -9.78202       9.78202       210.105       219.887    
  66  0.636484     -0.451797      -16.9619       16.9619       196.339       213.301    
  67  0.336462      -1.08927      -40.8949       40.8949       250.873       291.767    
  68  0.534955     -0.625573      -23.4861       23.4861       194.719       218.205    
  69  0.847446E-01  -2.46811      -92.6611       92.6611       243.859       336.520    
  70  0.917274     -0.863490E-01  -3.24183       3.24183       252.992       256.234    
  71  0.518675     -0.656478      -24.6463       24.6463       244.431       269.078    
  72  0.975471E-01  -2.32742      -87.3790       87.3790       251.224       338.603    
  73  0.863693     -0.146538      -5.50154       5.50154       189.338       194.839    
loop,thermsimp(1:2)       82   163.039       90.1131    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    219        191.79          0.86          1.12         23.52          0.21          0.05         25.75
Just calling func    0   0         25.76


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    220        214.41          0.86          1.12         23.45          0.38          0.05         25.86
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    191.79
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    37.5433               217
loop is:       82
neval is:      219
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       82      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    75.0866      0.500000    
T0,tstep,tfreq (these do not change):             72
current SAtemp,tstepnext are:    37.5433               217
loop is:       83
neval is:      219


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 




neval>tstepnex so lower away!t
---> lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
     new SAtemp,tstepnext are :    18.7717               289

 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      289
neval,tstepnext:      219     289

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.609134     -0.495717      -9.30542       9.30542       184.342       193.647    
   2  0.266275      -1.32323      -24.8391       24.8391       186.491       211.330    
   3  0.545538     -0.605984      -11.3753       11.3753       186.965       198.340    
   4  0.196234      -1.62845      -30.5686       30.5686       183.150       213.719    
   5  0.786411     -0.240275      -4.51037       4.51037       187.385       191.896    
   6  0.453912     -0.789853      -14.8268       14.8268       192.862       207.688    
   7  0.900549     -0.104751      -1.96634       1.96634       189.338       191.304    
   8  0.339919      -1.07905      -20.2555       20.2555       187.014       207.270    
   9  0.511643     -0.670128      -12.5794       12.5794       196.829       209.408    
  10  0.628202     -0.464894      -8.72682       8.72682       182.376       191.103    
  11  0.672886E-01  -2.69876      -50.6603       50.6603       188.172       238.833    
  12  0.518493     -0.656829      -12.3298       12.3298       188.629       200.959    
  13  0.994926     -0.508642E-02 -0.954804E-01  0.954804E-01   189.965       190.060    
  14  0.733191     -0.310349      -5.82576       5.82576       187.830       193.656    
  15  0.952818     -0.483318E-01 -0.907268      0.907268       200.132       201.039    
  16  0.735955     -0.306586      -5.75513       5.75513       186.996       192.751    
  17  0.743149     -0.296859      -5.57253       5.57253       202.842       208.415    
  18  0.549375     -0.598975      -11.2437       11.2437       181.591       192.834    
  19  0.355140      -1.03524      -19.4332       19.4332       194.261       213.694    
  20  0.482165     -0.729469      -13.6933       13.6933       191.566       205.259    
  21  0.577197     -0.549571      -10.3164       10.3164       184.949       195.265    
  22  0.107316E-01  -4.53456      -85.1212       85.1212       201.853       286.974    
  23  0.923969     -0.790764E-01  -1.48439       1.48439       183.049       184.533    
  24  0.810451     -0.210164      -3.94513       3.94513       196.339       200.284    
  25  0.143346      -1.94249      -36.4638       36.4638       209.714       246.177    
  26  0.994184     -0.583318E-02 -0.109499      0.109499       191.928       192.038    
  27  0.870737     -0.138415      -2.59828       2.59828       212.336       214.934    
  28  0.970691     -0.297469E-01 -0.558399      0.558399       205.251       205.810    
  29  0.351269      -1.04620      -19.6390       19.6390       190.338       209.977    
  30  0.464982     -0.765756      -14.3745       14.3745       194.719       209.093    
  31  0.921785     -0.814432E-01  -1.52882       1.52882       214.200       215.729    
  32  0.110512      -2.20263      -41.3470       41.3470       210.105       251.452    
  33  0.261408      -1.34167      -25.1854       25.1854       181.022       206.207    
  34  0.908908     -0.955118E-01  -1.79292       1.79292       207.128       208.921    
  35  0.819412     -0.199168      -3.73871       3.73871       206.991       210.730    
  36  0.466482     -0.762536      -14.3141       14.3141       212.685       226.999    
  37  0.717237     -0.332349      -6.23874       6.23874       184.656       190.895    
  38  0.802331     -0.220234      -4.13415       4.13415       190.859       194.993    
  39  0.949390     -0.519355E-01 -0.974915      0.974915       176.615       177.590    
  40  0.258511      -1.35282      -25.3946       25.3946       183.173       208.567    
  41  0.270423      -1.30777      -24.5490       24.5490       183.839       208.388    
  42  0.366439      -1.00392      -18.8453       18.8453       221.702       240.547    
  43  0.934403     -0.678476E-01  -1.27361       1.27361       220.149       221.423    
  44  0.956654     -0.443133E-01 -0.831834      0.831834       184.702       185.534    
  45  0.377790     -0.973417      -18.2726       18.2726       182.391       200.664    
  46  0.203667      -1.59127      -29.8708       29.8708       188.759       218.630    
  47  0.673892     -0.394685      -7.40889       7.40889       197.890       205.299    
  48  0.347380      -1.05734      -19.8479       19.8479       236.903       256.751    
  49  0.144339      -1.93559      -36.3343       36.3343       229.060       265.394    
  50  0.728571     -0.316670      -5.94441       5.94441       252.992       258.937    
  51  0.243065      -1.41443      -26.5511       26.5511       250.354       276.905    
  52  0.686711     -0.375841      -7.05516       7.05516       254.890       261.945    
  53  0.159440      -1.83609      -34.4664       34.4664       212.216       246.682    
  54  0.426258     -0.852711      -16.0068       16.0068       182.339       198.345    
  55  0.929286     -0.733386E-01  -1.37669       1.37669       202.861       204.238    
  56  0.335987E-01  -3.39327      -63.6972       63.6972       244.431       308.129    
  57  0.539383     -0.617330      -11.5883       11.5883       229.865       241.453    
  58  0.384768     -0.955116      -17.9291       17.9291       182.994       200.923    
  59  0.267956      -1.31693      -24.7210       24.7210       201.825       226.546    
  60  0.116616      -2.14887      -40.3379       40.3379       206.532       246.870    
  61  0.852032     -0.160131      -3.00593       3.00593       194.808       197.814    
  62  0.456598     -0.783952      -14.7161       14.7161       196.531       211.247    
  63  0.157616      -1.84759      -34.6824       34.6824       248.098       282.781    
  64  0.928361     -0.743348E-01  -1.39539       1.39539       260.067       261.463    
  65  0.200440      -1.60724      -30.1706       30.1706       208.927       239.098    
  66  0.106743      -2.23733      -41.9984       41.9984       250.873       292.871    
  67  0.786346     -0.240359      -4.51193       4.51193       244.735       249.247    
  68  0.481815     -0.730195      -13.7070       13.7070       188.593       202.300    
  69  0.410111     -0.891327      -16.7317       16.7317       191.170       207.902    
  70  0.768538     -0.263265      -4.94191       4.94191       243.859       248.801    
  71  0.693325     -0.366257      -6.87525       6.87525       251.224       258.100    
  72  0.462914     -0.770214      -14.4582       14.4582       182.286       196.745    
  73  0.923938     -0.791099E-01  -1.48502       1.48502       191.786       193.271    
loop,thermsimp(1:2)       83   9.30542       24.8391    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    221        193.96          0.86          1.12         23.58          0.18          0.05         25.79
Just calling func    0   0         25.79


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  220    193.96        1.557     -1.450      1.633     -102.6     0.9620    
                      0.3663      1.750     -99.70      3.636     0.4381E-01
                       1.879     -1.534      1.349      0.000     -5.000    
                      -1.202      0.000      0.000      0.000     -1.221    

                      -2.500      9593.      8338.      0.000      0.000    
                     -0.5672     -6.564     -4.480     -8.006      3.335    
                      -14.36     -3.183      2031.      0.000      2883.    

                      0.1231E+05 0.1137E+05 -669.5     0.1495E+05  2930.    
                       4310.     0.1484    -0.1678E-01  0.000    -0.4055    
                     -0.4902E-01-0.1213    -0.1191    -0.2034    -0.2800E-01

                      -1.514    -0.6307E-02  0.000    -0.2832     0.1171E-01
                      0.8541E-01-0.5347E-02 0.2694E-01-0.7890E-01 0.1082    
                     -0.7272E-01-0.1218E-02-0.1198    -0.5169      0.000    

                      -1.092     -1.575     -2.598     -2.751    -0.1920    
                      0.2960      9.221      9.124    -0.1807E+05 -4.000    
                     -0.4571    -0.5466      9.457      8.398    -0.2347E+05

                      -4.000     0.1329    -0.4723      8.849      9.018    
                     -0.3746E+05 -7.000    -0.3047    -0.6659      9.468    
                       8.496    -0.2362E+05 -7.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    193.96
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    18.7717               289
loop is:       83
neval is:      220
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       83      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    75.0866      0.500000    
T0,tstep,tfreq (these do not change):             72
current SAtemp,tstepnext are:    18.7717               289
loop is:       84
neval is:      220


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      289
neval,tstepnext:      220     289

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.572627     -0.557521      -10.4656       10.4656       176.615       187.080    
   2  0.468879     -0.757411      -14.2179       14.2179       183.049       197.267    
   3  0.886741E-01  -2.42279      -45.4797       45.4797       184.702       230.182    
   4  0.211783      -1.55219      -29.1372       29.1372       189.965       219.102    
   5  0.573306     -0.556336      -10.4433       10.4433       184.656       195.099    
   6  0.401711     -0.912021      -17.1201       17.1201       182.376       199.496    
   7  0.505706     -0.681800      -12.7985       12.7985       189.338       202.136    
   8  0.603045     -0.505763      -9.49402       9.49402       187.385       196.879    
   9  0.696575     -0.361580      -6.78746       6.78746       191.928       198.716    
  10  0.294614      -1.22209      -22.9406       22.9406       186.996       209.936    
  11  0.527550     -0.639511      -12.0047       12.0047       181.591       193.595    
  12  0.657157     -0.419832      -7.88094       7.88094       191.786       199.667    
  13  0.627866     -0.465428      -8.73685       8.73685       184.342       193.079    
  14  0.993353E-02  -4.61184      -86.5718       86.5718       187.830       274.402    
  15  0.885166E-01  -2.42456      -45.5131       45.5131       190.859       236.372    
  16  0.265764      -1.32515      -24.8752       24.8752       184.949       209.824    
  17  0.446403     -0.806534      -15.1400       15.1400       182.286       197.426    
  18  0.287864      -1.24527      -23.3757       23.3757       194.808       218.184    
  19  0.926928E-01  -2.37846      -44.6477       44.6477       186.965       231.612    
  20  0.394849     -0.929252      -17.4436       17.4436       182.339       199.782    
  21  0.540746     -0.614805      -11.5409       11.5409       196.339       207.880    
  22  0.846435     -0.166721      -3.12964       3.12964       182.391       185.521    
  23  0.417037     -0.874580      -16.4173       16.4173       182.994       199.412    
  24  0.210713      -1.55726      -29.2323       29.2323       188.629       217.861    
  25  0.764669     -0.268312      -5.03666       5.03666       200.132       205.169    
  26  0.219471E-01  -3.81912      -71.6912       71.6912       188.593       260.284    
  27  0.200728      -1.60581      -30.1436       30.1436       202.861       233.005    
  28  0.572660     -0.557463      -10.4645       10.4645       191.566       202.031    
  29  0.599083E-01  -2.81494      -52.8411       52.8411       197.890       250.732    
  30  0.214614      -1.53891      -28.8879       28.8879       205.251       234.139    
  31  0.489389     -0.714598      -13.4142       13.4142       181.022       194.436    
  32  0.162616      -1.81636      -34.0962       34.0962       187.014       221.110    
  33  0.710022     -0.342459      -6.42852       6.42852       192.862       199.290    
  34  0.753583     -0.282916      -5.31080       5.31080       191.170       196.481    
  35  0.743317     -0.296633      -5.56829       5.56829       183.839       189.407    
  36  0.155416      -1.86165      -34.9462       34.9462       202.842       237.788    
  37  0.643355     -0.441059      -8.27940       8.27940       183.173       191.452    
  38  0.656098     -0.421444      -7.91121       7.91121       207.128       215.039    
  39  0.327550      -1.11611      -20.9513       20.9513       194.719       215.670    
  40  0.192244      -1.64899      -30.9543       30.9543       196.829       227.783    
  41  0.433590     -0.835657      -15.6867       15.6867       190.338       206.025    
  42  0.788561     -0.237545      -4.45912       4.45912       206.991       211.450    
  43  0.978028     -0.222173E-01 -0.417056      0.417056       196.531       196.948    
  44  0.110322      -2.20435      -41.3793       41.3793       186.491       227.870    
  45  0.795332     -0.228995      -4.29862       4.29862       194.261       198.559    
  46  0.497518E-01  -3.00071      -56.3283       56.3283       183.150       239.478    
  47  0.852459     -0.159631      -2.99653       2.99653       212.336       215.332    
  48  0.133240      -2.01560      -37.8362       37.8362       214.200       252.037    
  49  0.671163     -0.398743      -7.48507       7.48507       188.759       196.244    
  50  0.245122      -1.40600      -26.3929       26.3929       220.149       246.542    
  51  0.820498     -0.197843      -3.71384       3.71384       201.825       205.539    
  52  0.422422     -0.861751      -16.1765       16.1765       212.685       228.862    
  53  0.946612E-01  -2.35745      -44.2533       44.2533       188.172       232.425    
  54  0.902486     -0.102603      -1.92602       1.92602       208.927       210.853    
  55  0.858585     -0.152469      -2.86210       2.86210       221.702       224.564    
  56  0.713346     -0.337789      -6.34085       6.34085       229.865       236.206    
  57  0.497785     -0.697587      -13.0949       13.0949       209.714       222.808    
  58  0.971461     -0.289536E-01 -0.543508      0.543508       212.216       212.759    
  59  0.714587     -0.336051      -6.30823       6.30823       206.532       212.841    
  60  0.194565E-01  -3.93958      -73.9523       73.9523       243.859       317.811    
  61  0.675786E-01  -2.69446      -50.5795       50.5795       244.735       295.315    
  62  0.924162     -0.788681E-01  -1.48048       1.48048       210.105       211.586    
  63  0.988536     -0.115299E-01 -0.216435      0.216435       236.903       237.119    
  64  0.136917      -1.98838      -37.3252       37.3252       251.224       288.550    
  65  0.529964     -0.634945      -11.9190       11.9190       252.992       264.911    
  66  0.369278     -0.996204      -18.7004       18.7004       260.067       278.768    
  67  0.186364      -1.68006      -31.5374       31.5374       254.890       286.427    
  68  0.314345      -1.15726      -21.7238       21.7238       229.060       250.784    
  69  0.451257     -0.795718      -14.9369       14.9369       250.354       265.291    
  70  0.194510      -1.63727      -30.7343       30.7343       248.098       278.833    
  71  0.690618     -0.370168      -6.94866       6.94866       201.853       208.801    
  72  0.828229     -0.188466      -3.53781       3.53781       250.873       254.410    
  73  0.161272      -1.82466      -34.2519       34.2519       193.963       228.215    
loop,thermsimp(1:2)       84   10.4656       14.2179    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    222        183.05          0.86          1.12         23.47          0.27          0.05         25.77
Just calling func    0   0         25.77


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    223        822.59          0.86          1.12         23.41          0.39          0.05         25.83
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    183.05
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    18.7717               289
loop is:       84
neval is:      222
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       84      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    75.0866      0.500000    
T0,tstep,tfreq (these do not change):             72
current SAtemp,tstepnext are:    18.7717               289
loop is:       85
neval is:      222


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      289
neval,tstepnext:      222     289

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.197499      -1.62202      -30.4480       30.4480       182.391       212.839    
   2  0.793097     -0.231809      -4.35144       4.35144       176.615       180.966    
   3  0.261081      -1.34293      -25.2089       25.2089       183.839       209.048    
   4  0.912198     -0.918984E-01  -1.72509       1.72509       183.173       184.898    
   5  0.493539     -0.706153      -13.2557       13.2557       184.342       197.597    
   6  0.721001     -0.327115      -6.14048       6.14048       181.591       187.731    
   7  0.578790     -0.546816      -10.2646       10.2646       181.022       191.286    
   8  0.684127     -0.379612      -7.12594       7.12594       184.656       191.782    
   9  0.627712     -0.465674      -8.74147       8.74147       188.759       197.500    
  10  0.858540     -0.152522      -2.86309       2.86309       191.170       194.033    
  11  0.712254E-01  -2.64191      -49.5929       49.5929       187.385       236.978    
  12  0.927250     -0.755316E-01  -1.41785       1.41785       196.531       197.949    
  13  0.458073     -0.780727      -14.6555       14.6555       183.049       197.704    
  14  0.940004     -0.618714E-01  -1.16143       1.16143       182.286       183.448    
  15  0.322549      -1.13150      -21.2401       21.2401       194.261       215.501    
  16  0.939473     -0.624358E-01  -1.17202       1.17202       191.928       193.100    
  17  0.726080     -0.320095      -6.00872       6.00872       192.862       198.870    
  18  0.602088E-02  -5.11252      -95.9705       95.9705       182.994       278.965    
  19  0.735289     -0.307492      -5.77214       5.77214       182.376       188.148    
  20  0.847617     -0.165326      -3.10345       3.10345       191.786       194.890    
  21  0.747190E-01  -2.59402      -48.6940       48.6940       182.339       231.033    
  22  0.248374      -1.39282      -26.1455       26.1455       191.566       217.712    
  23  0.350184      -1.04930      -19.6970       19.6970       189.338       209.035    
  24  0.327739E-03  -8.02329      -150.610       150.610       200.132       350.743    
  25  0.130012      -2.04013      -38.2966       38.2966       201.825       240.122    
  26  0.609791     -0.494639      -9.28519       9.28519       190.338       199.623    
  27  0.793414     -0.231410      -4.34395       4.34395       196.339       200.683    
  28  0.962567     -0.381519E-01 -0.716174      0.716174       201.853       202.569    
  29  0.499469     -0.694211      -13.0315       13.0315       184.949       197.980    
  30  0.887491     -0.119357      -2.24053       2.24053       186.996       189.236    
  31  0.136374      -1.99236      -37.3998       37.3998       208.927       246.327    
  32  0.292356      -1.22978      -23.0851       23.0851       206.991       230.076    
  33  0.301564      -1.19877      -22.5030       22.5030       210.105       232.608    
  34  0.352543      -1.04258      -19.5710       19.5710       212.216       231.787    
  35  0.483726     -0.726236      -13.6327       13.6327       206.532       220.165    
  36  0.410499     -0.890381      -16.7139       16.7139       207.128       223.842    
  37  0.458111     -0.780644      -14.6540       14.6540       212.336       226.990    
  38  0.670071     -0.400372      -7.51565       7.51565       194.719       202.234    
  39  0.175486      -1.74020      -32.6664       32.6664       188.629       221.295    
  40  0.798907     -0.224511      -4.21444       4.21444       194.808       199.023    
  41  0.270487      -1.30753      -24.5446       24.5446       189.965       214.510    
  42  0.480368     -0.733202      -13.7634       13.7634       187.014       200.778    
  43  0.658406     -0.417933      -7.84530       7.84530       209.714       217.559    
  44  0.937976     -0.640304E-01  -1.20196       1.20196       221.702       222.904    
  45  0.710083     -0.342373      -6.42690       6.42690       196.829       203.255    
  46  0.567340     -0.566797      -10.6397       10.6397       186.491       197.131    
  47  0.201426      -1.60233      -30.0784       30.0784       193.963       224.041    
  48  0.660313     -0.415042      -7.79102       7.79102       212.685       220.476    
  49  0.524008     -0.646249      -12.1312       12.1312       184.702       196.833    
  50  0.513616     -0.666280      -12.5072       12.5072       186.965       199.472    
  51  0.951218     -0.500122E-01 -0.938813      0.938813       188.172       189.111    
  52  0.703465     -0.351737      -6.60269       6.60269       202.861       209.464    
  53  0.702859     -0.352600      -6.61888       6.61888       205.251       211.870    
  54  0.453067     -0.791715      -14.8618       14.8618       229.865       244.727    
  55  0.202116      -1.59891      -30.0143       30.0143       190.859       220.873    
  56  0.491988     -0.709301      -13.3148       13.3148       236.903       250.218    
  57  0.632131     -0.458659      -8.60978       8.60978       202.842       211.452    
  58  0.911086     -0.931178E-01  -1.74797       1.74797       183.150       184.898    
  59  0.888750     -0.117939      -2.21392       2.21392       220.149       222.363    
  60  0.468235     -0.758785      -14.2437       14.2437       197.890       212.134    
  61  0.971366     -0.290520E-01 -0.545355      0.545355       229.060       229.605    
  62  0.622947     -0.473294      -8.88452       8.88452       214.200       223.085    
  63  0.837000     -0.177932      -3.34007       3.34007       250.873       254.213    
  64  0.495636     -0.701913      -13.1761       13.1761       188.593       201.769    
  65  0.251386      -1.38077      -25.9193       25.9193       252.992       278.912    
  66  0.580065E-01  -2.84720      -53.4467       53.4467       250.354       303.800    
  67  0.601569     -0.508214      -9.54001       9.54001       187.830       197.370    
  68  0.249260      -1.38926      -26.0787       26.0787       260.067       286.146    
  69  0.309647E-01  -3.47491      -65.2298       65.2298       248.098       313.328    
  70  0.653539     -0.425353      -7.98457       7.98457       254.890       262.875    
  71  0.987034     -0.130508E-01 -0.244985      0.244985       251.224       251.469    
  72  0.712168     -0.339441      -6.37188       6.37188       244.735       251.107    
  73  0.935651     -0.665123E-01  -1.24855       1.24855       183.048       184.297    
loop,thermsimp(1:2)       85   30.4480       4.35144    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    224        264.54          0.86          1.12         23.41          0.32          0.05         25.76
Just calling func    0   0         25.76


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    264.54
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    18.7717               289
loop is:       85
neval is:      223
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       85      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    75.0866      0.500000    
T0,tstep,tfreq (these do not change):             72
current SAtemp,tstepnext are:    18.7717               289
loop is:       86
neval is:      223


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      289
neval,tstepnext:      223     289

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.464881     -0.765974      -14.3786       14.3786       176.615       190.993    
   2  0.948887     -0.524654E-01 -0.984863      0.984863       182.286       183.271    
   3  0.532332     -0.630488      -11.8353       11.8353       183.048       194.884    
   4  0.374267     -0.982785      -18.4485       18.4485       183.173       201.621    
   5  0.694531     -0.364519      -6.84262       6.84262       183.150       189.993    
   6  0.414371     -0.880994      -16.5377       16.5377       181.591       198.128    
   7  0.208827E-01  -3.86883      -72.6244       72.6244       182.376       255.000    
   8  0.627187     -0.466511      -8.75717       8.75717       188.172       196.929    
   9  0.148799E-01  -4.20774      -78.9863       78.9863       186.996       265.982    
  10  0.809008     -0.211946      -3.97858       3.97858       181.022       185.000    
  11  0.647680     -0.434359      -8.15364       8.15364       184.656       192.809    
  12  0.289351      -1.24012      -23.2790       23.2790       191.928       215.207    
  13  0.222457      -1.50302      -28.2142       28.2142       191.170       219.384    
  14  0.374268     -0.982782      -18.4485       18.4485       191.786       210.235    
  15  0.785765     -0.241097      -4.52579       4.52579       184.702       189.228    
  16  0.298051      -1.21049      -22.7229       22.7229       186.491       209.214    
  17  0.725075     -0.321480      -6.03472       6.03472       187.830       193.865    
  18  0.386364     -0.950976      -17.8514       17.8514       188.759       206.610    
  19  0.631686     -0.459363      -8.62299       8.62299       184.342       192.965    
  20  0.688282     -0.373557      -7.01229       7.01229       183.049       190.061    
  21  0.373817     -0.983990      -18.4711       18.4711       196.531       215.002    
  22  0.219845      -1.51483      -28.4359       28.4359       184.949       213.384    
  23  0.926271     -0.765889E-01  -1.43770       1.43770       192.862       194.299    
  24  0.618127     -0.481061      -9.03032       9.03032       194.808       203.839    
  25  0.176216      -1.73604      -32.5884       32.5884       186.965       219.553    
  26  0.742943     -0.297136      -5.57774       5.57774       190.338       195.916    
  27  0.357690      -1.02809      -19.2989       19.2989       196.339       215.638    
  28  0.478359     -0.737394      -13.8421       13.8421       187.014       200.856    
  29  0.395976     -0.926401      -17.3901       17.3901       188.593       205.983    
  30  0.803186     -0.219169      -4.11416       4.11416       194.719       198.833    
  31  0.231845      -1.46168      -27.4382       27.4382       201.853       229.291    
  32  0.808968     -0.211996      -3.97952       3.97952       196.829       200.808    
  33  0.579217     -0.546078      -10.2508       10.2508       189.338       199.589    
  34  0.384357     -0.956183      -17.9491       17.9491       183.839       201.788    
  35  0.856367     -0.155057      -2.91067       2.91067       202.861       205.772    
  36  0.265661      -1.32553      -24.8824       24.8824       202.842       227.724    
  37  0.288915      -1.24162      -23.3073       23.3073       205.251       228.559    
  38  0.224915      -1.49203      -28.0079       28.0079       197.890       225.898    
  39  0.685944     -0.376959      -7.07615       7.07615       182.391       189.468    
  40  0.265936      -1.32450      -24.8630       24.8630       189.965       214.828    
  41  0.412966     -0.884389      -16.6014       16.6014       194.261       210.862    
  42  0.440796     -0.819173      -15.3772       15.3772       209.714       225.091    
  43  0.572522     -0.557705      -10.4690       10.4690       191.566       202.035    
  44  0.798412     -0.225131      -4.22608       4.22608       206.532       210.758    
  45  0.127097      -2.06281      -38.7223       38.7223       212.685       251.407    
  46  0.243397      -1.41306      -26.5255       26.5255       190.859       217.385    
  47  0.322195      -1.13260      -21.2607       21.2607       188.629       209.890    
  48  0.512728     -0.668011      -12.5397       12.5397       220.149       232.689    
  49  0.786191     -0.240556      -4.51563       4.51563       221.702       226.217    
  50  0.733079     -0.310501      -5.82862       5.82862       214.200       220.029    
  51  0.601364     -0.508554      -9.54640       9.54640       207.128       216.675    
  52  0.348529      -1.05403      -19.7859       19.7859       193.963       213.749    
  53  0.923986     -0.790584E-01  -1.48406       1.48406       212.336       213.820    
  54  0.843742     -0.169908      -3.18946       3.18946       229.060       232.249    
  55  0.723581     -0.323543      -6.07343       6.07343       206.991       213.065    
  56  0.378158     -0.972444      -18.2544       18.2544       182.339       200.593    
  57  0.463644     -0.768638      -14.4286       14.4286       212.216       226.644    
  58  0.427569     -0.849641      -15.9492       15.9492       210.105       226.054    
  59  0.235852      -1.44455      -27.1166       27.1166       187.385       214.502    
  60  0.203797      -1.59063      -29.8587       29.8587       201.825       231.684    
  61  0.146982E-02  -6.52261      -122.440       122.440       229.865       352.305    
  62  0.681525     -0.383422      -7.19747       7.19747       208.927       216.124    
  63  0.931276     -0.711992E-01  -1.33653       1.33653       236.903       238.240    
  64  0.581849     -0.541545      -10.1657       10.1657       244.735       254.901    
  65  0.652684     -0.426663      -8.00916       8.00916       251.224       259.234    
  66  0.388365     -0.945809      -17.7544       17.7544       250.873       268.627    
  67  0.216086      -1.53208      -28.7596       28.7596       254.890       283.650    
  68  0.409967     -0.891679      -16.7383       16.7383       252.992       269.731    
  69  0.440345     -0.820196      -15.3964       15.3964       182.994       198.391    
  70  0.507524E-01  -2.98080      -55.9545       55.9545       260.067       316.022    
  71  0.734141     -0.309054      -5.80146       5.80146       250.354       256.155    
  72  0.701795     -0.354114      -6.64730       6.64730       248.098       254.746    
  73  0.741735     -0.298763      -5.60828       5.60828       264.535       270.143    
loop,thermsimp(1:2)       86   14.3786      0.984863    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    225        194.78          0.86          1.12         23.66          0.17          0.05         25.86
Just calling func    0   0         25.86


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    194.78
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    18.7717               289
loop is:       86
neval is:      224
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       86      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    75.0866      0.500000    
T0,tstep,tfreq (these do not change):             72
current SAtemp,tstepnext are:    18.7717               289
loop is:       87
neval is:      224


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      289
neval,tstepnext:      224     289

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.182970      -1.69843      -31.8824       31.8824       182.286       214.169    
   2  0.721345     -0.326637      -6.13153       6.13153       181.022       187.153    
   3  0.842493     -0.171390      -3.21726       3.21726       184.702       187.919    
   4  0.260540      -1.34500      -25.2478       25.2478       182.391       207.639    
   5  0.782605     -0.245127      -4.60144       4.60144       183.150       187.752    
   6  0.208492      -1.56785      -29.4312       29.4312       183.049       212.480    
   7  0.290568E-01  -3.53850      -66.4235       66.4235       176.615       243.038    
   8  0.673682     -0.394997      -7.41474       7.41474       184.656       192.071    
   9  0.399393     -0.917808      -17.2288       17.2288       184.342       201.571    
  10  0.966971     -0.335863E-01 -0.630471      0.630471       187.830       188.461    
  11  0.390645     -0.939956      -17.6445       17.6445       192.862       210.506    
  12  0.259548      -1.34881      -25.3195       25.3195       183.048       208.368    
  13  0.260765      -1.34413      -25.2316       25.2316       190.338       215.570    
  14  0.110601E-01  -4.50441      -84.5553       84.5553       188.172       272.728    
  15  0.727710     -0.317852      -5.96661       5.96661       181.591       187.557    
  16  0.717076     -0.332574      -6.24296       6.24296       182.994       189.237    
  17  0.612129     -0.490811      -9.21334       9.21334       194.719       203.932    
  18  0.589376     -0.528691      -9.92440       9.92440       189.338       199.262    
  19  0.541615     -0.613199      -11.5108       11.5108       182.339       193.849    
  20  0.330403      -1.10744      -20.7885       20.7885       196.829       217.617    
  21  0.229530      -1.47172      -27.6266       27.6266       187.014       214.641    
  22  0.564010     -0.572684      -10.7502       10.7502       183.173       193.923    
  23  0.454226     -0.789161      -14.8138       14.8138       183.839       198.653    
  24  0.579528     -0.545541      -10.2407       10.2407       191.566       201.807    
  25  0.245500      -1.40446      -26.3640       26.3640       194.808       221.172    
  26  0.708019     -0.345284      -6.48155       6.48155       202.861       209.343    
  27  0.300215      -1.20326      -22.5871       22.5871       188.593       211.180    
  28  0.721461     -0.326478      -6.12852       6.12852       188.759       194.887    
  29  0.326772      -1.11849      -20.9960       20.9960       186.491       207.487    
  30  0.580879     -0.543212      -10.1970       10.1970       188.629       198.826    
  31  0.963075     -0.376241E-01 -0.706267      0.706267       191.786       192.493    
  32  0.656935     -0.420170      -7.88728       7.88728       206.532       214.420    
  33  0.908335     -0.961416E-01  -1.80474       1.80474       194.261       196.066    
  34  0.765938     -0.266654      -5.00554       5.00554       206.991       211.997    
  35  0.497301     -0.698561      -13.1131       13.1131       184.949       198.062    
  36  0.833603     -0.181997      -3.41639       3.41639       193.963       197.379    
  37  0.433057     -0.836886      -15.7097       15.7097       212.336       228.045    
  38  0.349547      -1.05112      -19.7312       19.7312       187.385       207.116    
  39  0.142838      -1.94604      -36.5305       36.5305       189.965       226.495    
  40  0.326780      -1.11847      -20.9955       20.9955       196.531       217.527    
  41  0.707709     -0.345723      -6.48979       6.48979       191.928       198.418    
  42  0.914339     -0.895538E-01  -1.68107       1.68107       196.339       198.020    
  43  0.392800     -0.934454      -17.5412       17.5412       208.927       226.468    
  44  0.434772     -0.832933      -15.6355       15.6355       207.128       222.764    
  45  0.229545      -1.47165      -27.6254       27.6254       190.859       218.485    
  46  0.661281     -0.413577      -7.76352       7.76352       191.170       198.934    
  47  0.459966     -0.776602      -14.5781       14.5781       186.965       201.543    
  48  0.352439      -1.04288      -19.5765       19.5765       214.200       233.777    
  49  0.490345     -0.712647      -13.3776       13.3776       209.714       223.091    
  50  0.837788     -0.176990      -3.32240       3.32240       197.890       201.213    
  51  0.247493      -1.39637      -26.2123       26.2123       210.105       236.317    
  52  0.221382      -1.50787      -28.3052       28.3052       221.702       250.007    
  53  0.374412     -0.982399      -18.4413       18.4413       212.216       230.657    
  54  0.170580      -1.76855      -33.1986       33.1986       202.842       236.041    
  55  0.464054     -0.767755      -14.4120       14.4120       205.251       219.663    
  56  0.936961     -0.651140E-01  -1.22230       1.22230       201.853       203.075    
  57  0.302357      -1.19615      -22.4536       22.4536       201.825       224.279    
  58  0.572748E-01  -2.85990      -53.6850       53.6850       229.060       282.745    
  59  0.495156     -0.702883      -13.1943       13.1943       220.149       233.344    
  60  0.101162      -2.29104      -43.0066       43.0066       236.903       279.910    
  61  0.786435E-02  -4.84542      -90.9565       90.9565       212.685       303.642    
  62  0.960492     -0.403100E-01 -0.756685      0.756685       248.098       248.855    
  63  0.902616     -0.102458      -1.92331       1.92331       244.735       246.659    
  64  0.646986     -0.435430      -8.17374       8.17374       182.376       190.549    
  65  0.218936      -1.51897      -28.5137       28.5137       250.354       278.867    
  66  0.491829     -0.709625      -13.3208       13.3208       251.224       264.545    
  67  0.873324     -0.135448      -2.54259       2.54259       186.996       189.538    
  68  0.419066     -0.869727      -16.3262       16.3262       250.873       267.199    
  69  0.390022     -0.941553      -17.6745       17.6745       252.992       270.667    
  70  0.843189     -0.170564      -3.20176       3.20176       264.535       267.737    
  71  0.992789     -0.723678E-02 -0.135846      0.135846       254.890       255.026    
  72  0.694490     -0.364577      -6.84371       6.84371       260.067       266.911    
  73  0.329411      -1.11045      -20.8450       20.8450       194.775       215.620    
loop,thermsimp(1:2)       87   31.8824       6.13153    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    226        193.90          0.87          1.12         23.61          0.18          0.05         25.82
Just calling func    0   0         25.82


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    227        257.53          0.86          1.13         23.49          0.21          0.04         25.73
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    193.90
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    18.7717               289
loop is:       87
neval is:      226
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       87      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    75.0866      0.500000    
T0,tstep,tfreq (these do not change):             72
current SAtemp,tstepnext are:    18.7717               289
loop is:       88
neval is:      226


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      289
neval,tstepnext:      226     289

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.220180      -1.51331      -28.4073       28.4073       181.022       209.429    
   2  0.246752E-01  -3.70196      -69.4919       69.4919       181.591       251.082    
   3  0.679039     -0.387076      -7.26606       7.26606       183.150       190.416    
   4  0.709027     -0.343862      -6.45485       6.45485       184.702       191.157    
   5  0.577754     -0.548608      -10.2983       10.2983       187.830       198.129    
   6  0.738694     -0.302871      -5.68540       5.68540       182.994       188.680    
   7  0.181723      -1.70527      -32.0108       32.0108       186.996       219.006    
   8  0.103748      -2.26579      -42.5326       42.5326       182.376       224.908    
   9  0.456811E-02  -5.38866      -101.154       101.154       184.656       285.810    
  10  0.303247      -1.19321      -22.3985       22.3985       191.786       214.185    
  11  0.284736      -1.25619      -23.5808       23.5808       182.339       205.919    
  12  0.900494     -0.104812      -1.96749       1.96749       183.173       185.140    
  13  0.691792     -0.368470      -6.91679       6.91679       188.759       195.676    
  14  0.502714     -0.687735      -12.9099       12.9099       194.261       207.171    
  15  0.305219      -1.18673      -22.2768       22.2768       193.963       216.240    
  16  0.412005     -0.886720      -16.6452       16.6452       196.339       212.984    
  17  0.412225     -0.886186      -16.6352       16.6352       184.949       201.584    
  18  0.121697      -2.10622      -39.5373       39.5373       191.928       231.466    
  19  0.465374     -0.764915      -14.3587       14.3587       183.839       198.198    
  20  0.273016      -1.29823      -24.3698       24.3698       188.629       212.999    
  21  0.502763     -0.687636      -12.9081       12.9081       191.170       204.078    
  22  0.516442     -0.660793      -12.4042       12.4042       189.338       201.742    
  23  0.554333     -0.589990      -11.0751       11.0751       197.890       208.966    
  24  0.192397E-01  -3.95078      -74.1626       74.1626       186.965       261.127    
  25  0.451279E-01  -3.09825      -58.1594       58.1594       184.342       242.501    
  26  0.457340     -0.782327      -14.6856       14.6856       191.566       206.252    
  27  0.325184      -1.12336      -21.0874       21.0874       201.853       222.940    
  28  0.700952     -0.355315      -6.66985       6.66985       194.719       201.389    
  29  0.961087     -0.396906E-01 -0.745058      0.745058       187.385       188.130    
  30  0.195966E-02  -6.23498      -117.041       117.041       186.491       303.532    
  31  0.766376     -0.266082      -4.99481       4.99481       182.391       187.386    
  32  0.398846     -0.919180      -17.2545       17.2545       183.048       200.303    
  33  0.675249     -0.392674      -7.37114       7.37114       202.861       210.233    
  34  0.189468      -1.66354      -31.2274       31.2274       192.862       224.089    
  35  0.444608     -0.810562      -15.2156       15.2156       188.593       203.808    
  36  0.514006     -0.665520      -12.4929       12.4929       206.991       219.484    
  37  0.575199     -0.553039      -10.3815       10.3815       183.049       193.430    
  38  0.121449      -2.10826      -39.5756       39.5756       182.286       221.862    
  39  0.209130      -1.56480      -29.3739       29.3739       206.532       235.906    
  40  0.466284E-01  -3.06555      -57.5454       57.5454       187.014       244.560    
  41  0.386630E-01  -3.25287      -61.0618       61.0618       190.338       251.400    
  42  0.335751E-01  -3.39397      -63.7104       63.7104       194.775       258.486    
  43  0.878126     -0.129965      -2.43966       2.43966       196.531       198.971    
  44  0.652938     -0.426273      -8.00184       8.00184       196.829       204.830    
  45  0.932456E-01  -2.37252      -44.5361       44.5361       190.859       235.395    
  46  0.662683     -0.411458      -7.72375       7.72375       205.251       212.975    
  47  0.204704      -1.58619      -29.7755       29.7755       194.808       224.584    
  48  0.985446     -0.146609E-01 -0.275210      0.275210       207.128       207.403    
  49  0.105847      -2.24576      -42.1566       42.1566       209.714       251.870    
  50  0.843201     -0.170550      -3.20150       3.20150       201.825       205.026    
  51  0.364087      -1.01036      -18.9662       18.9662       208.927       227.893    
  52  0.650651E-01  -2.73237      -51.2910       51.2910       189.965       241.256    
  53  0.968103     -0.324171E-01 -0.608522      0.608522       212.336       212.944    
  54  0.131933      -2.02546      -38.0212       38.0212       212.216       250.237    
  55  0.906847     -0.977815E-01  -1.83552       1.83552       220.149       221.985    
  56  0.443328E-01  -3.11603      -58.4930       58.4930       214.200       272.693    
  57  0.507045     -0.679156      -12.7489       12.7489       202.842       215.591    
  58  0.287709      -1.24581      -23.3859       23.3859       210.105       233.491    
  59  0.900299     -0.105028      -1.97155       1.97155       176.615       178.586    
  60  0.689829E-01  -2.67390      -50.1934       50.1934       244.735       294.929    
  61  0.876407     -0.131925      -2.47645       2.47645       248.098       250.575    
  62  0.718081     -0.331173      -6.21666       6.21666       221.702       227.918    
  63  0.177063      -1.73125      -32.4985       32.4985       254.890       287.389    
  64  0.749425E-01  -2.59103      -48.6380       48.6380       251.224       299.862    
  65  0.136072      -1.99457      -37.4414       37.4414       260.067       297.509    
  66  0.662610     -0.411569      -7.72583       7.72583       250.873       258.598    
  67  0.612646     -0.489969      -9.19752       9.19752       264.535       273.733    
  68  0.258380      -1.35332      -25.4041       25.4041       252.992       278.397    
  69  0.406590     -0.899949      -16.8935       16.8935       188.172       205.066    
  70  0.889463     -0.117137      -2.19886       2.19886       250.354       252.553    
  71  0.568198     -0.565286      -10.6114       10.6114       236.903       247.514    
  72  0.280610      -1.27079      -23.8548       23.8548       229.060       252.915    
  73  0.369152     -0.996547      -18.7068       18.7068       193.901       212.608    
loop,thermsimp(1:2)       88   28.4073       69.4919    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    228        206.03          0.86          1.12         23.45          0.29          0.05         25.77
Just calling func    0   0         25.77


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    229        219.29          0.86          1.12         23.43          0.29          0.04         25.75
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    206.03
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    18.7717               289
loop is:       88
neval is:      228
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       88      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    75.0866      0.500000    
T0,tstep,tfreq (these do not change):             72
current SAtemp,tstepnext are:    18.7717               289
loop is:       89
neval is:      228


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      289
neval,tstepnext:      228     289

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.876761     -0.131521      -2.46887       2.46887       176.615       179.084    
   2  0.765270     -0.267527      -5.02193       5.02193       183.173       188.195    
   3  0.215687      -1.53393      -28.7944       28.7944       182.391       211.186    
   4  0.999601E-01  -2.30298      -43.2308       43.2308       187.385       230.616    
   5  0.706519     -0.347405      -6.52136       6.52136       182.994       189.516    
   6  0.201358      -1.60267      -30.0848       30.0848       183.150       213.235    
   7  0.450677     -0.797005      -14.9611       14.9611       184.702       199.663    
   8  0.897557     -0.108078      -2.02881       2.02881       183.049       185.077    
   9  0.161166      -1.82532      -34.2642       34.2642       188.759       223.023    
  10  0.972556E-01  -2.33041      -43.7457       43.7457       187.830       231.576    
  11  0.742112     -0.298255      -5.59873       5.59873       183.839       189.438    
  12  0.172377      -1.75807      -33.0019       33.0019       196.531       229.533    
  13  0.658751     -0.417410      -7.83547       7.83547       183.048       190.884    
  14  0.725340     -0.321114      -6.02784       6.02784       194.719       200.747    
  15  0.501488     -0.690175      -12.9557       12.9557       184.949       197.904    
  16  0.845372     -0.167978      -3.15323       3.15323       189.338       192.491    
  17  0.132369      -2.02216      -37.9593       37.9593       188.593       226.552    
  18  0.734515E-01  -2.61113      -49.0152       49.0152       191.170       240.185    
  19  0.391205     -0.938523      -17.6176       17.6176       196.829       214.446    
  20  0.376983     -0.975555      -18.3128       18.3128       201.825       220.138    
  21  0.315463      -1.15371      -21.6571       21.6571       188.172       209.829    
  22  0.267113      -1.32008      -24.7801       24.7801       182.339       207.119    
  23  0.965292     -0.353243E-01 -0.663096      0.663096       191.566       192.229    
  24  0.954592     -0.464714E-01 -0.872346      0.872346       194.261       195.133    
  25  0.992414     -0.761515E-02 -0.142949      0.142949       207.128       207.271    
  26  0.867953E-02  -4.74679      -89.1051       89.1051       197.890       286.996    
  27  0.829585     -0.186829      -3.50709       3.50709       181.022       184.529    
  28  0.349695      -1.05069      -19.7233       19.7233       202.861       222.585    
  29  0.673511     -0.395251      -7.41951       7.41951       193.901       201.321    
  30  0.340696      -1.07676      -20.2126       20.2126       212.336       232.548    
  31  0.558731     -0.582087      -10.9267       10.9267       205.251       216.178    
  32  0.747295     -0.291295      -5.46808       5.46808       196.339       201.807    
  33  0.123287      -2.09324      -39.2936       39.2936       188.629       227.923    
  34  0.355051      -1.03549      -19.4379       19.4379       191.786       211.224    
  35  0.511895     -0.669636      -12.5702       12.5702       202.842       215.412    
  36  0.571856E-01  -2.86145      -53.7142       53.7142       193.963       247.677    
  37  0.507517     -0.678226      -12.7314       12.7314       186.996       199.727    
  38  0.326770      -1.11850      -20.9960       20.9960       206.991       227.987    
  39  0.736001     -0.306523      -5.75395       5.75395       182.286       188.040    
  40  0.970046     -0.304120E-01 -0.570883      0.570883       220.149       220.720    
  41  0.673510     -0.395253      -7.41954       7.41954       201.853       209.272    
  42  0.335032      -1.09353      -20.5274       20.5274       192.862       213.389    
  43  0.872321E-01  -2.43918      -45.7875       45.7875       194.808       240.596    
  44  0.749956     -0.287741      -5.40137       5.40137       182.376       187.777    
  45  0.159001      -1.83884      -34.5181       34.5181       208.927       243.445    
  46  0.529687     -0.635468      -11.9288       11.9288       221.702       233.630    
  47  0.142415      -1.94901      -36.5861       36.5861       191.928       228.515    
  48  0.803387     -0.218919      -4.10946       4.10946       210.105       214.215    
  49  0.709133     -0.343713      -6.45206       6.45206       190.859       197.311    
  50  0.261172      -1.34258      -25.2024       25.2024       206.532       231.735    
  51  0.106599      -2.23868      -42.0238       42.0238       189.965       231.989    
  52  0.955666     -0.453468E-01 -0.851234      0.851234       184.342       185.193    
  53  0.376236     -0.977539      -18.3500       18.3500       187.014       205.364    
  54  0.890774     -0.115665      -2.17122       2.17122       236.903       239.074    
  55  0.554077     -0.590452      -11.0838       11.0838       212.216       223.299    
  56  0.892825E-01  -2.41595      -45.3514       45.3514       248.098       293.450    
  57  0.941033     -0.607774E-01  -1.14089       1.14089       181.591       182.731    
  58  0.209380E-01  -3.86619      -72.5748       72.5748       190.338       262.913    
  59  0.427794     -0.849113      -15.9392       15.9392       209.714       225.653    
  60  0.194887      -1.63533      -30.6979       30.6979       250.354       281.052    
  61  0.840289     -0.174009      -3.26644       3.26644       229.060       232.326    
  62  0.634527     -0.454875      -8.53876       8.53876       194.775       203.314    
  63  0.159135      -1.83800      -34.5023       34.5023       250.873       285.375    
  64  0.182987      -1.69834      -31.8806       31.8806       186.965       218.845    
  65  0.520726     -0.652532      -12.2491       12.2491       214.200       226.449    
  66  0.249623      -1.38781      -26.0514       26.0514       264.535       290.586    
  67  0.801631     -0.221107      -4.15054       4.15054       252.992       257.143    
  68  0.329011      -1.11166      -20.8678       20.8678       184.656       205.524    
  69  0.995152     -0.485930E-02 -0.912172E-01  0.912172E-01   254.890       254.981    
  70  0.187107      -1.67607      -31.4627       31.4627       244.735       276.198    
  71  0.122259      -2.10161      -39.4508       39.4508       260.067       299.518    
  72  0.311222      -1.16725      -21.9112       21.9112       251.224       273.136    
  73  0.953750     -0.473535E-01 -0.888904      0.888904       206.028       206.917    
loop,thermsimp(1:2)       89   2.46887       5.02193    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    230        305.34          0.86          1.14         23.47          0.26          0.05         25.79
Just calling func    0   0         25.78


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    231        293.80          0.86          1.12         23.52          0.21          0.05         25.77
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3    293.80
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    18.7717               289
loop is:       89
neval is:      230
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       89      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    75.0866      0.500000    
T0,tstep,tfreq (these do not change):             72
current SAtemp,tstepnext are:    18.7717               289
loop is:       90
neval is:      230


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      289
neval,tstepnext:      230     289

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.157371      -1.84915      -34.7115       34.7115       176.615       211.326    
   2  0.894146     -0.111886      -2.10028       2.10028       181.591       183.691    
   3  0.721270     -0.326741      -6.13348       6.13348       181.022       187.155    
   4  0.536866     -0.622006      -11.6761       11.6761       183.049       194.725    
   5  0.418107     -0.872017      -16.3692       16.3692       184.342       200.711    
   6  0.391189     -0.938564      -17.6184       17.6184       182.376       199.994    
   7  0.799669     -0.223558      -4.19655       4.19655       182.286       186.483    
   8  0.595070     -0.519076      -9.74392       9.74392       183.173       192.917    
   9  0.384356E-03  -7.86394      -147.619       147.619       183.839       331.458    
  10  0.654302     -0.424187      -7.96269       7.96269       182.994       190.957    
  11  0.873355     -0.135413      -2.54193       2.54193       183.048       185.590    
  12  0.303212      -1.19332      -22.4006       22.4006       191.566       213.967    
  13  0.434159     -0.834344      -15.6620       15.6620       189.338       205.000    
  14  0.970825     -0.296089E-01 -0.555809      0.555809       194.261       194.817    
  15  0.405896     -0.901659      -16.9256       16.9256       190.859       207.785    
  16  0.250423      -1.38461      -25.9913       25.9913       184.949       210.940    
  17  0.517030     -0.659654      -12.3828       12.3828       184.702       197.085    
  18  0.165468      -1.79897      -33.7697       33.7697       186.996       220.765    
  19  0.679403     -0.386541      -7.25601       7.25601       194.719       201.975    
  20  0.554013     -0.590567      -11.0859       11.0859       193.901       204.987    
  21  0.211764E-01  -3.85487      -72.3623       72.3623       196.339       268.701    
  22  0.453828     -0.790038      -14.8303       14.8303       194.775       209.605    
  23  0.377409     -0.974426      -18.2916       18.2916       187.014       205.306    
  24  0.496879     -0.699408      -13.1290       13.1290       184.656       197.785    
  25  0.214619      -1.53889      -28.8875       28.8875       206.028       234.915    
  26  0.724154     -0.322751      -6.05857       6.05857       182.339       188.397    
  27  0.385609     -0.952932      -17.8881       17.8881       207.128       225.016    
  28  0.777864     -0.251204      -4.71551       4.71551       201.853       206.568    
  29  0.709283     -0.343500      -6.44806       6.44806       188.172       194.620    
  30  0.191760      -1.65151      -31.0016       31.0016       182.391       213.393    
  31  0.347616      -1.05666      -19.8352       19.8352       191.786       211.621    
  32  0.191581      -1.65244      -31.0191       31.0191       183.150       214.169    
  33  0.770989     -0.260081      -4.88216       4.88216       192.862       197.744    
  34  0.788566E-01  -2.54012      -47.6823       47.6823       210.105       257.788    
  35  0.229474      -1.47197      -27.6313       27.6313       196.829       224.460    
  36  0.339326      -1.08079      -20.2883       20.2883       202.842       223.130    
  37  0.220886      -1.51011      -28.3472       28.3472       205.251       233.599    
  38  0.223644      -1.49770      -28.1143       28.1143       186.965       215.079    
  39  0.138287      -1.97842      -37.1383       37.1383       201.825       238.963    
  40  0.796402     -0.227651      -4.27339       4.27339       220.149       224.423    
  41  0.104384      -2.25968      -42.4179       42.4179       202.861       245.279    
  42  0.919642     -0.837713E-01  -1.57252       1.57252       188.759       190.331    
  43  0.360767      -1.01952      -19.1381       19.1381       212.216       231.354    
  44  0.924300     -0.787181E-01  -1.47767       1.47767       209.714       211.191    
  45  0.561139     -0.577786      -10.8460       10.8460       214.200       225.046    
  46  0.509073E-01  -2.97775      -55.8973       55.8973       188.593       244.490    
  47  0.715469     -0.334817      -6.28508       6.28508       188.629       194.914    
  48  0.294040E-01  -3.52662      -66.2006       66.2006       206.991       273.192    
  49  0.264026E-02  -5.93688      -111.445       111.445       191.928       303.373    
  50  0.634029     -0.455661      -8.55350       8.55350       196.531       205.085    
  51  0.319148      -1.14210      -21.4391       21.4391       187.385       208.824    
  52  0.495674     -0.701836      -13.1746       13.1746       187.830       201.005    
  53  0.838343     -0.176328      -3.30998       3.30998       206.532       209.842    
  54  0.240556      -1.42480      -26.7459       26.7459       189.965       216.711    
  55  0.919800     -0.835990E-01  -1.56929       1.56929       229.060       230.629    
  56  0.652899     -0.426332      -8.00297       8.00297       212.336       220.339    
  57  0.777375     -0.251832      -4.72731       4.72731       221.702       226.429    
  58  0.988137     -0.119340E-01 -0.224021      0.224021       236.903       237.127    
  59  0.771111     -0.259922      -4.87917       4.87917       191.170       196.049    
  60  0.980963     -0.192203E-01 -0.360797      0.360797       194.808       195.169    
  61  0.358823      -1.02493      -19.2395       19.2395       208.927       228.166    
  62  0.398479     -0.920100      -17.2718       17.2718       193.963       211.235    
  63  0.524779     -0.644778      -12.1036       12.1036       254.890       266.994    
  64  0.391693E-01  -3.23986      -60.8176       60.8176       252.992       313.810    
  65  0.494448     -0.704313      -13.2211       13.2211       190.338       203.559    
  66  0.224697      -1.49300      -28.0261       28.0261       251.224       279.251    
  67  0.585684     -0.534974      -10.0424       10.0424       244.735       254.778    
  68  0.558887     -0.581807      -10.9215       10.9215       250.354       261.275    
  69  0.540529     -0.615206      -11.5484       11.5484       250.873       262.421    
  70  0.314620      -1.15639      -21.7074       21.7074       197.890       219.598    
  71  0.763547     -0.269781      -5.06423       5.06423       264.535       269.599    
  72  0.314721      -1.15607      -21.7013       21.7013       248.098       269.800    
  73  0.838345     -0.176326      -3.30993       3.30993       293.795       297.105    
loop,thermsimp(1:2)       90   34.7115       2.10028    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    232        222.33          0.86          1.12         23.44          0.31          0.05         25.78
Just calling func    0   0         25.78


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    222.33
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    18.7717               289
loop is:       90
neval is:      231
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       90      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    75.0866      0.500000    
T0,tstep,tfreq (these do not change):             72
current SAtemp,tstepnext are:    18.7717               289
loop is:       91
neval is:      231


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      289
neval,tstepnext:      231     289

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.102884      -2.27415      -42.6895       42.6895       181.591       224.280    
   2  0.846291     -0.166892      -3.13284       3.13284       183.048       186.181    
   3  0.167054      -1.78944      -33.5907       33.5907       182.286       215.877    
   4  0.786038     -0.240750      -4.51928       4.51928       181.022       185.541    
   5  0.680218     -0.385341      -7.23350       7.23350       182.339       189.572    
   6  0.843894     -0.169729      -3.18609       3.18609       188.759       191.945    
   7  0.295559      -1.21889      -22.8805       22.8805       182.994       205.875    
   8  0.383493     -0.958433      -17.9914       17.9914       183.173       201.164    
   9  0.867247     -0.142431      -2.67366       2.67366       188.172       190.846    
  10  0.241960      -1.41898      -26.6367       26.6367       183.049       209.685    
  11  0.486925     -0.719645      -13.5089       13.5089       194.261       207.770    
  12  0.750166     -0.287460      -5.39611       5.39611       188.629       194.025    
  13  0.507045     -0.679156      -12.7489       12.7489       194.808       207.557    
  14  0.237743      -1.43656      -26.9667       26.9667       191.170       218.137    
  15  0.256837E-01  -3.66190      -68.7399       68.7399       184.702       253.442    
  16  0.776460     -0.253010      -4.74941       4.74941       192.862       197.611    
  17  0.316300      -1.15106      -21.6074       21.6074       184.656       206.263    
  18  0.493161     -0.706919      -13.2700       13.2700       182.376       195.646    
  19  0.807271     -0.214096      -4.01894       4.01894       184.342       188.361    
  20  0.338915      -1.08201      -20.3110       20.3110       187.830       208.141    
  21  0.132986      -2.01751      -37.8720       37.8720       194.719       232.591    
  22  0.409975     -0.891659      -16.7379       16.7379       190.338       207.076    
  23  0.525021     -0.644317      -12.0949       12.0949       193.901       205.996    
  24  0.393064     -0.933783      -17.5287       17.5287       189.338       206.866    
  25  0.176068      -1.73689      -32.6042       32.6042       196.531       229.135    
  26  0.965490     -0.351191E-01 -0.659244      0.659244       187.014       187.673    
  27  0.387767     -0.947350      -17.7833       17.7833       201.853       219.636    
  28  0.936248     -0.658753E-01  -1.23659       1.23659       190.859       192.096    
  29  0.914720     -0.891370E-01  -1.67325       1.67325       187.385       189.059    
  30  0.332171      -1.10211      -20.6883       20.6883       194.775       215.464    
  31  0.845314E-01  -2.47063      -46.3778       46.3778       206.532       252.910    
  32  0.687741     -0.374343      -7.02704       7.02704       184.949       191.976    
  33  0.899776     -0.105610      -1.98247       1.98247       209.714       211.696    
  34  0.558791     -0.581980      -10.9247       10.9247       193.963       204.888    
  35  0.882799     -0.124658      -2.34004       2.34004       176.615       178.955    
  36  0.235569      -1.44575      -27.1391       27.1391       191.786       218.925    
  37  0.533400     -0.628484      -11.7977       11.7977       182.391       194.189    
  38  0.147169      -1.91617      -35.9697       35.9697       191.566       227.536    
  39  0.966208E-01  -2.33696      -43.8686       43.8686       183.150       227.019    
  40  0.952887     -0.482588E-01 -0.905898      0.905898       186.965       187.871    
  41  0.155551      -1.86078      -34.9299       34.9299       189.965       224.895    
  42  0.645067     -0.438401      -8.22952       8.22952       197.890       206.120    
  43  0.394254     -0.930759      -17.4719       17.4719       212.336       229.807    
  44  0.546893     -0.603501      -11.3287       11.3287       186.996       198.324    
  45  0.390314     -0.940803      -17.6604       17.6604       202.842       220.502    
  46  0.311561      -1.16616      -21.8908       21.8908       220.149       242.040    
  47  0.752427E-01  -2.58704      -48.5629       48.5629       196.829       245.391    
  48  0.144673      -1.93328      -36.2909       36.2909       207.128       243.419    
  49  0.297567      -1.21212      -22.7534       22.7534       214.200       236.954    
  50  0.544131     -0.608565      -11.4238       11.4238       221.702       233.125    
  51  0.750603E-01  -2.58946      -48.6085       48.6085       208.927       257.535    
  52  0.127547      -2.05927      -38.6559       38.6559       229.060       267.716    
  53  0.839209     -0.175296      -3.29059       3.29059       212.216       215.506    
  54  0.718305     -0.330861      -6.21081       6.21081       205.251       211.462    
  55  0.246952      -1.39856      -26.2533       26.2533       206.028       232.281    
  56  0.550710     -0.596548      -11.1982       11.1982       236.903       248.101    
  57  0.588510     -0.530162      -9.95201       9.95201       201.825       211.777    
  58  0.361548      -1.01736      -19.0975       19.0975       188.593       207.690    
  59  0.962524     -0.381965E-01 -0.717012      0.717012       202.861       203.578    
  60  0.510442     -0.672478      -12.6235       12.6235       244.735       257.359    
  61  0.177498      -1.72880      -32.4524       32.4524       210.105       242.558    
  62  0.775349     -0.254441      -4.77629       4.77629       250.354       255.130    
  63  0.313518E-01  -3.46248      -64.9966       64.9966       250.873       315.869    
  64  0.136553      -1.99105      -37.3752       37.3752       254.890       292.265    
  65  0.694627E-01  -2.66696      -50.0633       50.0633       196.339       246.402    
  66  0.784048     -0.243285      -4.56686       4.56686       264.535       269.102    
  67  0.561706     -0.576776      -10.8270       10.8270       248.098       258.926    
  68  0.992642E-01  -2.30997      -43.3620       43.3620       206.991       250.353    
  69  0.111580      -2.19301      -41.1665       41.1665       251.224       292.391    
  70  0.655988     -0.421613      -7.91437       7.91437       293.795       301.709    
  71  0.739953     -0.301169      -5.65344       5.65344       191.928       197.582    
  72  0.899949     -0.105417      -1.97885       1.97885       252.992       254.971    
  73  0.308570      -1.17581      -22.0718       22.0718       222.327       244.399    
loop,thermsimp(1:2)       91   42.6895       3.13284    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    233        188.46          0.86          1.12         23.57          0.18          0.05         25.78
Just calling func    0   0         25.78


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    188.46
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    18.7717               289
loop is:       91
neval is:      232
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       91      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    75.0866      0.500000    
T0,tstep,tfreq (these do not change):             72
current SAtemp,tstepnext are:    18.7717               289
loop is:       92
neval is:      232


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      289
neval,tstepnext:      232     289

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.218624      -1.52040      -28.5404       28.5404       176.615       205.155    
   2  0.389473     -0.942961      -17.7009       17.7009       181.022       198.723    
   3  0.919121     -0.843378E-01  -1.58316       1.58316       183.048       184.631    
   4  0.970518     -0.299250E-01 -0.561742      0.561742       187.014       187.576    
   5  0.713317     -0.337830      -6.34162       6.34162       186.965       193.306    
   6  0.639607     -0.446902      -8.38909       8.38909       184.342       192.731    
   7  0.712661     -0.338749      -6.35887       6.35887       187.385       193.744    
   8  0.212311      -1.54970      -29.0905       29.0905       182.339       211.429    
   9  0.831769     -0.184200      -3.45774       3.45774       188.172       191.630    
  10  0.794875     -0.229571      -4.30942       4.30942       188.759       193.068    
  11  0.909815     -0.945137E-01  -1.77418       1.77418       184.949       186.723    
  12  0.753651E-01  -2.58541      -48.5324       48.5324       190.859       239.392    
  13  0.676081     -0.391442      -7.34802       7.34802       188.629       195.977    
  14  0.597437     -0.515107      -9.66941       9.66941       182.391       192.061    
  15  0.146947      -1.91768      -35.9981       35.9981       182.376       218.374    
  16  0.854910     -0.156760      -2.94264       2.94264       191.928       194.871    
  17  0.984999     -0.151146E-01 -0.283725      0.283725       192.862       193.145    
  18  0.533419     -0.628448      -11.7970       11.7970       186.996       198.793    
  19  0.383774     -0.957703      -17.9777       17.9777       183.173       201.150    
  20  0.691729     -0.368561      -6.91851       6.91851       202.861       209.780    
  21  0.313732E-01  -3.46180      -64.9837       64.9837       193.963       258.947    
  22  0.415635     -0.877947      -16.4805       16.4805       182.994       199.475    
  23  0.288746      -1.24221      -23.3183       23.3183       193.901       217.219    
  24  0.176464      -1.73464      -32.5620       32.5620       197.890       230.452    
  25  0.881312     -0.126344      -2.37169       2.37169       184.656       187.028    
  26  0.962783     -0.379267E-01 -0.711948      0.711948       189.338       190.050    
  27  0.415450     -0.878393      -16.4889       16.4889       190.338       206.827    
  28  0.271836      -1.30256      -24.4512       24.4512       194.808       219.260    
  29  0.926655     -0.761736E-01  -1.42990       1.42990       188.593       190.023    
  30  0.277790      -1.28089      -24.0444       24.0444       194.261       218.305    
  31  0.189974      -1.66087      -31.1772       31.1772       187.830       219.008    
  32  0.410540     -0.890281      -16.7120       16.7120       183.049       199.761    
  33  0.952387     -0.487839E-01 -0.915754      0.915754       205.251       206.167    
  34  0.896015     -0.109798      -2.06109       2.06109       209.714       211.775    
  35  0.121549E-01  -4.41002      -82.7834       82.7834       201.825       284.608    
  36  0.723911     -0.323087      -6.06488       6.06488       194.775       200.840    
  37  0.759053     -0.275683      -5.17503       5.17503       212.216       217.391    
  38  0.969929     -0.305320E-01 -0.573136      0.573136       182.286       182.860    
  39  0.852636     -0.159422      -2.99262       2.99262       191.170       194.163    
  40  0.730471     -0.314065      -5.89553       5.89553       191.786       197.682    
  41  0.528358     -0.637981      -11.9759       11.9759       201.853       213.829    
  42  0.404403     -0.905344      -16.9948       16.9948       202.842       219.837    
  43  0.232822      -1.45748      -27.3593       27.3593       181.591       208.950    
  44  0.847643     -0.165296      -3.10287       3.10287       189.965       193.068    
  45  0.429393E-01  -3.14797      -59.0925       59.0925       183.150       242.243    
  46  0.673157     -0.395777      -7.42939       7.42939       191.566       198.995    
  47  0.806068E-01  -2.51817      -47.2703       47.2703       196.531       243.801    
  48  0.926018     -0.768619E-01  -1.44282       1.44282       212.336       213.778    
  49  0.167973      -1.78395      -33.4877       33.4877       206.028       239.516    
  50  0.780773     -0.247471      -4.64544       4.64544       194.719       199.364    
  51  0.565702E-01  -2.87227      -53.9173       53.9173       221.702       275.619    
  52  0.646011     -0.436939      -8.20207       8.20207       214.200       222.402    
  53  0.455316     -0.786763      -14.7688       14.7688       220.149       234.918    
  54  0.410066     -0.891437      -16.7337       16.7337       210.105       226.839    
  55  0.934064     -0.682104E-01  -1.28042       1.28042       207.128       208.409    
  56  0.511079     -0.671231      -12.6001       12.6001       222.327       234.927    
  57  0.578130     -0.547957      -10.2861       10.2861       196.829       207.115    
  58  0.458047     -0.780783      -14.6566       14.6566       196.339       210.995    
  59  0.223630      -1.49776      -28.1155       28.1155       236.903       265.019    
  60  0.952824E-01  -2.35091      -44.1305       44.1305       206.991       251.122    
  61  0.995385     -0.462583E-02 -0.868344E-01  0.868344E-01   206.532       206.619    
  62  0.675298     -0.392602      -7.36978       7.36978       184.702       192.072    
  63  0.728172     -0.317218      -5.95471       5.95471       252.992       258.947    
  64  0.240868      -1.42350      -26.7215       26.7215       250.354       277.075    
  65  0.188028      -1.67116      -31.3705       31.3705       244.735       276.106    
  66  0.645358     -0.437951      -8.22106       8.22106       208.927       217.148    
  67  0.170606      -1.76840      -33.1957       33.1957       248.098       281.294    
  68  0.827167     -0.189749      -3.56190       3.56190       229.060       232.622    
  69  0.457642     -0.781668      -14.6732       14.6732       264.535       279.208    
  70  0.819756E-01  -2.50133      -46.9542       46.9542       254.890       301.844    
  71  0.965811     -0.347876E-01 -0.653021      0.653021       251.224       251.877    
  72  0.806837     -0.214633      -4.02902       4.02902       293.795       297.824    
  73  0.556186     -0.586653      -11.0124       11.0124       188.461       199.473    
loop,thermsimp(1:2)       92   28.5404       17.7009    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    234        189.17          0.86          1.14         23.52          0.30          0.05         25.87
Just calling func    0   0         25.87


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    235        205.49          0.86          1.12         23.48          0.35          0.05         25.85
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    189.17
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    18.7717               289
loop is:       92
neval is:      234
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       92      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    75.0866      0.500000    
T0,tstep,tfreq (these do not change):             72
current SAtemp,tstepnext are:    18.7717               289
loop is:       93
neval is:      234


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      289
neval,tstepnext:      234     289

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.148595      -1.90653      -35.7888       35.7888       182.286       218.075    
   2  0.695074     -0.363738      -6.82796       6.82796       183.048       189.876    
   3  0.541180     -0.614003      -11.5258       11.5258       184.949       196.474    
   4  0.189791      -1.66183      -31.1953       31.1953       184.656       215.851    
   5  0.245553      -1.40424      -26.3599       26.3599       187.014       213.374    
   6  0.641474     -0.443986      -8.33436       8.33436       188.593       196.927    
   7  0.308462      -1.17616      -22.0784       22.0784       189.338       211.416    
   8  0.478005     -0.738133      -13.8560       13.8560       188.172       202.028    
   9  0.395759     -0.926951      -17.4004       17.4004       182.391       199.792    
  10  0.438776E-01  -3.12635      -58.6868       58.6868       184.702       243.389    
  11  0.294628E-01  -3.52463      -66.1631       66.1631       184.342       250.505    
  12  0.331052E-01  -3.40806      -63.9750       63.9750       189.965       253.940    
  13  0.916325E-01  -2.38997      -44.8637       44.8637       188.759       233.623    
  14  0.985908     -0.141919E-01 -0.266405      0.266405       192.862       193.128    
  15  0.511724     -0.669970      -12.5764       12.5764       186.965       199.541    
  16  0.185695      -1.68365      -31.6049       31.6049       187.385       218.990    
  17  0.830711     -0.185474      -3.48165       3.48165       191.170       194.652    
  18  0.765179E-04  -9.47799      -177.917       177.917       191.928       369.846    
  19  0.129365      -2.04512      -38.3903       38.3903       188.629       227.019    
  20  0.796363     -0.227700      -4.27430       4.27430       191.786       196.061    
  21  0.589256     -0.528895      -9.92824       9.92824       181.022       190.950    
  22  0.770995     -0.260073      -4.88200       4.88200       186.996       191.878    
  23  0.685430     -0.377709      -7.09023       7.09023       191.566       198.656    
  24  0.487688     -0.718080      -13.4796       13.4796       194.719       208.198    
  25  0.114898      -2.16371      -40.6165       40.6165       188.461       229.077    
  26  0.165093      -1.80124      -33.8123       33.8123       182.994       216.807    
  27  0.302275      -1.19642      -22.4588       22.4588       183.049       205.507    
  28  0.123669      -2.09014      -39.2354       39.2354       194.775       234.011    
  29  0.960526     -0.402739E-01 -0.756007      0.756007       183.173       183.929    
  30  0.744557     -0.294966      -5.53700       5.53700       176.615       182.152    
  31  0.418436     -0.871232      -16.3545       16.3545       205.251       221.606    
  32  0.624411     -0.470947      -8.84045       8.84045       206.532       215.373    
  33  0.920055     -0.833222E-01  -1.56409       1.56409       190.338       191.902    
  34  0.330507      -1.10713      -20.7826       20.7826       196.829       217.611    
  35  0.889566     -0.117022      -2.19669       2.19669       207.128       209.325    
  36  0.269410      -1.31152      -24.6194       24.6194       181.591       206.210    
  37  0.458780     -0.779184      -14.6266       14.6266       202.861       217.488    
  38  0.952588     -0.485730E-01 -0.911795      0.911795       196.339       197.251    
  39  0.213836      -1.54254      -28.9561       28.9561       182.339       211.295    
  40  0.460697     -0.775015      -14.5483       14.5483       209.714       224.262    
  41  0.571693     -0.559153      -10.4962       10.4962       212.336       222.832    
  42  0.201363      -1.60265      -30.0843       30.0843       201.853       231.937    
  43  0.707817     -0.345570      -6.48692       6.48692       208.927       215.414    
  44  0.927118     -0.756745E-01  -1.42054       1.42054       193.901       195.322    
  45  0.288916      -1.24162      -23.3073       23.3073       212.216       235.523    
  46  0.702737     -0.352773      -6.62213       6.62213       194.261       200.883    
  47  0.253190      -1.37362      -25.7851       25.7851       182.376       208.161    
  48  0.709086     -0.343779      -6.45329       6.45329       187.830       194.284    
  49  0.399421     -0.917738      -17.2275       17.2275       194.808       212.036    
  50  0.837301     -0.177572      -3.33332       3.33332       202.842       206.175    
  51  0.906694     -0.979507E-01  -1.83870       1.83870       214.200       216.039    
  52  0.479547     -0.734913      -13.7955       13.7955       210.105       223.901    
  53  0.573668     -0.555704      -10.4315       10.4315       197.890       208.322    
  54  0.616113     -0.484325      -9.09158       9.09158       229.060       238.152    
  55  0.899004     -0.106467      -1.99857       1.99857       220.149       222.148    
  56  0.668105     -0.403310      -7.57080       7.57080       222.327       229.898    
  57  0.464354     -0.767107      -14.3999       14.3999       190.859       205.259    
  58  0.298472E-01  -3.51166      -65.9197       65.9197       206.028       271.948    
  59  0.458507     -0.779779      -14.6377       14.6377       183.150       197.788    
  60  0.372295E-01  -3.29065      -61.7710       61.7710       196.531       258.302    
  61  0.349332      -1.05173      -19.7428       19.7428       206.991       226.734    
  62  0.396867     -0.924153      -17.3479       17.3479       251.224       268.572    
  63  0.599776     -0.511199      -9.59604       9.59604       193.963       203.559    
  64  0.175124      -1.74226      -32.7051       32.7051       252.992       285.697    
  65  0.723227     -0.324033      -6.08263       6.08263       236.903       242.986    
  66  0.738639     -0.302946      -5.68679       5.68679       221.702       227.388    
  67  0.691263     -0.369235      -6.93116       6.93116       244.735       251.666    
  68  0.575263     -0.552928      -10.3794       10.3794       250.354       260.733    
  69  0.312385      -1.16352      -21.8412       21.8412       264.535       286.376    
  70  0.708595     -0.344472      -6.46630       6.46630       248.098       254.565    
  71  0.674476     -0.393819      -7.39263       7.39263       201.825       209.218    
  72  0.196387      -1.62767      -30.5540       30.5540       293.795       324.349    
  73  0.800316     -0.222748      -4.18135       4.18135       189.173       193.355    
loop,thermsimp(1:2)       93   35.7888       6.82796    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    236        209.89          0.86          1.12         23.33          0.39          0.05         25.76
Just calling func    0   0         25.76


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    237        312.11          0.86          1.13         23.56          0.16          0.05         25.77
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    209.89
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    18.7717               289
loop is:       93
neval is:      236
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       93      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    75.0866      0.500000    
T0,tstep,tfreq (these do not change):             72
current SAtemp,tstepnext are:    18.7717               289
loop is:       94
neval is:      236


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      289
neval,tstepnext:      236     289

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.842284     -0.171638      -3.22192       3.22192       176.615       179.837    
   2  0.478368     -0.737375      -13.8418       13.8418       183.173       197.015    
   3  0.283498      -1.26055      -23.6626       23.6626       183.048       206.711    
   4  0.520516     -0.652935      -12.2567       12.2567       181.022       193.278    
   5  0.703282E-01  -2.65458      -49.8309       49.8309       186.996       236.826    
   6  0.914137     -0.897748E-01  -1.68522       1.68522       190.338       192.023    
   7  0.479535     -0.734938      -13.7960       13.7960       192.862       206.658    
   8  0.921875     -0.813456E-01  -1.52699       1.52699       189.173       190.700    
   9  0.739547     -0.301718      -5.66374       5.66374       187.830       193.494    
  10  0.790753     -0.234770      -4.40702       4.40702       191.170       195.577    
  11  0.212247E-01  -3.85259      -72.3194       72.3194       193.901       266.221    
  12  0.286971      -1.24837      -23.4341       23.4341       191.786       215.220    
  13  0.695666     -0.362886      -6.81197       6.81197       184.949       191.760    
  14  0.534590     -0.626255      -11.7558       11.7558       188.593       200.348    
  15  0.945577     -0.559603E-01  -1.05047       1.05047       196.339       197.389    
  16  0.619446     -0.478930      -8.99031       8.99031       183.150       192.140    
  17  0.291083E-01  -3.53673      -66.3903       66.3903       191.566       257.956    
  18  0.372584E-01  -3.28988      -61.7564       61.7564       186.965       248.721    
  19  0.713241     -0.337936      -6.34361       6.34361       182.391       188.735    
  20  0.280281      -1.27196      -23.8768       23.8768       194.261       218.138    
  21  0.254796      -1.36729      -25.6663       25.6663       188.172       213.839    
  22  0.498598     -0.695955      -13.0642       13.0642       193.963       207.027    
  23  0.515261E-01  -2.96567      -55.6705       55.6705       190.859       246.530    
  24  0.347627      -1.05662      -19.8346       19.8346       183.049       202.883    
  25  0.696212     -0.362102      -6.79725       6.79725       202.842       209.639    
  26  0.707749E-01  -2.64825      -49.7120       49.7120       181.591       231.303    
  27  0.364523E-01  -3.31175      -62.1670       62.1670       182.376       244.543    
  28  0.895087E-02  -4.71600      -88.5272       88.5272       194.719       283.246    
  29  0.333194      -1.09903      -20.6306       20.6306       197.890       218.521    
  30  0.451375     -0.795457      -14.9320       14.9320       201.825       216.757    
  31  0.849961E-01  -2.46515      -46.2749       46.2749       207.128       253.403    
  32  0.524791     -0.644756      -12.1031       12.1031       182.339       194.442    
  33  0.641068     -0.444619      -8.34624       8.34624       189.338       197.684    
  34  0.757376     -0.277895      -5.21655       5.21655       194.808       200.025    
  35  0.760597     -0.273651      -5.13689       5.13689       187.014       192.151    
  36  0.709070     -0.343801      -6.45371       6.45371       206.532       212.986    
  37  0.794718     -0.229768      -4.31312       4.31312       208.927       213.240    
  38  0.869679     -0.139632      -2.62111       2.62111       184.656       187.277    
  39  0.229100E-01  -3.77618      -70.8852       70.8852       214.200       285.086    
  40  0.935590     -0.665776E-01  -1.24977       1.24977       182.994       184.244    
  41  0.889453     -0.117149      -2.19908       2.19908       202.861       205.061    
  42  0.529054     -0.636665      -11.9513       11.9513       196.829       208.780    
  43  0.907902     -0.966186E-01  -1.81369       1.81369       182.286       184.100    
  44  0.693802     -0.365568      -6.86232       6.86232       187.385       194.248    
  45  0.883803     -0.123521      -2.31870       2.31870       205.251       207.570    
  46  0.275134E-01  -3.59308      -67.4481       67.4481       220.149       287.597    
  47  0.324767      -1.12465      -21.1115       21.1115       212.336       233.447    
  48  0.853326     -0.158614      -2.97745       2.97745       210.105       213.083    
  49  0.325639      -1.12197      -21.0612       21.0612       209.714       230.775    
  50  0.773280     -0.257115      -4.82647       4.82647       206.991       211.818    
  51  0.108890      -2.21741      -41.6245       41.6245       188.629       230.254    
  52  0.188532E-01  -3.97107      -74.5436       74.5436       221.702       296.245    
  53  0.970927     -0.295045E-01 -0.553848      0.553848       188.461       189.015    
  54  0.549714     -0.598357      -11.2322       11.2322       222.327       233.559    
  55  0.937888E-01  -2.36671      -44.4270       44.4270       201.853       246.280    
  56  0.293516      -1.22582      -23.0107       23.0107       188.759       211.770    
  57  0.598789     -0.512846      -9.62696       9.62696       194.775       204.402    
  58  0.173412      -1.75209      -32.8896       32.8896       212.216       245.105    
  59  0.552776     -0.592802      -11.1279       11.1279       229.060       240.188    
  60  0.586717     -0.533213      -10.0093       10.0093       236.903       246.912    
  61  0.902886     -0.102159      -1.91770       1.91770       184.702       186.620    
  62  0.423679     -0.858778      -16.1207       16.1207       184.342       200.462    
  63  0.796344E-01  -2.53031      -47.4981       47.4981       244.735       292.233    
  64  0.894023     -0.112024      -2.10287       2.10287       189.965       192.068    
  65  0.840662     -0.173566      -3.25812       3.25812       248.098       251.357    
  66  0.730459     -0.314083      -5.89585       5.89585       196.531       202.427    
  67  0.652850     -0.426409      -8.00439       8.00439       250.354       258.358    
  68  0.856696     -0.154672      -2.90345       2.90345       251.224       254.128    
  69  0.562214     -0.575873      -10.8101       10.8101       206.028       216.838    
  70  0.680885     -0.384362      -7.21511       7.21511       252.992       260.208    
  71  0.353093      -1.04102      -19.5417       19.5417       264.535       284.077    
  72  0.588480     -0.530213      -9.95298       9.95298       293.795       303.748    
  73  0.641636     -0.443734      -8.32963       8.32963       209.894       218.224    
loop,thermsimp(1:2)       94   3.22192       13.8418    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    238        241.65          0.86          1.13         23.39          0.34          0.05         25.77
Just calling func    0   0         25.77


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    241.65
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    18.7717               289
loop is:       94
neval is:      237
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       94      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    75.0866      0.500000    
T0,tstep,tfreq (these do not change):             72
current SAtemp,tstepnext are:    18.7717               289
loop is:       95
neval is:      237


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      289
neval,tstepnext:      237     289

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.744650     -0.294841      -5.53465       5.53465       176.615       182.150    
   2  0.739179     -0.302215      -5.67308       5.67308       182.286       187.960    
   3  0.131167      -2.03128      -38.1305       38.1305       182.994       221.125    
   4  0.523356     -0.647493      -12.1545       12.1545       184.702       196.857    
   5  0.660412     -0.414891      -7.78819       7.78819       184.656       192.444    
   6  0.433074E-01  -3.13943      -58.9323       58.9323       182.391       241.324    
   7  0.480352     -0.733236      -13.7641       13.7641       188.461       202.225    
   8  0.808114     -0.213053      -3.99935       3.99935       189.173       193.173    
   9  0.723804     -0.323235      -6.06765       6.06765       184.949       191.016    
  10  0.322682      -1.13109      -21.2324       21.2324       190.338       211.571    
  11  0.898907     -0.106576      -2.00061       2.00061       189.965       191.966    
  12  0.359972      -1.02173      -19.1795       19.1795       183.150       202.330    
  13  0.879118     -0.128836      -2.41846       2.41846       187.014       189.433    
  14  0.963559     -0.371220E-01 -0.696841      0.696841       181.022       181.719    
  15  0.662848     -0.411210      -7.71908       7.71908       187.830       195.550    
  16  0.648402     -0.433244      -8.13271       8.13271       187.385       195.518    
  17  0.375343     -0.979916      -18.3946       18.3946       182.339       200.733    
  18  0.812441     -0.207712      -3.89910       3.89910       191.170       195.069    
  19  0.248177E-01  -3.69620      -69.3837       69.3837       183.173       252.557    
  20  0.653530     -0.425366      -7.98483       7.98483       196.339       204.324    
  21  0.712244     -0.339334      -6.36986       6.36986       189.338       195.708    
  22  0.358229      -1.02658      -19.2706       19.2706       194.808       214.079    
  23  0.325518      -1.12234      -21.0681       21.0681       188.593       209.661    
  24  0.770349     -0.260912      -4.89774       4.89774       184.342       189.239    
  25  0.633518E-01  -2.75905      -51.7920       51.7920       196.531       248.323    
  26  0.168796      -1.77907      -33.3960       33.3960       183.049       216.445    
  27  0.562007     -0.576241      -10.8170       10.8170       194.775       205.592    
  28  0.156316      -1.85588      -34.8379       34.8379       202.861       237.699    
  29  0.967732     -0.328002E-01 -0.615714      0.615714       192.862       193.477    
  30  0.538071     -0.619766      -11.6340       11.6340       183.048       194.682    
  31  0.967495     -0.330453E-01 -0.620315      0.620315       193.963       194.583    
  32  0.771619     -0.259265      -4.86682       4.86682       205.251       210.118    
  33  0.246044      -1.40225      -26.3225       26.3225       196.829       223.151    
  34  0.700731     -0.355631      -6.67579       6.67579       202.842       209.518    
  35  0.382714     -0.960468      -18.0296       18.0296       188.759       206.788    
  36  0.580395     -0.544047      -10.2127       10.2127       206.991       217.204    
  37  0.305131      -1.18701      -22.2822       22.2822       206.532       228.815    
  38  0.624250     -0.471204      -8.84528       8.84528       210.105       218.950    
  39  0.575432     -0.552634      -10.3738       10.3738       208.927       219.301    
  40  0.701335     -0.354770      -6.65962       6.65962       188.172       194.832    
  41  0.290211      -1.23715      -23.2233       23.2233       191.786       215.010    
  42  0.140976      -1.95916      -36.7767       36.7767       201.825       238.602    
  43  0.275714      -1.28839      -24.1852       24.1852       206.028       230.213    
  44  0.856479     -0.154925      -2.90820       2.90820       194.261       197.169    
  45  0.994286     -0.573084E-02 -0.107577      0.107577       209.894       210.002    
  46  0.913008     -0.910102E-01  -1.70841       1.70841       197.890       199.599    
  47  0.204063      -1.58933      -29.8343       29.8343       188.629       218.463    
  48  0.388833     -0.944605      -17.7318       17.7318       209.714       227.445    
  49  0.781619     -0.246387      -4.62510       4.62510       181.591       186.216    
  50  0.373421     -0.985049      -18.4910       18.4910       212.336       230.827    
  51  0.834918     -0.180422      -3.38682       3.38682       222.327       225.714    
  52  0.174969      -1.74315      -32.7218       32.7218       186.996       219.717    
  53  0.531353     -0.632329      -11.8699       11.8699       229.060       240.930    
  54  0.339530      -1.08019      -20.2770       20.2770       182.376       202.653    
  55  0.929760     -0.728288E-01  -1.36712       1.36712       212.216       213.583    
  56  0.223523      -1.49824      -28.1244       28.1244       201.853       229.977    
  57  0.557869     -0.583631      -10.9557       10.9557       190.859       201.815    
  58  0.521577     -0.650898      -12.2184       12.2184       236.903       249.122    
  59  0.856336     -0.155092      -2.91134       2.91134       186.965       189.876    
  60  0.645536     -0.437674      -8.21587       8.21587       248.098       256.314    
  61  0.438677     -0.823992      -15.4677       15.4677       207.128       222.596    
  62  0.346732      -1.05920      -19.8830       19.8830       251.224       271.107    
  63  0.902848     -0.102201      -1.91848       1.91848       191.566       193.485    
  64  0.578219     -0.547803      -10.2832       10.2832       250.354       260.637    
  65  0.602211     -0.507147      -9.51999       9.51999       252.992       262.512    
  66  0.432652     -0.837821      -15.7273       15.7273       193.901       209.628    
  67  0.123601      -2.09070      -39.2458       39.2458       194.719       233.965    
  68  0.840915     -0.173264      -3.25246       3.25246       264.535       267.788    
  69  0.638713     -0.448300      -8.41533       8.41533       214.200       222.616    
  70  0.127935      -2.05623      -38.5988       38.5988       220.149       258.748    
  71  0.555419     -0.588033      -11.0383       11.0383       244.735       255.774    
  72  0.860781     -0.149915      -2.81416       2.81416       221.702       224.516    
  73  0.170020      -1.77184      -33.2603       33.2603       241.647       274.907    
loop,thermsimp(1:2)       95   5.53465       5.67308    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    239        293.80          0.86          1.12         23.51          0.26          0.05         25.80
Just calling func    0   0         25.80


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    240        196.01          0.86          1.13         23.57          0.18          0.05         25.80
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3    196.01
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    18.7717               289
loop is:       95
neval is:      239
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       95      95
 right before GO TO 250



 right after: 250 IF (loop < nloop) CYCLE Main_loop 
loop,nloop:       95      95
loop was equal to nloop so did not start main cycle again, now will do the following: 




calculate mean & stdev of func values for current simplex (hmean,hstd)
 write hstd
 RMS of function values of last simplex =   19.7527    

hmean,hstd :    200.402       19.7527    


writing best so far by calling functn2 
 but just writing params not moments. see the change in functn2
hmean,hstd :    200.402       19.7527    
h(1),h(best1),h(np1) :    181.022       176.615       196.014    
htherm(1),htherm(best1),htherm(np1) :    181.719       182.150       274.907    


 CHECK hstd>?stopcr
---------> IF hstd>stopcr (and maxfn,neval.nevalp conditions as well) then set iflag and loop to zero and go to the start of the main cycle again 
---------> IF hstd<=stopcr then find the centroid of the current simplex and get the function value there 
 ............
 ............
 ............
 ............
  .NOT. (hstd > stopcr .AND. (((maxfn>=0).AND.(neval <= maxfn)).OR.((maxfn<0).AND.(nevalp <= -1*maxfn))  )) 
  so find the centroid of current simplex and get teh function value there 
  call functn(p,func) 
  neval = neval + 1
  nevalp = nevalp + 1
  IF ((iprint > 0).AND.(realrank==0)) THEN 
     IF (MOD(neval,iprint) == 0) WRITE (lout,5100) neval, func, p 
  END IF  
  CHECK wtr the no. of func values allowed, maxfn, has been overrun. if so, exit with ifault= 1 
  IF maxfn>0 check based on neval. if maxfn<0 check based on nevalp. 
  i.e.: ---->IF (((maxfn>=0).AND.(neval > maxfn)).OR.((maxfn<0).AND.(nevalp > -1*maxfn))) THEN
        ---->IF the above if statement true then something ... RETURN 
        ---->IF the above if statement not true then you get out of that if statement ... CONVGENCE CRTI SATISFIED - RETURN 
 ............
 ............
iter,obj,time:    241        193.77          0.86          1.12         23.80          0.20          0.05         26.04

  240    193.77        1.668     -1.309      1.716     -102.6     0.8847    
                      0.4967      1.856     -99.70      3.720    -0.2595E-01
                       1.789     -1.508      1.410      0.000     -5.000    
                      -1.158      0.000      0.000      0.000     -1.221    

                      -2.500      9299.      8620.      0.000      0.000    
                     -0.5672     -6.430     -4.543     -7.715      3.213    
                      -14.27     -3.129      1580.      0.000      3773.    

                       9575.      8838.      2189.     0.1195E+05  2424.    
                       3418.     0.1244    -0.4128E-01  0.000    -0.4388    
                     -0.6123E-01-0.1246    -0.1137    -0.2100    -0.1109E-01

                      -1.554    -0.1859E-01  0.000    -0.1903E-01 0.1483E-01
                      0.8541E-01 0.2780E-01 0.1481E-01-0.7755E-01 0.1242    
                     -0.5137E-01-0.2031E-01-0.1146    -0.4341      0.000    

                     -0.9183     -1.551     -2.279     -2.862    -0.2745    
                      0.2053      9.219      9.156    -0.1888E+05 -4.000    
                     -0.4839    -0.5893      9.420      8.408    -0.2205E+05

                      -4.000     0.7336E-01-0.5832      8.823      9.035    
                     -0.3308E+05 -7.000    -0.4443    -0.6132      9.440    
                       8.463    -0.2642E+05 -7.000    

 EVIDENCE OF CONVERGENCE
 Centroid of last simplex =
    1.6679      -1.3093       1.7163      -102.61      0.88466      0.49673    
    1.8558      -99.703       3.7201     -0.25954E-01   1.7885      -1.5084    
    1.4103       0.0000      -5.0000      -1.1580       0.0000       0.0000    
    0.0000      -1.2210      -2.5000       9299.4       8619.6       0.0000    

    0.0000     -0.56724      -6.4296      -4.5431      -7.7154       3.2130    
   -14.265      -3.1291       1579.6       0.0000       3773.3       9575.4    
    8837.9       2189.0       11950.       2423.8       3418.0      0.12440    
  -0.41276E-01   0.0000     -0.43876     -0.61225E-01 -0.12463     -0.11372    

  -0.21004     -0.11093E-01  -1.5538     -0.18589E-01   0.0000     -0.19027E-01
   0.14825E-01  0.85411E-01  0.27799E-01  0.14810E-01 -0.77553E-01  0.12418    
  -0.51368E-01 -0.20311E-01 -0.11465     -0.43410       0.0000     -0.91828    
   -1.5505      -2.2791      -2.8623     -0.27447      0.20535       9.2193    

    9.1559      -18879.      -4.0000     -0.48386     -0.58928       9.4202    
    8.4077      -22055.      -4.0000      0.73356E-01 -0.58323       8.8229    
    9.0353      -33075.      -7.0000     -0.44430     -0.61318       9.4402    
    8.4628      -26418.      -7.0000    
 Function value at centroid =   193.773    

beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    75.0866      0.500000    
T0,tstep,tfreq (these do not change):             72
current SAtemp,tstepnext are:    18.7717               289
loop is:        1
neval is:      240


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      289
neval,tstepnext:      240     289

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.204528E-01  -3.88964      -73.0149       73.0149       181.022       254.037    
   2  0.977100     -0.231667E-01 -0.434876      0.434876       176.615       177.050    
   3  0.491467     -0.710361      -13.3346       13.3346       181.591       194.925    
   4  0.802113E-01  -2.52309      -47.3626       47.3626       182.286       229.649    
   5  0.891044     -0.115361      -2.16552       2.16552       184.342       186.507    
   6  0.397551     -0.922433      -17.3156       17.3156       187.014       204.330    
   7  0.121203      -2.11029      -39.6136       39.6136       186.965       226.578    
   8  0.789985E-01  -2.53833      -47.6486       47.6486       184.949       232.597    
   9  0.921855     -0.813679E-01  -1.52741       1.52741       189.965       191.492    
  10  0.252671      -1.37567      -25.8235       25.8235       184.656       210.479    
  11  0.787271     -0.239182      -4.48985       4.48985       189.173       193.663    
  12  0.634653     -0.454676      -8.53502       8.53502       192.862       201.397    
  13  0.706648     -0.347222      -6.51793       6.51793       191.566       198.084    
  14  0.349740E-01  -3.35315      -62.9442       62.9442       193.963       256.907    
  15  0.686787     -0.375731      -7.05308       7.05308       183.048       190.101    
  16  0.309348      -1.17329      -22.0246       22.0246       188.172       210.197    
  17  0.703748     -0.351336      -6.59515       6.59515       191.170       197.765    
  18  0.985092     -0.150207E-01 -0.281964      0.281964       187.385       187.667    
  19  0.440741     -0.819298      -15.3796       15.3796       187.830       203.210    
  20  0.796112     -0.228015      -4.28022       4.28022       189.338       193.618    
  21  0.451938     -0.794210      -14.9086       14.9086       184.702       199.611    
  22  0.230902      -1.46576      -27.5148       27.5148       194.261       221.776    
  23  0.760212     -0.274159      -5.14641       5.14641       197.890       203.037    
  24  0.250434E-02  -5.98973      -112.437       112.437       182.339       294.776    
  25  0.627913E-01  -2.76794      -51.9588       51.9588       190.859       242.818    
  26  0.263128      -1.33511      -25.0623       25.0623       188.461       213.523    
  27  0.177986      -1.72605      -32.4008       32.4008       183.150       215.551    
  28  0.919776     -0.836247E-01  -1.56977       1.56977       182.376       183.946    
  29  0.854272     -0.157506      -2.95665       2.95665       196.339       199.295    
  30  0.648187     -0.433576      -8.13893       8.13893       194.775       202.914    
  31  0.853797     -0.158061      -2.96708       2.96708       188.759       191.726    
  32  0.484551     -0.724533      -13.6007       13.6007       202.842       216.443    
  33  0.423817     -0.858454      -16.1146       16.1146       193.901       210.016    
  34  0.932015     -0.704065E-01  -1.32165       1.32165       188.593       189.914    
  35  0.161906      -1.82074      -34.1783       34.1783       209.894       244.072    
  36  0.812519     -0.207617      -3.89731       3.89731       205.251       209.149    
  37  0.346838      -1.05890      -19.8773       19.8773       190.338       210.216    
  38  0.477141     -0.739943      -13.8899       13.8899       212.216       226.106    
  39  0.931946     -0.704808E-01  -1.32304       1.32304       194.808       196.131    
  40  0.189794      -1.66182      -31.1950       31.1950       191.786       222.981    
  41  0.361902      -1.01638      -19.0792       19.0792       183.049       202.128    
  42  0.775630E-02  -4.85925      -91.2161       91.2161       206.991       298.207    
  43  0.292497      -1.22930      -23.0760       23.0760       188.629       211.705    
  44  0.264300      -1.33067      -24.9789       24.9789       210.105       235.084    
  45  0.529597     -0.635638      -11.9320       11.9320       208.927       220.859    
  46  0.163272      -1.81234      -34.0205       34.0205       186.996       221.016    
  47  0.212593      -1.54838      -29.0656       29.0656       182.994       212.060    
  48  0.359173      -1.02395      -19.2213       19.2213       207.128       226.349    
  49  0.993707     -0.631295E-02 -0.118505      0.118505       214.200       214.319    
  50  0.261479      -1.34140      -25.1803       25.1803       196.829       222.009    
  51  0.441392     -0.817822      -15.3519       15.3519       221.702       237.054    
  52  0.624656     -0.470554      -8.83308       8.83308       222.327       231.160    
  53  0.646784     -0.435743      -8.17961       8.17961       209.714       217.893    
  54  0.343734      -1.06789      -20.0460       20.0460       206.532       226.578    
  55  0.438651     -0.824052      -15.4688       15.4688       201.853       217.322    
  56  0.476250     -0.741811      -13.9250       13.9250       206.028       219.953    
  57  0.665451     -0.407291      -7.64552       7.64552       212.336       219.981    
  58  0.903561E-01  -2.40400      -45.1270       45.1270       194.719       239.846    
  59  0.899286     -0.106155      -1.99270       1.99270       202.861       204.854    
  60  0.822477     -0.195434      -3.66863       3.66863       201.825       205.494    
  61  0.824462E-01  -2.49561      -46.8467       46.8467       229.060       275.907    
  62  0.689460     -0.371846      -6.98016       6.98016       182.391       189.372    
  63  0.124471      -2.08368      -39.1142       39.1142       196.531       235.645    
  64  0.215598      -1.53434      -28.8021       28.8021       236.903       265.705    
  65  0.671537     -0.398187      -7.47462       7.47462       183.173       190.647    
  66  0.330886      -1.10598      -20.7611       20.7611       244.735       265.496    
  67  0.198204      -1.61846      -30.3812       30.3812       248.098       278.480    
  68  0.774065     -0.256099      -4.80741       4.80741       220.149       224.957    
  69  0.787755     -0.238568      -4.47832       4.47832       250.354       254.832    
  70  0.613901     -0.487921      -9.15909       9.15909       252.992       262.151    
  71  0.427667     -0.849410      -15.9448       15.9448       264.535       280.480    
  72  0.898090     -0.107485      -2.01767       2.01767       251.224       253.242    
  73  0.550021     -0.597800      -11.2217       11.2217       196.014       207.235    
loop,thermsimp(1:2)        1   73.0149      0.434876    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    242        192.96          0.86          1.13         23.48          0.23          0.05         25.75
Just calling func    0   0         25.75


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    192.96
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    18.7717               289
loop is:        1
neval is:      241
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        1      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    75.0866      0.500000    
T0,tstep,tfreq (these do not change):             72
current SAtemp,tstepnext are:    18.7717               289
loop is:        2
neval is:      241


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      289
neval,tstepnext:      241     289

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.225672      -1.48867      -27.9448       27.9448       176.615       204.560    
   2  0.726663     -0.319292      -5.99364       5.99364       182.376       188.369    
   3  0.929061     -0.735808E-01  -1.38123       1.38123       184.342       185.723    
   4  0.764703     -0.268268      -5.03584       5.03584       187.385       192.421    
   5  0.119617      -2.12346      -39.8609       39.8609       182.391       222.252    
   6  0.369672     -0.995138      -18.6804       18.6804       188.593       207.273    
   7  0.875806     -0.132611      -2.48933       2.48933       183.048       185.538    
   8  0.657886     -0.418723      -7.86012       7.86012       183.173       191.033    
   9  0.387095E-01  -3.25167      -61.0392       61.0392       189.965       251.004    
  10  0.454078     -0.789485      -14.8199       14.8199       188.759       203.579    
  11  0.890470     -0.116006      -2.17762       2.17762       189.338       191.515    
  12  0.118445      -2.13331      -40.0457       40.0457       189.173       229.219    
  13  0.190238      -1.65948      -31.1512       31.1512       181.591       212.742    
  14  0.435624     -0.830976      -15.5988       15.5988       194.808       210.407    
  15  0.768655     -0.263114      -4.93908       4.93908       191.170       196.109    
  16  0.870896E-01  -2.44082      -45.8182       45.8182       191.566       237.384    
  17  0.936453     -0.656556E-01  -1.23246       1.23246       196.339       197.571    
  18  0.159312      -1.83689      -34.4815       34.4815       184.702       219.184    
  19  0.988165     -0.119051E-01 -0.223479      0.223479       192.862       193.085    
  20  0.713347     -0.337787      -6.34082       6.34082       183.049       189.389    
  21  0.417075     -0.874489      -16.4156       16.4156       194.775       211.191    
  22  0.719048     -0.329827      -6.19139       6.19139       197.890       204.082    
  23  0.785519     -0.241411      -4.53169       4.53169       187.830       192.362    
  24  0.356994      -1.03004      -19.3355       19.3355       187.014       206.350    
  25  0.357951      -1.02736      -19.2852       19.2852       202.861       222.147    
  26  0.154816      -1.86552      -35.0189       35.0189       201.825       236.844    
  27  0.246912      -1.39872      -26.2563       26.2563       196.014       222.270    
  28  0.553458     -0.591570      -11.1047       11.1047       205.251       216.356    
  29  0.729602     -0.315256      -5.91788       5.91788       193.901       199.819    
  30  0.605470     -0.501750      -9.41869       9.41869       188.172       197.591    
  31  0.278987E-01  -3.57918      -67.1871       67.1871       190.338       257.525    
  32  0.187991      -1.67136      -31.3743       31.3743       184.656       216.030    
  33  0.543158     -0.610355      -11.4574       11.4574       188.629       200.086    
  34  0.996749     -0.325625E-02 -0.611251E-01  0.611251E-01   182.994       183.055    
  35  0.540727     -0.614841      -11.5416       11.5416       188.461       200.002    
  36  0.833271E-01  -2.48498      -46.6472       46.6472       214.200       260.848    
  37  0.404538     -0.905011      -16.9885       16.9885       183.150       200.139    
  38  0.147302      -1.91527      -35.9528       35.9528       202.842       238.795    
  39  0.364226E-01  -3.31257      -62.1824       62.1824       201.853       264.035    
  40  0.381304     -0.964158      -18.0988       18.0988       209.714       227.812    
  41  0.737758     -0.304140      -5.70920       5.70920       206.028       211.737    
  42  0.179374      -1.71828      -32.2550       32.2550       212.336       244.591    
  43  0.281757      -1.26671      -23.7783       23.7783       208.927       232.705    
  44  0.192633      -1.64697      -30.9163       30.9163       186.996       217.912    
  45  0.954983     -0.460617E-01 -0.864654      0.864654       194.261       195.126    
  46  0.710258     -0.342127      -6.42229       6.42229       196.829       203.251    
  47  0.831769     -0.184201      -3.45776       3.45776       191.786       195.244    
  48  0.912541     -0.915218E-01  -1.71802       1.71802       220.149       221.867    
  49  0.221543      -1.50714      -28.2915       28.2915       212.216       240.507    
  50  0.690803E-02  -4.97507      -93.3903       93.3903       207.128       300.518    
  51  0.162616      -1.81637      -34.0962       34.0962       186.965       221.061    
  52  0.869433     -0.139913      -2.62641       2.62641       206.532       209.159    
  53  0.541563     -0.613295      -11.5126       11.5126       182.286       193.799    
  54  0.310811      -1.16857      -21.9360       21.9360       222.327       244.263    
  55  0.879573     -0.128319      -2.40876       2.40876       184.949       187.357    
  56  0.262339      -1.33812      -25.1187       25.1187       210.105       235.224    
  57  0.651476     -0.428515      -8.04393       8.04393       196.531       204.575    
  58  0.498193     -0.696767      -13.0795       13.0795       221.702       234.781    
  59  0.251241      -1.38134      -25.9301       25.9301       194.719       220.649    
  60  0.704518     -0.350242      -6.57462       6.57462       190.859       197.434    
  61  0.387431     -0.948219      -17.7996       17.7996       209.894       227.694    
  62  0.447312     -0.804500      -15.1018       15.1018       251.224       266.326    
  63  0.842599     -0.171264      -3.21490       3.21490       181.022       184.237    
  64  0.754683     -0.281457      -5.28342       5.28342       250.354       255.637    
  65  0.160341      -1.83045      -34.3606       34.3606       193.963       228.323    
  66  0.388561     -0.945304      -17.7449       17.7449       252.992       270.737    
  67  0.504240     -0.684704      -12.8530       12.8530       244.735       257.588    
  68  0.340326      -1.07785      -20.2331       20.2331       236.903       257.136    
  69  0.995948     -0.406008E-02 -0.762145E-01  0.762145E-01   229.060       229.136    
  70  0.822310     -0.195638      -3.67244       3.67244       248.098       251.771    
  71  0.584501     -0.536996      -10.0803       10.0803       264.535       274.615    
  72  0.953467     -0.476500E-01 -0.894470      0.894470       182.339       183.233    
  73  0.576559     -0.550677      -10.3371       10.3371       192.957       203.294    
loop,thermsimp(1:2)        2   27.9448       5.99364    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    243        188.24          0.86          1.12         23.44          0.29          0.05         25.77
Just calling func    0   0         25.77


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    188.24
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    18.7717               289
loop is:        2
neval is:      242
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        2      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    75.0866      0.500000    
T0,tstep,tfreq (these do not change):             72
current SAtemp,tstepnext are:    18.7717               289
loop is:        3
neval is:      242


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      289
neval,tstepnext:      242     289

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.415533     -0.878194      -16.4851       16.4851       182.994       199.479    
   2  0.117190E-02  -6.74913      -126.692       126.692       182.339       309.031    
   3  0.432199     -0.838870      -15.7470       15.7470       181.022       196.769    
   4  0.466381     -0.762753      -14.3181       14.3181       183.048       197.366    
   5  0.696685     -0.361422      -6.78448       6.78448       184.342       191.126    
   6  0.193714      -1.64137      -30.8112       30.8112       184.949       215.760    
   7  0.535145     -0.625217      -11.7364       11.7364       182.376       194.112    
   8  0.812984     -0.207044      -3.88656       3.88656       183.049       186.935    
   9  0.956789     -0.441723E-01 -0.829187      0.829187       183.173       184.002    
  10  0.496711E-01  -3.00233      -56.3587       56.3587       189.338       245.697    
  11  0.206308E-01  -3.88097      -72.8523       72.8523       187.830       260.683    
  12  0.423434     -0.859358      -16.1316       16.1316       187.385       203.517    
  13  0.216826      -1.52866      -28.6955       28.6955       192.862       221.557    
  14  0.792422     -0.232661      -4.36744       4.36744       182.286       186.654    
  15  0.265940      -1.32449      -24.8628       24.8628       194.261       219.124    
  16  0.993400     -0.662201E-02 -0.124306      0.124306       191.786       191.911    
  17  0.645200E-01  -2.74078      -51.4490       51.4490       191.170       242.619    
  18  0.651527     -0.428436      -8.04245       8.04245       190.859       198.902    
  19  0.858875     -0.152131      -2.85576       2.85576       196.339       199.195    
  20  0.126056      -2.07103      -38.8766       38.8766       188.172       227.049    
  21  0.772661E-01  -2.56050      -48.0648       48.0648       193.901       241.966    
  22  0.441429     -0.817737      -15.3503       15.3503       188.461       203.811    
  23  0.166586      -1.79224      -33.6433       33.6433       188.629       222.272    
  24  0.217490      -1.52560      -28.6381       28.6381       183.150       211.788    
  25  0.632871     -0.457488      -8.58781       8.58781       196.829       205.416    
  26  0.201694      -1.60100      -30.0535       30.0535       192.957       223.010    
  27  0.282690      -1.26341      -23.7162       23.7162       188.759       212.475    
  28  0.255086E-01  -3.66874      -68.8683       68.8683       197.890       266.759    
  29  0.562308     -0.575706      -10.8069       10.8069       176.615       187.422    
  30  0.283366E-01  -3.56360      -66.8947       66.8947       196.531       263.426    
  31  0.404254E-01  -3.20830      -60.2250       60.2250       187.014       247.239    
  32  0.170475      -1.76917      -33.2102       33.2102       188.593       221.803    
  33  0.141712      -1.95396      -36.6790       36.6790       206.532       243.211    
  34  0.773173     -0.257253      -4.82906       4.82906       194.808       199.637    
  35  0.255978      -1.36266      -25.5795       25.5795       194.775       220.355    
  36  0.823739     -0.193902      -3.63986       3.63986       206.028       209.668    
  37  0.166307      -1.79392      -33.6748       33.6748       181.591       215.265    
  38  0.676319     -0.391090      -7.34140       7.34140       184.656       191.997    
  39  0.144546      -1.93416      -36.3073       36.3073       205.251       241.559    
  40  0.593436     -0.521826      -9.79554       9.79554       186.996       196.791    
  41  0.762921     -0.270600      -5.07961       5.07961       184.702       189.782    
  42  0.855796     -0.155724      -2.92319       2.92319       194.719       197.642    
  43  0.433555     -0.835737      -15.6882       15.6882       186.965       202.653    
  44  0.252891      -1.37480      -25.8072       25.8072       220.149       245.957    
  45  0.942909     -0.587850E-01  -1.10349       1.10349       202.861       203.965    
  46  0.432313     -0.838605      -15.7420       15.7420       182.391       198.133    
  47  0.975713     -0.245869E-01 -0.461537      0.461537       196.014       196.475    
  48  0.541226     -0.613919      -11.5243       11.5243       209.894       221.418    
  49  0.255057      -1.36627      -25.6471       25.6471       209.714       235.361    
  50  0.202141      -1.59879      -30.0119       30.0119       193.963       223.975    
  51  0.949562     -0.517549E-01 -0.971525      0.971525       229.060       230.032    
  52  0.255660E-01  -3.66649      -68.8261       68.8261       189.173       257.999    
  53  0.306802      -1.18155      -22.1797       22.1797       208.927       231.107    
  54  0.243277E-01  -3.71614      -69.7581       69.7581       221.702       291.460    
  55  0.466793     -0.761870      -14.3016       14.3016       210.105       224.407    
  56  0.200407      -1.60740      -30.1736       30.1736       201.825       231.999    
  57  0.282970      -1.26241      -23.6976       23.6976       191.566       215.264    
  58  0.214232      -1.54069      -28.9214       28.9214       202.842       231.763    
  59  0.326606      -1.11900      -21.0055       21.0055       212.216       233.221    
  60  0.997507     -0.249621E-02 -0.468580E-01  0.468580E-01   222.327       222.374    
  61  0.426725     -0.851615      -15.9862       15.9862       212.336       228.322    
  62  0.862854     -0.147510      -2.76901       2.76901       189.965       192.734    
  63  0.737079     -0.305061      -5.72649       5.72649       248.098       253.825    
  64  0.976691     -0.235846E-01 -0.442721      0.442721       250.354       250.796    
  65  0.191821      -1.65119      -30.9956       30.9956       236.903       267.899    
  66  0.743386     -0.296540      -5.56655       5.56655       190.338       195.905    
  67  0.683162     -0.381024      -7.15245       7.15245       244.735       251.888    
  68  0.789040     -0.236939      -4.44773       4.44773       214.200       218.648    
  69  0.908546     -0.959094E-01  -1.80038       1.80038       201.853       203.653    
  70  0.562283     -0.575750      -10.8078       10.8078       251.224       262.032    
  71  0.151982E-01  -4.18658      -78.5890       78.5890       252.992       331.581    
  72  0.478777     -0.736520      -13.8257       13.8257       264.535       278.361    
  73  0.226919E-01  -3.78575      -71.0648       71.0648       188.244       259.309    
loop,thermsimp(1:2)        3   16.4851       126.692    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    244        188.99          0.86          1.13         23.52          0.22          0.05         25.78
Just calling func    0   0         25.78


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    245        207.60          0.86          1.14         23.53          0.19          0.05         25.77
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    188.99
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    18.7717               289
loop is:        3
neval is:      244
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        3      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    75.0866      0.500000    
T0,tstep,tfreq (these do not change):             72
current SAtemp,tstepnext are:    18.7717               289
loop is:        4
neval is:      244


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      289
neval,tstepnext:      244     289

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.656626     -0.420640      -7.89611       7.89611       183.173       191.069    
   2  0.880966     -0.126736      -2.37904       2.37904       182.286       184.666    
   3  0.854972     -0.156687      -2.94127       2.94127       183.049       185.990    
   4  0.797101     -0.226774      -4.25692       4.25692       176.615       180.872    
   5  0.158477      -1.84214      -34.5801       34.5801       184.702       219.282    
   6  0.593839     -0.521148      -9.78280       9.78280       184.342       194.125    
   7  0.817101     -0.201993      -3.79174       3.79174       191.786       195.578    
   8  0.997190     -0.281377E-02 -0.528191E-01  0.528191E-01   184.656       184.709    
   9  0.402857     -0.909174      -17.0667       17.0667       189.965       207.032    
  10  0.690455     -0.370405      -6.95311       6.95311       182.376       189.329    
  11  0.609635     -0.494895      -9.29000       9.29000       190.338       199.628    
  12  0.491117     -0.711073      -13.3480       13.3480       196.014       209.362    
  13  0.990676     -0.936814E-02 -0.175855      0.175855       181.022       181.198    
  14  0.976919     -0.233519E-01 -0.438354      0.438354       186.996       187.434    
  15  0.692556     -0.367366      -6.89607       6.89607       183.048       189.944    
  16  0.549694     -0.598394      -11.2329       11.2329       194.719       205.952    
  17  0.538267E-01  -2.92199      -54.8505       54.8505       182.391       237.242    
  18  0.602193     -0.507178      -9.52057       9.52057       190.859       200.380    
  19  0.537276     -0.621243      -11.6618       11.6618       196.339       208.001    
  20  0.338220      -1.08406      -20.3496       20.3496       182.994       203.344    
  21  0.306772      -1.18165      -22.1816       22.1816       194.808       216.990    
  22  0.895389     -0.110497      -2.07422       2.07422       186.965       189.039    
  23  0.120096      -2.11946      -39.7858       39.7858       187.385       227.171    
  24  0.680166     -0.385418      -7.23493       7.23493       201.853       209.088    
  25  0.369434     -0.995782      -18.6925       18.6925       188.461       207.153    
  26  0.235484      -1.44611      -27.1459       27.1459       202.861       230.007    
  27  0.260836      -1.34386      -25.2265       25.2265       196.829       222.055    
  28  0.720259     -0.328144      -6.15981       6.15981       206.028       212.188    
  29  0.695069     -0.363744      -6.82808       6.82808       183.150       189.978    
  30  0.105076      -2.25307      -42.2939       42.2939       188.759       231.053    
  31  0.968349     -0.321628E-01 -0.603749      0.603749       191.566       192.170    
  32  0.974131     -0.262091E-01 -0.491988      0.491988       181.591       182.083    
  33  0.647785E-01  -2.73678      -51.3739       51.3739       184.949       236.322    
  34  0.910402     -0.938690E-01  -1.76208       1.76208       214.200       215.962    
  35  0.488733     -0.715939      -13.4394       13.4394       194.261       207.700    
  36  0.377436E-01  -3.27694      -61.5136       61.5136       194.775       256.289    
  37  0.154608      -1.86686      -35.0441       35.0441       209.894       244.938    
  38  0.277804      -1.28084      -24.0435       24.0435       192.862       216.905    
  39  0.969547     -0.309263E-01 -0.580537      0.580537       188.593       189.173    
  40  0.380083     -0.967367      -18.1591       18.1591       188.629       206.788    
  41  0.751822     -0.285256      -5.35472       5.35472       222.327       227.682    
  42  0.137692      -1.98274      -37.2193       37.2193       192.957       230.176    
  43  0.293470      -1.22598      -23.0137       23.0137       193.963       216.977    
  44  0.433705     -0.835390      -15.6816       15.6816       210.105       225.787    
  45  0.418034     -0.872194      -16.3725       16.3725       188.172       204.545    
  46  0.166728      -1.79139      -33.6274       33.6274       212.336       245.963    
  47  0.921960     -0.812537E-01  -1.52527       1.52527       229.060       230.585    
  48  0.412601     -0.885275      -16.6181       16.6181       208.927       225.545    
  49  0.925181     -0.777655E-01  -1.45979       1.45979       202.842       204.302    
  50  0.687711     -0.374386      -7.02785       7.02785       201.825       208.853    
  51  0.729890     -0.314862      -5.91048       5.91048       212.216       218.126    
  52  0.355028      -1.03556      -19.4392       19.4392       209.714       229.153    
  53  0.123338      -2.09283      -39.2859       39.2859       205.251       244.537    
  54  0.638370E-01  -2.75142      -51.6487       51.6487       193.901       245.550    
  55  0.379414     -0.969128      -18.1921       18.1921       191.170       209.362    
  56  0.643705     -0.440515      -8.26920       8.26920       206.532       214.802    
  57  0.172292      -1.75856      -33.0111       33.0111       189.338       222.349    
  58  0.996763     -0.324212E-02 -0.608599E-01  0.608599E-01   220.149       220.210    
  59  0.606366     -0.500272      -9.39093       9.39093       187.014       196.405    
  60  0.299698      -1.20498      -22.6195       22.6195       250.354       272.973    
  61  0.723907E-02  -4.92826      -92.5116       92.5116       244.735       337.247    
  62  0.197118      -1.62395      -30.4842       30.4842       248.098       278.583    
  63  0.316130      -1.15160      -21.6175       21.6175       189.173       210.791    
  64  0.115913      -2.15492      -40.4514       40.4514       188.244       228.695    
  65  0.661756     -0.412859      -7.75005       7.75005       187.830       195.580    
  66  0.838437     -0.176215      -3.30785       3.30785       251.224       254.532    
  67  0.929092     -0.735473E-01  -1.38060       1.38060       196.531       197.912    
  68  0.167251      -1.78826      -33.5686       33.5686       197.890       231.459    
  69  0.174207      -1.74751      -32.8037       32.8037       236.903       269.707    
  70  0.506799     -0.679641      -12.7580       12.7580       264.535       277.293    
  71  0.209504      -1.56301      -29.3403       29.3403       221.702       251.042    
  72  0.709189E-01  -2.64622      -49.6739       49.6739       182.339       232.013    
  73  0.995856     -0.415281E-02 -0.779550E-01  0.779550E-01   188.988       189.066    
loop,thermsimp(1:2)        4   7.89611       2.37904    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    246        191.04          0.86          1.13         23.35          0.37          0.05         25.76
Just calling func    0   0         25.76


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    247        206.83          0.86          1.12         23.41          0.38          0.05         25.82
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    191.04
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    18.7717               289
loop is:        4
neval is:      246
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        4      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    75.0866      0.500000    
T0,tstep,tfreq (these do not change):             72
current SAtemp,tstepnext are:    18.7717               289
loop is:        5
neval is:      246


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      289
neval,tstepnext:      246     289

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.630229     -0.461672      -8.66635       8.66635       176.615       185.281    
   2  0.876370     -0.131967      -2.47723       2.47723       181.022       183.499    
   3  0.840080     -0.174259      -3.27112       3.27112       181.591       184.862    
   4  0.608986E-01  -2.79854      -52.5333       52.5333       182.286       234.820    
   5  0.311901      -1.16507      -21.8703       21.8703       184.656       206.526    
   6  0.937552E-01  -2.36707      -44.4338       44.4338       183.049       227.482    
   7  0.608418     -0.496893      -9.32751       9.32751       186.996       196.323    
   8  0.297707      -1.21164      -22.7446       22.7446       186.965       209.709    
   9  0.365777      -1.00573      -18.8792       18.8792       188.988       207.867    
  10  0.194673      -1.63643      -30.7185       30.7185       188.593       219.311    
  11  0.941388     -0.604003E-01  -1.13381       1.13381       182.376       183.510    
  12  0.984881     -0.152343E-01 -0.285973      0.285973       183.048       183.334    
  13  0.750245     -0.287355      -5.39413       5.39413       183.150       188.544    
  14  0.437446     -0.826803      -15.5205       15.5205       183.173       198.693    
  15  0.174754      -1.74437      -32.7448       32.7448       191.566       224.311    
  16  0.300465E-01  -3.50501      -65.7948       65.7948       184.342       250.137    
  17  0.372924     -0.986380      -18.5160       18.5160       191.786       210.302    
  18  0.803506     -0.218771      -4.10669       4.10669       187.830       191.937    
  19  0.232583      -1.45851      -27.3786       27.3786       187.014       214.393    
  20  0.383368     -0.958759      -17.9975       17.9975       196.531       214.528    
  21  0.622786     -0.473552      -8.88936       8.88936       190.338       199.228    
  22  0.356422      -1.03164      -19.3656       19.3656       190.859       210.225    
  23  0.919964     -0.834212E-01  -1.56595       1.56595       182.994       184.560    
  24  0.550740     -0.596492      -11.1971       11.1971       202.842       214.039    
  25  0.402627     -0.909745      -17.0774       17.0774       188.172       205.250    
  26  0.256265      -1.36154      -25.5584       25.5584       194.719       220.277    
  27  0.763510     -0.269828      -5.06513       5.06513       188.629       193.694    
  28  0.388963     -0.944271      -17.7255       17.7255       189.965       207.691    
  29  0.981923     -0.182423E-01 -0.342438      0.342438       188.461       188.803    
  30  0.656629     -0.420635      -7.89602       7.89602       194.261       202.157    
  31  0.932472     -0.699161E-01  -1.31244       1.31244       196.339       197.651    
  32  0.336775      -1.08834      -20.4300       20.4300       201.825       222.255    
  33  0.810758     -0.209786      -3.93803       3.93803       201.853       205.791    
  34  0.557014     -0.585166      -10.9845       10.9845       196.014       206.998    
  35  0.652747     -0.426565      -8.00733       8.00733       191.170       199.177    
  36  0.890774     -0.115665      -2.17122       2.17122       189.173       191.344    
  37  0.703035     -0.352349      -6.61417       6.61417       206.028       212.642    
  38  0.534296     -0.626805      -11.7662       11.7662       206.532       218.299    
  39  0.604162     -0.503914      -9.45929       9.45929       214.200       223.660    
  40  0.545557     -0.605948      -11.3746       11.3746       192.862       204.236    
  41  0.371346     -0.990620      -18.5956       18.5956       193.963       212.558    
  42  0.491801     -0.709680      -13.3219       13.3219       194.808       208.130    
  43  0.879731     -0.128139      -2.40539       2.40539       212.216       214.621    
  44  0.995113     -0.489866E-02 -0.919559E-01  0.919559E-01   184.702       184.794    
  45  0.467927     -0.759444      -14.2560       14.2560       220.149       234.405    
  46  0.355083      -1.03540      -19.4362       19.4362       196.829       216.265    
  47  0.216960      -1.52804      -28.6839       28.6839       189.338       218.022    
  48  0.276988      -1.28378      -24.0987       24.0987       208.927       233.026    
  49  0.905458     -0.993144E-01  -1.86429       1.86429       210.105       211.970    
  50  0.704241     -0.350635      -6.58199       6.58199       187.385       193.967    
  51  0.784564     -0.242627      -4.55452       4.55452       222.327       226.882    
  52  0.329376      -1.11055      -20.8469       20.8469       188.244       209.091    
  53  0.845894     -0.167361      -3.14164       3.14164       209.714       212.855    
  54  0.645172     -0.438238      -8.22645       8.22645       202.861       211.088    
  55  0.279949      -1.27315      -23.8991       23.8991       192.957       216.856    
  56  0.149089      -1.90321      -35.7265       35.7265       229.060       264.786    
  57  0.887681     -0.119143      -2.23651       2.23651       188.759       190.995    
  58  0.582426     -0.540553      -10.1471       10.1471       197.890       208.038    
  59  0.221293      -1.50827      -28.3127       28.3127       182.339       210.651    
  60  0.839449     -0.175010      -3.28523       3.28523       184.949       188.234    
  61  0.383721     -0.957840      -17.9802       17.9802       182.391       200.372    
  62  0.933136     -0.692040E-01  -1.29907       1.29907       205.251       206.551    
  63  0.148663      -1.90607      -35.7802       35.7802       209.894       245.674    
  64  0.788780     -0.237267      -4.45390       4.45390       193.901       198.355    
  65  0.948785     -0.525734E-01 -0.986890      0.986890       212.336       213.322    
  66  0.246696      -1.39960      -26.2728       26.2728       221.702       247.974    
  67  0.297902      -1.21099      -22.7323       22.7323       251.224       273.957    
  68  0.402979     -0.908870      -17.0610       17.0610       194.775       211.836    
  69  0.946008     -0.555038E-01  -1.04190       1.04190       236.903       237.945    
  70  0.182802      -1.69935      -31.8997       31.8997       250.354       282.253    
  71  0.245157      -1.40586      -26.3903       26.3903       264.535       290.925    
  72  0.205669      -1.58149      -29.6871       29.6871       248.098       277.786    
  73  0.242147      -1.41821      -26.6222       26.6222       191.043       217.665    
loop,thermsimp(1:2)        5   8.66635       2.47723    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    248        200.37          0.86          1.12         23.41          0.36          0.05         25.80
Just calling func    0   0         25.80


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    249        259.86          0.86          1.11         23.63          0.20          0.05         25.86
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    200.37
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    18.7717               289
loop is:        5
neval is:      248
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        5      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    75.0866      0.500000    
T0,tstep,tfreq (these do not change):             72
current SAtemp,tstepnext are:    18.7717               289
loop is:        6
neval is:      248


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      289
neval,tstepnext:      248     289

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.215976      -1.53259      -28.7692       28.7692       183.048       211.818    
   2  0.942431     -0.592928E-01  -1.11302       1.11302       181.022       182.135    
   3  0.193824      -1.64081      -30.8006       30.8006       182.376       213.176    
   4  0.162512      -1.81700      -34.1082       34.1082       182.994       217.102    
   5  0.625243     -0.469616      -8.81546       8.81546       184.702       193.518    
   6  0.499178     -0.694793      -13.0424       13.0424       181.591       194.633    
   7  0.706095     -0.348006      -6.53265       6.53265       176.615       183.148    
   8  0.527414     -0.639770      -12.0095       12.0095       184.949       196.958    
   9  0.575748     -0.552085      -10.3635       10.3635       183.150       193.514    
  10  0.490522     -0.712286      -13.3708       13.3708       188.461       201.832    
  11  0.306517      -1.18248      -22.1972       22.1972       188.759       210.956    
  12  0.798470     -0.225057      -4.22470       4.22470       189.173       193.398    
  13  0.333550      -1.09796      -20.6106       20.6106       187.830       208.441    
  14  0.166731      -1.79138      -33.6271       33.6271       188.629       222.256    
  15  0.443580     -0.812878      -15.2591       15.2591       187.385       202.644    
  16  0.669985     -0.400500      -7.51805       7.51805       186.996       194.514    
  17  0.339921      -1.07904      -20.2554       20.2554       196.339       216.594    
  18  0.201260      -1.60316      -30.0939       30.0939       193.901       223.995    
  19  0.772250     -0.258447      -4.85147       4.85147       183.173       188.024    
  20  0.401372E-01  -3.21545      -60.3594       60.3594       191.170       251.529    
  21  0.940962     -0.608526E-01  -1.14230       1.14230       190.338       191.481    
  22  0.115324      -2.16001      -40.5470       40.5470       182.391       222.938    
  23  0.939991E-01  -2.36447      -44.3850       44.3850       194.261       238.646    
  24  0.412221     -0.886196      -16.6354       16.6354       192.862       209.497    
  25  0.136462      -1.99171      -37.3877       37.3877       188.172       225.560    
  26  0.310095      -1.17088      -21.9793       21.9793       201.853       223.832    
  27  0.985727     -0.143755E-01 -0.269852      0.269852       184.656       184.926    
  28  0.900161     -0.105182      -1.97443       1.97443       205.251       207.226    
  29  0.250220      -1.38542      -26.0066       26.0066       196.014       222.020    
  30  0.780405     -0.247942      -4.65428       4.65428       189.965       194.619    
  31  0.228719      -1.47526      -27.6930       27.6930       188.988       216.681    
  32  0.407088     -0.898727      -16.8706       16.8706       197.890       214.761    
  33  0.975627     -0.246749E-01 -0.463189      0.463189       194.808       195.272    
  34  0.885140     -0.122009      -2.29032       2.29032       188.244       190.534    
  35  0.896135     -0.109664      -2.05858       2.05858       186.965       189.023    
  36  0.856661     -0.154713      -2.90422       2.90422       190.859       193.763    
  37  0.258643      -1.35231      -25.3851       25.3851       191.786       217.171    
  38  0.336283      -1.08980      -20.4574       20.4574       182.339       202.796    
  39  0.868205     -0.141327      -2.65294       2.65294       202.861       205.514    
  40  0.937935     -0.640747E-01  -1.20279       1.20279       194.775       195.978    
  41  0.418906     -0.870109      -16.3334       16.3334       210.105       226.439    
  42  0.351040      -1.04685      -19.6512       19.6512       193.963       213.614    
  43  0.611628E-01  -2.79422      -52.4521       52.4521       206.028       258.480    
  44  0.153518      -1.87394      -35.1769       35.1769       209.714       244.891    
  45  0.938341     -0.636423E-01  -1.19467       1.19467       212.336       213.530    
  46  0.598133     -0.513942      -9.64754       9.64754       202.842       212.490    
  47  0.795771     -0.228444      -4.28828       4.28828       187.014       191.303    
  48  0.295375      -1.21951      -22.8922       22.8922       196.531       219.423    
  49  0.804738     -0.217239      -4.07794       4.07794       212.216       216.294    
  50  0.260094      -1.34671      -25.2800       25.2800       196.829       222.109    
  51  0.640517     -0.445479      -8.36237       8.36237       192.957       201.319    
  52  0.221872      -1.50566      -28.2637       28.2637       191.043       219.307    
  53  0.837141     -0.177762      -3.33689       3.33689       189.338       192.675    
  54  0.212745      -1.54766      -29.0522       29.0522       206.532       235.585    
  55  0.162033      -1.81996      -34.1636       34.1636       188.593       222.756    
  56  0.631631     -0.459450      -8.62464       8.62464       194.719       203.343    
  57  0.816014E-01  -2.50591      -47.0400       47.0400       201.825       248.865    
  58  0.754954     -0.281099      -5.27669       5.27669       214.200       219.477    
  59  0.568761E-01  -2.86688      -53.8161       53.8161       191.566       245.382    
  60  0.610521     -0.493442      -9.26272       9.26272       222.327       231.590    
  61  0.691718     -0.368577      -6.91879       6.91879       183.049       189.967    
  62  0.330677      -1.10661      -20.7729       20.7729       208.927       229.700    
  63  0.669260     -0.401583      -7.53837       7.53837       220.149       227.688    
  64  0.677208     -0.389776      -7.31675       7.31675       182.286       189.603    
  65  0.440183     -0.820565      -15.4034       15.4034       236.903       252.306    
  66  0.258089      -1.35445      -25.4253       25.4253       209.894       235.319    
  67  0.109764      -2.20942      -41.4745       41.4745       221.702       263.176    
  68  0.440932     -0.818865      -15.3714       15.3714       184.342       199.713    
  69  0.361307      -1.01803      -19.1100       19.1100       229.060       248.170    
  70  0.304201      -1.19007      -22.3395       22.3395       251.224       273.564    
  71  0.279324      -1.27538      -23.9410       23.9410       248.098       272.040    
  72  0.833329     -0.182326      -3.42256       3.42256       250.354       253.776    
  73  0.703144     -0.352194      -6.61126       6.61126       200.370       206.982    
loop,thermsimp(1:2)        6   28.7692       1.11302    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    250        191.18          0.88          1.12         23.72          0.20          0.04         25.96
Just calling func    0   0         25.96


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    191.18
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    18.7717               289
loop is:        6
neval is:      249
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        6      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    75.0866      0.500000    
T0,tstep,tfreq (these do not change):             72
current SAtemp,tstepnext are:    18.7717               289
loop is:        7
neval is:      249


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      289
neval,tstepnext:      249     289

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.264215      -1.33099      -24.9849       24.9849       181.022       206.007    
   2  0.401807     -0.911784      -17.1157       17.1157       176.615       193.731    
   3  0.418885     -0.870159      -16.3343       16.3343       184.656       200.990    
   4  0.753378     -0.283189      -5.31592       5.31592       183.173       188.489    
   5  0.792066     -0.233111      -4.37588       4.37588       186.965       191.341    
   6  0.868474     -0.141017      -2.64712       2.64712       182.286       184.934    
   7  0.318670      -1.14360      -21.4672       21.4672       183.049       204.516    
   8  0.863267     -0.147031      -2.76001       2.76001       188.244       191.004    
   9  0.589255     -0.528896      -9.92825       9.92825       187.014       196.943    
  10  0.632079E-01  -2.76133      -51.8347       51.8347       190.338       242.173    
  11  0.992270     -0.775975E-02 -0.145663      0.145663       189.338       189.483    
  12  0.466140     -0.763269      -14.3278       14.3278       189.173       203.501    
  13  0.177509      -1.72873      -32.4511       32.4511       183.150       215.601    
  14  0.933326     -0.690005E-01  -1.29525       1.29525       184.702       185.997    
  15  0.876357     -0.131982      -2.47751       2.47751       190.859       193.337    
  16  0.673496     -0.395274      -7.41994       7.41994       186.996       194.415    
  17  0.648708     -0.432773      -8.12386       8.12386       189.965       198.089    
  18  0.400813     -0.914259      -17.1622       17.1622       181.591       198.753    
  19  0.763164     -0.270282      -5.07364       5.07364       194.808       199.882    
  20  0.196240      -1.62842      -30.5681       30.5681       194.775       225.343    
  21  0.923666     -0.794046E-01  -1.49056       1.49056       184.949       186.439    
  22  0.999600     -0.400298E-03 -0.751425E-02  0.751425E-02   184.342       184.349    
  23  0.379715     -0.968335      -18.1773       18.1773       192.957       211.134    
  24  0.197375      -1.62265      -30.4598       30.4598       188.461       218.921    
  25  0.760736     -0.273468      -5.13346       5.13346       187.385       192.519    
  26  0.392182     -0.936030      -17.5708       17.5708       182.339       199.909    
  27  0.256208      -1.36177      -25.5626       25.5626       194.719       220.281    
  28  0.251796      -1.37914      -25.8886       25.8886       202.861       228.750    
  29  0.332089E-01  -3.40494      -63.9163       63.9163       200.370       264.287    
  30  0.970457     -0.299883E-01 -0.562930      0.562930       205.251       205.814    
  31  0.467370E-01  -3.06322      -57.5017       57.5017       187.830       245.332    
  32  0.716125     -0.333901      -6.26787       6.26787       192.862       199.129    
  33  0.757897     -0.277208      -5.20365       5.20365       188.759       193.963    
  34  0.765628     -0.267059      -5.01314       5.01314       183.048       188.061    
  35  0.323816      -1.12758      -21.1666       21.1666       202.842       224.009    
  36  0.909845     -0.944807E-01  -1.77356       1.77356       182.376       184.149    
  37  0.515782     -0.662071      -12.4282       12.4282       212.336       224.764    
  38  0.464370     -0.767074      -14.3992       14.3992       193.963       208.362    
  39  0.445707     -0.808094      -15.1693       15.1693       197.890       213.060    
  40  0.786320     -0.240391      -4.51255       4.51255       212.216       216.728    
  41  0.631860     -0.459087      -8.61782       8.61782       196.339       204.957    
  42  0.672488     -0.396772      -7.44806       7.44806       188.988       196.436    
  43  0.251717E-02  -5.98462      -112.341       112.341       182.994       295.336    
  44  0.245023      -1.40640      -26.4005       26.4005       191.786       218.187    
  45  0.252688      -1.37560      -25.8223       25.8223       191.043       216.865    
  46  0.268946      -1.31324      -24.6518       24.6518       196.531       221.183    
  47  0.550357     -0.597189      -11.2102       11.2102       214.200       225.411    
  48  0.826205     -0.190912      -3.58374       3.58374       196.014       199.598    
  49  0.964276     -0.363780E-01 -0.682876      0.682876       196.829       197.511    
  50  0.415479     -0.878324      -16.4876       16.4876       188.629       205.117    
  51  0.599143E-01  -2.81484      -52.8392       52.8392       188.593       241.432    
  52  0.348555      -1.05396      -19.7845       19.7845       182.391       202.176    
  53  0.243819      -1.41133      -26.4930       26.4930       201.853       228.346    
  54  0.233297      -1.45544      -27.3211       27.3211       193.901       221.222    
  55  0.705284     -0.349155      -6.55422       6.55422       188.172       194.726    
  56  0.258436      -1.35311      -25.4001       25.4001       210.105       235.505    
  57  0.328631      -1.11282      -20.8895       20.8895       220.149       241.039    
  58  0.676481     -0.390852      -7.33693       7.33693       208.927       216.264    
  59  0.784590     -0.242594      -4.55389       4.55389       222.327       226.881    
  60  0.546419E-01  -2.90695      -54.5683       54.5683       209.894       264.462    
  61  0.507256     -0.678740      -12.7411       12.7411       206.532       219.273    
  62  0.980797     -0.193899E-01 -0.363981      0.363981       194.261       194.625    
  63  0.193856      -1.64064      -30.7975       30.7975       209.714       240.511    
  64  0.101492      -2.28777      -42.9453       42.9453       191.566       234.511    
  65  0.245844E-01  -3.70564      -69.5610       69.5610       229.060       298.621    
  66  0.610050     -0.494214      -9.27721       9.27721       201.825       211.102    
  67  0.373100E-01  -3.28849      -61.7305       61.7305       191.170       252.901    
  68  0.476763     -0.740736      -13.9048       13.9048       236.903       250.808    
  69  0.412657     -0.885139      -16.6155       16.6155       250.354       266.969    
  70  0.580580     -0.543727      -10.2067       10.2067       206.028       216.235    
  71  0.241635      -1.42033      -26.6619       26.6619       221.702       248.363    
  72  0.463019     -0.769988      -14.4539       14.4539       248.098       262.552    
  73  0.389737     -0.942284      -17.6882       17.6882       191.182       208.870    
loop,thermsimp(1:2)        7   24.9849       17.1157    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    251        189.21          0.86          1.12         23.48          0.26          0.05         25.78
Just calling func    0   0         25.78


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    252        207.70          0.86          1.13         23.48          0.28          0.05         25.79
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    189.21
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    18.7717               289
loop is:        7
neval is:      251
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        7      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    75.0866      0.500000    
T0,tstep,tfreq (these do not change):             72
current SAtemp,tstepnext are:    18.7717               289
loop is:        8
neval is:      251


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      289
neval,tstepnext:      251     289

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.105813      -2.24608      -42.1627       42.1627       182.376       224.538    
   2  0.476819     -0.740619      -13.9026       13.9026       184.342       198.244    
   3  0.564430     -0.571938      -10.7362       10.7362       182.286       193.023    
   4  0.211741      -1.55239      -29.1410       29.1410       184.702       213.843    
   5  0.154226E-01  -4.17192      -78.3138       78.3138       184.949       263.262    
   6  0.489577     -0.714213      -13.4070       13.4070       183.048       196.455    
   7  0.583965     -0.537914      -10.0975       10.0975       183.173       193.270    
   8  0.430258     -0.843370      -15.8314       15.8314       189.338       205.169    
   9  0.280982      -1.26946      -23.8299       23.8299       188.244       212.074    
  10  0.535183     -0.625146      -11.7350       11.7350       186.965       198.700    
  11  0.306750      -1.18172      -22.1829       22.1829       187.385       209.568    
  12  0.924930     -0.780370E-01  -1.46488       1.46488       190.859       192.324    
  13  0.829670E-01  -2.48931      -46.7285       46.7285       176.615       223.343    
  14  0.330275      -1.10783      -20.7958       20.7958       188.759       209.555    
  15  0.229751      -1.47076      -27.6086       27.6086       186.996       214.604    
  16  0.455737     -0.785839      -14.7515       14.7515       194.261       209.012    
  17  0.830949     -0.185187      -3.47627       3.47627       188.172       191.649    
  18  0.148624      -1.90634      -35.7851       35.7851       188.988       224.773    
  19  0.883001     -0.124429      -2.33574       2.33574       187.014       189.350    
  20  0.668001     -0.403466      -7.57372       7.57372       196.829       204.402    
  21  0.610583     -0.493341      -9.26084       9.26084       189.965       199.226    
  22  0.689050     -0.372441      -6.99133       6.99133       181.591       188.582    
  23  0.124417      -2.08412      -39.1223       39.1223       192.862       231.984    
  24  0.785584E-01  -2.54391      -47.7535       47.7535       196.014       243.767    
  25  0.936565     -0.655366E-01  -1.23023       1.23023       194.808       196.039    
  26  0.483719     -0.726252      -13.6329       13.6329       182.339       195.972    
  27  0.715685     -0.334515      -6.27941       6.27941       184.656       190.935    
  28  0.786437     -0.240243      -4.50975       4.50975       182.391       186.901    
  29  0.361023      -1.01881      -19.1248       19.1248       189.173       208.298    
  30  0.325559      -1.12221      -21.0657       21.0657       183.049       204.114    
  31  0.850460     -0.161978      -3.04059       3.04059       196.339       199.379    
  32  0.301358      -1.19946      -22.5158       22.5158       188.629       211.145    
  33  0.304725      -1.18834      -22.3072       22.3072       205.251       227.559    
  34  0.887065     -0.119838      -2.24955       2.24955       181.022       183.271    
  35  0.762822     -0.270730      -5.08205       5.08205       193.963       199.045    
  36  0.364130      -1.01024      -18.9640       18.9640       191.182       210.145    
  37  0.762041     -0.271754      -5.10128       5.10128       201.825       206.926    
  38  0.941180     -0.606207E-01  -1.13795       1.13795       192.957       194.095    
  39  0.449403     -0.799835      -15.0142       15.0142       197.890       212.905    
  40  0.743855     -0.295910      -5.55471       5.55471       183.150       188.705    
  41  0.743104     -0.296920      -5.57368       5.57368       206.028       211.602    
  42  0.350527      -1.04832      -19.6786       19.6786       208.927       228.606    
  43  0.607240     -0.498831      -9.36388       9.36388       212.216       221.580    
  44  0.557347     -0.584567      -10.9733       10.9733       191.043       202.016    
  45  0.217970      -1.52340      -28.5967       28.5967       191.786       220.383    
  46  0.364570      -1.00904      -18.9413       18.9413       188.461       207.402    
  47  0.330900      -1.10594      -20.7603       20.7603       206.532       227.293    
  48  0.861127     -0.149514      -2.80662       2.80662       194.719       197.525    
  49  0.710764E-01  -2.64400      -49.6322       49.6322       196.531       246.163    
  50  0.264543      -1.32975      -24.9616       24.9616       193.901       218.863    
  51  0.985836     -0.142654E-01 -0.267786      0.267786       202.842       203.110    
  52  0.296563      -1.21550      -22.8169       22.8169       212.336       235.152    
  53  0.875112     -0.133403      -2.50420       2.50420       194.775       197.279    
  54  0.808637     -0.212405      -3.98720       3.98720       214.200       218.188    
  55  0.394372     -0.930461      -17.4663       17.4663       222.327       239.794    
  56  0.209815      -1.56153      -29.3125       29.3125       201.853       231.165    
  57  0.154667      -1.86648      -35.0369       35.0369       202.861       237.898    
  58  0.741232     -0.299442      -5.62102       5.62102       191.566       197.187    
  59  0.386718E-01  -3.25265      -61.0575       61.0575       210.105       271.163    
  60  0.372867     -0.986533      -18.5189       18.5189       209.714       228.232    
  61  0.910828E-01  -2.39599      -44.9766       44.9766       220.149       265.126    
  62  0.660999     -0.414003      -7.77152       7.77152       188.593       196.364    
  63  0.631205E-01  -2.76271      -51.8606       51.8606       190.338       242.199    
  64  0.959104     -0.417554E-01 -0.783818      0.783818       187.830       188.614    
  65  0.132829      -2.01869      -37.8942       37.8942       221.702       259.596    
  66  0.162229      -1.81875      -34.1409       34.1409       236.903       271.044    
  67  0.155176      -1.86319      -34.9752       34.9752       191.170       226.145    
  68  0.950416E-01  -2.35344      -44.1780       44.1780       248.098       292.276    
  69  0.591456     -0.525169      -9.85828       9.85828       200.370       210.229    
  70  0.297427      -1.21259      -22.7623       22.7623       209.894       232.656    
  71  0.980650E-01  -2.32213      -43.5901       43.5901       250.354       293.944    
  72  0.795540     -0.228734      -4.29371       4.29371       182.994       187.288    
  73  0.949409     -0.519153E-01 -0.974537      0.974537       189.207       190.181    
loop,thermsimp(1:2)        8   42.1627       13.9026    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    253        194.63          0.86          1.12         23.37          0.37          0.05         25.77
Just calling func    0   0         25.77


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    194.63
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    18.7717               289
loop is:        8
neval is:      252
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        8      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    75.0866      0.500000    
T0,tstep,tfreq (these do not change):             72
current SAtemp,tstepnext are:    18.7717               289
loop is:        9
neval is:      252


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      289
neval,tstepnext:      252     289

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.641422     -0.444068      -8.33589       8.33589       181.022       189.358    
   2  0.805197     -0.216668      -4.06721       4.06721       182.391       186.459    
   3  0.976428     -0.238543E-01 -0.447785      0.447785       182.994       183.442    
   4  0.599028     -0.512447      -9.61948       9.61948       181.591       191.210    
   5  0.591081     -0.525802      -9.87017       9.87017       187.830       197.701    
   6  0.151500      -1.88717      -35.4252       35.4252       183.150       218.575    
   7  0.565682     -0.569723      -10.6946       10.6946       187.014       197.709    
   8  0.345258      -1.06346      -19.9630       19.9630       189.207       209.170    
   9  0.658101     -0.418397      -7.85400       7.85400       184.656       192.510    
  10  0.691977E-01  -2.67079      -50.1351       50.1351       188.172       238.307    
  11  0.289062      -1.24111      -23.2977       23.2977       190.859       214.157    
  12  0.949819     -0.514835E-01 -0.966431      0.966431       182.286       183.253    
  13  0.791632     -0.233658      -4.38615       4.38615       183.173       187.559    
  14  0.400532     -0.914962      -17.1753       17.1753       192.957       210.132    
  15  0.241886      -1.41929      -26.6424       26.6424       182.339       208.981    
  16  0.383016     -0.959678      -18.0147       18.0147       194.808       212.823    
  17  0.993978     -0.604041E-02 -0.113388      0.113388       188.593       188.706    
  18  0.807089     -0.214322      -4.02317       4.02317       183.048       187.072    
  19  0.732161     -0.311755      -5.85215       5.85215       191.566       197.418    
  20  0.176507      -1.73440      -32.5575       32.5575       194.775       227.333    
  21  0.628098     -0.465059      -8.72992       8.72992       194.719       203.449    
  22  0.383392     -0.958697      -17.9963       17.9963       184.342       202.338    
  23  0.906421     -0.982517E-01  -1.84435       1.84435       186.965       188.809    
  24  0.329288      -1.11082      -20.8520       20.8520       193.963       214.815    
  25  0.869436     -0.139911      -2.62636       2.62636       189.965       192.591    
  26  0.354994      -1.03565      -19.4409       19.4409       196.339       215.780    
  27  0.127935      -2.05623      -38.5989       38.5989       191.043       229.642    
  28  0.840123     -0.174207      -3.27015       3.27015       202.842       206.112    
  29  0.625861     -0.468627      -8.79690       8.79690       183.049       191.846    
  30  0.488384     -0.716653      -13.4528       13.4528       196.829       210.281    
  31  0.888226E-01  -2.42111      -45.4483       45.4483       189.338       234.786    
  32  0.262955      -1.33577      -25.0746       25.0746       201.825       226.900    
  33  0.153205E-01  -4.17856      -78.4385       78.4385       188.461       266.899    
  34  0.432355     -0.838509      -15.7402       15.7402       189.173       204.913    
  35  0.225273      -1.49044      -27.9781       27.9781       194.261       222.239    
  36  0.812147     -0.208074      -3.90590       3.90590       188.759       192.665    
  37  0.832805E-01  -2.48554      -46.6577       46.6577       187.385       234.043    
  38  0.442280     -0.815813      -15.3142       15.3142       191.182       206.496    
  39  0.106639      -2.23831      -42.0168       42.0168       200.370       242.387    
  40  0.143053      -1.94454      -36.5022       36.5022       188.629       225.131    
  41  0.871774     -0.137225      -2.57594       2.57594       206.028       208.604    
  42  0.137692      -1.98273      -37.2192       37.2192       188.244       225.463    
  43  0.366512      -1.00372      -18.8416       18.8416       197.890       216.732    
  44  0.617157     -0.482633      -9.05981       9.05981       184.702       193.762    
  45  0.420337     -0.866700      -16.2694       16.2694       186.996       203.265    
  46  0.935846     -0.663044E-01  -1.24464       1.24464       214.200       215.445    
  47  0.979912     -0.202925E-01 -0.380923      0.380923       193.901       194.282    
  48  0.692793     -0.367024      -6.88966       6.88966       191.786       198.676    
  49  0.155424      -1.86160      -34.9453       34.9453       212.216       247.161    
  50  0.703218     -0.352088      -6.60928       6.60928       176.615       183.224    
  51  0.396734     -0.924489      -17.3542       17.3542       182.376       199.730    
  52  0.247863      -1.39488      -26.1842       26.1842       188.988       215.172    
  53  0.176690      -1.73336      -32.5380       32.5380       191.170       223.708    
  54  0.832421     -0.183417      -3.44303       3.44303       206.532       209.975    
  55  0.598900     -0.512660      -9.62347       9.62347       205.251       214.875    
  56  0.940005     -0.618702E-01  -1.16141       1.16141       209.714       210.875    
  57  0.556954     -0.585272      -10.9865       10.9865       208.927       219.913    
  58  0.920495     -0.828436E-01  -1.55511       1.55511       201.853       203.408    
  59  0.896932     -0.108775      -2.04189       2.04189       192.862       194.903    
  60  0.200022      -1.60933      -30.2097       30.2097       209.894       240.104    
  61  0.667904E-01  -2.70620      -50.7998       50.7998       212.336       263.135    
  62  0.146707      -1.91932      -36.0288       36.0288       202.861       238.890    
  63  0.305705      -1.18513      -22.2469       22.2469       222.327       244.574    
  64  0.975058     -0.252587E-01 -0.474148      0.474148       190.338       190.812    
  65  0.229625      -1.47131      -27.6189       27.6189       196.014       223.633    
  66  0.477708     -0.738756      -13.8677       13.8677       196.531       210.399    
  67  0.443063     -0.814043      -15.2809       15.2809       221.702       236.983    
  68  0.988727     -0.113371E-01 -0.212817      0.212817       184.949       185.161    
  69  0.338863      -1.08216      -20.3139       20.3139       220.149       240.463    
  70  0.929830     -0.727534E-01  -1.36570       1.36570       236.903       238.269    
  71  0.537152     -0.621475      -11.6661       11.6661       210.105       221.771    
  72  0.626264E-01  -2.77057      -52.0081       52.0081       248.098       300.107    
  73  0.970389     -0.300585E-01 -0.564247      0.564247       194.632       195.196    
loop,thermsimp(1:2)        9   8.33589       4.06721    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    254        194.95          0.86          1.12         23.49          0.27          0.05         25.80
Just calling func    0   0         25.80


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    194.95
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    18.7717               289
loop is:        9
neval is:      253
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        9      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    75.0866      0.500000    
T0,tstep,tfreq (these do not change):             72
current SAtemp,tstepnext are:    18.7717               289
loop is:       10
neval is:      253


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      289
neval,tstepnext:      253     289

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.833163     -0.182525      -3.42630       3.42630       176.615       180.041    
   2  0.367543      -1.00091      -18.7888       18.7888       182.286       201.075    
   3  0.528755     -0.637231      -11.9619       11.9619       182.994       194.956    
   4  0.776829     -0.252535      -4.74051       4.74051       184.949       189.689    
   5  0.149594E-01  -4.20242      -78.8863       78.8863       182.391       261.278    
   6  0.892228     -0.114033      -2.14059       2.14059       183.048       185.189    
   7  0.191037      -1.65529      -31.0725       31.0725       183.173       214.245    
   8  0.516533     -0.660616      -12.4008       12.4008       188.593       200.993    
   9  0.273230      -1.29744      -24.3551       24.3551       186.965       211.320    
  10  0.822225     -0.195741      -3.67439       3.67439       181.022       184.696    
  11  0.359850      -1.02207      -19.1859       19.1859       190.338       209.524    
  12  0.611658     -0.491581      -9.22779       9.22779       181.591       190.818    
  13  0.249481      -1.38837      -26.0620       26.0620       183.049       209.111    
  14  0.441252     -0.818139      -15.3578       15.3578       184.656       200.014    
  15  0.910514E-01  -2.39633      -44.9831       44.9831       189.965       234.948    
  16  0.745146     -0.294175      -5.52215       5.52215       188.759       194.281    
  17  0.758301     -0.276675      -5.19365       5.19365       184.702       189.896    
  18  0.638521     -0.448601      -8.42098       8.42098       193.901       202.322    
  19  0.150180      -1.89592      -35.5895       35.5895       192.862       228.451    
  20  0.144147      -1.93692      -36.3592       36.3592       194.632       230.991    
  21  0.104928      -2.25448      -42.3203       42.3203       191.566       233.886    
  22  0.398120     -0.921002      -17.2887       17.2887       187.830       205.119    
  23  0.802258     -0.220325      -4.13587       4.13587       187.014       191.150    
  24  0.399299     -0.918044      -17.2332       17.2332       191.786       209.019    
  25  0.493060     -0.707124      -13.2739       13.2739       182.376       195.650    
  26  0.504407     -0.684372      -12.8468       12.8468       184.342       197.189    
  27  0.762058     -0.271733      -5.10087       5.10087       186.996       192.096    
  28  0.430267     -0.843350      -15.8311       15.8311       201.853       217.684    
  29  0.993832     -0.618725E-02 -0.116145      0.116145       194.719       194.835    
  30  0.705390     -0.349005      -6.55140       6.55140       189.173       195.725    
  31  0.969760     -0.307069E-01 -0.576419      0.576419       202.842       203.418    
  32  0.245618      -1.40398      -26.3550       26.3550       191.182       217.537    
  33  0.685790     -0.377184      -7.08037       7.08037       206.028       213.108    
  34  0.905089     -0.997222E-01  -1.87195       1.87195       182.339       184.211    
  35  0.414065     -0.881732      -16.5516       16.5516       189.207       205.758    
  36  0.714747E-01  -2.63841      -49.5273       49.5273       206.532       256.060    
  37  0.694510     -0.364548      -6.84318       6.84318       192.957       199.800    
  38  0.770213E-01  -2.56367      -48.1244       48.1244       196.829       244.953    
  39  0.846173     -0.167031      -3.13545       3.13545       196.531       199.666    
  40  0.485012     -0.723582      -13.5828       13.5828       209.714       223.296    
  41  0.345787      -1.06193      -19.9342       19.9342       194.808       214.743    
  42  0.851861     -0.160332      -3.00969       3.00969       190.859       193.869    
  43  0.774151     -0.255989      -4.80533       4.80533       193.963       198.768    
  44  0.512382     -0.668685      -12.5523       12.5523       205.251       217.804    
  45  0.839798     -0.174594      -3.27743       3.27743       188.988       192.266    
  46  0.430550     -0.842692      -15.8187       15.8187       214.200       230.019    
  47  0.988263     -0.118067E-01 -0.221631      0.221631       196.339       196.560    
  48  0.349495      -1.05127      -19.7340       19.7340       197.890       217.624    
  49  0.290701      -1.23546      -23.1916       23.1916       183.150       206.342    
  50  0.210466      -1.55843      -29.2543       29.2543       208.927       238.181    
  51  0.361038      -1.01877      -19.1240       19.1240       210.105       229.229    
  52  0.168890      -1.77851      -33.3856       33.3856       194.261       227.646    
  53  0.176000      -1.73727      -32.6115       32.6115       196.014       228.625    
  54  0.494423     -0.704364      -13.2221       13.2221       191.170       204.392    
  55  0.887313     -0.119558      -2.24430       2.24430       188.629       190.873    
  56  0.318781      -1.14325      -21.4607       21.4607       188.244       209.705    
  57  0.385435     -0.953382      -17.8966       17.8966       201.825       219.721    
  58  0.557906     -0.583564      -10.9545       10.9545       194.775       205.730    
  59  0.262507      -1.33748      -25.1067       25.1067       191.043       216.150    
  60  0.573408     -0.556157      -10.4400       10.4400       187.385       197.825    
  61  0.334195      -1.09603      -20.5743       20.5743       189.338       209.912    
  62  0.365463      -1.00659      -18.8953       18.8953       221.702       240.597    
  63  0.182452      -1.70127      -31.9356       31.9356       236.903       268.839    
  64  0.224434      -1.49418      -28.0481       28.0481       188.172       216.220    
  65  0.599163     -0.512222      -9.61525       9.61525       202.861       212.477    
  66  0.549089     -0.599495      -11.2535       11.2535       209.894       221.148    
  67  0.830082     -0.186231      -3.49586       3.49586       220.149       223.645    
  68  0.824393     -0.193108      -3.62496       3.62496       200.370       203.995    
  69  0.814179     -0.205575      -3.85899       3.85899       222.327       226.186    
  70  0.731713E-01  -2.61495      -49.0870       49.0870       212.216       261.303    
  71  0.588145     -0.530782      -9.96365       9.96365       212.336       222.299    
  72  0.777400     -0.251801      -4.72672       4.72672       188.461       193.187    
  73  0.497973     -0.697209      -13.0878       13.0878       194.947       208.035    
loop,thermsimp(1:2)       10   3.42630       18.7888    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    255        190.41          0.86          1.12         23.46          0.28          0.05         25.78
Just calling func    0   0         25.78


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    256        226.65          0.86          1.12         23.57          0.19          0.05         25.80
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    190.41
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    18.7717               289
loop is:       10
neval is:      255
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       10      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    75.0866      0.500000    
T0,tstep,tfreq (these do not change):             72
current SAtemp,tstepnext are:    18.7717               289
loop is:       11
neval is:      255


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      289
neval,tstepnext:      255     289

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.919397     -0.840375E-01  -1.57752       1.57752       176.615       178.192    
   2  0.309089      -1.17413      -22.0403       22.0403       182.339       204.379    
   3  0.237901      -1.43590      -26.9542       26.9542       181.022       207.976    
   4  0.542467     -0.611627      -11.4813       11.4813       183.048       194.530    
   5  0.523672     -0.646889      -12.1432       12.1432       184.949       197.092    
   6  0.850058     -0.162450      -3.04946       3.04946       184.702       187.752    
   7  0.589343     -0.528746      -9.92544       9.92544       181.591       191.516    
   8  0.979269     -0.209490E-01 -0.393246      0.393246       188.629       189.022    
   9  0.110419      -2.20347      -41.3629       41.3629       187.014       228.377    
  10  0.557914     -0.583550      -10.9542       10.9542       186.996       197.950    
  11  0.474464     -0.745569      -13.9956       13.9956       188.988       202.984    
  12  0.312482      -1.16321      -21.8353       21.8353       188.461       210.296    
  13  0.297011      -1.21399      -22.7885       22.7885       190.859       213.648    
  14  0.857571     -0.153651      -2.88429       2.88429       188.759       191.643    
  15  0.792567     -0.232479      -4.36401       4.36401       194.719       199.083    
  16  0.963006     -0.376958E-01 -0.707613      0.707613       182.994       183.702    
  17  0.294103      -1.22382      -22.9732       22.9732       182.376       205.349    
  18  0.403484     -0.907618      -17.0375       17.0375       189.173       206.211    
  19  0.449313     -0.800035      -15.0180       15.0180       196.339       211.357    
  20  0.721912     -0.325852      -6.11678       6.11678       184.342       190.459    
  21  0.512488     -0.668479      -12.5484       12.5484       187.385       199.934    
  22  0.885190     -0.121953      -2.28925       2.28925       193.963       196.252    
  23  0.694751E-01  -2.66679      -50.0600       50.0600       196.531       246.591    
  24  0.820879     -0.197380      -3.70515       3.70515       192.957       196.662    
  25  0.211527      -1.55340      -29.1600       29.1600       184.656       213.816    
  26  0.937420     -0.646236E-01  -1.21309       1.21309       188.593       189.806    
  27  0.515756E-01  -2.96471      -55.6525       55.6525       182.286       237.939    
  28  0.695222     -0.363525      -6.82396       6.82396       193.901       200.725    
  29  0.718776     -0.330205      -6.19850       6.19850       202.842       209.041    
  30  0.536080     -0.623471      -11.7036       11.7036       200.370       212.074    
  31  0.585855     -0.534682      -10.0369       10.0369       191.170       201.207    
  32  0.693572     -0.365900      -6.86855       6.86855       187.830       194.699    
  33  0.700823     -0.355500      -6.67331       6.67331       194.775       201.448    
  34  0.250985      -1.38236      -25.9492       25.9492       189.207       215.156    
  35  0.290600      -1.23581      -23.1981       23.1981       183.150       206.348    
  36  0.828609     -0.188007      -3.52921       3.52921       194.947       198.477    
  37  0.225820      -1.48802      -27.9326       27.9326       191.786       219.719    
  38  0.999674     -0.326354E-03 -0.612620E-02  0.612620E-02   183.049       183.055    
  39  0.878216     -0.129862      -2.43773       2.43773       190.338       192.776    
  40  0.685898E-01  -2.67961      -50.3007       50.3007       188.244       238.545    
  41  0.273860      -1.29514      -24.3119       24.3119       189.338       213.650    
  42  0.697655     -0.360030      -6.75836       6.75836       186.965       193.723    
  43  0.293168      -1.22701      -23.0330       23.0330       202.861       225.894    
  44  0.319476      -1.14107      -21.4198       21.4198       206.028       227.448    
  45  0.874681     -0.133896      -2.51346       2.51346       183.173       185.686    
  46  0.408697     -0.894781      -16.7965       16.7965       194.808       211.605    
  47  0.142130E-01  -4.25360      -79.8470       79.8470       191.043       270.890    
  48  0.164528      -1.80468      -33.8767       33.8767       188.172       222.049    
  49  0.652669     -0.426685      -8.00958       8.00958       191.182       199.191    
  50  0.492107     -0.709060      -13.3102       13.3102       197.890       211.201    
  51  0.542705     -0.611189      -11.4730       11.4730       201.853       213.326    
  52  0.798603     -0.224891      -4.22158       4.22158       205.251       209.473    
  53  0.474092E-01  -3.04894      -57.2336       57.2336       201.825       259.059    
  54  0.425084     -0.855468      -16.0586       16.0586       209.894       225.953    
  55  0.349722      -1.05062      -19.7218       19.7218       212.336       232.057    
  56  0.499235     -0.694678      -13.0403       13.0403       209.714       222.754    
  57  0.193091      -1.64459      -30.8717       30.8717       220.149       251.021    
  58  0.876894     -0.131369      -2.46601       2.46601       222.327       224.793    
  59  0.634591     -0.454774      -8.53686       8.53686       194.261       202.798    
  60  0.571394     -0.559676      -10.5061       10.5061       192.862       203.368    
  61  0.749680     -0.288108      -5.40827       5.40827       196.014       201.422    
  62  0.111050      -2.19777      -41.2559       41.2559       210.105       251.361    
  63  0.456811     -0.783485      -14.7073       14.7073       214.200       228.908    
  64  0.686362     -0.376350      -7.06472       7.06472       194.632       201.697    
  65  0.160608      -1.82879      -34.3294       34.3294       191.566       225.896    
  66  0.557454     -0.584375      -10.9697       10.9697       189.965       200.935    
  67  0.914976     -0.888571E-01  -1.66799       1.66799       208.927       210.595    
  68  0.203755      -1.59084      -29.8627       29.8627       221.702       251.564    
  69  0.851702     -0.160519      -3.01321       3.01321       196.829       199.842    
  70  0.770841     -0.260273      -4.88576       4.88576       206.532       211.418    
  71  0.137106      -1.98700      -37.2993       37.2993       182.391       219.691    
  72  0.142091      -1.95129      -36.6289       36.6289       212.216       248.845    
  73  0.833303E-01  -2.48494      -46.6465       46.6465       190.408       237.054    
loop,thermsimp(1:2)       11   1.57752       22.0403    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    257        216.95          0.86          1.13         23.39          0.32          0.05         25.76
Just calling func    0   0         25.76


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    216.95
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    18.7717               289
loop is:       11
neval is:      256
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       11      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    75.0866      0.500000    
T0,tstep,tfreq (these do not change):             72
current SAtemp,tstepnext are:    18.7717               289
loop is:       12
neval is:      256


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      289
neval,tstepnext:      256     289

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.762868     -0.270671      -5.08094       5.08094       176.615       181.696    
   2  0.482922E-01  -3.03048      -56.8872       56.8872       183.049       239.936    
   3  0.612960     -0.489456      -9.18790       9.18790       182.994       192.182    
   4  0.910127     -0.941714E-01  -1.76775       1.76775       183.173       184.941    
   5  0.362433      -1.01492      -19.0517       19.0517       184.702       203.754    
   6  0.476779     -0.740702      -13.9042       13.9042       188.629       202.533    
   7  0.179006E-01  -4.02292      -75.5168       75.5168       188.593       264.109    
   8  0.589646     -0.528233      -9.91580       9.91580       184.342       194.258    
   9  0.926206     -0.766581E-01  -1.43900       1.43900       181.591       183.030    
  10  0.492629     -0.707999      -13.2903       13.2903       188.759       202.049    
  11  0.661123     -0.413815      -7.76799       7.76799       190.338       198.106    
  12  0.542248     -0.612032      -11.4888       11.4888       186.965       198.454    
  13  0.216527      -1.53004      -28.7214       28.7214       183.048       211.770    
  14  0.549832     -0.598143      -11.2281       11.2281       187.830       199.059    
  15  0.429556     -0.845003      -15.8621       15.8621       193.963       209.825    
  16  0.264838      -1.32864      -24.9407       24.9407       192.957       217.897    
  17  0.251706      -1.37949      -25.8954       25.8954       184.949       210.844    
  18  0.701724     -0.354215      -6.64919       6.64919       186.996       193.645    
  19  0.324289      -1.12612      -21.1391       21.1391       194.947       216.087    
  20  0.160749E-02  -6.43308      -120.760       120.760       194.719       315.478    
  21  0.533627     -0.628058      -11.7897       11.7897       191.182       202.971    
  22  0.883065     -0.124357      -2.33438       2.33438       196.829       199.163    
  23  0.484824     -0.723969      -13.5901       13.5901       187.385       200.975    
  24  0.724157     -0.322747      -6.05850       6.05850       193.901       199.960    
  25  0.847375     -0.165612      -3.10882       3.10882       189.965       193.074    
  26  0.167586      -1.78626      -33.5310       33.5310       191.170       224.701    
  27  0.890079     -0.116445      -2.18586       2.18586       196.014       198.200    
  28  0.235223      -1.44722      -27.1668       27.1668       194.775       221.942    
  29  0.206112      -1.57934      -29.6467       29.6467       194.632       224.279    
  30  0.463385     -0.769198      -14.4391       14.4391       194.261       208.700    
  31  0.487880E-01  -3.02027      -56.6955       56.6955       188.988       245.684    
  32  0.244157      -1.40994      -26.4670       26.4670       192.862       219.329    
  33  0.770602     -0.260583      -4.89157       4.89157       182.339       187.230    
  34  0.264159      -1.33120      -24.9889       24.9889       182.376       207.365    
  35  0.189030E-01  -3.96843      -74.4941       74.4941       189.173       263.667    
  36  0.635342     -0.453592      -8.51467       8.51467       183.150       191.665    
  37  0.139550      -1.96933      -36.9676       36.9676       181.022       217.989    
  38  0.561566     -0.577026      -10.8317       10.8317       202.842       213.674    
  39  0.951789     -0.494118E-01 -0.927542      0.927542       205.251       206.179    
  40  0.527693     -0.639242      -11.9996       11.9996       188.461       200.460    
  41  0.925337     -0.775972E-01  -1.45663       1.45663       208.927       210.384    
  42  0.795352     -0.228971      -4.29816       4.29816       197.890       202.189    
  43  0.530799     -0.633371      -11.8894       11.8894       196.339       208.228    
  44  0.642763     -0.441979      -8.29667       8.29667       206.532       214.829    
  45  0.485146     -0.723305      -13.5776       13.5776       194.808       208.386    
  46  0.795896     -0.228287      -4.28533       4.28533       200.370       204.656    
  47  0.519140     -0.655581      -12.3063       12.3063       201.853       214.159    
  48  0.694073E-01  -2.66776      -50.0783       50.0783       190.859       240.938    
  49  0.401486     -0.912583      -17.1307       17.1307       189.338       206.469    
  50  0.587982E-01  -2.83364      -53.1922       53.1922       184.656       237.848    
  51  0.752652     -0.284152      -5.33400       5.33400       189.207       194.541    
  52  0.139929      -1.96662      -36.9168       36.9168       182.391       219.308    
  53  0.136759      -1.98953      -37.3468       37.3468       191.786       229.133    
  54  0.690728     -0.370009      -6.94568       6.94568       188.172       195.118    
  55  0.409546     -0.892705      -16.7576       16.7576       209.714       226.471    
  56  0.422285     -0.862075      -16.1826       16.1826       222.327       238.510    
  57  0.160439      -1.82984      -34.3492       34.3492       202.861       237.211    
  58  0.230463      -1.46767      -27.5505       27.5505       191.566       219.117    
  59  0.836860     -0.178099      -3.34321       3.34321       209.894       213.237    
  60  0.635813     -0.452850      -8.50075       8.50075       206.028       214.529    
  61  0.464135     -0.767580      -14.4088       14.4088       187.014       201.423    
  62  0.999501     -0.498826E-03 -0.936379E-02  0.936379E-02   214.200       214.210    
  63  0.472031     -0.750710      -14.0921       14.0921       212.336       226.428    
  64  0.926290     -0.765681E-01  -1.43731       1.43731       190.408       191.845    
  65  0.825201E-01  -2.49471      -46.8299       46.8299       182.286       229.116    
  66  0.987125     -0.129587E-01 -0.243257      0.243257       188.244       188.487    
  67  0.902936     -0.102104      -1.91666       1.91666       196.531       198.448    
  68  0.269140E-01  -3.61511      -67.8616       67.8616       212.216       280.077    
  69  0.343181      -1.06950      -20.0762       20.0762       220.149       240.226    
  70  0.364015      -1.01056      -18.9699       18.9699       210.105       229.075    
  71  0.420237     -0.866937      -16.2738       16.2738       221.702       237.975    
  72  0.806946     -0.214499      -4.02649       4.02649       201.825       205.851    
  73  0.545083     -0.606816      -11.3909       11.3909       216.948       228.339    
loop,thermsimp(1:2)       12   5.08094       56.8872    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    258        210.14          0.86          1.13         23.48          0.26          0.05         25.78
Just calling func    0   0         25.78


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    259        417.37          0.86          1.14         23.44          0.28          0.05         25.77
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    210.14
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    18.7717               289
loop is:       12
neval is:      258
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       12      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    75.0866      0.500000    
T0,tstep,tfreq (these do not change):             72
current SAtemp,tstepnext are:    18.7717               289
loop is:       13
neval is:      258


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      289
neval,tstepnext:      258     289

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.592808     -0.522884      -9.81540       9.81540       176.615       186.430    
   2  0.691791     -0.368472      -6.91682       6.91682       181.591       188.507    
   3  0.688173     -0.373715      -7.01525       7.01525       183.173       190.188    
   4  0.439966     -0.821058      -15.4126       15.4126       182.339       197.751    
   5  0.945690     -0.558403E-01  -1.04821       1.04821       188.244       189.292    
   6  0.238956      -1.43147      -26.8711       26.8711       183.150       210.021    
   7  0.280830E-01  -3.57259      -67.0634       67.0634       190.408       257.471    
   8  0.902031E-01  -2.40569      -45.1588       45.1588       182.994       228.153    
   9  0.198361      -1.61767      -30.3663       30.3663       189.965       220.331    
  10  0.201288      -1.60302      -30.0913       30.0913       186.996       217.087    
  11  0.710033     -0.342444      -6.42824       6.42824       184.342       190.770    
  12  0.182913      -1.69874      -31.8882       31.8882       189.207       221.095    
  13  0.817316     -0.201730      -3.78680       3.78680       188.172       191.959    
  14  0.894732     -0.111231      -2.08799       2.08799       190.338       192.426    
  15  0.854000     -0.157824      -2.96262       2.96262       196.014       198.976    
  16  0.248066      -1.39406      -26.1688       26.1688       196.531       222.700    
  17  0.670877     -0.399170      -7.49307       7.49307       186.965       194.458    
  18  0.701473     -0.354573      -6.65592       6.65592       187.830       194.486    
  19  0.199467      -1.61210      -30.2619       30.2619       196.829       227.090    
  20  0.391533     -0.937685      -17.6019       17.6019       193.901       211.503    
  21  0.586761     -0.533138      -10.0079       10.0079       188.461       198.469    
  22  0.163799      -1.80912      -33.9601       33.9601       187.385       221.345    
  23  0.955964     -0.450353E-01 -0.845387      0.845387       187.014       187.860    
  24  0.365727      -1.00587      -18.8818       18.8818       188.759       207.641    
  25  0.733577     -0.309822      -5.81587       5.81587       197.890       203.706    
  26  0.111597      -2.19286      -41.1636       41.1636       188.629       229.793    
  27  0.714895     -0.335619      -6.30012       6.30012       191.182       197.482    
  28  0.816688     -0.202498      -3.80122       3.80122       184.702       188.503    
  29  0.480603     -0.732714      -13.7543       13.7543       200.370       214.125    
  30  0.573891     -0.555316      -10.4242       10.4242       201.825       212.249    
  31  0.204452      -1.58742      -29.7985       29.7985       205.251       235.050    
  32  0.845356E-01  -2.47058      -46.3769       46.3769       189.338       235.715    
  33  0.524789E-01  -2.94734      -55.3265       55.3265       182.376       237.702    
  34  0.631781     -0.459213      -8.62019       8.62019       196.339       204.959    
  35  0.620363     -0.477450      -8.96253       8.96253       194.808       203.771    
  36  0.553551     -0.591402      -11.1016       11.1016       194.261       205.362    
  37  0.546271     -0.604640      -11.3501       11.3501       193.963       205.313    
  38  0.402204     -0.910797      -17.0972       17.0972       208.927       226.024    
  39  0.735174     -0.307648      -5.77505       5.77505       184.949       190.724    
  40  0.359565      -1.02286      -19.2008       19.2008       183.048       202.249    
  41  0.564111     -0.572504      -10.7469       10.7469       209.894       220.641    
  42  0.412661     -0.885128      -16.6153       16.6153       202.842       219.457    
  43  0.795853     -0.228341      -4.28633       4.28633       201.853       206.139    
  44  0.909991E-01  -2.39691      -44.9939       44.9939       214.200       259.194    
  45  0.830687     -0.185502      -3.48218       3.48218       206.028       209.510    
  46  0.592588     -0.523256      -9.82238       9.82238       206.532       216.355    
  47  0.489472     -0.714427      -13.4110       13.4110       194.947       208.358    
  48  0.992056     -0.797586E-02 -0.149720      0.149720       192.957       193.106    
  49  0.808208     -0.212936      -3.99715       3.99715       181.022       185.019    
  50  0.212569      -1.54849      -29.0677       29.0677       191.566       220.634    
  51  0.214041      -1.54159      -28.9382       28.9382       182.391       211.330    
  52  0.586527     -0.533536      -10.0154       10.0154       192.862       202.877    
  53  0.603460     -0.505075      -9.48109       9.48109       194.775       204.256    
  54  0.819887     -0.198589      -3.72784       3.72784       194.632       198.360    
  55  0.204248      -1.58842      -29.8173       29.8173       191.170       220.987    
  56  0.540917     -0.614489      -11.5350       11.5350       212.336       223.871    
  57  0.430522     -0.842757      -15.8199       15.8199       209.714       225.534    
  58  0.637009E-01  -2.75356      -51.6888       51.6888       216.948       268.637    
  59  0.872387     -0.136522      -2.56274       2.56274       210.105       212.668    
  60  0.740351     -0.300631      -5.64334       5.64334       182.286       187.930    
  61  0.844085     -0.169502      -3.18184       3.18184       191.786       194.968    
  62  0.574613     -0.554058      -10.4006       10.4006       202.861       213.262    
  63  0.382052     -0.962198      -18.0620       18.0620       184.656       202.718    
  64  0.564583     -0.571667      -10.7311       10.7311       221.702       232.433    
  65  0.700807     -0.355522      -6.67374       6.67374       222.327       229.001    
  66  0.237235      -1.43870      -27.0068       27.0068       183.049       210.055    
  67  0.745904     -0.293158      -5.50306       5.50306       220.149       225.652    
  68  0.369081     -0.996740      -18.7105       18.7105       190.859       209.570    
  69  0.512148     -0.669141      -12.5609       12.5609       188.988       201.549    
  70  0.239900E-01  -3.73012      -70.0205       70.0205       189.173       259.194    
  71  0.364860E-01  -3.31083      -62.1497       62.1497       188.593       250.742    
  72  0.792805E-01  -2.53476      -47.5817       47.5817       212.216       259.797    
  73  0.400998     -0.913800      -17.1535       17.1535       210.137       227.291    
loop,thermsimp(1:2)       13   9.81540       6.91682    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    260        190.44          0.86          1.12         23.41          0.32          0.05         25.76
Just calling func    0   0         25.76


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    190.44
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    18.7717               289
loop is:       13
neval is:      259
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       13      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    75.0866      0.500000    
T0,tstep,tfreq (these do not change):             72
current SAtemp,tstepnext are:    18.7717               289
loop is:       14
neval is:      259


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      289
neval,tstepnext:      259     289

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.338981      -1.08181      -20.3074       20.3074       181.022       201.329    
   2  0.649641     -0.431335      -8.09687       8.09687       176.615       184.712    
   3  0.930116     -0.724456E-01  -1.35992       1.35992       187.014       188.374    
   4  0.297326      -1.21293      -22.7686       22.7686       182.286       205.055    
   5  0.751734     -0.285373      -5.35691       5.35691       184.702       190.059    
   6  0.409056     -0.893902      -16.7800       16.7800       181.591       198.371    
   7  0.115094      -2.16201      -40.5844       40.5844       188.244       228.828    
   8  0.606681     -0.499753      -9.38118       9.38118       183.173       192.554    
   9  0.140571      -1.96204      -36.8308       36.8308       184.949       221.779    
  10  0.447669E-01  -3.10629      -58.3101       58.3101       184.342       242.652    
  11  0.517394     -0.658951      -12.3696       12.3696       188.172       200.542    
  12  0.587057     -0.532633      -9.99841       9.99841       190.338       200.337    
  13  0.384993E-01  -3.25712      -61.1414       61.1414       192.957       254.098    
  14  0.829105E-01  -2.48999      -46.7413       46.7413       186.965       233.706    
  15  0.382179     -0.961866      -18.0558       18.0558       187.830       205.886    
  16  0.269516      -1.31113      -24.6121       24.6121       191.786       216.398    
  17  0.879580     -0.128311      -2.40860       2.40860       191.182       193.590    
  18  0.760503E-01  -2.57636      -48.3625       48.3625       182.339       230.701    
  19  0.482544     -0.728684      -13.6786       13.6786       194.632       208.311    
  20  0.561499     -0.577145      -10.8340       10.8340       188.461       199.295    
  21  0.254621      -1.36798      -25.6792       25.6792       196.014       221.693    
  22  0.479261     -0.735511      -13.8067       13.8067       188.988       202.795    
  23  0.638455     -0.448704      -8.42292       8.42292       183.048       191.471    
  24  0.289082      -1.24105      -23.2965       23.2965       184.656       207.952    
  25  0.656024     -0.421558      -7.91334       7.91334       192.862       200.775    
  26  0.597431     -0.515117      -9.66960       9.66960       197.890       207.560    
  27  0.859562     -0.151333      -2.84077       2.84077       194.808       197.649    
  28  0.554826     -0.589100      -11.0584       11.0584       194.775       205.834    
  29  0.128413      -2.05250      -38.5289       38.5289       196.339       234.868    
  30  0.311170      -1.16742      -21.9143       21.9143       193.963       215.877    
  31  0.606679     -0.499755      -9.38123       9.38123       194.261       203.642    
  32  0.923238     -0.798686E-01  -1.49927       1.49927       201.853       203.352    
  33  0.734154     -0.309037      -5.80114       5.80114       188.759       194.560    
  34  0.988670     -0.113947E-01 -0.213898      0.213898       194.947       195.161    
  35  0.136308      -1.99284      -37.4089       37.4089       206.028       243.437    
  36  0.345839      -1.06178      -19.9314       19.9314       190.859       210.791    
  37  0.349440      -1.05142      -19.7370       19.7370       183.150       202.887    
  38  0.625658E-01  -2.77154      -52.0263       52.0263       183.049       235.075    
  39  0.394804     -0.929365      -17.4457       17.4457       182.391       199.837    
  40  0.899667E-02  -4.71090      -88.4314       88.4314       193.901       282.333    
  41  0.823946     -0.193651      -3.63514       3.63514       201.825       205.460    
  42  0.834235     -0.181240      -3.40218       3.40218       210.105       213.507    
  43  0.777534     -0.251627      -4.72346       4.72346       202.861       207.585    
  44  0.384993     -0.954531      -17.9181       17.9181       200.370       218.288    
  45  0.247443E-01  -3.69916      -69.4394       69.4394       206.532       275.972    
  46  0.810695     -0.209863      -3.93948       3.93948       186.996       190.935    
  47  0.893618     -0.112477      -2.11137       2.11137       202.842       204.953    
  48  0.545617     -0.605837      -11.3726       11.3726       189.965       201.338    
  49  0.587193     -0.532402      -9.99407       9.99407       191.566       201.560    
  50  0.991207     -0.883185E-02 -0.165789      0.165789       209.894       210.060    
  51  0.477440     -0.739316      -13.8782       13.8782       191.170       205.048    
  52  0.444858     -0.810000      -15.2050       15.2050       189.207       204.412    
  53  0.103440      -2.26876      -42.5884       42.5884       187.385       229.974    
  54  0.320718      -1.13719      -21.3470       21.3470       196.531       217.878    
  55  0.161721      -1.82188      -34.1998       34.1998       212.336       246.535    
  56  0.912244     -0.918481E-01  -1.72414       1.72414       209.714       211.438    
  57  0.358583      -1.02559      -19.2521       19.2521       220.149       239.401    
  58  0.263871      -1.33229      -25.0094       25.0094       208.927       233.936    
  59  0.782230     -0.245606      -4.61044       4.61044       196.829       201.439    
  60  0.592946     -0.522652      -9.81105       9.81105       210.137       219.948    
  61  0.652732     -0.426589      -8.00777       8.00777       182.994       191.002    
  62  0.817021     -0.202091      -3.79358       3.79358       222.327       226.121    
  63  0.177213      -1.73040      -32.4825       32.4825       188.629       221.112    
  64  0.263258      -1.33462      -25.0530       25.0530       221.702       246.755    
  65  0.856937     -0.154391      -2.89817       2.89817       205.251       208.150    
  66  0.541629E-01  -2.91576      -54.7336       54.7336       189.338       244.071    
  67  0.919404     -0.840293E-01  -1.57737       1.57737       182.376       183.953    
  68  0.996572     -0.343426E-02 -0.644668E-01  0.644668E-01   188.593       188.657    
  69  0.257654      -1.35614      -25.4570       25.4570       190.408       215.865    
  70  0.684182     -0.379532      -7.12444       7.12444       189.173       196.298    
  71  0.870041     -0.139215      -2.61329       2.61329       214.200       216.814    
  72  0.854707     -0.156997      -2.94709       2.94709       212.216       215.163    
  73  0.195719      -1.63108      -30.6180       30.6180       190.440       221.058    
loop,thermsimp(1:2)       14   20.3074       8.09687    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    261        190.53          0.86          1.12         23.44          0.29          0.05         25.75
Just calling func    0   0         25.75


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  260    190.53        1.732     -1.259      1.707     -102.6     0.8954    
                      0.6962      2.037     -99.70      3.711    -0.9631E-01
                       1.793     -1.516      1.387      0.000     -5.000    
                      -1.097      0.000      0.000      0.000     -1.221    

                      -2.500      9384.      8547.      0.000      0.000    
                     -0.5672     -6.334     -4.391     -7.745      3.323    
                      -14.30     -3.024      1311.      0.000      3485.    

                       9592.      8853.      1570.     0.1222E+05  2564.    
                       3462.     0.1274    -0.3845E-01  0.000    -0.4564    
                     -0.5974E-01-0.1300    -0.4108    -0.1995    -0.1662E-01

                      -1.549    -0.1499E-02  0.000    -0.1773E-01 0.2028E-01
                      0.8541E-01 0.2484E-01 0.3534E-01-0.8449E-01 0.1196    
                     -0.3738E-01-0.2037E-01-0.9951E-01-0.4391      0.000    

                     -0.9443     -1.497     -2.226     -2.862    -0.2653    
                      0.2100      9.286      9.112    -0.1860E+05 -4.000    
                     -0.4496    -0.5666      9.429      8.425    -0.2247E+05

                      -4.000     0.9696E-01-0.6527      8.825      9.031    
                     -0.3320E+05 -7.000    -0.4937    -0.5490      9.441    
                       8.445    -0.2616E+05 -7.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    190.53
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    18.7717               289
loop is:       14
neval is:      260
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       14      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    75.0866      0.500000    
T0,tstep,tfreq (these do not change):             72
current SAtemp,tstepnext are:    18.7717               289
loop is:       15
neval is:      260


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      289
neval,tstepnext:      260     289

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.219724      -1.51538      -28.4462       28.4462       182.376       210.822    
   2  0.894567E-01  -2.41400      -45.3148       45.3148       176.615       221.930    
   3  0.863615     -0.146628      -2.75245       2.75245       187.014       189.767    
   4  0.807990     -0.213206      -4.00223       4.00223       188.593       192.595    
   5  0.318173      -1.14516      -21.4966       21.4966       184.702       206.199    
   6  0.464606     -0.766566      -14.3897       14.3897       186.996       201.385    
   7  0.574933     -0.553501      -10.3901       10.3901       182.994       193.384    
   8  0.974939     -0.253802E-01 -0.476429      0.476429       183.048       183.525    
   9  0.415757     -0.877653      -16.4750       16.4750       183.173       199.648    
  10  0.187109      -1.67606      -31.4625       31.4625       191.182       222.644    
  11  0.730515E-01  -2.61659      -49.1177       49.1177       188.759       237.877    
  12  0.209185      -1.56454      -29.3690       29.3690       194.947       224.316    
  13  0.496690     -0.699790      -13.1362       13.1362       189.173       202.309    
  14  0.862986     -0.147356      -2.76612       2.76612       194.808       197.575    
  15  0.888200     -0.118558      -2.22553       2.22553       181.591       183.816    
  16  0.380888     -0.965250      -18.1193       18.1193       188.461       206.580    
  17  0.135305      -2.00022      -37.5475       37.5475       182.391       219.939    
  18  0.927079     -0.757167E-01  -1.42133       1.42133       190.338       191.760    
  19  0.603067     -0.505727      -9.49333       9.49333       188.172       197.666    
  20  0.136202      -1.99362      -37.4235       37.4235       192.862       230.285    
  21  0.954653     -0.464076E-01 -0.871147      0.871147       181.022       181.893    
  22  0.151192      -1.88920      -35.4635       35.4635       189.965       225.428    
  23  0.449259     -0.800155      -15.0202       15.0202       196.829       211.849    
  24  0.780874     -0.247341      -4.64301       4.64301       191.566       196.209    
  25  0.456238     -0.784740      -14.7309       14.7309       188.988       203.719    
  26  0.163284      -1.81227      -34.0192       34.0192       183.150       217.169    
  27  0.821444     -0.196692      -3.69223       3.69223       201.853       205.545    
  28  0.861448     -0.149141      -2.79962       2.79962       194.261       197.060    
  29  0.924167     -0.788621E-01  -1.48037       1.48037       189.207       190.687    
  30  0.195059      -1.63445      -30.6814       30.6814       202.842       233.523    
  31  0.375134     -0.980472      -18.4051       18.4051       191.170       209.575    
  32  0.909862     -0.944628E-01  -1.77322       1.77322       182.286       184.060    
  33  0.831459     -0.184574      -3.46476       3.46476       201.825       205.290    
  34  0.627278     -0.466365      -8.75444       8.75444       194.775       203.530    
  35  0.918890     -0.845891E-01  -1.58788       1.58788       187.830       189.418    
  36  0.475784     -0.742791      -13.9434       13.9434       197.890       211.834    
  37  0.344524      -1.06559      -20.0029       20.0029       202.861       222.864    
  38  0.286778      -1.24905      -23.4466       23.4466       184.656       208.102    
  39  0.336148      -1.09020      -20.4649       20.4649       205.251       225.716    
  40  0.709840     -0.342716      -6.43335       6.43335       194.632       201.065    
  41  0.219827      -1.51491      -28.4374       28.4374       209.894       238.332    
  42  0.347594      -1.05672      -19.8364       19.8364       190.859       210.696    
  43  0.905734     -0.990099E-01  -1.85858       1.85858       209.714       211.572    
  44  0.826231     -0.190881      -3.58315       3.58315       210.105       213.688    
  45  0.400277     -0.915599      -17.1873       17.1873       212.216       229.403    
  46  0.555153     -0.588512      -11.0473       11.0473       190.408       201.455    
  47  0.864397     -0.145723      -2.73547       2.73547       193.963       196.698    
  48  0.277380E-01  -3.58495      -67.2955       67.2955       191.786       259.082    
  49  0.993968     -0.605015E-02 -0.113571      0.113571       214.200       214.314    
  50  0.717076     -0.332573      -6.24295       6.24295       196.531       202.774    
  51  0.736253     -0.306182      -5.74754       5.74754       200.370       206.118    
  52  0.278813      -1.27722      -23.9754       23.9754       210.137       234.113    
  53  0.646460     -0.436245      -8.18903       8.18903       190.440       198.629    
  54  0.600312     -0.510306      -9.57929       9.57929       188.629       198.208    
  55  0.295434      -1.21931      -22.8885       22.8885       196.014       218.902    
  56  0.946129     -0.553767E-01  -1.03951       1.03951       184.949       185.988    
  57  0.722008     -0.325719      -6.11429       6.11429       222.327       228.442    
  58  0.789514     -0.236338      -4.43645       4.43645       188.244       192.680    
  59  0.955429     -0.455949E-01 -0.855892      0.855892       187.385       188.241    
  60  0.693546     -0.365938      -6.86925       6.86925       182.339       189.208    
  61  0.979434     -0.207808E-01 -0.390090      0.390090       186.965       187.355    
  62  0.860966     -0.149700      -2.81012       2.81012       208.927       211.737    
  63  0.329063      -1.11151      -20.8648       20.8648       196.339       217.204    
  64  0.839540     -0.174902      -3.28319       3.28319       183.049       186.332    
  65  0.511945     -0.669538      -12.5683       12.5683       220.149       232.718    
  66  0.265617      -1.32570      -24.8855       24.8855       184.342       209.227    
  67  0.793213     -0.231663      -4.34869       4.34869       206.028       210.377    
  68  0.515723     -0.662186      -12.4303       12.4303       189.338       201.768    
  69  0.928816     -0.738450E-01  -1.38619       1.38619       212.336       213.722    
  70  0.936254     -0.658686E-01  -1.23646       1.23646       221.702       222.938    
  71  0.735848     -0.306732      -5.75787       5.75787       192.957       198.715    
  72  0.194591      -1.63686      -30.7265       30.7265       206.532       237.259    
  73  0.834124     -0.181373      -3.40466       3.40466       190.528       193.933    
loop,thermsimp(1:2)       15   28.4462       45.3148    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    262        199.38          0.86          1.12         23.52          0.19          0.05         25.74
Just calling func    0   0         25.74


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    199.38
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    18.7717               289
loop is:       15
neval is:      261
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       15      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    75.0866      0.500000    
T0,tstep,tfreq (these do not change):             72
current SAtemp,tstepnext are:    18.7717               289
loop is:       16
neval is:      261


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      289
neval,tstepnext:      261     289

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.231724      -1.46221      -27.4480       27.4480       181.022       208.470    
   2  0.641193     -0.444425      -8.34259       8.34259       183.048       191.391    
   3  0.353033      -1.04119      -19.5449       19.5449       181.591       201.136    
   4  0.928955     -0.736953E-01  -1.38338       1.38338       182.286       183.670    
   5  0.350257      -1.04909      -19.6931       19.6931       184.949       204.642    
   6  0.682617     -0.381821      -7.16741       7.16741       183.049       190.216    
   7  0.162763      -1.81546      -34.0792       34.0792       186.965       221.044    
   8  0.874032     -0.134639      -2.52739       2.52739       187.385       189.913    
   9  0.518909     -0.656027      -12.3147       12.3147       182.339       194.653    
  10  0.461984     -0.772226      -14.4960       14.4960       187.830       202.326    
  11  0.449468     -0.799691      -15.0115       15.0115       187.014       202.026    
  12  0.523281     -0.647637      -12.1572       12.1572       189.207       201.364    
  13  0.637377     -0.450394      -8.45465       8.45465       190.338       198.793    
  14  0.596329     -0.516963      -9.70426       9.70426       188.593       198.297    
  15  0.286246      -1.25090      -23.4815       23.4815       188.244       211.725    
  16  0.590425     -0.526913      -9.89104       9.89104       182.994       192.885    
  17  0.853637     -0.158249      -2.97059       2.97059       190.528       193.499    
  18  0.245572      -1.40416      -26.3585       26.3585       191.566       217.925    
  19  0.375654     -0.979088      -18.3791       18.3791       193.963       212.342    
  20  0.281654      -1.26708      -23.7851       23.7851       194.261       218.046    
  21  0.443392     -0.813302      -15.2670       15.2670       194.808       210.075    
  22  0.442934     -0.814335      -15.2864       15.2864       188.172       203.459    
  23  0.171790      -1.76149      -33.0660       33.0660       188.629       221.695    
  24  0.802582     -0.219921      -4.12829       4.12829       190.440       194.568    
  25  0.162733      -1.81564      -34.0827       34.0827       192.957       227.039    
  26  0.838320     -0.176355      -3.31047       3.31047       183.173       186.483    
  27  0.210754      -1.55706      -29.2287       29.2287       194.632       223.861    
  28  0.240377      -1.42554      -26.7598       26.7598       186.996       213.755    
  29  0.173042E-01  -4.05680      -76.1529       76.1529       190.408       266.561    
  30  0.640146     -0.446059      -8.37326       8.37326       189.338       197.711    
  31  0.749210     -0.288736      -5.42005       5.42005       189.173       194.593    
  32  0.666162     -0.406222      -7.62546       7.62546       196.531       204.156    
  33  0.601746     -0.507920      -9.53449       9.53449       194.775       204.310    
  34  0.677044     -0.390020      -7.32131       7.32131       188.988       196.310    
  35  0.290379      -1.23657      -23.2124       23.2124       201.825       225.037    
  36  0.439723     -0.821610      -15.4230       15.4230       201.853       217.276    
  37  0.680091     -0.385528      -7.23700       7.23700       200.370       207.607    
  38  0.803784     -0.218425      -4.10019       4.10019       184.702       188.802    
  39  0.507823     -0.677622      -12.7201       12.7201       188.461       201.181    
  40  0.894573     -0.111408      -2.09132       2.09132       184.656       186.747    
  41  0.826908     -0.190062      -3.56778       3.56778       184.342       187.910    
  42  0.815562     -0.203878      -3.82713       3.82713       191.170       194.997    
  43  0.352457      -1.04283      -19.5756       19.5756       206.028       225.604    
  44  0.104059      -2.26279      -42.4764       42.4764       190.859       233.336    
  45  0.601892     -0.507677      -9.52993       9.52993       182.376       191.906    
  46  0.988184     -0.118862E-01 -0.223123      0.223123       209.714       209.937    
  47  0.733912     -0.309366      -5.80731       5.80731       208.927       214.734    
  48  0.107394      -2.23125      -41.8842       41.8842       197.890       239.775    
  49  0.592150     -0.523995      -9.83626       9.83626       196.829       206.665    
  50  0.821901     -0.196136      -3.68179       3.68179       210.105       213.787    
  51  0.400070E-01  -3.21870      -60.4204       60.4204       212.336       272.756    
  52  0.271211      -1.30486      -24.4943       24.4943       214.200       238.695    
  53  0.296309      -1.21635      -22.8329       22.8329       183.150       205.983    
  54  0.436334     -0.829346      -15.5682       15.5682       196.339       211.907    
  55  0.372372     -0.987863      -18.5438       18.5438       196.014       214.558    
  56  0.806182     -0.215446      -4.04427       4.04427       182.391       186.436    
  57  0.194087      -1.63945      -30.7752       30.7752       176.615       207.390    
  58  0.739876     -0.301273      -5.65539       5.65539       191.182       196.837    
  59  0.348380      -1.05446      -19.7940       19.7940       202.861       222.655    
  60  0.850149     -0.162343      -3.04746       3.04746       221.702       224.749    
  61  0.123296      -2.09317      -39.2922       39.2922       194.947       234.240    
  62  0.855160     -0.156467      -2.93714       2.93714       189.965       192.902    
  63  0.959969E-01  -2.34344      -43.9902       43.9902       205.251       249.242    
  64  0.739916     -0.301218      -5.65436       5.65436       222.327       227.982    
  65  0.470406     -0.754159      -14.1568       14.1568       212.216       226.373    
  66  0.559264     -0.581134      -10.9089       10.9089       192.862       203.770    
  67  0.935836     -0.663155E-01  -1.24485       1.24485       220.149       221.394    
  68  0.190508      -1.65806      -31.1246       31.1246       202.842       233.967    
  69  0.410140     -0.891256      -16.7304       16.7304       210.137       226.868    
  70  0.289980E-01  -3.54053      -66.4616       66.4616       206.532       272.994    
  71  0.401138     -0.913450      -17.1470       17.1470       188.759       205.906    
  72  0.695873     -0.362588      -6.80637       6.80637       209.894       216.700    
  73  0.405124     -0.903562      -16.9613       16.9613       199.384       216.345    
loop,thermsimp(1:2)       16   27.4480       8.34259    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    263        190.64          0.86          1.12         23.45          0.27          0.05         25.75
Just calling func    0   0         25.75


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    190.64
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    18.7717               289
loop is:       16
neval is:      262
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       16      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    75.0866      0.500000    
T0,tstep,tfreq (these do not change):             72
current SAtemp,tstepnext are:    18.7717               289
loop is:       17
neval is:      262


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      289
neval,tstepnext:      262     289

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.776913     -0.252427      -4.73847       4.73847       182.286       187.025    
   2  0.350417      -1.04863      -19.6845       19.6845       182.391       202.076    
   3  0.533846     -0.627648      -11.7820       11.7820       183.173       194.955    
   4  0.622955     -0.473280      -8.88426       8.88426       184.656       193.540    
   5  0.661091E-01  -2.71645      -50.9922       50.9922       184.342       235.334    
   6  0.759206     -0.275482      -5.17125       5.17125       184.702       189.873    
   7  0.430535     -0.842727      -15.8194       15.8194       187.385       203.205    
   8  0.257678      -1.35604      -25.4552       25.4552       183.049       208.504    
   9  0.296561      -1.21550      -22.8170       22.8170       183.048       205.865    
  10  0.805929     -0.215760      -4.05017       4.05017       182.376       186.426    
  11  0.421616     -0.863661      -16.2123       16.2123       182.994       199.207    
  12  0.767803     -0.264223      -4.95990       4.95990       189.965       194.925    
  13  0.605260     -0.502097      -9.42519       9.42519       190.528       199.953    
  14  0.566784     -0.567776      -10.6581       10.6581       190.440       201.098    
  15  0.292740      -1.22847      -23.0604       23.0604       189.173       212.234    
  16  0.898463     -0.107069      -2.00987       2.00987       182.339       184.349    
  17  0.218067      -1.52295      -28.5884       28.5884       191.170       219.758    
  18  0.856756     -0.154603      -2.90215       2.90215       188.988       191.890    
  19  0.338883      -1.08210      -20.3128       20.3128       191.182       211.494    
  20  0.796034     -0.228113      -4.28207       4.28207       189.338       193.620    
  21  0.778636     -0.250212      -4.69689       4.69689       188.593       193.290    
  22  0.575989     -0.551667      -10.3557       10.3557       190.338       200.694    
  23  0.355531      -1.03414      -19.4126       19.4126       181.591       201.003    
  24  0.164949      -1.80212      -33.8288       33.8288       188.461       222.290    
  25  0.315998      -1.15202      -21.6253       21.6253       189.207       210.832    
  26  0.330933      -1.10584      -20.7584       20.7584       187.014       207.773    
  27  0.429436     -0.845283      -15.8674       15.8674       187.830       203.698    
  28  0.464808     -0.766130      -14.3815       14.3815       188.172       202.554    
  29  0.192211      -1.64916      -30.9575       30.9575       192.862       223.819    
  30  0.866849     -0.142891      -2.68229       2.68229       196.531       199.213    
  31  0.474973     -0.744498      -13.9755       13.9755       194.775       208.751    
  32  0.667713     -0.403897      -7.58181       7.58181       184.949       192.530    
  33  0.994155     -0.586200E-02 -0.110039      0.110039       188.759       188.869    
  34  0.577739     -0.548634      -10.2988       10.2988       183.150       193.449    
  35  0.381919     -0.962546      -18.0686       18.0686       196.829       214.897    
  36  0.733204     -0.310331      -5.82542       5.82542       176.615       182.440    
  37  0.492382     -0.708500      -13.2997       13.2997       200.370       213.670    
  38  0.188899E-01  -3.96913      -74.5071       74.5071       181.022       255.529    
  39  0.741920E-01  -2.60110      -48.8269       48.8269       209.714       258.541    
  40  0.210592      -1.55783      -29.2431       29.2431       194.808       224.052    
  41  0.682838     -0.381498      -7.16135       7.16135       188.244       195.405    
  42  0.656831     -0.420328      -7.89026       7.89026       196.339       204.229    
  43  0.444670     -0.810424      -15.2130       15.2130       193.963       209.176    
  44  0.872301     -0.136621      -2.56460       2.56460       186.996       189.560    
  45  0.932741     -0.696282E-01  -1.30704       1.30704       210.105       211.412    
  46  0.601727     -0.507951      -9.53509       9.53509       196.014       205.549    
  47  0.940344     -0.615097E-01  -1.15464       1.15464       208.927       210.082    
  48  0.208477E-01  -3.87051      -72.6559       72.6559       199.384       272.040    
  49  0.257831      -1.35545      -25.4440       25.4440       209.894       235.338    
  50  0.522803     -0.648550      -12.1743       12.1743       201.853       214.027    
  51  0.676437     -0.390915      -7.33813       7.33813       191.566       198.904    
  52  0.612346     -0.490458      -9.20670       9.20670       194.261       203.468    
  53  0.206854      -1.57574      -29.5793       29.5793       186.965       216.544    
  54  0.201156      -1.60367      -30.1036       30.1036       220.149       250.253    
  55  0.785118     -0.241921      -4.54125       4.54125       188.629       193.170    
  56  0.534951     -0.625580      -11.7432       11.7432       202.861       214.605    
  57  0.147432      -1.91439      -35.9363       35.9363       194.632       230.568    
  58  0.696605     -0.361537      -6.78665       6.78665       221.702       228.488    
  59  0.711810     -0.339944      -6.38131       6.38131       201.825       208.206    
  60  0.934269     -0.679906E-01  -1.27630       1.27630       206.028       207.304    
  61  0.821040     -0.197183      -3.70145       3.70145       212.216       215.917    
  62  0.682914     -0.381386      -7.15924       7.15924       210.137       217.297    
  63  0.660876     -0.414189      -7.77501       7.77501       192.957       200.732    
  64  0.653213     -0.425852      -7.99394       7.99394       222.327       230.321    
  65  0.327611      -1.11593      -20.9478       20.9478       190.859       211.807    
  66  0.191936      -1.65059      -30.9844       30.9844       202.842       233.826    
  67  0.417647E-01  -3.17570      -59.6132       59.6132       194.947       254.561    
  68  0.629872     -0.462239      -8.67700       8.67700       214.200       222.877    
  69  0.391125     -0.938727      -17.6215       17.6215       197.890       215.512    
  70  0.111121      -2.19714      -41.2439       41.2439       205.251       246.495    
  71  0.315632      -1.15318      -21.6471       21.6471       190.408       212.055    
  72  0.335886      -1.09098      -20.4796       20.4796       212.336       232.815    
  73  0.742251     -0.298067      -5.59522       5.59522       190.639       196.234    
loop,thermsimp(1:2)       17   4.73847       19.6845    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    264        191.77          0.86          1.12         23.51          0.24          0.05         25.78
Just calling func    0   0         25.77


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    265        205.45          0.86          1.12         23.71          0.26          0.05         26.01
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    191.77
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    18.7717               289
loop is:       17
neval is:      264
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       17      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    75.0866      0.500000    
T0,tstep,tfreq (these do not change):             72
current SAtemp,tstepnext are:    18.7717               289
loop is:       18
neval is:      264


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      289
neval,tstepnext:      264     289

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.240395      -1.42547      -26.7584       26.7584       176.615       203.373    
   2  0.711556E-02  -4.94547      -92.8347       92.8347       182.339       275.173    
   3  0.909796     -0.945347E-01  -1.77457       1.77457       182.376       184.150    
   4  0.659218     -0.416702      -7.82218       7.82218       182.286       190.109    
   5  0.833482     -0.182144      -3.41914       3.41914       188.759       192.178    
   6  0.726295E-01  -2.62238      -49.2265       49.2265       186.996       236.222    
   7  0.687091     -0.375288      -7.04478       7.04478       184.702       191.747    
   8  0.860775     -0.149922      -2.81428       2.81428       188.988       191.802    
   9  0.846215     -0.166982      -3.13453       3.13453       184.949       188.083    
  10  0.398551     -0.919919      -17.2684       17.2684       188.629       205.897    
  11  0.416092     -0.876849      -16.4599       16.4599       188.593       205.053    
  12  0.463389     -0.769189      -14.4389       14.4389       183.150       197.589    
  13  0.207356      -1.57332      -29.5338       29.5338       184.656       214.190    
  14  0.133003      -2.01738      -37.8696       37.8696       189.338       227.207    
  15  0.464971     -0.765779      -14.3749       14.3749       189.965       204.340    
  16  0.568281     -0.565140      -10.6086       10.6086       183.173       193.781    
  17  0.638811     -0.448147      -8.41245       8.41245       188.244       196.656    
  18  0.865664     -0.144259      -2.70798       2.70798       190.639       193.347    
  19  0.475002     -0.744436      -13.9743       13.9743       191.566       205.540    
  20  0.537086     -0.621597      -11.6684       11.6684       182.994       194.663    
  21  0.782345     -0.245459      -4.60767       4.60767       196.531       201.139    
  22  0.725469     -0.320937      -6.02452       6.02452       190.528       196.553    
  23  0.701426E-01  -2.65723      -49.8805       49.8805       190.338       240.219    
  24  0.297043      -1.21388      -22.7865       22.7865       192.957       215.743    
  25  0.444870     -0.809973      -15.2045       15.2045       181.591       196.795    
  26  0.685684     -0.377338      -7.08326       7.08326       190.440       197.523    
  27  0.651244     -0.428871      -8.05062       8.05062       182.391       190.442    
  28  0.269082      -1.31274      -24.6423       24.6423       188.172       212.815    
  29  0.177107      -1.73100      -32.4938       32.4938       187.385       219.879    
  30  0.766464     -0.265968      -4.99265       4.99265       194.261       199.254    
  31  0.801833     -0.220855      -4.14581       4.14581       187.830       191.976    
  32  0.759414     -0.275209      -5.16612       5.16612       196.339       201.505    
  33  0.566307     -0.568618      -10.6739       10.6739       196.014       206.688    
  34  0.297948      -1.21084      -22.7294       22.7294       183.048       205.778    
  35  0.430097E-01  -3.14633      -59.0618       59.0618       206.028       265.090    
  36  0.529414     -0.635984      -11.9385       11.9385       187.014       198.953    
  37  0.717133     -0.332494      -6.24145       6.24145       201.825       208.066    
  38  0.209457      -1.56323      -29.3445       29.3445       183.049       212.393    
  39  0.732428     -0.311390      -5.84531       5.84531       194.775       200.620    
  40  0.697782     -0.359849      -6.75496       6.75496       193.963       200.718    
  41  0.977227     -0.230362E-01 -0.432427      0.432427       208.927       209.359    
  42  0.744700     -0.294773      -5.53338       5.53338       189.207       194.740    
  43  0.713341     -0.337796      -6.34099       6.34099       210.105       216.446    
  44  0.497823     -0.697510      -13.0934       13.0934       191.182       204.275    
  45  0.968758     -0.317404E-01 -0.595819      0.595819       190.859       191.455    
  46  0.287665      -1.24596      -23.3887       23.3887       190.408       213.796    
  47  0.964672     -0.359674E-01 -0.675167      0.675167       189.173       189.848    
  48  0.733769     -0.309561      -5.81098       5.81098       200.370       206.181    
  49  0.692680     -0.367187      -6.89271       6.89271       201.853       208.745    
  50  0.328873      -1.11208      -20.8756       20.8756       202.861       223.737    
  51  0.744920     -0.294478      -5.52785       5.52785       196.829       202.356    
  52  0.655188     -0.422834      -7.93729       7.93729       197.890       205.828    
  53  0.255467      -1.36466      -25.6169       25.6169       212.216       237.833    
  54  0.262199E-02  -5.94382      -111.575       111.575       186.965       298.540    
  55  0.538310     -0.619321      -11.6257       11.6257       210.137       221.763    
  56  0.456270     -0.784671      -14.7296       14.7296       191.170       205.900    
  57  0.990209     -0.983957E-02 -0.184705      0.184705       188.461       188.645    
  58  0.262373      -1.33799      -25.1162       25.1162       214.200       239.317    
  59  0.645275     -0.438079      -8.22347       8.22347       192.862       201.085    
  60  0.423351     -0.859554      -16.1352       16.1352       194.808       210.944    
  61  0.353204      -1.04071      -19.5358       19.5358       221.702       241.237    
  62  0.721881     -0.325895      -6.11759       6.11759       222.327       228.445    
  63  0.213966      -1.54194      -28.9447       28.9447       194.632       223.577    
  64  0.176516      -1.73434      -32.5565       32.5565       212.336       244.892    
  65  0.885542     -0.121555      -2.28179       2.28179       202.842       205.124    
  66  0.551521     -0.595076      -11.1706       11.1706       184.342       195.512    
  67  0.847646     -0.165292      -3.10280       3.10280       209.894       212.997    
  68  0.825749E-01  -2.49405      -46.8174       46.8174       205.251       252.069    
  69  0.123448      -2.09193      -39.2690       39.2690       220.149       259.418    
  70  0.384918     -0.954725      -17.9218       17.9218       194.947       212.869    
  71  0.991208     -0.883065E-02 -0.165766      0.165766       181.022       181.188    
  72  0.864006     -0.146175      -2.74395       2.74395       209.714       212.458    
  73  0.128713      -2.05017      -38.4850       38.4850       191.774       230.259    
loop,thermsimp(1:2)       18   26.7584       92.8347    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    266        196.51          0.87          1.12         23.74          0.06          0.05         25.84
Just calling func    0   0         25.84


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    267        203.81          0.86          1.12         23.51          0.27          0.05         25.79
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    196.51
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    18.7717               289
loop is:       18
neval is:      266
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       18      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    75.0866      0.500000    
T0,tstep,tfreq (these do not change):             72
current SAtemp,tstepnext are:    18.7717               289
loop is:       19
neval is:      266


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      289
neval,tstepnext:      266     289

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.722200     -0.325453      -6.10929       6.10929       181.022       187.131    
   2  0.240049      -1.42691      -26.7855       26.7855       182.376       209.161    
   3  0.365543      -1.00637      -18.8912       18.8912       184.949       203.840    
   4  0.399010     -0.918769      -17.2468       17.2468       188.461       205.708    
   5  0.685268     -0.377945      -7.09465       7.09465       189.173       196.268    
   6  0.335805E-01  -3.39381      -63.7074       63.7074       182.286       245.994    
   7  0.820520     -0.197817      -3.71335       3.71335       182.391       186.105    
   8  0.756560     -0.278973      -5.23679       5.23679       190.859       196.096    
   9  0.869461     -0.139882      -2.62582       2.62582       184.702       187.328    
  10  0.787378     -0.239047      -4.48730       4.48730       188.988       193.476    
  11  0.330926      -1.10586      -20.7588       20.7588       187.830       208.589    
  12  0.339084E-01  -3.38409      -63.5250       63.5250       188.759       252.284    
  13  0.672805     -0.396300      -7.43920       7.43920       190.639       198.078    
  14  0.822413     -0.195513      -3.67010       3.67010       183.173       186.843    
  15  0.928870     -0.737865E-01  -1.38509       1.38509       182.994       184.379    
  16  0.778944     -0.249816      -4.68946       4.68946       189.207       193.896    
  17  0.301602E-01  -3.50123      -65.7239       65.7239       184.342       250.066    
  18  0.292626      -1.22886      -23.0678       23.0678       190.528       213.596    
  19  0.149515      -1.90036      -35.6729       35.6729       188.244       223.917    
  20  0.500330E-01  -2.99507      -56.2225       56.2225       181.591       237.813    
  21  0.759114E-01  -2.57819      -48.3969       48.3969       190.440       238.837    
  22  0.613440     -0.488673      -9.17319       9.17319       183.150       192.323    
  23  0.132502      -2.02116      -37.9405       37.9405       187.014       224.955    
  24  0.189750E-02  -6.26722      -117.646       117.646       194.261       311.907    
  25  0.507622     -0.678018      -12.7275       12.7275       194.775       207.503    
  26  0.378733     -0.970924      -18.2258       18.2258       193.963       212.189    
  27  0.139411      -1.97033      -36.9863       36.9863       192.862       229.848    
  28  0.298599      -1.20865      -22.6884       22.6884       196.531       219.219    
  29  0.767617     -0.264464      -4.96443       4.96443       196.339       201.303    
  30  0.656077     -0.421478      -7.91183       7.91183       196.829       204.740    
  31  0.701883     -0.353988      -6.64494       6.64494       176.615       183.260    
  32  0.940950     -0.608655E-01  -1.14255       1.14255       191.182       192.324    
  33  0.621043     -0.476355      -8.94197       8.94197       189.965       198.907    
  34  0.622910     -0.473353      -8.88561       8.88561       188.593       197.478    
  35  0.525019     -0.644320      -12.0950       12.0950       202.842       214.937    
  36  0.871126     -0.137969      -2.58990       2.58990       191.566       194.156    
  37  0.475532     -0.743322      -13.9534       13.9534       183.048       197.002    
  38  0.320094      -1.13914      -21.3835       21.3835       197.890       219.274    
  39  0.688986     -0.372534      -6.99308       6.99308       188.629       195.622    
  40  0.831218     -0.184863      -3.47019       3.47019       191.170       194.640    
  41  0.639633     -0.446861      -8.38831       8.38831       200.370       208.759    
  42  0.628257     -0.464807      -8.72519       8.72519       196.014       204.739    
  43  0.925835     -0.770596E-01  -1.44654       1.44654       201.825       203.271    
  44  0.611089     -0.492512      -9.24526       9.24526       201.853       211.098    
  45  0.423003E-01  -3.16296      -59.3740       59.3740       208.927       268.301    
  46  0.430763     -0.842198      -15.8095       15.8095       194.808       210.618    
  47  0.374764     -0.981459      -18.4236       18.4236       183.049       201.472    
  48  0.109336      -2.21333      -41.5478       41.5478       209.714       251.261    
  49  0.642636E-02  -5.04735      -94.7471       94.7471       188.172       282.919    
  50  0.232984      -1.45679      -27.3463       27.3463       194.947       222.294    
  51  0.169005E-01  -4.08041      -76.5961       76.5961       209.894       286.490    
  52  0.183441      -1.69586      -31.8341       31.8341       190.408       222.242    
  53  0.257429      -1.35701      -25.4733       25.4733       184.656       210.129    
  54  0.784332     -0.242922      -4.56005       4.56005       192.957       197.517    
  55  0.417881     -0.872558      -16.3794       16.3794       210.105       226.485    
  56  0.597408E-01  -2.81774      -52.8936       52.8936       187.385       240.279    
  57  0.854186E-01  -2.46019      -46.1819       46.1819       210.137       256.319    
  58  0.484163     -0.725335      -13.6157       13.6157       194.632       208.248    
  59  0.392210     -0.935958      -17.5695       17.5695       202.861       220.431    
  60  0.544229     -0.608385      -11.4204       11.4204       189.338       200.758    
  61  0.846696     -0.166413      -3.12385       3.12385       222.327       225.451    
  62  0.273327      -1.29709      -24.3485       24.3485       191.774       216.123    
  63  0.253790      -1.37125      -25.7406       25.7406       186.996       212.736    
  64  0.683640     -0.380324      -7.13932       7.13932       212.216       219.355    
  65  0.707324     -0.346266      -6.49998       6.49998       214.200       220.700    
  66  0.664908     -0.408107      -7.66084       7.66084       190.338       197.999    
  67  0.269947      -1.30953      -24.5820       24.5820       221.702       246.284    
  68  0.112661      -2.18338      -40.9856       40.9856       212.336       253.321    
  69  0.392076     -0.936299      -17.5759       17.5759       205.251       222.827    
  70  0.711292     -0.340672      -6.39497       6.39497       220.149       226.544    
  71  0.887428     -0.119427      -2.24185       2.24185       206.028       208.270    
  72  0.620380     -0.477423      -8.96201       8.96201       182.339       191.301    
  73  0.295869      -1.21784      -22.8609       22.8609       196.510       219.371    
loop,thermsimp(1:2)       19   6.10929       26.7855    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    268        194.39          0.86          1.13         23.62          0.13          0.05         25.79
Just calling func    0   0         25.80


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    194.39
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    18.7717               289
loop is:       19
neval is:      267
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       19      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    75.0866      0.500000    
T0,tstep,tfreq (these do not change):             72
current SAtemp,tstepnext are:    18.7717               289
loop is:       20
neval is:      267


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      289
neval,tstepnext:      267     289

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.311857      -1.16521      -21.8729       21.8729       176.615       198.488    
   2  0.362384      -1.01505      -19.0542       19.0542       182.994       202.048    
   3  0.900627     -0.104664      -1.96472       1.96472       182.391       184.356    
   4  0.233893      -1.45289      -27.2731       27.2731       183.173       210.446    
   5  0.183338      -1.69642      -31.8447       31.8447       181.022       212.866    
   6  0.351708      -1.04495      -19.6155       19.6155       184.702       204.318    
   7  0.979617     -0.205938E-01 -0.386579      0.386579       182.339       182.725    
   8  0.801294     -0.221527      -4.15844       4.15844       183.150       187.309    
   9  0.423893     -0.858275      -16.1112       16.1112       191.182       207.293    
  10  0.486446     -0.720630      -13.5274       13.5274       188.988       202.516    
  11  0.430531     -0.842736      -15.8195       15.8195       189.207       205.026    
  12  0.214629      -1.53884      -28.8866       28.8866       191.566       220.453    
  13  0.860310     -0.150463      -2.82444       2.82444       191.170       193.994    
  14  0.450659     -0.797045      -14.9618       14.9618       188.629       203.591    
  15  0.867432     -0.142218      -2.66967       2.66967       190.859       193.529    
  16  0.850327     -0.162134      -3.04352       3.04352       189.173       192.217    
  17  0.914193     -0.897130E-01  -1.68406       1.68406       183.048       184.732    
  18  0.908448     -0.960172E-01  -1.80240       1.80240       188.593       190.395    
  19  0.349788E-01  -3.35301      -62.9416       62.9416       192.957       255.898    
  20  0.825048     -0.192314      -3.61006       3.61006       190.338       193.948    
  21  0.628933     -0.463730      -8.70498       8.70498       190.639       199.344    
  22  0.756366     -0.279229      -5.24159       5.24159       189.965       195.207    
  23  0.545707     -0.605674      -11.3695       11.3695       189.338       200.707    
  24  0.653619     -0.425231      -7.98229       7.98229       196.339       204.321    
  25  0.781643     -0.246357      -4.62452       4.62452       183.049       187.673    
  26  0.444411     -0.811005      -15.2239       15.2239       201.825       217.049    
  27  0.223111      -1.50008      -28.1591       28.1591       184.949       213.108    
  28  0.143901      -1.93863      -36.3913       36.3913       196.014       232.405    
  29  0.419282E-01  -3.17180      -59.5399       59.5399       196.829       256.368    
  30  0.407367     -0.898040      -16.8577       16.8577       188.461       205.318    
  31  0.722138     -0.325538      -6.11089       6.11089       194.775       200.886    
  32  0.290143      -1.23738      -23.2277       23.2277       194.632       217.860    
  33  0.236931E-01  -3.74257      -70.2542       70.2542       206.028       276.282    
  34  0.198981      -1.61454      -30.3077       30.3077       187.830       218.138    
  35  0.765966     -0.266617      -5.00484       5.00484       200.370       205.375    
  36  0.522733     -0.648684      -12.1769       12.1769       182.376       194.553    
  37  0.297579E-01  -3.51466      -65.9760       65.9760       184.656       250.632    
  38  0.175475      -1.74026      -32.6675       32.6675       194.808       227.476    
  39  0.311931      -1.16497      -21.8684       21.8684       201.853       223.721    
  40  0.310920      -1.16822      -21.9294       21.9294       193.963       215.892    
  41  0.122272      -2.10150      -39.4487       39.4487       186.996       226.444    
  42  0.949359     -0.519686E-01 -0.975536      0.975536       190.528       191.504    
  43  0.500750     -0.691648      -12.9834       12.9834       202.842       215.825    
  44  0.729401E-01  -2.61812      -49.1464       49.1464       191.774       240.921    
  45  0.952528     -0.486360E-01 -0.912978      0.912978       196.531       197.444    
  46  0.718842     -0.330114      -6.19679       6.19679       197.890       204.087    
  47  0.529396     -0.636019      -11.9391       11.9391       212.216       224.155    
  48  0.314661      -1.15626      -21.7049       21.7049       196.510       218.215    
  49  0.947465     -0.539649E-01  -1.01301       1.01301       202.861       203.874    
  50  0.613869     -0.487974      -9.16008       9.16008       214.200       223.360    
  51  0.303056      -1.19384      -22.4103       22.4103       190.408       212.818    
  52  0.749186     -0.288769      -5.42066       5.42066       194.947       200.368    
  53  0.671119E-01  -2.70139      -50.7096       50.7096       205.251       255.961    
  54  0.545553E-02  -5.21113      -97.8214       97.8214       188.244       286.065    
  55  0.866985     -0.142734      -2.67935       2.67935       187.014       189.694    
  56  0.622088     -0.474673      -8.91041       8.91041       222.327       231.238    
  57  0.471050     -0.752790      -14.1311       14.1311       210.105       224.236    
  58  0.433456     -0.835964      -15.6924       15.6924       220.149       235.842    
  59  0.946573     -0.549070E-01  -1.03069       1.03069       192.862       193.892    
  60  0.795665     -0.228577      -4.29077       4.29077       181.591       185.881    
  61  0.536872E-01  -2.92458      -54.8992       54.8992       190.440       245.339    
  62  0.761403     -0.272592      -5.11701       5.11701       187.385       192.502    
  63  0.615271     -0.485692      -9.11724       9.11724       182.286       191.404    
  64  0.585500     -0.535288      -10.0482       10.0482       221.702       231.750    
  65  0.649114     -0.432147      -8.11212       8.11212       184.342       192.454    
  66  0.550765     -0.596448      -11.1963       11.1963       209.714       220.910    
  67  0.495492     -0.702204      -13.1815       13.1815       188.759       201.940    
  68  0.303565      -1.19216      -22.3788       22.3788       212.336       234.714    
  69  0.645152     -0.438270      -8.22705       8.22705       210.137       218.364    
  70  0.582875     -0.539782      -10.1326       10.1326       208.927       219.060    
  71  0.720704     -0.327527      -6.14823       6.14823       188.172       194.320    
  72  0.129533      -2.04382      -38.3658       38.3658       209.894       248.260    
  73  0.998938     -0.106248E-02 -0.199445E-01  0.199445E-01   194.390       194.410    
loop,thermsimp(1:2)       20   21.8729       19.0542    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    269        200.03          0.86          1.12         23.40          0.36          0.05         25.79
Just calling func    0   0         25.79


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    200.03
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    18.7717               289
loop is:       20
neval is:      268
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       20      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    75.0866      0.500000    
T0,tstep,tfreq (these do not change):             72
current SAtemp,tstepnext are:    18.7717               289
loop is:       21
neval is:      268


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      289
neval,tstepnext:      268     289

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.307193      -1.18028      -22.1558       22.1558       182.339       204.494    
   2  0.575213     -0.553015      -10.3810       10.3810       182.391       192.772    
   3  0.632244     -0.458480      -8.60643       8.60643       183.048       191.655    
   4  0.819203     -0.199424      -3.74351       3.74351       181.591       185.334    
   5  0.137693E-02  -6.58790      -123.666       123.666       183.150       306.816    
   6  0.367814      -1.00018      -18.7750       18.7750       183.049       201.824    
   7  0.452636     -0.792666      -14.8797       14.8797       187.014       201.894    
   8  0.278102      -1.27977      -24.0234       24.0234       188.593       212.616    
   9  0.417803     -0.872745      -16.3829       16.3829       182.286       198.669    
  10  0.682140     -0.382521      -7.18055       7.18055       190.528       197.709    
  11  0.204733      -1.58605      -29.7727       29.7727       189.173       218.946    
  12  0.637442     -0.450292      -8.45273       8.45273       184.342       192.794    
  13  0.114518      -2.16702      -40.6786       40.6786       187.385       228.064    
  14  0.724207     -0.322678      -6.05721       6.05721       190.859       196.916    
  15  0.461399     -0.773492      -14.5197       14.5197       192.862       207.381    
  16  0.731739     -0.312332      -5.86298       5.86298       190.338       196.201    
  17  0.773272     -0.257124      -4.82665       4.82665       191.170       195.997    
  18  0.789195     -0.236742      -4.44404       4.44404       188.172       192.616    
  19  0.762001     -0.271807      -5.10226       5.10226       194.390       199.493    
  20  0.933384     -0.689386E-01  -1.29409       1.29409       182.376       183.670    
  21  0.694037     -0.365230      -6.85597       6.85597       189.965       196.821    
  22  0.423570     -0.859038      -16.1256       16.1256       196.531       212.657    
  23  0.272919      -1.29858      -24.3765       24.3765       176.615       200.991    
  24  0.535843     -0.623914      -11.7119       11.7119       190.639       202.351    
  25  0.902288     -0.102822      -1.93013       1.93013       194.947       196.878    
  26  0.479374     -0.735275      -13.8023       13.8023       189.338       203.140    
  27  0.494900E-01  -3.00599      -56.4273       56.4273       194.775       251.202    
  28  0.921867     -0.813539E-01  -1.52715       1.52715       188.759       190.286    
  29  0.132425      -2.02174      -37.9513       37.9513       182.994       220.946    
  30  0.640539     -0.445446      -8.36175       8.36175       188.988       197.350    
  31  0.215363      -1.53543      -28.8226       28.8226       188.629       217.452    
  32  0.437204E-01  -3.12994      -58.7541       58.7541       202.861       261.616    
  33  0.166028      -1.79560      -33.7064       33.7064       197.890       231.597    
  34  0.425825     -0.853727      -16.0259       16.0259       184.702       200.728    
  35  0.810393     -0.210235      -3.94647       3.94647       196.339       200.285    
  36  0.855958     -0.155534      -2.91964       2.91964       189.207       192.126    
  37  0.830452     -0.185786      -3.48750       3.48750       188.461       191.948    
  38  0.658784     -0.417359      -7.83452       7.83452       200.370       208.205    
  39  0.910965     -0.932509E-01  -1.75047       1.75047       191.182       192.932    
  40  0.603480     -0.505043      -9.48048       9.48048       183.173       192.653    
  41  0.702610     -0.352953      -6.62552       6.62552       190.408       197.033    
  42  0.329065      -1.11150      -20.8647       20.8647       181.022       201.886    
  43  0.790497     -0.235094      -4.41310       4.41310       184.949       189.362    
  44  0.641572     -0.443834      -8.33149       8.33149       202.842       211.173    
  45  0.650683     -0.429733      -8.06681       8.06681       193.963       202.030    
  46  0.194049E-02  -6.24481      -117.225       117.225       201.825       319.050    
  47  0.662053     -0.412409      -7.74161       7.74161       194.632       202.374    
  48  0.294846      -1.22130      -22.9258       22.9258       187.830       210.756    
  49  0.709874     -0.342668      -6.43245       6.43245       196.510       202.942    
  50  0.700314     -0.356226      -6.68695       6.68695       210.137       216.824    
  51  0.639811E-01  -2.74917      -51.6064       51.6064       208.927       260.533    
  52  0.251451      -1.38051      -25.9144       25.9144       191.566       217.481    
  53  0.828691     -0.187907      -3.52733       3.52733       209.714       213.241    
  54  0.962710     -0.380034E-01 -0.713387      0.713387       214.200       214.914    
  55  0.429583     -0.844940      -15.8609       15.8609       201.853       217.714    
  56  0.871108     -0.137990      -2.59030       2.59030       212.216       214.806    
  57  0.328516      -1.11317      -20.8960       20.8960       210.105       231.001    
  58  0.401423     -0.912741      -17.1336       17.1336       186.996       204.129    
  59  0.671285     -0.398562      -7.48167       7.48167       194.808       202.290    
  60  0.919587     -0.838302E-01  -1.57363       1.57363       222.327       223.901    
  61  0.209634      -1.56239      -29.3287       29.3287       221.702       251.030    
  62  0.894137     -0.111896      -2.10047       2.10047       196.014       198.114    
  63  0.623590     -0.472262      -8.86514       8.86514       212.336       221.201    
  64  0.469722     -0.755615      -14.1841       14.1841       220.149       234.333    
  65  0.927315E-01  -2.37805      -44.6399       44.6399       191.774       236.414    
  66  0.663316     -0.410504      -7.70585       7.70585       190.440       198.146    
  67  0.972420     -0.279677E-01 -0.525000      0.525000       209.894       210.419    
  68  0.594470     -0.520086      -9.76287       9.76287       184.656       194.419    
  69  0.421560     -0.863793      -16.2148       16.2148       192.957       209.172    
  70  0.878821     -0.129174      -2.42481       2.42481       205.251       207.676    
  71  0.231393      -1.46364      -27.4749       27.4749       196.829       224.303    
  72  0.209055      -1.56516      -29.3806       29.3806       206.028       235.409    
  73  0.278482      -1.27840      -23.9977       23.9977       200.026       224.023    
loop,thermsimp(1:2)       21   22.1558       10.3810    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    270        194.87          0.86          1.12         23.48          0.28          0.05         25.80
Just calling func    0   0         25.79


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    194.87
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    18.7717               289
loop is:       21
neval is:      269
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       21      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    75.0866      0.500000    
T0,tstep,tfreq (these do not change):             72
current SAtemp,tstepnext are:    18.7717               289
loop is:       22
neval is:      269


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      289
neval,tstepnext:      269     289

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.838898     -0.175666      -3.29754       3.29754       182.376       185.673    
   2  0.801853     -0.220830      -4.14535       4.14535       181.591       185.736    
   3  0.768645     -0.263126      -4.93930       4.93930       184.949       189.888    
   4  0.855557     -0.156003      -2.92843       2.92843       188.759       191.687    
   5  0.845591     -0.167720      -3.14838       3.14838       183.048       186.197    
   6  0.350050      -1.04968      -19.7042       19.7042       188.461       208.165    
   7  0.927608     -0.751463E-01  -1.41062       1.41062       189.207       190.617    
   8  0.655345E-01  -2.72518      -51.1561       51.1561       188.172       239.328    
   9  0.355481      -1.03428      -19.4152       19.4152       183.173       202.588    
  10  0.728523     -0.316737      -5.94567       5.94567       182.391       188.337    
  11  0.573220     -0.556486      -10.4462       10.4462       184.342       194.788    
  12  0.112478      -2.18499      -41.0160       41.0160       191.182       232.197    
  13  0.338739      -1.08253      -20.3208       20.3208       184.656       204.977    
  14  0.239648      -1.42858      -26.8169       26.8169       191.170       217.987    
  15  0.918959     -0.845134E-01  -1.58646       1.58646       190.338       191.925    
  16  0.283771      -1.25959      -23.6445       23.6445       189.965       213.610    
  17  0.414404     -0.880913      -16.5362       16.5362       194.947       211.484    
  18  0.716403     -0.333512      -6.26058       6.26058       190.859       197.120    
  19  0.317726      -1.14657      -21.5230       21.5230       190.408       211.931    
  20  0.339005      -1.08174      -20.3061       20.3061       188.988       209.294    
  21  0.163059      -1.81364      -34.0451       34.0451       190.528       224.573    
  22  0.477081     -0.740069      -13.8923       13.8923       196.014       209.906    
  23  0.105851      -2.24573      -42.1560       42.1560       190.440       232.596    
  24  0.840431     -0.173840      -3.26326       3.26326       182.286       185.550    
  25  0.235315      -1.44683      -27.1594       27.1594       194.390       221.550    
  26  0.865464     -0.144489      -2.71230       2.71230       196.339       199.051    
  27  0.909462     -0.949026E-01  -1.78148       1.78148       184.702       186.484    
  28  0.152105E-01  -4.18577      -78.5738       78.5738       176.615       255.189    
  29  0.962485     -0.382371E-01 -0.717774      0.717774       183.049       183.766    
  30  0.259410      -1.34934      -25.3294       25.3294       181.022       206.351    
  31  0.364880      -1.00819      -18.9253       18.9253       187.014       205.940    
  32  0.467235     -0.760923      -14.2838       14.2838       193.963       208.247    
  33  0.844908     -0.168527      -3.16354       3.16354       194.808       197.972    
  34  0.188232      -1.67008      -31.3502       31.3502       190.639       221.989    
  35  0.496585     -0.700000      -13.1402       13.1402       194.632       207.772    
  36  0.410505     -0.890367      -16.7137       16.7137       196.510       213.224    
  37  0.533875     -0.627594      -11.7810       11.7810       189.338       201.119    
  38  0.610668     -0.493202      -9.25821       9.25821       186.996       196.254    
  39  0.241933      -1.41910      -26.6388       26.6388       182.339       208.977    
  40  0.642629     -0.442188      -8.30059       8.30059       192.862       201.162    
  41  0.775072     -0.254799      -4.78300       4.78300       205.251       210.034    
  42  0.345343      -1.06322      -19.9583       19.9583       200.370       220.329    
  43  0.844097     -0.169488      -3.18157       3.18157       192.957       196.138    
  44  0.426886     -0.851239      -15.9792       15.9792       209.894       225.873    
  45  0.594109     -0.520693      -9.77427       9.77427       187.830       197.605    
  46  0.489527     -0.714316      -13.4089       13.4089       202.842       216.251    
  47  0.313882      -1.15874      -21.7515       21.7515       188.593       210.344    
  48  0.687066     -0.375325      -7.04548       7.04548       196.531       203.576    
  49  0.394505     -0.930124      -17.4600       17.4600       209.714       227.174    
  50  0.971200     -0.292233E-01 -0.548569      0.548569       212.216       212.764    
  51  0.916939     -0.867145E-01  -1.62777       1.62777       214.200       215.828    
  52  0.968457     -0.320511E-01 -0.601653      0.601653       210.137       210.739    
  53  0.437414     -0.826876      -15.5218       15.5218       188.629       204.151    
  54  0.647516     -0.434611      -8.15838       8.15838       191.566       199.724    
  55  0.181293      -1.70764      -32.0552       32.0552       201.853       233.908    
  56  0.836714     -0.178273      -3.34647       3.34647       189.173       192.520    
  57  0.940459     -0.613876E-01  -1.15235       1.15235       182.994       184.147    
  58  0.141896      -1.95266      -36.6546       36.6546       212.336       248.990    
  59  0.111323      -2.19532      -41.2098       41.2098       222.327       263.537    
  60  0.721494E-01  -2.62902      -49.3510       49.3510       200.026       249.377    
  61  0.618358     -0.480687      -9.02330       9.02330       196.829       205.852    
  62  0.825766     -0.191444      -3.59372       3.59372       187.385       190.979    
  63  0.438611     -0.824143      -15.4705       15.4705       210.105       225.576    
  64  0.158533      -1.84179      -34.5734       34.5734       197.890       232.464    
  65  0.750786     -0.286635      -5.38061       5.38061       220.149       225.530    
  66  0.936921     -0.651566E-01  -1.22310       1.22310       206.028       207.251    
  67  0.652715     -0.426615      -8.00828       8.00828       191.774       199.782    
  68  0.471604     -0.751616      -14.1091       14.1091       221.702       235.811    
  69  0.883538     -0.123821      -2.32432       2.32432       194.775       197.099    
  70  0.267870      -1.31725      -24.7270       24.7270       208.927       233.654    
  71  0.662224     -0.412151      -7.73676       7.73676       202.861       210.598    
  72  0.652465     -0.426998      -8.01546       8.01546       183.150       191.166    
  73  0.261718      -1.34049      -25.1631       25.1631       194.866       220.029    
loop,thermsimp(1:2)       22   3.29754       4.14535    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    271        184.67          0.86          1.12         23.36          0.38          0.06         25.77
Just calling func    0   0         25.77


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    272        207.49          0.86          1.12         23.52          0.26          0.05         25.82
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    184.67
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    18.7717               289
loop is:       22
neval is:      271
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       22      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    75.0866      0.500000    
T0,tstep,tfreq (these do not change):             72
current SAtemp,tstepnext are:    18.7717               289
loop is:       23
neval is:      271


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      289
neval,tstepnext:      271     289

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.848355     -0.164456      -3.08711       3.08711       183.049       186.136    
   2  0.848474     -0.164316      -3.08448       3.08448       182.994       186.079    
   3  0.146795      -1.91872      -36.0175       36.0175       182.286       218.304    
   4  0.398624     -0.919738      -17.2650       17.2650       182.376       199.641    
   5  0.888093     -0.118679      -2.22779       2.22779       181.591       183.818    
   6  0.475009     -0.744421      -13.9740       13.9740       183.048       197.022    
   7  0.120824      -2.11342      -39.6724       39.6724       184.702       224.375    
   8  0.270052      -1.30914      -24.5747       24.5747       182.391       206.966    
   9  0.201748E-01  -3.90332      -73.2718       73.2718       184.949       258.220    
  10  0.999386     -0.614559E-03 -0.115363E-01  0.115363E-01   189.207       189.218    
  11  0.212655      -1.54808      -29.0601       29.0601       187.385       216.445    
  12  0.197911      -1.61994      -30.4089       30.4089       183.150       213.559    
  13  0.786394     -0.240297      -4.51078       4.51078       188.759       193.270    
  14  0.781263     -0.246844      -4.63367       4.63367       190.338       194.972    
  15  0.788011     -0.238244      -4.47223       4.47223       189.173       193.645    
  16  0.956387     -0.445927E-01 -0.837078      0.837078       184.342       185.179    
  17  0.717415     -0.332100      -6.23407       6.23407       192.957       199.191    
  18  0.808756     -0.212258      -3.98443       3.98443       186.996       190.980    
  19  0.756838     -0.278606      -5.22990       5.22990       194.775       200.005    
  20  0.570684     -0.560919      -10.5294       10.5294       190.859       201.389    
  21  0.946031     -0.554796E-01  -1.04144       1.04144       187.830       188.872    
  22  0.678634E-01  -2.69026      -50.5006       50.5006       194.808       245.309    
  23  0.631502     -0.459654      -8.62846       8.62846       196.339       204.967    
  24  0.114784E-01  -4.46729      -83.8584       83.8584       191.566       275.424    
  25  0.549681     -0.598417      -11.2333       11.2333       191.774       203.007    
  26  0.846433     -0.166725      -3.12970       3.12970       189.338       192.468    
  27  0.441841     -0.816805      -15.3328       15.3328       192.862       208.194    
  28  0.299100      -1.20698      -22.6570       22.6570       183.173       205.830    
  29  0.378130     -0.972517      -18.2558       18.2558       196.531       214.787    
  30  0.830469     -0.185764      -3.48710       3.48710       188.629       192.116    
  31  0.675108     -0.392883      -7.37507       7.37507       184.656       192.031    
  32  0.997619     -0.238377E-02 -0.447472E-01  0.447472E-01   196.829       196.873    
  33  0.897623     -0.108005      -2.02743       2.02743       187.014       189.042    
  34  0.591811E-01  -2.82715      -53.0703       53.0703       181.022       234.092    
  35  0.229825      -1.47044      -27.6025       27.6025       206.028       233.631    
  36  0.654017     -0.424622      -7.97086       7.97086       194.632       202.603    
  37  0.305777      -1.18490      -22.2425       22.2425       188.461       210.703    
  38  0.936135     -0.659954E-01  -1.23884       1.23884       193.963       195.202    
  39  0.698153     -0.359317      -6.74497       6.74497       182.339       189.084    
  40  0.829975     -0.186360      -3.49829       3.49829       188.988       192.486    
  41  0.951351     -0.498721E-01 -0.936181      0.936181       196.014       196.950    
  42  0.883299     -0.124092      -2.32941       2.32941       205.251       207.581    
  43  0.910087     -0.942154E-01  -1.76858       1.76858       188.593       190.361    
  44  0.590840     -0.526210      -9.87783       9.87783       202.861       212.739    
  45  0.146785      -1.91879      -36.0188       36.0188       210.137       246.156    
  46  0.830381E-01  -2.48846      -46.7124       46.7124       194.947       241.660    
  47  0.289482      -1.23966      -23.2705       23.2705       190.408       213.678    
  48  0.594462     -0.520098      -9.76310       9.76310       212.216       221.979    
  49  0.241311      -1.42167      -26.6870       26.6870       196.510       223.197    
  50  0.612368     -0.490422      -9.20603       9.20603       189.965       199.171    
  51  0.952207     -0.489727E-01 -0.919298      0.919298       214.200       215.120    
  52  0.857144     -0.154149      -2.89363       2.89363       202.842       205.736    
  53  0.221746      -1.50622      -28.2743       28.2743       191.170       219.444    
  54  0.874757     -0.133809      -2.51182       2.51182       194.866       197.378    
  55  0.474241     -0.746040      -14.0044       14.0044       200.370       214.375    
  56  0.679995E-01  -2.68826      -50.4630       50.4630       194.390       244.853    
  57  0.276977      -1.28382      -24.0994       24.0994       190.639       214.739    
  58  0.308562      -1.17583      -22.0723       22.0723       190.528       212.601    
  59  0.910099     -0.942023E-01  -1.76833       1.76833       220.149       221.918    
  60  0.189281      -1.66452      -31.2458       31.2458       210.105       241.351    
  61  0.759386     -0.275245      -5.16681       5.16681       209.894       215.061    
  62  0.464823     -0.766099      -14.3810       14.3810       209.714       224.095    
  63  0.428490     -0.847488      -15.9087       15.9087       191.182       207.090    
  64  0.377334     -0.974624      -18.2953       18.2953       197.890       216.186    
  65  0.168846      -1.77877      -33.3905       33.3905       190.440       223.830    
  66  0.816398     -0.202853      -3.80788       3.80788       208.927       212.735    
  67  0.663000     -0.410981      -7.71479       7.71479       201.853       209.567    
  68  0.805080     -0.216814      -4.06996       4.06996       221.702       225.772    
  69  0.767976E-01  -2.56658      -48.1790       48.1790       188.172       236.351    
  70  0.646958     -0.435474      -8.17457       8.17457       212.336       220.510    
  71  0.988002E-01  -2.31466      -43.4499       43.4499       200.026       243.475    
  72  0.310465      -1.16968      -21.9569       21.9569       176.615       198.572    
  73  0.957874     -0.430393E-01 -0.807918      0.807918       184.667       185.475    
loop,thermsimp(1:2)       23   3.08711       3.08448    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    273        217.27          0.86          1.13         23.65          0.17          0.06         25.87
Just calling func    0   0         25.87


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    217.27
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    18.7717               289
loop is:       23
neval is:      272
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       23      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    75.0866      0.500000    
T0,tstep,tfreq (these do not change):             72
current SAtemp,tstepnext are:    18.7717               289
loop is:       24
neval is:      272


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      289
neval,tstepnext:      272     289

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.102026      -2.28253      -42.8469       42.8469       181.591       224.438    
   2  0.372115     -0.988552      -18.5568       18.5568       184.342       202.899    
   3  0.732875     -0.310780      -5.83386       5.83386       184.667       190.501    
   4  0.341646      -1.07398      -20.1604       20.1604       182.994       203.155    
   5  0.406512     -0.900141      -16.8971       16.8971       183.049       199.946    
   6  0.271848      -1.30251      -24.4503       24.4503       187.830       212.281    
   7  0.738418     -0.303245      -5.69240       5.69240       187.014       192.707    
   8  0.903199     -0.101813      -1.91120       1.91120       182.339       184.250    
   9  0.511789     -0.669842      -12.5740       12.5740       189.207       201.781    
  10  0.202674      -1.59616      -29.9625       29.9625       188.593       218.555    
  11  0.325695      -1.12179      -21.0579       21.0579       186.996       208.053    
  12  0.719720     -0.328893      -6.17386       6.17386       184.656       190.830    
  13  0.715609     -0.334622      -6.28140       6.28140       188.629       194.910    
  14  0.973328     -0.270339E-01 -0.507471      0.507471       189.338       189.845    
  15  0.373998     -0.983504      -18.4620       18.4620       188.988       207.450    
  16  0.977965     -0.222815E-01 -0.418261      0.418261       188.759       189.177    
  17  0.105495      -2.24909      -42.2192       42.2192       189.173       231.392    
  18  0.729809     -0.314973      -5.91257       5.91257       190.338       196.251    
  19  0.378008     -0.972839      -18.2618       18.2618       193.963       212.225    
  20  0.678326     -0.388127      -7.28578       7.28578       196.829       204.114    
  21  0.671993     -0.397507      -7.46187       7.46187       196.014       203.476    
  22  0.515926     -0.661792      -12.4229       12.4229       183.048       195.471    
  23  0.363490      -1.01200      -18.9970       18.9970       194.866       213.863    
  24  0.206319      -1.57833      -29.6279       29.6279       176.615       206.243    
  25  0.755157E-01  -2.58341      -48.4950       48.4950       189.965       238.460    
  26  0.413763     -0.882461      -16.5653       16.5653       192.957       209.522    
  27  0.279023      -1.27646      -23.9613       23.9613       182.376       206.337    
  28  0.506422     -0.680385      -12.7720       12.7720       194.775       207.547    
  29  0.643082E-02  -5.04665      -94.7340       94.7340       190.859       285.593    
  30  0.285888E-01  -3.55474      -66.7283       66.7283       194.632       261.360    
  31  0.660419     -0.414880      -7.78799       7.78799       191.774       199.562    
  32  0.739369     -0.301959      -5.66826       5.66826       196.339       202.007    
  33  0.270269      -1.30834      -24.5597       24.5597       202.842       227.402    
  34  0.663889     -0.409640      -7.68962       7.68962       183.173       190.862    
  35  0.898739E-01  -2.40935      -45.2274       45.2274       182.391       227.619    
  36  0.832427     -0.183410      -3.44291       3.44291       191.182       194.624    
  37  0.723106     -0.324200      -6.08577       6.08577       205.251       211.337    
  38  0.986274     -0.138207E-01 -0.259438      0.259438       192.862       193.121    
  39  0.812861     -0.207195      -3.88939       3.88939       201.853       205.742    
  40  0.553236     -0.591971      -11.1123       11.1123       188.461       199.573    
  41  0.693785E-01  -2.66818      -50.0861       50.0861       190.528       240.614    
  42  0.117256      -2.14340      -40.2351       40.2351       208.927       249.162    
  43  0.807809     -0.213430      -4.00643       4.00643       202.861       206.868    
  44  0.900249     -0.105084      -1.97260       1.97260       183.150       185.123    
  45  0.753470     -0.283066      -5.31361       5.31361       190.408       195.721    
  46  0.127159      -2.06232      -38.7131       38.7131       200.370       239.083    
  47  0.535389     -0.624762      -11.7278       11.7278       190.639       202.367    
  48  0.957281     -0.436582E-01 -0.819536      0.819536       196.531       197.351    
  49  0.227700      -1.47973      -27.7769       27.7769       209.894       237.671    
  50  0.636404     -0.451921      -8.48331       8.48331       214.200       222.684    
  51  0.905015     -0.998042E-01  -1.87349       1.87349       197.890       199.764    
  52  0.555191     -0.588444      -11.0461       11.0461       187.385       198.431    
  53  0.687780     -0.374286      -7.02597       7.02597       182.286       189.312    
  54  0.759422E-01  -2.57778      -48.3892       48.3892       191.170       239.559    
  55  0.374598     -0.981902      -18.4319       18.4319       212.336       230.768    
  56  0.399521     -0.917488      -17.2228       17.2228       220.149       237.372    
  57  0.997363     -0.264016E-02 -0.495601E-01  0.495601E-01   212.216       212.265    
  58  0.164658      -1.80389      -33.8619       33.8619       196.510       230.372    
  59  0.697359     -0.360454      -6.76633       6.76633       190.440       197.206    
  60  0.822795     -0.195048      -3.66137       3.66137       209.714       213.375    
  61  0.755086     -0.280923      -5.27339       5.27339       184.702       189.976    
  62  0.912857     -0.911765E-01  -1.71153       1.71153       221.702       223.413    
  63  0.891590     -0.114749      -2.15403       2.15403       206.028       208.182    
  64  0.461859     -0.772496      -14.5010       14.5010       181.022       195.523    
  65  0.695630     -0.362938      -6.81295       6.81295       188.172       194.985    
  66  0.168128      -1.78303      -33.4704       33.4704       210.105       243.576    
  67  0.552556     -0.593201      -11.1354       11.1354       194.947       206.083    
  68  0.450301E-01  -3.10043      -58.2001       58.2001       200.026       258.226    
  69  0.675538     -0.392246      -7.36310       7.36310       194.390       201.753    
  70  0.455839     -0.785615      -14.7473       14.7473       194.808       209.556    
  71  0.700226     -0.356352      -6.68931       6.68931       210.137       216.827    
  72  0.694116     -0.365117      -6.85385       6.85385       184.949       191.802    
  73  0.604722E-01  -2.80557      -52.6652       52.6652       217.272       269.937    
loop,thermsimp(1:2)       24   42.8469       18.5568    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    274        188.02          0.87          1.13         23.68          0.17          0.05         25.89
Just calling func    0   0         25.89


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    275        183.48          0.86          1.13         23.46          0.26          0.05         25.76
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    183.48
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    18.7717               289
loop is:       24
neval is:      274
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       24      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    75.0866      0.500000    
T0,tstep,tfreq (these do not change):             72
current SAtemp,tstepnext are:    18.7717               289
loop is:       25
neval is:      274


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      289
neval,tstepnext:      274     289

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.962782     -0.379284E-01 -0.711979      0.711979       182.339       183.051    
   2  0.355374      -1.03458      -19.4208       19.4208       183.150       202.571    
   3  0.294461      -1.22261      -22.9504       22.9504       188.759       211.709    
   4  0.644538     -0.439222      -8.24492       8.24492       182.286       190.531    
   5  0.741622     -0.298915      -5.61114       5.61114       189.338       194.949    
   6  0.805913E-01  -2.51837      -47.2739       47.2739       184.702       231.976    
   7  0.498180     -0.696794      -13.0800       13.0800       184.667       197.747    
   8  0.771004     -0.260061      -4.88178       4.88178       184.656       189.538    
   9  0.753480     -0.283053      -5.31337       5.31337       183.173       188.486    
  10  0.460525     -0.775387      -14.5553       14.5553       184.949       199.504    
  11  0.918626     -0.848759E-01  -1.59326       1.59326       187.014       188.608    
  12  0.355379      -1.03457      -19.4206       19.4206       192.862       212.282    
  13  0.664646     -0.408501      -7.66824       7.66824       191.182       198.850    
  14  0.328018      -1.11469      -20.9245       20.9245       188.629       209.554    
  15  0.529583     -0.635665      -11.9325       11.9325       188.172       200.105    
  16  0.259823      -1.34775      -25.2996       25.2996       183.048       208.348    
  17  0.463690E-01  -3.07112      -57.6501       57.6501       181.022       238.672    
  18  0.366509      -1.00373      -18.8417       18.8417       190.408       209.250    
  19  0.794534     -0.229999      -4.31747       4.31747       190.338       194.656    
  20  0.669373     -0.401413      -7.53519       7.53519       190.440       197.975    
  21  0.798901     -0.224518      -4.21458       4.21458       196.531       200.746    
  22  0.610403     -0.493636      -9.26637       9.26637       187.385       196.652    
  23  0.267818      -1.31745      -24.7306       24.7306       191.774       216.505    
  24  0.663049     -0.410906      -7.71339       7.71339       188.461       196.174    
  25  0.782871     -0.244788      -4.59507       4.59507       197.890       202.486    
  26  0.706545     -0.347368      -6.52068       6.52068       183.049       189.569    
  27  0.120119      -2.11927      -39.7822       39.7822       194.390       234.173    
  28  0.270575      -1.30721      -24.5384       24.5384       189.207       213.745    
  29  0.505391     -0.682422      -12.8102       12.8102       196.339       209.149    
  30  0.665734     -0.406865      -7.63752       7.63752       190.639       198.277    
  31  0.836788     -0.178185      -3.34483       3.34483       184.342       187.687    
  32  0.866983     -0.142736      -2.67939       2.67939       182.994       185.674    
  33  0.552904     -0.592571      -11.1235       11.1235       196.014       207.137    
  34  0.554153     -0.590314      -11.0812       11.0812       196.829       207.910    
  35  0.592407E-01  -2.82615      -53.0514       53.0514       201.853       254.904    
  36  0.902163     -0.102960      -1.93272       1.93272       194.947       196.880    
  37  0.266638E-01  -3.62445      -68.0369       68.0369       176.615       244.652    
  38  0.897053     -0.108640      -2.03935       2.03935       182.376       184.415    
  39  0.840496     -0.173763      -3.26182       3.26182       202.861       206.123    
  40  0.288358      -1.24355      -23.3435       23.3435       188.988       212.332    
  41  0.835972E-01  -2.48175      -46.5865       46.5865       194.775       241.362    
  42  0.412070     -0.886563      -16.6423       16.6423       186.996       203.638    
  43  0.725010     -0.321570      -6.03640       6.03640       206.028       212.064    
  44  0.316556      -1.15026      -21.5922       21.5922       192.957       214.549    
  45  0.486178     -0.721181      -13.5378       13.5378       194.808       208.346    
  46  0.143341      -1.94253      -36.4645       36.4645       205.251       241.716    
  47  0.956913     -0.440430E-01 -0.826760      0.826760       193.963       194.790    
  48  0.362697      -1.01419      -19.0380       19.0380       212.216       231.254    
  49  0.951746     -0.494572E-01 -0.928394      0.928394       187.830       188.759    
  50  0.511140     -0.671112      -12.5979       12.5979       209.714       222.311    
  51  0.364891E-01  -3.31074      -62.1481       62.1481       194.866       257.014    
  52  0.377076     -0.975308      -18.3081       18.3081       210.137       228.445    
  53  0.670030E-01  -2.70302      -50.7401       50.7401       188.593       239.333    
  54  0.448832     -0.801107      -15.0381       15.0381       214.200       229.238    
  55  0.252392      -1.37677      -25.8443       25.8443       221.702       247.546    
  56  0.910592     -0.936608E-01  -1.75817       1.75817       181.591       183.349    
  57  0.801917     -0.220751      -4.14385       4.14385       202.842       206.986    
  58  0.473432     -0.747746      -14.0364       14.0364       182.391       196.428    
  59  0.431618     -0.840214      -15.7722       15.7722       196.510       212.282    
  60  0.886774     -0.120166      -2.25571       2.25571       212.336       214.591    
  61  0.880132     -0.127683      -2.39683       2.39683       189.173       191.570    
  62  0.962190     -0.385439E-01 -0.723532      0.723532       220.149       220.873    
  63  0.618144     -0.481034      -9.02980       9.02980       209.894       218.924    
  64  0.169887      -1.77262      -33.2751       33.2751       189.965       223.240    
  65  0.384484E-01  -3.25844      -61.1663       61.1663       200.370       261.537    
  66  0.178067      -1.72560      -32.3923       32.3923       191.170       223.562    
  67  0.255365      -1.36506      -25.6245       25.6245       190.528       216.153    
  68  0.476812     -0.740633      -13.9029       13.9029       210.105       224.008    
  69  0.642499     -0.442391      -8.30441       8.30441       208.927       217.231    
  70  0.178007      -1.72593      -32.3986       32.3986       200.026       232.424    
  71  0.622345     -0.474260      -8.90265       8.90265       194.632       203.535    
  72  0.712002     -0.339675      -6.37626       6.37626       217.272       223.648    
  73  0.125902      -2.07225      -38.8995       38.8995       183.479       222.378    
loop,thermsimp(1:2)       25  0.711979       19.4208    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    276        236.20          0.86          1.12         23.38          0.33          0.05         25.75
Just calling func    0   0         25.75


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    236.20
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    18.7717               289
loop is:       25
neval is:      275
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       25      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    75.0866      0.500000    
T0,tstep,tfreq (these do not change):             72
current SAtemp,tstepnext are:    18.7717               289
loop is:       26
neval is:      275


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      289
neval,tstepnext:      275     289

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.987524     -0.125549E-01 -0.235676      0.235676       182.339       182.574    
   2  0.516099     -0.661457      -12.4166       12.4166       181.591       194.007    
   3  0.202206      -1.59847      -30.0059       30.0059       182.376       212.382    
   4  0.240260      -1.42603      -26.7690       26.7690       182.994       209.763    
   5  0.717263E-01  -2.63490      -49.4614       49.4614       184.342       233.803    
   6  0.395382     -0.927902      -17.4183       17.4183       183.173       200.591    
   7  0.494348     -0.704516      -13.2249       13.2249       187.014       200.239    
   8  0.970815     -0.296196E-01 -0.556010      0.556010       187.830       188.386    
   9  0.992795     -0.723105E-02 -0.135739      0.135739       184.656       184.792    
  10  0.387320     -0.948503      -17.8050       17.8050       183.049       200.854    
  11  0.586568     -0.533466      -10.0140       10.0140       182.286       192.301    
  12  0.119144      -2.12742      -39.9353       39.9353       189.173       229.109    
  13  0.145144      -1.93003      -36.2298       36.2298       190.338       226.568    
  14  0.767931     -0.264056      -4.95676       4.95676       193.963       198.920    
  15  0.415014     -0.879442      -16.5086       16.5086       189.338       205.846    
  16  0.994477     -0.553801E-02 -0.103958      0.103958       188.461       188.565    
  17  0.757243     -0.278071      -5.21986       5.21986       182.391       187.611    
  18  0.669290     -0.401537      -7.53752       7.53752       187.385       194.923    
  19  0.112026      -2.18903      -41.0916       41.0916       194.947       236.039    
  20  0.434244     -0.834148      -15.6583       15.6583       184.667       200.325    
  21  0.491828     -0.709627      -13.3209       13.3209       190.440       203.761    
  22  0.517535     -0.658677      -12.3645       12.3645       190.639       203.004    
  23  0.411147     -0.888804      -16.6843       16.6843       191.182       207.866    
  24  0.250164      -1.38564      -26.0107       26.0107       184.949       210.959    
  25  0.109742E-01  -4.51221      -84.7017       84.7017       188.172       272.874    
  26  0.559459     -0.580786      -10.9023       10.9023       196.531       207.433    
  27  0.289677      -1.23899      -23.2579       23.2579       197.890       221.148    
  28  0.835809     -0.179356      -3.36680       3.36680       183.150       186.517    
  29  0.236182      -1.44315      -27.0903       27.0903       194.632       221.722    
  30  0.700988     -0.355264      -6.66890       6.66890       186.996       193.664    
  31  0.886914     -0.120007      -2.25274       2.25274       202.861       205.114    
  32  0.182911      -1.69875      -31.8884       31.8884       202.842       234.730    
  33  0.693089     -0.366597      -6.88163       6.88163       196.014       202.895    
  34  0.108523      -2.22079      -41.6879       41.6879       196.829       238.516    
  35  0.141600      -1.95475      -36.6938       36.6938       194.808       231.502    
  36  0.168348E-01  -4.08431      -76.6692       76.6692       183.048       259.718    
  37  0.419419E-01  -3.17147      -59.5337       59.5337       196.339       255.873    
  38  0.244896      -1.40692      -26.4103       26.4103       190.408       216.818    
  39  0.360662      -1.01981      -19.1436       19.1436       188.629       207.773    
  40  0.927013     -0.757879E-01  -1.42266       1.42266       188.759       190.182    
  41  0.869067     -0.140335      -2.63432       2.63432       206.028       208.662    
  42  0.827083     -0.189851      -3.56381       3.56381       192.862       196.425    
  43  0.928403     -0.742893E-01  -1.39453       1.39453       196.510       197.905    
  44  0.513193     -0.667103      -12.5226       12.5226       188.988       201.511    
  45  0.809080     -0.211858      -3.97692       3.97692       189.207       193.184    
  46  0.341224E-02  -5.68039      -106.630       106.630       192.957       299.587    
  47  0.734431     -0.308659      -5.79404       5.79404       212.336       218.130    
  48  0.688454     -0.373307      -7.00760       7.00760       190.528       197.536    
  49  0.990614     -0.943067E-02 -0.177029      0.177029       191.774       191.951    
  50  0.143408      -1.94206      -36.4557       36.4557       208.927       245.383    
  51  0.868596     -0.140878      -2.64451       2.64451       209.894       212.539    
  52  0.244103      -1.41016      -26.4711       26.4711       220.149       246.620    
  53  0.207986      -1.57029      -29.4768       29.4768       209.714       239.190    
  54  0.426578E-01  -3.15455      -59.2160       59.2160       183.479       242.695    
  55  0.111938      -2.18981      -41.1064       41.1064       189.965       231.071    
  56  0.304345      -1.18959      -22.3306       22.3306       191.170       213.501    
  57  0.911041     -0.931671E-01  -1.74890       1.74890       217.272       219.021    
  58  0.144299      -1.93587      -36.3394       36.3394       210.105       246.445    
  59  0.306010      -1.18414      -22.2282       22.2282       210.137       232.365    
  60  0.633032     -0.457234      -8.58304       8.58304       214.200       222.783    
  61  0.737469E-02  -4.90970      -92.1632       92.1632       212.216       304.379    
  62  0.794623     -0.229887      -4.31536       4.31536       184.702       189.017    
  63  0.200033      -1.60927      -30.2087       30.2087       200.026       230.234    
  64  0.543825     -0.609128      -11.4343       11.4343       194.390       205.825    
  65  0.719260     -0.329532      -6.18586       6.18586       181.022       187.208    
  66  0.200311      -1.60788      -30.1826       30.1826       188.593       218.775    
  67  0.778326     -0.250609      -4.70435       4.70435       194.775       199.480    
  68  0.932167     -0.702437E-01  -1.31859       1.31859       205.251       206.570    
  69  0.188590      -1.66818      -31.3145       31.3145       176.615       207.929    
  70  0.722923     -0.324453      -6.09051       6.09051       221.702       227.792    
  71  0.779142     -0.249562      -4.68469       4.68469       201.853       206.537    
  72  0.253373      -1.37289      -25.7714       25.7714       194.866       220.637    
  73  0.410592E-01  -3.19274      -59.9330       59.9330       236.198       296.131    
loop,thermsimp(1:2)       26  0.235676       12.4166    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    277        188.08          0.86          1.12         23.49          0.25          0.05         25.78
Just calling func    0   0         25.78


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    278        219.88          0.87          1.12         23.41          0.33          0.05         25.79
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    188.08
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    18.7717               289
loop is:       26
neval is:      277
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       26      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    75.0866      0.500000    
T0,tstep,tfreq (these do not change):             72
current SAtemp,tstepnext are:    18.7717               289
loop is:       27
neval is:      277


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      289
neval,tstepnext:      277     289

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.199609      -1.61140      -30.2486       30.2486       182.339       212.587    
   2  0.983274     -0.168677E-01 -0.316634      0.316634       184.656       184.972    
   3  0.569108     -0.563685      -10.5813       10.5813       183.150       193.731    
   4  0.411179     -0.888728      -16.6829       16.6829       181.022       197.705    
   5  0.889241     -0.117387      -2.20354       2.20354       182.391       184.595    
   6  0.109537      -2.21149      -41.5134       41.5134       187.830       229.344    
   7  0.658027     -0.418509      -7.85611       7.85611       188.461       196.317    
   8  0.427534     -0.849722      -15.9507       15.9507       184.702       200.653    
   9  0.277803      -1.28084      -24.0435       24.0435       188.759       212.802    
  10  0.568421     -0.564892      -10.6040       10.6040       191.774       202.378    
  11  0.368489     -0.998346      -18.7406       18.7406       182.286       201.027    
  12  0.100945E-01  -4.59576      -86.2701       86.2701       189.207       275.477    
  13  0.811445     -0.208939      -3.92212       3.92212       186.996       190.918    
  14  0.135138      -2.00146      -37.5707       37.5707       181.591       219.161    
  15  0.600340     -0.510258      -9.57839       9.57839       187.385       196.964    
  16  0.537538     -0.620755      -11.6526       11.6526       192.862       204.514    
  17  0.923261     -0.798434E-01  -1.49879       1.49879       190.528       192.027    
  18  0.296505      -1.21569      -22.8206       22.8206       196.510       219.331    
  19  0.975666     -0.246348E-01 -0.462436      0.462436       193.963       194.425    
  20  0.102971      -2.27331      -42.6738       42.6738       194.775       237.449    
  21  0.110137      -2.20603      -41.4109       41.4109       187.014       228.425    
  22  0.874539     -0.134058      -2.51649       2.51649       184.667       187.183    
  23  0.887507     -0.119339      -2.24020       2.24020       183.173       185.413    
  24  0.811767     -0.208543      -3.91469       3.91469       183.049       186.963    
  25  0.304283      -1.18980      -22.3344       22.3344       188.988       211.323    
  26  0.304144      -1.19025      -22.3430       22.3430       196.014       218.357    
  27  0.854538     -0.157194      -2.95079       2.95079       190.639       193.590    
  28  0.543001     -0.610645      -11.4628       11.4628       190.440       201.903    
  29  0.808766     -0.212246      -3.98421       3.98421       202.861       206.846    
  30  0.286176      -1.25115      -23.4861       23.4861       194.390       217.876    
  31  0.328161      -1.11425      -20.9163       20.9163       189.338       210.254    
  32  0.563264     -0.574006      -10.7750       10.7750       201.853       212.628    
  33  0.180895      -1.70984      -32.0965       32.0965       205.251       237.348    
  34  0.977796     -0.224538E-01 -0.421494      0.421494       196.531       196.953    
  35  0.650784     -0.429577      -8.06387       8.06387       188.629       196.693    
  36  0.350586      -1.04815      -19.6755       19.6755       191.182       210.857    
  37  0.852996E-01  -2.46159      -46.2080       46.2080       176.615       222.823    
  38  0.363921      -1.01082      -18.9747       18.9747       206.028       225.003    
  39  0.715496E-01  -2.63737      -49.5077       49.5077       182.994       232.502    
  40  0.540542     -0.615184      -11.5480       11.5480       184.949       196.497    
  41  0.458744E-02  -5.38443      -101.075       101.075       182.376       283.450    
  42  0.684509     -0.379054      -7.11546       7.11546       209.894       217.010    
  43  0.827193     -0.189717      -3.56131       3.56131       191.170       194.731    
  44  0.430712     -0.842315      -15.8117       15.8117       190.408       206.219    
  45  0.925073     -0.778822E-01  -1.46198       1.46198       212.336       213.798    
  46  0.139567      -1.96921      -36.9654       36.9654       188.593       225.558    
  47  0.905138     -0.996680E-01  -1.87093       1.87093       217.272       219.143    
  48  0.230323      -1.46827      -27.5619       27.5619       194.866       222.428    
  49  0.854981     -0.156676      -2.94106       2.94106       197.890       200.832    
  50  0.526676     -0.641170      -12.0358       12.0358       194.632       206.668    
  51  0.425904     -0.853542      -16.0224       16.0224       214.200       230.223    
  52  0.770395     -0.260852      -4.89663       4.89663       190.338       195.235    
  53  0.222399      -1.50328      -28.2191       28.2191       221.702       249.921    
  54  0.849203     -0.163457      -3.06837       3.06837       189.173       192.242    
  55  0.409521     -0.892766      -16.7587       16.7587       200.026       216.784    
  56  0.526161     -0.642147      -12.0542       12.0542       189.965       202.019    
  57  0.705716     -0.348543      -6.54273       6.54273       194.808       201.351    
  58  0.548845E-03  -7.50769      -140.932       140.932       210.137       351.069    
  59  0.498314     -0.696524      -13.0749       13.0749       184.342       197.417    
  60  0.774749     -0.255216      -4.79083       4.79083       202.842       207.633    
  61  0.537402E-01  -2.92359      -54.8807       54.8807       194.947       249.828    
  62  0.708174     -0.345066      -6.47745       6.47745       196.829       203.306    
  63  0.272932      -1.29853      -24.3756       24.3756       209.714       234.089    
  64  0.701294     -0.354828      -6.66070       6.66070       183.479       190.140    
  65  0.309054      -1.17424      -22.0424       22.0424       208.927       230.969    
  66  0.911982     -0.921347E-01  -1.72952       1.72952       210.105       211.835    
  67  0.874613     -0.133974      -2.51492       2.51492       220.149       222.664    
  68  0.317616      -1.14691      -21.5294       21.5294       196.339       217.868    
  69  0.587945     -0.531123      -9.97005       9.97005       183.048       193.018    
  70  0.358507E-02  -5.63098      -105.703       105.703       188.172       293.875    
  71  0.802817     -0.219629      -4.12280       4.12280       236.198       240.321    
  72  0.559815     -0.580150      -10.8904       10.8904       192.957       203.847    
  73  0.303478      -1.19244      -22.3842       22.3842       188.080       210.465    
loop,thermsimp(1:2)       27   30.2486      0.316634    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    279        196.08          0.86          1.12         23.58          0.20          0.05         25.81
Just calling func    0   0         25.81


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    196.08
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    18.7717               289
loop is:       27
neval is:      278
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       27      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    75.0866      0.500000    
T0,tstep,tfreq (these do not change):             72
current SAtemp,tstepnext are:    18.7717               289
loop is:       28
neval is:      278


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      289
neval,tstepnext:      278     289

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.231666      -1.46246      -27.4528       27.4528       182.391       209.844    
   2  0.922423     -0.807516E-01  -1.51584       1.51584       184.656       186.172    
   3  0.556007     -0.586974      -11.0185       11.0185       183.173       194.191    
   4  0.921345     -0.819211E-01  -1.53780       1.53780       183.049       184.586    
   5  0.623358     -0.472635      -8.87214       8.87214       184.667       193.539    
   6  0.967150     -0.334012E-01 -0.626995      0.626995       183.479       184.106    
   7  0.239844      -1.42777      -26.8015       26.8015       186.996       213.797    
   8  0.707370     -0.346201      -6.49877       6.49877       190.528       197.027    
   9  0.375591     -0.979256      -18.3823       18.3823       189.173       207.555    
  10  0.164915      -1.80233      -33.8326       33.8326       183.048       216.881    
  11  0.634729     -0.454558      -8.53280       8.53280       190.639       199.172    
  12  0.956585     -0.443852E-01 -0.833183      0.833183       183.150       183.983    
  13  0.281051      -1.26922      -23.8253       23.8253       193.963       217.788    
  14  0.332446      -1.10128      -20.6728       20.6728       191.170       211.843    
  15  0.417901     -0.872510      -16.3785       16.3785       190.338       206.717    
  16  0.454459     -0.788647      -14.8042       14.8042       188.461       203.265    
  17  0.163150      -1.81309      -34.0346       34.0346       184.949       218.983    
  18  0.412675     -0.885095      -16.6147       16.6147       188.629       205.244    
  19  0.510076     -0.673195      -12.6370       12.6370       196.531       209.168    
  20  0.159872E-02  -6.43855      -120.862       120.862       187.385       308.248    
  21  0.279094      -1.27620      -23.9565       23.9565       184.342       208.298    
  22  0.229843E-01  -3.77294      -70.8244       70.8244       181.022       251.846    
  23  0.829240E-02  -4.79242      -89.9616       89.9616       184.702       274.664    
  24  0.722732     -0.324717      -6.09548       6.09548       197.890       203.986    
  25  0.399402     -0.917787      -17.2284       17.2284       182.286       199.515    
  26  0.321457      -1.13489      -21.3038       21.3038       194.808       216.112    
  27  0.103147      -2.27160      -42.6416       42.6416       190.440       233.082    
  28  0.488570     -0.716273      -13.4456       13.4456       189.965       203.411    
  29  0.775391     -0.254388      -4.77528       4.77528       191.774       196.549    
  30  0.264831      -1.32866      -24.9412       24.9412       196.829       221.770    
  31  0.291634      -1.23225      -23.1314       23.1314       192.957       216.088    
  32  0.754799E-02  -4.88647      -91.7272       91.7272       192.862       284.589    
  33  0.403715     -0.907047      -17.0268       17.0268       190.408       207.435    
  34  0.794963     -0.229460      -4.30735       4.30735       194.632       198.939    
  35  0.482612E-01  -3.03113      -56.8993       56.8993       202.861       259.761    
  36  0.309506      -1.17278      -22.0150       22.0150       202.842       224.857    
  37  0.265676      -1.32548      -24.8814       24.8814       189.338       214.219    
  38  0.793358     -0.231480      -4.34526       4.34526       188.080       192.426    
  39  0.603192E-01  -2.80811      -52.7128       52.7128       191.182       243.894    
  40  0.516664     -0.660363      -12.3961       12.3961       188.988       201.384    
  41  0.524892E-01  -2.94715      -55.3228       55.3228       210.105       265.428    
  42  0.581500     -0.542144      -10.1769       10.1769       182.339       192.516    
  43  0.403805     -0.906823      -17.0226       17.0226       201.853       218.875    
  44  0.447829     -0.803344      -15.0801       15.0801       188.759       203.839    
  45  0.470604     -0.753737      -14.1489       14.1489       212.336       226.484    
  46  0.479088     -0.735871      -13.8135       13.8135       200.026       213.839    
  47  0.959223     -0.416322E-01 -0.781504      0.781504       209.894       210.676    
  48  0.527403     -0.639789      -12.0099       12.0099       196.339       208.349    
  49  0.731687     -0.312402      -5.86431       5.86431       194.390       200.255    
  50  0.682707     -0.381689      -7.16494       7.16494       196.014       203.179    
  51  0.386616     -0.950322      -17.8391       17.8391       217.272       235.111    
  52  0.120332      -2.11750      -39.7491       39.7491       181.591       221.340    
  53  0.285899      -1.25212      -23.5043       23.5043       196.510       220.014    
  54  0.798593     -0.224904      -4.22182       4.22182       194.866       199.088    
  55  0.305098      -1.18712      -22.2842       22.2842       220.149       242.434    
  56  0.274289      -1.29357      -24.2825       24.2825       176.615       200.897    
  57  0.805459     -0.216343      -4.06112       4.06112       206.028       210.089    
  58  0.665552     -0.407139      -7.64267       7.64267       188.593       196.235    
  59  0.721477     -0.326454      -6.12808       6.12808       187.014       193.142    
  60  0.563306     -0.573931      -10.7736       10.7736       187.830       198.604    
  61  0.253697      -1.37162      -25.7475       25.7475       214.200       239.948    
  62  0.714468     -0.336217      -6.31135       6.31135       208.927       215.238    
  63  0.106618      -2.23850      -42.0204       42.0204       182.994       225.015    
  64  0.116686      -2.14827      -40.3265       40.3265       209.714       250.040    
  65  0.856486     -0.154918      -2.90806       2.90806       205.251       208.160    
  66  0.895996     -0.109820      -2.06150       2.06150       194.775       196.837    
  67  0.112164      -2.18779      -41.0684       41.0684       236.198       277.267    
  68  0.573757     -0.555550      -10.4286       10.4286       194.947       205.376    
  69  0.376044     -0.978049      -18.3596       18.3596       221.702       240.061    
  70  0.779305     -0.249353      -4.68077       4.68077       189.207       193.887    
  71  0.815848E-01  -2.50611      -47.0439       47.0439       182.376       229.420    
  72  0.580028     -0.544678      -10.2245       10.2245       188.172       198.397    
  73  0.653056     -0.426093      -7.99847       7.99847       196.077       204.075    
loop,thermsimp(1:2)       28   27.4528       1.51584    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    280        190.09          0.87          1.12         23.52          0.23          0.05         25.78
Just calling func    0   0         25.78


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    281        197.86          0.86          1.14         23.43          0.29          0.05         25.76
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  280    197.86        1.877     -1.101      1.798     -102.6     0.8007    
                       1.048      1.935     -99.70      3.800     0.6239E-01
                       1.792     -1.517      1.359      0.000     -5.000    
                      -1.247      0.000      0.000      0.000     -1.221    

                      -2.500      8901.      8532.      0.000      0.000    
                     -0.5672     -6.113     -4.351     -7.692      3.076    
                      -14.31     -2.783      707.1      0.000      3360.    

                       8799.      8121.     0.1152E+05 0.1122E+06  1762.    
                       1102.     0.9814E-01-0.6663E-01  0.000    -0.4973    
                     -0.8840E-01-0.1429    -0.1244    -0.2294     0.5874E-02

                      -1.598    -0.5045E-01  0.000    -0.8686E-01 0.3245E-01
                      0.8541E-01 0.8306E-01 0.3237E-02-0.1111     0.1182    
                     -0.6143E-02-0.2802E-01-0.1428    -0.4268      0.000    

                     -0.9205     -1.648     -1.917     -2.894    -0.3575    
                     -0.3718E-01  9.228      9.236    -0.1846E+05 -4.000    
                     -0.6204    -0.7274      9.315      8.377    -0.2260E+05

                      -4.000    -0.2207E-02-0.8007      8.752      9.029    
                     -0.2645E+05 -7.000    -0.6476    -0.7058      9.372    
                       8.403    -0.2636E+05 -7.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    190.09
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    18.7717               289
loop is:       28
neval is:      280
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       28      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    75.0866      0.500000    
T0,tstep,tfreq (these do not change):             72
current SAtemp,tstepnext are:    18.7717               289
loop is:       29
neval is:      280


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      289
neval,tstepnext:      280     289

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.332051      -1.10247      -20.6951       20.6951       183.150       203.845    
   2  0.991191     -0.884791E-02 -0.166090      0.166090       183.479       183.645    
   3  0.752830     -0.283916      -5.32958       5.32958       183.049       188.378    
   4  0.718872     -0.330071      -6.19599       6.19599       184.656       190.852    
   5  0.362244      -1.01544      -19.0615       19.0615       188.080       207.142    
   6  0.993342E-01  -2.30927      -43.3487       43.3487       182.339       225.687    
   7  0.734379     -0.308729      -5.79536       5.79536       187.014       192.810    
   8  0.190509      -1.65806      -31.1244       31.1244       184.667       215.791    
   9  0.113713      -2.17408      -40.8110       40.8110       189.207       230.018    
  10  0.582158     -0.541014      -10.1557       10.1557       183.173       193.329    
  11  0.100405E-01  -4.60113      -86.3708       86.3708       188.593       274.963    
  12  0.614877     -0.486333      -9.12927       9.12927       191.774       200.903    
  13  0.996806     -0.319890E-02 -0.600487E-01  0.600487E-01   194.775       194.835    
  14  0.439871E-01  -3.12386      -58.6400       58.6400       190.528       249.168    
  15  0.610456     -0.493549      -9.26473       9.26473       188.172       197.437    
  16  0.676471     -0.390866      -7.33719       7.33719       187.830       195.168    
  17  0.263829      -1.33246      -25.0124       25.0124       194.632       219.645    
  18  0.761962     -0.271858      -5.10322       5.10322       194.866       199.969    
  19  0.405295     -0.903140      -16.9534       16.9534       190.639       207.593    
  20  0.184680      -1.68913      -31.7078       31.7078       182.286       213.994    
  21  0.695434     -0.363219      -6.81823       6.81823       194.390       201.209    
  22  0.597154     -0.515580      -9.67829       9.67829       176.615       186.293    
  23  0.254276      -1.36933      -25.7046       25.7046       188.988       214.693    
  24  0.777974     -0.251062      -4.71286       4.71286       196.014       200.727    
  25  0.597236     -0.515443      -9.67572       9.67572       188.461       198.136    
  26  0.658168     -0.418295      -7.85209       7.85209       189.965       197.817    
  27  0.917953     -0.856086E-01  -1.60701       1.60701       188.759       190.366    
  28  0.167567      -1.78637      -33.5332       33.5332       197.890       231.424    
  29  0.867739E-02  -4.74703      -89.1097       89.1097       196.077       285.186    
  30  0.157469      -1.84853      -34.6999       34.6999       188.629       223.329    
  31  0.947458     -0.539724E-01  -1.01315       1.01315       194.947       195.961    
  32  0.883772     -0.123556      -2.31935       2.31935       190.338       192.658    
  33  0.873100     -0.135705      -2.54740       2.54740       190.408       192.955    
  34  0.138043      -1.98019      -37.1714       37.1714       189.173       226.345    
  35  0.833185     -0.182500      -3.42582       3.42582       205.251       208.677    
  36  0.907894     -0.966275E-01  -1.81386       1.81386       184.342       186.156    
  37  0.858432     -0.152648      -2.86546       2.86546       196.339       199.204    
  38  0.192050      -1.65000      -30.9732       30.9732       196.531       227.504    
  39  0.890666     -0.115786      -2.17349       2.17349       182.391       184.565    
  40  0.389935     -0.941775      -17.6787       17.6787       206.028       223.707    
  41  0.842362     -0.171545      -3.22019       3.22019       209.894       213.114    
  42  0.143912      -1.93855      -36.3898       36.3898       191.170       227.560    
  43  0.678545     -0.387804      -7.27973       7.27973       186.996       194.275    
  44  0.621021     -0.476390      -8.94263       8.94263       200.026       208.968    
  45  0.533199     -0.628861      -11.8048       11.8048       189.338       201.143    
  46  0.891703     -0.114623      -2.15166       2.15166       208.927       211.079    
  47  0.675469     -0.392349      -7.36503       7.36503       192.957       200.322    
  48  0.757471     -0.277770      -5.21420       5.21420       194.808       200.023    
  49  0.855441     -0.156139      -2.93098       2.93098       183.048       185.979    
  50  0.737982     -0.303836      -5.70351       5.70351       193.963       199.666    
  51  0.630328     -0.461515      -8.66340       8.66340       201.853       210.516    
  52  0.701612     -0.354375      -6.65221       6.65221       184.949       191.601    
  53  0.161537E-01  -4.12561      -77.4445       77.4445       196.510       273.954    
  54  0.716145     -0.333873      -6.26734       6.26734       181.591       187.858    
  55  0.644842     -0.438751      -8.23608       8.23608       196.829       205.065    
  56  0.465420E-01  -3.06740      -57.5802       57.5802       202.842       260.422    
  57  0.644178     -0.439780      -8.25540       8.25540       182.994       191.250    
  58  0.297766      -1.21145      -22.7409       22.7409       212.336       235.076    
  59  0.877956     -0.130159      -2.44330       2.44330       182.376       184.819    
  60  0.373410     -0.985078      -18.4915       18.4915       190.440       208.931    
  61  0.162588      -1.81653      -34.0993       34.0993       217.272       251.371    
  62  0.634599     -0.454761      -8.53662       8.53662       214.200       222.737    
  63  0.762468     -0.271195      -5.09077       5.09077       221.702       226.792    
  64  0.237905      -1.43588      -26.9539       26.9539       220.149       247.103    
  65  0.473101     -0.748446      -14.0496       14.0496       191.182       205.231    
  66  0.156066      -1.85747      -34.8679       34.8679       209.714       244.581    
  67  0.992592     -0.743581E-02 -0.139583      0.139583       181.022       181.161    
  68  0.568078     -0.565496      -10.6153       10.6153       202.861       213.477    
  69  0.918090     -0.854598E-01  -1.60422       1.60422       210.105       211.709    
  70  0.561720     -0.576753      -10.8266       10.8266       184.702       195.529    
  71  0.649692E-01  -2.73384      -51.3187       51.3187       236.198       287.517    
  72  0.757920     -0.277177      -5.20308       5.20308       192.862       198.065    
  73  0.182763      -1.69956      -31.9036       31.9036       190.085       221.989    
loop,thermsimp(1:2)       29   20.6951      0.166090    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    282        198.63          0.86          1.11         23.53          0.31          0.05         25.87
Just calling func    0   0         25.87


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    283        262.74          0.86          1.10         23.72          0.23          0.05         25.97
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    198.63
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    18.7717               289
loop is:       29
neval is:      282
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       29      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    75.0866      0.500000    
T0,tstep,tfreq (these do not change):             72
current SAtemp,tstepnext are:    18.7717               289
loop is:       30
neval is:      282


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      289
neval,tstepnext:      282     289

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.157557      -1.84797      -34.6894       34.6894       181.022       215.711    
   2  0.553200     -0.592035      -11.1135       11.1135       183.479       194.592    
   3  0.825049     -0.192313      -3.61003       3.61003       182.391       186.001    
   4  0.767336     -0.264830      -4.97130       4.97130       182.376       187.347    
   5  0.966534     -0.340385E-01 -0.638958      0.638958       183.048       183.687    
   6  0.954430     -0.466410E-01 -0.875529      0.875529       184.342       185.217    
   7  0.780674     -0.247598      -4.64782       4.64782       176.615       181.263    
   8  0.312863      -1.16199      -21.8125       21.8125       181.591       203.403    
   9  0.990226     -0.982218E-02 -0.184379      0.184379       183.049       183.233    
  10  0.893872     -0.112193      -2.10604       2.10604       188.759       190.865    
  11  0.322320      -1.13221      -21.2534       21.2534       184.656       205.909    
  12  0.927465     -0.752997E-01  -1.41350       1.41350       182.994       184.408    
  13  0.539466     -0.617176      -11.5854       11.5854       184.949       196.534    
  14  0.461474     -0.773330      -14.5167       14.5167       190.338       204.855    
  15  0.745701     -0.293430      -5.50817       5.50817       187.014       192.522    
  16  0.703580     -0.351573      -6.59961       6.59961       190.408       197.007    
  17  0.917420E-01  -2.38878      -44.8413       44.8413       183.173       228.014    
  18  0.671661     -0.398001      -7.47114       7.47114       186.996       194.467    
  19  0.845179     -0.168207      -3.15752       3.15752       194.775       197.933    
  20  0.283605E-01  -3.56276      -66.8789       66.8789       187.830       254.709    
  21  0.108883E-01  -4.52006      -84.8491       84.8491       184.702       269.551    
  22  0.506006     -0.681208      -12.7874       12.7874       194.947       207.735    
  23  0.353918      -1.03869      -19.4980       19.4980       188.172       207.670    
  24  0.656862     -0.420282      -7.88938       7.88938       189.965       197.854    
  25  0.691560     -0.368806      -6.92309       6.92309       192.862       199.785    
  26  0.445402     -0.808779      -15.1821       15.1821       188.461       203.643    
  27  0.832700     -0.183081      -3.43674       3.43674       196.339       199.776    
  28  0.963063     -0.376360E-01 -0.706491      0.706491       193.963       194.669    
  29  0.422212     -0.862247      -16.1858       16.1858       194.866       211.052    
  30  0.917895     -0.856720E-01  -1.60820       1.60820       194.808       196.417    
  31  0.767210     -0.264994      -4.97438       4.97438       192.957       197.931    
  32  0.360836      -1.01933      -19.1345       19.1345       196.014       215.148    
  33  0.635930     -0.452667      -8.49730       8.49730       191.774       200.271    
  34  0.687292     -0.374995      -7.03928       7.03928       189.338       196.377    
  35  0.833832     -0.181724      -3.41126       3.41126       194.390       197.802    
  36  0.362075      -1.01590      -19.0702       19.0702       183.150       202.220    
  37  0.385764     -0.952530      -17.8806       17.8806       196.829       214.709    
  38  0.752556     -0.284279      -5.33639       5.33639       191.182       196.518    
  39  0.547433     -0.602515      -11.3102       11.3102       188.080       199.391    
  40  0.171004      -1.76607      -33.1520       33.1520       190.639       223.791    
  41  0.159022      -1.83871      -34.5156       34.5156       205.251       239.767    
  42  0.850806     -0.161571      -3.03295       3.03295       190.440       193.473    
  43  0.926075     -0.768001E-01  -1.44167       1.44167       200.026       201.467    
  44  0.584885     -0.536340      -10.0680       10.0680       201.853       211.921    
  45  0.547650     -0.602120      -11.3028       11.3028       208.927       220.230    
  46  0.864296     -0.145840      -2.73766       2.73766       210.105       212.843    
  47  0.384639     -0.955450      -17.9354       17.9354       209.894       227.829    
  48  0.359776      -1.02227      -19.1898       19.1898       202.861       222.051    
  49  0.147032      -1.91711      -35.9873       35.9873       182.286       218.274    
  50  0.649806     -0.431082      -8.09212       8.09212       188.988       197.080    
  51  0.909946     -0.943695E-01  -1.77147       1.77147       184.667       186.438    
  52  0.740699     -0.300161      -5.63452       5.63452       194.632       200.267    
  53  0.959446     -0.413992E-01 -0.777131      0.777131       190.085       190.862    
  54  0.993892     -0.612654E-02 -0.115005      0.115005       214.200       214.315    
  55  0.499875     -0.693397      -13.0162       13.0162       188.629       201.645    
  56  0.716813     -0.332941      -6.24985       6.24985       206.028       212.278    
  57  0.586555     -0.533488      -10.0145       10.0145       182.339       192.353    
  58  0.687999     -0.373968      -7.01999       7.01999       189.173       196.193    
  59  0.238056      -1.43525      -26.9420       26.9420       221.702       248.644    
  60  0.842319     -0.171596      -3.22115       3.22115       196.531       199.752    
  61  0.559244     -0.581169      -10.9095       10.9095       191.170       202.080    
  62  0.596920     -0.515973      -9.68566       9.68566       189.207       198.892    
  63  0.266753      -1.32143      -24.8055       24.8055       197.890       222.696    
  64  0.681727     -0.383126      -7.19190       7.19190       212.336       219.528    
  65  0.401206E-01  -3.21587      -60.3671       60.3671       209.714       270.081    
  66  0.275178      -1.29034      -24.2217       24.2217       220.149       244.371    
  67  0.830963     -0.185171      -3.47596       3.47596       190.528       194.004    
  68  0.802444     -0.220093      -4.13151       4.13151       217.272       221.403    
  69  0.661893E-01  -2.71524      -50.9695       50.9695       202.842       253.811    
  70  0.865761E-01  -2.44673      -45.9292       45.9292       196.510       242.439    
  71  0.778264     -0.250689      -4.70585       4.70585       188.593       193.298    
  72  0.386768     -0.949931      -17.8318       17.8318       196.077       213.908    
  73  0.506835     -0.679569      -12.7566       12.7566       198.628       211.385    
loop,thermsimp(1:2)       30   34.6894       11.1135    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    284        194.53          0.87          1.12         23.66          0.14          0.05         25.84
Just calling func    0   0         25.84


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    194.53
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    18.7717               289
loop is:       30
neval is:      283
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       30      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    75.0866      0.500000    
T0,tstep,tfreq (these do not change):             72
current SAtemp,tstepnext are:    18.7717               289
loop is:       31
neval is:      283


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      289
neval,tstepnext:      283     289

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.277512      -1.28189      -24.0632       24.0632       176.615       200.678    
   2  0.202445      -1.59728      -29.9837       29.9837       183.049       213.032    
   3  0.927152     -0.756373E-01  -1.41984       1.41984       183.048       184.468    
   4  0.403144     -0.908460      -17.0533       17.0533       182.994       200.048    
   5  0.791838     -0.233398      -4.38127       4.38127       184.342       188.723    
   6  0.292576      -1.22903      -23.0709       23.0709       182.391       205.462    
   7  0.135578      -1.99821      -37.5097       37.5097       184.667       222.176    
   8  0.516570     -0.660545      -12.3995       12.3995       182.376       194.775    
   9  0.730579     -0.313918      -5.89276       5.89276       190.085       195.978    
  10  0.508248     -0.676786      -12.7044       12.7044       188.759       201.463    
  11  0.928455     -0.742338E-01  -1.39349       1.39349       182.339       183.732    
  12  0.696477     -0.361721      -6.79009       6.79009       187.014       193.804    
  13  0.465556     -0.764522      -14.3513       14.3513       188.593       202.944    
  14  0.194653      -1.63654      -30.7205       30.7205       190.440       221.160    
  15  0.650312     -0.430303      -8.07750       8.07750       190.528       198.606    
  16  0.555802     -0.587343      -11.0254       11.0254       186.996       198.021    
  17  0.985517     -0.145893E-01 -0.273865      0.273865       183.479       183.753    
  18  0.923066     -0.800544E-01  -1.50275       1.50275       193.963       195.466    
  19  0.658765     -0.417388      -7.83506       7.83506       189.173       197.008    
  20  0.197878      -1.62010      -30.4120       30.4120       189.338       219.750    
  21  0.449673     -0.799236      -15.0030       15.0030       194.808       209.811    
  22  0.208093      -1.56977      -29.4672       29.4672       191.182       220.649    
  23  0.102791      -2.27506      -42.7066       42.7066       184.949       227.655    
  24  0.650538     -0.429955      -8.07097       8.07097       190.408       198.479    
  25  0.223365      -1.49895      -28.1377       28.1377       188.988       217.126    
  26  0.520729     -0.652525      -12.2490       12.2490       194.390       206.639    
  27  0.919707E-01  -2.38629      -44.7945       44.7945       189.965       234.759    
  28  0.788427     -0.237716      -4.46232       4.46232       192.957       197.419    
  29  0.395754     -0.926961      -17.4006       17.4006       194.775       212.176    
  30  0.903388     -0.101603      -1.90726       1.90726       189.207       191.114    
  31  0.569415     -0.563145      -10.5712       10.5712       188.080       198.652    
  32  0.974677     -0.256496E-01 -0.481485      0.481485       196.531       197.012    
  33  0.376411     -0.977073      -18.3413       18.3413       196.339       214.680    
  34  0.309090      -1.17412      -22.0402       22.0402       192.862       214.902    
  35  0.248039      -1.39417      -26.1709       26.1709       194.632       220.803    
  36  0.941329     -0.604621E-01  -1.13497       1.13497       191.774       192.909    
  37  0.131879      -2.02587      -38.0290       38.0290       200.026       238.055    
  38  0.188022      -1.67120      -31.3712       31.3712       188.629       220.000    
  39  0.898649E-01  -2.40945      -45.2293       45.2293       191.170       236.399    
  40  0.853893     -0.157949      -2.96496       2.96496       183.150       186.115    
  41  0.643577     -0.440714      -8.27293       8.27293       181.591       189.864    
  42  0.664391     -0.408885      -7.67545       7.67545       188.461       196.136    
  43  0.825262     -0.192054      -3.60518       3.60518       190.338       193.943    
  44  0.611498     -0.491843      -9.23271       9.23271       184.656       193.889    
  45  0.284000      -1.25878      -23.6294       23.6294       188.172       211.802    
  46  0.108174      -2.22402      -41.7485       41.7485       194.947       236.696    
  47  0.293070      -1.22734      -23.0393       23.0393       194.866       217.905    
  48  0.412045     -0.886623      -16.6434       16.6434       198.628       215.272    
  49  0.464041     -0.767783      -14.4126       14.4126       201.853       216.265    
  50  0.711768     -0.340003      -6.38241       6.38241       206.028       212.410    
  51  0.919970     -0.834138E-01  -1.56582       1.56582       210.105       211.671    
  52  0.551321     -0.595437      -11.1773       11.1773       196.077       207.254    
  53  0.720690E-01  -2.63013      -49.3719       49.3719       214.200       263.572    
  54  0.788823     -0.237213      -4.45288       4.45288       196.829       201.281    
  55  0.339304      -1.08086      -20.2895       20.2895       196.014       216.303    
  56  0.824115     -0.193445      -3.63128       3.63128       181.022       184.653    
  57  0.564535     -0.571754      -10.7328       10.7328       182.286       193.019    
  58  0.608050     -0.497498      -9.33886       9.33886       212.336       221.674    
  59  0.696797     -0.361262      -6.78148       6.78148       208.927       215.708    
  60  0.287274      -1.24732      -23.4142       23.4142       217.272       240.686    
  61  0.302150E-01  -3.49942      -65.6899       65.6899       202.861       268.551    
  62  0.896370     -0.109402      -2.05366       2.05366       197.890       199.944    
  63  0.289059      -1.24112      -23.2979       23.2979       190.639       213.937    
  64  0.476596     -0.741086      -13.9114       13.9114       209.894       223.806    
  65  0.895851E-01  -2.41257      -45.2879       45.2879       183.173       228.461    
  66  0.864694     -0.145380      -2.72902       2.72902       205.251       207.980    
  67  0.222506      -1.50280      -28.2101       28.2101       196.510       224.720    
  68  0.800191     -0.222904      -4.18428       4.18428       220.149       224.334    
  69  0.332930      -1.09982      -20.6455       20.6455       221.702       242.347    
  70  0.616166     -0.484239      -9.08997       9.08997       202.842       211.932    
  71  0.560690E-01  -2.88117      -54.0844       54.0844       187.830       241.915    
  72  0.629756     -0.462422      -8.68043       8.68043       184.702       193.383    
  73  0.847024     -0.166026      -3.11659       3.11659       194.535       197.652    
loop,thermsimp(1:2)       31   24.0632       29.9837    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    285        184.21          0.86          1.12         23.42          0.30          0.06         25.76
Just calling func    0   0         25.76


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    286        218.92          0.86          1.13         23.52          0.22          0.05         25.77
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    184.21
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    18.7717               289
loop is:       31
neval is:      285
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       31      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    75.0866      0.500000    
T0,tstep,tfreq (these do not change):             72
current SAtemp,tstepnext are:    18.7717               289
loop is:       32
neval is:      285


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      289
neval,tstepnext:      285     289

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.701343     -0.354759      -6.65941       6.65941       182.339       188.998    
   2  0.779682     -0.248869      -4.67169       4.67169       183.479       188.151    
   3  0.611645     -0.491604      -9.22822       9.22822       183.048       192.277    
   4  0.380626     -0.965937      -18.1322       18.1322       181.022       199.154    
   5  0.986599     -0.134915E-01 -0.253257      0.253257       183.150       183.403    
   6  0.699021     -0.358075      -6.72165       6.72165       184.342       191.063    
   7  0.981217E-01  -2.32155      -43.5793       43.5793       181.591       225.170    
   8  0.221199      -1.50869      -28.3206       28.3206       189.207       217.527    
   9  0.802460     -0.220073      -4.13114       4.13114       191.774       195.905    
  10  0.623430     -0.472519      -8.86995       8.86995       182.286       191.156    
  11  0.669862     -0.400684      -7.52150       7.52150       184.702       192.224    
  12  0.957999     -0.429090E-01 -0.805473      0.805473       187.014       187.820    
  13  0.569879E-01  -2.86492      -53.7792       53.7792       184.656       238.435    
  14  0.245244      -1.40550      -26.3836       26.3836       190.338       216.722    
  15  0.870123     -0.139121      -2.61153       2.61153       182.376       184.987    
  16  0.429679     -0.844716      -15.8567       15.8567       193.963       209.820    
  17  0.369880     -0.994577      -18.6699       18.6699       190.085       208.755    
  18  0.964882     -0.357490E-01 -0.671068      0.671068       188.461       189.132    
  19  0.625983     -0.468432      -8.79324       8.79324       189.173       197.966    
  20  0.508652     -0.675991      -12.6895       12.6895       196.531       209.220    
  21  0.694697     -0.364279      -6.83812       6.83812       192.957       199.795    
  22  0.817819     -0.201114      -3.77524       3.77524       194.535       198.310    
  23  0.655732     -0.422003      -7.92170       7.92170       186.996       194.917    
  24  0.658757     -0.417401      -7.83530       7.83530       190.408       198.243    
  25  0.325934      -1.12106      -21.0442       21.0442       190.528       211.572    
  26  0.849137     -0.163535      -3.06982       3.06982       188.080       191.150    
  27  0.953435     -0.476843E-01 -0.895113      0.895113       197.890       198.786    
  28  0.435049     -0.832297      -15.6236       15.6236       182.994       198.618    
  29  0.155341E-01  -4.16472      -78.1787       78.1787       176.615       254.794    
  30  0.390095     -0.941364      -17.6710       17.6710       196.829       214.499    
  31  0.400867E-02  -5.51929      -103.606       103.606       188.759       292.365    
  32  0.989750     -0.103025E-01 -0.193395      0.193395       188.593       188.786    
  33  0.194149      -1.63913      -30.7691       30.7691       182.391       213.161    
  34  0.573547     -0.555915      -10.4354       10.4354       194.390       204.826    
  35  0.570216     -0.561740      -10.5448       10.5448       196.077       206.621    
  36  0.802122     -0.220494      -4.13904       4.13904       205.251       209.390    
  37  0.831214E-01  -2.48745      -46.6936       46.6936       194.808       241.502    
  38  0.280368      -1.27165      -23.8710       23.8710       210.105       233.976    
  39  0.568263     -0.565171      -10.6092       10.6092       188.172       198.781    
  40  0.570544     -0.561165      -10.5340       10.5340       202.842       213.376    
  41  0.524202     -0.645877      -12.1242       12.1242       194.775       206.899    
  42  0.625335E-01  -2.77205      -52.0360       52.0360       206.028       258.064    
  43  0.717146     -0.332476      -6.24113       6.24113       183.049       189.290    
  44  0.234175      -1.45169      -27.2506       27.2506       190.639       217.890    
  45  0.366320      -1.00425      -18.8514       18.8514       196.339       215.190    
  46  0.458915     -0.778891      -14.6211       14.6211       192.862       207.483    
  47  0.379536     -0.968806      -18.1861       18.1861       198.628       216.815    
  48  0.854466     -0.157278      -2.95238       2.95238       208.927       211.879    
  49  0.452738E-01  -3.09503      -58.0988       58.0988       201.853       259.951    
  50  0.966525     -0.340477E-01 -0.639132      0.639132       196.014       196.653    
  51  0.400949     -0.913920      -17.1558       17.1558       188.988       206.144    
  52  0.563096     -0.574305      -10.7807       10.7807       194.866       205.647    
  53  0.612298     -0.490536      -9.20817       9.20817       189.338       198.546    
  54  0.395518     -0.927559      -17.4118       17.4118       188.629       206.041    
  55  0.693522     -0.365972      -6.86989       6.86989       191.182       198.051    
  56  0.270894      -1.30603      -24.5163       24.5163       194.632       219.148    
  57  0.885600     -0.121490      -2.28057       2.28057       190.440       192.720    
  58  0.862297     -0.148155      -2.78112       2.78112       212.336       215.117    
  59  0.483017     -0.727702      -13.6602       13.6602       184.667       198.327    
  60  0.594400     -0.520203      -9.76507       9.76507       209.894       219.659    
  61  0.351664      -1.04508      -19.6179       19.6179       220.149       239.767    
  62  0.402505     -0.910048      -17.0831       17.0831       196.510       213.593    
  63  0.272240      -1.30107      -24.4233       24.4233       184.949       209.372    
  64  0.234792      -1.44906      -27.2012       27.2012       183.173       210.374    
  65  0.825709E-01  -2.49410      -46.8183       46.8183       189.965       236.783    
  66  0.636436     -0.451871      -8.48236       8.48236       191.170       199.652    
  67  0.942309     -0.594220E-01  -1.11545       1.11545       194.947       196.063    
  68  0.185829      -1.68293      -31.5913       31.5913       200.026       231.617    
  69  0.518004     -0.657773      -12.3475       12.3475       217.272       229.619    
  70  0.831797     -0.184167      -3.45712       3.45712       187.830       191.288    
  71  0.377117     -0.975199      -18.3061       18.3061       221.702       240.008    
  72  0.484710     -0.724205      -13.5945       13.5945       214.200       227.795    
  73  0.948059     -0.533383E-01  -1.00125       1.00125       184.209       185.210    
loop,thermsimp(1:2)       32   6.65941       4.67169    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    287        207.53          0.86          1.13         23.61          0.14          0.05         25.79
Just calling func    0   0         25.79


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    288        216.57          0.86          1.13         23.55          0.21          0.05         25.81
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    207.53
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    18.7717               289
loop is:       32
neval is:      287
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       32      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    75.0866      0.500000    
T0,tstep,tfreq (these do not change):             72
current SAtemp,tstepnext are:    18.7717               289
loop is:       33
neval is:      287


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      289
neval,tstepnext:      287     289

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.403971     -0.906412      -17.0149       17.0149       183.150       200.165    
   2  0.598662     -0.513057      -9.63094       9.63094       182.376       192.007    
   3  0.165178      -1.80073      -33.8027       33.8027       184.209       218.011    
   4  0.785331     -0.241651      -4.53618       4.53618       187.014       191.550    
   5  0.422061     -0.862604      -16.1925       16.1925       183.479       199.671    
   6  0.343624      -1.06821      -20.0520       20.0520       188.593       208.645    
   7  0.988862     -0.112001E-01 -0.210244      0.210244       182.339       182.549    
   8  0.586093E-01  -2.83686      -53.2526       53.2526       188.461       241.713    
   9  0.324880      -1.12430      -21.1050       21.1050       183.049       204.154    
  10  0.869373     -0.139983      -2.62771       2.62771       184.342       186.969    
  11  0.314362      -1.15721      -21.7227       21.7227       188.080       209.803    
  12  0.635265     -0.453712      -8.51693       8.51693       182.286       190.803    
  13  0.800738     -0.222221      -4.17145       4.17145       187.830       192.002    
  14  0.234515      -1.45024      -27.2233       27.2233       184.702       211.925    
  15  0.818766     -0.199957      -3.75352       3.75352       183.048       186.802    
  16  0.480807     -0.732289      -13.7463       13.7463       190.440       204.186    
  17  0.173083      -1.75398      -32.9252       32.9252       186.996       219.921    
  18  0.544835     -0.607272      -11.3995       11.3995       191.774       203.174    
  19  0.955728     -0.452816E-01 -0.850010      0.850010       194.947       195.797    
  20  0.909631     -0.947157E-01  -1.77797       1.77797       196.014       197.792    
  21  0.538276     -0.619384      -11.6269       11.6269       189.173       200.800    
  22  0.640373     -0.445705      -8.36661       8.36661       191.182       199.548    
  23  0.588429     -0.530300      -9.95460       9.95460       190.408       200.362    
  24  0.954392     -0.466804E-01 -0.876267      0.876267       194.535       195.411    
  25  0.976738     -0.235363E-01 -0.441816      0.441816       184.667       185.108    
  26  0.801897     -0.220775      -4.14431       4.14431       189.338       193.482    
  27  0.679499     -0.386400      -7.25337       7.25337       182.994       190.248    
  28  0.303686      -1.19176      -22.3713       22.3713       188.172       210.544    
  29  0.907562     -0.969936E-01  -1.82073       1.82073       197.890       199.711    
  30  0.117971E-01  -4.43990      -83.3443       83.3443       181.022       264.366    
  31  0.324683      -1.12491      -21.1164       21.1164       191.170       212.286    
  32  0.662106     -0.412329      -7.74011       7.74011       192.957       200.697    
  33  0.334080      -1.09637      -20.5808       20.5808       194.390       214.971    
  34  0.307577      -1.17903      -22.1323       22.1323       194.866       216.998    
  35  0.539029     -0.617986      -11.6006       11.6006       188.629       200.230    
  36  0.822737     -0.195119      -3.66271       3.66271       188.988       192.651    
  37  0.973480     -0.268776E-01 -0.504538      0.504538       196.077       196.581    
  38  0.918970     -0.845018E-01  -1.58624       1.58624       194.775       196.361    
  39  0.203072      -1.59419      -29.9257       29.9257       192.862       222.787    
  40  0.467655     -0.760024      -14.2669       14.2669       190.085       204.352    
  41  0.323145      -1.12965      -21.2055       21.2055       196.531       217.736    
  42  0.505961     -0.681295      -12.7890       12.7890       184.949       197.738    
  43  0.699853E-01  -2.65947      -49.9226       49.9226       205.251       255.174    
  44  0.188263      -1.66991      -31.3470       31.3470       193.963       225.310    
  45  0.663178     -0.410711      -7.70973       7.70973       183.173       190.883    
  46  0.680233     -0.385320      -7.23309       7.23309       190.528       197.761    
  47  0.717812     -0.331548      -6.22370       6.22370       208.927       215.151    
  48  0.319374      -1.14139      -21.4258       21.4258       182.391       203.817    
  49  0.667076     -0.404851      -7.59972       7.59972       202.842       210.442    
  50  0.755360     -0.280560      -5.26658       5.26658       196.510       201.777    
  51  0.105804      -2.24617      -42.1643       42.1643       196.829       238.993    
  52  0.432752     -0.837590      -15.7229       15.7229       212.336       228.059    
  53  0.258710      -1.35205      -25.3801       25.3801       196.339       221.719    
  54  0.826410     -0.190665      -3.57909       3.57909       190.338       193.917    
  55  0.958430     -0.424590E-01 -0.797025      0.797025       198.628       199.425    
  56  0.898442     -0.107093      -2.01031       2.01031       189.207       191.217    
  57  0.794924     -0.229509      -4.30826       4.30826       190.639       194.947    
  58  0.191148      -1.65471      -31.0616       31.0616       194.632       225.694    
  59  0.920959     -0.823397E-01  -1.54565       1.54565       209.894       211.440    
  60  0.239714      -1.42831      -26.8117       26.8117       181.591       208.402    
  61  0.337561      -1.08601      -20.3862       20.3862       214.200       234.587    
  62  0.229537      -1.47169      -27.6261       27.6261       217.272       244.898    
  63  0.518941     -0.655965      -12.3135       12.3135       200.026       212.339    
  64  0.565096     -0.570759      -10.7141       10.7141       210.105       220.819    
  65  0.934648     -0.675849E-01  -1.26868       1.26868       189.965       191.234    
  66  0.699822     -0.356929      -6.70015       6.70015       184.656       191.356    
  67  0.614954     -0.486208      -9.12693       9.12693       220.149       229.276    
  68  0.137942      -1.98092      -37.1852       37.1852       221.702       258.887    
  69  0.565370     -0.570275      -10.7050       10.7050       194.808       205.513    
  70  0.290261E-01  -3.53956      -66.4434       66.4434       176.615       243.058    
  71  0.538956     -0.618121      -11.6031       11.6031       206.028       217.631    
  72  0.354440      -1.03722      -19.4703       19.4703       201.853       221.323    
  73  0.751241E-01  -2.58861      -48.5926       48.5926       207.526       256.119    
loop,thermsimp(1:2)       33   17.0149       9.63094    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    289        202.67          0.86          1.12         23.62          0.22          0.05         25.88
Just calling func    0   0         25.88


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    202.67
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    18.7717               289
loop is:       33
neval is:      288
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       33      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    75.0866      0.500000    
T0,tstep,tfreq (these do not change):             72
current SAtemp,tstepnext are:    18.7717               289
loop is:       34
neval is:      288


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      289
neval,tstepnext:      288     289

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.228924      -1.47437      -27.6763       27.6763       182.339       210.015    
   2  0.299376      -1.20605      -22.6396       22.6396       184.667       207.306    
   3  0.220114      -1.51361      -28.4129       28.4129       183.048       211.461    
   4  0.229209      -1.47312      -27.6530       27.6530       184.342       211.995    
   5  0.902477     -0.102612      -1.92621       1.92621       182.994       184.921    
   6  0.659052     -0.416953      -7.82689       7.82689       182.286       190.113    
   7  0.100321E-01  -4.60197      -86.3866       86.3866       183.173       269.559    
   8  0.588837     -0.529606      -9.94157       9.94157       189.207       199.148    
   9  0.270943      -1.30585      -24.5129       24.5129       189.965       214.478    
  10  0.505518     -0.682171      -12.8055       12.8055       184.656       197.461    
  11  0.264565      -1.32967      -24.9601       24.9601       187.014       211.974    
  12  0.806386     -0.215193      -4.03953       4.03953       187.830       191.870    
  13  0.340560      -1.07716      -20.2201       20.2201       182.376       202.596    
  14  0.906186     -0.985106E-01  -1.84921       1.84921       188.988       190.837    
  15  0.786070     -0.240709      -4.51851       4.51851       189.338       193.856    
  16  0.540508     -0.615247      -11.5492       11.5492       190.338       201.887    
  17  0.935065     -0.671392E-01  -1.26031       1.26031       190.639       191.899    
  18  0.915359     -0.884391E-01  -1.66015       1.66015       194.535       196.195    
  19  0.958261     -0.426353E-01 -0.800335      0.800335       194.947       195.748    
  20  0.935110     -0.670907E-01  -1.25940       1.25940       194.775       196.035    
  21  0.637755     -0.449800      -8.44350       8.44350       196.077       204.520    
  22  0.975714     -0.245861E-01 -0.461523      0.461523       184.949       185.410    
  23  0.797424     -0.226369      -4.24932       4.24932       190.528       194.778    
  24  0.214179      -1.54094      -28.9261       28.9261       196.014       224.940    
  25  0.372145     -0.988472      -18.5553       18.5553       198.628       217.184    
  26  0.925208     -0.777367E-01  -1.45925       1.45925       191.182       192.641    
  27  0.175897      -1.73786      -32.6224       32.6224       183.479       216.101    
  28  0.952033     -0.491554E-01 -0.922728      0.922728       197.890       198.813    
  29  0.158274E-01  -4.14601      -77.8275       77.8275       183.150       260.978    
  30  0.799308     -0.224008      -4.20501       4.20501       188.629       192.834    
  31  0.248227      -1.39341      -26.1566       26.1566       190.408       216.564    
  32  0.244914      -1.40685      -26.4089       26.4089       192.957       219.366    
  33  0.390842     -0.939452      -17.6351       17.6351       189.173       206.808    
  34  0.146784      -1.91879      -36.0189       36.0189       196.510       232.529    
  35  0.500975     -0.691199      -12.9749       12.9749       191.774       204.749    
  36  0.480131E-01  -3.03628      -56.9960       56.9960       182.391       239.387    
  37  0.124503      -2.08343      -39.1094       39.1094       183.049       222.158    
  38  0.670304     -0.400024      -7.50912       7.50912       190.440       197.949    
  39  0.997449     -0.255468E-02 -0.479556E-01  0.479556E-01   190.085       190.133    
  40  0.681761     -0.383076      -7.19097       7.19097       194.808       201.999    
  41  0.440529     -0.819778      -15.3886       15.3886       181.591       196.979    
  42  0.342489      -1.07152      -20.1141       20.1141       188.593       208.707    
  43  0.735753     -0.306861      -5.76029       5.76029       188.080       193.841    
  44  0.614752     -0.486537      -9.13310       9.13310       202.842       211.975    
  45  0.351660      -1.04509      -19.6181       19.6181       188.172       207.790    
  46  0.777165     -0.252103      -4.73238       4.73238       209.894       214.626    
  47  0.392618     -0.934919      -17.5500       17.5500       184.702       202.252    
  48  0.385647     -0.952832      -17.8862       17.8862       191.170       209.056    
  49  0.834392     -0.181052      -3.39865       3.39865       200.026       203.424    
  50  0.469158     -0.756815      -14.2067       14.2067       194.390       208.597    
  51  0.697320     -0.360511      -6.76739       6.76739       208.927       215.694    
  52  0.987150     -0.129333E-01 -0.242779      0.242779       194.866       195.109    
  53  0.512413     -0.668624      -12.5512       12.5512       206.028       218.579    
  54  0.781282     -0.246819      -4.63321       4.63321       196.531       201.164    
  55  0.290579      -1.23588      -23.1995       23.1995       184.209       207.408    
  56  0.921499     -0.817534E-01  -1.53465       1.53465       186.996       188.530    
  57  0.198558      -1.61668      -30.3477       30.3477       210.105       240.453    
  58  0.488340     -0.716743      -13.4545       13.4545       201.853       215.307    
  59  0.874587     -0.134003      -2.51547       2.51547       196.339       198.854    
  60  0.165334      -1.79979      -33.7850       33.7850       192.862       226.647    
  61  0.712283     -0.339280      -6.36884       6.36884       193.963       200.332    
  62  0.578012E-01  -2.85075      -53.5132       53.5132       194.632       248.145    
  63  0.700556     -0.355880      -6.68046       6.68046       212.336       219.016    
  64  0.502101     -0.688954      -12.9328       12.9328       220.149       233.082    
  65  0.730977E-02  -4.91854      -92.3292       92.3292       214.200       306.530    
  66  0.986830     -0.132576E-01 -0.248866      0.248866       196.829       197.077    
  67  0.264041      -1.33165      -24.9973       24.9973       188.461       213.458    
  68  0.184096      -1.69230      -31.7673       31.7673       176.615       208.382    
  69  0.683389     -0.380691      -7.14620       7.14620       217.272       224.418    
  70  0.934635     -0.675991E-01  -1.26895       1.26895       205.251       206.520    
  71  0.974376     -0.259579E-01 -0.487272      0.487272       207.526       208.013    
  72  0.210957      -1.55610      -29.2106       29.2106       221.702       250.912    
  73  0.730997     -0.313347      -5.88203       5.88203       202.667       208.549    
loop,thermsimp(1:2)       34   27.6763       22.6396    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    290        190.03          0.87          1.13         23.80          0.17          0.06         26.03
Just calling func    0   0         26.03


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    291        216.05          0.86          1.13         23.62          0.16          0.05         25.82
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    190.03
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    18.7717               289
loop is:       34
neval is:      290
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       34      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    75.0866      0.500000    
T0,tstep,tfreq (these do not change):             72
current SAtemp,tstepnext are:    18.7717               289
loop is:       35
neval is:      290


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 




neval>tstepnex so lower away!t
---> lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
     new SAtemp,tstepnext are :    9.38583               361

 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      361
neval,tstepnext:      290     361

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.347237      -1.05775      -9.92784       9.92784       182.994       192.922    
   2  0.621479     -0.475653      -4.46440       4.46440       184.949       189.413    
   3  0.221273      -1.50836      -14.1572       14.1572       186.996       201.153    
   4  0.180626E-01  -4.01391      -37.6739       37.6739       182.286       219.960    
   5  0.216093      -1.53205      -14.3795       14.3795       190.085       204.465    
   6  0.351343      -1.04599      -9.81750       9.81750       188.988       198.806    
   7  0.360847      -1.01930      -9.56699       9.56699       187.830       197.397    
   8  0.439525     -0.822061      -7.71572       7.71572       190.639       198.355    
   9  0.910616E-01  -2.39622      -22.4905       22.4905       191.182       213.672    
  10  0.549745     -0.598300      -5.61554       5.61554       188.629       194.245    
  11  0.619825     -0.478318      -4.48941       4.48941       188.080       192.570    
  12  0.548169E-01  -2.90376      -27.2542       27.2542       189.338       216.592    
  13  0.947163     -0.542842E-01 -0.509502      0.509502       190.528       191.038    
  14  0.725459     -0.320951      -3.01239       3.01239       194.866       197.878    
  15  0.481613     -0.730615      -6.85743       6.85743       194.947       201.805    
  16  0.866286     -0.143540      -1.34725       1.34725       194.775       196.122    
  17  0.221988E-01  -3.80772      -35.7386       35.7386       194.535       230.274    
  18  0.980823     -0.193630E-01 -0.181738      0.181738       181.591       181.772    
  19  0.332549      -1.10097      -10.3335       10.3335       196.829       207.162    
  20  0.989035     -0.110256E-01 -0.103484      0.103484       184.656       184.759    
  21  0.364016      -1.01056      -9.48491       9.48491       190.440       199.925    
  22  0.861799     -0.148733      -1.39598       1.39598       197.890       199.286    
  23  0.622306     -0.474324      -4.45192       4.45192       196.339       200.791    
  24  0.575476     -0.552558      -5.18621       5.18621       189.207       194.393    
  25  0.205536      -1.58213      -14.8496       14.8496       193.963       208.812    
  26  0.124037      -2.08718      -19.5899       19.5899       196.531       216.121    
  27  0.467008     -0.761408      -7.14645       7.14645       190.338       197.485    
  28  0.273870      -1.29510      -12.1556       12.1556       194.808       206.964    
  29  0.842780     -0.171050      -1.60544       1.60544       184.702       186.308    
  30  0.709315     -0.343455      -3.22361       3.22361       182.376       185.599    
  31  0.677144     -0.389871      -3.65926       3.65926       200.026       203.685    
  32  0.656062     -0.421500      -3.95613       3.95613       196.077       200.033    
  33  0.721592     -0.326295      -3.06255       3.06255       191.774       194.837    
  34  0.120172      -2.11883      -19.8870       19.8870       205.251       225.138    
  35  0.832403     -0.183439      -1.72173       1.72173       189.173       190.895    
  36  0.607577     -0.498276      -4.67673       4.67673       184.667       189.343    
  37  0.169814      -1.77305      -16.6415       16.6415       184.209       200.850    
  38  0.578085     -0.548034      -5.14376       5.14376       188.172       193.316    
  39  0.201144      -1.60373      -15.0524       15.0524       207.526       222.578    
  40  0.922823     -0.803178E-01 -0.753849      0.753849       176.615       177.369    
  41  0.136644      -1.99038      -18.6813       18.6813       202.667       221.349    
  42  0.836366     -0.178689      -1.67714       1.67714       194.390       196.067    
  43  0.590669     -0.526499      -4.94163       4.94163       188.593       193.534    
  44  0.745946     -0.293102      -2.75100       2.75100       191.170       193.921    
  45  0.874736     -0.133833      -1.25613       1.25613       182.339       183.595    
  46  0.370232     -0.993625      -9.32599       9.32599       183.048       192.374    
  47  0.832293     -0.183570      -1.72296       1.72296       187.014       188.737    
  48  0.351566      -1.04536      -9.81155       9.81155       202.842       212.654    
  49  0.705870     -0.348324      -3.26931       3.26931       184.342       187.611    
  50  0.323816      -1.12758      -10.5833       10.5833       188.461       199.044    
  51  0.197269      -1.62319      -15.2350       15.2350       189.965       205.200    
  52  0.140686      -1.96123      -18.4077       18.4077       209.894       228.302    
  53  0.913651     -0.903067E-01 -0.847603      0.847603       201.853       202.700    
  54  0.515699     -0.662233      -6.21560       6.21560       208.927       215.143    
  55  0.217669      -1.52478      -14.3113       14.3113       183.479       197.790    
  56  0.234146      -1.45181      -13.6264       13.6264       190.408       204.034    
  57  0.948303     -0.530813E-01 -0.498211      0.498211       198.628       199.127    
  58  0.165683      -1.79768      -16.8727       16.8727       206.028       222.901    
  59  0.506186     -0.680851      -6.39035       6.39035       212.336       218.726    
  60  0.644381     -0.439466      -4.12475       4.12475       192.957       197.081    
  61  0.790610     -0.234950      -2.20520       2.20520       183.049       185.254    
  62  0.945427     -0.561185E-01 -0.526719      0.526719       217.272       217.799    
  63  0.195494      -1.63222      -15.3198       15.3198       196.014       211.334    
  64  0.478914     -0.736235      -6.91017       6.91017       192.862       199.772    
  65  0.926031     -0.768470E-01 -0.721273      0.721273       196.510       197.231    
  66  0.945712     -0.558175E-01 -0.523893      0.523893       220.149       220.673    
  67  0.892862     -0.113323      -1.06363       1.06363       182.391       183.455    
  68  0.766967     -0.265312      -2.49017       2.49017       210.105       212.595    
  69  0.720632     -0.327626      -3.07504       3.07504       194.632       197.707    
  70  0.404614     -0.904821      -8.49249       8.49249       221.702       230.194    
  71  0.799730     -0.223481      -2.09755       2.09755       183.150       185.248    
  72  0.442243     -0.815895      -7.65785       7.65785       183.173       190.831    
  73  0.662526     -0.411695      -3.86410       3.86410       190.026       193.890    
loop,thermsimp(1:2)       35   9.92784       4.46440    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    292        208.91          0.87          1.12         23.53          0.19          0.05         25.77
Just calling func    0   0         25.77


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    293        231.05          0.85          1.13         23.40          0.34          0.05         25.77
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    208.91
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    9.38583               361
loop is:       35
neval is:      292
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       35      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    75.0866      0.500000    
T0,tstep,tfreq (these do not change):             72
current SAtemp,tstepnext are:    9.38583               361
loop is:       36
neval is:      292


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      361
neval,tstepnext:      292     361

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.233712      -1.45367      -13.6439       13.6439       176.615       190.259    
   2  0.607568     -0.498291      -4.67687       4.67687       181.591       186.267    
   3  0.905785     -0.989529E-01 -0.928755      0.928755       182.391       183.320    
   4  0.995938E-01  -2.30666      -21.6499       21.6499       182.339       203.989    
   5  0.851360     -0.160920      -1.51037       1.51037       184.656       186.166    
   6  0.730583     -0.313913      -2.94633       2.94633       183.150       186.096    
   7  0.426216     -0.852810      -8.00433       8.00433       183.049       191.053    
   8  0.285108      -1.25489      -11.7782       11.7782       182.376       194.154    
   9  0.839246     -0.175251      -1.64488       1.64488       184.702       186.347    
  10  0.217639      -1.52492      -14.3126       14.3126       184.342       198.654    
  11  0.183996E-02  -6.29801      -59.1121       59.1121       187.014       246.126    
  12  0.682631     -0.381801      -3.58352       3.58352       184.667       188.250    
  13  0.203596      -1.59162      -14.9387       14.9387       184.949       199.887    
  14  0.881164     -0.126512      -1.18742       1.18742       183.173       184.360    
  15  0.711431     -0.340477      -3.19565       3.19565       189.173       192.369    
  16  0.874326     -0.134302      -1.26053       1.26053       190.528       191.789    
  17  0.814222     -0.205523      -1.92900       1.92900       183.048       184.977    
  18  0.995668     -0.434126E-02 -0.407464E-01  0.407464E-01   188.080       188.121    
  19  0.693805     -0.365564      -3.43112       3.43112       182.994       186.425    
  20  0.958584     -0.422984E-01 -0.397006      0.397006       188.172       188.569    
  21  0.748022     -0.290323      -2.72492       2.72492       188.593       191.318    
  22  0.696703     -0.361396      -3.39200       3.39200       190.026       193.418    
  23  0.732990     -0.310623      -2.91545       2.91545       191.170       194.085    
  24  0.534749     -0.625958      -5.87513       5.87513       188.629       194.504    
  25  0.691641     -0.368688      -3.46044       3.46044       189.207       192.667    
  26  0.300458      -1.20245      -11.2860       11.2860       191.774       203.060    
  27  0.977116     -0.231502E-01 -0.217284      0.217284       194.390       194.608    
  28  0.542581     -0.611418      -5.73867       5.73867       194.775       200.514    
  29  0.266111      -1.32384      -12.4253       12.4253       192.957       205.382    
  30  0.692298     -0.367738      -3.45153       3.45153       196.510       199.962    
  31  0.664047     -0.409403      -3.84258       3.84258       187.830       191.673    
  32  0.542186     -0.612146      -5.74550       5.74550       190.338       196.084    
  33  0.362243      -1.01544      -9.53073       9.53073       194.632       204.163    
  34  0.578658     -0.547044      -5.13446       5.13446       183.479       188.613    
  35  0.489298     -0.714783      -6.70883       6.70883       194.866       201.575    
  36  0.617485     -0.482100      -4.52491       4.52491       190.639       195.164    
  37  0.368651     -0.997905      -9.36616       9.36616       188.988       198.354    
  38  0.198936      -1.61477      -15.1560       15.1560       188.461       203.617    
  39  0.505263     -0.682676      -6.40748       6.40748       198.628       205.036    
  40  0.983997     -0.161325E-01 -0.151417      0.151417       197.890       198.042    
  41  0.630553     -0.461159      -4.32836       4.32836       192.862       197.190    
  42  0.423821E-01  -3.16103      -29.6689       29.6689       190.440       220.109    
  43  0.488935     -0.715526      -6.71581       6.71581       196.077       202.792    
  44  0.402078     -0.911110      -8.55152       8.55152       196.339       204.890    
  45  0.380878     -0.965277      -9.05992       9.05992       184.209       193.269    
  46  0.260585E-01  -3.64741      -34.2340       34.2340       186.996       221.230    
  47  0.681660     -0.383224      -3.59687       3.59687       194.947       198.544    
  48  0.489074     -0.715241      -6.71313       6.71313       201.853       208.566    
  49  0.752363     -0.284536      -2.67061       2.67061       200.026       202.696    
  50  0.978934     -0.212911E-01 -0.199835      0.199835       190.408       190.608    
  51  0.297789      -1.21137      -11.3697       11.3697       190.085       201.455    
  52  0.551604     -0.594926      -5.58387       5.58387       189.965       195.549    
  53  0.546413     -0.604381      -5.67262       5.67262       194.808       200.481    
  54  0.831880     -0.184067      -1.72762       1.72762       196.829       198.556    
  55  0.873708     -0.135010      -1.26718       1.26718       193.963       195.230    
  56  0.169447      -1.77521      -16.6619       16.6619       196.014       212.676    
  57  0.434000     -0.834712      -7.83446       7.83446       210.105       217.940    
  58  0.506119     -0.680984      -6.39159       6.39159       202.842       209.234    
  59  0.168470      -1.78100      -16.7161       16.7161       191.182       207.898    
  60  0.820014     -0.198433      -1.86246       1.86246       208.927       210.789    
  61  0.973689     -0.266631E-01 -0.250255      0.250255       196.531       196.781    
  62  0.438579     -0.824215      -7.73594       7.73594       189.338       197.074    
  63  0.725095     -0.321452      -3.01710       3.01710       217.272       220.289    
  64  0.857338     -0.153923      -1.44470       1.44470       212.336       213.780    
  65  0.363865      -1.01097      -9.48880       9.48880       182.286       191.775    
  66  0.391136     -0.938701      -8.81048       8.81048       220.149       228.960    
  67  0.949080     -0.522625E-01 -0.490527      0.490527       202.667       203.158    
  68  0.791138     -0.234283      -2.19894       2.19894       207.526       209.725    
  69  0.675448     -0.392379      -3.68280       3.68280       206.028       209.711    
  70  0.955283     -0.457479E-01 -0.429382      0.429382       205.251       205.681    
  71  0.307295E-01  -3.48253      -32.6865       32.6865       209.894       242.581    
  72  0.581651E-01  -2.84447      -26.6977       26.6977       221.702       248.399    
  73  0.422976E-02  -5.46561      -51.2993       51.2993       208.913       260.212    
loop,thermsimp(1:2)       36   13.6439       4.67687    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    294        194.53          0.86          1.12         23.41          0.32          0.05         25.76
Just calling func    0   0         25.76


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    194.53
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    9.38583               361
loop is:       36
neval is:      293
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       36      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    75.0866      0.500000    
T0,tstep,tfreq (these do not change):             72
current SAtemp,tstepnext are:    9.38583               361
loop is:       37
neval is:      293


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      361
neval,tstepnext:      293     361

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.411300     -0.888432      -8.33867       8.33867       182.391       190.730    
   2  0.697205     -0.360676      -3.38524       3.38524       183.173       186.558    
   3  0.314648E-01  -3.45889      -32.4645       32.4645       183.048       215.513    
   4  0.857269     -0.154003      -1.44545       1.44545       183.150       184.596    
   5  0.652165     -0.427457      -4.01204       4.01204       184.656       188.668    
   6  0.510145     -0.673060      -6.31722       6.31722       181.591       187.908    
   7  0.175175      -1.74197      -16.3498       16.3498       184.702       201.052    
   8  0.373803     -0.984025      -9.23589       9.23589       182.994       192.230    
   9  0.514972     -0.663642      -6.22883       6.22883       188.080       194.309    
  10  0.548235     -0.601051      -5.64136       5.64136       184.667       190.308    
  11  0.541310     -0.613763      -5.76068       5.76068       188.172       193.933    
  12  0.734083     -0.309133      -2.90147       2.90147       183.479       186.380    
  13  0.422599     -0.861332      -8.08431       8.08431       176.615       184.699    
  14  0.287055      -1.24808      -11.7143       11.7143       190.408       202.122    
  15  0.885133     -0.122017      -1.14523       1.14523       183.049       184.194    
  16  0.391075     -0.938857      -8.81195       8.81195       188.593       197.405    
  17  0.473784     -0.747003      -7.01124       7.01124       187.830       194.842    
  18  0.691812     -0.368440      -3.45812       3.45812       182.286       185.745    
  19  0.644447     -0.439363      -4.12379       4.12379       190.528       194.652    
  20  0.805933     -0.215754      -2.02503       2.02503       189.173       191.198    
  21  0.393766     -0.931998      -8.74758       8.74758       189.207       197.954    
  22  0.907098E-01  -2.40009      -22.5268       22.5268       184.209       206.736    
  23  0.376515     -0.976796      -9.16804       9.16804       190.026       199.194    
  24  0.819190     -0.199439      -1.87190       1.87190       191.170       193.042    
  25  0.692438     -0.367536      -3.44963       3.44963       182.376       185.825    
  26  0.188370      -1.66935      -15.6682       15.6682       188.629       204.297    
  27  0.500532     -0.692083      -6.49577       6.49577       194.390       200.886    
  28  0.282311      -1.26475      -11.8707       11.8707       190.639       202.510    
  29  0.338061      -1.08453      -10.1792       10.1792       193.963       204.142    
  30  0.466208     -0.763123      -7.16254       7.16254       189.965       197.128    
  31  0.893084     -0.113075      -1.06130       1.06130       190.338       191.400    
  32  0.818806     -0.199908      -1.87631       1.87631       196.531       198.407    
  33  0.585066     -0.536031      -5.03110       5.03110       189.338       194.369    
  34  0.527412     -0.639774      -6.00481       6.00481       192.862       198.866    
  35  0.994295     -0.572143E-02 -0.537003E-01  0.537003E-01   197.890       197.944    
  36  0.739278     -0.302082      -2.83529       2.83529       188.988       191.823    
  37  0.230995      -1.46536      -13.7536       13.7536       194.947       208.701    
  38  0.414929     -0.879648      -8.25622       8.25622       196.829       205.085    
  39  0.378446     -0.971682      -9.12004       9.12004       184.342       193.462    
  40  0.368620     -0.997990      -9.36696       9.36696       184.949       194.315    
  41  0.301312      -1.19961      -11.2593       11.2593       196.510       207.769    
  42  0.105882E-01  -4.54801      -42.6869       42.6869       194.808       237.495    
  43  0.481885     -0.730049      -6.85211       6.85211       194.775       201.627    
  44  0.446716     -0.805833      -7.56341       7.56341       190.085       197.648    
  45  0.482098     -0.729608      -6.84798       6.84798       194.866       201.714    
  46  0.278892      -1.27693      -11.9851       11.9851       200.026       212.011    
  47  0.756484     -0.279074      -2.61934       2.61934       196.077       198.696    
  48  0.662766     -0.411334      -3.86071       3.86071       191.774       195.635    
  49  0.433861E-01  -3.13762      -29.4491       29.4491       202.667       232.116    
  50  0.825649E-02  -4.79676      -45.0215       45.0215       188.461       233.482    
  51  0.476679     -0.740911      -6.95407       6.95407       182.339       189.293    
  52  0.128614      -2.05094      -19.2497       19.2497       194.632       213.882    
  53  0.609086     -0.495797      -4.65346       4.65346       196.339       200.992    
  54  0.484878E-01  -3.02644      -28.4057       28.4057       198.628       227.034    
  55  0.287383E-02  -5.85211      -54.9269       54.9269       192.957       247.884    
  56  0.699724     -0.357070      -3.35140       3.35140       205.251       208.603    
  57  0.407524     -0.897655      -8.42523       8.42523       191.182       199.607    
  58  0.530107     -0.634677      -5.95697       5.95697       201.853       207.810    
  59  0.589469E-01  -2.83112      -26.5724       26.5724       202.842       229.414    
  60  0.357066E-01  -3.33242      -31.2775       31.2775       206.028       237.306    
  61  0.726760     -0.319159      -2.99557       2.99557       207.526       210.522    
  62  0.486103     -0.721334      -6.77032       6.77032       208.927       215.697    
  63  0.212811      -1.54735      -14.5232       14.5232       196.014       210.537    
  64  0.264725      -1.32906      -12.4744       12.4744       212.336       224.810    
  65  0.162129      -1.81936      -17.0762       17.0762       210.105       227.181    
  66  0.148935      -1.90425      -17.8729       17.8729       190.440       208.313    
  67  0.271622      -1.30334      -12.2330       12.2330       217.272       229.505    
  68  0.965736     -0.348643E-01 -0.327230      0.327230       186.996       187.323    
  69  0.659377     -0.416460      -3.90882       3.90882       220.149       224.058    
  70  0.569807     -0.562457      -5.27912       5.27912       209.894       215.173    
  71  0.294586      -1.22218      -11.4712       11.4712       187.014       198.485    
  72  0.404373     -0.905416      -8.49808       8.49808       221.702       230.200    
  73  0.725150     -0.321376      -3.01638       3.01638       194.535       197.551    
loop,thermsimp(1:2)       37   8.33867       3.38524    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    295        186.84          0.86          1.12         23.42          0.36          0.05         25.81
Just calling func    0   0         25.81


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    296        212.46          0.86          1.12         23.55          0.27          0.05         25.86
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    186.84
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    9.38583               361
loop is:       37
neval is:      295
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       37      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    75.0866      0.500000    
T0,tstep,tfreq (these do not change):             72
current SAtemp,tstepnext are:    9.38583               361
loop is:       38
neval is:      295


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      361
neval,tstepnext:      295     361

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.408852     -0.894401      -8.39470       8.39470       183.049       191.443    
   2  0.259700      -1.34823      -12.6542       12.6542       183.150       195.804    
   3  0.681144E-01  -2.68657      -25.2156       25.2156       176.615       201.831    
   4  0.158140      -1.84427      -17.3100       17.3100       182.286       199.596    
   5  0.497681     -0.697796      -6.54939       6.54939       182.376       188.925    
   6  0.800218     -0.222871      -2.09182       2.09182       183.479       185.571    
   7  0.831967     -0.183962      -1.72664       1.72664       183.173       184.899    
   8  0.707345     -0.346237      -3.24972       3.24972       186.996       190.245    
   9  0.265927      -1.32454      -12.4319       12.4319       181.591       194.022    
  10  0.659046     -0.416962      -3.91353       3.91353       184.656       188.569    
  11  0.654587E-01  -2.72634      -25.5889       25.5889       182.339       207.928    
  12  0.223329      -1.49911      -14.0704       14.0704       184.667       198.737    
  13  0.996019     -0.398855E-02 -0.374358E-01  0.374358E-01   182.391       182.429    
  14  0.553910     -0.590753      -5.54470       5.54470       189.173       194.718    
  15  0.218863      -1.51931      -14.2600       14.2600       190.338       204.598    
  16  0.414020     -0.881841      -8.27681       8.27681       188.988       197.265    
  17  0.229117      -1.47352      -13.8302       13.8302       182.994       196.825    
  18  0.341764      -1.07363      -10.0769       10.0769       191.170       201.247    
  19  0.357052      -1.02987      -9.66621       9.66621       184.342       194.008    
  20  0.780779     -0.247463      -2.32265       2.32265       188.172       190.495    
  21  0.382234     -0.961721      -9.02655       9.02655       188.080       197.107    
  22  0.123899      -2.08829      -19.6003       19.6003       184.949       204.549    
  23  0.393312     -0.933152      -8.75840       8.75840       189.338       198.096    
  24  0.481741     -0.730349      -6.85493       6.85493       190.528       197.383    
  25  0.120001      -2.12026      -19.9004       19.9004       187.830       207.731    
  26  0.506023     -0.681173      -6.39337       6.39337       191.774       198.168    
  27  0.891157     -0.115235      -1.08158       1.08158       189.965       191.047    
  28  0.584674     -0.536701      -5.03739       5.03739       188.593       193.630    
  29  0.313196      -1.16093      -10.8962       10.8962       194.535       205.431    
  30  0.507340     -0.678574      -6.36898       6.36898       190.085       196.454    
  31  0.985030     -0.150835E-01 -0.141572      0.141572       197.890       198.032    
  32  0.186570      -1.67895      -15.7583       15.7583       189.207       204.965    
  33  0.992622     -0.740493E-02 -0.695014E-01  0.695014E-01   196.531       196.601    
  34  0.344152      -1.06667      -10.0116       10.0116       187.014       197.026    
  35  0.327214      -1.11714      -10.4853       10.4853       196.077       206.562    
  36  0.722008     -0.325719      -3.05715       3.05715       192.862       195.919    
  37  0.471441     -0.751960      -7.05777       7.05777       190.026       197.084    
  38  0.483594     -0.726510      -6.81889       6.81889       191.182       198.000    
  39  0.799410     -0.223881      -2.10131       2.10131       194.390       196.492    
  40  0.864070     -0.146101      -1.37128       1.37128       196.339       197.710    
  41  0.326419      -1.11957      -10.5081       10.5081       184.702       195.210    
  42  0.970166E-01  -2.33287      -21.8959       21.8959       194.775       216.671    
  43  0.822479     -0.195432      -1.83430       1.83430       194.866       196.700    
  44  0.719858     -0.328701      -3.08513       3.08513       190.408       193.493    
  45  0.359763      -1.02231      -9.59523       9.59523       190.639       200.234    
  46  0.879180     -0.128765      -1.20857       1.20857       193.963       195.171    
  47  0.152514      -1.88050      -17.6500       17.6500       188.629       206.279    
  48  0.379430     -0.969085      -9.09567       9.09567       196.829       205.924    
  49  0.444703     -0.810349      -7.60580       7.60580       184.209       191.815    
  50  0.240485      -1.42510      -13.3757       13.3757       196.510       209.886    
  51  0.682479     -0.382024      -3.58561       3.58561       201.853       205.438    
  52  0.989508     -0.105479E-01 -0.990007E-01  0.990007E-01   190.440       190.539    
  53  0.626329E-01  -2.77046      -26.0031       26.0031       205.251       231.255    
  54  0.217806      -1.52415      -14.3054       14.3054       194.947       209.253    
  55  0.297102      -1.21368      -11.3914       11.3914       207.526       218.917    
  56  0.447982     -0.803002      -7.53683       7.53683       196.014       203.551    
  57  0.343456      -1.06870      -10.0306       10.0306       200.026       210.056    
  58  0.737340     -0.304706      -2.85991       2.85991       194.632       197.492    
  59  0.863080     -0.147248      -1.38204       1.38204       209.894       211.276    
  60  0.463462     -0.769030      -7.21799       7.21799       183.048       190.266    
  61  0.120067      -2.11970      -19.8952       19.8952       208.927       228.822    
  62  0.758415     -0.276525      -2.59542       2.59542       220.149       222.745    
  63  0.356867      -1.03039      -9.67108       9.67108       212.336       222.007    
  64  0.811695     -0.208631      -1.95818       1.95818       198.628       200.587    
  65  0.712430     -0.339074      -3.18249       3.18249       210.105       213.288    
  66  0.343671      -1.06807      -10.0247       10.0247       202.842       212.867    
  67  0.455065     -0.787315      -7.38960       7.38960       217.272       224.662    
  68  0.462404     -0.771317      -7.23945       7.23945       221.702       228.941    
  69  0.197402      -1.62251      -15.2286       15.2286       202.667       217.896    
  70  0.870222     -0.139007      -1.30470       1.30470       188.461       189.765    
  71  0.938983     -0.629581E-01 -0.590913      0.590913       206.028       206.619    
  72  0.362909      -1.01360      -9.51350       9.51350       194.808       204.322    
  73  0.461338     -0.773624      -7.26110       7.26110       186.838       194.100    
loop,thermsimp(1:2)       38   8.39470       12.6542    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    297        191.17          0.86          1.12         23.46          0.26          0.05         25.77
Just calling func    0   0         25.76


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    298        229.89          0.84          1.12         23.53          0.27          0.04         25.80
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    191.17
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    9.38583               361
loop is:       38
neval is:      297
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       38      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    75.0866      0.500000    
T0,tstep,tfreq (these do not change):             72
current SAtemp,tstepnext are:    9.38583               361
loop is:       39
neval is:      297


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      361
neval,tstepnext:      297     361

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.125069      -2.07889      -19.5121       19.5121       182.391       201.903    
   2  0.274837      -1.29158      -12.1225       12.1225       183.173       195.295    
   3  0.305931E-01  -3.48698      -32.7282       32.7282       183.479       216.207    
   4  0.929157     -0.734779E-01 -0.689651      0.689651       184.656       185.346    
   5  0.995956     -0.405208E-02 -0.380321E-01  0.380321E-01   182.376       182.414    
   6  0.904971     -0.998521E-01 -0.937194      0.937194       188.461       189.398    
   7  0.189758      -1.66200      -15.5993       15.5993       186.996       202.595    
   8  0.134931      -2.00299      -18.7998       18.7998       183.048       201.848    
   9  0.302412      -1.19596      -11.2251       11.2251       188.172       199.397    
  10  0.389155     -0.943777      -8.85813       8.85813       190.440       199.298    
  11  0.947428     -0.540040E-01 -0.506872      0.506872       189.965       190.472    
  12  0.338357      -1.08365      -10.1710       10.1710       183.049       193.220    
  13  0.937476     -0.645645E-01 -0.605991      0.605991       184.209       184.815    
  14  0.399493     -0.917560      -8.61206       8.61206       190.408       199.020    
  15  0.527586     -0.639444      -6.00171       6.00171       188.593       194.594    
  16  0.297740      -1.21153      -11.3713       11.3713       184.342       195.713    
  17  0.557978     -0.583436      -5.47603       5.47603       181.591       187.067    
  18  0.267521      -1.31856      -12.3757       12.3757       186.838       199.214    
  19  0.637637     -0.449986      -4.22349       4.22349       189.173       193.397    
  20  0.838569     -0.176059      -1.65246       1.65246       193.963       195.615    
  21  0.132199E-01  -4.32603      -40.6034       40.6034       184.702       225.306    
  22  0.745606     -0.293557      -2.75528       2.75528       183.150       185.905    
  23  0.334504      -1.09511      -10.2785       10.2785       192.862       203.140    
  24  0.118852      -2.12987      -19.9906       19.9906       190.085       210.076    
  25  0.319911      -1.13971      -10.6972       10.6972       194.390       205.087    
  26  0.638302E-01  -2.75153      -25.8254       25.8254       196.531       222.356    
  27  0.173204      -1.75329      -16.4560       16.4560       194.866       211.322    
  28  0.885640     -0.121444      -1.13986       1.13986       182.994       184.134    
  29  0.710758     -0.341423      -3.20454       3.20454       187.014       190.219    
  30  0.938919     -0.630265E-01 -0.591556      0.591556       190.026       190.618    
  31  0.217740      -1.52445      -14.3082       14.3082       188.080       202.389    
  32  0.130036      -2.03994      -19.1465       19.1465       188.988       208.135    
  33  0.331090      -1.10537      -10.3748       10.3748       190.528       200.903    
  34  0.453525E-01  -3.09329      -29.0331       29.0331       194.632       223.665    
  35  0.494600     -0.704006      -6.60767       6.60767       196.339       202.946    
  36  0.488771E-01  -3.01845      -28.3306       28.3306       191.182       219.512    
  37  0.262916E-01  -3.63850      -34.1504       34.1504       197.890       232.041    
  38  0.975293     -0.250177E-01 -0.234812      0.234812       189.338       189.573    
  39  0.521026     -0.651955      -6.11913       6.11913       191.774       197.893    
  40  0.210960      -1.55609      -14.6052       14.6052       184.667       199.272    
  41  0.475166E-02  -5.34926      -50.2072       50.2072       182.286       232.494    
  42  0.675859     -0.391771      -3.67709       3.67709       190.639       194.316    
  43  0.691418     -0.369011      -3.46347       3.46347       198.628       202.092    
  44  0.425152     -0.855309      -8.02779       8.02779       191.170       199.198    
  45  0.141313      -1.95678      -18.3660       18.3660       176.615       194.981    
  46  0.902170     -0.102952     -0.966291      0.966291       196.014       196.980    
  47  0.794321     -0.230268      -2.16126       2.16126       194.808       196.970    
  48  0.685387     -0.377772      -3.54570       3.54570       184.949       188.494    
  49  0.273223      -1.29747      -12.1778       12.1778       190.338       202.516    
  50  0.784111     -0.243205      -2.28268       2.28268       189.207       191.489    
  51  0.824524     -0.192949      -1.81099       1.81099       194.535       196.346    
  52  0.855082     -0.156558      -1.46943       1.46943       201.853       203.322    
  53  0.744692E-01  -2.59737      -24.3785       24.3785       196.829       221.207    
  54  0.294857E-01  -3.52385      -33.0742       33.0742       188.629       221.703    
  55  0.225962      -1.48739      -13.9604       13.9604       196.077       210.037    
  56  0.211073      -1.55555      -14.6001       14.6001       206.028       220.628    
  57  0.525673E-01  -2.94566      -27.6475       27.6475       187.830       215.478    
  58  0.855455     -0.156122      -1.46533       1.46533       182.339       183.804    
  59  0.169262E-01  -4.07890      -38.2838       38.2838       194.947       233.231    
  60  0.578360     -0.547559      -5.13929       5.13929       196.510       201.649    
  61  0.753083     -0.283580      -2.66164       2.66164       200.026       202.687    
  62  0.942983     -0.587068E-01 -0.551012      0.551012       209.894       210.445    
  63  0.164299      -1.80607      -16.9514       16.9514       202.842       219.793    
  64  0.964876     -0.357557E-01 -0.335597      0.335597       210.105       210.441    
  65  0.905245E-01  -2.40213      -22.5460       22.5460       194.775       217.321    
  66  0.812887     -0.207163      -1.94440       1.94440       202.667       204.612    
  67  0.702547     -0.353043      -3.31360       3.31360       207.526       210.840    
  68  0.229959      -1.46986      -13.7958       13.7958       212.336       226.131    
  69  0.880507     -0.127257      -1.19441       1.19441       220.149       221.344    
  70  0.528445     -0.637816      -5.98643       5.98643       217.272       223.258    
  71  0.461632     -0.772988      -7.25513       7.25513       208.927       216.182    
  72  0.877049     -0.131193      -1.23135       1.23135       221.702       222.933    
  73  0.652452     -0.427017      -4.00791       4.00791       191.170       195.178    
loop,thermsimp(1:2)       39   19.5121       12.1225    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    299        181.37          0.86          1.12         23.45          0.30          0.05         25.77
Just calling func    0   0         25.77


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    300        194.66          0.86          1.13         23.62          0.11          0.05         25.77
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    181.37
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    9.38583               361
loop is:       39
neval is:      299
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       39      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    75.0866      0.500000    
T0,tstep,tfreq (these do not change):             72
current SAtemp,tstepnext are:    9.38583               361
loop is:       40
neval is:      299


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      361
neval,tstepnext:      299     361

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.465620     -0.764385      -7.17438       7.17438       182.376       189.550    
   2  0.310178      -1.17061      -10.9871       10.9871       182.339       193.326    
   3  0.883713     -0.123623      -1.16031       1.16031       182.994       184.155    
   4  0.641465     -0.444001      -4.16732       4.16732       184.209       188.376    
   5  0.458576E-01  -3.08222      -28.9291       28.9291       184.656       213.585    
   6  0.611421     -0.491970      -4.61754       4.61754       183.150       187.768    
   7  0.292603      -1.22894      -11.5346       11.5346       181.591       193.125    
   8  0.180818      -1.71026      -16.0522       16.0522       184.949       201.001    
   9  0.490648     -0.712028      -6.68297       6.68297       188.461       195.144    
  10  0.538601     -0.618781      -5.80777       5.80777       189.338       195.146    
  11  0.451209     -0.795824      -7.46947       7.46947       187.014       194.484    
  12  0.610260     -0.493870      -4.63538       4.63538       189.965       194.600    
  13  0.425113     -0.855401      -8.02864       8.02864       190.026       198.055    
  14  0.647858     -0.434084      -4.07424       4.07424       189.207       193.281    
  15  0.394937     -0.929029      -8.71970       8.71970       183.049       191.768    
  16  0.452279E-01  -3.09604      -29.0589       29.0589       189.173       218.232    
  17  0.954905     -0.461437E-01 -0.433096      0.433096       190.639       191.072    
  18  0.362548      -1.01460      -9.52284       9.52284       188.593       198.115    
  19  0.808078     -0.213097      -2.00009       2.00009       176.615       178.615    
  20  0.219348      -1.51709      -14.2392       14.2392       191.170       205.409    
  21  0.206981      -1.57513      -14.7839       14.7839       183.173       197.957    
  22  0.719933     -0.328597      -3.08416       3.08416       193.963       197.047    
  23  0.950238     -0.510432E-01 -0.479082      0.479082       184.342       184.821    
  24  0.845993     -0.167244      -1.56972       1.56972       194.535       196.105    
  25  0.157926      -1.84563      -17.3228       17.3228       194.808       212.131    
  26  0.430020     -0.843924      -7.92093       7.92093       196.014       203.935    
  27  0.624159     -0.471350      -4.42401       4.42401       191.774       196.198    
  28  0.355386      -1.03455      -9.71012       9.71012       190.408       200.118    
  29  0.297353      -1.21284      -11.3835       11.3835       191.170       202.554    
  30  0.185476      -1.68483      -15.8135       15.8135       186.838       202.652    
  31  0.406569     -0.900002      -8.44726       8.44726       184.667       193.114    
  32  0.147052      -1.91697      -17.9924       17.9924       190.440       208.432    
  33  0.205955      -1.58010      -14.8305       14.8305       188.172       203.003    
  34  0.383503     -0.958409      -8.99546       8.99546       190.528       199.524    
  35  0.514677E-01  -2.96680      -27.8459       27.8459       196.510       224.356    
  36  0.499194     -0.694760      -6.52089       6.52089       183.048       189.569    
  37  0.103172E-01  -4.57394      -42.9302       42.9302       182.391       225.322    
  38  0.470163     -0.754676      -7.08326       7.08326       198.628       205.712    
  39  0.983694     -0.164404E-01 -0.154306      0.154306       188.080       188.235    
  40  0.880425     -0.127351      -1.19529       1.19529       190.338       191.534    
  41  0.969759     -0.307072E-01 -0.288212      0.288212       186.996       187.284    
  42  0.761826E-01  -2.57462      -24.1650       24.1650       200.026       224.191    
  43  0.124427      -2.08404      -19.5604       19.5604       196.339       215.899    
  44  0.997702     -0.230032E-02 -0.215904E-01  0.215904E-01   192.862       192.883    
  45  0.213939      -1.54206      -14.4735       14.4735       201.853       216.326    
  46  0.471369     -0.752113      -7.05920       7.05920       202.667       209.726    
  47  0.421561E-01  -3.16638      -29.7191       29.7191       194.390       224.109    
  48  0.693092     -0.366592      -3.44077       3.44077       188.988       192.429    
  49  0.375157     -0.980409      -9.20195       9.20195       196.077       205.279    
  50  0.285659      -1.25296      -11.7600       11.7600       190.085       201.845    
  51  0.338951      -1.08190      -10.1545       10.1545       210.105       220.260    
  52  0.930127E-01  -2.37502      -22.2915       22.2915       209.894       232.186    
  53  0.840878     -0.173309      -1.62665       1.62665       207.526       209.153    
  54  0.384591     -0.955575      -8.96886       8.96886       194.866       203.835    
  55  0.212856      -1.54714      -14.5212       14.5212       187.830       202.352    
  56  0.878356     -0.129704      -1.21738       1.21738       208.927       210.144    
  57  0.623236E-01  -2.77542      -26.0496       26.0496       183.479       209.528    
  58  0.374221E-02  -5.58808      -52.4487       52.4487       194.775       247.224    
  59  0.851985     -0.160186      -1.50348       1.50348       191.182       192.685    
  60  0.779613     -0.248958      -2.33667       2.33667       202.842       205.179    
  61  0.991658     -0.837700E-02 -0.786250E-01  0.786250E-01   206.028       206.107    
  62  0.425290     -0.854985      -8.02474       8.02474       196.829       204.853    
  63  0.613403     -0.488733      -4.58717       4.58717       220.149       224.737    
  64  0.487347E-01  -3.02136      -28.3580       28.3580       188.629       216.987    
  65  0.267732      -1.31777      -12.3684       12.3684       196.531       208.899    
  66  0.159530      -1.83552      -17.2279       17.2279       221.702       238.930    
  67  0.312803E-01  -3.46477      -32.5197       32.5197       217.272       249.792    
  68  0.956405     -0.445737E-01 -0.418361      0.418361       194.632       195.050    
  69  0.683324     -0.380786      -3.57399       3.57399       184.702       188.276    
  70  0.482307     -0.729174      -6.84390       6.84390       212.336       219.179    
  71  0.928745     -0.739216E-01 -0.693815      0.693815       197.890       198.584    
  72  0.483353     -0.727009      -6.82358       6.82358       182.286       189.110    
  73  0.313709      -1.15929      -10.8809       10.8809       181.367       192.248    
loop,thermsimp(1:2)       40   7.17438       10.9871    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    301        178.70          0.86          1.12         23.78          0.15          0.05         25.95
Just calling func    0   0         25.96


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    302        225.74          0.87          1.11         23.36          0.40          0.05         25.80
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  300    178.70        1.669     -1.336      1.667     -102.6     0.9406    
                      0.3557      1.822     -99.70      3.671     0.7323E-02
                       1.979     -1.463      2.345      0.000     -5.000    
                      -1.177      0.000      0.000      0.000     -1.221    

                      -2.500      9878.      8477.      0.000      0.000    
                     -0.5672     -6.442     -4.415     -7.437      3.294    
                      -14.32     -3.055      1556.      0.000      3260.    

                       8525.      7991.      3112.     0.1598E+05  2890.    
                       3735.     0.1401    -0.2605E-01  0.000    -0.4220    
                     -0.5143E-01-0.1271    -0.1256    -0.2100    -0.2801E-01

                      -1.528    -0.1825E-01  0.000    -0.9422E-02 0.3664E-01
                      0.8541E-01 0.1691E-01 0.2442E-01-0.1010     0.1156    
                     -0.5245E-01-0.1838E-01-0.1189    -0.4062      0.000    

                     -0.9792     -1.567     -2.241     -2.837    -0.2244    
                      0.2379      9.180      9.130    -0.1839E+05 -4.000    
                     -0.3908    -0.5045      9.408      8.402    -0.2117E+05

                      -4.000     0.8743E-01-0.5865      8.835      9.026    
                     -0.3403E+05 -7.000    -0.4173    -0.6349      9.450    
                       8.463    -0.2550E+05 -7.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    178.70
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    9.38583               361
loop is:       40
neval is:      301
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       40      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    75.0866      0.500000    
T0,tstep,tfreq (these do not change):             72
current SAtemp,tstepnext are:    9.38583               361
loop is:       41
neval is:      301


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      361
neval,tstepnext:      301     361

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.231075      -1.46501      -13.7503       13.7503       176.615       190.365    
   2  0.984723     -0.153953E-01 -0.144498      0.144498       182.994       183.139    
   3  0.689569     -0.371688      -3.48860       3.48860       184.342       187.830    
   4  0.539532     -0.617054      -5.79156       5.79156       186.996       192.787    
   5  0.103859      -2.26472      -21.2563       21.2563       183.150       204.406    
   6  0.403261     -0.908171      -8.52394       8.52394       188.080       196.604    
   7  0.545138     -0.606716      -5.69453       5.69453       184.702       190.397    
   8  0.211198      -1.55496      -14.5946       14.5946       184.209       198.803    
   9  0.533123     -0.629004      -5.90372       5.90372       182.286       188.190    
  10  0.891214     -0.115171      -1.08097       1.08097       182.376       183.457    
  11  0.604806     -0.502847      -4.71963       4.71963       183.048       187.768    
  12  0.176166      -1.73633      -16.2969       16.2969       190.639       206.936    
  13  0.733693     -0.309664      -2.90645       2.90645       190.338       193.245    
  14  0.248504      -1.39230      -13.0679       13.0679       183.049       196.117    
  15  0.183808      -1.69387      -15.8983       15.8983       181.367       197.266    
  16  0.308674E-02  -5.78064      -54.2561       54.2561       188.988       243.244    
  17  0.651025     -0.429207      -4.02846       4.02846       191.182       195.210    
  18  0.864353     -0.145775      -1.36821       1.36821       192.862       194.230    
  19  0.547352     -0.602664      -5.65650       5.65650       184.667       190.323    
  20  0.631248     -0.460057      -4.31802       4.31802       181.591       185.909    
  21  0.344368E-01  -3.36863      -31.6174       31.6174       189.207       220.824    
  22  0.876828     -0.131444      -1.23371       1.23371       182.339       183.572    
  23  0.884538     -0.122690      -1.15155       1.15155       187.014       188.166    
  24  0.926808     -0.760084E-01 -0.713402      0.713402       189.965       190.678    
  25  0.823462     -0.194237      -1.82308       1.82308       194.632       196.455    
  26  0.852580     -0.159489      -1.49693       1.49693       188.461       189.958    
  27  0.577707     -0.548689      -5.14990       5.14990       189.338       194.488    
  28  0.510093     -0.673163      -6.31819       6.31819       194.535       200.853    
  29  0.890288     -0.116210      -1.09073       1.09073       191.774       192.865    
  30  0.304875      -1.18785      -11.1490       11.1490       193.963       205.112    
  31  0.152164      -1.88279      -17.6716       17.6716       183.173       200.844    
  32  0.718687     -0.330329      -3.10041       3.10041       190.026       193.127    
  33  0.488128     -0.717177      -6.73130       6.73130       188.593       195.324    
  34  0.373052     -0.986038      -9.25478       9.25478       197.890       207.145    
  35  0.247351      -1.39695      -13.1115       13.1115       190.528       203.640    
  36  0.532108     -0.630909      -5.92160       5.92160       190.408       196.329    
  37  0.828879E-02  -4.79285      -44.9849       44.9849       184.949       229.933    
  38  0.168277      -1.78214      -16.7269       16.7269       190.085       206.812    
  39  0.253216      -1.37351      -12.8916       12.8916       187.830       200.722    
  40  0.458588     -0.779602      -7.31721       7.31721       191.170       198.487    
  41  0.725692     -0.320630      -3.00937       3.00937       186.838       189.848    
  42  0.283543      -1.26039      -11.8298       11.8298       188.172       200.002    
  43  0.798055     -0.225578      -2.11724       2.11724       194.866       196.983    
  44  0.805371     -0.216453      -2.03159       2.03159       196.014       198.045    
  45  0.580747     -0.543441      -5.10064       5.10064       196.829       201.929    
  46  0.581119     -0.542799      -5.09462       5.09462       202.842       207.937    
  47  0.305196      -1.18680      -11.1391       11.1391       196.077       207.216    
  48  0.905702     -0.990454E-01 -0.929623      0.929623       191.170       192.099    
  49  0.265633E-01  -3.62822      -34.0539       34.0539       198.628       232.682    
  50  0.114529E-01  -4.46951      -41.9501       41.9501       206.028       247.978    
  51  0.990634     -0.941033E-02 -0.883238E-01  0.883238E-01   190.440       190.528    
  52  0.609564     -0.495011      -4.64609       4.64609       196.531       201.177    
  53  0.380905     -0.965204      -9.05924       9.05924       207.526       216.585    
  54  0.902244     -0.102870     -0.965523      0.965523       183.479       184.444    
  55  0.841859     -0.172142      -1.61570       1.61570       202.667       204.283    
  56  0.954561     -0.465036E-01 -0.436475      0.436475       208.927       209.363    
  57  0.637314     -0.450492      -4.22824       4.22824       194.808       199.037    
  58  0.224695      -1.49301      -14.0131       14.0131       184.656       198.669    
  59  0.537548     -0.620738      -5.82614       5.82614       196.339       202.165    
  60  0.271295      -1.30455      -12.2443       12.2443       201.853       214.097    
  61  0.524725E-02  -5.25005      -49.2761       49.2761       188.629       237.905    
  62  0.194770      -1.63594      -15.3546       15.3546       189.173       204.528    
  63  0.833225E-01  -2.48504      -23.3241       23.3241       212.336       235.660    
  64  0.195984      -1.62972      -15.2963       15.2963       210.105       225.401    
  65  0.232752      -1.45778      -13.6825       13.6825       194.390       208.073    
  66  0.101893      -2.28383      -21.4356       21.4356       200.026       221.461    
  67  0.955311     -0.457184E-01 -0.429105      0.429105       196.510       196.939    
  68  0.791211     -0.234190      -2.19807       2.19807       220.149       222.347    
  69  0.617608     -0.481901      -4.52304       4.52304       182.391       186.914    
  70  0.792156     -0.232997      -2.18687       2.18687       209.894       212.081    
  71  0.195697      -1.63119      -15.3100       15.3100       221.702       237.012    
  72  0.174438      -1.74618      -16.3894       16.3894       194.775       211.165    
  73  0.966870     -0.336914E-01 -0.316222      0.316222       178.702       179.018    
loop,thermsimp(1:2)       41   13.7503      0.144498    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    303        177.32          0.86          1.13         23.54          0.21          0.04         25.79
Just calling func    0   0         25.79


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    304        191.60          0.86          1.12         23.55          0.20          0.05         25.77
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    177.32
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    9.38583               361
loop is:       41
neval is:      303
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       41      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    75.0866      0.500000    
T0,tstep,tfreq (these do not change):             72
current SAtemp,tstepnext are:    9.38583               361
loop is:       42
neval is:      303


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      361
neval,tstepnext:      303     361

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.442958E-01  -3.11686      -29.2543       29.2543       178.702       207.956    
   2  0.196215      -1.62854      -15.2852       15.2852       182.994       198.280    
   3  0.501152     -0.690846      -6.48416       6.48416       182.376       188.860    
   4  0.288339      -1.24362      -11.6724       11.6724       182.339       194.011    
   5  0.773132     -0.257306      -2.41503       2.41503       183.479       185.894    
   6  0.417683     -0.873033      -8.19414       8.19414       181.591       189.785    
   7  0.229479      -1.47195      -13.8154       13.8154       182.391       196.207    
   8  0.964123     -0.365367E-01 -0.342927      0.342927       183.048       183.391    
   9  0.263782      -1.33263      -12.5079       12.5079       184.342       196.850    
  10  0.102960      -2.27342      -21.3379       21.3379       187.014       208.352    
  11  0.828790     -0.187788      -1.76255       1.76255       182.286       184.049    
  12  0.738697     -0.302868      -2.84266       2.84266       186.838       189.681    
  13  0.458595     -0.779589      -7.31708       7.31708       188.461       195.778    
  14  0.905176     -0.996260E-01 -0.935072      0.935072       184.667       185.602    
  15  0.147067      -1.91687      -17.9914       17.9914       176.615       194.606    
  16  0.142365      -1.94936      -18.2963       18.2963       184.702       202.998    
  17  0.483147     -0.727435      -6.82758       6.82758       190.440       197.268    
  18  0.640417     -0.445636      -4.18266       4.18266       189.965       194.148    
  19  0.719349     -0.329408      -3.09177       3.09177       191.170       194.262    
  20  0.714234     -0.336545      -3.15875       3.15875       186.996       190.154    
  21  0.825507     -0.191757      -1.79980       1.79980       191.774       193.574    
  22  0.155188      -1.86312      -17.4869       17.4869       190.026       207.513    
  23  0.248874      -1.39081      -13.0539       13.0539       190.338       203.392    
  24  0.107953      -2.22606      -20.8934       20.8934       192.862       213.755    
  25  0.349169      -1.05220      -9.87575       9.87575       189.338       199.214    
  26  0.967311     -0.332356E-01 -0.311944      0.311944       191.182       191.493    
  27  0.519506     -0.654877      -6.14657       6.14657       188.593       194.739    
  28  0.462662     -0.770758      -7.23420       7.23420       183.049       190.283    
  29  0.811438     -0.208948      -1.96115       1.96115       190.408       192.369    
  30  0.394710E-01  -3.23219      -30.3368       30.3368       194.632       224.969    
  31  0.482930     -0.727884      -6.83179       6.83179       188.080       194.912    
  32  0.520883     -0.652231      -6.12172       6.12172       196.510       202.632    
  33  0.980978E-01  -2.32179      -21.7919       21.7919       194.866       216.658    
  34  0.626549     -0.467529      -4.38815       4.38815       181.367       185.755    
  35  0.618402     -0.480616      -4.51098       4.51098       196.014       200.525    
  36  0.681438     -0.383550      -3.59993       3.59993       191.170       194.770    
  37  0.816820     -0.202336      -1.89909       1.89909       184.656       186.555    
  38  0.578487     -0.547340      -5.13724       5.13724       184.209       189.346    
  39  0.349734      -1.05058      -9.86058       9.86058       194.808       204.669    
  40  0.945672     -0.558596E-01 -0.524288      0.524288       188.172       188.697    
  41  0.767680     -0.264382      -2.48144       2.48144       187.830       190.312    
  42  0.122064      -2.10321      -19.7403       19.7403       183.173       202.913    
  43  0.211623      -1.55295      -14.5757       14.5757       194.535       209.111    
  44  0.969992E-01  -2.33305      -21.8976       21.8976       196.531       218.429    
  45  0.877482     -0.130699      -1.22672       1.22672       196.829       198.055    
  46  0.448991     -0.800752      -7.51572       7.51572       196.339       203.854    
  47  0.833113     -0.182586      -1.71372       1.71372       190.528       192.242    
  48  0.691765     -0.368508      -3.45876       3.45876       202.667       206.126    
  49  0.310664      -1.16904      -10.9724       10.9724       183.150       194.123    
  50  0.422283     -0.862080      -8.09133       8.09133       189.173       197.265    
  51  0.382184E-01  -3.26444      -30.6395       30.6395       193.963       224.602    
  52  0.679614E-01  -2.68882      -25.2368       25.2368       190.085       215.322    
  53  0.580404     -0.544031      -5.10618       5.10618       190.639       195.745    
  54  0.887981     -0.118805      -1.11508       1.11508       197.890       199.006    
  55  0.540749     -0.614799      -5.77040       5.77040       196.077       201.847    
  56  0.749712     -0.288066      -2.70373       2.70373       202.842       205.546    
  57  0.428385     -0.847733      -7.95668       7.95668       194.390       202.347    
  58  0.271790      -1.30272      -12.2271       12.2271       208.927       221.154    
  59  0.317865      -1.14613      -10.7574       10.7574       194.775       205.533    
  60  0.855566     -0.155992      -1.46412       1.46412       209.894       211.358    
  61  0.153120      -1.87653      -17.6128       17.6128       201.853       219.465    
  62  0.507684     -0.677896      -6.36262       6.36262       207.526       213.889    
  63  0.270723      -1.30666      -12.2641       12.2641       189.207       201.471    
  64  0.721736     -0.326096      -3.06068       3.06068       200.026       203.086    
  65  0.707323     -0.346268      -3.25001       3.25001       220.149       223.399    
  66  0.420146     -0.867152      -8.13894       8.13894       210.105       218.244    
  67  0.782833     -0.244836      -2.29799       2.29799       184.949       187.246    
  68  0.835529     -0.179691      -1.68654       1.68654       198.628       200.315    
  69  0.267477      -1.31872      -12.3773       12.3773       212.336       224.713    
  70  0.512596     -0.668267      -6.27224       6.27224       221.702       227.974    
  71  0.967143     -0.334090E-01 -0.313571      0.313571       188.629       188.943    
  72  0.528135     -0.638402      -5.99193       5.99193       188.988       194.980    
  73  0.970249     -0.302028E-01 -0.283479      0.283479       177.322       177.605    
loop,thermsimp(1:2)       42   29.2543       15.2852    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    305        190.28          0.86          1.13         23.49          0.23          0.04         25.76
Just calling func    0   0         25.76


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    190.28
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    9.38583               361
loop is:       42
neval is:      304
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       42      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    75.0866      0.500000    
T0,tstep,tfreq (these do not change):             72
current SAtemp,tstepnext are:    9.38583               361
loop is:       43
neval is:      304


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      361
neval,tstepnext:      304     361

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.298594      -1.20867      -11.3444       11.3444       177.322       188.666    
   2  0.383173     -0.959268      -9.00352       9.00352       183.048       192.052    
   3  0.386205     -0.951387      -8.92955       8.92955       182.286       191.216    
   4  0.362178      -1.01562      -9.53242       9.53242       184.667       194.199    
   5  0.394462     -0.930233      -8.73101       8.73101       181.367       190.098    
   6  0.883072     -0.124349      -1.16712       1.16712       183.479       184.646    
   7  0.571477     -0.559531      -5.25166       5.25166       184.656       189.908    
   8  0.944036     -0.575912E-01 -0.540541      0.540541       184.949       185.489    
   9  0.326573      -1.11910      -10.5037       10.5037       188.172       198.676    
  10  0.467297     -0.760791      -7.14065       7.14065       182.376       189.516    
  11  0.828365     -0.188301      -1.76736       1.76736       188.629       190.396    
  12  0.826991     -0.189962      -1.78295       1.78295       184.209       185.992    
  13  0.675447E-01  -2.69497      -25.2945       25.2945       186.838       212.133    
  14  0.924113     -0.789214E-01 -0.740742      0.740742       181.591       182.331    
  15  0.810131     -0.210560      -1.97628       1.97628       186.996       188.972    
  16  0.410286     -0.890900      -8.36183       8.36183       183.049       191.410    
  17  0.334977      -1.09369      -10.2652       10.2652       187.830       198.096    
  18  0.119017      -2.12849      -19.9776       19.9776       191.182       211.159    
  19  0.447328     -0.804463      -7.55055       7.55055       190.528       198.079    
  20  0.324388E-02  -5.73098      -53.7900       53.7900       190.408       244.198    
  21  0.158272      -1.84344      -17.3022       17.3022       191.774       209.076    
  22  0.241219      -1.42205      -13.3471       13.3471       182.339       195.686    
  23  0.259790      -1.34788      -12.6510       12.6510       183.150       195.801    
  24  0.521973     -0.650139      -6.10209       6.10209       189.965       196.067    
  25  0.336335      -1.08965      -10.2272       10.2272       191.170       201.397    
  26  0.642248     -0.442780      -4.15586       4.15586       176.615       180.771    
  27  0.984615     -0.155047E-01 -0.145524      0.145524       188.593       188.738    
  28  0.373782     -0.984082      -9.23643       9.23643       191.170       200.406    
  29  0.932479     -0.699087E-01 -0.656151      0.656151       188.080       188.737    
  30  0.711360     -0.340577      -3.19660       3.19660       188.988       192.185    
  31  0.315363      -1.15403      -10.8315       10.8315       190.639       201.471    
  32  0.528583     -0.637556      -5.98399       5.98399       188.461       194.445    
  33  0.622355E-01  -2.77683      -26.0628       26.0628       182.391       208.454    
  34  0.144849      -1.93206      -18.1340       18.1340       184.342       202.476    
  35  0.868928     -0.140495      -1.31866       1.31866       189.173       190.492    
  36  0.243398      -1.41306      -13.2627       13.2627       190.440       203.703    
  37  0.936928     -0.651491E-01 -0.611479      0.611479       196.829       197.440    
  38  0.979804E-01  -2.32299      -21.8032       21.8032       182.994       204.797    
  39  0.805773     -0.215953      -2.02689       2.02689       197.890       199.917    
  40  0.210751      -1.55708      -14.6145       14.6145       189.338       203.952    
  41  0.497104     -0.698956      -6.56028       6.56028       198.628       205.189    
  42  0.532106     -0.630913      -5.92164       5.92164       196.014       201.935    
  43  0.898420     -0.107117      -1.00538       1.00538       189.207       190.212    
  44  0.579370     -0.545814      -5.12291       5.12291       196.077       201.200    
  45  0.191213      -1.65437      -15.5276       15.5276       194.390       209.918    
  46  0.491633     -0.710023      -6.66416       6.66416       196.510       203.174    
  47  0.989123     -0.109370E-01 -0.102653      0.102653       183.173       183.275    
  48  0.576855     -0.550164      -5.16374       5.16374       184.702       189.866    
  49  0.133368      -2.01464      -18.9091       18.9091       200.026       218.935    
  50  0.708426     -0.344710      -3.23538       3.23538       190.338       193.574    
  51  0.183469      -1.69571      -15.9156       15.9156       196.339       212.254    
  52  0.951201     -0.500300E-01 -0.469573      0.469573       194.808       195.278    
  53  0.380646E-01  -3.26847      -30.6773       30.6773       194.775       225.452    
  54  0.575108     -0.553198      -5.19222       5.19222       202.842       208.034    
  55  0.136357E-01  -4.29506      -40.3127       40.3127       202.667       242.980    
  56  0.665821E-01  -2.70932      -25.4292       25.4292       190.026       215.455    
  57  0.885471     -0.121635      -1.14165       1.14165       178.702       179.843    
  58  0.213600E-01  -3.84624      -36.1001       36.1001       187.014       223.114    
  59  0.740349     -0.300634      -2.82170       2.82170       194.535       197.357    
  60  0.290679      -1.23553      -11.5965       11.5965       209.894       221.491    
  61  0.895680     -0.110173      -1.03406       1.03406       192.862       193.896    
  62  0.956670     -0.442971E-01 -0.415765      0.415765       207.526       207.942    
  63  0.196231      -1.62846      -15.2845       15.2845       190.085       205.370    
  64  0.279139      -1.27605      -11.9768       11.9768       194.866       206.843    
  65  0.686055     -0.376797      -3.53656       3.53656       210.105       213.642    
  66  0.798228     -0.225361      -2.11520       2.11520       196.531       198.646    
  67  0.898321     -0.107228      -1.00642       1.00642       201.853       202.859    
  68  0.764857     -0.268067      -2.51603       2.51603       208.927       211.443    
  69  0.330164      -1.10817      -10.4011       10.4011       220.149       230.550    
  70  0.598170     -0.513879      -4.82318       4.82318       193.963       198.786    
  71  0.810123     -0.210569      -1.97637       1.97637       212.336       214.312    
  72  0.351685      -1.04502      -9.80838       9.80838       194.632       204.441    
  73  0.586228     -0.534047      -5.01247       5.01247       190.284       195.297    
loop,thermsimp(1:2)       43   11.3444       9.00352    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    306        189.77          0.86          1.12         23.54          0.20          0.04         25.77
Just calling func    0   0         25.77


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    189.77
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    9.38583               361
loop is:       43
neval is:      305
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       43      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    75.0866      0.500000    
T0,tstep,tfreq (these do not change):             72
current SAtemp,tstepnext are:    9.38583               361
loop is:       44
neval is:      305


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      361
neval,tstepnext:      305     361

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.287044      -1.24812      -11.7146       11.7146       178.702       190.416    
   2  0.260243      -1.34614      -12.6346       12.6346       176.615       189.250    
   3  0.646915     -0.435540      -4.08790       4.08790       181.591       185.678    
   4  0.572447     -0.557835      -5.23574       5.23574       183.173       188.409    
   5  0.105907      -2.24520      -21.0730       21.0730       183.479       204.552    
   6  0.693038     -0.366671      -3.44151       3.44151       184.949       188.390    
   7  0.329408      -1.11046      -10.4226       10.4226       184.209       194.631    
   8  0.187221      -1.67546      -15.7256       15.7256       177.322       193.048    
   9  0.545731     -0.605630      -5.68433       5.68433       188.080       193.765    
  10  0.752820     -0.283930      -2.66492       2.66492       188.593       191.258    
  11  0.153542      -1.87378      -17.5870       17.5870       186.996       204.583    
  12  0.400659     -0.914645      -8.58470       8.58470       182.376       190.960    
  13  0.306182      -1.18357      -11.1088       11.1088       184.702       195.811    
  14  0.270957E-01  -3.60838      -33.8676       33.8676       184.656       218.524    
  15  0.776765     -0.252618      -2.37103       2.37103       181.367       183.738    
  16  0.711945     -0.339755      -3.18888       3.18888       189.207       192.396    
  17  0.217190      -1.52698      -14.3320       14.3320       188.629       202.961    
  18  0.285226      -1.25447      -11.7743       11.7743       189.173       200.948    
  19  0.348904      -1.05296      -9.88289       9.88289       182.286       192.169    
  20  0.686414     -0.376275      -3.53165       3.53165       183.049       186.580    
  21  0.212825      -1.54729      -14.5226       14.5226       183.048       197.571    
  22  0.501697     -0.689760      -6.47396       6.47396       188.988       195.462    
  23  0.363771      -1.01123      -9.49124       9.49124       190.338       199.829    
  24  0.789273     -0.236642      -2.22109       2.22109       192.862       195.083    
  25  0.232884      -1.45721      -13.6771       13.6771       184.667       198.344    
  26  0.754896     -0.281175      -2.63906       2.63906       188.461       191.100    
  27  0.639358     -0.447290      -4.19819       4.19819       194.808       199.007    
  28  0.532505     -0.630163      -5.91460       5.91460       190.284       196.199    
  29  0.759813     -0.274683      -2.57813       2.57813       182.339       184.917    
  30  0.768360     -0.263497      -2.47314       2.47314       183.150       185.623    
  31  0.245116      -1.40602      -13.1967       13.1967       189.965       203.162    
  32  0.672517     -0.396727      -3.72361       3.72361       194.535       198.259    
  33  0.910675     -0.935691E-01 -0.878223      0.878223       196.829       197.707    
  34  0.441618     -0.817310      -7.67113       7.67113       190.528       198.199    
  35  0.212980      -1.54656      -14.5157       14.5157       187.830       202.346    
  36  0.471690     -0.751434      -7.05283       7.05283       196.531       203.584    
  37  0.968545     -0.319606E-01 -0.299977      0.299977       188.172       188.472    
  38  0.711169     -0.340845      -3.19911       3.19911       193.963       197.162    
  39  0.222170      -1.50431      -14.1192       14.1192       197.890       212.010    
  40  0.896100     -0.109703      -1.02966       1.02966       191.170       192.200    
  41  0.898054     -0.107525      -1.00921       1.00921       196.077       197.086    
  42  0.981364     -0.188122E-01 -0.176568      0.176568       191.170       191.346    
  43  0.238126      -1.43496      -13.4682       13.4682       190.639       204.107    
  44  0.884882     -0.122301      -1.14790       1.14790       196.014       197.162    
  45  0.206421      -1.57784      -14.8093       14.8093       184.342       199.151    
  46  0.421939     -0.862894      -8.09898       8.09898       201.853       209.952    
  47  0.334170E-01  -3.39869      -31.8995       31.8995       196.510       228.410    
  48  0.940374     -0.614772E-01 -0.577014      0.577014       190.440       191.017    
  49  0.119361      -2.12561      -19.9506       19.9506       189.338       209.288    
  50  0.493355     -0.706527      -6.63134       6.63134       194.632       201.263    
  51  0.239498      -1.42921      -13.4143       13.4143       182.994       196.409    
  52  0.779094     -0.249623      -2.34292       2.34292       198.628       200.971    
  53  0.993851     -0.616759E-02 -0.578879E-01  0.578879E-01   190.085       190.143    
  54  0.680666     -0.384683      -3.61057       3.61057       194.866       198.477    
  55  0.861145     -0.149492      -1.40310       1.40310       207.526       208.929    
  56  0.679030     -0.387090      -3.63316       3.63316       202.842       206.475    
  57  0.568731E-01  -2.86693      -26.9085       26.9085       182.391       209.300    
  58  0.342751      -1.07075      -10.0499       10.0499       191.774       201.824    
  59  0.929483     -0.731270E-01 -0.686357      0.686357       194.390       195.077    
  60  0.287616      -1.24613      -11.6960       11.6960       191.182       202.877    
  61  0.622582     -0.473881      -4.44776       4.44776       208.927       213.375    
  62  0.449193     -0.800303      -7.51151       7.51151       186.838       194.350    
  63  0.746100     -0.292896      -2.74907       2.74907       196.339       199.088    
  64  0.783595     -0.243863      -2.28885       2.28885       210.105       212.394    
  65  0.447963     -0.803044      -7.53723       7.53723       212.336       219.873    
  66  0.788663     -0.237416      -2.22835       2.22835       190.026       192.254    
  67  0.445514     -0.808528      -7.58870       7.58870       200.026       207.614    
  68  0.174611      -1.74519      -16.3801       16.3801       209.894       226.274    
  69  0.891268E-01  -2.41769      -22.6921       22.6921       187.014       209.706    
  70  0.279672      -1.27414      -11.9588       11.9588       194.775       206.734    
  71  0.700166     -0.356438      -3.34547       3.34547       220.149       223.495    
  72  0.269233      -1.31218      -12.3159       12.3159       202.667       214.983    
  73  0.631814     -0.459159      -4.30959       4.30959       189.767       194.077    
loop,thermsimp(1:2)       44   11.7146       12.6346    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    307        176.19          0.86          1.12         23.52          0.20          0.05         25.75
Just calling func    0   0         25.75


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    308        205.42          0.85          1.13         23.53          0.19          0.05         25.75
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    176.19
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    9.38583               361
loop is:       44
neval is:      307
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       44      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    75.0866      0.500000    
T0,tstep,tfreq (these do not change):             72
current SAtemp,tstepnext are:    9.38583               361
loop is:       45
neval is:      307


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      361
neval,tstepnext:      307     361

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.204302      -1.58816      -14.9062       14.9062       181.367       196.273    
   2  0.455846E-01  -3.08818      -28.9852       28.9852       182.339       211.324    
   3  0.655807     -0.421889      -3.95977       3.95977       183.150       187.110    
   4  0.902989     -0.102045     -0.957778      0.957778       181.591       182.548    
   5  0.826012     -0.191146      -1.79406       1.79406       183.049       184.843    
   6  0.160871      -1.82715      -17.1493       17.1493       184.949       202.098    
   7  0.516410     -0.660854      -6.20266       6.20266       183.173       189.375    
   8  0.506939     -0.679364      -6.37639       6.37639       188.172       194.549    
   9  0.728359     -0.316962      -2.97495       2.97495       176.615       179.590    
  10  0.453162     -0.791506      -7.42893       7.42893       190.085       197.514    
  11  0.837994     -0.176745      -1.65889       1.65889       178.702       180.361    
  12  0.118024      -2.13686      -20.0562       20.0562       182.376       202.432    
  13  0.274030      -1.29452      -12.1501       12.1501       190.440       202.590    
  14  0.402227     -0.910738      -8.54803       8.54803       188.461       197.009    
  15  0.444245     -0.811380      -7.61547       7.61547       188.593       196.208    
  16  0.594880     -0.519396      -4.87496       4.87496       191.170       196.045    
  17  0.548806     -0.600010      -5.63159       5.63159       182.286       187.918    
  18  0.222827      -1.50136      -14.0915       14.0915       191.170       205.262    
  19  0.152541      -1.88032      -17.6484       17.6484       190.026       207.674    
  20  0.816533     -0.202688      -1.90239       1.90239       189.207       191.109    
  21  0.525417     -0.643564      -6.04038       6.04038       177.322       183.362    
  22  0.661450     -0.413320      -3.87935       3.87935       188.080       191.960    
  23  0.437535     -0.826598      -7.75830       7.75830       189.767       197.526    
  24  0.464442     -0.766918      -7.19816       7.19816       186.838       194.037    
  25  0.683975     -0.379834      -3.56505       3.56505       184.209       187.774    
  26  0.407919     -0.896688      -8.41615       8.41615       194.390       202.806    
  27  0.934669     -0.675632E-01 -0.634136      0.634136       192.862       193.496    
  28  0.866891     -0.142842      -1.34069       1.34069       188.988       190.329    
  29  0.145435E-01  -4.23061      -39.7078       39.7078       184.702       224.410    
  30  0.514599     -0.664368      -6.23564       6.23564       190.284       196.520    
  31  0.370591     -0.992656      -9.31690       9.31690       182.994       192.311    
  32  0.251726      -1.37941      -12.9469       12.9469       196.077       209.024    
  33  0.959470     -0.413742E-01 -0.388331      0.388331       196.014       196.402    
  34  0.344885E-01  -3.36713      -31.6033       31.6033       193.963       225.566    
  35  0.348690      -1.05357      -9.88866       9.88866       183.048       192.937    
  36  0.610898     -0.492826      -4.62558       4.62558       196.829       201.454    
  37  0.440567     -0.819693      -7.69350       7.69350       190.528       198.222    
  38  0.340409      -1.07761      -10.1142       10.1142       194.535       204.649    
  39  0.345015E-01  -3.36675      -31.5998       31.5998       184.667       216.266    
  40  0.667224     -0.404630      -3.79779       3.79779       194.866       198.664    
  41  0.138336      -1.97807      -18.5658       18.5658       194.808       213.374    
  42  0.412023     -0.886676      -8.32219       8.32219       196.339       204.661    
  43  0.578410     -0.547473      -5.13848       5.13848       184.342       189.480    
  44  0.972817     -0.275594E-01 -0.258668      0.258668       190.338       190.597    
  45  0.152341      -1.88163      -17.6607       17.6607       189.173       206.834    
  46  0.764264     -0.268842      -2.52330       2.52330       198.628       201.152    
  47  0.898082E-01  -2.41008      -22.6206       22.6206       194.632       217.253    
  48  0.205097      -1.58427      -14.8697       14.8697       191.774       206.644    
  49  0.249611E-01  -3.69044      -34.6378       34.6378       187.830       222.468    
  50  0.999211     -0.789000E-03 -0.740541E-02  0.740541E-02   191.182       191.189    
  51  0.622898E-01  -2.77596      -26.0547       26.0547       188.629       214.684    
  52  0.588779     -0.529705      -4.97172       4.97172       189.965       194.937    
  53  0.395562     -0.927447      -8.70486       8.70486       196.531       205.236    
  54  0.213371      -1.54472      -14.4985       14.4985       190.639       205.138    
  55  0.801544     -0.221215      -2.07629       2.07629       183.479       185.555    
  56  0.392036     -0.936401      -8.78890       8.78890       186.996       195.784    
  57  0.504835     -0.683524      -6.41544       6.41544       202.842       209.257    
  58  0.389514     -0.942856      -8.84948       8.84948       194.775       203.625    
  59  0.694006     -0.365275      -3.42841       3.42841       200.026       203.454    
  60  0.220113      -1.51361      -14.2065       14.2065       207.526       221.732    
  61  0.548334     -0.600870      -5.63967       5.63967       189.338       194.977    
  62  0.490082     -0.713183      -6.69381       6.69381       182.391       189.085    
  63  0.315187      -1.15459      -10.8368       10.8368       187.014       197.851    
  64  0.454028     -0.789596      -7.41102       7.41102       201.853       209.264    
  65  0.617612     -0.481894      -4.52297       4.52297       197.890       202.413    
  66  0.446806     -0.805630      -7.56150       7.56150       210.105       217.667    
  67  0.907640     -0.969076E-01 -0.909558      0.909558       208.927       209.837    
  68  0.508446     -0.676396      -6.34853       6.34853       202.667       209.016    
  69  0.552574     -0.593168      -5.56737       5.56737       184.656       190.223    
  70  0.716954     -0.332744      -3.12307       3.12307       212.336       215.459    
  71  0.414283     -0.881205      -8.27084       8.27084       220.149       228.420    
  72  0.320057      -1.13926      -10.6929       10.6929       209.894       220.587    
  73  0.154914      -1.86488      -17.5035       17.5035       176.192       193.696    
loop,thermsimp(1:2)       45   14.9062       28.9852    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    309        188.59          0.86          1.12         23.67          0.11          0.05         25.82
Just calling func    0   0         25.82


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    188.59
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    9.38583               361
loop is:       45
neval is:      308
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       45      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    75.0866      0.500000    
T0,tstep,tfreq (these do not change):             72
current SAtemp,tstepnext are:    9.38583               361
loop is:       46
neval is:      308


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      361
neval,tstepnext:      308     361

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.794521     -0.230016      -2.15889       2.15889       176.615       178.774    
   2  0.338444      -1.08340      -10.1686       10.1686       178.702       188.870    
   3  0.563800     -0.573055      -5.37860       5.37860       181.591       186.969    
   4  0.295284      -1.21982      -11.4490       11.4490       177.322       188.771    
   5  0.506481     -0.680269      -6.38488       6.38488       183.049       189.434    
   6  0.345803      -1.06189      -9.96669       9.96669       183.479       193.446    
   7  0.741641     -0.298890      -2.80533       2.80533       183.150       185.955    
   8  0.182310      -1.70204      -15.9751       15.9751       184.209       200.184    
   9  0.315187      -1.15459      -10.8368       10.8368       182.286       193.123    
  10  0.598844     -0.512755      -4.81263       4.81263       182.391       187.204    
  11  0.659119     -0.416852      -3.91250       3.91250       183.173       187.085    
  12  0.247481      -1.39642      -13.1066       13.1066       184.342       197.448    
  13  0.255298      -1.36532      -12.8147       12.8147       184.656       197.471    
  14  0.876488     -0.131833      -1.23736       1.23736       188.988       190.226    
  15  0.358010      -1.02719      -9.64107       9.64107       190.338       199.979    
  16  0.317480      -1.14734      -10.7687       10.7687       189.207       199.975    
  17  0.153422      -1.87456      -17.5943       17.5943       191.182       208.776    
  18  0.296162      -1.21685      -11.4211       11.4211       188.080       199.502    
  19  0.629760     -0.462417      -4.34016       4.34016       182.994       187.334    
  20  0.458345E-01  -3.08272      -28.9339       28.9339       183.048       211.982    
  21  0.209534      -1.56287      -14.6688       14.6688       192.862       207.530    
  22  0.490210E-01  -3.01551      -28.3030       28.3030       176.192       204.495    
  23  0.144817      -1.93229      -18.1361       18.1361       186.838       204.975    
  24  0.764061     -0.269107      -2.52580       2.52580       188.172       190.698    
  25  0.158664      -1.84097      -17.2790       17.2790       189.965       207.244    
  26  0.242818      -1.41544      -13.2851       13.2851       189.338       202.623    
  27  0.779950     -0.248525      -2.33261       2.33261       186.996       189.328    
  28  0.763580     -0.269737      -2.53171       2.53171       191.170       193.702    
  29  0.817639     -0.201335      -1.88969       1.88969       188.593       190.482    
  30  0.656802     -0.420373      -3.94555       3.94555       181.367       185.313    
  31  0.202192      -1.59854      -15.0036       15.0036       196.014       211.017    
  32  0.469647     -0.755773      -7.09356       7.09356       190.284       197.378    
  33  0.107456      -2.23067      -20.9367       20.9367       188.461       209.397    
  34  0.709118     -0.343734      -3.22623       3.22623       190.085       193.311    
  35  0.988480     -0.115868E-01 -0.108752      0.108752       189.767       189.876    
  36  0.645173     -0.438236      -4.11321       4.11321       187.014       191.127    
  37  0.583143     -0.539322      -5.06199       5.06199       190.528       195.590    
  38  0.276552E-01  -3.58794      -33.6758       33.6758       194.866       228.542    
  39  0.560517     -0.578896      -5.43342       5.43342       198.628       204.062    
  40  0.292779      -1.22834      -11.5290       11.5290       196.829       208.357    
  41  0.486207     -0.721121      -6.76831       6.76831       184.949       191.717    
  42  0.379142E-01  -3.27243      -30.7144       30.7144       197.890       228.605    
  43  0.459895     -0.776757      -7.29050       7.29050       182.376       189.666    
  44  0.810771     -0.209769      -1.96886       1.96886       190.440       192.409    
  45  0.189138      -1.66528      -15.6300       15.6300       194.390       210.020    
  46  0.509870     -0.673599      -6.32228       6.32228       200.026       206.348    
  47  0.468020E-01  -3.06183      -28.7378       28.7378       194.775       223.513    
  48  0.568404     -0.564922      -5.30226       5.30226       194.535       199.837    
  49  0.891250     -0.115130      -1.08059       1.08059       196.339       197.419    
  50  0.415261     -0.878849      -8.24872       8.24872       190.639       198.888    
  51  0.714019     -0.336846      -3.16158       3.16158       196.531       199.693    
  52  0.606207     -0.500534      -4.69792       4.69792       191.170       195.868    
  53  0.106011      -2.24421      -21.0638       21.0638       191.774       212.838    
  54  0.330348      -1.10761      -10.3958       10.3958       189.173       199.569    
  55  0.773475     -0.256862      -2.41087       2.41087       190.026       192.437    
  56  0.721841     -0.325951      -3.05932       3.05932       202.667       205.727    
  57  0.714980     -0.335501      -3.14896       3.14896       196.077       199.226    
  58  0.616486     -0.483719      -4.54010       4.54010       202.842       207.382    
  59  0.885098     -0.122057      -1.14560       1.14560       201.853       202.998    
  60  0.463686     -0.768549      -7.21347       7.21347       208.927       216.140    
  61  0.912951     -0.910727E-01 -0.854792      0.854792       182.339       183.193    
  62  0.819534     -0.199020      -1.86796       1.86796       194.808       196.676    
  63  0.771708     -0.259149      -2.43233       2.43233       188.629       191.061    
  64  0.812091E-03  -7.11590      -66.7886       66.7886       212.336       279.124    
  65  0.880919     -0.126790      -1.19002       1.19002       184.667       185.857    
  66  0.552031     -0.594151      -5.57659       5.57659       194.632       200.209    
  67  0.134353      -2.00729      -18.8400       18.8400       210.105       228.945    
  68  0.410649     -0.890016      -8.35353       8.35353       209.894       218.248    
  69  0.258019      -1.35472      -12.7152       12.7152       207.526       220.241    
  70  0.808143     -0.213016      -1.99933       1.99933       187.830       189.830    
  71  0.635973     -0.452599      -4.24802       4.24802       184.702       188.950    
  72  0.517431     -0.658879      -6.18412       6.18412       193.963       200.147    
  73  0.418067     -0.872114      -8.18552       8.18552       188.594       196.780    
loop,thermsimp(1:2)       46   2.15889       10.1686    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    310        186.72          0.87          1.12         23.53          0.21          0.05         25.78
Just calling func    0   0         25.78


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    311        221.96          0.86          1.13         23.53          0.25          0.05         25.82
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    186.72
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    9.38583               361
loop is:       46
neval is:      310
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       46      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    75.0866      0.500000    
T0,tstep,tfreq (these do not change):             72
current SAtemp,tstepnext are:    9.38583               361
loop is:       47
neval is:      310


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      361
neval,tstepnext:      310     361

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.652512     -0.426926      -4.00705       4.00705       176.615       180.622    
   2  0.474910     -0.744630      -6.98897       6.98897       182.339       189.328    
   3  0.125725      -2.07366      -19.4630       19.4630       181.367       200.830    
   4  0.950967     -0.502756E-01 -0.471878      0.471878       184.667       185.139    
   5  0.562475     -0.575409      -5.40069       5.40069       183.150       188.551    
   6  0.728528     -0.316729      -2.97276       2.97276       181.591       184.563    
   7  0.326058      -1.12068      -10.5185       10.5185       183.173       193.691    
   8  0.460979     -0.774402      -7.26840       7.26840       182.391       189.660    
   9  0.186861      -1.67739      -15.7437       15.7437       182.994       198.738    
  10  0.737773     -0.304119      -2.85441       2.85441       177.322       180.176    
  11  0.254524      -1.36836      -12.8432       12.8432       178.702       191.545    
  12  0.475390     -0.743621      -6.97949       6.97949       184.702       191.682    
  13  0.783107     -0.244486      -2.29470       2.29470       186.996       189.290    
  14  0.615536     -0.485261      -4.55458       4.55458       183.049       187.603    
  15  0.600710E-01  -2.81223      -26.3951       26.3951       182.376       208.771    
  16  0.834417     -0.181022      -1.69904       1.69904       187.830       189.529    
  17  0.270355      -1.30802      -12.2769       12.2769       189.767       202.044    
  18  0.408387     -0.895540      -8.40538       8.40538       188.988       197.394    
  19  0.248286      -1.39318      -13.0761       13.0761       188.593       201.669    
  20  0.586808E-01  -2.83564      -26.6148       26.6148       188.172       214.787    
  21  0.747050     -0.291623      -2.73713       2.73713       188.629       191.366    
  22  0.261869E-01  -3.64250      -34.1878       34.1878       187.014       221.202    
  23  0.495813     -0.701557      -6.58469       6.58469       184.949       191.533    
  24  0.600032     -0.510772      -4.79402       4.79402       190.440       195.234    
  25  0.936456     -0.656531E-01 -0.616209      0.616209       190.026       190.642    
  26  0.583260     -0.539121      -5.06010       5.06010       182.286       187.347    
  27  0.994266     -0.575021E-02 -0.539705E-01  0.539705E-01   190.085       190.139    
  28  0.149755      -1.89876      -17.8214       17.8214       183.479       201.300    
  29  0.751239     -0.286032      -2.68464       2.68464       191.170       193.854    
  30  0.703931     -0.351075      -3.29513       3.29513       190.528       193.823    
  31  0.998476     -0.152564E-02 -0.143194E-01  0.143194E-01   191.170       191.184    
  32  0.501495     -0.690161      -6.47773       6.47773       194.808       201.286    
  33  0.446468     -0.806387      -7.56860       7.56860       188.594       196.163    
  34  0.321376      -1.13514      -10.6543       10.6543       190.284       200.938    
  35  0.850901     -0.161459      -1.51543       1.51543       196.339       197.854    
  36  0.975881     -0.244142E-01 -0.229147      0.229147       184.342       184.571    
  37  0.386316     -0.951100      -8.92686       8.92686       184.656       193.583    
  38  0.782734     -0.244962      -2.29917       2.29917       190.639       192.938    
  39  0.142678      -1.94716      -18.2757       18.2757       196.077       214.352    
  40  0.509914     -0.673514      -6.32148       6.32148       188.080       194.402    
  41  0.211111      -1.55537      -14.5984       14.5984       189.173       203.772    
  42  0.212538      -1.54864      -14.5352       14.5352       196.531       211.066    
  43  0.889982     -0.116555      -1.09396       1.09396       194.535       195.629    
  44  0.769070     -0.262573      -2.46447       2.46447       189.207       191.671    
  45  0.792434     -0.232646      -2.18358       2.18358       190.338       192.522    
  46  0.250220E-01  -3.68800      -34.6149       34.6149       193.963       228.578    
  47  0.190304      -1.65913      -15.5723       15.5723       184.209       199.781    
  48  0.579595     -0.545425      -5.11927       5.11927       194.632       199.751    
  49  0.373376     -0.985170      -9.24663       9.24663       189.338       198.584    
  50  0.933620E-01  -2.37127      -22.2563       22.2563       201.853       224.109    
  51  0.628243     -0.464828      -4.36279       4.36279       198.628       202.991    
  52  0.737857     -0.304005      -2.85334       2.85334       176.192       179.046    
  53  0.430189     -0.843530      -7.91723       7.91723       186.838       194.756    
  54  0.957397     -0.435375E-01 -0.408635      0.408635       202.667       203.076    
  55  0.388126     -0.946424      -8.88297       8.88297       200.026       208.909    
  56  0.989586     -0.104686E-01 -0.982568E-01  0.982568E-01   189.965       190.063    
  57  0.754642     -0.281511      -2.64222       2.64222       202.842       205.484    
  58  0.404023E-01  -3.20887      -30.1179       30.1179       192.862       222.979    
  59  0.298112      -1.21029      -11.3595       11.3595       196.829       208.188    
  60  0.915557     -0.882223E-01 -0.828039      0.828039       191.182       192.010    
  61  0.205580E-01  -3.88450      -36.4593       36.4593       188.461       224.920    
  62  0.883530     -0.123830      -1.16225       1.16225       194.390       195.553    
  63  0.776014     -0.253585      -2.38010       2.38010       196.014       198.394    
  64  0.755316     -0.280619      -2.63384       2.63384       183.048       185.682    
  65  0.912949     -0.910754E-01 -0.854818      0.854818       191.774       192.629    
  66  0.262008      -1.33938      -12.5712       12.5712       208.927       221.498    
  67  0.636818     -0.451272      -4.23556       4.23556       209.894       214.130    
  68  0.545112     -0.606763      -5.69497       5.69497       207.526       213.221    
  69  0.261545      -1.34115      -12.5878       12.5878       194.775       207.363    
  70  0.375676     -0.979027      -9.18898       9.18898       194.866       204.055    
  71  0.160262      -1.83095      -17.1849       17.1849       197.890       215.075    
  72  0.113292      -2.17779      -20.4403       20.4403       210.105       230.546    
  73  0.528621     -0.637484      -5.98331       5.98331       186.718       192.701    
loop,thermsimp(1:2)       47   4.00705       6.98897    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    312        186.98          0.86          1.13         23.54          0.20          0.05         25.78
Just calling func    0   0         25.78


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    313        217.46          0.86          1.13         23.47          0.34          0.05         25.85
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    186.98
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    9.38583               361
loop is:       47
neval is:      312
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       47      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    75.0866      0.500000    
T0,tstep,tfreq (these do not change):             72
current SAtemp,tstepnext are:    9.38583               361
loop is:       48
neval is:      312


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      361
neval,tstepnext:      312     361

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.316013      -1.15197      -10.8122       10.8122       176.192       187.005    
   2  0.452730     -0.792459      -7.43788       7.43788       177.322       184.760    
   3  0.463916     -0.768051      -7.20880       7.20880       176.615       183.824    
   4  0.531172E-01  -2.93526      -27.5498       27.5498       181.591       209.140    
   5  0.933113     -0.692290E-01 -0.649771      0.649771       184.342       184.992    
   6  0.107612      -2.22922      -20.9231       20.9231       184.667       205.590    
   7  0.228017      -1.47833      -13.8754       13.8754       183.048       196.924    
   8  0.766526     -0.265887      -2.49557       2.49557       182.286       184.782    
   9  0.676418     -0.390944      -3.66933       3.66933       183.049       186.718    
  10  0.220696      -1.51097      -14.1817       14.1817       183.150       197.332    
  11  0.959946E-01  -2.34346      -21.9953       21.9953       186.996       208.991    
  12  0.570655     -0.560971      -5.26518       5.26518       182.339       187.604    
  13  0.736426     -0.305947      -2.87156       2.87156       187.830       190.702    
  14  0.966377     -0.342013E-01 -0.321008      0.321008       182.391       182.712    
  15  0.797662     -0.226070      -2.12185       2.12185       189.965       192.087    
  16  0.413688     -0.882643      -8.28434       8.28434       190.085       198.369    
  17  0.200670      -1.60609      -15.0745       15.0745       190.026       205.101    
  18  0.843958E-01  -2.47224      -23.2040       23.2040       191.170       214.374    
  19  0.375580     -0.979284      -9.19139       9.19139       188.629       197.820    
  20  0.968669     -0.318322E-01 -0.298771      0.298771       184.949       185.247    
  21  0.379263     -0.969525      -9.09979       9.09979       178.702       187.802    
  22  0.421746     -0.863352      -8.10327       8.10327       189.207       197.310    
  23  0.639909     -0.446429      -4.19011       4.19011       184.702       188.892    
  24  0.549878     -0.598059      -5.61328       5.61328       191.182       196.795    
  25  0.226469      -1.48515      -13.9393       13.9393       190.338       204.278    
  26  0.547044E-02  -5.20840      -48.8851       48.8851       191.774       240.659    
  27  0.372808     -0.986692      -9.26092       9.26092       186.718       195.979    
  28  0.406819E-01  -3.20197      -30.0531       30.0531       190.639       220.692    
  29  0.664564     -0.408624      -3.83527       3.83527       184.656       188.491    
  30  0.708700     -0.344323      -3.23175       3.23175       183.173       186.405    
  31  0.863329     -0.146959      -1.37933       1.37933       190.528       191.908    
  32  0.406109     -0.901134      -8.45788       8.45788       191.170       199.628    
  33  0.101947      -2.28330      -21.4307       21.4307       188.080       209.511    
  34  0.660574     -0.414646      -3.89180       3.89180       186.838       190.730    
  35  0.839002     -0.175542      -1.64761       1.64761       190.440       192.088    
  36  0.735312E-01  -2.61005      -24.4974       24.4974       194.390       218.888    
  37  0.559917     -0.579967      -5.44347       5.44347       194.535       199.978    
  38  0.922004     -0.812055E-01 -0.762181      0.762181       188.594       189.356    
  39  0.891471     -0.114882      -1.07827       1.07827       188.988       190.066    
  40  0.489346     -0.714686      -6.70792       6.70792       196.339       203.047    
  41  0.583196     -0.539231      -5.06113       5.06113       196.014       201.075    
  42  0.989235     -0.108230E-01 -0.101583      0.101583       189.338       189.439    
  43  0.844741     -0.168725      -1.58363       1.58363       182.994       184.578    
  44  0.734982     -0.307909      -2.88998       2.88998       194.632       197.522    
  45  0.913246     -0.907495E-01 -0.851759      0.851759       184.209       185.060    
  46  0.605096     -0.502369      -4.71515       4.71515       181.367       186.082    
  47  0.623739     -0.472024      -4.43033       4.43033       190.284       194.715    
  48  0.780990     -0.247193      -2.32011       2.32011       194.808       197.129    
  49  0.615662E-01  -2.78764      -26.1643       26.1643       183.479       209.643    
  50  0.646443E-02  -5.04144      -47.3181       47.3181       188.593       235.911    
  51  0.848055     -0.164809      -1.54687       1.54687       189.767       191.314    
  52  0.740886     -0.299909      -2.81489       2.81489       198.628       201.443    
  53  0.350650      -1.04797      -9.83605       9.83605       202.667       212.503    
  54  0.873328     -0.135444      -1.27126       1.27126       189.173       190.445    
  55  0.353091      -1.04103      -9.77093       9.77093       194.866       204.637    
  56  0.867938     -0.141635      -1.32937       1.32937       202.842       204.171    
  57  0.746706     -0.292084      -2.74145       2.74145       194.775       197.517    
  58  0.701641     -0.354333      -3.32571       3.32571       196.829       200.154    
  59  0.454866     -0.787753      -7.39371       7.39371       182.376       189.769    
  60  0.172086      -1.75976      -16.5168       16.5168       200.026       216.542    
  61  0.633774     -0.456062      -4.28052       4.28052       196.531       200.812    
  62  0.321574      -1.13453      -10.6485       10.6485       207.526       218.174    
  63  0.171612      -1.76252      -16.5427       16.5427       209.894       226.437    
  64  0.417516     -0.873431      -8.19787       8.19787       196.077       204.275    
  65  0.735059     -0.307804      -2.88900       2.88900       188.172       191.061    
  66  0.259350      -1.34958      -12.6669       12.6669       197.890       210.557    
  67  0.498266     -0.696622      -6.53837       6.53837       187.014       193.553    
  68  0.309265      -1.17356      -11.0148       11.0148       208.927       219.942    
  69  0.612008     -0.491010      -4.60854       4.60854       192.862       197.470    
  70  0.624712E-01  -2.77305      -26.0274       26.0274       201.853       227.880    
  71  0.209490      -1.56308      -14.6708       14.6708       188.461       203.132    
  72  0.357768E-01  -3.33046      -31.2591       31.2591       193.963       225.222    
  73  0.669071     -0.401864      -3.77183       3.77183       186.979       190.751    
loop,thermsimp(1:2)       48   10.8122       7.43788    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    314        174.85          0.87          1.13         23.61          0.10          0.05         25.76
Just calling func    0   0         25.76


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    315        183.90          0.86          1.14         23.52          0.24          0.05         25.79
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    174.85
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    9.38583               361
loop is:       48
neval is:      314
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       48      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    75.0866      0.500000    
T0,tstep,tfreq (these do not change):             72
current SAtemp,tstepnext are:    9.38583               361
loop is:       49
neval is:      314


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      361
neval,tstepnext:      314     361

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.991535     -0.850114E-02 -0.797903E-01  0.797903E-01   182.391       182.471    
   2  0.120199      -2.11861      -19.8849       19.8849       176.615       196.500    
   3  0.825835     -0.191360      -1.79607       1.79607       182.994       184.790    
   4  0.769690     -0.261767      -2.45690       2.45690       177.322       179.779    
   5  0.206534      -1.57729      -14.8042       14.8042       182.286       197.091    
   6  0.435455     -0.831363      -7.80303       7.80303       184.342       192.145    
   7  0.408718     -0.894731      -8.39779       8.39779       184.209       192.606    
   8  0.504170E-01  -2.98743      -28.0395       28.0395       184.949       212.988    
   9  0.943874     -0.577631E-01 -0.542154      0.542154       181.367       181.909    
  10  0.161493      -1.82330      -17.1131       17.1131       183.173       200.286    
  11  0.248560      -1.39207      -13.0657       13.0657       183.049       196.114    
  12  0.952734     -0.484195E-01 -0.454457      0.454457       176.192       176.647    
  13  0.349224      -1.05204      -9.87429       9.87429       182.339       192.213    
  14  0.245013      -1.40644      -13.2006       13.2006       178.702       191.902    
  15  0.713805     -0.337146      -3.16439       3.16439       184.656       187.820    
  16  0.206995      -1.57506      -14.7833       14.7833       184.702       199.485    
  17  0.573984     -0.555154      -5.21058       5.21058       188.594       193.805    
  18  0.791297     -0.234082      -2.19706       2.19706       189.338       191.535    
  19  0.599323     -0.511955      -4.80512       4.80512       182.376       187.181    
  20  0.632893     -0.457454      -4.29359       4.29359       188.988       193.282    
  21  0.920472     -0.828688E-01 -0.777792      0.777792       189.173       189.951    
  22  0.650695     -0.429713      -4.03322       4.03322       187.830       191.864    
  23  0.759327     -0.275322      -2.58413       2.58413       186.838       189.423    
  24  0.547563     -0.602278      -5.65287       5.65287       186.979       192.632    
  25  0.375945     -0.978312      -9.18227       9.18227       188.172       197.355    
  26  0.436593     -0.828753      -7.77853       7.77853       189.767       197.546    
  27  0.226348      -1.48568      -13.9443       13.9443       190.528       204.473    
  28  0.889061     -0.117589      -1.10367       1.10367       189.965       191.069    
  29  0.294563      -1.22226      -11.4719       11.4719       190.440       201.912    
  30  0.760606     -0.273640      -2.56834       2.56834       187.014       189.583    
  31  0.131934      -2.02545      -19.0105       19.0105       190.284       209.295    
  32  0.150887      -1.89123      -17.7507       17.7507       186.718       204.469    
  33  0.108814      -2.21811      -20.8188       20.8188       191.182       212.000    
  34  0.392982     -0.933991      -8.76628       8.76628       183.048       191.815    
  35  0.524209     -0.645865      -6.06197       6.06197       194.808       200.870    
  36  0.779329     -0.249322      -2.34009       2.34009       189.207       191.547    
  37  0.684136     -0.379599      -3.56285       3.56285       183.150       186.713    
  38  0.898629     -0.106885      -1.00321       1.00321       192.862       193.865    
  39  0.885947E-01  -2.42368      -22.7483       22.7483       194.775       217.523    
  40  0.865042     -0.144977      -1.36073       1.36073       194.632       195.993    
  41  0.953799     -0.473027E-01 -0.443975      0.443975       188.629       189.073    
  42  0.264945      -1.32823      -12.4666       12.4666       190.085       202.552    
  43  0.931660     -0.707875E-01 -0.664399      0.664399       191.170       191.834    
  44  0.273150      -1.29773      -12.1803       12.1803       194.535       206.715    
  45  0.773196     -0.257223      -2.41425       2.41425       196.829       199.243    
  46  0.936342     -0.657743E-01 -0.617346      0.617346       196.531       197.148    
  47  0.367272      -1.00165      -9.40135       9.40135       196.014       205.415    
  48  0.970907     -0.295243E-01 -0.277110      0.277110       198.628       198.906    
  49  0.722669     -0.324804      -3.04856       3.04856       196.339       199.387    
  50  0.247966      -1.39446      -13.0882       13.0882       188.461       201.549    
  51  0.730821     -0.313587      -2.94327       2.94327       202.842       205.785    
  52  0.379134     -0.969864      -9.10298       9.10298       196.077       205.180    
  53  0.326173      -1.12033      -10.5152       10.5152       190.338       200.853    
  54  0.555872     -0.587218      -5.51153       5.51153       194.866       200.377    
  55  0.600838     -0.509431      -4.78143       4.78143       190.026       194.808    
  56  0.714504     -0.336167      -3.15520       3.15520       184.667       187.822    
  57  0.190775      -1.65666      -15.5491       15.5491       186.996       202.545    
  58  0.206210      -1.57886      -14.8189       14.8189       181.591       196.409    
  59  0.855348     -0.156247      -1.46651       1.46651       188.080       189.547    
  60  0.886753     -0.120189      -1.12807       1.12807       183.479       184.607    
  61  0.391830     -0.936926      -8.79383       8.79383       197.890       206.684    
  62  0.986898     -0.131885E-01 -0.123785      0.123785       202.667       202.791    
  63  0.153388      -1.87479      -17.5964       17.5964       191.170       208.766    
  64  0.416027     -0.877006      -8.23142       8.23142       200.026       208.257    
  65  0.815763     -0.203631      -1.91124       1.91124       207.526       209.437    
  66  0.196403      -1.62759      -15.2762       15.2762       194.390       209.667    
  67  0.751119E-01  -2.58878      -24.2978       24.2978       208.927       233.225    
  68  0.297288      -1.21305      -11.3855       11.3855       190.639       202.025    
  69  0.984987     -0.151265E-01 -0.141975      0.141975       193.963       194.105    
  70  0.142264      -1.95007      -18.3030       18.3030       209.894       228.197    
  71  0.506200     -0.680824      -6.39010       6.39010       201.853       208.243    
  72  0.681243     -0.383837      -3.60263       3.60263       188.593       192.195    
  73  0.526734     -0.641059      -6.01687       6.01687       174.847       180.864    
loop,thermsimp(1:2)       49  0.797903E-01   19.8849    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    316        203.83          0.87          1.12         23.85          0.11          0.05         26.00
Just calling func    0   0         26.00


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    203.83
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    9.38583               361
loop is:       49
neval is:      315
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       49      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    75.0866      0.500000    
T0,tstep,tfreq (these do not change):             72
current SAtemp,tstepnext are:    9.38583               361
loop is:       50
neval is:      315


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      361
neval,tstepnext:      315     361

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.919134E-02  -4.68949      -44.0148       44.0148       176.192       220.207    
   2  0.902150     -0.102974     -0.966498      0.966498       177.322       178.288    
   3  0.375868     -0.978517      -9.18420       9.18420       174.847       184.031    
   4  0.136549E-01  -4.29366      -40.2995       40.2995       181.367       221.667    
   5  0.948329     -0.530533E-01 -0.497949      0.497949       182.391       182.889    
   6  0.489379E-01  -3.01720      -28.3189       28.3189       183.479       211.798    
   7  0.319400      -1.14131      -10.7121       10.7121       182.994       193.706    
   8  0.748008     -0.290342      -2.72510       2.72510       183.150       185.875    
   9  0.468015     -0.759255      -7.12623       7.12623       182.376       189.502    
  10  0.467420     -0.760527      -7.13817       7.13817       184.656       191.794    
  11  0.345085      -1.06396      -9.98618       9.98618       184.667       194.653    
  12  0.598981     -0.512526      -4.81048       4.81048       188.629       193.440    
  13  0.231496      -1.46319      -13.7333       13.7333       186.838       200.572    
  14  0.685496     -0.377613      -3.54421       3.54421       188.080       191.625    
  15  0.225803      -1.48809      -13.9670       13.9670       187.014       200.981    
  16  0.744991E-01  -2.59697      -24.3747       24.3747       189.173       213.548    
  17  0.436777     -0.828332      -7.77458       7.77458       189.965       197.740    
  18  0.241074      -1.42265      -13.3528       13.3528       189.338       202.691    
  19  0.728071     -0.317357      -2.97866       2.97866       189.207       192.185    
  20  0.228500      -1.47622      -13.8555       13.8555       183.048       196.904    
  21  0.423678     -0.858781      -8.06037       8.06037       191.170       199.230    
  22  0.812855     -0.207202      -1.94476       1.94476       187.830       189.775    
  23  0.810546     -0.210047      -1.97147       1.97147       178.702       180.673    
  24  0.113500      -2.17595      -20.4231       20.4231       184.342       204.765    
  25  0.197385      -1.62260      -15.2295       15.2295       188.593       203.822    
  26  0.101018      -2.29246      -21.5166       21.5166       182.339       203.855    
  27  0.857009E-01  -2.45689      -23.0600       23.0600       184.209       207.269    
  28  0.693668     -0.365762      -3.43298       3.43298       186.979       190.412    
  29  0.705918     -0.348256      -3.26867       3.26867       188.988       192.257    
  30  0.309793      -1.17185      -10.9988       10.9988       188.594       199.593    
  31  0.144843      -1.93210      -18.1344       18.1344       192.862       210.996    
  32  0.412916     -0.884511      -8.30187       8.30187       193.963       202.265    
  33  0.916661     -0.870180E-01 -0.816736      0.816736       190.026       190.843    
  34  0.933384E-01  -2.37152      -22.2587       22.2587       194.632       216.891    
  35  0.937330     -0.647200E-01 -0.607451      0.607451       183.049       183.656    
  36  0.958012     -0.428952E-01 -0.402607      0.402607       181.591       181.993    
  37  0.692877E-01  -2.66949      -25.0553       25.0553       176.615       201.670    
  38  0.228520E-01  -3.77872      -35.4664       35.4664       182.286       217.753    
  39  0.188135      -1.67060      -15.6799       15.6799       196.531       212.211    
  40  0.122595E-01  -4.40146      -41.3113       41.3113       188.172       229.484    
  41  0.776693     -0.252710      -2.37190       2.37190       189.767       192.139    
  42  0.571957     -0.558691      -5.24378       5.24378       198.628       203.872    
  43  0.313016      -1.16150      -10.9016       10.9016       196.829       207.730    
  44  0.512360     -0.668728      -6.27657       6.27657       196.339       202.615    
  45  0.874954     -0.133584      -1.25380       1.25380       184.702       185.956    
  46  0.617920     -0.481397      -4.51831       4.51831       183.173       187.691    
  47  0.529196     -0.636396      -5.97310       5.97310       194.866       200.839    
  48  0.389261E-02  -5.54867      -52.0789       52.0789       190.338       242.417    
  49  0.323386E-01  -3.43149      -32.2074       32.2074       194.808       227.016    
  50  0.900641     -0.104648     -0.982211      0.982211       188.461       189.443    
  51  0.872638     -0.136235      -1.27868       1.27868       190.440       191.719    
  52  0.965349     -0.352660E-01 -0.331001      0.331001       190.639       190.970    
  53  0.679490     -0.386413      -3.62681       3.62681       186.996       190.622    
  54  0.101129      -2.29136      -21.5063       21.5063       190.085       211.591    
  55  0.885746     -0.121326      -1.13874       1.13874       202.667       203.806    
  56  0.307763      -1.17843      -11.0605       11.0605       186.718       197.778    
  57  0.978164     -0.220781E-01 -0.207221      0.207221       190.528       190.735    
  58  0.678582     -0.387750      -3.63935       3.63935       196.077       199.716    
  59  0.573317     -0.556317      -5.22150       5.22150       196.014       201.235    
  60  0.541891     -0.612690      -5.75060       5.75060       202.842       208.593    
  61  0.110478      -2.20294      -20.6764       20.6764       197.890       218.567    
  62  0.125637      -2.07436      -19.4695       19.4695       194.535       214.004    
  63  0.580733     -0.543464      -5.10086       5.10086       201.853       206.954    
  64  0.261777      -1.34026      -12.5795       12.5795       200.026       212.605    
  65  0.500314     -0.692519      -6.49986       6.49986       191.170       197.670    
  66  0.810055     -0.210653      -1.97715       1.97715       190.284       192.261    
  67  0.548357     -0.600828      -5.63927       5.63927       207.526       213.165    
  68  0.260831      -1.34388      -12.6134       12.6134       194.390       207.004    
  69  0.276330      -1.28616      -12.0717       12.0717       191.182       203.253    
  70  0.637232     -0.450622      -4.22946       4.22946       184.949       189.178    
  71  0.324688      -1.12489      -10.5580       10.5580       194.775       205.333    
  72  0.157175      -1.85039      -17.3675       17.3675       209.894       227.262    
  73  0.960006     -0.408161E-01 -0.383093      0.383093       203.831       204.214    
loop,thermsimp(1:2)       50   44.0148      0.966498    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    317        176.34          0.87          1.13         23.57          0.16          0.04         25.79
Just calling func    0   0         25.79


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    318        180.60          0.86          1.13         23.53          0.19          0.05         25.75
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    176.34
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    9.38583               361
loop is:       50
neval is:      317
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       50      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    75.0866      0.500000    
T0,tstep,tfreq (these do not change):             72
current SAtemp,tstepnext are:    9.38583               361
loop is:       51
neval is:      317


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      361
neval,tstepnext:      317     361

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.903412     -0.101577     -0.953381      0.953381       177.322       178.275    
   2  0.808902     -0.212077      -1.99052       1.99052       178.702       180.692    
   3  0.762147     -0.271616      -2.54934       2.54934       181.591       184.140    
   4  0.287851      -1.24531      -11.6883       11.6883       182.391       194.080    
   5  0.212418      -1.54920      -14.5405       14.5405       183.049       197.589    
   6  0.380717     -0.965699      -9.06388       9.06388       174.847       183.911    
   7  0.877795     -0.130342      -1.22337       1.22337       183.150       184.373    
   8  0.836834     -0.178130      -1.67189       1.67189       184.702       186.374    
   9  0.435183     -0.831988      -7.80890       7.80890       183.173       190.982    
  10  0.900166     -0.105177     -0.987169      0.987169       184.949       185.936    
  11  0.175095      -1.74242      -16.3541       16.3541       188.461       204.815    
  12  0.322232      -1.13248      -10.6293       10.6293       182.376       193.005    
  13  0.706662     -0.347203      -3.25879       3.25879       187.830       191.089    
  14  0.494297     -0.704618      -6.61342       6.61342       186.979       193.593    
  15  0.324383      -1.12583      -10.5669       10.5669       186.996       197.562    
  16  0.777122     -0.252157      -2.36670       2.36670       190.528       192.895    
  17  0.499054E-01  -2.99763      -28.1352       28.1352       190.026       218.161    
  18  0.489193E-01  -3.01758      -28.3225       28.3225       190.639       218.962    
  19  0.480140     -0.733678      -6.88617       6.88617       188.080       194.967    
  20  0.914126     -0.897865E-01 -0.842720      0.842720       190.440       191.283    
  21  0.613008     -0.489378      -4.59321       4.59321       184.656       189.249    
  22  0.470573     -0.753804      -7.07507       7.07507       189.767       196.842    
  23  0.614279     -0.487307      -4.57378       4.57378       189.207       193.780    
  24  0.410529     -0.890308      -8.35627       8.35627       188.988       197.344    
  25  0.582759     -0.539981      -5.06817       5.06817       190.284       195.352    
  26  0.422753E-01  -3.16355      -29.6926       29.6926       188.629       218.322    
  27  0.717044     -0.332618      -3.12190       3.12190       182.994       186.116    
  28  0.420765     -0.865682      -8.12514       8.12514       184.667       192.792    
  29  0.801392     -0.221405      -2.07807       2.07807       183.048       185.126    
  30  0.426188     -0.852875      -8.00493       8.00493       191.170       199.175    
  31  0.338881      -1.08211      -10.1565       10.1565       189.965       200.121    
  32  0.398160     -0.920902      -8.64343       8.64343       186.718       195.361    
  33  0.938837     -0.631132E-01 -0.592370      0.592370       191.170       191.762    
  34  0.411860E-01  -3.18966      -29.9376       29.9376       188.594       218.532    
  35  0.180703      -1.71090      -16.0582       16.0582       196.077       212.135    
  36  0.617012     -0.482867      -4.53210       4.53210       186.838       191.371    
  37  0.788612     -0.237480      -2.22895       2.22895       194.866       197.095    
  38  0.381719     -0.963071      -9.03922       9.03922       187.014       196.053    
  39  0.376038     -0.978064      -9.17994       9.17994       196.014       205.194    
  40  0.105996      -2.24435      -21.0651       21.0651       176.615       197.680    
  41  0.769932E-01  -2.56404      -24.0656       24.0656       193.963       218.028    
  42  0.365987      -1.00516      -9.43424       9.43424       196.339       205.773    
  43  0.731763     -0.312298      -2.93118       2.93118       189.338       192.269    
  44  0.447137     -0.804891      -7.55457       7.55457       191.182       198.736    
  45  0.273519      -1.29638      -12.1676       12.1676       202.667       214.835    
  46  0.870614     -0.138556      -1.30047       1.30047       188.593       189.893    
  47  0.822463     -0.195452      -1.83448       1.83448       182.339       184.173    
  48  0.456061     -0.785129      -7.36908       7.36908       198.628       205.998    
  49  0.603947     -0.504269      -4.73298       4.73298       203.831       208.564    
  50  0.342037      -1.07284      -10.0694       10.0694       184.342       194.411    
  51  0.693527     -0.365965      -3.43489       3.43489       194.775       198.210    
  52  0.958323     -0.425703E-01 -0.399557      0.399557       201.853       202.252    
  53  0.587360     -0.532117      -4.99436       4.99436       194.390       199.385    
  54  0.364787      -1.00844      -9.46507       9.46507       184.209       193.674    
  55  0.878785     -0.129215      -1.21279       1.21279       196.829       198.041    
  56  0.273053      -1.29809      -12.1836       12.1836       202.842       215.026    
  57  0.896174     -0.109620      -1.02888       1.02888       192.862       193.890    
  58  0.239994      -1.42714      -13.3949       13.3949       190.085       203.480    
  59  0.595505E-01  -2.82093      -26.4768       26.4768       183.479       209.956    
  60  0.353403      -1.04015      -9.76263       9.76263       196.531       206.294    
  61  0.729282     -0.315695      -2.96306       2.96306       200.026       202.989    
  62  0.231928      -1.46133      -13.7158       13.7158       207.526       221.242    
  63  0.107599      -2.22934      -20.9242       20.9242       189.173       210.097    
  64  0.641905     -0.443315      -4.16087       4.16087       194.535       198.696    
  65  0.701312     -0.354803      -3.33012       3.33012       194.632       197.962    
  66  0.245029      -1.40638      -13.2000       13.2000       182.286       195.486    
  67  0.223204      -1.49967      -14.0756       14.0756       197.890       211.966    
  68  0.335163      -1.09314      -10.2600       10.2600       176.192       186.452    
  69  0.921199     -0.820796E-01 -0.770385      0.770385       181.367       182.138    
  70  0.395288     -0.928141      -8.71137       8.71137       194.808       203.520    
  71  0.956072     -0.449224E-01 -0.421634      0.421634       209.894       210.316    
  72  0.734146     -0.309048      -2.90067       2.90067       188.172       191.073    
  73  0.113032      -2.18009      -20.4619       20.4619       176.338       196.800    
loop,thermsimp(1:2)       51  0.953381       1.99052    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    319        182.68          0.86          1.12         23.52          0.25          0.05         25.80
Just calling func    0   0         25.79


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    182.68
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    9.38583               361
loop is:       51
neval is:      318
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       51      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    75.0866      0.500000    
T0,tstep,tfreq (these do not change):             72
current SAtemp,tstepnext are:    9.38583               361
loop is:       52
neval is:      318


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      361
neval,tstepnext:      318     361

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.421091     -0.864906      -8.11786       8.11786       177.322       185.440    
   2  0.315135      -1.15476      -10.8383       10.8383       178.702       189.540    
   3  0.696708     -0.361389      -3.39194       3.39194       181.367       184.759    
   4  0.922116     -0.810842E-01 -0.761043      0.761043       174.847       175.608    
   5  0.908133     -0.963648E-01 -0.904463      0.904463       181.591       182.495    
   6  0.174132      -1.74794      -16.4059       16.4059       182.339       198.745    
   7  0.490629     -0.712068      -6.68334       6.68334       183.150       189.833    
   8  0.382604     -0.960755      -9.01748       9.01748       183.048       192.066    
   9  0.985159     -0.149527E-01 -0.140343      0.140343       184.949       185.089    
  10  0.182634      -1.70027      -15.9585       15.9585       182.994       198.953    
  11  0.554568     -0.589565      -5.53356       5.53356       184.702       190.236    
  12  0.999791     -0.209153E-03 -0.196307E-02  0.196307E-02   176.192       176.194    
  13  0.284621      -1.25660      -11.7942       11.7942       184.656       196.450    
  14  0.920706E-01  -2.38520      -22.3871       22.3871       188.593       210.980    
  15  0.243911      -1.41095      -13.2430       13.2430       183.173       196.416    
  16  0.866829     -0.142914      -1.34136       1.34136       188.172       189.514    
  17  0.640039     -0.446225      -4.18819       4.18819       187.830       192.019    
  18  0.737488E-01  -2.60709      -24.4697       24.4697       190.440       214.910    
  19  0.511916     -0.669594      -6.28470       6.28470       186.838       193.123    
  20  0.870220     -0.139009      -1.30472       1.30472       191.170       192.475    
  21  0.594690     -0.519714      -4.87795       4.87795       189.338       194.216    
  22  0.659508     -0.416262      -3.90696       3.90696       184.667       188.574    
  23  0.702023     -0.353789      -3.32061       3.32061       190.528       193.849    
  24  0.178121      -1.72529      -16.1933       16.1933       182.376       198.569    
  25  0.622271     -0.474379      -4.45244       4.45244       186.979       191.432    
  26  0.877027     -0.131217      -1.23158       1.23158       184.209       185.440    
  27  0.206753      -1.57623      -14.7942       14.7942       189.207       204.001    
  28  0.927381     -0.753912E-01 -0.707609      0.707609       192.862       193.569    
  29  0.610274     -0.493848      -4.63517       4.63517       182.391       187.027    
  30  0.453676     -0.790373      -7.41830       7.41830       184.342       191.760    
  31  0.203335      -1.59290      -14.9507       14.9507       188.080       203.031    
  32  0.558786     -0.581989      -5.46245       5.46245       190.284       195.747    
  33  0.685013     -0.378317      -3.55082       3.55082       186.718       190.269    
  34  0.753574     -0.282929      -2.65552       2.65552       182.286       184.942    
  35  0.736990E-01  -2.60777      -24.4760       24.4760       187.014       211.490    
  36  0.719848     -0.328716      -3.08527       3.08527       176.338       179.424    
  37  0.177345E-01  -4.03224      -37.8459       37.8459       189.767       227.613    
  38  0.277334E-01  -3.58512      -33.6493       33.6493       194.866       228.515    
  39  0.228604      -1.47576      -13.8512       13.8512       188.988       202.839    
  40  0.874609     -0.133979      -1.25750       1.25750       186.996       188.253    
  41  0.875699     -0.132733      -1.24581       1.24581       183.049       184.294    
  42  0.540874     -0.614569      -5.76823       5.76823       176.615       182.383    
  43  0.343108E-01  -3.37230      -31.6518       31.6518       194.632       226.284    
  44  0.982551     -0.176027E-01 -0.165216      0.165216       196.829       196.994    
  45  0.201823      -1.60037      -15.0208       15.0208       194.775       209.796    
  46  0.116838      -2.14697      -20.1511       20.1511       194.535       214.686    
  47  0.520586     -0.652800      -6.12707       6.12707       191.182       197.309    
  48  0.515528     -0.662563      -6.21870       6.21870       191.170       197.389    
  49  0.814407     -0.205295      -1.92686       1.92686       194.390       196.317    
  50  0.436930     -0.827981      -7.77129       7.77129       189.965       197.736    
  51  0.802441     -0.220097      -2.06579       2.06579       201.853       203.918    
  52  0.366662      -1.00331      -9.41693       9.41693       200.026       209.443    
  53  0.915349     -0.884494E-01 -0.830171      0.830171       190.085       190.915    
  54  0.619345     -0.479093      -4.49669       4.49669       194.808       199.305    
  55  0.984856     -0.152594E-01 -0.143222      0.143222       188.461       188.604    
  56  0.594834     -0.519472      -4.87568       4.87568       196.014       200.889    
  57  0.295281      -1.21983      -11.4491       11.4491       196.339       207.788    
  58  0.363721      -1.01137      -9.49252       9.49252       198.628       208.121    
  59  0.113237      -2.17827      -20.4449       20.4449       196.531       216.976    
  60  0.684322     -0.379327      -3.56030       3.56030       203.831       207.391    
  61  0.172853E-01  -4.05790      -38.0867       38.0867       183.479       221.566    
  62  0.910904     -0.933174E-01 -0.875861      0.875861       189.173       190.049    
  63  0.792218     -0.232919      -2.18613       2.18613       209.894       212.080    
  64  0.644894E-02  -5.04384      -47.3406       47.3406       197.890       245.231    
  65  0.674921     -0.393160      -3.69013       3.69013       196.077       199.767    
  66  0.713821     -0.337122      -3.16417       3.16417       202.667       205.831    
  67  0.122871      -2.09662      -19.6785       19.6785       202.842       222.521    
  68  0.809527     -0.211305      -1.98327       1.98327       193.963       195.946    
  69  0.266630      -1.32189      -12.4071       12.4071       190.026       202.433    
  70  0.457713     -0.781513      -7.33514       7.33514       188.629       195.964    
  71  0.510631     -0.672109      -6.30829       6.30829       188.594       194.902    
  72  0.512413     -0.668624      -6.27559       6.27559       190.639       196.915    
  73  0.104223      -2.26122      -21.2235       21.2235       182.685       203.908    
loop,thermsimp(1:2)       52   8.11786       10.8383    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    320        215.33          0.86          1.13         23.39          0.33          0.05         25.77
Just calling func    0   0         25.77


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    215.33
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    9.38583               361
loop is:       52
neval is:      319
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       52      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    75.0866      0.500000    
T0,tstep,tfreq (these do not change):             72
current SAtemp,tstepnext are:    9.38583               361
loop is:       53
neval is:      319


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      361
neval,tstepnext:      319     361

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.340866E-01  -3.37885      -31.7133       31.7133       174.847       206.560    
   2  0.714674     -0.335928      -3.15296       3.15296       176.192       179.345    
   3  0.977792     -0.224587E-01 -0.210793      0.210793       176.338       176.549    
   4  0.771231     -0.259767      -2.43813       2.43813       176.615       179.053    
   5  0.265148      -1.32747      -12.4594       12.4594       181.591       194.050    
   6  0.559491     -0.580728      -5.45061       5.45061       183.049       188.499    
   7  0.934824E-01  -2.36998      -22.2442       22.2442       181.367       203.612    
   8  0.928182     -0.745278E-01 -0.699505      0.699505       182.286       182.986    
   9  0.464905     -0.765922      -7.18881       7.18881       184.949       192.137    
  10  0.871919     -0.137059      -1.28641       1.28641       177.322       178.608    
  11  0.982233     -0.179265E-01 -0.168255      0.168255       184.209       184.377    
  12  0.426376     -0.852433      -8.00079       8.00079       182.391       190.392    
  13  0.471128E-01  -3.05521      -28.6757       28.6757       186.996       215.671    
  14  0.686439     -0.376238      -3.53131       3.53131       184.667       188.198    
  15  0.117826      -2.13855      -20.0720       20.0720       188.461       208.533    
  16  0.756878E-01  -2.58114      -24.2261       24.2261       188.172       212.398    
  17  0.196211      -1.62856      -15.2854       15.2854       178.702       193.987    
  18  0.431930     -0.839491      -7.87931       7.87931       183.150       191.029    
  19  0.707794     -0.345602      -3.24376       3.24376       189.173       192.417    
  20  0.174358E-01  -4.04923      -38.0054       38.0054       184.702       222.708    
  21  0.267976      -1.31686      -12.3598       12.3598       186.718       199.078    
  22  0.793866     -0.230841      -2.16663       2.16663       190.085       192.252    
  23  0.135848      -1.99622      -18.7362       18.7362       186.979       205.716    
  24  0.663958     -0.409536      -3.84383       3.84383       184.342       188.186    
  25  0.281101      -1.26904      -11.9110       11.9110       187.830       199.741    
  26  0.606466     -0.500106      -4.69391       4.69391       183.048       187.742    
  27  0.940056     -0.618158E-01 -0.580193      0.580193       191.170       191.750    
  28  0.124106      -2.08662      -19.5847       19.5847       186.838       206.423    
  29  0.205090      -1.58431      -14.8700       14.8700       192.862       207.732    
  30  0.852960     -0.159043      -1.49275       1.49275       190.528       192.021    
  31  0.241701      -1.42005      -13.3284       13.3284       189.338       202.666    
  32  0.744368     -0.295220      -2.77088       2.77088       188.594       191.365    
  33  0.279909      -1.27329      -11.9509       11.9509       190.284       202.235    
  34  0.142971      -1.94511      -18.2565       18.2565       193.963       212.219    
  35  0.367233      -1.00176      -9.40233       9.40233       188.629       198.031    
  36  0.839044     -0.175493      -1.64714       1.64714       194.390       196.037    
  37  0.762369     -0.271325      -2.54661       2.54661       183.173       185.719    
  38  0.414704     -0.880189      -8.26131       8.26131       184.656       192.917    
  39  0.294445      -1.22266      -11.4757       11.4757       190.639       202.115    
  40  0.296874      -1.21445      -11.3986       11.3986       196.829       208.227    
  41  0.834777     -0.180590      -1.69499       1.69499       191.182       192.877    
  42  0.399354     -0.917907      -8.61531       8.61531       191.170       199.785    
  43  0.948666     -0.526981E-01 -0.494615      0.494615       189.965       190.460    
  44  0.306553E-01  -3.48495      -32.7091       32.7091       182.376       215.085    
  45  0.768324E-01  -2.56613      -24.0852       24.0852       182.339       206.424    
  46  0.723813     -0.323222      -3.03370       3.03370       182.994       186.028    
  47  0.912222     -0.918720E-01 -0.862294      0.862294       194.808       195.671    
  48  0.846322     -0.166855      -1.56607       1.56607       196.077       197.643    
  49  0.704090     -0.350850      -3.29301       3.29301       196.014       199.307    
  50  0.443839     -0.812294      -7.62405       7.62405       190.026       197.650    
  51  0.790462     -0.235137      -2.20696       2.20696       188.988       191.195    
  52  0.134239      -2.00813      -18.8480       18.8480       188.080       206.928    
  53  0.720618     -0.327646      -3.07523       3.07523       182.685       185.760    
  54  0.489652     -0.714061      -6.70205       6.70205       201.853       208.555    
  55  0.493891E-01  -3.00802      -28.2328       28.2328       189.207       217.439    
  56  0.524875     -0.644595      -6.05006       6.05006       202.667       208.717    
  57  0.919627     -0.837868E-01 -0.786408      0.786408       203.831       204.618    
  58  0.372709     -0.986956      -9.26340       9.26340       196.339       205.602    
  59  0.121203      -2.11029      -19.8068       19.8068       198.628       218.435    
  60  0.195183      -1.63382      -15.3347       15.3347       200.026       215.360    
  61  0.325168      -1.12341      -10.5442       10.5442       194.775       205.319    
  62  0.248863      -1.39085      -13.0543       13.0543       188.593       201.647    
  63  0.910643     -0.936046E-01 -0.878557      0.878557       187.014       187.893    
  64  0.131372E-01  -4.33230      -40.6623       40.6623       209.894       250.556    
  65  0.308708      -1.17536      -11.0317       11.0317       194.535       205.567    
  66  0.863163     -0.147151      -1.38114       1.38114       190.440       191.821    
  67  0.437001     -0.827819      -7.76977       7.76977       196.531       204.301    
  68  0.933437     -0.688822E-01 -0.646516      0.646516       183.479       184.125    
  69  0.595007     -0.519181      -4.87295       4.87295       202.842       207.715    
  70  0.184309      -1.69114      -15.8728       15.8728       194.632       210.505    
  71  0.340956      -1.07600      -10.0992       10.0992       189.767       199.866    
  72  0.582092     -0.541127      -5.07892       5.07892       194.866       199.945    
  73  0.451420     -0.795358      -7.46509       7.46509       215.332       222.797    
loop,thermsimp(1:2)       53   31.7133       3.15296    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    321        190.47          0.86          1.13         23.57          0.18          0.05         25.79
Just calling func    0   0         25.78


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  320    190.47        1.551     -1.494      1.571     -102.6      1.011    
                      0.2955      1.598     -99.70      3.572     0.8949E-01
                       2.201     -1.516      1.294      0.000     -5.000    
                      -1.380      0.000      0.000      0.000     -1.221    

                      -2.500      9866.      7833.      0.000      0.000    
                     -0.5672     -6.538     -4.397     -7.977      1.696    
                      -14.42     -3.019      2019.      0.000      942.8    

                      0.1341E+05 0.1248E+05  2059.     0.2078E+05  3159.    
                       5365.     0.1644     0.5846E-03  0.000    -0.3771    
                     -0.4744E-01-0.1159    -0.1435    -0.1963    -0.4357E-01

                      -1.487    -0.2523E-01  0.000     0.4043E-01 0.2957E-01
                      0.8541E-01-0.1557E-01 0.3371E-01-0.9317E-01 0.9525E-01
                     -0.9227E-01 0.1736E-01-0.1603    -0.5575      0.000    

                      -1.384     -1.725     -2.785     -2.613    -0.1320    
                      0.4030      9.217      9.052    -0.1626E+05 -4.000    
                     -0.5241    -0.5874      9.430      8.348    -0.2540E+05

                      -4.000     0.1549    -0.4774      8.887      9.006    
                     -0.3906E+05 -7.000    -0.2576    -0.8615      9.520    
                       8.500    -0.1951E+05 -7.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    190.47
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    9.38583               361
loop is:       53
neval is:      320
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       53      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    75.0866      0.500000    
T0,tstep,tfreq (these do not change):             72
current SAtemp,tstepnext are:    9.38583               361
loop is:       54
neval is:      320


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      361
neval,tstepnext:      320     361

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.615000     -0.486133      -4.56276       4.56276       176.338       180.901    
   2  0.438442     -0.824528      -7.73888       7.73888       177.322       185.061    
   3  0.666371     -0.405908      -3.80979       3.80979       176.615       180.425    
   4  0.419797     -0.867984      -8.14674       8.14674       176.192       184.339    
   5  0.662493     -0.411746      -3.86457       3.86457       182.286       186.151    
   6  0.261021      -1.34315      -12.6066       12.6066       183.479       196.085    
   7  0.451731     -0.794667      -7.45861       7.45861       184.209       191.667    
   8  0.858047     -0.153096      -1.43693       1.43693       183.173       184.610    
   9  0.678039     -0.388550      -3.64686       3.64686       182.685       186.331    
  10  0.257304      -1.35750      -12.7412       12.7412       182.994       195.736    
  11  0.379774     -0.968178      -9.08715       9.08715       183.048       192.135    
  12  0.200314      -1.60787      -15.0912       15.0912       187.014       202.105    
  13  0.702955E-01  -2.65505      -24.9198       24.9198       184.342       209.262    
  14  0.846007     -0.167228      -1.56957       1.56957       184.667       186.236    
  15  0.692217     -0.367856      -3.45263       3.45263       183.049       186.501    
  16  0.830541     -0.185678      -1.74274       1.74274       182.391       184.134    
  17  0.162133E-02  -6.42451      -60.2993       60.2993       189.965       250.264    
  18  0.829216     -0.187275      -1.75773       1.75773       183.150       184.908    
  19  0.464918     -0.765894      -7.18855       7.18855       188.988       196.177    
  20  0.204157      -1.58887      -14.9128       14.9128       188.594       203.507    
  21  0.203429      -1.59244      -14.9463       14.9463       191.170       206.116    
  22  0.403935     -0.906500      -8.50825       8.50825       190.440       198.948    
  23  0.508037     -0.677201      -6.35609       6.35609       190.528       196.884    
  24  0.337702      -1.08559      -10.1892       10.1892       184.949       195.138    
  25  0.375672     -0.979039      -9.18909       9.18909       190.085       199.274    
  26  0.218755      -1.51980      -14.2646       14.2646       189.173       203.438    
  27  0.803422     -0.218876      -2.05433       2.05433       191.182       193.236    
  28  0.324101      -1.12670      -10.5750       10.5750       184.656       195.231    
  29  0.804001     -0.218155      -2.04756       2.04756       178.702       180.749    
  30  0.727676     -0.317899      -2.98375       2.98375       181.591       184.574    
  31  0.769479     -0.262042      -2.45948       2.45948       194.808       197.268    
  32  0.632293     -0.458402      -4.30248       4.30248       194.390       198.693    
  33  0.300459      -1.20244      -11.2859       11.2859       196.077       207.363    
  34  0.567362     -0.566759      -5.31950       5.31950       190.026       195.346    
  35  0.803345     -0.218971      -2.05523       2.05523       188.629       190.684    
  36  0.764706     -0.268264      -2.51788       2.51788       186.718       189.236    
  37  0.159444      -1.83606      -17.2330       17.2330       196.014       213.247    
  38  0.951670     -0.495367E-01 -0.464942      0.464942       187.830       188.295    
  39  0.769198     -0.262407      -2.46290       2.46290       191.170       193.633    
  40  0.916532     -0.871588E-01 -0.818057      0.818057       189.767       190.585    
  41  0.146117E-01  -4.22593      -39.6639       39.6639       194.866       234.530    
  42  0.196164      -1.62880      -15.2877       15.2877       188.593       203.880    
  43  0.399482     -0.917586      -8.61230       8.61230       190.639       199.251    
  44  0.646732     -0.435823      -4.09056       4.09056       190.284       194.375    
  45  0.207790      -1.57122      -14.7472       14.7472       189.338       204.085    
  46  0.276388      -1.28595      -12.0697       12.0697       181.367       193.437    
  47  0.410494     -0.890394      -8.35708       8.35708       196.531       204.888    
  48  0.437747     -0.826115      -7.75377       7.75377       203.831       211.585    
  49  0.414886     -0.879752      -8.25720       8.25720       194.775       203.032    
  50  0.453890     -0.789901      -7.41388       7.41388       194.535       201.949    
  51  0.141383      -1.95628      -18.3613       18.3613       196.339       214.700    
  52  0.264375      -1.33039      -12.4868       12.4868       186.979       199.466    
  53  0.598599     -0.513163      -4.81646       4.81646       186.838       191.655    
  54  0.716868     -0.332864      -3.12420       3.12420       182.339       185.463    
  55  0.547773     -0.601894      -5.64927       5.64927       174.847       180.496    
  56  0.920744     -0.825729E-01 -0.775015      0.775015       188.080       188.855    
  57  0.394656     -0.929742      -8.72640       8.72640       202.842       211.568    
  58  0.439395     -0.822357      -7.71850       7.71850       192.862       200.580    
  59  0.890216     -0.116291      -1.09149       1.09149       196.829       197.920    
  60  0.693208     -0.366425      -3.43920       3.43920       188.461       191.900    
  61  0.747783     -0.290642      -2.72792       2.72792       201.853       204.581    
  62  0.408813     -0.894498      -8.39560       8.39560       202.667       211.063    
  63  0.175963E-03  -8.64523      -81.1427       81.1427       194.632       275.775    
  64  0.715035     -0.335424      -3.14824       3.14824       193.963       197.111    
  65  0.895535     -0.110334      -1.03558       1.03558       188.172       189.208    
  66  0.332554      -1.10095      -10.3334       10.3334       182.376       192.709    
  67  0.594595     -0.519874      -4.87945       4.87945       200.026       204.905    
  68  0.883454     -0.123916      -1.16306       1.16306       186.996       188.159    
  69  0.727087     -0.318709      -2.99135       2.99135       189.207       192.198    
  70  0.760468     -0.273821      -2.57004       2.57004       198.628       201.198    
  71  0.915560     -0.882188E-01 -0.828007      0.828007       184.702       185.530    
  72  0.479318     -0.735391      -6.90225       6.90225       215.332       222.234    
  73  0.820230     -0.198170      -1.85999       1.85999       190.471       192.331    
loop,thermsimp(1:2)       54   4.56276       7.73888    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    322        176.20          0.87          1.12         23.69          0.16          0.05         25.89
Just calling func    0   0         25.90


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    323        196.18          0.87          1.14         23.84          0.07          0.05         25.97
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    176.20
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    9.38583               361
loop is:       54
neval is:      322
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       54      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    75.0866      0.500000    
T0,tstep,tfreq (these do not change):             72
current SAtemp,tstepnext are:    9.38583               361
loop is:       55
neval is:      322


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      361
neval,tstepnext:      322     361

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.626103     -0.468241      -4.39483       4.39483       176.615       181.010    
   2  0.909442     -0.949244E-01 -0.890944      0.890944       174.847       175.738    
   3  0.449837     -0.798870      -7.49806       7.49806       178.702       186.200    
   4  0.761598     -0.272336      -2.55610       2.55610       176.338       178.894    
   5  0.706800     -0.347007      -3.25695       3.25695       182.391       185.648    
   6  0.214343      -1.54018      -14.4558       14.4558       176.192       190.648    
   7  0.855661     -0.155881      -1.46307       1.46307       181.591       183.054    
   8  0.432924E-01  -3.13978      -29.4694       29.4694       183.173       212.642    
   9  0.902784     -0.102271     -0.959902      0.959902       183.150       184.110    
  10  0.706965     -0.346774      -3.25476       3.25476       177.322       180.577    
  11  0.826667     -0.190354      -1.78663       1.78663       182.339       184.125    
  12  0.824436     -0.193055      -1.81198       1.81198       184.702       186.514    
  13  0.442772     -0.814700      -7.64663       7.64663       182.286       189.933    
  14  0.416355     -0.876217      -8.22402       8.22402       184.667       192.891    
  15  0.268464      -1.31504      -12.3427       12.3427       182.685       195.027    
  16  0.779742     -0.248792      -2.33512       2.33512       183.049       185.384    
  17  0.406799E-01  -3.20202      -30.0536       30.0536       186.996       217.049    
  18  0.975397     -0.249106E-01 -0.233807      0.233807       187.830       188.064    
  19  0.425150E-01  -3.15790      -29.6395       29.6395       188.080       217.720    
  20  0.302481      -1.19574      -11.2230       11.2230       188.172       199.395    
  21  0.732033     -0.311930      -2.92772       2.92772       186.718       189.646    
  22  0.774561     -0.255459      -2.39770       2.39770       189.767       192.165    
  23  0.899897     -0.105475     -0.989969      0.989969       188.629       189.619    
  24  0.549624     -0.598520      -5.61761       5.61761       186.838       192.456    
  25  0.143543      -1.94112      -18.2190       18.2190       184.209       202.428    
  26  0.229055      -1.47379      -13.8328       13.8328       188.461       202.294    
  27  0.334206      -1.09600      -10.2868       10.2868       183.048       193.335    
  28  0.301620      -1.19859      -11.2497       11.2497       189.207       200.456    
  29  0.856030     -0.155449      -1.45902       1.45902       190.471       191.930    
  30  0.978878     -0.213482E-01 -0.200370      0.200370       182.376       182.576    
  31  0.890790E-01  -2.41823      -22.6971       22.6971       191.182       213.879    
  32  0.275076      -1.29071      -12.1143       12.1143       181.367       193.482    
  33  0.506865     -0.679511      -6.37777       6.37777       191.170       197.548    
  34  0.628553     -0.464334      -4.35816       4.35816       190.284       194.642    
  35  0.787972     -0.238293      -2.23658       2.23658       184.949       187.185    
  36  0.746168     -0.292804      -2.74821       2.74821       184.656       187.404    
  37  0.116954      -2.14598      -20.1418       20.1418       190.026       210.168    
  38  0.245368      -1.40500      -13.1871       13.1871       182.994       196.181    
  39  0.873952     -0.134729      -1.26455       1.26455       183.479       184.743    
  40  0.850596     -0.161818      -1.51879       1.51879       188.988       190.507    
  41  0.455763     -0.785783      -7.37522       7.37522       190.528       197.903    
  42  0.984333     -0.157910E-01 -0.148212      0.148212       193.963       194.111    
  43  0.956700     -0.442655E-01 -0.415468      0.415468       194.808       195.224    
  44  0.186161      -1.68114      -15.7789       15.7789       196.829       212.607    
  45  0.791379     -0.233979      -2.19608       2.19608       194.390       196.586    
  46  0.262937      -1.33584      -12.5380       12.5380       190.440       202.978    
  47  0.115228E-01  -4.46342      -41.8929       41.8929       190.639       232.532    
  48  0.324912      -1.12420      -10.5515       10.5515       190.085       200.637    
  49  0.164288      -1.80613      -16.9520       16.9520       186.979       203.932    
  50  0.334193E-02  -5.70121      -53.5105       53.5105       192.862       246.372    
  51  0.189130      -1.66532      -15.6304       15.6304       198.628       214.259    
  52  0.157956      -1.84544      -17.3210       17.3210       194.535       211.856    
  53  0.414399     -0.880925      -8.26821       8.26821       187.014       195.282    
  54  0.445375     -0.808838      -7.59162       7.59162       194.775       202.367    
  55  0.674924     -0.393155      -3.69009       3.69009       189.173       192.863    
  56  0.204431      -1.58752      -14.9002       14.9002       188.594       203.494    
  57  0.741769     -0.298718      -2.80371       2.80371       188.593       191.396    
  58  0.662845     -0.411215      -3.85959       3.85959       189.338       193.197    
  59  0.716249     -0.333728      -3.13231       3.13231       201.853       204.985    
  60  0.503649     -0.685876      -6.43752       6.43752       196.531       202.969    
  61  0.525560     -0.643292      -6.03783       6.03783       200.026       206.063    
  62  0.981258     -0.189199E-01 -0.177579      0.177579       191.170       191.347    
  63  0.892133     -0.114140      -1.07130       1.07130       196.077       197.148    
  64  0.239527E-01  -3.73167      -35.0248       35.0248       184.342       219.367    
  65  0.819895E-01  -2.50116      -23.4755       23.4755       202.667       226.143    
  66  0.567274     -0.566913      -5.32095       5.32095       202.842       208.163    
  67  0.543991     -0.608823      -5.71430       5.71430       203.831       209.545    
  68  0.962374     -0.383523E-01 -0.359968      0.359968       196.014       196.374    
  69  0.514511     -0.664538      -6.23724       6.23724       196.339       202.576    
  70  0.845541     -0.167779      -1.57475       1.57475       215.332       216.907    
  71  0.674893     -0.393201      -3.69052       3.69052       194.866       198.556    
  72  0.210589      -1.55785      -14.6217       14.6217       189.965       204.587    
  73  0.242462E-01  -3.71950      -34.9106       34.9106       176.200       211.110    
loop,thermsimp(1:2)       55   4.39483      0.890944    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    324        179.34          0.87          1.11         23.65          0.15          0.05         25.82
Just calling func    0   0         25.82


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    325        193.59          0.86          1.09         23.53          0.21          0.05         25.75
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    179.34
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    9.38583               361
loop is:       55
neval is:      324
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       55      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    75.0866      0.500000    
T0,tstep,tfreq (these do not change):             72
current SAtemp,tstepnext are:    9.38583               361
loop is:       56
neval is:      324


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      361
neval,tstepnext:      324     361

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.245842      -1.40307      -13.1689       13.1689       174.847       188.016    
   2  0.963480     -0.372033E-01 -0.349184      0.349184       176.338       176.687    
   3  0.633143     -0.457059      -4.28987       4.28987       177.322       181.612    
   4  0.939850E-02  -4.66721      -43.8056       43.8056       176.615       220.420    
   5  0.796978     -0.226928      -2.12991       2.12991       182.376       184.506    
   6  0.229125      -1.47349      -13.8299       13.8299       181.591       195.421    
   7  0.926958     -0.758467E-01 -0.711884      0.711884       183.150       183.862    
   8  0.687512     -0.374676      -3.51664       3.51664       182.339       185.855    
   9  0.695030     -0.363800      -3.41456       3.41456       183.479       186.893    
  10  0.900736     -0.104543     -0.981219      0.981219       183.049       184.030    
  11  0.867179     -0.142510      -1.33757       1.33757       182.391       183.729    
  12  0.879271     -0.128662      -1.20760       1.20760       178.702       179.909    
  13  0.197557      -1.62173      -15.2213       15.2213       184.702       199.923    
  14  0.790701     -0.234835      -2.20412       2.20412       184.949       187.153    
  15  0.807456     -0.213867      -2.00732       2.00732       184.656       186.663    
  16  0.688117     -0.373796      -3.50839       3.50839       187.830       191.339    
  17  0.227000      -1.48280      -13.9173       13.9173       188.629       202.546    
  18  0.374715     -0.981589      -9.21302       9.21302       186.718       195.931    
  19  0.176077      -1.73683      -16.3016       16.3016       182.286       198.588    
  20  0.446126E-01  -3.10974      -29.1875       29.1875       188.988       218.176    
  21  0.997763E-01  -2.30482      -21.6327       21.6327       176.192       197.825    
  22  0.142978E-01  -4.24765      -39.8677       39.8677       191.170       231.038    
  23  0.652216     -0.427379      -4.01131       4.01131       188.593       192.604    
  24  0.909797     -0.945339E-01 -0.887279      0.887279       190.471       191.358    
  25  0.145015      -1.93092      -18.1233       18.1233       189.767       207.891    
  26  0.189723      -1.66219      -15.6011       15.6011       186.838       202.439    
  27  0.260997      -1.34324      -12.6075       12.6075       189.173       201.781    
  28  0.167755      -1.78525      -16.7560       16.7560       184.667       201.423    
  29  0.148939      -1.90422      -17.8727       17.8727       189.338       207.210    
  30  0.209474      -1.56315      -14.6715       14.6715       183.048       197.720    
  31  0.594522     -0.519998      -4.88061       4.88061       181.367       186.248    
  32  0.401703     -0.912043      -8.56028       8.56028       193.963       202.523    
  33  0.306469      -1.18264      -11.1001       11.1001       190.284       201.384    
  34  0.879335     -0.128589      -1.20691       1.20691       182.685       183.891    
  35  0.920707     -0.826134E-01 -0.775395      0.775395       194.808       195.584    
  36  0.215616      -1.53425      -14.4002       14.4002       187.014       201.415    
  37  0.821708     -0.196370      -1.84310       1.84310       182.994       184.837    
  38  0.935240     -0.669517E-01 -0.628397      0.628397       196.014       196.642    
  39  0.691932     -0.368268      -3.45650       3.45650       194.390       197.847    
  40  0.493152     -0.706938      -6.63519       6.63519       196.077       202.712    
  41  0.362160      -1.01567      -9.53289       9.53289       191.170       200.703    
  42  0.636318     -0.452056      -4.24292       4.24292       190.528       194.771    
  43  0.178369      -1.72390      -16.1802       16.1802       194.866       211.046    
  44  0.987372     -0.127089E-01 -0.119283      0.119283       188.172       188.292    
  45  0.557690     -0.583953      -5.48088       5.48088       189.207       194.688    
  46  0.434391     -0.833811      -7.82601       7.82601       190.085       197.911    
  47  0.759572     -0.275001      -2.58111       2.58111       188.461       191.042    
  48  0.578559     -0.547214      -5.13606       5.13606       194.775       199.911    
  49  0.262392      -1.33792      -12.5574       12.5574       184.209       196.766    
  50  0.615619     -0.485127      -4.55331       4.55331       196.339       200.892    
  51  0.580502     -0.543861      -5.10459       5.10459       196.531       201.636    
  52  0.434749     -0.832986      -7.81826       7.81826       190.440       198.258    
  53  0.741569     -0.298987      -2.80624       2.80624       188.594       191.400    
  54  0.207475      -1.57274      -14.7615       14.7615       186.979       201.741    
  55  0.610742     -0.493081      -4.62797       4.62797       189.965       194.593    
  56  0.746759     -0.292013      -2.74078       2.74078       201.853       204.593    
  57  0.846394     -0.166771      -1.56528       1.56528       200.026       201.591    
  58  0.114011      -2.17146      -20.3810       20.3810       202.842       223.223    
  59  0.148375      -1.90801      -17.9083       17.9083       203.831       221.739    
  60  0.610037     -0.494236      -4.63881       4.63881       190.026       194.665    
  61  0.104069      -2.26270      -21.2373       21.2373       176.200       197.437    
  62  0.570721     -0.560855      -5.26409       5.26409       194.535       199.799    
  63  0.154528      -1.86738      -17.5269       17.5269       196.829       214.355    
  64  0.365341      -1.00692      -9.45080       9.45080       183.173       192.624    
  65  0.856377     -0.155044      -1.45522       1.45522       191.182       192.637    
  66  0.758370     -0.276584      -2.59597       2.59597       198.628       201.224    
  67  0.641541     -0.443881      -4.16619       4.16619       215.332       219.498    
  68  0.744629E-01  -2.59745      -24.3793       24.3793       186.996       211.375    
  69  0.186851      -1.67744      -15.7442       15.7442       188.080       203.825    
  70  0.431508     -0.840469      -7.88850       7.88850       184.342       192.230    
  71  0.622787     -0.473551      -4.44466       4.44466       202.667       207.112    
  72  0.308057      -1.17747      -11.0515       11.0515       190.639       201.691    
  73  0.225569      -1.48913      -13.9767       13.9767       179.337       193.314    
loop,thermsimp(1:2)       56   13.1689      0.349184    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    326        187.74          0.86          1.12         23.59          0.14          0.05         25.77
Just calling func    0   0         25.77


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    187.74
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    9.38583               361
loop is:       56
neval is:      325
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       56      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    75.0866      0.500000    
T0,tstep,tfreq (these do not change):             72
current SAtemp,tstepnext are:    9.38583               361
loop is:       57
neval is:      325


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      361
neval,tstepnext:      325     361

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.303901      -1.19105      -11.1790       11.1790       176.338       187.517    
   2  0.729962     -0.314762      -2.95430       2.95430       178.702       181.656    
   3  0.788140     -0.238080      -2.23458       2.23458       177.322       179.557    
   4  0.718031     -0.331242      -3.10898       3.10898       182.391       185.500    
   5  0.603575     -0.504885      -4.73876       4.73876       183.150       187.889    
   6  0.287757      -1.24564      -11.6914       11.6914       182.685       194.376    
   7  0.690986     -0.369635      -3.46933       3.46933       183.049       186.518    
   8  0.976315     -0.239695E-01 -0.224974      0.224974       182.376       182.601    
   9  0.983892     -0.162393E-01 -0.152419      0.152419       182.994       183.147    
  10  0.858769     -0.152255      -1.42904       1.42904       182.339       183.768    
  11  0.968889     -0.316048E-01 -0.296637      0.296637       181.367       181.664    
  12  0.364921      -1.00807      -9.46161       9.46161       184.656       194.117    
  13  0.540930     -0.614466      -5.76727       5.76727       183.479       189.246    
  14  0.812278E-01  -2.51050      -23.5631       23.5631       184.949       208.512    
  15  0.919841     -0.835539E-01 -0.784223      0.784223       174.847       175.631    
  16  0.275462      -1.28930      -12.1012       12.1012       188.172       200.273    
  17  0.704362     -0.350463      -3.28939       3.28939       188.461       191.750    
  18  0.896809     -0.108913      -1.02224       1.02224       187.830       188.853    
  19  0.166873      -1.79052      -16.8056       16.8056       190.471       207.276    
  20  0.927791E-02  -4.68012      -43.9268       43.9268       188.594       232.521    
  21  0.906733     -0.979074E-01 -0.918942      0.918942       184.342       185.261    
  22  0.575421     -0.552654      -5.18711       5.18711       188.593       193.780    
  23  0.975069     -0.252469E-01 -0.236963      0.236963       183.173       183.410    
  24  0.610094     -0.494143      -4.63794       4.63794       191.182       195.819    
  25  0.823028     -0.194765      -1.82803       1.82803       179.337       181.166    
  26  0.709022     -0.343869      -3.22749       3.22749       189.965       193.192    
  27  0.956893     -0.440633E-01 -0.413571      0.413571       190.026       190.440    
  28  0.897850E-01  -2.41034      -22.6230       22.6230       189.207       211.830    
  29  0.836996     -0.177936      -1.67008       1.67008       190.528       192.198    
  30  0.688664     -0.373001      -3.50093       3.50093       181.591       185.092    
  31  0.587454     -0.531957      -4.99286       4.99286       194.808       199.801    
  32  0.880970     -0.126731      -1.18948       1.18948       186.718       187.907    
  33  0.506724     -0.679789      -6.38038       6.38038       196.014       202.394    
  34  0.802262     -0.220320      -2.06788       2.06788       184.209       186.277    
  35  0.764787E-01  -2.57074      -24.1286       24.1286       176.200       200.328    
  36  0.907101     -0.975014E-01 -0.915131      0.915131       183.048       183.963    
  37  0.797350     -0.226461      -2.12553       2.12553       176.192       178.318    
  38  0.257375      -1.35722      -12.7386       12.7386       194.390       207.129    
  39  0.643190     -0.441315      -4.14211       4.14211       190.085       194.227    
  40  0.513768     -0.665984      -6.25081       6.25081       190.440       196.691    
  41  0.850264     -0.162208      -1.52246       1.52246       182.286       183.809    
  42  0.200819      -1.60535      -15.0676       15.0676       194.535       209.602    
  43  0.331940      -1.10280      -10.3507       10.3507       194.775       205.126    
  44  0.900490     -0.104816     -0.983785      0.983785       184.702       185.686    
  45  0.618957     -0.479719      -4.50256       4.50256       191.170       195.673    
  46  0.395756     -0.926956      -8.70025       8.70025       196.339       205.039    
  47  0.528166     -0.638345      -5.99140       5.99140       198.628       204.620    
  48  0.586635     -0.533352      -5.00595       5.00595       190.284       195.290    
  49  0.705559     -0.348765      -3.27345       3.27345       187.014       190.288    
  50  0.191018      -1.65539      -15.5372       15.5372       184.667       200.204    
  51  0.581133     -0.542775      -5.09439       5.09439       200.026       205.120    
  52  0.297529      -1.21224      -11.3779       11.3779       196.531       207.909    
  53  0.532486     -0.630198      -5.91493       5.91493       190.639       196.554    
  54  0.396084     -0.926129      -8.69248       8.69248       186.979       195.672    
  55  0.209334      -1.56382      -14.6778       14.6778       189.173       203.851    
  56  0.632068     -0.458758      -4.30582       4.30582       186.838       191.144    
  57  0.941424     -0.603613E-01 -0.566540      0.566540       193.963       194.529    
  58  0.875379     -0.133099      -1.24924       1.24924       188.629       189.878    
  59  0.497903     -0.697350      -6.54520       6.54520       196.077       202.622    
  60  0.840483     -0.173779      -1.63106       1.63106       188.080       189.712    
  61  0.230101      -1.46924      -13.7900       13.7900       201.853       215.643    
  62  0.213210      -1.54548      -14.5056       14.5056       202.667       217.173    
  63  0.412073     -0.886554      -8.32104       8.32104       189.338       197.659    
  64  0.264912      -1.32836      -12.4677       12.4677       189.767       202.235    
  65  0.234943      -1.44841      -13.5945       13.5945       194.866       208.460    
  66  0.957879     -0.430340E-01 -0.403910      0.403910       186.996       187.399    
  67  0.458250     -0.780340      -7.32414       7.32414       196.829       204.153    
  68  0.218142E-01  -3.82520      -35.9026       35.9026       188.988       224.891    
  69  0.340067E-01  -3.38120      -31.7353       31.7353       215.332       247.067    
  70  0.897872     -0.107728      -1.01112       1.01112       176.615       177.626    
  71  0.530797     -0.633375      -5.94475       5.94475       203.831       209.776    
  72  0.993119     -0.690470E-02 -0.648064E-01  0.648064E-01   202.842       202.907    
  73  0.512816     -0.667838      -6.26821       6.26821       187.739       194.008    
loop,thermsimp(1:2)       57   11.1790       2.95430    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    327        195.40          0.86          1.12         23.50          0.25          0.04         25.77
Just calling func    0   0         25.77


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    195.40
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    9.38583               361
loop is:       57
neval is:      326
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       57      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    75.0866      0.500000    
T0,tstep,tfreq (these do not change):             72
current SAtemp,tstepnext are:    9.38583               361
loop is:       58
neval is:      326


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      361
neval,tstepnext:      326     361

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.530208     -0.634486      -5.95518       5.95518       174.847       180.802    
   2  0.175946E-01  -4.04016      -37.9203       37.9203       176.615       214.535    
   3  0.419998     -0.867504      -8.14225       8.14225       176.192       184.335    
   4  0.448197E-01  -3.10511      -29.1440       29.1440       177.322       206.466    
   5  0.501784     -0.689586      -6.47234       6.47234       179.337       185.810    
   6  0.858173     -0.152949      -1.43556       1.43556       178.702       180.137    
   7  0.101932      -2.28345      -21.4321       21.4321       181.367       202.799    
   8  0.453268     -0.791273      -7.42675       7.42675       182.376       189.802    
   9  0.128092      -2.05501      -19.2879       19.2879       182.994       202.282    
  10  0.779644     -0.248918      -2.33630       2.33630       183.173       185.509    
  11  0.769943E-01  -2.56402      -24.0655       24.0655       182.339       206.404    
  12  0.140214      -1.96458      -18.4392       18.4392       182.286       200.726    
  13  0.571588     -0.559337      -5.24984       5.24984       183.048       188.298    
  14  0.455096     -0.787247      -7.38896       7.38896       181.591       188.980    
  15  0.594240     -0.520471      -4.88505       4.88505       184.342       189.227    
  16  0.833288     -0.182376      -1.71175       1.71175       182.391       184.103    
  17  0.807090E-01  -2.51691      -23.6232       23.6232       184.702       208.325    
  18  0.430313     -0.843242      -7.91452       7.91452       184.209       192.123    
  19  0.990463     -0.958277E-02 -0.899422E-01  0.899422E-01   183.049       183.139    
  20  0.907906     -0.966144E-01 -0.906806      0.906806       186.996       187.902    
  21  0.607469     -0.498455      -4.67841       4.67841       176.338       181.017    
  22  0.927102     -0.756916E-01 -0.710428      0.710428       183.150       183.860    
  23  0.379122     -0.969896      -9.10328       9.10328       186.718       195.821    
  24  0.183121E-01  -4.00019      -37.5451       37.5451       187.830       225.376    
  25  0.561966     -0.576313      -5.40917       5.40917       183.479       188.888    
  26  0.638772     -0.448208      -4.20680       4.20680       188.080       192.287    
  27  0.234202      -1.45157      -13.6242       13.6242       188.629       202.253    
  28  0.257221      -1.35782      -12.7442       12.7442       187.014       199.758    
  29  0.688379     -0.373416      -3.50482       3.50482       190.026       193.531    
  30  0.360237E-01  -3.32358      -31.1945       31.1945       186.838       218.033    
  31  0.849177     -0.163487      -1.53446       1.53446       188.461       189.995    
  32  0.324868E-01  -3.42692      -32.1645       32.1645       190.528       222.693    
  33  0.216483E-01  -3.83283      -35.9742       35.9742       189.965       225.939    
  34  0.794095     -0.230552      -2.16392       2.16392       188.593       190.757    
  35  0.453180     -0.791465      -7.42855       7.42855       187.739       195.168    
  36  0.286278      -1.25079      -11.7397       11.7397       184.656       196.396    
  37  0.931500     -0.709590E-01 -0.666009      0.666009       190.085       190.751    
  38  0.483424     -0.726861      -6.82220       6.82220       182.685       189.507    
  39  0.782276     -0.245547      -2.30467       2.30467       193.963       196.268    
  40  0.976661     -0.236156E-01 -0.221652      0.221652       190.284       190.506    
  41  0.707981     -0.345338      -3.24128       3.24128       186.979       190.221    
  42  0.101993      -2.28285      -21.4265       21.4265       191.170       212.597    
  43  0.690974E-01  -2.67224      -25.0812       25.0812       191.182       216.263    
  44  0.767576E-01  -2.56710      -24.0944       24.0944       190.639       214.734    
  45  0.584825     -0.536443      -5.03496       5.03496       190.440       195.475    
  46  0.588828     -0.529621      -4.97093       4.97093       189.338       194.309    
  47  0.894562     -0.111421      -1.04578       1.04578       194.808       195.854    
  48  0.260723      -1.34430      -12.6173       12.6173       184.667       197.284    
  49  0.773456E-01  -2.55947      -24.0228       24.0228       188.172       212.195    
  50  0.848651E-01  -2.46669      -23.1519       23.1519       176.200       199.351    
  51  0.992803     -0.722305E-02 -0.677943E-01  0.677943E-01   189.767       189.835    
  52  0.529202     -0.636386      -5.97300       5.97300       196.014       201.987    
  53  0.540374     -0.615494      -5.77692       5.77692       196.077       201.854    
  54  0.185914      -1.68247      -15.7914       15.7914       202.842       218.633    
  55  0.764153     -0.268988      -2.52467       2.52467       189.173       191.698    
  56  0.931974E-01  -2.37304      -22.2729       22.2729       196.829       219.101    
  57  0.753946     -0.282434      -2.65088       2.65088       198.628       201.279    
  58  0.279731      -1.27393      -11.9568       11.9568       196.339       208.296    
  59  0.790083     -0.235617      -2.21146       2.21146       200.026       202.237    
  60  0.179541      -1.71735      -16.1188       16.1188       194.775       210.894    
  61  0.424504     -0.856835      -8.04210       8.04210       194.390       202.432    
  62  0.359861      -1.02204      -9.59266       9.59266       190.471       200.063    
  63  0.234475      -1.45041      -13.6133       13.6133       196.531       210.144    
  64  0.320303      -1.13849      -10.6856       10.6856       194.866       205.552    
  65  0.558182     -0.583071      -5.47260       5.47260       184.949       190.421    
  66  0.460702     -0.775003      -7.27404       7.27404       194.535       201.809    
  67  0.627136E-01  -2.76918      -25.9910       25.9910       203.831       229.822    
  68  0.673665     -0.395022      -3.70761       3.70761       189.207       192.914    
  69  0.540500     -0.615261      -5.77474       5.77474       201.853       207.627    
  70  0.277195      -1.28303      -12.0423       12.0423       202.667       214.710    
  71  0.248535      -1.39217      -13.0667       13.0667       188.988       202.055    
  72  0.493876     -0.705472      -6.62143       6.62143       188.594       195.215    
  73  0.539055     -0.617938      -5.79986       5.79986       195.396       201.196    
loop,thermsimp(1:2)       58   5.95518       37.9203    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    328        200.14          0.86          1.12         23.58          0.16          0.05         25.77
Just calling func    0   0         25.77


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    200.14
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    9.38583               361
loop is:       58
neval is:      327
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       58      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    75.0866      0.500000    
T0,tstep,tfreq (these do not change):             72
current SAtemp,tstepnext are:    9.38583               361
loop is:       59
neval is:      327


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      361
neval,tstepnext:      327     361

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.946919     -0.545412E-01 -0.511914      0.511914       178.702       179.214    
   2  0.224221      -1.49512      -14.0330       14.0330       174.847       188.880    
   3  0.699642     -0.357186      -3.35249       3.35249       176.338       179.691    
   4  0.490916     -0.711482      -6.67785       6.67785       183.049       189.727    
   5  0.204251      -1.58840      -14.9085       14.9085       183.150       198.059    
   6  0.356522      -1.03136      -9.68016       9.68016       182.391       192.072    
   7  0.745938     -0.293113      -2.75110       2.75110       176.192       178.943    
   8  0.451533     -0.795107      -7.46274       7.46274       183.173       190.636    
   9  0.101038      -2.29226      -21.5148       21.5148       179.337       200.852    
  10  0.826978     -0.189977      -1.78309       1.78309       186.996       188.779    
  11  0.212337      -1.54958      -14.5441       14.5441       183.048       197.592    
  12  0.490540     -0.712248      -6.68504       6.68504       183.479       190.164    
  13  0.672078     -0.397381      -3.72975       3.72975       181.591       185.320    
  14  0.690580     -0.370223      -3.47485       3.47485       184.342       187.817    
  15  0.513190     -0.667108      -6.26136       6.26136       182.685       188.946    
  16  0.268393      -1.31530      -12.3452       12.3452       182.376       194.721    
  17  0.896898     -0.108813      -1.02130       1.02130       189.767       190.789    
  18  0.911953     -0.921674E-01 -0.865067      0.865067       188.461       189.326    
  19  0.355703      -1.03366      -9.70173       9.70173       186.979       196.681    
  20  0.293818      -1.22479      -11.4957       11.4957       184.949       196.444    
  21  0.713392     -0.337724      -3.16982       3.16982       190.284       193.454    
  22  0.660627     -0.414565      -3.89104       3.89104       190.085       193.976    
  23  0.795097     -0.229291      -2.15208       2.15208       188.593       190.745    
  24  0.919484     -0.839428E-01 -0.787872      0.787872       189.173       189.961    
  25  0.976382     -0.239014E-01 -0.224334      0.224334       184.209       184.433    
  26  0.922195     -0.809991E-01 -0.760243      0.760243       188.080       188.841    
  27  0.436062     -0.829970      -7.78995       7.78995       189.207       196.997    
  28  0.271848      -1.30251      -12.2252       12.2252       190.026       202.251    
  29  0.389360     -0.943252      -8.85320       8.85320       189.338       198.191    
  30  0.314178E-01  -3.46038      -32.4785       32.4785       187.739       220.218    
  31  0.545460     -0.606126      -5.68899       5.68899       188.594       194.283    
  32  0.925479E-01  -2.38003      -22.3385       22.3385       190.440       212.778    
  33  0.971973     -0.284273E-01 -0.266814      0.266814       186.718       186.985    
  34  0.403500     -0.907578      -8.51837       8.51837       194.808       203.327    
  35  0.392926     -0.934133      -8.76761       8.76761       193.963       202.730    
  36  0.718758     -0.330230      -3.09948       3.09948       184.656       187.755    
  37  0.746082     -0.292920      -2.74929       2.74929       184.667       187.416    
  38  0.353478      -1.03993      -9.76064       9.76064       176.200       185.960    
  39  0.843229     -0.170517      -1.60044       1.60044       187.014       188.615    
  40  0.388011     -0.946720      -8.88575       8.88575       190.471       199.356    
  41  0.969569     -0.309034E-01 -0.290054      0.290054       182.286       182.577    
  42  0.441380E-01  -3.12043      -29.2879       29.2879       195.396       224.684    
  43  0.533000     -0.629233      -5.90587       5.90587       198.628       204.534    
  44  0.288396      -1.24342      -11.6705       11.6705       194.535       206.205    
  45  0.683115     -0.381092      -3.57686       3.57686       196.077       199.654    
  46  0.339511      -1.08025      -10.1390       10.1390       196.014       206.153    
  47  0.150420E-01  -4.19691      -39.3914       39.3914       188.988       228.380    
  48  0.141026      -1.95881      -18.3850       18.3850       200.026       218.411    
  49  0.421666     -0.863541      -8.10505       8.10505       188.629       196.734    
  50  0.953496     -0.476201E-01 -0.446954      0.446954       182.994       183.441    
  51  0.966647     -0.339215E-01 -0.318381      0.318381       194.390       194.709    
  52  0.365434      -1.00667      -9.44843       9.44843       181.367       190.816    
  53  0.314209      -1.15770      -10.8659       10.8659       194.866       205.732    
  54  0.612536     -0.490148      -4.60044       4.60044       182.339       186.939    
  55  0.962603     -0.381139E-01 -0.357730      0.357730       177.322       177.680    
  56  0.518973     -0.655904      -6.15620       6.15620       201.853       208.009    
  57  0.963657     -0.370202E-01 -0.347465      0.347465       196.339       196.686    
  58  0.423866     -0.858338      -8.05622       8.05622       184.702       192.758    
  59  0.195959      -1.62985      -15.2975       15.2975       196.531       211.829    
  60  0.108838      -2.21789      -20.8168       20.8168       194.775       215.592    
  61  0.196446      -1.62737      -15.2742       15.2742       188.172       203.446    
  62  0.950303     -0.509747E-01 -0.478440      0.478440       191.170       191.648    
  63  0.363538      -1.01187      -9.49726       9.49726       176.615       186.112    
  64  0.834223     -0.181254      -1.70122       1.70122       202.667       204.368    
  65  0.529644     -0.635549      -5.96516       5.96516       190.639       196.604    
  66  0.944564     -0.570321E-01 -0.535294      0.535294       191.182       191.717    
  67  0.534482     -0.626456      -5.87981       5.87981       186.838       192.718    
  68  0.238252      -1.43443      -13.4633       13.4633       202.842       216.305    
  69  0.335731      -1.09145      -10.2441       10.2441       196.829       207.073    
  70  0.396637     -0.924734      -8.67939       8.67939       190.528       199.208    
  71  0.766416     -0.266030      -2.49691       2.49691       187.830       190.327    
  72  0.667108     -0.404804      -3.79942       3.79942       189.965       193.764    
  73  0.745469     -0.293741      -2.75700       2.75700       200.138       202.895    
loop,thermsimp(1:2)       59  0.511914       14.0330    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    329        177.18          0.86          1.12         23.59          0.18          0.05         25.80
Just calling func    0   0         25.80


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    330        193.15          0.86          1.11         23.54          0.34          0.05         25.91
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    177.18
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    9.38583               361
loop is:       59
neval is:      329
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       59      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    75.0866      0.500000    
T0,tstep,tfreq (these do not change):             72
current SAtemp,tstepnext are:    9.38583               361
loop is:       60
neval is:      329


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      361
neval,tstepnext:      329     361

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.347122      -1.05808      -9.93094       9.93094       177.322       187.253    
   2  0.605757     -0.501276      -4.70489       4.70489       176.192       180.897    
   3  0.690633     -0.370146      -3.47413       3.47413       178.702       182.176    
   4  0.400665     -0.914628      -8.58454       8.58454       176.338       184.923    
   5  0.862165     -0.148309      -1.39200       1.39200       182.286       183.678    
   6  0.874011     -0.134662      -1.26392       1.26392       182.994       184.258    
   7  0.389525     -0.942826      -8.84920       8.84920       184.209       193.058    
   8  0.102225E-01  -4.58317      -43.0168       43.0168       181.591       224.607    
   9  0.102697      -2.27597      -21.3619       21.3619       176.200       197.561    
  10  0.818271     -0.200561      -1.88243       1.88243       176.615       178.497    
  11  0.888768     -0.117920      -1.10677       1.10677       182.339       183.445    
  12  0.539210     -0.617651      -5.79716       5.79716       186.718       192.515    
  13  0.317914      -1.14597      -10.7559       10.7559       184.667       195.423    
  14  0.437422     -0.826857      -7.76073       7.76073       184.656       192.417    
  15  0.925263     -0.776773E-01 -0.729066      0.729066       184.342       185.071    
  16  0.422436     -0.861717      -8.08793       8.08793       187.014       195.102    
  17  0.965248     -0.353697E-01 -0.331974      0.331974       186.996       187.328    
  18  0.771278     -0.259706      -2.43755       2.43755       188.080       190.518    
  19  0.902488     -0.102600     -0.962986      0.962986       174.847       175.810    
  20  0.512816     -0.667839      -6.26822       6.26822       182.685       188.953    
  21  0.915966     -0.877758E-01 -0.823848      0.823848       188.461       189.285    
  22  0.612605     -0.490035      -4.59938       4.59938       183.049       187.648    
  23  0.323528      -1.12847      -10.5916       10.5916       189.173       199.765    
  24  0.206646      -1.57675      -14.7991       14.7991       183.479       198.278    
  25  0.481057     -0.731769      -6.86825       6.86825       187.830       194.699    
  26  0.287887E-01  -3.54777      -33.2988       33.2988       183.173       216.472    
  27  0.996968     -0.303648E-02 -0.284999E-01  0.284999E-01   188.593       188.621    
  28  0.132770      -2.01914      -18.9513       18.9513       189.767       208.719    
  29  0.716038     -0.334023      -3.13508       3.13508       181.367       184.502    
  30  0.229552      -1.47162      -13.8124       13.8124       191.170       204.982    
  31  0.236358      -1.44241      -13.5382       13.5382       191.182       204.720    
  32  0.542780     -0.611051      -5.73522       5.73522       182.391       188.127    
  33  0.875156     -0.133353      -1.25163       1.25163       186.838       188.090    
  34  0.988730     -0.113343E-01 -0.106382      0.106382       184.702       184.809    
  35  0.244332      -1.40923      -13.2268       13.2268       190.284       203.511    
  36  0.659246     -0.416659      -3.91069       3.91069       189.965       193.876    
  37  0.457872     -0.781166      -7.33189       7.33189       190.085       197.417    
  38  0.380652E-01  -3.26846      -30.6772       30.6772       188.594       219.271    
  39  0.358843      -1.02487      -9.61925       9.61925       194.390       204.010    
  40  0.846233     -0.166960      -1.56706       1.56706       182.376       183.943    
  41  0.359308      -1.02358      -9.60711       9.60711       184.949       194.556    
  42  0.533329     -0.628617      -5.90009       5.90009       190.639       196.539    
  43  0.645289     -0.438058      -4.11153       4.11153       186.979       191.091    
  44  0.311850      -1.16523      -10.9367       10.9367       196.339       207.275    
  45  0.270084      -1.30902      -12.2862       12.2862       188.629       200.915    
  46  0.530313     -0.634287      -5.95331       5.95331       189.207       195.160    
  47  0.975874     -0.244213E-01 -0.229214      0.229214       183.048       183.278    
  48  0.313811      -1.15896      -10.8778       10.8778       183.150       194.028    
  49  0.932688     -0.696844E-01 -0.654045      0.654045       189.338       189.992    
  50  0.357359      -1.02901      -9.65815       9.65815       190.528       200.186    
  51  0.545837     -0.605435      -5.68250       5.68250       190.471       196.153    
  52  0.954982     -0.460626E-01 -0.432336      0.432336       196.077       196.509    
  53  0.470912     -0.753083      -7.06831       7.06831       179.337       186.406    
  54  0.719568     -0.329104      -3.08891       3.08891       190.026       193.115    
  55  0.859620     -0.151265      -1.41974       1.41974       193.963       195.383    
  56  0.544817     -0.607304      -5.70005       5.70005       200.138       205.838    
  57  0.505571E-02  -5.28724      -49.6251       49.6251       194.808       244.434    
  58  0.412350     -0.885884      -8.31475       8.31475       188.172       196.487    
  59  0.335424      -1.09236      -10.2527       10.2527       202.667       212.920    
  60  0.908603     -0.958472E-01 -0.899606      0.899606       198.628       199.528    
  61  0.434554     -0.833434      -7.82247       7.82247       194.866       202.688    
  62  0.801863     -0.220817      -2.07255       2.07255       196.014       198.086    
  63  0.567796     -0.565993      -5.31231       5.31231       194.535       199.847    
  64  0.818165     -0.200691      -1.88366       1.88366       196.829       198.712    
  65  0.490355     -0.712626      -6.68858       6.68858       201.853       208.541    
  66  0.971730     -0.286771E-01 -0.269158      0.269158       196.531       196.800    
  67  0.373659     -0.984411      -9.23951       9.23951       190.440       199.679    
  68  0.179333      -1.71851      -16.1297       16.1297       194.775       210.905    
  69  0.352089      -1.04387      -9.79761       9.79761       202.842       212.640    
  70  0.247178      -1.39765      -13.1181       13.1181       200.026       213.144    
  71  0.304805      -1.18808      -11.1511       11.1511       187.739       198.891    
  72  0.561911     -0.576412      -5.41010       5.41010       195.396       200.806    
  73  0.193340      -1.64331      -15.4238       15.4238       177.184       192.608    
loop,thermsimp(1:2)       60   9.93094       4.70489    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    331        360.77          0.87          1.14         23.82          0.15          0.05         26.02
Just calling func    0   0         26.02


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    332        240.48          0.86          1.14         23.54          0.17          0.05         25.75
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3    240.48
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    9.38583               361
loop is:       60
neval is:      331
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       60      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    75.0866      0.500000    
T0,tstep,tfreq (these do not change):             72
current SAtemp,tstepnext are:    9.38583               361
loop is:       61
neval is:      331


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      361
neval,tstepnext:      331     361

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.663917     -0.409597      -3.84441       3.84441       174.847       178.691    
   2  0.718953     -0.329960      -3.09694       3.09694       176.615       179.712    
   3  0.454275     -0.789053      -7.40592       7.40592       176.192       183.598    
   4  0.253407E-01  -3.67534      -34.4961       34.4961       178.702       213.198    
   5  0.611947     -0.491110      -4.60948       4.60948       183.048       187.658    
   6  0.234016      -1.45237      -13.6317       13.6317       182.339       195.970    
   7  0.359481E-01  -3.32568      -31.2142       31.2142       182.286       213.501    
   8  0.222118E-01  -3.80713      -35.7331       35.7331       182.376       218.109    
   9  0.905838E-01  -2.40148      -22.5399       22.5399       182.994       205.534    
  10  0.791683     -0.233594      -2.19247       2.19247       181.367       183.560    
  11  0.557734     -0.583873      -5.48013       5.48013       184.702       190.182    
  12  0.936048E-01  -2.36867      -22.2320       22.2320       176.338       198.570    
  13  0.431059     -0.841510      -7.89827       7.89827       184.342       192.240    
  14  0.225758      -1.48829      -13.9689       13.9689       179.337       193.306    
  15  0.275181E-01  -3.59291      -33.7225       33.7225       177.322       211.044    
  16  0.802517     -0.220002      -2.06490       2.06490       186.996       189.060    
  17  0.423872     -0.858323      -8.05607       8.05607       183.049       191.105    
  18  0.300971      -1.20074      -11.2700       11.2700       186.838       198.108    
  19  0.479556     -0.734895      -6.89760       6.89760       182.391       189.289    
  20  0.621838     -0.475076      -4.45898       4.45898       188.593       193.052    
  21  0.397654     -0.922172      -8.65535       8.65535       182.685       191.340    
  22  0.664976     -0.408004      -3.82946       3.82946       188.461       192.290    
  23  0.288358      -1.24355      -11.6718       11.6718       189.338       201.010    
  24  0.442017     -0.816406      -7.66265       7.66265       188.080       195.743    
  25  0.150763E-01  -4.19463      -39.3701       39.3701       186.979       226.350    
  26  0.600886     -0.509350      -4.78067       4.78067       184.656       189.437    
  27  0.162927      -1.81446      -17.0302       17.0302       186.718       203.748    
  28  0.932743     -0.696251E-01 -0.653490      0.653490       177.184       177.838    
  29  0.997186     -0.281799E-02 -0.264492E-01  0.264492E-01   184.209       184.235    
  30  0.418339     -0.871463      -8.17940       8.17940       190.026       198.206    
  31  0.694800     -0.364132      -3.41768       3.41768       189.965       193.383    
  32  0.852711     -0.159334      -1.49549       1.49549       183.150       184.646    
  33  0.624847     -0.470249      -4.41367       4.41367       184.949       189.362    
  34  0.427649     -0.849453      -7.97282       7.97282       187.830       195.803    
  35  0.149871      -1.89798      -17.8141       17.8141       187.014       204.828    
  36  0.563430     -0.573713      -5.38477       5.38477       189.207       194.591    
  37  0.860100     -0.150706      -1.41450       1.41450       193.963       195.377    
  38  0.867090E-01  -2.44520      -22.9502       22.9502       184.667       207.617    
  39  0.847848     -0.165054      -1.54917       1.54917       190.471       192.020    
  40  0.782599E-01  -2.54772      -23.9125       23.9125       188.172       212.085    
  41  0.697889E-01  -2.66228      -24.9877       24.9877       196.077       221.064    
  42  0.422765     -0.860939      -8.08062       8.08062       190.639       198.720    
  43  0.158365      -1.84286      -17.2967       17.2967       196.531       213.828    
  44  0.518935     -0.655976      -6.15688       6.15688       190.085       196.242    
  45  0.430406     -0.843027      -7.91251       7.91251       176.200       184.112    
  46  0.639805     -0.446592      -4.19164       4.19164       196.014       200.205    
  47  0.830453E-01  -2.48837      -23.3554       23.3554       183.479       206.834    
  48  0.639384     -0.447250      -4.19781       4.19781       196.829       201.026    
  49  0.833791     -0.181773      -1.70609       1.70609       187.739       189.445    
  50  0.453972     -0.789720      -7.41217       7.41217       198.628       206.041    
  51  0.542088     -0.612327      -5.74719       5.74719       190.440       196.187    
  52  0.271321      -1.30445      -12.2434       12.2434       189.173       201.417    
  53  0.176790      -1.73279      -16.2637       16.2637       194.535       210.799    
  54  0.511778     -0.669865      -6.28724       6.28724       190.528       196.815    
  55  0.632948     -0.457366      -4.29276       4.29276       195.396       199.689    
  56  0.252444      -1.37657      -12.9202       12.9202       188.629       201.549    
  57  0.726388     -0.319671      -3.00038       3.00038       194.866       197.866    
  58  0.483977     -0.725718      -6.81146       6.81146       190.284       197.096    
  59  0.497846     -0.697465      -6.54629       6.54629       194.390       200.937    
  60  0.369093     -0.996706      -9.35491       9.35491       191.182       200.536    
  61  0.225129      -1.49108      -13.9950       13.9950       191.170       205.165    
  62  0.908331E-01  -2.39873      -22.5141       22.5141       200.138       222.652    
  63  0.196370      -1.62776      -15.2778       15.2778       196.339       211.617    
  64  0.448748     -0.801293      -7.52080       7.52080       201.853       209.373    
  65  0.175426      -1.74054      -16.3364       16.3364       189.767       206.104    
  66  0.399277     -0.918099      -8.61712       8.61712       194.775       203.392    
  67  0.417464     -0.873557      -8.19905       8.19905       202.842       211.041    
  68  0.593993     -0.520889      -4.88897       4.88897       202.667       207.556    
  69  0.718485     -0.330610      -3.10305       3.10305       200.026       203.129    
  70  0.294519      -1.22241      -11.4734       11.4734       183.173       194.646    
  71  0.235197      -1.44733      -13.5844       13.5844       188.594       202.178    
  72  0.190064E-01  -3.96298      -37.1958       37.1958       181.591       218.786    
  73  0.295859      -1.21787      -11.4308       11.4308       240.479       251.910    
loop,thermsimp(1:2)       61   3.84441       3.09694    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    333        183.65          0.87          1.12         23.54          0.19          0.05         25.77
Just calling func    0   0         25.77


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    183.65
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    9.38583               361
loop is:       61
neval is:      332
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       61      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    75.0866      0.500000    
T0,tstep,tfreq (these do not change):             72
current SAtemp,tstepnext are:    9.38583               361
loop is:       62
neval is:      332


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      361
neval,tstepnext:      332     361

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.985932     -0.141675E-01 -0.132973      0.132973       177.184       177.317    
   2  0.420912     -0.865330      -8.12184       8.12184       174.847       182.969    
   3  0.617210     -0.482545      -4.52909       4.52909       176.615       181.144    
   4  0.787846     -0.238453      -2.23808       2.23808       181.367       183.605    
   5  0.608770     -0.496315      -4.65833       4.65833       176.192       180.851    
   6  0.925975     -0.769083E-01 -0.721848      0.721848       176.200       176.921    
   7  0.545822     -0.605462      -5.68276       5.68276       184.209       189.891    
   8  0.240142      -1.42653      -13.3891       13.3891       183.150       196.539    
   9  0.800257     -0.222822      -2.09137       2.09137       183.048       185.140    
  10  0.250149      -1.38570      -13.0059       13.0059       186.996       200.001    
  11  0.814044     -0.205741      -1.93105       1.93105       182.391       184.322    
  12  0.897552     -0.108084      -1.01446       1.01446       184.949       185.963    
  13  0.807530     -0.213775      -2.00646       2.00646       184.656       186.662    
  14  0.369031     -0.996874      -9.35649       9.35649       187.739       197.096    
  15  0.892620     -0.113594      -1.06618       1.06618       184.702       185.768    
  16  0.992736     -0.729054E-02 -0.684278E-01  0.684278E-01   183.049       183.117    
  17  0.264259      -1.33083      -12.4909       12.4909       182.685       195.175    
  18  0.164586      -1.80432      -16.9351       16.9351       190.471       207.406    
  19  0.594739     -0.519633      -4.87718       4.87718       184.342       189.219    
  20  0.766319     -0.266156      -2.49810       2.49810       188.461       190.959    
  21  0.392663     -0.934804      -8.77390       8.77390       188.593       197.367    
  22  0.900399     -0.104917     -0.984737      0.984737       179.337       180.322    
  23  0.853164E-01  -2.46139      -23.1022       23.1022       189.965       213.067    
  24  0.753181     -0.283450      -2.66041       2.66041       189.207       191.867    
  25  0.801958     -0.220699      -2.07144       2.07144       183.173       185.244    
  26  0.840206     -0.174108      -1.63415       1.63415       193.963       195.597    
  27  0.899787     -0.105597     -0.991119      0.991119       188.080       189.072    
  28  0.555629     -0.587654      -5.51562       5.51562       187.830       193.346    
  29  0.117481E-01  -4.44406      -41.7112       41.7112       182.339       224.050    
  30  0.228476      -1.47632      -13.8565       13.8565       190.440       204.296    
  31  0.121877      -2.10474      -19.7548       19.7548       190.085       209.840    
  32  0.475375     -0.743652      -6.97978       6.97978       190.528       197.508    
  33  0.208734      -1.56669      -14.7047       14.7047       190.284       204.989    
  34  0.680231     -0.385322      -3.61657       3.61657       194.866       198.483    
  35  0.211647      -1.55284      -14.5747       14.5747       186.838       201.413    
  36  0.982763     -0.173870E-01 -0.163192      0.163192       190.026       190.189    
  37  0.819904     -0.198568      -1.86373       1.86373       176.338       178.202    
  38  0.282339      -1.26465      -11.8698       11.8698       190.639       202.509    
  39  0.391986     -0.936529      -8.79010       8.79010       195.396       204.186    
  40  0.218050      -1.52303      -14.2949       14.2949       196.014       210.309    
  41  0.236244      -1.44289      -13.5427       13.5427       191.182       204.724    
  42  0.544673     -0.607570      -5.70254       5.70254       194.390       200.093    
  43  0.721937     -0.325818      -3.05807       3.05807       189.338       192.396    
  44  0.649728     -0.431202      -4.04718       4.04718       196.829       200.876    
  45  0.641823     -0.443443      -4.16208       4.16208       189.173       193.335    
  46  0.597293     -0.515347      -4.83696       4.83696       188.629       193.466    
  47  0.467405     -0.760558      -7.13847       7.13847       188.594       195.733    
  48  0.676900     -0.390232      -3.66265       3.66265       200.026       203.688    
  49  0.925913     -0.769750E-01 -0.722474      0.722474       194.775       195.498    
  50  0.692551     -0.367374      -3.44811       3.44811       186.718       190.166    
  51  0.161390      -1.82393      -17.1191       17.1191       187.014       204.133    
  52  0.513279     -0.666936      -6.25975       6.25975       191.170       197.430    
  53  0.379540     -0.968796      -9.09295       9.09295       182.994       192.087    
  54  0.557165     -0.584894      -5.48971       5.48971       198.628       204.118    
  55  0.459054     -0.778587      -7.30768       7.30768       189.767       197.075    
  56  0.466253     -0.763026      -7.16163       7.16163       183.479       190.641    
  57  0.635692E-01  -2.75563      -25.8638       25.8638       202.667       228.531    
  58  0.591279     -0.525467      -4.93194       4.93194       184.667       189.599    
  59  0.344168      -1.06663      -10.0112       10.0112       201.853       211.864    
  60  0.119291      -2.12619      -19.9560       19.9560       194.535       214.491    
  61  0.399057E-01  -3.22124      -30.2340       30.2340       202.842       233.076    
  62  0.737545     -0.304428      -2.85731       2.85731       177.322       180.179    
  63  0.855773     -0.155750      -1.46184       1.46184       196.339       197.801    
  64  0.604062E-01  -2.80666      -26.3429       26.3429       188.172       214.515    
  65  0.659236     -0.416674      -3.91083       3.91083       178.702       182.613    
  66  0.738818     -0.302704      -2.84112       2.84112       182.286       185.128    
  67  0.577372     -0.549268      -5.15534       5.15534       196.531       201.686    
  68  0.219220      -1.51768      -14.2447       14.2447       182.376       196.620    
  69  0.318915      -1.14283      -10.7264       10.7264       181.591       192.317    
  70  0.599810     -0.511142      -4.79749       4.79749       196.077       200.874    
  71  0.863673     -0.146561      -1.37560       1.37560       200.138       201.514    
  72  0.103344      -2.26969      -21.3029       21.3029       186.979       208.282    
  73  0.345925      -1.06153      -9.96338       9.96338       183.648       193.612    
loop,thermsimp(1:2)       62  0.132973       8.12184    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    334        183.43          0.86          1.13         23.48          0.24          0.05         25.76
Just calling func    0   0         25.76


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    183.43
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    9.38583               361
loop is:       62
neval is:      333
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       62      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    75.0866      0.500000    
T0,tstep,tfreq (these do not change):             72
current SAtemp,tstepnext are:    9.38583               361
loop is:       63
neval is:      333


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      361
neval,tstepnext:      333     361

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.984982     -0.151315E-01 -0.142022      0.142022       176.200       176.342    
   2  0.760415     -0.273890      -2.57069       2.57069       177.184       179.755    
   3  0.328612      -1.11288      -10.4453       10.4453       176.338       186.784    
   4  0.164880      -1.80254      -16.9183       16.9183       177.322       194.240    
   5  0.706606     -0.347282      -3.25953       3.25953       179.337       182.597    
   6  0.832070     -0.183839      -1.72548       1.72548       176.192       177.918    
   7  0.231505      -1.46315      -13.7329       13.7329       176.615       190.348    
   8  0.802671E-01  -2.52240      -23.6748       23.6748       178.702       202.377    
   9  0.116349      -2.15116      -20.1904       20.1904       174.847       195.037    
  10  0.874222     -0.134421      -1.26165       1.26165       183.049       184.310    
  11  0.729333     -0.315625      -2.96240       2.96240       181.367       184.330    
  12  0.301675      -1.19841      -11.2480       11.2480       182.391       193.639    
  13  0.496896     -0.699375      -6.56421       6.56421       182.286       188.851    
  14  0.692174     -0.367918      -3.45322       3.45322       183.048       186.502    
  15  0.717718     -0.331678      -3.11307       3.11307       183.173       186.286    
  16  0.867334E-01  -2.44492      -22.9476       22.9476       184.702       207.650    
  17  0.762934     -0.270584      -2.53965       2.53965       184.949       187.488    
  18  0.966741     -0.338246E-01 -0.317472      0.317472       184.656       184.973    
  19  0.375386     -0.979801      -9.19625       9.19625       188.080       197.277    
  20  0.878716     -0.129293      -1.21352       1.21352       184.342       185.555    
  21  0.238969      -1.43142      -13.4351       13.4351       184.667       198.102    
  22  0.939578     -0.623249E-01 -0.584971      0.584971       184.209       184.794    
  23  0.694828     -0.364091      -3.41729       3.41729       186.718       190.135    
  24  0.869149     -0.140241      -1.31627       1.31627       190.026       191.342    
  25  0.310010      -1.17115      -10.9922       10.9922       183.479       194.471    
  26  0.831753     -0.184219      -1.72905       1.72905       188.461       190.190    
  27  0.621050     -0.476344      -4.47088       4.47088       189.207       193.678    
  28  0.902274     -0.102837     -0.965213      0.965213       182.994       183.960    
  29  0.341345      -1.07486      -10.0885       10.0885       181.591       191.679    
  30  0.718647     -0.330385      -3.10093       3.10093       189.338       192.439    
  31  0.489532     -0.714305      -6.70434       6.70434       189.173       195.878    
  32  0.387793     -0.947282      -8.89103       8.89103       187.830       196.721    
  33  0.576785     -0.550285      -5.16488       5.16488       188.629       193.794    
  34  0.454048     -0.789552      -7.41060       7.41060       183.648       191.059    
  35  0.532728     -0.629744      -5.91067       5.91067       182.685       188.595    
  36  0.459832     -0.776895      -7.29180       7.29180       194.775       202.067    
  37  0.784910     -0.242187      -2.27312       2.27312       193.963       196.236    
  38  0.842297     -0.171622      -1.61081       1.61081       188.594       190.205    
  39  0.967556     -0.329823E-01 -0.309566      0.309566       183.150       183.460    
  40  0.126414      -2.06819      -19.4117       19.4117       182.376       201.787    
  41  0.407002     -0.898938      -8.43728       8.43728       189.767       198.205    
  42  0.903435     -0.101551     -0.953144      0.953144       187.739       188.693    
  43  0.430116     -0.843701      -7.91883       7.91883       188.593       196.511    
  44  0.675859     -0.391771      -3.67710       3.67710       191.170       194.847    
  45  0.444470     -0.810872      -7.61070       7.61070       190.528       198.139    
  46  0.728661     -0.316547      -2.97105       2.97105       196.339       199.310    
  47  0.143617      -1.94060      -18.2142       18.2142       194.866       213.080    
  48  0.729467E-01  -2.61803      -24.5723       24.5723       186.996       211.568    
  49  0.720547     -0.327745      -3.07615       3.07615       194.390       197.466    
  50  0.742905     -0.297187      -2.78934       2.78934       196.077       198.866    
  51  0.807330     -0.214023      -2.00879       2.00879       196.829       198.837    
  52  0.387442     -0.948190      -8.89955       8.89955       186.838       195.738    
  53  0.207045      -1.57482      -14.7810       14.7810       200.138       214.919    
  54  0.823983     -0.193606      -1.81715       1.81715       196.531       198.348    
  55  0.950173E-01  -2.35370      -22.0914       22.0914       190.639       212.731    
  56  0.662008     -0.412478      -3.87145       3.87145       200.026       203.897    
  57  0.640494E-01  -2.74810      -25.7932       25.7932       198.628       224.422    
  58  0.772515     -0.258104      -2.42252       2.42252       187.014       189.437    
  59  0.204175      -1.58878      -14.9120       14.9120       195.396       210.308    
  60  0.193223      -1.64391      -15.4294       15.4294       190.440       205.869    
  61  0.846602     -0.166525      -1.56297       1.56297       191.182       192.744    
  62  0.699262E-01  -2.66031      -24.9693       24.9693       190.284       215.253    
  63  0.581483     -0.542173      -5.08874       5.08874       190.471       195.559    
  64  0.497263     -0.698636      -6.55728       6.55728       186.979       193.537    
  65  0.912190     -0.919065E-01 -0.862618      0.862618       190.085       190.948    
  66  0.486665     -0.720179      -6.75947       6.75947       196.014       202.773    
  67  0.635633     -0.453135      -4.25304       4.25304       201.853       206.106    
  68  0.217422      -1.52591      -14.3220       14.3220       189.965       204.287    
  69  0.214720E-01  -3.84101      -36.0510       36.0510       194.535       230.586    
  70  0.256495      -1.36065      -12.7708       12.7708       188.172       200.943    
  71  0.838851     -0.175722      -1.64929       1.64929       182.339       183.988    
  72  0.319226      -1.14186      -10.7173       10.7173       202.667       213.384    
  73  0.779832     -0.248677      -2.33404       2.33404       183.432       185.766    
loop,thermsimp(1:2)       63  0.142022       2.57069    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    335        209.04          0.86          1.13         23.61          0.18          0.05         25.82
Just calling func    0   0         25.82


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    209.04
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    9.38583               361
loop is:       63
neval is:      334
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       63      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    75.0866      0.500000    
T0,tstep,tfreq (these do not change):             72
current SAtemp,tstepnext are:    9.38583               361
loop is:       64
neval is:      334


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      361
neval,tstepnext:      334     361

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.964311     -0.363416E-01 -0.341096      0.341096       176.200       176.541    
   2  0.186231      -1.68077      -15.7754       15.7754       176.192       191.968    
   3  0.127308      -2.06115      -19.3456       19.3456       177.184       196.530    
   4  0.305661      -1.18528      -11.1248       11.1248       179.337       190.462    
   5  0.685804     -0.377164      -3.53999       3.53999       183.150       186.690    
   6  0.713250     -0.337923      -3.17169       3.17169       182.994       186.166    
   7  0.562604     -0.575180      -5.39854       5.39854       182.339       187.737    
   8  0.410540     -0.890283      -8.35604       8.35604       183.049       191.405    
   9  0.667633     -0.404017      -3.79203       3.79203       181.367       185.159    
  10  0.111237      -2.19609      -20.6121       20.6121       184.209       204.821    
  11  0.987129     -0.129550E-01 -0.121593      0.121593       184.656       184.777    
  12  0.525481     -0.643442      -6.03923       6.03923       184.342       190.381    
  13  0.740553     -0.300358      -2.81911       2.81911       183.432       186.251    
  14  0.456748E-01  -3.08621      -28.9666       28.9666       183.173       212.139    
  15  0.831796     -0.184168      -1.72857       1.72857       183.048       184.777    
  16  0.798422     -0.225118      -2.11292       2.11292       176.338       178.451    
  17  0.985535     -0.145708E-01 -0.136759      0.136759       184.949       185.085    
  18  0.323340      -1.12905      -10.5971       10.5971       182.685       193.282    
  19  0.745026     -0.294336      -2.76259       2.76259       187.739       190.502    
  20  0.711871     -0.339858      -3.18985       3.18985       182.286       185.476    
  21  0.232875      -1.45725      -13.6775       13.6775       187.014       200.692    
  22  0.118192      -2.13545      -20.0429       20.0429       186.718       206.761    
  23  0.310641      -1.16912      -10.9731       10.9731       188.461       199.434    
  24  0.220899      -1.51005      -14.1731       14.1731       188.594       202.767    
  25  0.487797     -0.717856      -6.73767       6.73767       176.615       183.353    
  26  0.278848      -1.27709      -11.9865       11.9865       190.085       202.072    
  27  0.159355      -1.83662      -17.2382       17.2382       183.648       200.887    
  28  0.473156     -0.748329      -7.02369       7.02369       190.026       197.050    
  29  0.358980      -1.02449      -9.61567       9.61567       181.591       191.206    
  30  0.873266     -0.135515      -1.27192       1.27192       189.338       190.610    
  31  0.168201      -1.78260      -16.7311       16.7311       191.182       207.913    
  32  0.492581     -0.708096      -6.64606       6.64606       186.979       193.626    
  33  0.878329     -0.129734      -1.21766       1.21766       182.391       183.609    
  34  0.266147      -1.32371      -12.4241       12.4241       189.207       201.631    
  35  0.510485     -0.672394      -6.31097       6.31097       188.629       194.940    
  36  0.810074     -0.210630      -1.97694       1.97694       177.322       179.299    
  37  0.950614     -0.506467E-01 -0.475361      0.475361       183.479       183.954    
  38  0.329006      -1.11168      -10.4340       10.4340       191.170       201.604    
  39  0.934893E-01  -2.36991      -22.2436       22.2436       174.847       197.091    
  40  0.686671     -0.375900      -3.52813       3.52813       190.471       193.999    
  41  0.888060     -0.118716      -1.11425       1.11425       186.838       187.953    
  42  0.749618     -0.288192      -2.70492       2.70492       189.173       191.878    
  43  0.433754     -0.835279      -7.83978       7.83978       193.963       201.803    
  44  0.630341     -0.461494      -4.33150       4.33150       188.593       192.924    
  45  0.569388     -0.563194      -5.28604       5.28604       187.830       193.116    
  46  0.965872     -0.347242E-01 -0.325915      0.325915       188.080       188.406    
  47  0.797995     -0.225653      -2.11794       2.11794       194.390       196.508    
  48  0.716091     -0.333948      -3.13437       3.13437       184.667       187.801    
  49  0.339849      -1.07925      -10.1297       10.1297       190.528       200.658    
  50  0.202757      -1.59575      -14.9774       14.9774       189.767       204.745    
  51  0.266068      -1.32400      -12.4269       12.4269       196.531       208.958    
  52  0.985546E-01  -2.31715      -21.7483       21.7483       196.829       218.577    
  53  0.751309     -0.285938      -2.68377       2.68377       196.077       198.760    
  54  0.846042     -0.167187      -1.56919       1.56919       196.339       197.908    
  55  0.714380     -0.336340      -3.15683       3.15683       188.172       191.329    
  56  0.873273     -0.135507      -1.27185       1.27185       182.376       183.648    
  57  0.373211     -0.985610      -9.25076       9.25076       194.775       204.026    
  58  0.618869     -0.479862      -4.50390       4.50390       178.702       183.206    
  59  0.529025     -0.636720      -5.97614       5.97614       196.014       201.990    
  60  0.659913E-01  -2.71823      -25.5129       25.5129       200.026       225.538    
  61  0.541361E-01  -2.91625      -27.3715       27.3715       189.965       217.336    
  62  0.785735E-01  -2.54372      -23.8749       23.8749       190.440       214.315    
  63  0.569382     -0.563203      -5.28613       5.28613       201.853       207.139    
  64  0.564569     -0.571693      -5.36581       5.36581       184.702       190.068    
  65  0.689424     -0.371899      -3.49058       3.49058       195.396       198.887    
  66  0.992491     -0.753783E-02 -0.707488E-01  0.707488E-01   186.996       187.066    
  67  0.922665     -0.804887E-01 -0.755453      0.755453       190.639       191.395    
  68  0.497573     -0.698012      -6.55142       6.55142       194.866       201.417    
  69  0.594717     -0.519669      -4.87752       4.87752       202.667       207.545    
  70  0.132266      -2.02294      -18.9870       18.9870       200.138       219.125    
  71  0.165174      -1.80075      -16.9016       16.9016       190.284       207.186    
  72  0.787265     -0.239190      -2.24500       2.24500       198.628       200.873    
  73  0.825773     -0.191435      -1.79678       1.79678       209.038       210.835    
loop,thermsimp(1:2)       64  0.341096       15.7754    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    336        180.20          0.85          1.12         23.58          0.18          0.05         25.79
Just calling func    0   0         25.79


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    180.20
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    9.38583               361
loop is:       64
neval is:      335
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       64      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    75.0866      0.500000    
T0,tstep,tfreq (these do not change):             72
current SAtemp,tstepnext are:    9.38583               361
loop is:       65
neval is:      335


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      361
neval,tstepnext:      335     361

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.424550     -0.856726      -8.04108       8.04108       176.200       184.241    
   2  0.350039      -1.04971      -9.85239       9.85239       176.338       186.191    
   3  0.872911     -0.135921      -1.27573       1.27573       177.322       178.598    
   4  0.829005     -0.187529      -1.76011       1.76011       178.702       180.462    
   5  0.201827      -1.60035      -15.0206       15.0206       176.615       191.635    
   6  0.735791     -0.306809      -2.87966       2.87966       182.391       185.271    
   7  0.985788     -0.143135E-01 -0.134344      0.134344       182.376       182.510    
   8  0.962727     -0.379858E-01 -0.356528      0.356528       183.479       183.835    
   9  0.796954     -0.226958      -2.13019       2.13019       183.048       185.179    
  10  0.563149     -0.574211      -5.38944       5.38944       184.656       190.045    
  11  0.776846     -0.252513      -2.37005       2.37005       184.949       187.319    
  12  0.921010     -0.822839E-01 -0.772302      0.772302       181.367       182.140    
  13  0.884938     -0.122238      -1.14731       1.14731       182.286       183.434    
  14  0.850974     -0.161373      -1.51462       1.51462       182.994       184.509    
  15  0.391065     -0.938882      -8.81218       8.81218       183.432       192.244    
  16  0.150921      -1.89100      -17.7486       17.7486       183.150       200.899    
  17  0.295162      -1.22023      -11.4529       11.4529       186.996       198.448    
  18  0.662567     -0.411634      -3.86353       3.86353       182.339       186.202    
  19  0.893994     -0.112056      -1.05174       1.05174       184.667       185.718    
  20  0.103282      -2.27029      -21.3086       21.3086       186.838       208.147    
  21  0.416341     -0.876251      -8.22434       8.22434       188.080       196.305    
  22  0.986101E-01  -2.31658      -21.7430       21.7430       184.702       206.445    
  23  0.617817E-01  -2.78415      -26.1315       26.1315       184.342       210.473    
  24  0.371945     -0.989010      -9.28267       9.28267       179.337       188.620    
  25  0.884755     -0.122444      -1.14924       1.14924       187.739       188.889    
  26  0.584237     -0.537449      -5.04441       5.04441       189.338       194.382    
  27  0.239981      -1.42719      -13.3954       13.3954       181.591       194.986    
  28  0.106477      -2.23982      -21.0226       21.0226       188.172       209.195    
  29  0.142954      -1.94523      -18.2576       18.2576       190.639       208.897    
  30  0.802284     -0.220292      -2.06762       2.06762       183.049       185.116    
  31  0.373571     -0.984648      -9.24174       9.24174       189.173       198.415    
  32  0.617091     -0.482739      -4.53091       4.53091       176.192       180.723    
  33  0.813617     -0.206266      -1.93598       1.93598       188.593       190.529    
  34  0.219787E-01  -3.81768      -35.8321       35.8321       187.830       223.663    
  35  0.398995     -0.918807      -8.62377       8.62377       182.685       191.308    
  36  0.906985     -0.976296E-01 -0.916334      0.916334       186.979       187.896    
  37  0.259146E-01  -3.65295      -34.2859       34.2859       190.471       224.757    
  38  0.347543      -1.05687      -9.91958       9.91958       188.629       198.549    
  39  0.879549     -0.128346      -1.20463       1.20463       194.390       195.595    
  40  0.618015     -0.481242      -4.51685       4.51685       177.184       181.701    
  41  0.173348      -1.75246      -16.4482       16.4482       190.026       206.474    
  42  0.324418      -1.12572      -10.5658       10.5658       174.847       185.413    
  43  0.426503     -0.852135      -7.99799       7.99799       196.339       204.337    
  44  0.672650     -0.396530      -3.72176       3.72176       196.077       199.798    
  45  0.500711     -0.691727      -6.49243       6.49243       195.396       201.889    
  46  0.457446     -0.782097      -7.34062       7.34062       188.461       195.801    
  47  0.408507     -0.895245      -8.40262       8.40262       190.528       198.931    
  48  0.649058     -0.432234      -4.05687       4.05687       187.014       191.071    
  49  0.275220      -1.29018      -12.1094       12.1094       198.628       210.738    
  50  0.706820     -0.346979      -3.25669       3.25669       183.648       186.905    
  51  0.596044     -0.517441      -4.85661       4.85661       194.866       199.723    
  52  0.362601      -1.01445      -9.52147       9.52147       191.170       200.692    
  53  0.934637     -0.675969E-01 -0.634452      0.634452       189.207       189.841    
  54  0.724055     -0.322888      -3.03057       3.03057       193.963       196.993    
  55  0.871040     -0.138067      -1.29587       1.29587       196.014       197.310    
  56  0.722457     -0.325097      -3.05130       3.05130       190.085       193.136    
  57  0.840721     -0.173495      -1.62839       1.62839       188.594       190.222    
  58  0.702714     -0.352805      -3.31137       3.31137       194.775       198.087    
  59  0.436737     -0.828424      -7.77544       7.77544       189.767       197.543    
  60  0.419753E-01  -3.17067      -29.7594       29.7594       184.209       213.968    
  61  0.588078     -0.530895      -4.98289       4.98289       186.718       191.701    
  62  0.762320     -0.271389      -2.54721       2.54721       201.853       204.400    
  63  0.646142     -0.436736      -4.09913       4.09913       190.284       194.383    
  64  0.940150     -0.617158E-01 -0.579254      0.579254       202.667       203.246    
  65  0.254129      -1.36991      -12.8578       12.8578       191.182       204.039    
  66  0.598588     -0.513182      -4.81664       4.81664       196.531       201.348    
  67  0.254926      -1.36678      -12.8284       12.8284       209.038       221.867    
  68  0.423512     -0.859172      -8.06404       8.06404       183.173       191.237    
  69  0.562567     -0.575245      -5.39915       5.39915       190.440       195.839    
  70  0.451860     -0.794383      -7.45594       7.45594       189.965       197.421    
  71  0.683714E-01  -2.68280      -25.1803       25.1803       196.829       222.009    
  72  0.301554E-01  -3.50139      -32.8634       32.8634       200.138       233.001    
  73  0.720678E-01  -2.63015      -24.6861       24.6861       180.202       204.888    
loop,thermsimp(1:2)       65   8.04108       9.85239    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    337        204.54          0.86          1.12         23.84          0.14          0.05         26.02
Just calling func    0   0         26.02


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    204.54
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    9.38583               361
loop is:       65
neval is:      336
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       65      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    75.0866      0.500000    
T0,tstep,tfreq (these do not change):             72
current SAtemp,tstepnext are:    9.38583               361
loop is:       66
neval is:      336


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      361
neval,tstepnext:      336     361

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.474155     -0.746220      -7.00389       7.00389       177.322       184.326    
   2  0.162949E-01  -4.11691      -38.6406       38.6406       178.702       217.342    
   3  0.560104     -0.579632      -5.44033       5.44033       176.192       181.633    
   4  0.583629     -0.538490      -5.05417       5.05417       177.184       182.239    
   5  0.794243     -0.230366      -2.16217       2.16217       181.367       183.529    
   6  0.183626E-01  -3.99744      -37.5193       37.5193       182.376       219.895    
   7  0.642495     -0.442397      -4.15226       4.15226       182.286       186.439    
   8  0.611061E-02  -5.09773      -47.8464       47.8464       183.479       231.325    
   9  0.974115E-01  -2.32881      -21.8578       21.8578       176.200       198.057    
  10  0.817249E-01  -2.50440      -23.5058       23.5058       182.994       206.500    
  11  0.644422     -0.439401      -4.12414       4.12414       183.049       187.173    
  12  0.378181     -0.972383      -9.12662       9.12662       183.048       192.175    
  13  0.105422      -2.24978      -21.1161       21.1161       182.391       203.507    
  14  0.713647     -0.337367      -3.16647       3.16647       174.847       178.013    
  15  0.602100     -0.507333      -4.76174       4.76174       184.667       189.428    
  16  0.746624     -0.292194      -2.74248       2.74248       176.338       179.081    
  17  0.687673     -0.374442      -3.51445       3.51445       182.339       185.853    
  18  0.356323      -1.03192      -9.68541       9.68541       183.648       193.334    
  19  0.631203     -0.460128      -4.31869       4.31869       184.949       189.267    
  20  0.348432      -1.05431      -9.89560       9.89560       186.979       196.875    
  21  0.200848      -1.60521      -15.0662       15.0662       179.337       194.404    
  22  0.863860     -0.146345      -1.37357       1.37357       187.739       189.113    
  23  0.278415      -1.27864      -12.0011       12.0011       189.207       201.208    
  24  0.871038     -0.138069      -1.29590       1.29590       184.656       185.952    
  25  0.581010     -0.542987      -5.09638       5.09638       188.594       193.690    
  26  0.960519     -0.402815E-01 -0.378075      0.378075       188.593       188.971    
  27  0.104828      -2.25543      -21.1691       21.1691       187.014       208.183    
  28  0.907238     -0.973501E-01 -0.913712      0.913712       183.173       184.087    
  29  0.685005     -0.378330      -3.55094       3.55094       182.685       186.236    
  30  0.239566E-01  -3.73151      -35.0233       35.0233       176.615       211.638    
  31  0.643900     -0.440211      -4.13175       4.13175       186.718       190.850    
  32  0.526819     -0.640898      -6.01536       6.01536       183.432       189.447    
  33  0.463387     -0.769192      -7.21951       7.21951       190.085       197.305    
  34  0.847158E-01  -2.46845      -23.1685       23.1685       189.338       212.506    
  35  0.134368E-01  -4.30976      -40.4507       40.4507       190.284       230.735    
  36  0.141068      -1.95851      -18.3822       18.3822       181.591       199.973    
  37  0.239867      -1.42767      -13.3999       13.3999       194.390       207.790    
  38  0.317049      -1.14870      -10.7815       10.7815       188.461       199.242    
  39  0.925847     -0.770459E-01 -0.723140      0.723140       190.440       191.163    
  40  0.939258     -0.626649E-01 -0.588162      0.588162       188.080       188.669    
  41  0.111598      -2.19286      -20.5818       20.5818       193.963       214.545    
  42  0.357545      -1.02849      -9.65326       9.65326       196.014       205.667    
  43  0.902640     -0.102432     -0.961407      0.961407       189.965       190.926    
  44  0.914421     -0.894640E-01 -0.839694      0.839694       189.767       190.607    
  45  0.320420      -1.13812      -10.6822       10.6822       194.775       205.457    
  46  0.341333      -1.07490      -10.0888       10.0888       189.173       199.262    
  47  0.509727     -0.673879      -6.32491       6.32491       186.996       193.320    
  48  0.130581E-02  -6.64093      -62.3306       62.3306       188.629       250.960    
  49  0.105413      -2.24987      -21.1168       21.1168       190.528       211.645    
  50  0.743306     -0.296647      -2.78428       2.78428       194.866       197.650    
  51  0.114013      -2.17144      -20.3808       20.3808       196.077       216.457    
  52  0.225326      -1.49021      -13.9868       13.9868       191.170       205.157    
  53  0.131158      -2.03135      -19.0659       19.0659       183.150       202.216    
  54  0.886877     -0.120049      -1.12676       1.12676       196.531       197.658    
  55  0.202581      -1.59661      -14.9856       14.9856       195.396       210.382    
  56  0.890722     -0.115722      -1.08615       1.08615       202.667       203.753    
  57  0.154728      -1.86608      -17.5147       17.5147       191.182       208.696    
  58  0.246051      -1.40222      -13.1610       13.1610       196.339       209.500    
  59  0.936822     -0.652622E-01 -0.612540      0.612540       201.853       202.465    
  60  0.803405     -0.218896      -2.05452       2.05452       180.202       182.257    
  61  0.621921E-01  -2.77753      -26.0694       26.0694       184.702       210.772    
  62  0.114098      -2.17070      -20.3738       20.3738       190.026       210.400    
  63  0.750290     -0.287295      -2.69650       2.69650       186.838       189.535    
  64  0.946840     -0.546256E-01 -0.512707      0.512707       190.639       191.152    
  65  0.149613      -1.89970      -17.8303       17.8303       188.172       206.003    
  66  0.470076     -0.754861      -7.08500       7.08500       184.342       191.427    
  67  0.936184     -0.659437E-01 -0.618936      0.618936       198.628       199.247    
  68  0.136491      -1.99150      -18.6918       18.6918       184.209       202.901    
  69  0.660647     -0.414536      -3.89077       3.89077       209.038       212.929    
  70  0.438707     -0.823923      -7.73319       7.73319       196.829       204.562    
  71  0.641830     -0.443432      -4.16197       4.16197       187.830       191.992    
  72  0.841754E-01  -2.47485      -23.2285       23.2285       190.471       213.699    
  73  0.185718      -1.68352      -15.8013       15.8013       204.537       220.338    
loop,thermsimp(1:2)       66   7.00389       38.6406    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    338        183.36          0.86          1.13         23.66          0.11          0.05         25.80
Just calling func    0   0         25.81


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    183.36
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    9.38583               361
loop is:       66
neval is:      337
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       66      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    75.0866      0.500000    
T0,tstep,tfreq (these do not change):             72
current SAtemp,tstepnext are:    9.38583               361
loop is:       67
neval is:      337


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      361
neval,tstepnext:      337     361

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.711215     -0.340780      -3.19850       3.19850       174.847       178.045    
   2  0.492413     -0.708438      -6.64927       6.64927       176.338       182.988    
   3  0.156563      -1.85430      -17.4041       17.4041       176.192       193.596    
   4  0.185270      -1.68594      -15.8240       15.8240       177.184       193.008    
   5  0.685983     -0.376903      -3.53754       3.53754       180.202       183.740    
   6  0.518581     -0.656659      -6.16329       6.16329       181.367       187.531    
   7  0.430667     -0.842421      -7.90682       7.90682       183.173       191.080    
   8  0.748228     -0.290047      -2.72233       2.72233       177.322       180.044    
   9  0.348167      -1.05507      -9.90273       9.90273       182.339       192.241    
  10  0.281980E-01  -3.56850      -33.4934       33.4934       184.656       218.149    
  11  0.670749     -0.399360      -3.74832       3.74832       182.685       186.433    
  12  0.225031      -1.49152      -13.9991       13.9991       182.286       196.286    
  13  0.258016      -1.35474      -12.7153       12.7153       183.049       195.764    
  14  0.122388      -2.10056      -19.7155       19.7155       188.080       207.796    
  15  0.556210     -0.586609      -5.50581       5.50581       188.593       194.098    
  16  0.938933     -0.630108E-01 -0.591409      0.591409       187.739       188.331    
  17  0.440352     -0.820180      -7.69807       7.69807       184.949       192.647    
  18  0.779048     -0.249683      -2.34348       2.34348       184.667       187.010    
  19  0.929725     -0.728667E-01 -0.683914      0.683914       183.432       184.116    
  20  0.330740      -1.10642      -10.3847       10.3847       186.838       197.223    
  21  0.214890      -1.53763      -14.4319       14.4319       189.767       204.199    
  22  0.363221      -1.01274      -9.50544       9.50544       186.718       196.223    
  23  0.681309     -0.383740      -3.60172       3.60172       189.965       193.567    
  24  0.107313      -2.23200      -20.9492       20.9492       190.639       211.588    
  25  0.622524     -0.473973      -4.44863       4.44863       190.440       194.889    
  26  0.532378     -0.630402      -5.91684       5.91684       184.342       190.259    
  27  0.298562      -1.20878      -11.3454       11.3454       187.830       199.176    
  28  0.432099     -0.839100      -7.87565       7.87565       183.048       190.924    
  29  0.243978      -1.41068      -13.2404       13.2404       186.996       200.236    
  30  0.581243     -0.542587      -5.09262       5.09262       183.648       188.741    
  31  0.897127E-01  -2.41114      -22.6306       22.6306       188.594       211.225    
  32  0.738124     -0.303644      -2.84995       2.84995       179.337       182.187    
  33  0.462727     -0.770619      -7.23289       7.23289       186.979       194.212    
  34  0.984641E-01  -2.31806      -21.7569       21.7569       190.085       211.842    
  35  0.641923     -0.443287      -4.16062       4.16062       194.866       199.027    
  36  0.334628      -1.09474      -10.2750       10.2750       196.531       206.806    
  37  0.482851     -0.728048      -6.83333       6.83333       176.200       183.033    
  38  0.826279     -0.190822      -1.79103       1.79103       188.461       190.252    
  39  0.966417     -0.341596E-01 -0.320616      0.320616       198.628       198.949    
  40  0.236833      -1.44040      -13.5194       13.5194       189.173       202.693    
  41  0.274744      -1.29192      -12.1257       12.1257       181.591       193.716    
  42  0.310307      -1.17019      -10.9832       10.9832       189.207       200.190    
  43  0.697298     -0.360543      -3.38399       3.38399       183.150       186.534    
  44  0.239072      -1.43099      -13.4310       13.4310       201.853       215.284    
  45  0.809729     -0.211055      -1.98093       1.98093       184.209       186.190    
  46  0.651880     -0.427895      -4.01615       4.01615       182.391       186.408    
  47  0.515020     -0.663550      -6.22796       6.22796       202.667       208.895    
  48  0.359059      -1.02427      -9.61361       9.61361       196.829       206.442    
  49  0.516010E-02  -5.26680      -49.4333       49.4333       191.170       240.603    
  50  0.321807      -1.13380      -10.6417       10.6417       194.775       205.417    
  51  0.787972     -0.238293      -2.23658       2.23658       196.014       198.250    
  52  0.842264     -0.171662      -1.61119       1.61119       188.172       189.783    
  53  0.201829      -1.60034      -15.0205       15.0205       182.994       198.015    
  54  0.650136     -0.430573      -4.04128       4.04128       194.390       198.432    
  55  0.498155     -0.696844      -6.54045       6.54045       187.014       193.555    
  56  0.780214E-01  -2.55077      -23.9411       23.9411       191.182       215.123    
  57  0.840777     -0.173429      -1.62777       1.62777       196.339       197.967    
  58  0.514128     -0.665282      -6.24422       6.24422       195.396       201.640    
  59  0.683522E-01  -2.68308      -25.1829       25.1829       190.026       215.209    
  60  0.376137E-01  -3.28039      -30.7892       30.7892       184.702       215.491    
  61  0.284022      -1.25870      -11.8140       11.8140       176.615       188.429    
  62  0.136027      -1.99490      -18.7238       18.7238       190.528       209.252    
  63  0.698137     -0.359341      -3.37271       3.37271       189.338       192.711    
  64  0.436751     -0.828392      -7.77515       7.77515       209.038       216.814    
  65  0.983110     -0.170340E-01 -0.159878      0.159878       190.471       190.630    
  66  0.807889E-01  -2.51592      -23.6139       23.6139       193.963       217.577    
  67  0.618306     -0.480773      -4.51245       4.51245       196.077       200.589    
  68  0.640808     -0.445025      -4.17692       4.17692       178.702       182.879    
  69  0.353445      -1.04003      -9.76152       9.76152       182.376       192.137    
  70  0.705613     -0.348688      -3.27272       3.27272       204.537       207.809    
  71  0.559094     -0.581438      -5.45728       5.45728       190.284       195.742    
  72  0.496930     -0.699307      -6.56357       6.56357       183.479       190.042    
  73  0.113595      -2.17512      -20.4153       20.4153       183.359       203.774    
loop,thermsimp(1:2)       67   3.19850       6.64927    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    339        411.07          0.86          1.12         23.54          0.21          0.05         25.79
Just calling func    0   0         25.78


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    340        210.05          0.86          1.13         23.60          0.10          0.05         25.74
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3    210.05
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    9.38583               361
loop is:       67
neval is:      339
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       67      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    75.0866      0.500000    
T0,tstep,tfreq (these do not change):             72
current SAtemp,tstepnext are:    9.38583               361
loop is:       68
neval is:      339


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      361
neval,tstepnext:      339     361

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.595062     -0.519089      -4.87208       4.87208       174.847       179.719    
   2  0.204294      -1.58819      -14.9065       14.9065       177.322       192.228    
   3  0.902141     -0.102985     -0.966595      0.966595       179.337       180.304    
   4  0.317306      -1.14789      -10.7739       10.7739       178.702       189.476    
   5  0.914914E-01  -2.39151      -22.4463       22.4463       176.338       198.785    
   6  0.362439      -1.01490      -9.52566       9.52566       176.200       185.725    
   7  0.284546      -1.25686      -11.7967       11.7967       180.202       191.999    
   8  0.752727     -0.284053      -2.66607       2.66607       183.432       186.098    
   9  0.972148     -0.282475E-01 -0.265126      0.265126       184.209       184.474    
  10  0.312417      -1.16342      -10.9196       10.9196       182.391       193.311    
  11  0.772549E-01  -2.56064      -24.0338       24.0338       182.685       206.718    
  12  0.190763      -1.65672      -15.5497       15.5497       183.150       198.700    
  13  0.829036     -0.187492      -1.75977       1.75977       184.667       186.426    
  14  0.309766      -1.17194      -10.9996       10.9996       181.367       192.367    
  15  0.691616     -0.368724      -3.46078       3.46078       187.739       191.200    
  16  0.177510      -1.72873      -16.2256       16.2256       176.615       192.840    
  17  0.848561     -0.164214      -1.54128       1.54128       183.648       185.190    
  18  0.464945     -0.765836      -7.18800       7.18800       188.172       195.360    
  19  0.626682     -0.467316      -4.38615       4.38615       183.479       187.865    
  20  0.451266     -0.795699      -7.46830       7.46830       188.461       195.929    
  21  0.161179E-01  -4.12783      -38.7431       38.7431       184.342       223.085    
  22  0.848853     -0.163869      -1.53805       1.53805       190.471       192.009    
  23  0.565946     -0.569256      -5.34294       5.34294       183.048       188.391    
  24  0.798567     -0.224937      -2.11122       2.11122       183.173       185.284    
  25  0.282371      -1.26453      -11.8687       11.8687       182.376       194.244    
  26  0.887219     -0.119663      -1.12314       1.12314       182.339       183.462    
  27  0.311981      -1.16481      -10.9327       10.9327       184.949       195.881    
  28  0.454937     -0.787596      -7.39224       7.39224       189.338       196.730    
  29  0.200774E-01  -3.90816      -36.6813       36.6813       177.184       213.866    
  30  0.549692     -0.598397      -5.61645       5.61645       187.014       192.631    
  31  0.928164     -0.745470E-01 -0.699685      0.699685       189.965       190.665    
  32  0.876026     -0.132360      -1.24231       1.24231       176.192       177.435    
  33  0.360538      -1.02016      -9.57502       9.57502       181.591       191.166    
  34  0.810484     -0.210124      -1.97219       1.97219       188.593       190.565    
  35  0.350387      -1.04872      -9.84308       9.84308       186.979       196.823    
  36  0.609257     -0.495514      -4.65081       4.65081       190.440       195.091    
  37  0.847473     -0.165497      -1.55332       1.55332       190.284       191.838    
  38  0.459433     -0.777763      -7.29994       7.29994       183.049       190.349    
  39  0.213778      -1.54282      -14.4806       14.4806       186.718       201.199    
  40  0.983077     -0.170677E-01 -0.160194      0.160194       182.286       182.447    
  41  0.719533     -0.329153      -3.08937       3.08937       186.838       189.928    
  42  0.317292      -1.14793      -10.7743       10.7743       196.339       207.113    
  43  0.300670      -1.20174      -11.2793       11.2793       182.994       194.274    
  44  0.486388     -0.720748      -6.76482       6.76482       196.014       202.779    
  45  0.309580      -1.17254      -11.0052       11.0052       194.390       205.396    
  46  0.111802      -2.19103      -20.5646       20.5646       198.628       219.193    
  47  0.913484     -0.904897E-01 -0.849321      0.849321       194.866       195.715    
  48  0.438377     -0.824676      -7.74027       7.74027       187.830       195.571    
  49  0.773114     -0.257329      -2.41525       2.41525       189.207       191.622    
  50  0.248259      -1.39328      -13.0771       13.0771       186.996       200.073    
  51  0.502855     -0.687454      -6.45233       6.45233       196.077       202.529    
  52  0.827610E-01  -2.49180      -23.3876       23.3876       195.396       218.784    
  53  0.528759     -0.637222      -5.98086       5.98086       189.173       195.154    
  54  0.711957     -0.339738      -3.18873       3.18873       183.359       186.548    
  55  0.703963     -0.351029      -3.29470       3.29470       189.767       193.062    
  56  0.419247     -0.869295      -8.15905       8.15905       194.775       202.934    
  57  0.939830     -0.620566E-01 -0.582452      0.582452       196.829       197.411    
  58  0.401337     -0.912955      -8.56884       8.56884       196.531       205.100    
  59  0.547477     -0.602435      -5.65435       5.65435       188.080       193.735    
  60  0.237364      -1.43816      -13.4983       13.4983       204.537       218.035    
  61  0.619970E-01  -2.78067      -26.0989       26.0989       202.667       228.766    
  62  0.662658     -0.411496      -3.86223       3.86223       190.528       194.390    
  63  0.891998     -0.114291      -1.07272       1.07272       188.594       189.667    
  64  0.830370     -0.185883      -1.74467       1.74467       190.639       192.384    
  65  0.900614     -0.104678     -0.982494      0.982494       190.085       191.068    
  66  0.258356      -1.35342      -12.7029       12.7029       191.182       203.884    
  67  0.946683E-01  -2.35738      -22.1259       22.1259       190.026       212.152    
  68  0.763751     -0.269514      -2.52961       2.52961       201.853       204.382    
  69  0.161805      -1.82136      -17.0950       17.0950       184.702       201.797    
  70  0.571882     -0.558823      -5.24502       5.24502       209.038       214.283    
  71  0.421732     -0.863386      -8.10359       8.10359       193.963       202.066    
  72  0.877271     -0.130939      -1.22898       1.22898       184.656       185.885    
  73  0.186780      -1.67783      -15.7478       15.7478       210.053       225.801    
loop,thermsimp(1:2)       68   4.87208       14.9065    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    341        179.38          0.86          1.12         23.52          0.21          0.05         25.77
Just calling func    0   0         25.77


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    342        200.12          0.86          1.13         23.68          0.07          0.05         25.79
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  340    179.38        1.806     -1.203      1.794     -102.6     0.8110    
                      0.3957      2.047     -99.70      3.798    -0.4422E-01
                       1.819     -1.474      1.530      0.000     -5.000    
                      -1.206      0.000      0.000      0.000     -1.221    

                      -2.500      8883.      8775.      0.000      0.000    
                     -0.5672     -6.254     -4.862     -7.265      2.933    
                      -14.05     -2.998      1000.      0.000      3945.    

                       7611.     0.2837E+05  7717.     0.1108E+05  1875.    
                       2540.     0.1025    -0.6438E-01  0.000    -0.4499    
                     -0.5322E-01-0.1119    -0.1422    -0.2003     0.1716E-02

                      -1.590    -0.1443E-01  0.000    -0.4726E-01 0.3001E-01
                      0.8541E-01 0.4487E-01-0.1903E-01-0.7154E-01 0.1520    
                     -0.4845E-01-0.3678E-01-0.1351    -0.2792      0.000    

                     -0.7867     -1.489     -1.999     -2.950    -0.3518    
                      0.1155      9.204      9.101    -0.1900E+05 -4.000    
                     -0.5416    -0.6463      9.352      8.391    -0.2072E+05

                      -4.000    -0.5307E-02-0.6572      8.821      9.070    
                     -0.3026E+05 -7.000    -0.5501    -0.4430      9.437    
                       8.443    -0.2846E+05 -7.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    179.38
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    9.38583               361
loop is:       68
neval is:      341
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       68      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    75.0866      0.500000    
T0,tstep,tfreq (these do not change):             72
current SAtemp,tstepnext are:    9.38583               361
loop is:       69
neval is:      341


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      361
neval,tstepnext:      341     361

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.440626     -0.819560      -7.69224       7.69224       176.192       183.885    
   2  0.752309     -0.284608      -2.67128       2.67128       174.847       177.518    
   3  0.209108      -1.56490      -14.6879       14.6879       179.337       194.025    
   4  0.842922     -0.170881      -1.60386       1.60386       182.286       183.890    
   5  0.161148      -1.82543      -17.1332       17.1332       182.339       199.472    
   6  0.601748     -0.507917      -4.76722       4.76722       184.209       188.976    
   7  0.890912     -0.115510      -1.08416       1.08416       183.648       184.732    
   8  0.631939     -0.458963      -4.30775       4.30775       183.173       187.481    
   9  0.144759E-01  -4.23527      -39.7515       39.7515       176.200       215.951    
  10  0.653698     -0.425110      -3.99001       3.99001       184.656       188.646    
  11  0.401463     -0.912639      -8.56587       8.56587       183.432       191.998    
  12  0.906126     -0.985765E-01 -0.925222      0.925222       184.667       185.592    
  13  0.480601E-01  -3.03530      -28.4888       28.4888       183.359       211.848    
  14  0.264260      -1.33082      -12.4909       12.4909       183.479       195.970    
  15  0.586033     -0.534379      -5.01559       5.01559       183.048       188.064    
  16  0.323072      -1.12988      -10.6048       10.6048       178.702       189.307    
  17  0.785147     -0.241884      -2.27028       2.27028       188.594       190.864    
  18  0.139165      -1.97210      -18.5098       18.5098       186.838       205.348    
  19  0.105818E-01  -4.54862      -42.6925       42.6925       183.049       225.741    
  20  0.896943     -0.108763      -1.02083       1.02083       188.593       189.613    
  21  0.854239     -0.157544      -1.47868       1.47868       189.965       191.444    
  22  0.566003     -0.569157      -5.34201       5.34201       190.085       195.427    
  23  0.566387     -0.568477      -5.33563       5.33563       181.591       186.926    
  24  0.414905     -0.879707      -8.25678       8.25678       187.739       195.996    
  25  0.173772      -1.75001      -16.4253       16.4253       189.207       205.632    
  26  0.884308E-01  -2.42554      -22.7657       22.7657       190.284       213.050    
  27  0.417457     -0.873573      -8.19921       8.19921       180.202       188.401    
  28  0.334615      -1.09477      -10.2754       10.2754       190.471       200.746    
  29  0.706024E-01  -2.65069      -24.8789       24.8789       177.322       202.201    
  30  0.996422     -0.358418E-02 -0.336405E-01  0.336405E-01   181.367       181.401    
  31  0.894500     -0.111491      -1.04643       1.04643       190.639       191.686    
  32  0.827855     -0.188917      -1.77314       1.77314       187.014       188.787    
  33  0.434964     -0.832492      -7.81363       7.81363       176.615       184.429    
  34  0.121450      -2.10825      -19.7877       19.7877       189.767       209.555    
  35  0.498977     -0.695195      -6.52498       6.52498       182.391       188.916    
  36  0.117961      -2.13740      -20.0613       20.0613       188.080       208.142    
  37  0.309211      -1.17373      -11.0164       11.0164       182.376       193.392    
  38  0.786265     -0.240461      -2.25693       2.25693       182.994       185.251    
  39  0.614330     -0.487222      -4.57298       4.57298       190.528       195.101    
  40  0.820857     -0.197407      -1.85282       1.85282       190.440       192.293    
  41  0.670448     -0.399809      -3.75253       3.75253       189.173       192.926    
  42  0.742403     -0.297863      -2.79569       2.79569       188.172       190.968    
  43  0.760912E-01  -2.57582      -24.1762       24.1762       187.830       212.007    
  44  0.709677     -0.342945      -3.21882       3.21882       194.866       198.085    
  45  0.943449     -0.582133E-01 -0.546380      0.546380       184.949       185.495    
  46  0.176370      -1.73517      -16.2860       16.2860       188.461       204.747    
  47  0.866890     -0.142843      -1.34070       1.34070       189.338       190.679    
  48  0.711056     -0.341004      -3.20061       3.20061       186.979       190.180    
  49  0.929667E-01  -2.37551      -22.2962       22.2962       196.829       219.125    
  50  0.960091     -0.407270E-01 -0.382256      0.382256       183.150       183.532    
  51  0.948380     -0.530000E-01 -0.497448      0.497448       176.338       176.836    
  52  0.257449      -1.35693      -12.7359       12.7359       186.996       199.731    
  53  0.117236      -2.14357      -20.1191       20.1191       186.718       206.837    
  54  0.218340E-01  -3.82429      -35.8941       35.8941       184.702       220.596    
  55  0.523421     -0.647370      -6.07610       6.07610       193.963       200.039    
  56  0.577211     -0.549547      -5.15795       5.15795       196.077       201.235    
  57  0.288682      -1.24243      -11.6612       11.6612       196.014       207.675    
  58  0.672927E-01  -2.69870      -25.3296       25.3296       194.775       220.105    
  59  0.530586     -0.633774      -5.94849       5.94849       191.182       197.130    
  60  0.511831     -0.669760      -6.28625       6.28625       201.853       208.139    
  61  0.658851     -0.417258      -3.91632       3.91632       196.531       200.447    
  62  0.108719E-01  -4.52157      -42.4387       42.4387       194.390       236.829    
  63  0.252985      -1.37443      -12.9001       12.9001       182.685       195.585    
  64  0.741974     -0.298440      -2.80111       2.80111       196.339       199.140    
  65  0.978889     -0.213374E-01 -0.200269      0.200269       190.026       190.226    
  66  0.482845     -0.728059      -6.83344       6.83344       177.184       184.018    
  67  0.701589     -0.354408      -3.32641       3.32641       209.038       212.365    
  68  0.323083      -1.12985      -10.6045       10.6045       204.537       215.141    
  69  0.960426     -0.403786E-01 -0.378987      0.378987       195.396       195.775    
  70  0.803478     -0.218806      -2.05367       2.05367       198.628       200.682    
  71  0.927800     -0.749395E-01 -0.703369      0.703369       184.342       185.045    
  72  0.414115     -0.881611      -8.27465       8.27465       210.053       218.328    
  73  0.510824     -0.671729      -6.30474       6.30474       179.382       185.687    
loop,thermsimp(1:2)       69   7.69224       2.67128    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    343        186.83          0.86          1.12         23.52          0.23          0.05         25.78
Just calling func    0   0         25.78


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    186.83
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    9.38583               361
loop is:       69
neval is:      342
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       69      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    75.0866      0.500000    
T0,tstep,tfreq (these do not change):             72
current SAtemp,tstepnext are:    9.38583               361
loop is:       70
neval is:      342


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      361
neval,tstepnext:      342     361

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.988390     -0.116781E-01 -0.109609      0.109609       176.338       176.448    
   2  0.482301     -0.729186      -6.84401       6.84401       174.847       181.691    
   3  0.546964     -0.603372      -5.66315       5.66315       181.367       187.030    
   4  0.543918     -0.608957      -5.71557       5.71557       183.150       188.866    
   5  0.427641     -0.849472      -7.97300       7.97300       176.192       184.165    
   6  0.498345     -0.696462      -6.53687       6.53687       182.286       188.823    
   7  0.989308     -0.107494E-01 -0.100892      0.100892       177.184       177.285    
   8  0.658822     -0.417302      -3.91672       3.91672       176.615       180.532    
   9  0.917808     -0.857673E-01 -0.804997      0.804997       183.648       184.453    
  10  0.914490E-04  -9.29973      -87.2856       87.2856       184.342       271.627    
  11  0.989901     -0.101499E-01 -0.952652E-01  0.952652E-01   182.994       183.090    
  12  0.558183     -0.583069      -5.47259       5.47259       184.949       190.421    
  13  0.706994     -0.346733      -3.25438       3.25438       184.667       187.921    
  14  0.599152     -0.512240      -4.80780       4.80780       179.382       184.190    
  15  0.845909     -0.167343      -1.57065       1.57065       181.591       183.161    
  16  0.655384     -0.422534      -3.96583       3.96583       183.173       187.139    
  17  0.412232E-01  -3.18875      -29.9291       29.9291       183.048       212.977    
  18  0.495401     -0.702387      -6.59248       6.59248       180.202       186.795    
  19  0.378829     -0.970671      -9.11055       9.11055       184.656       193.766    
  20  0.653665E-02  -5.03033      -47.2138       47.2138       187.014       234.228    
  21  0.782670     -0.245045      -2.29995       2.29995       182.391       184.691    
  22  0.945547     -0.559921E-01 -0.525532      0.525532       184.209       184.734    
  23  0.969857     -0.306063E-01 -0.287266      0.287266       178.702       178.989    
  24  0.822249     -0.195712      -1.83692       1.83692       188.593       190.430    
  25  0.265012E-01  -3.63056      -34.0759       34.0759       186.979       221.055    
  26  0.360432E-01  -3.32304      -31.1894       31.1894       190.026       221.216    
  27  0.796418     -0.227631      -2.13650       2.13650       189.338       191.474    
  28  0.292313E-01  -3.53252      -33.1556       33.1556       188.594       221.750    
  29  0.227321      -1.48139      -13.9041       13.9041       188.172       202.076    
  30  0.812637     -0.207471      -1.94728       1.94728       189.965       191.912    
  31  0.930544     -0.719857E-01 -0.675646      0.675646       190.639       191.315    
  32  0.674873     -0.393231      -3.69080       3.69080       183.432       187.123    
  33  0.264030      -1.33169      -12.4990       12.4990       190.440       202.939    
  34  0.807464     -0.213856      -2.00722       2.00722       189.173       191.180    
  35  0.653731     -0.425060      -3.98954       3.98954       182.376       186.365    
  36  0.858536     -0.152527      -1.43159       1.43159       179.337       180.769    
  37  0.538887     -0.618250      -5.80279       5.80279       190.528       196.331    
  38  0.468049     -0.759182      -7.12555       7.12555       190.085       197.211    
  39  0.401324     -0.912987      -8.56913       8.56913       182.685       191.254    
  40  0.363356      -1.01237      -9.50196       9.50196       195.396       204.898    
  41  0.924933     -0.780342E-01 -0.732415      0.732415       183.479       184.211    
  42  0.797289     -0.226538      -2.12625       2.12625       187.739       189.866    
  43  0.200097      -1.60895      -15.1013       15.1013       191.182       206.283    
  44  0.686219     -0.376559      -3.53431       3.53431       194.866       198.400    
  45  0.895629     -0.110230      -1.03460       1.03460       196.339       197.373    
  46  0.331830      -1.10313      -10.3538       10.3538       182.339       192.692    
  47  0.967018     -0.335379E-01 -0.314780      0.314780       186.996       187.310    
  48  0.268282      -1.31572      -12.3491       12.3491       193.963       206.312    
  49  0.472399     -0.749931      -7.03873       7.03873       196.531       203.570    
  50  0.399276E-01  -3.22069      -30.2288       30.2288       198.628       228.857    
  51  0.956493     -0.444820E-01 -0.417501      0.417501       190.471       190.888    
  52  0.444161     -0.811569      -7.61724       7.61724       196.077       203.694    
  53  0.308942      -1.17460      -11.0246       11.0246       177.322       188.347    
  54  0.602319     -0.506968      -4.75831       4.75831       188.461       193.219    
  55  0.533797     -0.627740      -5.89186       5.89186       186.838       192.730    
  56  0.990519     -0.952607E-02 -0.894101E-01  0.894101E-01   189.207       189.296    
  57  0.931261     -0.712158E-01 -0.668419      0.668419       186.718       187.386    
  58  0.185125      -1.68672      -15.8313       15.8313       196.014       211.845    
  59  0.251659E-02  -5.98485      -56.1728       56.1728       201.853       258.025    
  60  0.706458     -0.347491      -3.26149       3.26149       188.080       191.342    
  61  0.555619     -0.587673      -5.51580       5.51580       189.767       195.283    
  62  0.798153     -0.225455      -2.11608       2.11608       183.359       185.475    
  63  0.951290     -0.499358E-01 -0.468689      0.468689       187.830       188.299    
  64  0.247755      -1.39532      -13.0962       13.0962       209.038       222.135    
  65  0.867838     -0.141750      -1.33044       1.33044       190.284       191.615    
  66  0.164123E-01  -4.10972      -38.5732       38.5732       204.537       243.110    
  67  0.443305     -0.813497      -7.63534       7.63534       176.200       183.835    
  68  0.390544     -0.940215      -8.82470       8.82470       210.053       218.878    
  69  0.854116     -0.157688      -1.48003       1.48003       196.829       198.309    
  70  0.873727     -0.134987      -1.26697       1.26697       194.775       196.042    
  71  0.656755E-01  -2.72303      -25.5579       25.5579       184.702       210.260    
  72  0.742002     -0.298403      -2.80076       2.80076       183.049       185.849    
  73  0.753201E-01  -2.58601      -24.2718       24.2718       186.834       211.105    
loop,thermsimp(1:2)       70  0.109609       6.84401    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    344        181.69          0.86          1.12         23.53          0.21          0.05         25.77
Just calling func    0   0         25.77


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    181.69
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    9.38583               361
loop is:       70
neval is:      343
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       70      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    75.0866      0.500000    
T0,tstep,tfreq (these do not change):             72
current SAtemp,tstepnext are:    9.38583               361
loop is:       71
neval is:      343


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      361
neval,tstepnext:      343     361

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.860213     -0.150575      -1.41327       1.41327       176.338       177.752    
   2  0.573661     -0.555717      -5.21586       5.21586       177.184       182.400    
   3  0.499290     -0.694569      -6.51910       6.51910       178.702       185.221    
   4  0.677563     -0.389253      -3.65346       3.65346       176.615       180.268    
   5  0.476566     -0.741149      -6.95630       6.95630       179.337       186.294    
   6  0.153036      -1.87708      -17.6180       17.6180       174.847       192.465    
   7  0.626270     -0.467973      -4.39232       4.39232       182.994       187.387    
   8  0.794744     -0.229735      -2.15626       2.15626       181.591       183.747    
   9  0.111868E-01  -4.49302      -42.1707       42.1707       176.200       218.370    
  10  0.643880     -0.440243      -4.13205       4.13205       176.192       180.324    
  11  0.634705     -0.454595      -4.26675       4.26675       179.382       183.649    
  12  0.653568     -0.425308      -3.99187       3.99187       183.479       187.471    
  13  0.888231     -0.118524      -1.11244       1.11244       183.648       184.761    
  14  0.681775E-01  -2.68564      -25.2070       25.2070       182.391       207.598    
  15  0.241248      -1.42193      -13.3460       13.3460       184.209       197.555    
  16  0.208857      -1.56610      -14.6992       14.6992       183.359       198.058    
  17  0.652439     -0.427038      -4.00810       4.00810       183.049       187.057    
  18  0.489833     -0.713691      -6.69858       6.69858       182.376       189.074    
  19  0.719225     -0.329581      -3.09339       3.09339       180.202       183.295    
  20  0.924762     -0.782189E-01 -0.734149      0.734149       181.367       182.101    
  21  0.845502     -0.167825      -1.57518       1.57518       183.432       185.007    
  22  0.665989     -0.406482      -3.81517       3.81517       183.173       186.988    
  23  0.378562     -0.971376      -9.11717       9.11717       186.996       196.113    
  24  0.396889     -0.924098      -8.67343       8.67343       186.718       195.391    
  25  0.158089      -1.84460      -17.3131       17.3131       184.667       201.980    
  26  0.590577     -0.526655      -4.94310       4.94310       187.830       192.774    
  27  0.949513     -0.518061E-01 -0.486243      0.486243       177.322       177.808    
  28  0.518198     -0.657398      -6.17022       6.17022       182.286       188.457    
  29  0.551080     -0.595875      -5.59277       5.59277       183.150       188.743    
  30  0.986285     -0.138097E-01 -0.129616      0.129616       189.207       189.336    
  31  0.920142     -0.832276E-01 -0.781160      0.781160       187.739       188.521    
  32  0.133201      -2.01590      -18.9209       18.9209       184.949       203.869    
  33  0.584507     -0.536987      -5.04006       5.04006       188.593       193.633    
  34  0.790583     -0.234984      -2.20552       2.20552       190.471       192.676    
  35  0.702664     -0.352876      -3.31203       3.31203       189.173       192.485    
  36  0.148885      -1.90458      -17.8761       17.8761       182.685       200.561    
  37  0.290436      -1.23637      -11.6044       11.6044       190.639       202.244    
  38  0.638249     -0.449027      -4.21449       4.21449       188.080       192.295    
  39  0.381605     -0.963369      -9.04202       9.04202       189.338       198.380    
  40  0.823069     -0.194716      -1.82757       1.82757       190.284       192.112    
  41  0.492318     -0.708630      -6.65108       6.65108       189.965       196.616    
  42  0.773199     -0.257218      -2.41421       2.41421       182.339       184.753    
  43  0.289475E-01  -3.54227      -33.2471       33.2471       186.838       220.086    
  44  0.355683      -1.03371      -9.70227       9.70227       188.461       198.163    
  45  0.160396      -1.83011      -17.1771       17.1771       184.656       201.833    
  46  0.972861     -0.275140E-01 -0.258242      0.258242       189.767       190.025    
  47  0.781938E-02  -4.85115      -45.5320       45.5320       194.775       240.307    
  48  0.225299      -1.49033      -13.9880       13.9880       190.528       204.516    
  49  0.631686     -0.459363      -4.31150       4.31150       190.085       194.397    
  50  0.212316      -1.54968      -14.5450       14.5450       196.339       210.884    
  51  0.673664     -0.395024      -3.70763       3.70763       196.829       200.536    
  52  0.728322     -0.317012      -2.97542       2.97542       194.866       197.841    
  53  0.368576     -0.998108      -9.36806       9.36806       188.172       197.540    
  54  0.381088     -0.964725      -9.05474       9.05474       190.440       199.495    
  55  0.481283     -0.731301      -6.86386       6.86386       196.531       203.395    
  56  0.801664     -0.221066      -2.07488       2.07488       196.077       198.152    
  57  0.285936      -1.25199      -11.7509       11.7509       195.396       207.147    
  58  0.412374     -0.885823      -8.31419       8.31419       191.182       199.496    
  59  0.815685     -0.203727      -1.91214       1.91214       193.963       195.875    
  60  0.251414      -1.38065      -12.9586       12.9586       184.702       197.661    
  61  0.598278     -0.513699      -4.82149       4.82149       186.834       191.655    
  62  0.750137     -0.287499      -2.69842       2.69842       196.014       198.712    
  63  0.412907     -0.884533      -8.30208       8.30208       183.048       191.350    
  64  0.318297      -1.14477      -10.7446       10.7446       210.053       220.798    
  65  0.520766     -0.652454      -6.12382       6.12382       186.979       193.103    
  66  0.983801     -0.163320E-01 -0.153289      0.153289       190.026       190.179    
  67  0.897709     -0.107909      -1.01282       1.01282       188.594       189.607    
  68  0.645455     -0.437800      -4.10911       4.10911       209.038       213.148    
  69  0.995902     -0.410634E-02 -0.385414E-01  0.385414E-01   198.628       198.667    
  70  0.333624      -1.09774      -10.3032       10.3032       187.014       197.317    
  71  0.651980     -0.427742      -4.01471       4.01471       204.537       208.551    
  72  0.355582      -1.03400      -9.70494       9.70494       201.853       211.558    
  73  0.181298E-01  -4.01020      -37.6390       37.6390       181.694       219.333    
loop,thermsimp(1:2)       71   1.41327       5.21586    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    345        177.10          0.86          1.12         23.81          0.09          0.05         25.94
Just calling func    0   0         25.93


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    346        189.57          0.86          1.14         23.65          0.09          0.05         25.79
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    177.10
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    9.38583               361
loop is:       71
neval is:      345
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       71      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    75.0866      0.500000    
T0,tstep,tfreq (these do not change):             72
current SAtemp,tstepnext are:    9.38583               361
loop is:       72
neval is:      345


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      361
neval,tstepnext:      345     361

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.440770     -0.819232      -7.68917       7.68917       176.338       184.027    
   2  0.202294      -1.59803      -14.9988       14.9988       177.322       192.321    
   3  0.873786     -0.134920      -1.26634       1.26634       176.615       177.881    
   4  0.262141      -1.33887      -12.5664       12.5664       176.192       188.759    
   5  0.342005      -1.07293      -10.0703       10.0703       181.367       191.438    
   6  0.421217     -0.864607      -8.11505       8.11505       177.184       185.299    
   7  0.618489     -0.480477      -4.50967       4.50967       180.202       184.712    
   8  0.412552     -0.885393      -8.31014       8.31014       179.382       187.692    
   9  0.951192     -0.500396E-01 -0.469663      0.469663       181.591       182.060    
  10  0.298546      -1.20883      -11.3459       11.3459       182.339       193.685    
  11  0.805120     -0.216763      -2.03450       2.03450       183.648       185.683    
  12  0.208146      -1.56951      -14.7312       14.7312       183.432       198.163    
  13  0.924021     -0.790209E-01 -0.741677      0.741677       178.702       179.444    
  14  0.447624     -0.803802      -7.54434       7.54434       179.337       186.882    
  15  0.667709     -0.403903      -3.79097       3.79097       183.173       186.964    
  16  0.767295E-01  -2.56747      -24.0978       24.0978       183.049       207.146    
  17  0.301582      -1.19871      -11.2509       11.2509       182.994       194.245    
  18  0.788580     -0.237522      -2.22934       2.22934       183.479       185.708    
  19  0.887020     -0.119888      -1.12524       1.12524       182.286       183.412    
  20  0.233035E-01  -3.75915      -35.2827       35.2827       187.739       223.022    
  21  0.899320     -0.106116     -0.995991      0.995991       183.150       184.146    
  22  0.144480      -1.93461      -18.1579       18.1579       182.376       200.534    
  23  0.274629      -1.29233      -12.1296       12.1296       189.207       201.336    
  24  0.831597     -0.184407      -1.73081       1.73081       188.594       190.325    
  25  0.388827     -0.944620      -8.86604       8.86604       189.767       198.633    
  26  0.257578      -1.35643      -12.7312       12.7312       190.026       202.757    
  27  0.427791     -0.849120      -7.96969       7.96969       183.048       191.018    
  28  0.837664E-01  -2.47972      -23.2743       23.2743       186.834       210.108    
  29  0.782727     -0.244972      -2.29926       2.29926       190.284       192.583    
  30  0.259676E-01  -3.65091      -34.2668       34.2668       188.080       222.347    
  31  0.166181      -1.79468      -16.8446       16.8446       174.847       191.692    
  32  0.360749      -1.01957      -9.56953       9.56953       189.173       198.743    
  33  0.369697     -0.995071      -9.33956       9.33956       190.471       199.810    
  34  0.959392     -0.414553E-01 -0.389092      0.389092       187.830       188.220    
  35  0.449170     -0.800353      -7.51198       7.51198       186.979       194.491    
  36  0.655790E-02  -5.02708      -47.1833       47.1833       188.593       235.776    
  37  0.133569      -2.01313      -18.8949       18.8949       190.085       208.980    
  38  0.282061      -1.26563      -11.8790       11.8790       186.718       198.597    
  39  0.431813     -0.839762      -7.88186       7.88186       193.963       201.845    
  40  0.713174     -0.338031      -3.17270       3.17270       186.996       190.168    
  41  0.511305     -0.670790      -6.29591       6.29591       189.965       196.261    
  42  0.264485      -1.32997      -12.4829       12.4829       187.014       199.497    
  43  0.779298     -0.249362      -2.34047       2.34047       188.172       190.513    
  44  0.709352E-02  -4.94857      -46.4465       46.4465       184.209       230.655    
  45  0.770402     -0.260843      -2.44822       2.44822       184.702       187.150    
  46  0.694393     -0.364718      -3.42318       3.42318       194.866       198.289    
  47  0.589268E-01  -2.83146      -26.5756       26.5756       183.359       209.935    
  48  0.817644     -0.201328      -1.88963       1.88963       196.077       197.966    
  49  0.990168     -0.988073E-02 -0.927388E-01  0.927388E-01   188.461       188.554    
  50  0.733536E-01  -2.61246      -24.5201       24.5201       189.338       213.858    
  51  0.781472     -0.246575      -2.31431       2.31431       198.628       200.943    
  52  0.582548     -0.540344      -5.07158       5.07158       196.014       201.085    
  53  0.644915     -0.438636      -4.11696       4.11696       190.440       194.557    
  54  0.726975     -0.318863      -2.99280       2.99280       191.182       194.174    
  55  0.562265     -0.575782      -5.40419       5.40419       196.829       202.233    
  56  0.166410      -1.79330      -16.8316       16.8316       182.685       199.516    
  57  0.847052     -0.165994      -1.55799       1.55799       184.656       186.214    
  58  0.437688     -0.826250      -7.75504       7.75504       184.667       192.422    
  59  0.408722     -0.894719      -8.39768       8.39768       190.639       199.037    
  60  0.794023     -0.230643      -2.16478       2.16478       196.531       198.696    
  61  0.259946      -1.34728      -12.6453       12.6453       184.949       197.594    
  62  0.700123     -0.356499      -3.34604       3.34604       190.528       193.874    
  63  0.564078E-01  -2.87515      -26.9856       26.9856       195.396       222.382    
  64  0.999061     -0.939094E-03 -0.881417E-02  0.881417E-02   182.391       182.400    
  65  0.555696     -0.587534      -5.51450       5.51450       204.537       210.051    
  66  0.103792      -2.26537      -21.2624       21.2624       196.339       217.601    
  67  0.318583      -1.14387      -10.7362       10.7362       201.853       212.589    
  68  0.321355      -1.13521      -10.6549       10.6549       209.038       219.693    
  69  0.350004      -1.04981      -9.85334       9.85334       176.200       186.053    
  70  0.786507     -0.240153      -2.25404       2.25404       181.694       183.948    
  71  0.267605E-01  -3.62083      -33.9845       33.9845       186.838       220.823    
  72  0.104251      -2.26095      -21.2209       21.2209       210.053       231.274    
  73  0.188491      -1.66871      -15.6622       15.6622       177.102       192.764    
loop,thermsimp(1:2)       72   7.68917       14.9988    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    347        181.20          0.85          1.13         23.59          0.15          0.05         25.77
Just calling func    0   0         25.77


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    348        194.57          0.86          1.14         23.52          0.23          0.05         25.79
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    181.20
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    9.38583               361
loop is:       72
neval is:      347
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       72      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    75.0866      0.500000    
T0,tstep,tfreq (these do not change):             72
current SAtemp,tstepnext are:    9.38583               361
loop is:       73
neval is:      347


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      361
neval,tstepnext:      347     361

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.807892     -0.213326      -2.00224       2.00224       176.615       178.617    
   2  0.554495     -0.589697      -5.53479       5.53479       178.702       184.237    
   3  0.997056     -0.294851E-02 -0.276742E-01  0.276742E-01   181.591       181.618    
   4  0.901183E-01  -2.40663      -22.5882       22.5882       182.391       204.980    
   5  0.296736      -1.21491      -11.4030       11.4030       182.286       193.689    
   6  0.907820     -0.967094E-01 -0.907698      0.907698       181.694       182.602    
   7  0.325542      -1.12226      -10.5334       10.5334       176.338       186.872    
   8  0.947537     -0.538896E-01 -0.505799      0.505799       183.150       183.656    
   9  0.378276     -0.972130      -9.12425       9.12425       180.202       189.326    
  10  0.985613     -0.144920E-01 -0.136019      0.136019       177.184       177.320    
  11  0.167434      -1.78717      -16.7740       16.7740       183.648       200.422    
  12  0.693849E-01  -2.66809      -25.0422       25.0422       183.479       208.521    
  13  0.434983     -0.832447      -7.81321       7.81321       176.200       184.013    
  14  0.998656     -0.134491E-02 -0.126231E-01  0.126231E-01   184.656       184.668    
  15  0.650302     -0.430318      -4.03889       4.03889       179.337       183.376    
  16  0.152610      -1.87987      -17.6441       17.6441       183.173       200.817    
  17  0.273947      -1.29482      -12.1530       12.1530       184.702       196.855    
  18  0.990471     -0.957469E-02 -0.898663E-01  0.898663E-01   179.382       179.472    
  19  0.684493     -0.379077      -3.55795       3.55795       187.830       191.388    
  20  0.864467E-01  -2.44823      -22.9786       22.9786       188.461       211.439    
  21  0.546085     -0.604980      -5.67824       5.67824       176.192       181.871    
  22  0.246642      -1.39982      -13.1384       13.1384       186.996       200.134    
  23  0.484505     -0.724627      -6.80123       6.80123       188.594       195.395    
  24  0.567359     -0.566763      -5.31954       5.31954       188.172       193.492    
  25  0.564371     -0.572043      -5.36910       5.36910       183.048       188.417    
  26  0.825604     -0.191640      -1.79870       1.79870       181.367       183.166    
  27  0.302493      -1.19570      -11.2226       11.2226       174.847       186.070    
  28  0.630396     -0.461407      -4.33068       4.33068       177.322       181.653    
  29  0.886734     -0.120210      -1.12827       1.12827       184.667       185.795    
  30  0.389345     -0.943288      -8.85354       8.85354       190.284       199.138    
  31  0.181391      -1.70710      -16.0226       16.0226       177.102       193.124    
  32  0.933221     -0.691132E-01 -0.648685      0.648685       182.339       182.987    
  33  0.169237E-01  -4.07904      -38.2852       38.2852       190.528       228.813    
  34  0.757788     -0.277351      -2.60317       2.60317       191.182       193.785    
  35  0.300993E-01  -3.50325      -32.8809       32.8809       182.994       215.875    
  36  0.395621     -0.927300      -8.70347       8.70347       186.979       195.683    
  37  0.459505     -0.777605      -7.29846       7.29846       190.440       197.738    
  38  0.733176     -0.310370      -2.91308       2.91308       189.965       192.878    
  39  0.575459     -0.552587      -5.18649       5.18649       184.949       190.135    
  40  0.560889     -0.578233      -5.42719       5.42719       196.077       201.504    
  41  0.428351     -0.847812      -7.95741       7.95741       183.432       191.389    
  42  0.553832     -0.590895      -5.54604       5.54604       194.866       200.412    
  43  0.581118     -0.542801      -5.09463       5.09463       186.718       191.813    
  44  0.319195E-01  -3.44454      -32.3299       32.3299       189.767       222.097    
  45  0.224512E-01  -3.79641      -35.6325       35.6325       196.531       232.163    
  46  0.113637E-01  -4.47733      -42.0235       42.0235       189.173       231.197    
  47  0.889134     -0.117508      -1.10291       1.10291       190.639       191.742    
  48  0.422937     -0.860531      -8.07680       8.07680       187.014       195.091    
  49  0.479928     -0.734119      -6.89032       6.89032       182.685       189.575    
  50  0.813133     -0.206861      -1.94156       1.94156       190.471       192.412    
  51  0.544683     -0.607551      -5.70237       5.70237       182.376       188.078    
  52  0.694184E-01  -2.66760      -25.0377       25.0377       198.628       223.666    
  53  0.656508     -0.420820      -3.94974       3.94974       196.014       199.964    
  54  0.532118     -0.630889      -5.92142       5.92142       189.207       195.128    
  55  0.485731E-01  -3.02468      -28.3892       28.3892       193.963       222.352    
  56  0.525424     -0.643549      -6.04024       6.04024       196.829       202.869    
  57  0.773368E-01  -2.55959      -24.0238       24.0238       190.026       214.050    
  58  0.741245     -0.299424      -2.81034       2.81034       183.049       185.859    
  59  0.286066      -1.25153      -11.7467       11.7467       190.085       201.832    
  60  0.327223      -1.11711      -10.4850       10.4850       183.359       193.844    
  61  0.124235      -2.08558      -19.5749       19.5749       204.537       224.112    
  62  0.599337     -0.511931      -4.80489       4.80489       186.834       191.639    
  63  0.666632     -0.405518      -3.80612       3.80612       201.853       205.659    
  64  0.810607     -0.209973      -1.97077       1.97077       189.338       191.309    
  65  0.104486      -2.25870      -21.1998       21.1998       196.339       217.539    
  66  0.516216     -0.661229      -6.20618       6.20618       209.038       215.245    
  67  0.671995     -0.397504      -3.73091       3.73091       186.838       190.569    
  68  0.343614      -1.06824      -10.0263       10.0263       188.080       198.107    
  69  0.423208     -0.859892      -8.07079       8.07079       195.396       203.467    
  70  0.301080E-01  -3.50297      -32.8782       32.8782       187.739       220.618    
  71  0.364244      -1.00993      -9.47904       9.47904       184.209       193.688    
  72  0.333024      -1.09954      -10.3201       10.3201       210.053       220.373    
  73  0.239626      -1.42868      -13.4093       13.4093       181.200       194.609    
loop,thermsimp(1:2)       73   2.00224       5.53479    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    349        189.57          0.86          1.12         23.57          0.17          0.05         25.77
Just calling func    0   0         25.77


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    189.57
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    9.38583               361
loop is:       73
neval is:      348
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       73      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    75.0866      0.500000    
T0,tstep,tfreq (these do not change):             72
current SAtemp,tstepnext are:    9.38583               361
loop is:       74
neval is:      348


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      361
neval,tstepnext:      348     361

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.889684     -0.116889      -1.09710       1.09710       177.184       178.282    
   2  0.480213     -0.733525      -6.88474       6.88474       176.615       183.500    
   3  0.226156      -1.48653      -13.9523       13.9523       179.382       193.334    
   4  0.633402     -0.456651      -4.28604       4.28604       181.591       185.877    
   5  0.925311     -0.776258E-01 -0.728582      0.728582       177.322       178.051    
   6  0.498405     -0.696343      -6.53575       6.53575       176.192       182.728    
   7  0.133283      -2.01528      -18.9151       18.9151       181.694       200.609    
   8  0.657074E-01  -2.72254      -25.5533       25.5533       182.339       207.892    
   9  0.726758     -0.319162      -2.99560       2.99560       181.367       184.363    
  10  0.398365     -0.920388      -8.63860       8.63860       179.337       187.976    
  11  0.321047E-01  -3.43875      -32.2755       32.2755       183.150       215.426    
  12  0.276307      -1.28624      -12.0725       12.0725       176.200       188.272    
  13  0.483740     -0.726208      -6.81606       6.81606       178.702       185.518    
  14  0.224589      -1.49348      -14.0176       14.0176       184.656       198.673    
  15  0.832041     -0.183874      -1.72581       1.72581       184.667       186.392    
  16  0.939301     -0.626192E-01 -0.587733      0.587733       183.049       183.636    
  17  0.624052     -0.471522      -4.42562       4.42562       174.847       179.273    
  18  0.172753      -1.75589      -16.4805       16.4805       176.338       192.819    
  19  0.468323     -0.758597      -7.12006       7.12006       182.376       189.496    
  20  0.963461     -0.372229E-01 -0.349368      0.349368       183.048       183.398    
  21  0.812092     -0.208142      -1.95358       1.95358       180.202       182.156    
  22  0.376764     -0.976137      -9.16186       9.16186       182.685       191.846    
  23  0.791872E-01  -2.53594      -23.8019       23.8019       184.949       208.750    
  24  0.237003      -1.43968      -13.5126       13.5126       186.838       200.351    
  25  0.320094      -1.13914      -10.6918       10.6918       189.338       200.030    
  26  0.821410E-01  -2.49932      -23.4582       23.4582       187.830       211.289    
  27  0.789147     -0.236802      -2.22258       2.22258       183.432       185.654    
  28  0.734353E-01  -2.61135      -24.5097       24.5097       186.834       211.343    
  29  0.226401      -1.48545      -13.9421       13.9421       190.639       204.581    
  30  0.380831     -0.965399      -9.06107       9.06107       186.718       195.779    
  31  0.264857      -1.32857      -12.4697       12.4697       190.471       202.940    
  32  0.246167      -1.40174      -13.1565       13.1565       189.965       203.122    
  33  0.142133      -1.95099      -18.3117       18.3117       177.102       195.414    
  34  0.123438E-01  -4.39460      -41.2470       41.2470       188.172       229.419    
  35  0.853289     -0.158657      -1.48912       1.48912       184.209       185.698    
  36  0.418603     -0.870831      -8.17347       8.17347       182.286       190.460    
  37  0.235242      -1.44714      -13.5826       13.5826       191.182       204.764    
  38  0.841712     -0.172317      -1.61734       1.61734       183.359       184.976    
  39  0.113373      -2.17707      -20.4336       20.4336       181.200       201.633    
  40  0.617966     -0.481322      -4.51761       4.51761       187.014       191.532    
  41  0.149268      -1.90202      -17.8520       17.8520       189.207       207.059    
  42  0.811010     -0.209475      -1.96610       1.96610       188.594       190.560    
  43  0.571477     -0.559531      -5.25166       5.25166       186.979       192.231    
  44  0.105494      -2.24911      -21.1097       21.1097       184.702       205.812    
  45  0.709548     -0.343127      -3.22053       3.22053       190.440       193.660    
  46  0.535895     -0.623816      -5.85503       5.85503       188.080       193.935    
  47  0.137736      -1.98242      -18.6066       18.6066       190.284       208.891    
  48  0.666779     -0.405297      -3.80405       3.80405       196.014       199.818    
  49  0.326487      -1.11936      -10.5062       10.5062       186.996       197.502    
  50  0.461090     -0.774162      -7.26615       7.26615       194.866       202.132    
  51  0.246088      -1.40207      -13.1596       13.1596       183.648       196.808    
  52  0.308348      -1.17653      -11.0427       11.0427       183.173       194.215    
  53  0.921161     -0.821209E-01 -0.770773      0.770773       196.077       196.847    
  54  0.361112      -1.01857      -9.56009       9.56009       190.085       199.645    
  55  0.853246     -0.158708      -1.48960       1.48960       196.829       198.318    
  56  0.535783     -0.624027      -5.85701       5.85701       195.396       201.253    
  57  0.347437      -1.05717      -9.92243       9.92243       182.391       192.314    
  58  0.722381     -0.325203      -3.05229       3.05229       201.853       204.905    
  59  0.134598      -2.00546      -18.8229       18.8229       183.479       202.302    
  60  0.521537     -0.650975      -6.10994       6.10994       188.461       194.571    
  61  0.713987     -0.336890      -3.16199       3.16199       190.026       193.188    
  62  0.202889      -1.59510      -14.9713       14.9713       209.038       224.010    
  63  0.973267     -0.270971E-01 -0.254328      0.254328       182.994       183.249    
  64  0.396441     -0.925228      -8.68403       8.68403       196.339       205.023    
  65  0.482421     -0.728937      -6.84168       6.84168       210.053       216.895    
  66  0.622991     -0.473223      -4.44159       4.44159       187.739       192.181    
  67  0.474966     -0.744512      -6.98786       6.98786       189.767       196.755    
  68  0.741916     -0.298520      -2.80185       2.80185       193.963       196.765    
  69  0.717884     -0.331448      -3.11091       3.11091       198.628       201.739    
  70  0.537648     -0.620551      -5.82438       5.82438       204.537       210.361    
  71  0.144246      -1.93623      -18.1732       18.1732       190.528       208.701    
  72  0.643241     -0.441236      -4.14137       4.14137       189.173       193.315    
  73  0.730372     -0.314201      -2.94903       2.94903       189.573       192.522    
loop,thermsimp(1:2)       74   1.09710       6.88474    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    350        188.02          0.87          1.11         23.54          0.27          0.05         25.83
Just calling func    0   0         25.83


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    188.02
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    9.38583               361
loop is:       74
neval is:      349
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       74      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    75.0866      0.500000    
T0,tstep,tfreq (these do not change):             72
current SAtemp,tstepnext are:    9.38583               361
loop is:       75
neval is:      349


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      361
neval,tstepnext:      349     361

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.645801     -0.437264      -4.10408       4.10408       177.322       181.426    
   2  0.108032      -2.22533      -20.8865       20.8865       177.184       198.071    
   3  0.908790     -0.956413E-01 -0.897672      0.897672       174.847       175.745    
   4  0.987883     -0.121914E-01 -0.114426      0.114426       180.202       180.316    
   5  0.318380      -1.14451      -10.7422       10.7422       176.192       186.935    
   6  0.924426     -0.785824E-01 -0.737561      0.737561       182.994       183.732    
   7  0.965220     -0.353996E-01 -0.332254      0.332254       183.048       183.381    
   8  0.852248     -0.159878      -1.50059       1.50059       176.615       178.115    
   9  0.329186      -1.11113      -10.4289       10.4289       183.049       193.478    
  10  0.282479      -1.26415      -11.8651       11.8651       181.367       193.232    
  11  0.818943     -0.199740      -1.87473       1.87473       183.359       185.234    
  12  0.842569     -0.171300      -1.60779       1.60779       178.702       180.310    
  13  0.370966     -0.991644      -9.30740       9.30740       183.432       192.739    
  14  0.362233      -1.01547      -9.53099       9.53099       184.209       193.740    
  15  0.356944E-01  -3.33276      -31.2807       31.2807       181.591       212.871    
  16  0.149119      -1.90301      -17.8613       17.8613       184.667       202.528    
  17  0.127170      -2.06223      -19.3558       19.3558       179.337       198.693    
  18  0.589256     -0.528895      -4.96411       4.96411       176.200       181.164    
  19  0.702139     -0.353624      -3.31905       3.31905       182.376       185.695    
  20  0.713819     -0.337127      -3.16421       3.16421       182.286       185.451    
  21  0.121783      -2.10552      -19.7620       19.7620       188.594       208.356    
  22  0.992321     -0.770837E-02 -0.723494E-01  0.723494E-01   187.014       187.087    
  23  0.622746     -0.473616      -4.44528       4.44528       182.685       187.130    
  24  0.388486     -0.945499      -8.87429       8.87429       187.739       196.614    
  25  0.365204      -1.00730      -9.45434       9.45434       186.979       196.434    
  26  0.416566     -0.875710      -8.21926       8.21926       182.391       190.611    
  27  0.250735      -1.38336      -12.9840       12.9840       189.573       202.557    
  28  0.243824      -1.41131      -13.2463       13.2463       176.338       189.585    
  29  0.177195      -1.73050      -16.2422       16.2422       190.026       206.268    
  30  0.723685     -0.323399      -3.03537       3.03537       189.173       192.209    
  31  0.157256      -1.84988      -17.3626       17.3626       179.382       196.745    
  32  0.941988     -0.597623E-01 -0.560919      0.560919       190.440       191.001    
  33  0.110785      -2.20016      -20.6504       20.6504       188.080       208.731    
  34  0.200758      -1.60566      -15.0704       15.0704       183.173       198.243    
  35  0.873323     -0.135450      -1.27131       1.27131       188.461       189.732    
  36  0.842283     -0.171639      -1.61097       1.61097       177.102       178.713    
  37  0.326633      -1.11892      -10.5020       10.5020       186.718       197.220    
  38  0.648559     -0.433003      -4.06409       4.06409       189.767       193.831    
  39  0.460689E-01  -3.07762      -28.8860       28.8860       193.963       222.849    
  40  0.676614     -0.390654      -3.66661       3.66661       183.648       187.315    
  41  0.863029     -0.147307      -1.38260       1.38260       196.077       197.459    
  42  0.646727     -0.435831      -4.09063       4.09063       186.996       191.086    
  43  0.310616      -1.16920      -10.9739       10.9739       196.829       207.802    
  44  0.521840     -0.650394      -6.10449       6.10449       184.656       190.760    
  45  0.381245     -0.964312      -9.05087       9.05087       190.085       199.136    
  46  0.815908     -0.203453      -1.90958       1.90958       196.014       197.923    
  47  0.209395E-01  -3.86612      -36.2867       36.2867       189.338       225.625    
  48  0.800991E-01  -2.52449      -23.6944       23.6944       186.838       210.533    
  49  0.824204     -0.193337      -1.81463       1.81463       181.694       183.509    
  50  0.828636     -0.187975      -1.76430       1.76430       195.396       197.160    
  51  0.609810     -0.494608      -4.64230       4.64230       181.200       185.842    
  52  0.793631     -0.231137      -2.16941       2.16941       198.628       200.798    
  53  0.450040E-01  -3.10100      -29.1055       29.1055       194.866       223.971    
  54  0.758261     -0.276727      -2.59732       2.59732       183.479       186.076    
  55  0.450025     -0.798453      -7.49414       7.49414       190.471       197.965    
  56  0.687694     -0.374411      -3.51416       3.51416       189.965       193.479    
  57  0.851665     -0.160562      -1.50701       1.50701       190.639       192.146    
  58  0.964091     -0.365694E-01 -0.343234      0.343234       191.182       191.525    
  59  0.717554     -0.331907      -3.11522       3.11522       201.853       204.968    
  60  0.726427     -0.319617      -2.99987       2.99987       196.339       199.339    
  61  0.646354     -0.436408      -4.09605       4.09605       184.702       188.798    
  62  0.841481     -0.172592      -1.61992       1.61992       189.207       190.827    
  63  0.635881     -0.452744      -4.24938       4.24938       182.339       186.588    
  64  0.753792     -0.282639      -2.65280       2.65280       190.528       193.181    
  65  0.568235     -0.565221      -5.30506       5.30506       184.949       190.254    
  66  0.607832     -0.497856      -4.67279       4.67279       190.284       194.957    
  67  0.918682     -0.848156E-01 -0.796065      0.796065       204.537       205.333    
  68  0.783545     -0.243927      -2.28946       2.28946       187.830       190.120    
  69  0.741290     -0.299363      -2.80977       2.80977       186.834       189.643    
  70  0.965965     -0.346273E-01 -0.325006      0.325006       183.150       183.475    
  71  0.962055     -0.386840E-01 -0.363081      0.363081       210.053       210.416    
  72  0.820105     -0.198323      -1.86142       1.86142       209.038       210.900    
  73  0.379310     -0.969402      -9.09864       9.09864       188.019       197.117    
loop,thermsimp(1:2)       75   4.10408       20.8865    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    351        179.24          0.86          1.13         23.55          0.17          0.05         25.76
Just calling func    0   0         25.76


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    352        196.65          0.86          1.13         23.69          0.08          0.05         25.81
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    179.24
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    9.38583               361
loop is:       75
neval is:      351
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       75      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    75.0866      0.500000    
T0,tstep,tfreq (these do not change):             72
current SAtemp,tstepnext are:    9.38583               361
loop is:       76
neval is:      351


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      361
neval,tstepnext:      351     361

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.202436      -1.59733      -14.9923       14.9923       174.847       189.839    
   2  0.337724      -1.08553      -10.1886       10.1886       176.615       186.803    
   3  0.870295     -0.138923      -1.30391       1.30391       177.102       178.406    
   4  0.837087     -0.177827      -1.66905       1.66905       178.702       180.371    
   5  0.512110     -0.669215      -6.28114       6.28114       180.202       186.483    
   6  0.998742     -0.125879E-02 -0.118148E-01  0.118148E-01   176.200       176.211    
   7  0.203490      -1.59214      -14.9435       14.9435       177.322       192.266    
   8  0.525951E-01  -2.94513      -27.6425       27.6425       183.048       210.691    
   9  0.474810     -0.744841      -6.99095       6.99095       183.150       190.141    
  10  0.440755     -0.819266      -7.68949       7.68949       181.694       189.384    
  11  0.225689      -1.48860      -13.9717       13.9717       182.994       196.966    
  12  0.902704     -0.102360     -0.960734      0.960734       183.359       184.320    
  13  0.663331     -0.410481      -3.85270       3.85270       182.286       186.139    
  14  0.511480     -0.670447      -6.29270       6.29270       182.376       188.668    
  15  0.625297     -0.469528      -4.40691       4.40691       181.200       185.607    
  16  0.812907     -0.207139      -1.94417       1.94417       183.479       185.423    
  17  0.979453     -0.207607E-01 -0.194856      0.194856       182.339       182.533    
  18  0.255329      -1.36520      -12.8136       12.8136       176.192       189.006    
  19  0.856654     -0.154722      -1.45219       1.45219       187.014       188.466    
  20  0.610394     -0.493650      -4.63331       4.63331       182.685       187.318    
  21  0.703614     -0.351525      -3.29935       3.29935       183.648       186.948    
  22  0.623403     -0.472562      -4.43538       4.43538       184.702       189.138    
  23  0.375727     -0.978893      -9.18772       9.18772       176.338       185.526    
  24  0.870528     -0.138656      -1.30140       1.30140       186.834       188.135    
  25  0.175838E-01  -4.04078      -37.9260       37.9260       188.461       226.387    
  26  0.237914      -1.43585      -13.4766       13.4766       187.830       201.307    
  27  0.464352     -0.767112      -7.19998       7.19998       184.949       192.148    
  28  0.776873     -0.252478      -2.36972       2.36972       182.391       184.761    
  29  0.380679     -0.965800      -9.06483       9.06483       184.656       193.721    
  30  0.391295     -0.938295      -8.80667       8.80667       189.207       198.013    
  31  0.369488     -0.995636      -9.34487       9.34487       190.440       199.785    
  32  0.302398      -1.19601      -11.2255       11.2255       186.996       198.221    
  33  0.809138     -0.211786      -1.98778       1.98778       191.182       193.169    
  34  0.675473     -0.392342      -3.68245       3.68245       190.639       194.322    
  35  0.486217     -0.721100      -6.76812       6.76812       189.173       195.941    
  36  0.937468     -0.645730E-01 -0.606071      0.606071       183.432       184.038    
  37  0.741025     -0.299721      -2.81313       2.81313       190.528       193.341    
  38  0.155236      -1.86281      -17.4840       17.4840       181.367       198.851    
  39  0.407249     -0.898331      -8.43158       8.43158       183.049       191.480    
  40  0.348550E-01  -3.35656      -31.5041       31.5041       189.965       221.469    
  41  0.178548      -1.72290      -16.1708       16.1708       184.209       200.380    
  42  0.127429      -2.06020      -19.3367       19.3367       189.767       209.104    
  43  0.919888     -0.835037E-01 -0.783751      0.783751       190.284       191.068    
  44  0.520080     -0.653772      -6.13619       6.13619       186.979       193.116    
  45  0.574092     -0.554965      -5.20881       5.20881       187.739       192.948    
  46  0.893427     -0.112690      -1.05769       1.05769       179.382       180.440    
  47  0.658991     -0.417045      -3.91432       3.91432       188.019       191.933    
  48  0.803744     -0.218475      -2.05057       2.05057       195.396       197.447    
  49  0.499877     -0.693392      -6.50806       6.50806       186.718       193.226    
  50  0.723109     -0.324195      -3.04284       3.04284       196.077       199.119    
  51  0.477842     -0.738475      -6.93120       6.93120       196.014       202.945    
  52  0.946108     -0.553980E-01 -0.519956      0.519956       190.471       190.991    
  53  0.296943      -1.21422      -11.3964       11.3964       177.184       188.581    
  54  0.702733     -0.352778      -3.31112       3.31112       183.173       186.484    
  55  0.644709     -0.438956      -4.11996       4.11996       179.337       183.457    
  56  0.687506     -0.374685      -3.51672       3.51672       190.085       193.602    
  57  0.682968     -0.381308      -3.57889       3.57889       196.339       199.918    
  58  0.695030     -0.363801      -3.41457       3.41457       198.628       202.043    
  59  0.134664      -2.00497      -18.8183       18.8183       184.667       203.485    
  60  0.789098     -0.236865      -2.22317       2.22317       189.573       191.796    
  61  0.495959     -0.701262      -6.58192       6.58192       201.853       208.435    
  62  0.932440     -0.699500E-01 -0.656539      0.656539       204.537       205.193    
  63  0.390950     -0.939176      -8.81495       8.81495       190.026       198.841    
  64  0.209807      -1.56156      -14.6566       14.6566       196.829       211.485    
  65  0.727082     -0.318716      -2.99142       2.99142       188.594       191.585    
  66  0.622701     -0.473688      -4.44595       4.44595       188.080       192.526    
  67  0.468739     -0.757708      -7.11172       7.11172       210.053       217.165    
  68  0.253730      -1.37148      -12.8725       12.8725       186.838       199.711    
  69  0.200081      -1.60903      -15.1021       15.1021       209.038       224.141    
  70  0.737960     -0.303866      -2.85204       2.85204       181.591       184.443    
  71  0.466976     -0.761477      -7.14709       7.14709       193.963       201.110    
  72  0.396485     -0.925118      -8.68300       8.68300       194.866       203.549    
  73  0.141388      -1.95625      -18.3610       18.3610       179.236       197.597    
loop,thermsimp(1:2)       76   14.9923       10.1886    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    353        176.44          0.86          1.13         23.46          0.26          0.05         25.75
Just calling func    0   0         25.76


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    354        185.14          0.86          1.14         23.55          0.21          0.04         25.79
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    176.44
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    9.38583               361
loop is:       76
neval is:      353
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       76      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    75.0866      0.500000    
T0,tstep,tfreq (these do not change):             72
current SAtemp,tstepnext are:    9.38583               361
loop is:       77
neval is:      353


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      361
neval,tstepnext:      353     361

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.608851     -0.496181      -4.65707       4.65707       176.200       180.857    
   2  0.437836     -0.825911      -7.75186       7.75186       177.102       184.854    
   3  0.123560      -2.09103      -19.6261       19.6261       178.702       198.328    
   4  0.943438     -0.582242E-01 -0.546483      0.546483       179.382       179.929    
   5  0.215054      -1.53686      -14.4247       14.4247       182.339       196.763    
   6  0.984763     -0.153546E-01 -0.144115      0.144115       179.337       179.482    
   7  0.154160E-01  -4.17235      -39.1609       39.1609       183.432       222.593    
   8  0.231957      -1.46120      -13.7146       13.7146       183.359       197.074    
   9  0.476349     -0.741605      -6.96058       6.96058       181.591       188.551    
  10  0.620436     -0.477333      -4.48016       4.48016       182.391       186.872    
  11  0.456145     -0.784945      -7.36736       7.36736       183.479       190.846    
  12  0.507296     -0.678660      -6.36978       6.36978       176.338       182.708    
  13  0.910123     -0.941755E-01 -0.883915      0.883915       181.200       182.084    
  14  0.323556      -1.12838      -10.5908       10.5908       182.286       192.877    
  15  0.666279     -0.406046      -3.81108       3.81108       180.202       184.013    
  16  0.781920     -0.246002      -2.30893       2.30893       183.173       185.482    
  17  0.921689     -0.815478E-01 -0.765393      0.765393       176.615       177.380    
  18  0.152544      -1.88030      -17.6482       17.6482       183.648       201.297    
  19  0.265926      -1.32454      -12.4319       12.4319       182.685       195.116    
  20  0.812409     -0.207751      -1.94991       1.94991       186.834       188.784    
  21  0.517560E-01  -2.96121      -27.7934       27.7934       187.014       214.808    
  22  0.559187     -0.581271      -5.45571       5.45571       177.184       182.640    
  23  0.708792     -0.344194      -3.23054       3.23054       182.376       185.606    
  24  0.287762      -1.24562      -11.6912       11.6912       176.192       187.884    
  25  0.896953     -0.108752      -1.02073       1.02073       184.702       185.723    
  26  0.305048      -1.18729      -11.1437       11.1437       181.694       192.838    
  27  0.752428     -0.284450      -2.66980       2.66980       174.847       177.517    
  28  0.248159      -1.39369      -13.0809       13.0809       183.150       196.231    
  29  0.997822     -0.217989E-02 -0.204601E-01  0.204601E-01   190.471       190.491    
  30  0.706427     -0.347535      -3.26190       3.26190       190.284       193.546    
  31  0.885217     -0.121923      -1.14435       1.14435       183.049       184.193    
  32  0.448301     -0.802290      -7.53016       7.53016       188.594       196.124    
  33  0.316275      -1.15114      -10.8044       10.8044       189.573       200.377    
  34  0.682241     -0.382372      -3.58887       3.58887       188.019       191.607    
  35  0.655896     -0.421752      -3.95850       3.95850       184.949       188.907    
  36  0.129575      -2.04350      -19.1799       19.1799       177.322       196.502    
  37  0.236133      -1.44336      -13.5471       13.5471       188.080       201.628    
  38  0.481338     -0.731186      -6.86279       6.86279       187.739       194.602    
  39  0.825902     -0.191279      -1.79531       1.79531       186.979       188.775    
  40  0.818029     -0.200857      -1.88521       1.88521       191.182       193.067    
  41  0.135951E-01  -4.29805      -40.3407       40.3407       186.718       227.059    
  42  0.535484     -0.624585      -5.86225       5.86225       190.528       196.390    
  43  0.451882     -0.794334      -7.45548       7.45548       190.085       197.541    
  44  0.591282     -0.525463      -4.93190       4.93190       184.656       189.588    
  45  0.220584      -1.51148      -14.1865       14.1865       190.639       204.826    
  46  0.217569      -1.52524      -14.3156       14.3156       189.173       203.489    
  47  0.541669     -0.613101      -5.75446       5.75446       182.994       188.749    
  48  0.927891     -0.748411E-01 -0.702446      0.702446       195.396       196.099    
  49  0.888902     -0.117768      -1.10535       1.10535       179.236       180.341    
  50  0.391529     -0.937694      -8.80104       8.80104       189.207       198.008    
  51  0.611187     -0.492353      -4.62114       4.62114       186.996       191.617    
  52  0.475002     -0.744437      -6.98715       6.98715       190.026       197.013    
  53  0.504237     -0.684709      -6.42656       6.42656       181.367       187.794    
  54  0.605691     -0.501385      -4.70591       4.70591       196.077       200.783    
  55  0.476618     -0.741039      -6.95527       6.95527       186.838       193.794    
  56  0.128287      -2.05348      -19.2736       19.2736       190.440       209.714    
  57  0.164258      -1.80632      -16.9538       16.9538       196.339       213.293    
  58  0.381764     -0.962954      -9.03812       9.03812       184.209       193.247    
  59  0.824295     -0.193227      -1.81359       1.81359       193.963       195.776    
  60  0.170823      -1.76713      -16.5859       16.5859       187.830       204.416    
  61  0.258309      -1.35360      -12.7046       12.7046       198.628       211.333    
  62  0.470573     -0.753804      -7.07507       7.07507       196.014       203.089    
  63  0.939649     -0.622488E-01 -0.584256      0.584256       184.667       185.251    
  64  0.323567      -1.12835      -10.5905       10.5905       194.866       205.456    
  65  0.192095      -1.64976      -15.4844       15.4844       204.537       220.021    
  66  0.739439     -0.301863      -2.83324       2.83324       201.853       204.686    
  67  0.259637      -1.34847      -12.6565       12.6565       189.767       202.424    
  68  0.478982     -0.736093      -6.90884       6.90884       183.048       189.957    
  69  0.980393     -0.198018E-01 -0.185856      0.185856       196.829       197.014    
  70  0.792065     -0.233112      -2.18795       2.18795       210.053       212.241    
  71  0.446480     -0.806361      -7.56837       7.56837       189.965       197.533    
  72  0.680447     -0.385005      -3.61359       3.61359       209.038       212.652    
  73  0.926728     -0.760949E-01 -0.714213      0.714213       176.444       177.158    
loop,thermsimp(1:2)       77   4.65707       7.75186    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    355        191.21          0.85          1.12         23.56          0.17          0.05         25.74
Just calling func    0   0         25.74


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    356        376.34          0.86          1.12         23.54          0.23          0.05         25.80
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    191.21
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    9.38583               361
loop is:       77
neval is:      355
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       77      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    75.0866      0.500000    
T0,tstep,tfreq (these do not change):             72
current SAtemp,tstepnext are:    9.38583               361
loop is:       78
neval is:      355


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      361
neval,tstepnext:      355     361

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.980204E-01  -2.32258      -21.7993       21.7993       176.444       198.243    
   2  0.700279     -0.356277      -3.34396       3.34396       176.615       179.959    
   3  0.681564     -0.383366      -3.59821       3.59821       174.847       178.445    
   4  0.838213E-01  -2.47907      -23.2681       23.2681       179.337       202.606    
   5  0.708687     -0.344341      -3.23193       3.23193       179.382       182.614    
   6  0.253966      -1.37055      -12.8638       12.8638       179.236       192.100    
   7  0.210796      -1.55686      -14.6124       14.6124       176.200       190.812    
   8  0.967741     -0.327906E-01 -0.307767      0.307767       181.200       181.508    
   9  0.901331     -0.103882     -0.975022      0.975022       177.184       178.159    
  10  0.985067     -0.150452E-01 -0.141211      0.141211       176.338       176.480    
  11  0.153899      -1.87146      -17.5652       17.5652       180.202       197.767    
  12  0.297572      -1.21210      -11.3765       11.3765       183.049       194.425    
  13  0.111036      -2.19790      -20.6291       20.6291       177.102       197.731    
  14  0.489011     -0.715370      -6.71434       6.71434       184.667       191.381    
  15  0.970731     -0.297058E-01 -0.278814      0.278814       183.173       183.452    
  16  0.246322      -1.40112      -13.1506       13.1506       182.376       195.526    
  17  0.293332      -1.22645      -11.5112       11.5112       184.702       196.213    
  18  0.545752     -0.605591      -5.68397       5.68397       182.391       188.075    
  19  0.455999     -0.785265      -7.37036       7.37036       181.367       188.738    
  20  0.427211     -0.850477      -7.98243       7.98243       176.192       184.175    
  21  0.185046E-01  -3.98974      -37.4470       37.4470       181.591       219.038    
  22  0.768936     -0.262748      -2.46611       2.46611       182.994       185.460    
  23  0.870591     -0.138583      -1.30072       1.30072       186.979       188.280    
  24  0.563023     -0.574436      -5.39155       5.39155       186.834       192.225    
  25  0.132150E-01  -4.32640      -40.6069       40.6069       184.949       225.555    
  26  0.890415     -0.116068      -1.08939       1.08939       184.656       185.745    
  27  0.163417      -1.81145      -17.0020       17.0020       183.048       200.050    
  28  0.360288      -1.02085      -9.58153       9.58153       190.471       200.052    
  29  0.622131     -0.474604      -4.45455       4.45455       183.479       187.933    
  30  0.942630     -0.590811E-01 -0.554525      0.554525       188.019       188.573    
  31  0.135626      -1.99785      -18.7515       18.7515       186.996       205.747    
  32  0.369646     -0.995208      -9.34085       9.34085       181.694       191.035    
  33  0.501457     -0.690237      -6.47845       6.47845       182.286       188.765    
  34  0.459762     -0.777047      -7.29323       7.29323       191.182       198.475    
  35  0.489970     -0.713411      -6.69595       6.69595       184.209       190.905    
  36  0.504194     -0.684794      -6.42736       6.42736       190.284       196.712    
  37  0.543102E-01  -2.91304      -27.3413       27.3413       186.838       214.180    
  38  0.873609     -0.135122      -1.26823       1.26823       187.739       189.008    
  39  0.425787     -0.853816      -8.01377       8.01377       182.685       190.698    
  40  0.792406     -0.232682      -2.18391       2.18391       193.963       196.147    
  41  0.691102     -0.369469      -3.46777       3.46777       195.396       198.864    
  42  0.752290     -0.284633      -2.67152       2.67152       188.594       191.266    
  43  0.279962      -1.27310      -11.9491       11.9491       183.150       195.099    
  44  0.315915E-01  -3.45487      -32.4268       32.4268       190.528       222.955    
  45  0.266419      -1.32269      -12.4145       12.4145       177.322       189.736    
  46  0.949868     -0.514319E-01 -0.482731      0.482731       182.339       182.821    
  47  0.520560     -0.652850      -6.12754       6.12754       190.026       196.154    
  48  0.805351     -0.216477      -2.03182       2.03182       196.829       198.860    
  49  0.281582      -1.26733      -11.8949       11.8949       183.359       195.254    
  50  0.365228      -1.00723      -9.45371       9.45371       189.965       199.419    
  51  0.961426     -0.393382E-01 -0.369221      0.369221       190.085       190.454    
  52  0.176024      -1.73713      -16.3044       16.3044       189.207       205.511    
  53  0.722488     -0.325055      -3.05091       3.05091       178.702       181.753    
  54  0.543981     -0.608841      -5.71448       5.71448       189.573       195.287    
  55  0.810204     -0.210469      -1.97543       1.97543       196.077       198.052    
  56  0.839414     -0.175052      -1.64300       1.64300       183.648       185.291    
  57  0.890272     -0.116228      -1.09090       1.09090       188.080       189.171    
  58  0.370000     -0.994252      -9.33188       9.33188       189.767       199.099    
  59  0.528163     -0.638351      -5.99145       5.99145       196.014       202.005    
  60  0.215496      -1.53481      -14.4055       14.4055       189.173       203.579    
  61  0.907335E-01  -2.39983      -22.5244       22.5244       187.830       210.355    
  62  0.853602     -0.158290      -1.48568       1.48568       201.853       203.338    
  63  0.625306     -0.469515      -4.40678       4.40678       190.639       195.046    
  64  0.267902      -1.31713      -12.3624       12.3624       194.866       207.228    
  65  0.932632E-01  -2.37233      -22.2663       22.2663       190.440       212.706    
  66  0.154744      -1.86598      -17.5138       17.5138       198.628       216.142    
  67  0.478208     -0.737710      -6.92402       6.92402       210.053       216.977    
  68  0.869735     -0.139567      -1.30995       1.30995       209.038       210.348    
  69  0.702209     -0.353524      -3.31812       3.31812       196.339       199.657    
  70  0.374797     -0.981372      -9.21098       9.21098       187.014       196.225    
  71  0.814761     -0.204861      -1.92279       1.92279       204.537       206.459    
  72  0.619425     -0.478964      -4.49547       4.49547       183.432       187.927    
  73  0.158848E-01  -4.14239      -38.8798       38.8798       191.208       230.087    
loop,thermsimp(1:2)       78   21.7993       3.34396    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    357        186.72          0.87          1.12         23.83          0.14          0.05         26.02
Just calling func    0   0         26.01


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    358        216.04          0.87          1.13         23.64          0.12          0.05         25.81
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    186.72
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    9.38583               361
loop is:       78
neval is:      357
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       78      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    75.0866      0.500000    
T0,tstep,tfreq (these do not change):             72
current SAtemp,tstepnext are:    9.38583               361
loop is:       79
neval is:      357


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      361
neval,tstepnext:      357     361

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.190215      -1.65960      -15.5767       15.5767       176.338       191.915    
   2  0.812983     -0.207045      -1.94329       1.94329       177.184       179.128    
   3  0.820046E-01  -2.50098      -23.4738       23.4738       174.847       198.321    
   4  0.863006     -0.147333      -1.38284       1.38284       176.615       177.998    
   5  0.647901     -0.434017      -4.07361       4.07361       181.200       185.273    
   6  0.650063E-01  -2.73327      -25.6540       25.6540       178.702       204.356    
   7  0.407685E-02  -5.50243      -51.6449       51.6449       179.382       231.027    
   8  0.935930     -0.662149E-01 -0.621482      0.621482       182.339       182.960    
   9  0.158531      -1.84180      -17.2869       17.2869       183.173       200.460    
  10  0.846482     -0.166666      -1.56430       1.56430       176.192       177.757    
  11  0.252208      -1.37750      -12.9290       12.9290       183.648       196.577    
  12  0.781651E-02  -4.85152      -45.5355       45.5355       182.994       228.530    
  13  0.990286     -0.976134E-02 -0.916183E-01  0.916183E-01   184.656       184.747    
  14  0.550116     -0.597625      -5.60921       5.60921       183.432       189.041    
  15  0.483066     -0.727601      -6.82914       6.82914       183.479       190.308    
  16  0.196160      -1.62883      -15.2879       15.2879       182.391       197.679    
  17  0.469455     -0.756184      -7.09741       7.09741       186.979       194.077    
  18  0.624392     -0.470977      -4.42051       4.42051       188.019       192.439    
  19  0.743593     -0.296262      -2.78066       2.78066       181.367       184.148    
  20  0.348439      -1.05429      -9.89541       9.89541       182.286       192.182    
  21  0.779083     -0.249637      -2.34305       2.34305       187.739       190.082    
  22  0.989010     -0.110506E-01 -0.103719      0.103719       188.080       188.184    
  23  0.655432E-01  -2.72505      -25.5768       25.5768       177.322       202.899    
  24  0.470908     -0.753092      -7.06839       7.06839       190.085       197.153    
  25  0.685537     -0.377553      -3.54364       3.54364       182.685       186.228    
  26  0.863060E-02  -4.75244      -44.6056       44.6056       176.200       220.805    
  27  0.526195     -0.642084      -6.02649       6.02649       184.209       190.235    
  28  0.767692     -0.264367      -2.48130       2.48130       181.694       184.176    
  29  0.380048     -0.967459      -9.08040       9.08040       188.594       197.674    
  30  0.337508E-01  -3.38875      -31.8062       31.8062       184.667       216.473    
  31  0.683667     -0.380285      -3.56929       3.56929       179.236       182.805    
  32  0.245511      -1.40441      -13.1816       13.1816       186.834       200.015    
  33  0.294388      -1.22286      -11.4775       11.4775       183.049       194.526    
  34  0.159040      -1.83860      -17.2568       17.2568       190.639       207.896    
  35  0.613798     -0.488089      -4.58111       4.58111       183.150       187.731    
  36  0.863839E-01  -2.44895      -22.9855       22.9855       183.359       206.345    
  37  0.118930      -2.12922      -19.9845       19.9845       189.573       209.557    
  38  0.961460     -0.393026E-01 -0.368887      0.368887       182.376       182.745    
  39  0.457884     -0.781140      -7.33165       7.33165       193.963       201.295    
  40  0.312963      -1.16167      -10.9032       10.9032       190.026       200.929    
  41  0.892553     -0.113669      -1.06688       1.06688       184.702       185.769    
  42  0.448774     -0.801235      -7.52025       7.52025       187.014       194.535    
  43  0.942987E-01  -2.36129      -22.1626       22.1626       190.284       212.447    
  44  0.848599     -0.164169      -1.54086       1.54086       177.102       178.643    
  45  0.665342     -0.407455      -3.82430       3.82430       180.202       184.026    
  46  0.894010     -0.112039      -1.05157       1.05157       196.077       197.128    
  47  0.403928     -0.906518      -8.50843       8.50843       176.444       184.952    
  48  0.612812     -0.489696      -4.59621       4.59621       191.182       195.778    
  49  0.726279     -0.319821      -3.00178       3.00178       196.829       199.830    
  50  0.694767     -0.364179      -3.41812       3.41812       195.396       198.814    
  51  0.849471     -0.163141      -1.53121       1.53121       189.767       191.298    
  52  0.615908     -0.484657      -4.54891       4.54891       189.965       194.514    
  53  0.256250      -1.36160      -12.7798       12.7798       196.339       209.119    
  54  0.124633      -2.08238      -19.5449       19.5449       183.048       202.593    
  55  0.629294E-01  -2.76574      -25.9588       25.9588       190.471       216.429    
  56  0.127527      -2.05943      -19.3294       19.3294       196.014       215.343    
  57  0.721510     -0.326409      -3.06362       3.06362       179.337       182.401    
  58  0.664696     -0.408425      -3.83341       3.83341       201.853       205.686    
  59  0.562617     -0.575156      -5.39832       5.39832       189.173       194.572    
  60  0.413984     -0.881928      -8.27762       8.27762       189.207       197.484    
  61  0.656751     -0.420450      -3.94627       3.94627       186.996       190.942    
  62  0.642415     -0.442520      -4.15342       4.15342       204.537       208.690    
  63  0.136182      -1.99376      -18.7131       18.7131       194.866       213.579    
  64  0.481125     -0.731629      -6.86694       6.86694       209.038       215.905    
  65  0.147280      -1.91542      -17.9778       17.9778       187.830       205.808    
  66  0.162546      -1.81680      -17.0521       17.0521       190.440       207.492    
  67  0.200903      -1.60493      -15.0636       15.0636       186.838       201.902    
  68  0.444300     -0.811254      -7.61429       7.61429       198.628       206.243    
  69  0.799825     -0.223363      -2.09644       2.09644       210.053       212.150    
  70  0.622561     -0.473914      -4.44808       4.44808       181.591       186.039    
  71  0.468358     -0.758522      -7.11936       7.11936       190.528       197.648    
  72  0.155577      -1.86061      -17.4634       17.4634       184.949       202.412    
  73  0.445431     -0.808713      -7.59044       7.59044       186.718       194.308    
loop,thermsimp(1:2)       79   15.5767       1.94329    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    359        203.35          0.87          1.12         23.50          0.33          0.05         25.88
Just calling func    0   0         25.88


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    203.35
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    9.38583               361
loop is:       79
neval is:      358
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       79      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    75.0866      0.500000    
T0,tstep,tfreq (these do not change):             72
current SAtemp,tstepnext are:    9.38583               361
loop is:       80
neval is:      358


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      361
neval,tstepnext:      358     361

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.337114      -1.08733      -10.2055       10.2055       176.192       186.398    
   2  0.744737     -0.294724      -2.76623       2.76623       176.615       179.381    
   3  0.361564E-01  -3.31990      -31.1600       31.1600       177.102       208.262    
   4  0.312099      -1.16444      -10.9292       10.9292       177.184       188.114    
   5  0.119132      -2.12752      -19.9686       19.9686       179.337       199.306    
   6  0.617735     -0.481696      -4.52111       4.52111       182.376       186.897    
   7  0.117626      -2.14025      -20.0880       20.0880       179.236       199.324    
   8  0.258570      -1.35259      -12.6952       12.6952       182.339       195.034    
   9  0.851854E-01  -2.46293      -23.1166       23.1166       180.202       203.319    
  10  0.220620      -1.51131      -14.1849       14.1849       181.367       195.552    
  11  0.648876     -0.432513      -4.05949       4.05949       181.694       185.754    
  12  0.958689     -0.421884E-01 -0.395973      0.395973       184.656       185.052    
  13  0.240652      -1.42440      -13.3692       13.3692       176.444       189.813    
  14  0.975871     -0.244252E-01 -0.229251      0.229251       181.200       181.429    
  15  0.467835     -0.759639      -7.12984       7.12984       184.702       191.832    
  16  0.398205     -0.920788      -8.64236       8.64236       181.591       190.233    
  17  0.757338E-01  -2.58053      -24.2204       24.2204       182.685       206.905    
  18  0.654643     -0.423666      -3.97645       3.97645       183.150       187.127    
  19  0.305298      -1.18647      -11.1360       11.1360       188.080       199.216    
  20  0.435768     -0.830645      -7.79629       7.79629       183.432       191.228    
  21  0.689410     -0.371920      -3.49077       3.49077       187.739       191.230    
  22  0.267500      -1.31864      -12.3765       12.3765       184.209       196.585    
  23  0.590747     -0.526367      -4.94039       4.94039       183.479       188.419    
  24  0.108947E-01  -4.51948      -42.4190       42.4190       186.996       229.415    
  25  0.236025      -1.44382      -13.5514       13.5514       189.767       203.319    
  26  0.590760     -0.526345      -4.94018       4.94018       176.338       181.278    
  27  0.782443     -0.245334      -2.30266       2.30266       182.286       184.589    
  28  0.702257     -0.353456      -3.31747       3.31747       188.019       191.336    
  29  0.764991     -0.267891      -2.51438       2.51438       186.979       189.494    
  30  0.753362     -0.283210      -2.65816       2.65816       186.718       189.376    
  31  0.961949E-01  -2.34138      -21.9758       21.9758       189.965       211.941    
  32  0.541564     -0.613294      -5.75627       5.75627       183.049       188.805    
  33  0.474786     -0.744891      -6.99142       6.99142       187.014       194.006    
  34  0.242842      -1.41534      -13.2842       13.2842       189.173       202.457    
  35  0.495414     -0.702361      -6.59224       6.59224       191.182       197.774    
  36  0.636645     -0.451543      -4.23811       4.23811       183.648       187.886    
  37  0.758087     -0.276957      -2.59947       2.59947       196.077       198.676    
  38  0.209321      -1.56389      -14.6784       14.6784       190.085       204.763    
  39  0.484343     -0.724961      -6.80436       6.80436       189.207       196.011    
  40  0.499790     -0.693567      -6.50970       6.50970       190.528       197.038    
  41  0.316628      -1.15003      -10.7940       10.7940       188.594       199.388    
  42  0.705469     -0.348892      -3.27464       3.27464       182.391       185.666    
  43  0.514591     -0.664383      -6.23579       6.23579       174.847       181.083    
  44  0.869006     -0.140406      -1.31782       1.31782       195.396       196.714    
  45  0.112600      -2.18392      -20.4979       20.4979       196.829       217.326    
  46  0.511991     -0.669449      -6.28333       6.28333       186.834       193.117    
  47  0.477456     -0.739283      -6.93878       6.93878       183.173       190.112    
  48  0.494460     -0.704290      -6.61034       6.61034       190.026       196.636    
  49  0.698938     -0.358193      -3.36194       3.36194       193.963       197.325    
  50  0.430212     -0.843478      -7.91674       7.91674       186.838       194.755    
  51  0.474243E-01  -3.04862      -28.6138       28.6138       184.949       213.562    
  52  0.167497      -1.78679      -16.7705       16.7705       183.048       199.819    
  53  0.233811      -1.45324      -13.6399       13.6399       177.322       190.962    
  54  0.760101     -0.274304      -2.57457       2.57457       178.702       181.276    
  55  0.195143      -1.63402      -15.3367       15.3367       201.853       217.189    
  56  0.822875     -0.194951      -1.82978       1.82978       187.830       189.660    
  57  0.332571      -1.10090      -10.3329       10.3329       198.628       208.961    
  58  0.682214     -0.382412      -3.58925       3.58925       183.359       186.948    
  59  0.560875E-01  -2.88084      -27.0391       27.0391       190.440       217.479    
  60  0.407464     -0.897802      -8.42661       8.42661       190.639       199.066    
  61  0.650997     -0.429250      -4.02887       4.02887       204.537       208.565    
  62  0.426312E-01  -3.15517      -29.6139       29.6139       196.339       225.953    
  63  0.556139E-01  -2.88932      -27.1187       27.1187       189.573       216.692    
  64  0.837058     -0.177861      -1.66938       1.66938       210.053       211.723    
  65  0.655823     -0.421864      -3.95954       3.95954       190.284       194.244    
  66  0.846314E-02  -4.77204      -44.7895       44.7895       194.866       239.655    
  67  0.227818E-01  -3.78179      -35.4952       35.4952       196.014       231.509    
  68  0.401219     -0.913248      -8.57159       8.57159       209.038       217.610    
  69  0.663900     -0.409624      -3.84466       3.84466       190.471       194.315    
  70  0.660940     -0.414092      -3.88660       3.88660       184.667       188.553    
  71  0.106131      -2.24308      -21.0532       21.0532       176.200       197.253    
  72  0.609372     -0.495326      -4.64904       4.64904       182.994       187.643    
  73  0.705689     -0.348581      -3.27172       3.27172       203.345       206.617    
loop,thermsimp(1:2)       80   10.2055       2.76623    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    360        174.46          0.86          1.13         23.50          0.22          0.05         25.77
Just calling func    0   0         25.77


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    361        205.04          0.86          1.13         23.61          0.11          0.04         25.76
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  360    205.04        1.999     -1.131      1.887     -102.6     0.8574    
                     -0.3478      1.769     -99.70      3.891    -0.1892    
                       2.205     -1.773      1.489      0.000     -5.000    
                      -1.178      0.000      0.000      0.000     -1.221    

                      -2.500      9038.      7373.      0.000      0.000    
                     -0.5672     -6.966     -5.189     -7.070      2.632    
                      -14.62     -1.894      152.0      0.000     -4583.    

                       1534.     -1340.     -6445.     0.1579E+05  1246.    
                       2254.     0.7656E-01-0.9201E-01  0.000    -0.4617    
                     -0.7669E-01-0.6934E-01-0.1553    -0.1650    -0.1820    

                      -1.634     0.2570E-01  0.000    -0.9402E-01 0.5253E-01
                      0.8541E-01-0.1145    -0.1030    -0.1911     0.5471E-01
                     -0.1935    -0.6903E-01-0.1405    -0.9149E-01  0.000    

                      -1.412     -1.306     -1.737     -3.057    -0.4443    
                     -0.3059E-01  9.073      9.078    -0.1065E+05 -4.000    
                     -0.6027    -0.7009      11.83      8.393    -0.2045E+05

                      -4.000     0.4882E-01-0.7537      8.820      8.980    
                     -0.2562E+05 -7.000    -0.7385    -0.8059E-01  9.429    
                       8.419    -0.2944E+05 -7.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    174.46
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    9.38583               361
loop is:       80
neval is:      360
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       80      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    75.0866      0.500000    
T0,tstep,tfreq (these do not change):             72
current SAtemp,tstepnext are:    9.38583               361
loop is:       81
neval is:      360


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      361
neval,tstepnext:      360     361

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.343927      -1.06733      -10.0177       10.0177       176.615       186.633    
   2  0.822787     -0.195058      -1.83078       1.83078       174.847       176.678    
   3  0.320831E-01  -3.43942      -32.2818       32.2818       178.702       210.984    
   4  0.224034      -1.49596      -14.0408       14.0408       176.338       190.379    
   5  0.200770      -1.60559      -15.0698       15.0698       181.200       196.270    
   6  0.983846     -0.162863E-01 -0.152860      0.152860       182.286       182.439    
   7  0.762274     -0.271449      -2.54777       2.54777       184.656       187.204    
   8  0.872649     -0.136221      -1.27855       1.27855       182.391       183.670    
   9  0.366891      -1.00269      -9.41107       9.41107       181.694       191.105    
  10  0.800852     -0.222079      -2.08440       2.08440       176.192       178.277    
  11  0.755695     -0.280117      -2.62913       2.62913       182.376       185.005    
  12  0.595174     -0.518902      -4.87032       4.87032       183.359       188.229    
  13  0.316509      -1.15040      -10.7975       10.7975       183.150       193.948    
  14  0.847901     -0.164991      -1.54858       1.54858       182.994       184.543    
  15  0.116195      -2.15248      -20.2028       20.2028       183.648       203.851    
  16  0.121963      -2.10403      -19.7481       19.7481       177.184       196.933    
  17  0.298485      -1.20903      -11.3478       11.3478       183.479       194.827    
  18  0.698751     -0.358461      -3.36445       3.36445       184.667       188.031    
  19  0.248186      -1.39358      -13.0799       13.0799       183.049       196.129    
  20  0.717251     -0.332329      -3.11918       3.11918       186.718       189.837    
  21  0.591856     -0.524491      -4.92278       4.92278       186.979       191.902    
  22  0.780177E-01  -2.55082      -23.9415       23.9415       187.830       211.772    
  23  0.314281      -1.15747      -10.8638       10.8638       176.444       187.308    
  24  0.565423E-01  -2.87277      -26.9633       26.9633       183.173       210.136    
  25  0.964829     -0.358044E-01 -0.336054      0.336054       181.591       181.927    
  26  0.900157     -0.105186     -0.987261      0.987261       177.322       178.309    
  27  0.656998     -0.420074      -3.94274       3.94274       183.432       187.374    
  28  0.888436E-01  -2.42088      -22.7219       22.7219       187.739       210.461    
  29  0.853838     -0.158014      -1.48309       1.48309       188.019       189.502    
  30  0.704842     -0.349782      -3.28299       3.28299       184.702       187.985    
  31  0.890111     -0.116409      -1.09259       1.09259       186.834       187.926    
  32  0.424397     -0.857087      -8.04447       8.04447       187.014       195.059    
  33  0.959371     -0.414778E-01 -0.389304      0.389304       190.284       190.674    
  34  0.323832      -1.12753      -10.5828       10.5828       190.471       201.053    
  35  0.943913     -0.577217E-01 -0.541765      0.541765       186.838       187.380    
  36  0.119048      -2.12823      -19.9752       19.9752       182.339       202.314    
  37  0.427842E-01  -3.15159      -29.5802       29.5802       181.367       210.948    
  38  0.433544     -0.835761      -7.84431       7.84431       189.207       197.051    
  39  0.773173     -0.257253      -2.41453       2.41453       184.209       186.623    
  40  0.455657     -0.786014      -7.37739       7.37739       190.026       197.404    
  41  0.362132      -1.01575      -9.53361       9.53361       195.396       204.930    
  42  0.775394     -0.254384      -2.38760       2.38760       190.528       192.916    
  43  0.889906     -0.116639      -1.09476       1.09476       176.200       177.294    
  44  0.415923     -0.877255      -8.23376       8.23376       193.963       202.197    
  45  0.374532E-01  -3.28466      -30.8293       30.8293       191.182       222.011    
  46  0.904805     -0.100036     -0.938920      0.938920       196.077       197.016    
  47  0.130905      -2.03328      -19.0840       19.0840       190.639       209.723    
  48  0.951733     -0.494710E-01 -0.464326      0.464326       188.080       188.545    
  49  0.720673     -0.327570      -3.07451       3.07451       179.337       182.412    
  50  0.425150     -0.855314      -8.02782       8.02782       179.236       187.264    
  51  0.464059     -0.767744      -7.20591       7.20591       188.594       195.800    
  52  0.822031     -0.195978      -1.83941       1.83941       183.048       184.888    
  53  0.325542      -1.12226      -10.5334       10.5334       189.173       199.707    
  54  0.701043     -0.355186      -3.33371       3.33371       180.202       183.536    
  55  0.135013      -2.00239      -18.7940       18.7940       189.767       208.561    
  56  0.911632     -0.925193E-01 -0.868370      0.868370       190.085       190.953    
  57  0.172993      -1.75450      -16.4675       16.4675       203.345       219.813    
  58  0.401556     -0.912409      -8.56372       8.56372       182.685       191.248    
  59  0.906091     -0.986152E-01 -0.925585      0.925585       177.102       178.027    
  60  0.322588      -1.13138      -10.6189       10.6189       204.537       215.156    
  61  0.779620     -0.248949      -2.33659       2.33659       198.628       200.965    
  62  0.886087     -0.120940      -1.13512       1.13512       210.053       211.189    
  63  0.841445     -0.172634      -1.62031       1.62031       189.965       191.585    
  64  0.960060E-01  -2.34334      -21.9942       21.9942       184.949       206.943    
  65  0.198159      -1.61868      -15.1927       15.1927       189.573       204.766    
  66  0.762088E-01  -2.57428      -24.1617       24.1617       201.853       226.014    
  67  0.829173     -0.187327      -1.75821       1.75821       196.829       198.587    
  68  0.725953     -0.320270      -3.00600       3.00600       190.440       193.446    
  69  0.881009     -0.126687      -1.18907       1.18907       209.038       210.228    
  70  0.964096     -0.365643E-01 -0.343186      0.343186       196.339       196.682    
  71  0.602895     -0.506013      -4.74935       4.74935       186.996       191.745    
  72  0.402816     -0.909276      -8.53430       8.53430       196.014       204.548    
  73  0.114891      -2.16377      -20.3088       20.3088       174.461       194.770    
loop,thermsimp(1:2)       81   10.0177       1.83078    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    362        195.33          0.86          1.13         23.49          0.30          0.05         25.82
Just calling func    0   0         25.82


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    195.33
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    9.38583               361
loop is:       81
neval is:      361
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       81      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    75.0866      0.500000    
T0,tstep,tfreq (these do not change):             72
current SAtemp,tstepnext are:    9.38583               361
loop is:       82
neval is:      361


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      361
neval,tstepnext:      361     361

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.556446     -0.586184      -5.50183       5.50183       174.847       180.349    
   2  0.926592     -0.762421E-01 -0.715595      0.715595       176.200       176.915    
   3  0.766762     -0.265579      -2.49268       2.49268       177.102       179.594    
   4  0.627980     -0.465247      -4.36673       4.36673       176.192       180.559    
   5  0.647527     -0.434594      -4.07903       4.07903       177.322       181.401    
   6  0.639464     -0.447125      -4.19664       4.19664       181.591       185.787    
   7  0.168437      -1.78119      -16.7180       16.7180       179.337       196.055    
   8  0.725133     -0.321400      -3.01661       3.01661       182.286       185.303    
   9  0.620073     -0.477917      -4.48565       4.48565       180.202       184.688    
  10  0.837394     -0.177461      -1.66561       1.66561       182.391       184.057    
  11  0.763326     -0.270070      -2.53483       2.53483       182.994       185.529    
  12  0.216703      -1.52923      -14.3531       14.3531       183.048       197.401    
  13  0.846730     -0.166373      -1.56155       1.56155       182.376       183.937    
  14  0.712127     -0.339499      -3.18648       3.18648       184.209       187.395    
  15  0.731222     -0.313039      -2.93813       2.93813       176.615       179.553    
  16  0.131329      -2.03005      -19.0537       19.0537       184.656       203.710    
  17  0.946517     -0.549662E-01 -0.515904      0.515904       179.236       179.752    
  18  0.303743      -1.19157      -11.1839       11.1839       176.444       187.628    
  19  0.452199     -0.793633      -7.44890       7.44890       183.432       190.881    
  20  0.176302      -1.73556      -16.2896       16.2896       186.838       203.128    
  21  0.569871     -0.562345      -5.27807       5.27807       186.834       192.112    
  22  0.267873      -1.31724      -12.3634       12.3634       184.702       197.066    
  23  0.295877      -1.21781      -11.4302       11.4302       184.667       196.097    
  24  0.658567     -0.417689      -3.92035       3.92035       183.359       187.280    
  25  0.633120     -0.457096      -4.29022       4.29022       188.080       192.371    
  26  0.655522     -0.422324      -3.96386       3.96386       188.019       191.982    
  27  0.532295     -0.630558      -5.91831       5.91831       186.718       192.636    
  28  0.611209     -0.492317      -4.62080       4.62080       176.338       180.959    
  29  0.768812E-01  -2.56549      -24.0793       24.0793       190.284       214.364    
  30  0.845132     -0.168262      -1.57928       1.57928       190.085       191.664    
  31  0.133696      -2.01219      -18.8860       18.8860       181.694       200.580    
  32  0.850522E-01  -2.46449      -23.1313       23.1313       182.685       205.816    
  33  0.901960     -0.103185     -0.968474      0.968474       189.965       190.933    
  34  0.394454E-01  -3.23284      -30.3429       30.3429       186.996       217.338    
  35  0.152819      -1.87850      -17.6313       17.6313       186.979       204.611    
  36  0.951369     -0.498538E-01 -0.467919      0.467919       190.528       190.996    
  37  0.909075     -0.953273E-01 -0.894726      0.894726       190.440       191.335    
  38  0.552964     -0.592462      -5.56075       5.56075       183.150       188.711    
  39  0.904748     -0.100099     -0.939513      0.939513       174.461       175.400    
  40  0.434860     -0.832731      -7.81587       7.81587       183.479       191.295    
  41  0.807557E-01  -2.51633      -23.6178       23.6178       187.014       210.632    
  42  0.245089      -1.40614      -13.1977       13.1977       188.594       201.792    
  43  0.566857     -0.567648      -5.32784       5.32784       183.049       188.376    
  44  0.154441      -1.86794      -17.5322       17.5322       181.200       198.732    
  45  0.961849     -0.388974E-01 -0.365085      0.365085       196.339       196.704    
  46  0.267234      -1.31963      -12.3858       12.3858       177.184       189.570    
  47  0.170042      -1.77171      -16.6289       16.6289       196.077       212.706    
  48  0.796608     -0.227393      -2.13427       2.13427       189.207       191.341    
  49  0.474137     -0.746260      -7.00427       7.00427       190.026       197.030    
  50  0.164737      -1.80340      -16.9264       16.9264       196.829       213.755    
  51  0.728428     -0.316867      -2.97406       2.97406       189.173       192.147    
  52  0.259284      -1.34983      -12.6693       12.6693       198.628       211.298    
  53  0.932415     -0.699773E-01 -0.656794      0.656794       190.471       191.127    
  54  0.905731     -0.990126E-01 -0.929315      0.929315       193.963       194.892    
  55  0.975166     -0.251472E-01 -0.236027      0.236027       182.339       182.575    
  56  0.312519      -1.16309      -10.9166       10.9166       183.648       194.565    
  57  0.363326      -1.01246      -9.50273       9.50273       196.014       205.517    
  58  0.633693     -0.456191      -4.28173       4.28173       189.573       193.855    
  59  0.765432     -0.267315      -2.50897       2.50897       195.396       197.905    
  60  0.197736      -1.62082      -15.2127       15.2127       184.949       200.161    
  61  0.825376     -0.191916      -1.80129       1.80129       189.767       191.569    
  62  0.401700     -0.912049      -8.56034       8.56034       190.639       199.199    
  63  0.637472     -0.450245      -4.22592       4.22592       183.173       187.399    
  64  0.989702     -0.103516E-01 -0.971585E-01  0.971585E-01   209.038       209.136    
  65  0.980344     -0.198515E-01 -0.186323      0.186323       187.739       187.926    
  66  0.719848     -0.328715      -3.08526       3.08526       181.367       184.453    
  67  0.779598     -0.248976      -2.33685       2.33685       178.702       181.039    
  68  0.979665     -0.205443E-01 -0.192825      0.192825       210.053       210.246    
  69  0.904051E-01  -2.40345      -22.5584       22.5584       187.830       210.389    
  70  0.484052     -0.725563      -6.81001       6.81001       204.537       211.347    
  71  0.487443     -0.718583      -6.74449       6.74449       203.345       210.090    
  72  0.132340      -2.02238      -18.9817       18.9817       191.182       210.163    
  73  0.629957E-01  -2.76469      -25.9489       25.9489       195.332       221.281    
loop,thermsimp(1:2)       82   5.50183      0.715595    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    363        201.85          0.85          1.12         23.63          0.11          0.05         25.75
Just calling func    0   0         25.75


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    201.85
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    9.38583               361
loop is:       82
neval is:      362
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       82      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    75.0866      0.500000    
T0,tstep,tfreq (these do not change):             72
current SAtemp,tstepnext are:    9.38583               361
loop is:       83
neval is:      362


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 




neval>tstepnex so lower away!t
---> lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
     new SAtemp,tstepnext are :    4.69291               433

 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      433
neval,tstepnext:      362     433

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.620562     -0.477129      -2.23913       2.23913       174.461       176.700    
   2  0.835522     -0.179699     -0.843311      0.843311       176.200       177.043    
   3  0.626661     -0.467350      -2.19323       2.19323       176.615       178.808    
   4  0.197939      -1.61980      -7.60156       7.60156       177.102       184.703    
   5  0.842637     -0.171219     -0.803515      0.803515       179.236       180.039    
   6  0.873669     -0.135053     -0.633794      0.633794       174.847       175.481    
   7  0.298180E-01  -3.51264      -16.4845       16.4845       176.192       192.677    
   8  0.548374     -0.600797      -2.81949       2.81949       176.338       179.158    
   9  0.407469E-01  -3.20037      -15.0191       15.0191       178.702       193.721    
  10  0.210105E-02  -6.16532      -28.9333       28.9333       177.322       206.255    
  11  0.631577     -0.459536      -2.15656       2.15656       182.339       184.495    
  12  0.944026     -0.576013E-01 -0.270318      0.270318       182.376       182.646    
  13  0.492775     -0.707703      -3.32119       3.32119       182.391       185.713    
  14  0.195107      -1.63421      -7.66919       7.66919       181.367       189.037    
  15  0.775688     -0.254005      -1.19202       1.19202       180.202       181.394    
  16  0.763907     -0.269310      -1.26385       1.26385       182.286       183.550    
  17  0.797499     -0.226275      -1.06189       1.06189       182.994       184.056    
  18  0.639217     -0.447511      -2.10013       2.10013       181.591       183.691    
  19  0.775225     -0.254602      -1.19482       1.19482       183.359       184.554    
  20  0.680633     -0.384733      -1.80552       1.80552       184.209       186.014    
  21  0.532184     -0.630766      -2.96013       2.96013       183.173       186.133    
  22  0.843009     -0.170778     -0.801447      0.801447       176.444       177.245    
  23  0.943186     -0.584913E-01 -0.274495      0.274495       187.739       188.014    
  24  0.601611     -0.508143      -2.38467       2.38467       183.049       185.433    
  25  0.259021      -1.35084      -6.33940       6.33940       183.150       189.489    
  26  0.855132     -0.156500     -0.734441      0.734441       177.184       177.919    
  27  0.351229      -1.04632      -4.91028       4.91028       183.432       188.342    
  28  0.950362     -0.509122E-01 -0.238926      0.238926       189.965       190.204    
  29  0.447301     -0.804524      -3.77556       3.77556       190.528       194.304    
  30  0.325509      -1.12237      -5.26717       5.26717       190.471       195.738    
  31  0.717010     -0.332666      -1.56117       1.56117       183.479       185.040    
  32  0.676718     -0.390500      -1.83258       1.83258       190.440       192.273    
  33  0.493623     -0.705983      -3.31312       3.31312       189.207       192.520    
  34  0.155805E-01  -4.16174      -19.5307       19.5307       189.767       209.298    
  35  0.417708     -0.872973      -4.09679       4.09679       190.085       194.182    
  36  0.395067     -0.928699      -4.35831       4.35831       188.019       192.377    
  37  0.977835     -0.224139E-01 -0.105187      0.105187       186.834       186.939    
  38  0.603414     -0.505151      -2.37063       2.37063       189.173       191.544    
  39  0.173810      -1.74979      -8.21162       8.21162       188.080       196.292    
  40  0.979719     -0.204895E-01 -0.961553E-01  0.961553E-01   186.718       186.814    
  41  0.234071      -1.45213      -6.81472       6.81472       189.573       196.388    
  42  0.264051      -1.33161      -6.24915       6.24915       183.648       189.897    
  43  0.756353     -0.279247      -1.31048       1.31048       193.963       195.273    
  44  0.980782     -0.194046E-01 -0.910641E-01  0.910641E-01   179.337       179.429    
  45  0.444591E-01  -3.11319      -14.6099       14.6099       184.667       199.277    
  46  0.276895      -1.28412      -6.02625       6.02625       196.339       202.365    
  47  0.754338     -0.281915      -1.32300       1.32300       190.026       191.349    
  48  0.288496      -1.24308      -5.83365       5.83365       184.702       190.536    
  49  0.945547     -0.559915E-01 -0.262763      0.262763       183.048       183.311    
  50  0.698722     -0.358502      -1.68242       1.68242       195.396       197.079    
  51  0.586821     -0.533035      -2.50149       2.50149       181.200       183.701    
  52  0.173241      -1.75307      -8.22702       8.22702       190.639       198.866    
  53  0.157974      -1.84532      -8.65995       8.65995       184.949       193.608    
  54  0.789304     -0.236604      -1.11036       1.11036       181.694       182.805    
  55  0.351815      -1.04465      -4.90245       4.90245       188.594       193.497    
  56  0.109517      -2.21167      -10.3792       10.3792       186.838       197.218    
  57  0.884115     -0.123168     -0.578018      0.578018       184.656       185.234    
  58  0.590256     -0.527198      -2.47410       2.47410       186.979       189.454    
  59  0.720991     -0.327128      -1.53518       1.53518       196.014       197.549    
  60  0.584697     -0.536661      -2.51850       2.51850       182.685       185.203    
  61  0.798909E-01  -2.52709      -11.8594       11.8594       209.038       220.898    
  62  0.476858     -0.740537      -3.47528       3.47528       203.345       206.820    
  63  0.366415      -1.00399      -4.71163       4.71163       191.182       195.893    
  64  0.579292     -0.545948      -2.56209       2.56209       210.053       212.616    
  65  0.859086     -0.151886     -0.712786      0.712786       187.830       188.543    
  66  0.178211      -1.72479      -8.09428       8.09428       187.014       195.109    
  67  0.372347     -0.987929      -4.63627       4.63627       198.628       203.265    
  68  0.132090      -2.02427      -9.49972       9.49972       204.537       214.036    
  69  0.292834      -1.22815      -5.76361       5.76361       196.077       201.840    
  70  0.788579     -0.237522      -1.11467       1.11467       196.829       197.943    
  71  0.555831     -0.587292      -2.75611       2.75611       190.284       193.040    
  72  0.621814     -0.475115      -2.22967       2.22967       186.996       189.225    
  73  0.801237     -0.221598      -1.03994       1.03994       201.853       202.893    
loop,thermsimp(1:2)       83   2.23913      0.843311    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    364        193.39          0.86          1.12         23.53          0.22          0.05         25.78
Just calling func    0   0         25.78


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    193.39
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    4.69291               433
loop is:       83
neval is:      363
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       83      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    75.0866      0.500000    
T0,tstep,tfreq (these do not change):             72
current SAtemp,tstepnext are:    4.69291               433
loop is:       84
neval is:      363


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      433
neval,tstepnext:      363     433

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.573743     -0.555573      -2.60726       2.60726       174.847       177.454    
   2  0.583943E-01  -2.84054      -13.3304       13.3304       174.461       187.791    
   3  0.377108     -0.975224      -4.57664       4.57664       176.200       180.776    
   4  0.117758      -2.13912      -10.0387       10.0387       176.444       186.483    
   5  0.531627     -0.631812      -2.96504       2.96504       177.184       180.149    
   6  0.348101      -1.05526      -4.95225       4.95225       176.615       181.567    
   7  0.713050     -0.338204      -1.58716       1.58716       176.338       177.925    
   8  0.895286     -0.110612     -0.519093      0.519093       179.337       179.857    
   9  0.873863     -0.134831     -0.632751      0.632751       179.236       179.869    
  10  0.225074      -1.49132      -6.99866       6.99866       180.202       187.201    
  11  0.542220     -0.612083      -2.87245       2.87245       182.376       185.248    
  12  0.262707      -1.33672      -6.27310       6.27310       181.694       187.967    
  13  0.864358E-01  -2.44835      -11.4899       11.4899       183.048       194.538    
  14  0.468331     -0.758581      -3.55995       3.55995       182.286       185.846    
  15  0.896509     -0.109247     -0.512687      0.512687       181.591       182.103    
  16  0.169842E-01  -4.07547      -19.1258       19.1258       181.200       200.326    
  17  0.980158     -0.200410E-01 -0.940507E-01  0.940507E-01   182.994       183.088    
  18  0.252821      -1.37507      -6.45310       6.45310       182.339       188.792    
  19  0.556823     -0.585507      -2.74773       2.74773       183.359       186.107    
  20  0.520304     -0.653342      -3.06608       3.06608       177.102       180.168    
  21  0.956705E-01  -2.34685      -11.0135       11.0135       183.479       194.492    
  22  0.458762     -0.779224      -3.65683       3.65683       182.685       186.341    
  23  0.684654     -0.378842      -1.77787       1.77787       184.656       186.434    
  24  0.749393     -0.288492      -1.35387       1.35387       183.049       184.403    
  25  0.112724      -2.18282      -10.2438       10.2438       182.391       192.635    
  26  0.642114     -0.442989      -2.07891       2.07891       184.209       186.288    
  27  0.881888     -0.125691     -0.589855      0.589855       183.173       183.763    
  28  0.933845     -0.684452E-01 -0.321207      0.321207       186.718       187.039    
  29  0.124482      -2.08359      -9.77812       9.77812       186.834       196.612    
  30  0.189487      -1.66344      -7.80636       7.80636       187.739       195.546    
  31  0.526869     -0.640804      -3.00724       3.00724       183.432       186.439    
  32  0.490162     -0.713020      -3.34614       3.34614       187.830       191.177    
  33  0.292049      -1.23083      -5.77620       5.77620       181.367       187.144    
  34  0.646685     -0.435896      -2.04562       2.04562       186.996       189.041    
  35  0.738289     -0.303420      -1.42392       1.42392       186.979       188.403    
  36  0.379268     -0.969513      -4.54984       4.54984       183.150       187.700    
  37  0.691037     -0.369562      -1.73432       1.73432       183.648       185.383    
  38  0.566288     -0.568653      -2.66864       2.66864       189.965       192.634    
  39  0.130734      -2.03459      -9.54816       9.54816       184.702       194.250    
  40  0.298876      -1.20773      -5.66775       5.66775       190.026       195.694    
  41  0.369194     -0.996434      -4.67618       4.67618       189.173       193.849    
  42  0.291325      -1.23331      -5.78784       5.78784       190.440       196.228    
  43  0.828296     -0.188384     -0.884072      0.884072       188.019       188.903    
  44  0.540492E-01  -2.91786      -13.6933       13.6933       189.207       202.900    
  45  0.979889     -0.203162E-01 -0.953423E-01  0.953423E-01   176.192       176.288    
  46  0.411533     -0.887866      -4.16668       4.16668       190.284       194.451    
  47  0.430635     -0.842495      -3.95376       3.95376       188.594       192.548    
  48  0.948338     -0.530447E-01 -0.248934      0.248934       184.949       185.197    
  49  0.400713E-02  -5.51968      -25.9034       25.9034       178.702       204.605    
  50  0.963092     -0.376065E-01 -0.176484      0.176484       190.085       190.262    
  51  0.101802      -2.28472      -10.7220       10.7220       190.528       201.250    
  52  0.161305      -1.82446      -8.56203       8.56203       187.014       195.576    
  53  0.579295     -0.545944      -2.56207       2.56207       193.963       196.525    
  54  0.246178      -1.40170      -6.57807       6.57807       190.471       197.049    
  55  0.783155     -0.244425      -1.14706       1.14706       191.182       192.329    
  56  0.643375     -0.441028      -2.06971       2.06971       188.080       190.150    
  57  0.440007     -0.820964      -3.85271       3.85271       189.573       193.426    
  58  0.478097     -0.737941      -3.46309       3.46309       195.396       198.859    
  59  0.174252      -1.74725      -8.19970       8.19970       186.838       195.038    
  60  0.947266E-01  -2.35676      -11.0601       11.0601       196.014       207.074    
  61  0.115878      -2.15522      -10.1143       10.1143       196.829       206.943    
  62  0.523006     -0.648162      -3.04177       3.04177       190.639       193.681    
  63  0.114447      -2.16765      -10.1726       10.1726       184.667       194.839    
  64  0.694365     -0.364757      -1.71177       1.71177       196.077       197.788    
  65  0.551880     -0.594425      -2.78958       2.78958       196.339       199.128    
  66  0.558116     -0.583189      -2.73686       2.73686       201.853       204.590    
  67  0.160284      -1.83081      -8.59182       8.59182       198.628       207.220    
  68  0.786878     -0.239682      -1.12481       1.12481       177.322       178.447    
  69  0.450862     -0.796593      -3.73834       3.73834       203.345       207.084    
  70  0.857757     -0.153434     -0.720054      0.720054       189.767       190.487    
  71  0.789461     -0.236405      -1.10943       1.10943       210.053       211.163    
  72  0.507184     -0.678881      -3.18593       3.18593       204.537       207.723    
  73  0.853230     -0.158726     -0.744889      0.744889       193.387       194.132    
loop,thermsimp(1:2)       84   2.60726       13.3304    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    365        184.04          0.86          1.12         23.56          0.21          0.05         25.80
Just calling func    0   0         25.80


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    184.04
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    4.69291               433
loop is:       84
neval is:      364
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       84      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    75.0866      0.500000    
T0,tstep,tfreq (these do not change):             72
current SAtemp,tstepnext are:    4.69291               433
loop is:       85
neval is:      364


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      433
neval,tstepnext:      364     433

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.936701     -0.653915E-01 -0.306877      0.306877       176.192       176.499    
   2  0.765516     -0.267206      -1.25397       1.25397       174.847       176.101    
   3  0.899266     -0.106176     -0.498274      0.498274       176.338       176.837    
   4  0.953341     -0.477822E-01 -0.224238      0.224238       177.322       177.546    
   5  0.642356     -0.442612      -2.07714       2.07714       179.337       181.415    
   6  0.265713      -1.32534      -6.21971       6.21971       179.236       185.456    
   7  0.379937     -0.967749      -4.54156       4.54156       177.184       181.726    
   8  0.449606     -0.799384      -3.75144       3.75144       177.102       180.853    
   9  0.810725     -0.209826     -0.984697      0.984697       176.200       177.184    
  10  0.218977      -1.51879      -7.12755       7.12755       176.615       183.742    
  11  0.456613     -0.783919      -3.67886       3.67886       181.591       185.269    
  12  0.439289E-02  -5.42777      -25.4720       25.4720       182.994       208.466    
  13  0.710409     -0.341914      -1.60457       1.60457       183.173       184.777    
  14  0.385315     -0.953695      -4.47561       4.47561       183.049       187.524    
  15  0.116701      -2.14814      -10.0811       10.0811       184.949       195.030    
  16  0.985237     -0.148728E-01 -0.697965E-01  0.697965E-01   182.376       182.446    
  17  0.856588     -0.154798     -0.726452      0.726452       183.648       184.375    
  18  0.155419      -1.86163      -8.73646       8.73646       182.286       191.023    
  19  0.257525      -1.35664      -6.36659       6.36659       183.359       189.726    
  20  0.548716     -0.600174      -2.81657       2.81657       184.209       187.025    
  21  0.589698     -0.528145      -2.47854       2.47854       182.685       185.163    
  22  0.884364     -0.122887     -0.576696      0.576696       184.656       185.233    
  23  0.871018E-01  -2.44068      -11.4539       11.4539       183.432       194.886    
  24  0.486795     -0.719912      -3.37849       3.37849       176.444       179.822    
  25  0.161417      -1.82376      -8.55877       8.55877       186.718       195.277    
  26  0.598774     -0.512871      -2.40686       2.40686       181.367       183.774    
  27  0.483527     -0.726647      -3.41009       3.41009       180.202       183.612    
  28  0.715961     -0.334130      -1.56804       1.56804       183.150       184.718    
  29  0.771801     -0.259029      -1.21560       1.21560       174.461       175.677    
  30  0.458713     -0.779330      -3.65733       3.65733       181.694       185.352    
  31  0.235181      -1.44740      -6.79253       6.79253       186.979       193.772    
  32  0.488220     -0.716988      -3.36476       3.36476       182.339       185.703    
  33  0.365473      -1.00656      -4.72372       4.72372       188.019       192.742    
  34  0.191311      -1.65386      -7.76141       7.76141       186.996       194.757    
  35  0.484999     -0.723609      -3.39584       3.39584       188.080       191.476    
  36  0.799086     -0.224286      -1.05256       1.05256       190.085       191.138    
  37  0.811458     -0.208923     -0.980457      0.980457       189.767       190.748    
  38  0.829885E-01  -2.48905      -11.6809       11.6809       187.830       199.511    
  39  0.731085     -0.313226      -1.46994       1.46994       191.182       192.651    
  40  0.854012     -0.157810     -0.740586      0.740586       188.594       189.335    
  41  0.699629     -0.357205      -1.67633       1.67633       189.965       191.641    
  42  0.918965     -0.845069E-01 -0.396583      0.396583       182.391       182.788    
  43  0.463498     -0.768952      -3.60863       3.60863       189.573       193.182    
  44  0.758690E-01  -2.57875      -12.1018       12.1018       190.639       202.741    
  45  0.577757     -0.548602      -2.57454       2.57454       189.173       191.748    
  46  0.897332     -0.108329     -0.508379      0.508379       193.387       193.895    
  47  0.522547     -0.649040      -3.04589       3.04589       184.702       187.748    
  48  0.408730E-01  -3.19729      -15.0046       15.0046       190.284       205.289    
  49  0.244793      -1.40734      -6.60453       6.60453       183.479       190.083    
  50  0.503867     -0.685443      -3.21673       3.21673       183.048       186.265    
  51  0.268075      -1.31649      -6.17817       6.17817       184.667       190.845    
  52  0.502965     -0.687236      -3.22514       3.22514       186.838       190.064    
  53  0.204120      -1.58905      -7.45727       7.45727       187.739       195.197    
  54  0.815323     -0.204171     -0.958155      0.958155       187.014       187.972    
  55  0.197358      -1.62274      -7.61536       7.61536       190.026       197.642    
  56  0.754254     -0.282026      -1.32352       1.32352       190.440       191.763    
  57  0.693043E-01  -2.66925      -12.5266       12.5266       193.963       206.489    
  58  0.913327     -0.906616E-01 -0.425467      0.425467       186.834       187.259    
  59  0.921558     -0.816897E-01 -0.383363      0.383363       190.471       190.854    
  60  0.383396     -0.958686      -4.49903       4.49903       196.077       200.576    
  61  0.641735     -0.443580      -2.08168       2.08168       195.396       197.478    
  62  0.380707     -0.965725      -4.53206       4.53206       196.339       200.871    
  63  0.877180E-01  -2.43363      -11.4208       11.4208       181.200       192.621    
  64  0.768830     -0.262886      -1.23370       1.23370       190.528       191.762    
  65  0.998270     -0.173121E-02 -0.812441E-02  0.812441E-02   189.207       189.215    
  66  0.504375     -0.684435      -3.21199       3.21199       201.853       205.065    
  67  0.789522     -0.236327      -1.10906       1.10906       178.702       179.811    
  68  0.182758E-01  -4.00218      -18.7819       18.7819       196.829       215.610    
  69  0.828868     -0.187695     -0.880835      0.880835       196.014       196.895    
  70  0.147499      -1.91393      -8.98192       8.98192       203.345       212.327    
  71  0.928056     -0.746629E-01 -0.350387      0.350387       198.628       198.979    
  72  0.575315     -0.552838      -2.59442       2.59442       204.537       207.131    
  73  0.634329     -0.455188      -2.13616       2.13616       184.041       186.177    
loop,thermsimp(1:2)       85  0.306877       1.25397    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    366        194.25          0.86          1.12         23.46          0.32          0.05         25.82
Just calling func    0   0         25.82


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    194.25
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    4.69291               433
loop is:       85
neval is:      365
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       85      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    75.0866      0.500000    
T0,tstep,tfreq (these do not change):             72
current SAtemp,tstepnext are:    4.69291               433
loop is:       86
neval is:      365


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      433
neval,tstepnext:      365     433

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.334399      -1.09542      -5.14071       5.14071       174.461       179.602    
   2  0.140144      -1.96508      -9.22197       9.22197       174.847       184.069    
   3  0.520913     -0.652172      -3.06058       3.06058       176.192       179.253    
   4  0.628337     -0.464678      -2.18070       2.18070       176.338       178.519    
   5  0.203324      -1.59296      -7.47561       7.47561       176.200       183.675    
   6  0.481205     -0.731462      -3.43269       3.43269       177.322       180.755    
   7  0.948759     -0.526009E-01 -0.246851      0.246851       178.702       178.949    
   8  0.251825      -1.37902      -6.47162       6.47162       176.444       182.916    
   9  0.363806      -1.01114      -4.74517       4.74517       177.102       181.847    
  10  0.465077     -0.765552      -3.59267       3.59267       179.337       182.930    
  11  0.580920     -0.543143      -2.54892       2.54892       177.184       179.733    
  12  0.957129     -0.438167E-01 -0.205628      0.205628       182.376       182.581    
  13  0.345007      -1.06419      -4.99415       4.99415       182.391       187.386    
  14  0.177852E-01  -4.02939      -18.9096       18.9096       180.202       199.112    
  15  0.843779     -0.169864     -0.797158      0.797158       176.615       177.412    
  16  0.765452     -0.267288      -1.25436       1.25436       181.367       182.622    
  17  0.453925     -0.789824      -3.70657       3.70657       183.648       187.355    
  18  0.378234     -0.972243      -4.56265       4.56265       183.150       187.713    
  19  0.167312      -1.78790      -8.39044       8.39044       183.173       191.563    
  20  0.240345      -1.42568      -6.69058       6.69058       182.685       189.375    
  21  0.868226     -0.141303     -0.663124      0.663124       184.656       185.319    
  22  0.907002     -0.976102E-01 -0.458076      0.458076       181.591       182.049    
  23  0.433040     -0.836925      -3.92762       3.92762       181.694       185.622    
  24  0.291080      -1.23416      -5.79179       5.79179       179.236       185.028    
  25  0.391091     -0.938815      -4.40578       4.40578       182.339       186.744    
  26  0.541803     -0.612853      -2.87607       2.87607       184.041       186.917    
  27  0.494251     -0.704711      -3.30715       3.30715       183.048       186.355    
  28  0.617376     -0.482277      -2.26328       2.26328       184.209       186.472    
  29  0.919515     -0.839094E-01 -0.393780      0.393780       186.834       187.227    
  30  0.836216     -0.178868     -0.839413      0.839413       183.049       183.888    
  31  0.436173     -0.829716      -3.89379       3.89379       184.702       188.596    
  32  0.175211      -1.74176      -8.17394       8.17394       187.014       195.188    
  33  0.304297      -1.18975      -5.58340       5.58340       189.207       194.790    
  34  0.996125     -0.388259E-02 -0.182207E-01  0.182207E-01   188.594       188.612    
  35  0.146253      -1.92242      -9.02174       9.02174       183.359       192.381    
  36  0.110666      -2.20124      -10.3302       10.3302       186.838       197.169    
  37  0.481190E-01  -3.03408      -14.2387       14.2387       183.479       197.718    
  38  0.342728      -1.07082      -5.02525       5.02525       189.767       194.793    
  39  0.998409E-01  -2.30418      -10.8133       10.8133       184.667       195.480    
  40  0.509248     -0.674821      -3.16688       3.16688       190.471       193.637    
  41  0.974159     -0.261804E-01 -0.122863      0.122863       182.286       182.409    
  42  0.950347     -0.509279E-01 -0.239000      0.239000       190.085       190.324    
  43  0.333494      -1.09813      -5.15343       5.15343       188.080       193.234    
  44  0.914660     -0.892024E-01 -0.418619      0.418619       189.965       190.384    
  45  0.249678      -1.38758      -6.51181       6.51181       189.173       195.685    
  46  0.512508     -0.668440      -3.13693       3.13693       190.528       193.665    
  47  0.592185     -0.523937      -2.45879       2.45879       190.440       192.899    
  48  0.931089     -0.714008E-01 -0.335078      0.335078       181.200       181.535    
  49  0.638700     -0.448321      -2.10393       2.10393       191.182       193.285    
  50  0.563786     -0.573081      -2.68942       2.68942       188.019       190.708    
  51  0.136824      -1.98906      -9.33449       9.33449       189.573       198.907    
  52  0.806361     -0.215224      -1.01003       1.01003       186.979       187.990    
  53  0.106433      -2.24024      -10.5132       10.5132       193.387       203.900    
  54  0.637638     -0.449985      -2.11174       2.11174       186.996       189.107    
  55  0.677480     -0.389375      -1.82730       1.82730       183.432       185.259    
  56  0.533764     -0.627801      -2.94622       2.94622       184.949       187.895    
  57  0.879213     -0.128728     -0.604111      0.604111       187.739       188.343    
  58  0.260545E-01  -3.64756      -17.1177       17.1177       186.718       203.836    
  59  0.249338      -1.38895      -6.51821       6.51821       196.014       202.532    
  60  0.101288      -2.28979      -10.7458       10.7458       195.396       206.142    
  61  0.563390     -0.573782      -2.69271       2.69271       190.026       192.719    
  62  0.735149     -0.307682      -1.44393       1.44393       198.628       200.072    
  63  0.720819     -0.327367      -1.53630       1.53630       187.830       189.367    
  64  0.493868     -0.705487      -3.31079       3.31079       196.077       199.387    
  65  0.417909     -0.872492      -4.09453       4.09453       196.339       200.433    
  66  0.529854     -0.635153      -2.98072       2.98072       190.639       193.620    
  67  0.732047     -0.311910      -1.46377       1.46377       201.853       203.316    
  68  0.926465     -0.763785E-01 -0.358438      0.358438       190.284       190.643    
  69  0.948726     -0.526350E-01 -0.247012      0.247012       193.963       194.210    
  70  0.433699     -0.835404      -3.92048       3.92048       204.537       208.457    
  71  0.901840     -0.103319     -0.484865      0.484865       182.994       183.479    
  72  0.804136     -0.217987      -1.02300       1.02300       203.345       204.368    
  73  0.347489      -1.05702      -4.96052       4.96052       194.247       199.207    
loop,thermsimp(1:2)       86   5.14071       9.22197    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    367        188.62          0.86          1.12         23.46          0.25          0.04         25.73
Just calling func    0   0         25.74


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    188.62
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    4.69291               433
loop is:       86
neval is:      366
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       86      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    75.0866      0.500000    
T0,tstep,tfreq (these do not change):             72
current SAtemp,tstepnext are:    4.69291               433
loop is:       87
neval is:      366


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      433
neval,tstepnext:      366     433

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.447127E-01  -3.10750      -14.5832       14.5832       176.615       191.198    
   2  0.682805     -0.381545      -1.79056       1.79056       176.338       178.129    
   3  0.699780     -0.356989      -1.67532       1.67532       178.702       180.377    
   4  0.515086     -0.663422      -3.11338       3.11338       176.192       179.306    
   5  0.402461     -0.910157      -4.27129       4.27129       174.461       178.732    
   6  0.652803     -0.426480      -2.00144       2.00144       177.184       179.186    
   7  0.483213     -0.727297      -3.41314       3.41314       177.322       180.735    
   8  0.873684     -0.135037     -0.633716      0.633716       181.200       181.834    
   9  0.142648      -1.94738      -9.13888       9.13888       177.102       186.241    
  10  0.844357     -0.169180     -0.793949      0.793949       181.591       182.385    
  11  0.154187      -1.86959      -8.77381       8.77381       182.286       191.060    
  12  0.437314E-01  -3.12969      -14.6874       14.6874       182.376       197.063    
  13  0.455393E-02  -5.39176      -25.3031       25.3031       181.367       206.670    
  14  0.236800      -1.44054      -6.76033       6.76033       176.444       183.204    
  15  0.660181     -0.415241      -1.94869       1.94869       179.337       181.286    
  16  0.652586     -0.426813      -2.00299       2.00299       182.994       184.997    
  17  0.153101      -1.87666      -8.80700       8.80700       176.200       185.007    
  18  0.753412     -0.283143      -1.32876       1.32876       183.049       184.377    
  19  0.240839      -1.42363      -6.68095       6.68095       174.847       181.528    
  20  0.684622     -0.378888      -1.77809       1.77809       179.236       181.014    
  21  0.243018      -1.41462      -6.63869       6.63869       183.432       190.070    
  22  0.815539     -0.203906     -0.956913      0.956913       184.656       185.613    
  23  0.589355     -0.528726      -2.48127       2.48127       181.694       184.176    
  24  0.243009      -1.41466      -6.63886       6.63886       183.048       189.687    
  25  0.821886     -0.196154     -0.920535      0.920535       184.209       185.129    
  26  0.261401      -1.34170      -6.29649       6.29649       182.339       188.635    
  27  0.571134     -0.560131      -2.62865       2.62865       184.041       186.670    
  28  0.406429E-01  -3.20293      -15.0311       15.0311       186.834       201.865    
  29  0.341463      -1.07451      -5.04261       5.04261       183.648       188.691    
  30  0.252643      -1.37578      -6.45641       6.45641       182.391       188.848    
  31  0.503366     -0.686439      -3.22140       3.22140       183.150       186.371    
  32  0.247804      -1.39512      -6.54716       6.54716       184.949       191.496    
  33  0.902392     -0.102706     -0.481990      0.481990       186.979       187.461    
  34  0.198330E-01  -3.92041      -18.3981       18.3981       187.739       206.138    
  35  0.695627     -0.362942      -1.70325       1.70325       184.702       186.405    
  36  0.833441     -0.182192     -0.855013      0.855013       188.594       189.449    
  37  0.720954     -0.327181      -1.53543       1.53543       186.996       188.531    
  38  0.155604      -1.86044      -8.73089       8.73089       187.830       196.561    
  39  0.496580E-01  -3.00260      -14.0909       14.0909       182.685       196.776    
  40  0.804644     -0.217356      -1.02003       1.02003       190.085       191.105    
  41  0.329241      -1.11097      -5.21366       5.21366       189.965       195.179    
  42  0.889596     -0.116988     -0.549015      0.549015       190.284       190.833    
  43  0.857341     -0.153920     -0.722332      0.722332       188.019       188.741    
  44  0.238258      -1.43440      -6.73151       6.73151       183.173       189.904    
  45  0.998437     -0.156448E-02 -0.734196E-02  0.734196E-02   183.359       183.366    
  46  0.280889      -1.26979      -5.95904       5.95904       190.026       195.985    
  47  0.518450     -0.656912      -3.08283       3.08283       190.440       193.523    
  48  0.348786      -1.05330      -4.94303       4.94303       188.080       193.023    
  49  0.250207      -1.38547      -6.50188       6.50188       191.182       197.683    
  50  0.442136     -0.816138      -3.83006       3.83006       190.639       194.469    
  51  0.881002     -0.126696     -0.594572      0.594572       190.471       191.065    
  52  0.903963     -0.100967     -0.473829      0.473829       190.528       191.002    
  53  0.227541      -1.48043      -6.94751       6.94751       193.963       200.910    
  54  0.468734     -0.757719      -3.55591       3.55591       189.207       192.763    
  55  0.622565E-01  -2.77649      -13.0298       13.0298       189.767       202.797    
  56  0.650607     -0.429850      -2.01725       2.01725       187.014       189.032    
  57  0.947139     -0.543094E-01 -0.254869      0.254869       184.667       184.922    
  58  0.942852     -0.588460E-01 -0.276159      0.276159       189.173       189.449    
  59  0.204603      -1.58668      -7.44616       7.44616       186.838       194.285    
  60  0.781809     -0.246145      -1.15514       1.15514       183.479       184.634    
  61  0.543108     -0.610447      -2.86477       2.86477       189.573       192.438    
  62  0.199157E-02  -6.21883      -29.1844       29.1844       180.202       209.386    
  63  0.867255     -0.142422     -0.668376      0.668376       194.247       194.915    
  64  0.846580     -0.166550     -0.781606      0.781606       196.077       196.858    
  65  0.267681      -1.31796      -6.18506       6.18506       198.628       204.814    
  66  0.656550E-01  -2.72334      -12.7804       12.7804       196.339       209.119    
  67  0.914706     -0.891526E-01 -0.418385      0.418385       196.014       196.432    
  68  0.177217      -1.73038      -8.12052       8.12052       201.853       209.973    
  69  0.973717     -0.266348E-01 -0.124995      0.124995       186.718       186.843    
  70  0.329699E-01  -3.41216      -16.0130       16.0130       193.387       209.400    
  71  0.242441E-01  -3.71958      -17.4557       17.4557       203.345       220.801    
  72  0.884493     -0.122740     -0.576009      0.576009       195.396       195.972    
  73  0.927939     -0.747892E-01 -0.350979      0.350979       188.619       188.970    
loop,thermsimp(1:2)       87   14.5832       1.79056    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    368        179.23          0.86          1.12         23.51          0.21          0.05         25.75
Just calling func    0   0         25.76


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    179.23
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    4.69291               433
loop is:       87
neval is:      367
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       87      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    75.0866      0.500000    
T0,tstep,tfreq (these do not change):             72
current SAtemp,tstepnext are:    4.69291               433
loop is:       88
neval is:      367


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      433
neval,tstepnext:      367     433

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.471068     -0.752752      -3.53260       3.53260       176.338       179.871    
   2  0.531040     -0.632917      -2.97022       2.97022       174.461       177.431    
   3  0.592986E-01  -2.82517      -13.2583       13.2583       177.184       190.443    
   4  0.247694      -1.39556      -6.54926       6.54926       176.192       182.742    
   5  0.131832      -2.02623      -9.50891       9.50891       178.702       188.211    
   6  0.928797E-01  -2.37645      -11.1525       11.1525       177.322       188.474    
   7  0.638590     -0.448492      -2.10474       2.10474       179.236       181.341    
   8  0.220145      -1.51347      -7.10259       7.10259       179.337       186.440    
   9  0.764323     -0.268765      -1.26129       1.26129       174.847       176.108    
  10  0.223429      -1.49866      -7.03308       7.03308       181.200       188.233    
  11  0.705665     -0.348615      -1.63602       1.63602       181.591       183.227    
  12  0.812667     -0.207434     -0.973471      0.973471       176.444       177.417    
  13  0.344167      -1.06663      -5.00560       5.00560       183.359       188.365    
  14  0.691720     -0.368573      -1.72968       1.72968       181.694       183.424    
  15  0.601584     -0.508189      -2.38489       2.38489       183.049       185.434    
  16  0.323598      -1.12825      -5.29479       5.29479       183.479       188.774    
  17  0.536181     -0.623284      -2.92502       2.92502       184.667       187.592    
  18  0.224445      -1.49412      -7.01179       7.01179       182.994       190.006    
  19  0.967837     -0.326916E-01 -0.153419      0.153419       176.200       176.353    
  20  0.982234     -0.179257E-01 -0.841239E-01  0.841239E-01   184.209       184.293    
  21  0.656459     -0.420894      -1.97522       1.97522       184.656       186.631    
  22  0.138036      -1.98024      -9.29309       9.29309       177.102       186.395    
  23  0.698821     -0.358360      -1.68175       1.68175       183.150       184.832    
  24  0.603237     -0.505446      -2.37201       2.37201       184.702       187.074    
  25  0.253585      -1.37205      -6.43893       6.43893       184.041       190.480    
  26  0.404885     -0.904153      -4.24311       4.24311       186.718       190.961    
  27  0.802083     -0.220543      -1.03499       1.03499       186.979       188.014    
  28  0.756447     -0.279123      -1.30990       1.30990       186.996       188.305    
  29  0.390929     -0.939231      -4.40773       4.40773       182.339       186.746    
  30  0.260757      -1.34417      -6.30806       6.30806       183.648       189.956    
  31  0.177681      -1.72776      -8.10825       8.10825       188.019       196.127    
  32  0.806362     -0.215223      -1.01002       1.01002       182.391       183.401    
  33  0.222380      -1.50337      -7.05516       7.05516       188.619       195.674    
  34  0.969986     -0.304736E-01 -0.143010      0.143010       187.014       187.157    
  35  0.417166     -0.874272      -4.10288       4.10288       188.594       192.697    
  36  0.212672      -1.54800      -7.26465       7.26465       189.173       196.438    
  37  0.141187      -1.95767      -9.18717       9.18717       183.048       192.236    
  38  0.750343     -0.287224      -1.34792       1.34792       183.173       184.521    
  39  0.628172     -0.464941      -2.18193       2.18193       183.432       185.614    
  40  0.466629     -0.762221      -3.57704       3.57704       190.284       193.861    
  41  0.120425      -2.11672      -9.93360       9.93360       190.528       200.462    
  42  0.179567      -1.71721      -8.05872       8.05872       182.286       190.345    
  43  0.209268      -1.56414      -7.34037       7.34037       190.471       197.811    
  44  0.730304E-01  -2.61688      -12.2808       12.2808       190.085       202.366    
  45  0.985392     -0.147157E-01 -0.690596E-01  0.690596E-01   176.615       176.684    
  46  0.726759E-01  -2.62175      -12.3036       12.3036       184.949       197.252    
  47  0.205943      -1.58016      -7.41554       7.41554       189.573       196.988    
  48  0.198791      -1.61550      -7.58141       7.58141       189.207       196.788    
  49  0.320500      -1.13787      -5.33995       5.33995       188.080       193.420    
  50  0.911267     -0.929191E-01 -0.436061      0.436061       190.440       190.876    
  51  0.153842      -1.87183      -8.78435       8.78435       186.838       195.623    
  52  0.152265      -1.88213      -8.83268       8.83268       190.639       199.472    
  53  0.396303     -0.925575      -4.34364       4.34364       194.247       198.590    
  54  0.964537     -0.361075E-01 -0.169449      0.169449       189.965       190.134    
  55  0.259986      -1.34713      -6.32194       6.32194       195.396       201.718    
  56  0.710828     -0.341325      -1.60181       1.60181       190.026       191.628    
  57  0.189878E-01  -3.96396      -18.6025       18.6025       196.014       214.616    
  58  0.960744     -0.400468E-01 -0.187936      0.187936       187.830       188.018    
  59  0.514017     -0.665499      -3.12313       3.12313       182.685       185.808    
  60  0.507688     -0.677888      -3.18127       3.18127       196.077       199.258    
  61  0.915765     -0.879957E-01 -0.412956      0.412956       182.376       182.789    
  62  0.648043     -0.433798      -2.03578       2.03578       191.182       193.217    
  63  0.395249     -0.928240      -4.35615       4.35615       193.963       198.319    
  64  0.604600     -0.503188      -2.36142       2.36142       186.834       189.195    
  65  0.348789      -1.05329      -4.94298       4.94298       189.767       194.710    
  66  0.497548     -0.698064      -3.27595       3.27595       198.628       201.904    
  67  0.240711E-01  -3.72675      -17.4893       17.4893       187.739       205.229    
  68  0.745753     -0.293361      -1.37672       1.37672       181.367       182.744    
  69  0.195047      -1.63452      -7.67065       7.67065       196.339       204.009    
  70  0.792585     -0.232456      -1.09090       1.09090       180.202       181.293    
  71  0.411313     -0.888400      -4.16919       4.16919       193.387       197.556    
  72  0.574995     -0.553393      -2.59703       2.59703       201.853       204.450    
  73  0.631639     -0.459437      -2.15610       2.15610       179.231       181.387    
loop,thermsimp(1:2)       88   3.53260       2.97022    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    369        190.56          0.86          1.13         23.47          0.25          0.04         25.76
Just calling func    0   0         25.76


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    190.56
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    4.69291               433
loop is:       88
neval is:      368
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       88      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    75.0866      0.500000    
T0,tstep,tfreq (these do not change):             72
current SAtemp,tstepnext are:    4.69291               433
loop is:       89
neval is:      368


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      433
neval,tstepnext:      368     433

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.350369      -1.04877      -4.92178       4.92178       174.847       179.769    
   2  0.650675     -0.429745      -2.01676       2.01676       176.200       178.216    
   3  0.849247     -0.163405     -0.766847      0.766847       176.615       177.382    
   4  0.910703     -0.935381E-01 -0.438966      0.438966       176.444       176.883    
   5  0.188892      -1.66658      -7.82110       7.82110       174.461       182.282    
   6  0.256564      -1.36038      -6.38413       6.38413       176.338       182.722    
   7  0.465488E-01  -3.06725      -14.3944       14.3944       180.202       194.596    
   8  0.824855     -0.192548     -0.903612      0.903612       179.236       180.140    
   9  0.730565     -0.313937      -1.47328       1.47328       179.231       180.704    
  10  0.888077     -0.118697     -0.557034      0.557034       176.192       176.749    
  11  0.898172     -0.107394     -0.503991      0.503991       181.367       181.871    
  12  0.314974      -1.15527      -5.42156       5.42156       182.376       187.797    
  13  0.247979      -1.39441      -6.54385       6.54385       181.591       188.134    
  14  0.330032E-01  -3.41115      -16.0082       16.0082       182.391       198.400    
  15  0.570783E-01  -2.86333      -13.4374       13.4374       181.694       195.132    
  16  0.694187     -0.365014      -1.71298       1.71298       184.209       185.922    
  17  0.314834      -1.15571      -5.42364       5.42364       183.173       188.596    
  18  0.917621     -0.859711E-01 -0.403455      0.403455       183.150       183.554    
  19  0.613858     -0.487991      -2.29010       2.29010       183.049       185.339    
  20  0.744084E-01  -2.59819      -12.1931       12.1931       183.432       195.625    
  21  0.454198     -0.789221      -3.70375       3.70375       182.685       186.388    
  22  0.118203E-01  -4.43793      -20.8268       20.8268       177.102       197.929    
  23  0.746996     -0.291695      -1.36890       1.36890       179.337       180.706    
  24  0.416160     -0.876686      -4.11421       4.11421       184.656       188.770    
  25  0.339178E-01  -3.38381      -15.8799       15.8799       182.339       198.219    
  26  0.824080     -0.193487     -0.908018      0.908018       184.702       185.610    
  27  0.589652     -0.528223      -2.47891       2.47891       187.014       189.493    
  28  0.680293     -0.385231      -1.80786       1.80786       184.667       186.475    
  29  0.864872E-01  -2.44776      -11.4871       11.4871       186.979       198.467    
  30  0.672988     -0.396027      -1.85852       1.85852       187.830       189.689    
  31  0.797049E-01  -2.52942      -11.8704       11.8704       178.702       190.572    
  32  0.831708     -0.184273     -0.864779      0.864779       181.200       182.065    
  33  0.280253E-01  -3.57465      -16.7755       16.7755       186.996       203.771    
  34  0.131717      -2.02710      -9.51300       9.51300       183.359       192.872    
  35  0.343675      -1.06806      -5.01231       5.01231       177.322       182.334    
  36  0.280745      -1.27031      -5.96146       5.96146       183.479       189.440    
  37  0.322275      -1.13235      -5.31402       5.31402       186.834       192.148    
  38  0.769830E-01  -2.56417      -12.0334       12.0334       183.648       195.682    
  39  0.851798     -0.160406     -0.752769      0.752769       182.994       183.747    
  40  0.864683     -0.145392     -0.682311      0.682311       189.965       190.647    
  41  0.157880      -1.84592      -8.66274       8.66274       182.286       190.949    
  42  0.371895     -0.989143      -4.64196       4.64196       177.184       181.826    
  43  0.861425     -0.149167     -0.700029      0.700029       184.041       184.741    
  44  0.778275E-01  -2.55326      -11.9822       11.9822       190.440       202.422    
  45  0.450106     -0.798272      -3.74622       3.74622       186.718       190.464    
  46  0.188928      -1.66639      -7.82023       7.82023       190.026       197.846    
  47  0.225391      -1.48992      -6.99206       6.99206       183.048       190.040    
  48  0.814689     -0.204949     -0.961806      0.961806       188.594       189.556    
  49  0.556109     -0.586791      -2.75376       2.75376       191.182       193.935    
  50  0.860351     -0.150415     -0.705886      0.705886       188.080       188.786    
  51  0.124594      -2.08269      -9.77389       9.77389       190.284       200.058    
  52  0.924630     -0.783615E-01 -0.367744      0.367744       189.767       190.135    
  53  0.463685     -0.768549      -3.60674       3.60674       186.838       190.445    
  54  0.719654     -0.328985      -1.54390       1.54390       188.619       190.163    
  55  0.740445     -0.300503      -1.41024       1.41024       188.019       189.429    
  56  0.948188     -0.532020E-01 -0.249673      0.249673       189.173       189.423    
  57  0.174315      -1.74689      -8.19801       8.19801       189.207       197.405    
  58  0.436138     -0.829795      -3.89416       3.89416       189.573       193.467    
  59  0.442627     -0.815027      -3.82485       3.82485       184.949       188.773    
  60  0.781531     -0.246500      -1.15680       1.15680       193.387       194.544    
  61  0.233219E-01  -3.75836      -17.6377       17.6377       190.471       208.108    
  62  0.529855     -0.635152      -2.98071       2.98071       193.963       196.944    
  63  0.415693     -0.877807      -4.11947       4.11947       194.247       198.366    
  64  0.655864     -0.421801      -1.97948       1.97948       196.077       198.056    
  65  0.932327     -0.700720E-01 -0.328842      0.328842       190.639       190.968    
  66  0.570322     -0.561554      -2.63532       2.63532       190.528       193.164    
  67  0.969693     -0.307757E-01 -0.144428      0.144428       195.396       195.541    
  68  0.707842     -0.345534      -1.62156       1.62156       198.628       200.250    
  69  0.971476E-01  -2.33152      -10.9416       10.9416       190.085       201.027    
  70  0.807879     -0.213342      -1.00120       1.00120       196.339       197.340    
  71  0.261134      -1.34272      -6.30128       6.30128       201.853       208.154    
  72  0.395767     -0.926929      -4.35000       4.35000       187.739       192.089    
  73  0.641665     -0.443688      -2.08219       2.08219       190.560       192.642    
loop,thermsimp(1:2)       89   4.92178       2.01676    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    370        193.29          0.86          1.12         23.61          0.19          0.04         25.82
Just calling func    0   0         25.82


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    193.29
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    4.69291               433
loop is:       89
neval is:      369
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       89      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    75.0866      0.500000    
T0,tstep,tfreq (these do not change):             72
current SAtemp,tstepnext are:    4.69291               433
loop is:       90
neval is:      369


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      433
neval,tstepnext:      369     433

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.131617      -2.02786      -9.51655       9.51655       176.192       185.709    
   2  0.314760      -1.15594      -5.42475       5.42475       176.444       181.869    
   3  0.748375     -0.289851      -1.36025       1.36025       176.615       177.975    
   4  0.632472     -0.458119      -2.14991       2.14991       176.200       178.349    
   5  0.677472     -0.389387      -1.82736       1.82736       174.847       176.674    
   6  0.433475     -0.835921      -3.92290       3.92290       179.236       183.159    
   7  0.458976     -0.778758      -3.65464       3.65464       179.231       182.885    
   8  0.411427E-02  -5.49329      -25.7796       25.7796       179.337       205.117    
   9  0.904989     -0.998322E-01 -0.468504      0.468504       177.184       177.653    
  10  0.480311     -0.733322      -3.44141       3.44141       181.367       184.809    
  11  0.277870      -1.28060      -6.00975       6.00975       181.200       187.210    
  12  0.958372     -0.425196E-01 -0.199541      0.199541       174.461       174.661    
  13  0.321639      -1.13432      -5.32328       5.32328       177.322       182.645    
  14  0.562333     -0.575660      -2.70152       2.70152       176.338       179.040    
  15  0.665565     -0.407119      -1.91057       1.91057       183.150       185.061    
  16  0.307614      -1.17891      -5.53252       5.53252       182.994       188.527    
  17  0.504790E-01  -2.98620      -14.0140       14.0140       184.041       198.055    
  18  0.361959      -1.01622      -4.76905       4.76905       183.049       187.818    
  19  0.470787     -0.753350      -3.53541       3.53541       184.702       188.238    
  20  0.312221      -1.16404      -5.46275       5.46275       184.209       189.671    
  21  0.156792      -1.85283      -8.69519       8.69519       182.685       191.380    
  22  0.445216     -0.809196      -3.79749       3.79749       184.667       188.464    
  23  0.999492     -0.508321E-03 -0.238551E-02  0.238551E-02   182.376       182.378    
  24  0.167067      -1.78936      -8.39731       8.39731       181.591       189.988    
  25  0.435083     -0.832219      -3.90553       3.90553       183.173       187.078    
  26  0.110403      -2.20362      -10.3414       10.3414       184.656       194.997    
  27  0.704194     -0.350701      -1.64581       1.64581       184.949       186.594    
  28  0.767816     -0.264205      -1.23989       1.23989       188.080       189.320    
  29  0.231293      -1.46407      -6.87075       6.87075       189.173       196.044    
  30  0.965513     -0.350953E-01 -0.164699      0.164699       188.019       188.183    
  31  0.674440     -0.393873      -1.84841       1.84841       183.479       185.327    
  32  0.248626      -1.39181      -6.53163       6.53163       187.014       193.546    
  33  0.461218     -0.773884      -3.63177       3.63177       188.594       192.226    
  34  0.778910     -0.249859      -1.17257       1.17257       187.830       189.003    
  35  0.665530     -0.407172      -1.91082       1.91082       183.048       184.959    
  36  0.383296     -0.958947      -4.50025       4.50025       189.767       194.268    
  37  0.492311     -0.708645      -3.32561       3.32561       188.619       191.944    
  38  0.631911     -0.459006      -2.15408       2.15408       186.838       188.993    
  39  0.150454E-01  -4.19668      -19.6947       19.6947       186.718       206.413    
  40  0.958677     -0.422006E-01 -0.198044      0.198044       178.702       178.900    
  41  0.411899     -0.886977      -4.16251       4.16251       189.965       194.127    
  42  0.466999     -0.761428      -3.57331       3.57331       182.286       185.860    
  43  0.622674     -0.473731      -2.22318       2.22318       190.639       192.862    
  44  0.497710     -0.697737      -3.27442       3.27442       187.739       191.014    
  45  0.763352E-01  -2.57262      -12.0731       12.0731       186.834       198.907    
  46  0.192360      -1.64839      -7.73573       7.73573       190.560       198.295    
  47  0.444368     -0.811101      -3.80643       3.80643       183.359       187.166    
  48  0.617268     -0.482452      -2.26411       2.26411       190.528       192.792    
  49  0.898554     -0.106968     -0.501992      0.501992       189.573       190.075    
  50  0.382850     -0.960111      -4.50572       4.50572       191.182       195.687    
  51  0.769319     -0.262250      -1.23071       1.23071       193.387       194.617    
  52  0.356805      -1.03057      -4.83636       4.83636       180.202       185.038    
  53  0.159449E-01  -4.13862      -19.4222       19.4222       181.694       201.116    
  54  0.879661     -0.128218     -0.601718      0.601718       195.396       195.998    
  55  0.413677     -0.882671      -4.14230       4.14230       183.432       187.574    
  56  0.332125      -1.10224      -5.17274       5.17274       183.648       188.821    
  57  0.963873     -0.367956E-01 -0.172679      0.172679       193.963       194.136    
  58  0.440660     -0.819481      -3.84575       3.84575       196.339       200.185    
  59  0.968287     -0.322271E-01 -0.151239      0.151239       189.207       189.358    
  60  0.174603      -1.74524      -8.19026       8.19026       190.026       198.216    
  61  0.915676E-01  -2.39068      -11.2192       11.2192       177.102       188.321    
  62  0.882563     -0.124926     -0.586265      0.586265       196.077       196.663    
  63  0.504296     -0.684592      -3.21273       3.21273       182.339       185.551    
  64  0.877119     -0.131112     -0.615297      0.615297       194.247       194.862    
  65  0.703997     -0.350981      -1.64712       1.64712       182.391       184.038    
  66  0.349323      -1.05176      -4.93581       4.93581       186.979       191.915    
  67  0.417707     -0.872976      -4.09680       4.09680       190.284       194.381    
  68  0.442862E-01  -3.11708      -14.6282       14.6282       198.628       213.257    
  69  0.135627      -1.99785      -9.37573       9.37573       190.085       199.461    
  70  0.684853     -0.378551      -1.77651       1.77651       190.440       192.216    
  71  0.191848      -1.65105      -7.74825       7.74825       186.996       194.744    
  72  0.273174      -1.29765      -6.08974       6.08974       190.471       196.560    
  73  0.153744      -1.87246      -8.78731       8.78731       193.292       202.080    
loop,thermsimp(1:2)       90   9.51655       5.42475    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    371        189.02          0.87          1.12         23.46          0.28          0.05         25.79
Just calling func    0   0         25.78


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    189.02
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    4.69291               433
loop is:       90
neval is:      370
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       90      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    75.0866      0.500000    
T0,tstep,tfreq (these do not change):             72
current SAtemp,tstepnext are:    4.69291               433
loop is:       91
neval is:      370


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      433
neval,tstepnext:      370     433

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.920377     -0.829717E-01 -0.389379      0.389379       174.461       174.850    
   2  0.393393     -0.932946      -4.37823       4.37823       174.847       179.225    
   3  0.317218      -1.14817      -5.38825       5.38825       177.184       182.573    
   4  0.324247      -1.12625      -5.28539       5.28539       176.615       181.900    
   5  0.515746E-01  -2.96473      -13.9132       13.9132       176.200       190.113    
   6  0.143224      -1.94335      -9.11995       9.11995       178.702       187.822    
   7  0.512136     -0.669164      -3.14033       3.14033       176.338       179.479    
   8  0.993896     -0.612239E-02 -0.287318E-01  0.287318E-01   176.444       176.473    
   9  0.440900     -0.818937      -3.84320       3.84320       182.376       186.219    
  10  0.861233     -0.149390     -0.701076      0.701076       177.322       178.023    
  11  0.690005     -0.371056      -1.74134       1.74134       179.231       180.972    
  12  0.192792      -1.64614      -7.72520       7.72520       179.236       186.961    
  13  0.975175     -0.251388E-01 -0.117974      0.117974       182.391       182.509    
  14  0.595327E-01  -2.82123      -13.2398       13.2398       181.367       194.607    
  15  0.142661      -1.94729      -9.13844       9.13844       183.048       192.187    
  16  0.141610      -1.95468      -9.17312       9.17312       180.202       189.375    
  17  0.976591     -0.236872E-01 -0.111162      0.111162       183.150       183.261    
  18  0.894748     -0.111213     -0.521915      0.521915       183.479       184.001    
  19  0.747310     -0.291275      -1.36693       1.36693       182.339       183.706    
  20  0.434887     -0.832670      -3.90765       3.90765       176.192       180.100    
  21  0.673581     -0.395146      -1.85439       1.85439       182.286       184.141    
  22  0.624944     -0.470094      -2.20611       2.20611       184.949       187.155    
  23  0.617967     -0.481321      -2.25880       2.25880       183.173       185.432    
  24  0.659853     -0.415739      -1.95102       1.95102       183.359       185.310    
  25  0.963159E-01  -2.34012      -10.9820       10.9820       181.200       192.182    
  26  0.179190      -1.71931      -8.06856       8.06856       183.432       191.500    
  27  0.251042      -1.38213      -6.48623       6.48623       183.049       189.535    
  28  0.116711      -2.14806      -10.0807       10.0807       188.019       198.099    
  29  0.890376     -0.116112     -0.544902      0.544902       184.702       185.247    
  30  0.880065E-02  -4.73293      -22.2112       22.2112       177.102       199.313    
  31  0.613810     -0.488070      -2.29047       2.29047       184.667       186.957    
  32  0.960436E-01  -2.34295      -10.9953       10.9953       182.994       193.990    
  33  0.768907E-02  -4.86796      -22.8449       22.8449       183.648       206.493    
  34  0.316163      -1.15150      -5.40387       5.40387       186.838       192.242    
  35  0.195769      -1.63082      -7.65328       7.65328       187.830       195.484    
  36  0.813020     -0.207000     -0.971431      0.971431       188.080       189.052    
  37  0.578245     -0.547758      -2.57058       2.57058       189.207       191.777    
  38  0.711511     -0.340365      -1.59730       1.59730       184.209       185.806    
  39  0.565886     -0.569362      -2.67197       2.67197       181.591       184.263    
  40  0.874556     -0.134039     -0.629033      0.629033       189.573       190.202    
  41  0.335685      -1.09158      -5.12269       5.12269       187.739       192.862    
  42  0.861776     -0.148759     -0.698115      0.698115       182.685       183.383    
  43  0.634500     -0.454918      -2.13489       2.13489       186.979       189.114    
  44  0.211879      -1.55174      -7.28218       7.28218       188.619       195.901    
  45  0.789454     -0.236414      -1.10947       1.10947       190.440       191.549    
  46  0.726316E-01  -2.62235      -12.3065       12.3065       188.594       200.901    
  47  0.344022      -1.06705      -5.00758       5.00758       190.528       195.536    
  48  0.367544      -1.00091      -4.69719       4.69719       190.639       195.336    
  49  0.634223     -0.455355      -2.13694       2.13694       187.014       189.151    
  50  0.462643     -0.770799      -3.61729       3.61729       189.965       193.582    
  51  0.904061     -0.100859     -0.473321      0.473321       193.963       194.436    
  52  0.183754      -1.69416      -7.95053       7.95053       189.767       197.718    
  53  0.214369      -1.54005      -7.22734       7.22734       190.284       197.512    
  54  0.515075     -0.663442      -3.11348       3.11348       193.387       196.500    
  55  0.173268      -1.75291      -8.22627       8.22627       186.996       195.222    
  56  0.788225     -0.237971      -1.11678       1.11678       194.247       195.364    
  57  0.657874     -0.418741      -1.96512       1.96512       184.656       186.621    
  58  0.262790      -1.33640      -6.27160       6.27160       191.182       197.453    
  59  0.806843     -0.214626      -1.00722       1.00722       195.396       196.403    
  60  0.121073      -2.11136      -9.90844       9.90844       189.173       199.082    
  61  0.928422     -0.742690E-01 -0.348538      0.348538       190.471       190.819    
  62  0.971911     -0.284914E-01 -0.133708      0.133708       196.077       196.210    
  63  0.167455      -1.78704      -8.38642       8.38642       184.041       192.428    
  64  0.280629E-01  -3.57331      -16.7692       16.7692       190.026       206.795    
  65  0.668523E-01  -2.70527      -12.6956       12.6956       190.560       203.255    
  66  0.714939     -0.335559      -1.57475       1.57475       186.834       188.408    
  67  0.990226     -0.982180E-02 -0.460928E-01  0.460928E-01   190.085       190.131    
  68  0.229020      -1.47395      -6.91710       6.91710       196.339       203.256    
  69  0.130543      -2.03605      -9.55500       9.55500       181.694       191.249    
  70  0.520653     -0.652672      -3.06293       3.06293       193.292       196.355    
  71  0.338340      -1.08370      -5.08573       5.08573       179.337       184.423    
  72  0.518446     -0.656920      -3.08287       3.08287       186.718       189.801    
  73  0.307066      -1.18069      -5.54088       5.54088       189.022       194.563    
loop,thermsimp(1:2)       91  0.389379       4.37823    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    372        181.17          0.86          1.12         23.62          0.15          0.05         25.81
Just calling func    0   0         25.81


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    373        227.71          0.86          1.13         23.85          0.08          0.05         25.97
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    181.17
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    4.69291               433
loop is:       91
neval is:      372
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       91      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    75.0866      0.500000    
T0,tstep,tfreq (these do not change):             72
current SAtemp,tstepnext are:    4.69291               433
loop is:       92
neval is:      372


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      433
neval,tstepnext:      372     433

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.313932      -1.15858      -5.43710       5.43710       174.461       179.898    
   2  0.484866     -0.723883      -3.39712       3.39712       176.444       179.841    
   3  0.743257     -0.296713      -1.39245       1.39245       177.322       178.714    
   4  0.476659     -0.740953      -3.47723       3.47723       174.847       178.324    
   5  0.895662E-01  -2.41278      -11.3230       11.3230       176.338       187.661    
   6  0.100541      -2.29719      -10.7805       10.7805       176.192       186.973    
   7  0.394309     -0.930621      -4.36732       4.36732       179.231       183.598    
   8  0.856201     -0.155250     -0.728574      0.728574       176.615       177.343    
   9  0.903325     -0.101673     -0.477143      0.477143       182.391       182.869    
  10  0.849389     -0.163238     -0.766061      0.766061       177.184       177.951    
  11  0.245876      -1.40293      -6.58383       6.58383       183.150       189.734    
  12  0.535664     -0.624247      -2.92954       2.92954       182.685       185.614    
  13  0.509317     -0.674685      -3.16624       3.16624       182.339       185.505    
  14  0.103141      -2.27166      -10.6607       10.6607       183.479       194.140    
  15  0.822327     -0.195617     -0.918013      0.918013       182.286       183.204    
  16  0.293454      -1.22603      -5.75367       5.75367       181.591       187.344    
  17  0.610098E-01  -2.79672      -13.1248       13.1248       179.337       192.462    
  18  0.467864E-01  -3.06216      -14.3705       14.3705       184.702       199.073    
  19  0.888641     -0.118062     -0.554053      0.554053       183.359       183.913    
  20  0.371769     -0.989482      -4.64355       4.64355       183.173       187.816    
  21  0.770202     -0.261103      -1.22533       1.22533       184.209       185.434    
  22  0.752967E-01  -2.58632      -12.1374       12.1374       182.376       194.513    
  23  0.787365E-01  -2.54165      -11.9277       11.9277       184.656       196.584    
  24  0.516026     -0.661597      -3.10482       3.10482       184.667       187.771    
  25  0.133613      -2.01281      -9.44594       9.44594       179.236       188.682    
  26  0.705575     -0.348742      -1.63662       1.63662       184.949       186.585    
  27  0.747326     -0.291254      -1.36683       1.36683       178.702       180.069    
  28  0.941066E-01  -2.36333      -11.0909       11.0909       186.834       197.925    
  29  0.243001      -1.41469      -6.63901       6.63901       188.080       194.719    
  30  0.186020      -1.68190      -7.89301       7.89301       186.979       194.872    
  31  0.707073     -0.346621      -1.62666       1.62666       187.014       188.641    
  32  0.820399     -0.197964     -0.929028      0.929028       180.202       181.131    
  33  0.169787E-01  -4.07580      -19.1274       19.1274       183.049       202.176    
  34  0.196118      -1.62904      -7.64494       7.64494       186.718       194.363    
  35  0.910420E-01  -2.39643      -11.2463       11.2463       176.200       187.446    
  36  0.101963      -2.28314      -10.7146       10.7146       190.085       200.800    
  37  0.816143     -0.203166     -0.953438      0.953438       189.573       190.526    
  38  0.921931     -0.812847E-01 -0.381462      0.381462       190.471       190.852    
  39  0.867385     -0.142273     -0.667673      0.667673       181.694       182.362    
  40  0.534867     -0.625737      -2.93653       2.93653       183.432       186.368    
  41  0.354961      -1.03575      -4.86068       4.86068       190.440       195.301    
  42  0.707205     -0.346435      -1.62579       1.62579       189.207       190.832    
  43  0.341296      -1.07501      -5.04491       5.04491       181.200       186.245    
  44  0.615332     -0.485594      -2.27885       2.27885       183.048       185.327    
  45  0.100325      -2.29934      -10.7906       10.7906       186.838       197.629    
  46  0.218012      -1.52321      -7.14827       7.14827       184.041       191.189    
  47  0.346044      -1.06119      -4.98007       4.98007       187.739       192.719    
  48  0.313706      -1.15930      -5.44049       5.44049       189.965       195.405    
  49  0.884226     -0.123043     -0.577429      0.577429       182.994       183.572    
  50  0.562231     -0.575842      -2.70238       2.70238       193.963       196.665    
  51  0.208749      -1.56662      -7.35202       7.35202       189.022       196.374    
  52  0.553752     -0.591038      -2.77369       2.77369       181.367       184.141    
  53  0.389358     -0.943257      -4.42662       4.42662       186.996       191.422    
  54  0.290822      -1.23504      -5.79595       5.79595       190.639       196.435    
  55  0.592574     -0.523280      -2.45571       2.45571       194.247       196.702    
  56  0.816972     -0.202151     -0.948675      0.948675       187.830       188.779    
  57  0.674491     -0.393797      -1.84805       1.84805       190.528       192.376    
  58  0.136892      -1.98856      -9.33216       9.33216       188.619       197.951    
  59  0.783273     -0.244273      -1.14635       1.14635       196.077       197.223    
  60  0.896165     -0.109631     -0.514487      0.514487       193.292       193.807    
  61  0.268163      -1.31616      -6.17663       6.17663       195.396       201.573    
  62  0.773898     -0.256315      -1.20286       1.20286       193.387       194.590    
  63  0.929489     -0.731207E-01 -0.343149      0.343149       191.182       191.525    
  64  0.588680     -0.529872      -2.48664       2.48664       190.284       192.771    
  65  0.234390      -1.45077      -6.80832       6.80832       189.767       196.576    
  66  0.471928     -0.750929      -3.52405       3.52405       188.019       191.543    
  67  0.487657     -0.718143      -3.37018       3.37018       189.173       192.543    
  68  0.669180     -0.401702      -1.88515       1.88515       177.102       178.987    
  69  0.781256     -0.246852      -1.15846       1.15846       188.594       189.753    
  70  0.781840     -0.246106      -1.15495       1.15495       190.560       191.715    
  71  0.688901     -0.372658      -1.74885       1.74885       196.339       198.088    
  72  0.204580      -1.58679      -7.44669       7.44669       183.648       191.095    
  73  0.384240     -0.956488      -4.48872       4.48872       181.171       185.660    
loop,thermsimp(1:2)       92   5.43710       3.39712    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    374        195.23          0.87          1.13         23.51          0.27          0.05         25.83
Just calling func    0   0         25.83


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    195.23
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    4.69291               433
loop is:       92
neval is:      373
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       92      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    75.0866      0.500000    
T0,tstep,tfreq (these do not change):             72
current SAtemp,tstepnext are:    4.69291               433
loop is:       93
neval is:      373


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      433
neval,tstepnext:      373     433

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.642285E-02  -5.04789      -23.6893       23.6893       176.615       200.304    
   2  0.977343     -0.229176E-01 -0.107551      0.107551       177.184       177.292    
   3  0.515611     -0.662402      -3.10860       3.10860       174.847       177.956    
   4  0.985018     -0.150949E-01 -0.708393E-01  0.708393E-01   177.322       177.393    
   5  0.909744E-01  -2.39718      -11.2497       11.2497       177.102       188.352    
   6  0.163485      -1.81103      -8.49903       8.49903       176.444       184.943    
   7  0.709610     -0.343039      -1.60985       1.60985       174.461       176.071    
   8  0.639309     -0.447368      -2.09946       2.09946       178.702       180.801    
   9  0.500633     -0.691882      -3.24694       3.24694       180.202       183.449    
  10  0.623218     -0.472859      -2.21909       2.21909       181.694       183.913    
  11  0.974620     -0.257075E-01 -0.120643      0.120643       182.391       182.512    
  12  0.940866     -0.609540E-01 -0.286052      0.286052       182.286       182.573    
  13  0.268848      -1.31361      -6.16465       6.16465       182.994       189.159    
  14  0.131404      -2.02948      -9.52416       9.52416       179.231       188.755    
  15  0.242045      -1.41863      -6.65752       6.65752       183.359       190.017    
  16  0.333489      -1.09815      -5.15350       5.15350       181.367       186.521    
  17  0.540917     -0.614489      -2.88375       2.88375       183.048       185.932    
  18  0.935945     -0.661981E-01 -0.310662      0.310662       184.209       184.519    
  19  0.948265     -0.531218E-01 -0.249296      0.249296       182.339       182.588    
  20  0.306672      -1.18198      -5.54692       5.54692       182.685       188.231    
  21  0.674766E-01  -2.69597      -12.6520       12.6520       181.171       193.823    
  22  0.304885      -1.18782      -5.57435       5.57435       181.200       186.774    
  23  0.987276     -0.128055E-01 -0.600949E-01  0.600949E-01   183.432       183.492    
  24  0.866309     -0.143514     -0.673499      0.673499       184.949       185.622    
  25  0.325072      -1.12371      -5.27346       5.27346       176.192       181.466    
  26  0.882651     -0.124826     -0.585797      0.585797       181.591       182.176    
  27  0.608994E-02  -5.10112      -23.9391       23.9391       176.200       200.139    
  28  0.956776     -0.441859E-01 -0.207360      0.207360       176.338       176.546    
  29  0.680690E-01  -2.68723      -12.6110       12.6110       184.667       197.278    
  30  0.870194     -0.139039     -0.652498      0.652498       183.173       183.825    
  31  0.154954      -1.86463      -8.75052       8.75052       187.014       195.765    
  32  0.533144     -0.628963      -2.95167       2.95167       179.236       182.188    
  33  0.848128     -0.164724     -0.773034      0.773034       187.830       188.603    
  34  0.302343E-01  -3.49878      -16.4195       16.4195       183.150       199.570    
  35  0.670768     -0.399332      -1.87403       1.87403       188.594       190.468    
  36  0.575709     -0.552152      -2.59120       2.59120       189.573       192.164    
  37  0.961243     -0.395278E-01 -0.185501      0.185501       189.207       189.392    
  38  0.174287      -1.74705      -8.19877       8.19877       190.471       198.669    
  39  0.450902     -0.796506      -3.73793       3.73793       183.648       187.386    
  40  0.807155     -0.214240      -1.00541       1.00541       184.041       185.046    
  41  0.245094E-01  -3.70870      -17.4046       17.4046       186.996       204.400    
  42  0.840819     -0.173379     -0.813650      0.813650       191.182       191.995    
  43  0.418157     -0.871899      -4.09175       4.09175       188.019       192.110    
  44  0.795491     -0.228796      -1.07372       1.07372       190.560       191.633    
  45  0.675445E-01  -2.69497      -12.6473       12.6473       190.528       203.175    
  46  0.158617      -1.84126      -8.64089       8.64089       179.337       187.978    
  47  0.538475     -0.619015      -2.90498       2.90498       189.173       192.078    
  48  0.318292      -1.14479      -5.37239       5.37239       187.739       193.112    
  49  0.427160     -0.850596      -3.99178       3.99178       190.284       194.276    
  50  0.485422     -0.722737      -3.39174       3.39174       193.292       196.684    
  51  0.603579     -0.504879      -2.36935       2.36935       183.479       185.848    
  52  0.151674      -1.88602      -8.85095       8.85095       186.718       195.569    
  53  0.216599      -1.52971      -7.17879       7.17879       182.376       189.555    
  54  0.838062     -0.176664     -0.829067      0.829067       193.387       194.216    
  55  0.728698     -0.316496      -1.48529       1.48529       188.080       189.566    
  56  0.866837     -0.142904     -0.670638      0.670638       186.979       187.650    
  57  0.921748     -0.814837E-01 -0.382396      0.382396       190.440       190.822    
  58  0.325236      -1.12320      -5.27109       5.27109       189.965       195.236    
  59  0.316044      -1.15187      -5.40564       5.40564       189.022       194.428    
  60  0.163050      -1.81370      -8.51154       8.51154       190.639       199.151    
  61  0.940520     -0.613225E-01 -0.287781      0.287781       189.767       190.055    
  62  0.439004     -0.823246      -3.86342       3.86342       184.656       188.519    
  63  0.209586      -1.56262      -7.33324       7.33324       193.963       201.296    
  64  0.521405     -0.651229      -3.05616       3.05616       194.247       197.303    
  65  0.397376     -0.922872      -4.33096       4.33096       196.077       200.408    
  66  0.398167     -0.920883      -4.32162       4.32162       186.838       191.160    
  67  0.821539     -0.196576     -0.922514      0.922514       186.834       187.756    
  68  0.652451     -0.427020      -2.00397       2.00397       188.619       190.623    
  69  0.412127     -0.886423      -4.15990       4.15990       196.339       200.499    
  70  0.748303E-02  -4.89512      -22.9724       22.9724       184.702       207.674    
  71  0.287259      -1.24737      -5.85380       5.85380       190.085       195.939    
  72  0.813902     -0.205915     -0.966342      0.966342       195.396       196.362    
  73  0.173180      -1.75343      -8.22867       8.22867       195.234       203.463    
loop,thermsimp(1:2)       93   23.6893      0.107551    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    375        179.59          0.86          1.13         23.54          0.21          0.05         25.79
Just calling func    0   0         25.79


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    376        188.54          0.86          1.13         23.59          0.26          0.05         25.88
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    179.59
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    4.69291               433
loop is:       93
neval is:      375
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       93      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    75.0866      0.500000    
T0,tstep,tfreq (these do not change):             72
current SAtemp,tstepnext are:    4.69291               433
loop is:       94
neval is:      375


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      433
neval,tstepnext:      375     433

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.415683     -0.877831      -4.11959       4.11959       174.461       178.581    
   2  0.262668E-01  -3.63945      -17.0796       17.0796       176.338       193.418    
   3  0.620248     -0.477636      -2.24151       2.24151       177.184       179.426    
   4  0.249183      -1.38957      -6.52112       6.52112       177.322       183.843    
   5  0.999872     -0.128438E-03 -0.602747E-03  0.602747E-03   174.847       174.848    
   6  0.933252     -0.690802E-01 -0.324187      0.324187       178.702       179.026    
   7  0.857047     -0.154263     -0.723943      0.723943       176.192       176.916    
   8  0.365787      -1.00570      -4.71968       4.71968       181.591       186.310    
   9  0.499682     -0.693784      -3.25587       3.25587       179.236       182.492    
  10  0.761560     -0.272387      -1.27829       1.27829       182.391       183.670    
  11  0.793904E-01  -2.53338      -11.8889       11.8889       182.286       194.175    
  12  0.514449     -0.664659      -3.11919       3.11919       182.339       185.458    
  13  0.678176     -0.388349      -1.82249       1.82249       180.202       182.025    
  14  0.257558      -1.35651      -6.36599       6.36599       183.432       189.798    
  15  0.832067E-01  -2.48643      -11.6686       11.6686       183.173       194.841    
  16  0.272851      -1.29883      -6.09530       6.09530       181.694       187.790    
  17  0.255245      -1.36553      -6.40832       6.40832       184.209       190.617    
  18  0.419883     -0.867779      -4.07241       4.07241       176.444       180.516    
  19  0.870346     -0.138865     -0.651680      0.651680       184.041       184.693    
  20  0.814510E-01  -2.50775      -11.7687       11.7687       184.949       196.717    
  21  0.560000     -0.579819      -2.72104       2.72104       183.479       186.200    
  22  0.860285     -0.150492     -0.706245      0.706245       183.048       183.755    
  23  0.538601     -0.618780      -2.90388       2.90388       181.367       184.271    
  24  0.542321     -0.611898      -2.87158       2.87158       181.200       184.071    
  25  0.836575     -0.178440     -0.837401      0.837401       183.648       184.486    
  26  0.705694     -0.348574      -1.63583       1.63583       186.979       188.615    
  27  0.301063      -1.20043      -5.63354       5.63354       186.834       192.467    
  28  0.125899      -2.07227      -9.72499       9.72499       179.337       189.062    
  29  0.476747     -0.740770      -3.47637       3.47637       182.685       186.161    
  30  0.676103     -0.391410      -1.83685       1.83685       177.102       178.939    
  31  0.385349     -0.953606      -4.47519       4.47519       184.656       189.131    
  32  0.141470      -1.95567      -9.17777       9.17777       187.830       197.008    
  33  0.146971      -1.91752      -8.99876       8.99876       179.231       188.230    
  34  0.616396     -0.483866      -2.27074       2.27074       182.994       185.265    
  35  0.962361     -0.383659E-01 -0.180048      0.180048       189.207       189.387    
  36  0.618266     -0.480836      -2.25652       2.25652       182.376       184.632    
  37  0.369072     -0.996763      -4.67772       4.67772       188.080       192.758    
  38  0.312675      -1.16259      -5.45593       5.45593       183.359       188.815    
  39  0.367326      -1.00150      -4.69998       4.69998       189.767       194.467    
  40  0.184422      -1.69053      -7.93351       7.93351       188.594       196.528    
  41  0.113088      -2.17959      -10.2286       10.2286       188.619       198.847    
  42  0.333487      -1.09815      -5.15353       5.15353       190.440       195.593    
  43  0.407562     -0.897562      -4.21218       4.21218       186.838       191.051    
  44  0.443434     -0.813206      -3.81631       3.81631       190.560       194.376    
  45  0.265046      -1.32785      -6.23150       6.23150       191.182       197.413    
  46  0.444603     -0.810573      -3.80395       3.80395       189.173       192.977    
  47  0.689395E-01  -2.67453      -12.5513       12.5513       188.019       200.570    
  48  0.862417     -0.148017     -0.694629      0.694629       189.573       190.268    
  49  0.541063     -0.614219      -2.88248       2.88248       187.739       190.622    
  50  0.885208     -0.121933     -0.572220      0.572220       181.171       181.744    
  51  0.808718     -0.212305     -0.996329      0.996329       193.387       194.383    
  52  0.238877E-01  -3.73439      -17.5252       17.5252       190.284       207.809    
  53  0.428951     -0.846414      -3.97215       3.97215       189.022       192.994    
  54  0.860433     -0.150319     -0.705436      0.705436       189.965       190.670    
  55  0.367713      -1.00045      -4.69504       4.69504       186.718       191.413    
  56  0.782210     -0.245632      -1.15273       1.15273       187.014       188.167    
  57  0.916512E-01  -2.38976      -11.2150       11.2150       190.085       201.300    
  58  0.230050      -1.46946      -6.89605       6.89605       195.396       202.292    
  59  0.715909     -0.334202      -1.56838       1.56838       193.292       194.861    
  60  0.992857E-01  -2.30975      -10.8395       10.8395       184.667       195.506    
  61  0.697124     -0.360791      -1.69316       1.69316       194.247       195.940    
  62  0.232699      -1.45801      -6.84232       6.84232       190.471       197.313    
  63  0.134492      -2.00625      -9.41518       9.41518       190.639       200.054    
  64  0.778931     -0.249833      -1.17244       1.17244       183.150       184.323    
  65  0.248765      -1.39125      -6.52899       6.52899       176.200       182.729    
  66  0.317309      -1.14788      -5.38690       5.38690       176.615       182.002    
  67  0.555562     -0.587775      -2.75838       2.75838       196.077       198.835    
  68  0.924692     -0.782950E-01 -0.367432      0.367432       196.339       196.706    
  69  0.930266     -0.722849E-01 -0.339227      0.339227       193.963       194.302    
  70  0.839348     -0.175130     -0.821868      0.821868       190.528       191.350    
  71  0.555632     -0.587650      -2.75779       2.75779       195.234       197.992    
  72  0.717506     -0.331974      -1.55793       1.55793       186.996       188.553    
  73  0.526364     -0.641761      -3.01173       3.01173       179.591       182.603    
loop,thermsimp(1:2)       94   4.11959       17.0796    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    377        183.40          0.86          1.12         23.49          0.25          0.05         25.77
Just calling func    0   0         25.77


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    183.40
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    4.69291               433
loop is:       94
neval is:      376
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       94      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    75.0866      0.500000    
T0,tstep,tfreq (these do not change):             72
current SAtemp,tstepnext are:    4.69291               433
loop is:       95
neval is:      376


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      433
neval,tstepnext:      376     433

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.292887      -1.22797      -5.76276       5.76276       174.847       180.610    
   2  0.225242      -1.49058      -6.99516       6.99516       176.192       183.188    
   3  0.946430E-01  -2.35764      -11.0642       11.0642       174.461       185.525    
   4  0.371694     -0.989684      -4.64450       4.64450       177.102       181.746    
   5  0.933291     -0.690381E-01 -0.323990      0.323990       178.702       179.026    
   6  0.926571     -0.762651E-01 -0.357905      0.357905       177.184       177.542    
   7  0.138048      -1.98015      -9.29269       9.29269       176.444       185.737    
   8  0.113008E-01  -4.48288      -21.0378       21.0378       181.171       202.209    
   9  0.405736     -0.902053      -4.23326       4.23326       176.615       180.848    
  10  0.390885     -0.939341      -4.40825       4.40825       180.202       184.610    
  11  0.873008     -0.135810     -0.637345      0.637345       179.236       179.873    
  12  0.945037     -0.565316E-01 -0.265298      0.265298       179.591       179.857    
  13  0.642194E-01  -2.74545      -12.8842       12.8842       176.200       189.084    
  14  0.322052E-01  -3.43563      -16.1231       16.1231       182.391       198.514    
  15  0.521559     -0.650933      -3.05477       3.05477       183.048       186.103    
  16  0.271788      -1.30273      -6.11362       6.11362       177.322       183.436    
  17  0.153503      -1.87403      -8.79468       8.79468       181.200       189.995    
  18  0.219303      -1.51730      -7.12056       7.12056       181.367       188.488    
  19  0.476616     -0.741044      -3.47766       3.47766       183.150       186.628    
  20  0.510024     -0.673297      -3.15972       3.15972       183.648       186.808    
  21  0.393388     -0.932959      -4.37829       4.37829       182.376       186.754    
  22  0.947927     -0.534776E-01 -0.250966      0.250966       184.041       184.292    
  23  0.472009     -0.750758      -3.52324       3.52324       182.994       186.518    
  24  0.678717     -0.387551      -1.81874       1.81874       182.339       184.157    
  25  0.617620     -0.481882      -2.26143       2.26143       182.685       184.946    
  26  0.138594E-01  -4.27879      -20.0800       20.0800       183.479       203.559    
  27  0.588445     -0.530273      -2.48852       2.48852       181.591       184.079    
  28  0.950805     -0.504465E-01 -0.236741      0.236741       181.694       181.931    
  29  0.444108     -0.811687      -3.80918       3.80918       187.014       190.823    
  30  0.299195      -1.20666      -5.66275       5.66275       179.231       184.894    
  31  0.808517E-01  -2.51514      -11.8033       11.8033       186.996       198.799    
  32  0.493903     -0.705415      -3.31045       3.31045       186.979       190.290    
  33  0.973584     -0.267710E-01 -0.125634      0.125634       183.359       183.485    
  34  0.219889      -1.51463      -7.10805       7.10805       179.337       186.446    
  35  0.872114     -0.136835     -0.642157      0.642157       184.656       185.298    
  36  0.413991     -0.881912      -4.13873       4.13873       189.207       193.345    
  37  0.155656      -1.86011      -8.72933       8.72933       183.432       192.161    
  38  0.744603     -0.294905      -1.38396       1.38396       189.573       190.957    
  39  0.627736     -0.465635      -2.18518       2.18518       184.209       186.394    
  40  0.137880      -1.98137      -9.29839       9.29839       187.739       197.038    
  41  0.270817      -1.30631      -6.13041       6.13041       189.965       196.095    
  42  0.271872      -1.30243      -6.11217       6.11217       186.838       192.951    
  43  0.988104     -0.119670E-01 -0.561600E-01  0.561600E-01   190.528       190.584    
  44  0.837729E-01  -2.47965      -11.6368       11.6368       186.718       198.355    
  45  0.731806     -0.312240      -1.46532       1.46532       186.834       188.299    
  46  0.520356     -0.653242      -3.06561       3.06561       188.080       191.146    
  47  0.158934      -1.83927      -8.63153       8.63153       189.173       197.805    
  48  0.724534     -0.322226      -1.51218       1.51218       189.022       190.534    
  49  0.895315     -0.110580     -0.518940      0.518940       176.338       176.857    
  50  0.850194     -0.162291     -0.761616      0.761616       182.286       183.048    
  51  0.428755     -0.846869      -3.97428       3.97428       193.963       197.937    
  52  0.523907     -0.646440      -3.03369       3.03369       190.560       193.593    
  53  0.358551      -1.02568      -4.81345       4.81345       193.387       198.200    
  54  0.680509     -0.384914      -1.80637       1.80637       189.767       191.574    
  55  0.607274     -0.498775      -2.34071       2.34071       183.173       185.514    
  56  0.591502     -0.525090      -2.46420       2.46420       193.292       195.757    
  57  0.121812      -2.10527      -9.87987       9.87987       184.667       194.547    
  58  0.812950     -0.207086     -0.971836      0.971836       190.440       191.412    
  59  0.915745     -0.880175E-01 -0.413058      0.413058       194.247       194.660    
  60  0.596748     -0.516260      -2.42276       2.42276       188.594       191.017    
  61  0.229246      -1.47296      -6.91248       6.91248       196.339       203.251    
  62  0.706979     -0.346754      -1.62728       1.62728       184.949       186.576    
  63  0.879114     -0.128841     -0.604638      0.604638       187.830       188.435    
  64  0.529368     -0.636072      -2.98503       2.98503       190.471       193.456    
  65  0.193084      -1.64463      -7.71811       7.71811       191.182       198.900    
  66  0.179439      -1.71792      -8.06204       8.06204       195.234       203.296    
  67  0.945530     -0.560096E-01 -0.262848      0.262848       196.077       196.340    
  68  0.486508     -0.720502      -3.38125       3.38125       188.619       192.000    
  69  0.131906      -2.02566      -9.50626       9.50626       190.639       200.145    
  70  0.203721      -1.59100      -7.46644       7.46644       188.019       195.485    
  71  0.493535     -0.706161      -3.31395       3.31395       190.085       193.399    
  72  0.501297     -0.690556      -3.24072       3.24072       195.396       198.637    
  73  0.507567E-01  -2.98071      -13.9882       13.9882       183.401       197.389    
loop,thermsimp(1:2)       95   5.76276       6.99516    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    378        198.73          0.86          1.13         23.53          0.27          0.05         25.84
Just calling func    0   0         25.84


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    198.73
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    4.69291               433
loop is:       95
neval is:      377
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       95      95
 right before GO TO 250



 right after: 250 IF (loop < nloop) CYCLE Main_loop 
loop,nloop:       95      95
loop was equal to nloop so did not start main cycle again, now will do the following: 




calculate mean & stdev of func values for current simplex (hmean,hstd)
 write hstd
 RMS of function values of last simplex =   5.79977    

hmean,hstd :    185.265       5.79977    


writing best so far by calling functn2 
 but just writing params not moments. see the change in functn2
hmean,hstd :    185.265       5.79977    
h(1),h(best1),h(np1) :    176.338       174.461       198.731    
htherm(1),htherm(best1),htherm(np1) :    176.857       185.525       203.559    


 CHECK hstd>?stopcr
---------> IF hstd>stopcr (and maxfn,neval.nevalp conditions as well) then set iflag and loop to zero and go to the start of the main cycle again 
---------> IF hstd<=stopcr then find the centroid of the current simplex and get the function value there 
 ............
 ............
 ............
 ............
  .NOT. (hstd > stopcr .AND. (((maxfn>=0).AND.(neval <= maxfn)).OR.((maxfn<0).AND.(nevalp <= -1*maxfn))  )) 
  so find the centroid of current simplex and get teh function value there 
  call functn(p,func) 
  neval = neval + 1
  nevalp = nevalp + 1
  IF ((iprint > 0).AND.(realrank==0)) THEN 
     IF (MOD(neval,iprint) == 0) WRITE (lout,5100) neval, func, p 
  END IF  
  CHECK wtr the no. of func values allowed, maxfn, has been overrun. if so, exit with ifault= 1 
  IF maxfn>0 check based on neval. if maxfn<0 check based on nevalp. 
  i.e.: ---->IF (((maxfn>=0).AND.(neval > maxfn)).OR.((maxfn<0).AND.(nevalp > -1*maxfn))) THEN
        ---->IF the above if statement true then something ... RETURN 
        ---->IF the above if statement not true then you get out of that if statement ... CONVGENCE CRTI SATISFIED - RETURN 
 ............
 ............
iter,obj,time:    379        179.01          0.86          1.12         23.61          0.14          0.05         25.78

 EVIDENCE OF CONVERGENCE
 Centroid of last simplex =
    1.6659      -1.3739       1.6820      -102.61      0.95626      0.37695    
    1.8519      -99.703       3.6839      0.11127       1.9333      -1.5349    
    1.3878       0.0000      -5.0000      -1.3063       0.0000       0.0000    
