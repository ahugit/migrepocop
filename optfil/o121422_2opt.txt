nop,maxfn,iprint,nloop,iquad:   938000  20  95   0
stopcr,simp:    5.00000       0.00000    
T0,Tstep:    560.467      0.500000    
Tfreq:   50
nop,maxfn,iprint,nloop,iquad:   938000  20  95   0
stopcr,simp:    5.00000       0.00000    
T0,Tstep:    560.467      0.500000    
Tfreq:   50
 Estimating   50 parameters on   1 communicators
 Progress Report every  20 function evaluations
 EVAL.   FUNC.VALUE.          PARAMETER VALUES
iter,obj,time:      2       1868.22          4.07          1.11         21.91          0.23          0.04         27.36
iter,obj,time:      3       1799.18          0.87          1.12         22.11          0.12          0.05         24.28
iter,obj,time:      4       1842.02          0.88          1.12         22.27          0.07          0.05         24.39
iter,obj,time:      5       2013.05          0.88          1.12         21.96          0.11          0.05         24.12
iter,obj,time:      6       1890.21          0.87          1.12         22.11          0.09          0.05         24.25
iter,obj,time:      7       1904.86          0.88          1.12         22.01          0.13          0.05         24.19
iter,obj,time:      8       1969.92          0.88          1.12         22.00          0.06          0.05         24.10
iter,obj,time:      9       1924.71          0.88          1.13         22.05          0.14          0.05         24.24
iter,obj,time:     10       2029.67          0.88          1.12         21.96          0.12          0.05         24.13
iter,obj,time:     11       1935.97          0.87          1.12         22.03          0.15          0.05         24.22
iter,obj,time:     12       1894.57          0.88          1.12         21.96          0.11          0.05         24.13
iter,obj,time:     13       2396.21          0.88          1.12         22.00          0.07          0.05         24.12
iter,obj,time:     14       1883.82          0.87          1.12         22.08          0.09          0.05         24.20
iter,obj,time:     15       2207.80          0.87          1.12         22.00          0.08          0.04         24.11
iter,obj,time:     16       1868.19          0.88          1.12         22.03          0.11          0.05         24.19
iter,obj,time:     17       1867.99          0.87          1.12         21.91          0.17          0.05         24.12
iter,obj,time:     18       1868.22          0.87          1.12         22.00          0.10          0.05         24.14
iter,obj,time:     19       2004.40          0.88          1.12         22.05          0.12          0.05         24.21
iter,obj,time:     20       2116.68          0.87          1.12         21.99          0.12          0.05         24.15
iter,obj,time:     21       1959.76          0.88          1.12         22.23          0.13          0.05         24.41
iter,obj,time:     22       2081.44          0.87          1.12         22.27          0.14          0.05         24.46
iter,obj,time:     23       1843.54          0.89          1.12         21.98          0.11          0.05         24.15
iter,obj,time:     24       2076.38          0.86          1.12         22.03          0.15          0.05         24.21
iter,obj,time:     25       2035.22          0.88          1.12         21.99          0.05          0.05         24.09
iter,obj,time:     26       2029.82          0.86          1.12         22.09          0.11          0.05         24.23
iter,obj,time:     27       1881.96          0.88          1.12         21.91          0.16          0.05         24.11
iter,obj,time:     28       2342.61          0.88          1.12         21.96          0.12          0.04         24.12
iter,obj,time:     29       1898.64          0.88          1.12         22.05          0.11          0.05         24.22
iter,obj,time:     30       1859.42          0.88          1.12         22.00          0.03          0.05         24.08
iter,obj,time:     31       1837.28          0.87          1.12         22.05          0.13          0.05         24.23
iter,obj,time:     32       1904.43          0.88          1.12         22.04          0.06          0.04         24.14
iter,obj,time:     33       1839.98          0.88          1.14         21.97          0.15          0.05         24.18
iter,obj,time:     34       1898.07          0.88          1.12         22.14          0.11          0.05         24.30
iter,obj,time:     35       1871.32          0.88          1.12         22.30          0.14          0.05         24.49
iter,obj,time:     36       1847.39          0.88          1.12         22.04          0.12          0.05         24.21
iter,obj,time:     37       1862.04          0.88          1.13         21.99          0.14          0.05         24.19
iter,obj,time:     38       1921.00          0.88          1.12         22.05          0.04          0.05         24.14
iter,obj,time:     39       2082.37          0.88          1.12         22.02          0.07          0.04         24.13
iter,obj,time:     40       1865.59          0.88          1.12         21.95          0.14          0.04         24.14
iter,obj,time:     41       2000.81          0.88          1.11         22.00          0.12          0.05         24.15
iter,obj,time:     42       1873.15          0.88          1.13         21.96          0.11          0.05         24.13
iter,obj,time:     43       1938.43          0.88          1.12         22.28          0.10          0.05         24.43
iter,obj,time:     44       1849.52          0.89          1.12         22.13          0.11          0.05         24.30
iter,obj,time:     45       1830.81          0.88          1.11         21.96          0.18          0.05         24.17
iter,obj,time:     46       1860.39          0.88          1.11         22.04          0.11          0.05         24.19
iter,obj,time:     47       2435.02          0.88          1.12         22.00          0.11          0.05         24.17
iter,obj,time:     48       2025.84          0.88          1.13         22.07          0.12          0.05         24.24
iter,obj,time:     49       1892.75          0.88          1.12         22.01          0.12          0.05         24.18
iter,obj,time:     50       1881.57          0.88          1.11         22.04          0.07          0.05         24.14
iter,obj,time:     51       1965.16          0.88          1.12         22.04          0.09          0.05         24.18
iter,obj,time:     52       1844.36          0.88          1.13         22.12          0.11          0.05         24.29

    1    1868.2        1.315     -2.102      3.011     -102.6      1.061    
                      0.8518      1.408     -99.70      3.552     0.4588    

                       2.157     -1.951      1.540      7000.      7000.    

                      -2.000      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -5.965     -3.618     -8.632      6.413    

                      -14.39     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.1105E-01 0.2544    -0.3348E-01 0.1510    

                     -0.2486    -0.1446     0.1394     0.8045E-01 0.9157E-01



                     -0.4503    -0.5000      0.000     0.8457E-01-0.3931E-01

                     -0.4697E-01 0.1431    -0.7116    -0.1141     0.2695    

                      0.3288E-01 0.1525E-02-0.6074     -1.229      7000.    



                     -0.2390    -0.6590     -2.142     -1.982    -0.3807    

                     -0.3252      9.204      8.720    -0.1672E+05 -6.000    

                     -0.4288     -2.381      9.354      8.808    -0.1969E+05



                      -6.000     0.5846    -0.3693      8.865      9.057    

                     -0.1944E+05 -6.000    -0.6489    -0.6332      9.076    

                       8.777    -0.1891E+05 -6.000    

    2    1799.2      -0.6850     -2.102      3.011     -102.6      1.061    
                      0.8518      1.408     -99.70      3.552     0.4588    

                       2.157     -1.951      1.540      7000.      7000.    

                      -2.000      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -5.965     -3.618     -8.632      6.413    

                      -14.39     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.1105E-01 0.2544    -0.3348E-01 0.1510    

                     -0.2486    -0.1446     0.1394     0.8045E-01 0.9157E-01



                     -0.4503    -0.5000      0.000     0.8457E-01-0.3931E-01

                     -0.4697E-01 0.1431    -0.7116    -0.1141     0.2695    

                      0.3288E-01 0.1525E-02-0.6074     -1.229      7000.    



                     -0.2390    -0.6590     -2.142     -1.982    -0.3807    

                     -0.3252      9.204      8.720    -0.1672E+05 -6.000    

                     -0.4288     -2.381      9.354      8.808    -0.1969E+05



                      -6.000     0.5846    -0.3693      8.865      9.057    

                     -0.1944E+05 -6.000    -0.6489    -0.6332      9.076    

                       8.777    -0.1891E+05 -6.000    

    3    1842.0        1.315     -4.102      3.011     -102.6      1.061    
                      0.8518      1.408     -99.70      3.552     0.4588    

                       2.157     -1.951      1.540      7000.      7000.    

                      -2.000      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -5.965     -3.618     -8.632      6.413    

                      -14.39     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.1105E-01 0.2544    -0.3348E-01 0.1510    

                     -0.2486    -0.1446     0.1394     0.8045E-01 0.9157E-01



                     -0.4503    -0.5000      0.000     0.8457E-01-0.3931E-01

                     -0.4697E-01 0.1431    -0.7116    -0.1141     0.2695    

                      0.3288E-01 0.1525E-02-0.6074     -1.229      7000.    



                     -0.2390    -0.6590     -2.142     -1.982    -0.3807    

                     -0.3252      9.204      8.720    -0.1672E+05 -6.000    

                     -0.4288     -2.381      9.354      8.808    -0.1969E+05



                      -6.000     0.5846    -0.3693      8.865      9.057    

                     -0.1944E+05 -6.000    -0.6489    -0.6332      9.076    

                       8.777    -0.1891E+05 -6.000    

    4    2013.1        1.315     -2.102      1.011     -102.6      1.061    
                      0.8518      1.408     -99.70      3.552     0.4588    

                       2.157     -1.951      1.540      7000.      7000.    

                      -2.000      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -5.965     -3.618     -8.632      6.413    

                      -14.39     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.1105E-01 0.2544    -0.3348E-01 0.1510    

                     -0.2486    -0.1446     0.1394     0.8045E-01 0.9157E-01



                     -0.4503    -0.5000      0.000     0.8457E-01-0.3931E-01

                     -0.4697E-01 0.1431    -0.7116    -0.1141     0.2695    

                      0.3288E-01 0.1525E-02-0.6074     -1.229      7000.    



                     -0.2390    -0.6590     -2.142     -1.982    -0.3807    

                     -0.3252      9.204      8.720    -0.1672E+05 -6.000    

                     -0.4288     -2.381      9.354      8.808    -0.1969E+05



                      -6.000     0.5846    -0.3693      8.865      9.057    

                     -0.1944E+05 -6.000    -0.6489    -0.6332      9.076    

                       8.777    -0.1891E+05 -6.000    

    5    1890.2        1.315     -2.102      3.011     -102.6    -0.9390    
                      0.8518      1.408     -99.70      3.552     0.4588    

                       2.157     -1.951      1.540      7000.      7000.    

                      -2.000      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -5.965     -3.618     -8.632      6.413    

                      -14.39     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.1105E-01 0.2544    -0.3348E-01 0.1510    

                     -0.2486    -0.1446     0.1394     0.8045E-01 0.9157E-01



                     -0.4503    -0.5000      0.000     0.8457E-01-0.3931E-01

                     -0.4697E-01 0.1431    -0.7116    -0.1141     0.2695    

                      0.3288E-01 0.1525E-02-0.6074     -1.229      7000.    



                     -0.2390    -0.6590     -2.142     -1.982    -0.3807    

                     -0.3252      9.204      8.720    -0.1672E+05 -6.000    

                     -0.4288     -2.381      9.354      8.808    -0.1969E+05



                      -6.000     0.5846    -0.3693      8.865      9.057    

                     -0.1944E+05 -6.000    -0.6489    -0.6332      9.076    

                       8.777    -0.1891E+05 -6.000    

    6    1904.9        1.315     -2.102      3.011     -102.6      1.061    
                      -1.148      1.408     -99.70      3.552     0.4588    

                       2.157     -1.951      1.540      7000.      7000.    

                      -2.000      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -5.965     -3.618     -8.632      6.413    

                      -14.39     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.1105E-01 0.2544    -0.3348E-01 0.1510    

                     -0.2486    -0.1446     0.1394     0.8045E-01 0.9157E-01



                     -0.4503    -0.5000      0.000     0.8457E-01-0.3931E-01

                     -0.4697E-01 0.1431    -0.7116    -0.1141     0.2695    

                      0.3288E-01 0.1525E-02-0.6074     -1.229      7000.    



                     -0.2390    -0.6590     -2.142     -1.982    -0.3807    

                     -0.3252      9.204      8.720    -0.1672E+05 -6.000    

                     -0.4288     -2.381      9.354      8.808    -0.1969E+05



                      -6.000     0.5846    -0.3693      8.865      9.057    

                     -0.1944E+05 -6.000    -0.6489    -0.6332      9.076    

                       8.777    -0.1891E+05 -6.000    

    7    1969.9        1.315     -2.102      3.011     -102.6      1.061    
                      0.8518    -0.5920     -99.70      3.552     0.4588    

                       2.157     -1.951      1.540      7000.      7000.    

                      -2.000      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -5.965     -3.618     -8.632      6.413    

                      -14.39     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.1105E-01 0.2544    -0.3348E-01 0.1510    

                     -0.2486    -0.1446     0.1394     0.8045E-01 0.9157E-01



                     -0.4503    -0.5000      0.000     0.8457E-01-0.3931E-01

                     -0.4697E-01 0.1431    -0.7116    -0.1141     0.2695    

                      0.3288E-01 0.1525E-02-0.6074     -1.229      7000.    



                     -0.2390    -0.6590     -2.142     -1.982    -0.3807    

                     -0.3252      9.204      8.720    -0.1672E+05 -6.000    

                     -0.4288     -2.381      9.354      8.808    -0.1969E+05



                      -6.000     0.5846    -0.3693      8.865      9.057    

                     -0.1944E+05 -6.000    -0.6489    -0.6332      9.076    

                       8.777    -0.1891E+05 -6.000    

    8    1924.7        1.315     -2.102      3.011     -102.6      1.061    
                      0.8518      1.408     -99.70      1.552     0.4588    

                       2.157     -1.951      1.540      7000.      7000.    

                      -2.000      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -5.965     -3.618     -8.632      6.413    

                      -14.39     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.1105E-01 0.2544    -0.3348E-01 0.1510    

                     -0.2486    -0.1446     0.1394     0.8045E-01 0.9157E-01



                     -0.4503    -0.5000      0.000     0.8457E-01-0.3931E-01

                     -0.4697E-01 0.1431    -0.7116    -0.1141     0.2695    

                      0.3288E-01 0.1525E-02-0.6074     -1.229      7000.    



                     -0.2390    -0.6590     -2.142     -1.982    -0.3807    

                     -0.3252      9.204      8.720    -0.1672E+05 -6.000    

                     -0.4288     -2.381      9.354      8.808    -0.1969E+05



                      -6.000     0.5846    -0.3693      8.865      9.057    

                     -0.1944E+05 -6.000    -0.6489    -0.6332      9.076    

                       8.777    -0.1891E+05 -6.000    

    9    2029.7        1.315     -2.102      3.011     -102.6      1.061    
                      0.8518      1.408     -99.70      3.552     -1.541    

                       2.157     -1.951      1.540      7000.      7000.    

                      -2.000      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -5.965     -3.618     -8.632      6.413    

                      -14.39     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.1105E-01 0.2544    -0.3348E-01 0.1510    

                     -0.2486    -0.1446     0.1394     0.8045E-01 0.9157E-01



                     -0.4503    -0.5000      0.000     0.8457E-01-0.3931E-01

                     -0.4697E-01 0.1431    -0.7116    -0.1141     0.2695    

                      0.3288E-01 0.1525E-02-0.6074     -1.229      7000.    



                     -0.2390    -0.6590     -2.142     -1.982    -0.3807    

                     -0.3252      9.204      8.720    -0.1672E+05 -6.000    

                     -0.4288     -2.381      9.354      8.808    -0.1969E+05



                      -6.000     0.5846    -0.3693      8.865      9.057    

                     -0.1944E+05 -6.000    -0.6489    -0.6332      9.076    

                       8.777    -0.1891E+05 -6.000    

   10    1936.0        1.315     -2.102      3.011     -102.6      1.061    
                      0.8518      1.408     -99.70      3.552     0.4588    

                      0.1570     -1.951      1.540      7000.      7000.    

                      -2.000      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -5.965     -3.618     -8.632      6.413    

                      -14.39     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.1105E-01 0.2544    -0.3348E-01 0.1510    

                     -0.2486    -0.1446     0.1394     0.8045E-01 0.9157E-01



                     -0.4503    -0.5000      0.000     0.8457E-01-0.3931E-01

                     -0.4697E-01 0.1431    -0.7116    -0.1141     0.2695    

                      0.3288E-01 0.1525E-02-0.6074     -1.229      7000.    



                     -0.2390    -0.6590     -2.142     -1.982    -0.3807    

                     -0.3252      9.204      8.720    -0.1672E+05 -6.000    

                     -0.4288     -2.381      9.354      8.808    -0.1969E+05



                      -6.000     0.5846    -0.3693      8.865      9.057    

                     -0.1944E+05 -6.000    -0.6489    -0.6332      9.076    

                       8.777    -0.1891E+05 -6.000    

   11    1894.6        1.315     -2.102      3.011     -102.6      1.061    
                      0.8518      1.408     -99.70      3.552     0.4588    

                       2.157     -3.951      1.540      7000.      7000.    

                      -2.000      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -5.965     -3.618     -8.632      6.413    

                      -14.39     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.1105E-01 0.2544    -0.3348E-01 0.1510    

                     -0.2486    -0.1446     0.1394     0.8045E-01 0.9157E-01



                     -0.4503    -0.5000      0.000     0.8457E-01-0.3931E-01

                     -0.4697E-01 0.1431    -0.7116    -0.1141     0.2695    

                      0.3288E-01 0.1525E-02-0.6074     -1.229      7000.    



                     -0.2390    -0.6590     -2.142     -1.982    -0.3807    

                     -0.3252      9.204      8.720    -0.1672E+05 -6.000    

                     -0.4288     -2.381      9.354      8.808    -0.1969E+05



                      -6.000     0.5846    -0.3693      8.865      9.057    

                     -0.1944E+05 -6.000    -0.6489    -0.6332      9.076    

                       8.777    -0.1891E+05 -6.000    

   12    2396.2        1.315     -2.102      3.011     -102.6      1.061    
                      0.8518      1.408     -99.70      3.552     0.4588    

                       2.157     -1.951      1.540      7000.      7000.    

                      -1.000      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -5.965     -3.618     -8.632      6.413    

                      -14.39     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.1105E-01 0.2544    -0.3348E-01 0.1510    

                     -0.2486    -0.1446     0.1394     0.8045E-01 0.9157E-01



                     -0.4503    -0.5000      0.000     0.8457E-01-0.3931E-01

                     -0.4697E-01 0.1431    -0.7116    -0.1141     0.2695    

                      0.3288E-01 0.1525E-02-0.6074     -1.229      7000.    



                     -0.2390    -0.6590     -2.142     -1.982    -0.3807    

                     -0.3252      9.204      8.720    -0.1672E+05 -6.000    

                     -0.4288     -2.381      9.354      8.808    -0.1969E+05



                      -6.000     0.5846    -0.3693      8.865      9.057    

                     -0.1944E+05 -6.000    -0.6489    -0.6332      9.076    

                       8.777    -0.1891E+05 -6.000    

   13    1883.8        1.315     -2.102      3.011     -102.6      1.061    
                      0.8518      1.408     -99.70      3.552     0.4588    

                       2.157     -1.951      1.540      7000.      7000.    

                      -2.000      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500    -0.9650     -3.618     -8.632      6.413    

                      -14.39     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.1105E-01 0.2544    -0.3348E-01 0.1510    

                     -0.2486    -0.1446     0.1394     0.8045E-01 0.9157E-01



                     -0.4503    -0.5000      0.000     0.8457E-01-0.3931E-01

                     -0.4697E-01 0.1431    -0.7116    -0.1141     0.2695    

                      0.3288E-01 0.1525E-02-0.6074     -1.229      7000.    



                     -0.2390    -0.6590     -2.142     -1.982    -0.3807    

                     -0.3252      9.204      8.720    -0.1672E+05 -6.000    

                     -0.4288     -2.381      9.354      8.808    -0.1969E+05



                      -6.000     0.5846    -0.3693      8.865      9.057    

                     -0.1944E+05 -6.000    -0.6489    -0.6332      9.076    

                       8.777    -0.1891E+05 -6.000    

   14    2207.8        1.315     -2.102      3.011     -102.6      1.061    
                      0.8518      1.408     -99.70      3.552     0.4588    

                       2.157     -1.951      1.540      7000.      7000.    

                      -2.000      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -5.965      1.382     -8.632      6.413    

                      -14.39     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.1105E-01 0.2544    -0.3348E-01 0.1510    

                     -0.2486    -0.1446     0.1394     0.8045E-01 0.9157E-01



                     -0.4503    -0.5000      0.000     0.8457E-01-0.3931E-01

                     -0.4697E-01 0.1431    -0.7116    -0.1141     0.2695    

                      0.3288E-01 0.1525E-02-0.6074     -1.229      7000.    



                     -0.2390    -0.6590     -2.142     -1.982    -0.3807    

                     -0.3252      9.204      8.720    -0.1672E+05 -6.000    

                     -0.4288     -2.381      9.354      8.808    -0.1969E+05



                      -6.000     0.5846    -0.3693      8.865      9.057    

                     -0.1944E+05 -6.000    -0.6489    -0.6332      9.076    

                       8.777    -0.1891E+05 -6.000    

   15    1868.2        1.315     -2.102      3.011     -102.6      1.061    
                      0.8518      1.408     -99.70      3.552     0.4588    

                       2.157     -1.951      1.540      7000.      7000.    

                      -2.000      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -5.965     -3.618     -3.632      6.413    

                      -14.39     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.1105E-01 0.2544    -0.3348E-01 0.1510    

                     -0.2486    -0.1446     0.1394     0.8045E-01 0.9157E-01



                     -0.4503    -0.5000      0.000     0.8457E-01-0.3931E-01

                     -0.4697E-01 0.1431    -0.7116    -0.1141     0.2695    

                      0.3288E-01 0.1525E-02-0.6074     -1.229      7000.    



                     -0.2390    -0.6590     -2.142     -1.982    -0.3807    

                     -0.3252      9.204      8.720    -0.1672E+05 -6.000    

                     -0.4288     -2.381      9.354      8.808    -0.1969E+05



                      -6.000     0.5846    -0.3693      8.865      9.057    

                     -0.1944E+05 -6.000    -0.6489    -0.6332      9.076    

                       8.777    -0.1891E+05 -6.000    

   16    1868.0        1.315     -2.102      3.011     -102.6      1.061    
                      0.8518      1.408     -99.70      3.552     0.4588    

                       2.157     -1.951      1.540      7000.      7000.    

                      -2.000      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -5.965     -3.618     -8.632      11.41    

                      -14.39     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.1105E-01 0.2544    -0.3348E-01 0.1510    

                     -0.2486    -0.1446     0.1394     0.8045E-01 0.9157E-01



                     -0.4503    -0.5000      0.000     0.8457E-01-0.3931E-01

                     -0.4697E-01 0.1431    -0.7116    -0.1141     0.2695    

                      0.3288E-01 0.1525E-02-0.6074     -1.229      7000.    



                     -0.2390    -0.6590     -2.142     -1.982    -0.3807    

                     -0.3252      9.204      8.720    -0.1672E+05 -6.000    

                     -0.4288     -2.381      9.354      8.808    -0.1969E+05



                      -6.000     0.5846    -0.3693      8.865      9.057    

                     -0.1944E+05 -6.000    -0.6489    -0.6332      9.076    

                       8.777    -0.1891E+05 -6.000    

   17    1868.2        1.315     -2.102      3.011     -102.6      1.061    
                      0.8518      1.408     -99.70      3.552     0.4588    

                       2.157     -1.951      1.540      7000.      7000.    

                      -2.000      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -5.965     -3.618     -8.632      6.413    

                      -9.390     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.1105E-01 0.2544    -0.3348E-01 0.1510    

                     -0.2486    -0.1446     0.1394     0.8045E-01 0.9157E-01



                     -0.4503    -0.5000      0.000     0.8457E-01-0.3931E-01

                     -0.4697E-01 0.1431    -0.7116    -0.1141     0.2695    

                      0.3288E-01 0.1525E-02-0.6074     -1.229      7000.    



                     -0.2390    -0.6590     -2.142     -1.982    -0.3807    

                     -0.3252      9.204      8.720    -0.1672E+05 -6.000    

                     -0.4288     -2.381      9.354      8.808    -0.1969E+05



                      -6.000     0.5846    -0.3693      8.865      9.057    

                     -0.1944E+05 -6.000    -0.6489    -0.6332      9.076    

                       8.777    -0.1891E+05 -6.000    

   18    2004.4        1.315     -2.102      3.011     -102.6      1.061    
                      0.8518      1.408     -99.70      3.552     0.4588    

                       2.157     -1.951      1.540      7000.      7000.    

                      -2.000      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -5.965     -3.618     -8.632      6.413    

                      -14.39     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.3110     0.2544    -0.3348E-01 0.1510    

                     -0.2486    -0.1446     0.1394     0.8045E-01 0.9157E-01



                     -0.4503    -0.5000      0.000     0.8457E-01-0.3931E-01

                     -0.4697E-01 0.1431    -0.7116    -0.1141     0.2695    

                      0.3288E-01 0.1525E-02-0.6074     -1.229      7000.    



                     -0.2390    -0.6590     -2.142     -1.982    -0.3807    

                     -0.3252      9.204      8.720    -0.1672E+05 -6.000    

                     -0.4288     -2.381      9.354      8.808    -0.1969E+05



                      -6.000     0.5846    -0.3693      8.865      9.057    

                     -0.1944E+05 -6.000    -0.6489    -0.6332      9.076    

                       8.777    -0.1891E+05 -6.000    

   19    2116.7        1.315     -2.102      3.011     -102.6      1.061    
                      0.8518      1.408     -99.70      3.552     0.4588    

                       2.157     -1.951      1.540      7000.      7000.    

                      -2.000      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -5.965     -3.618     -8.632      6.413    

                      -14.39     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.1105E-01 0.5544    -0.3348E-01 0.1510    

                     -0.2486    -0.1446     0.1394     0.8045E-01 0.9157E-01



                     -0.4503    -0.5000      0.000     0.8457E-01-0.3931E-01

                     -0.4697E-01 0.1431    -0.7116    -0.1141     0.2695    

                      0.3288E-01 0.1525E-02-0.6074     -1.229      7000.    



                     -0.2390    -0.6590     -2.142     -1.982    -0.3807    

                     -0.3252      9.204      8.720    -0.1672E+05 -6.000    

                     -0.4288     -2.381      9.354      8.808    -0.1969E+05



                      -6.000     0.5846    -0.3693      8.865      9.057    

                     -0.1944E+05 -6.000    -0.6489    -0.6332      9.076    

                       8.777    -0.1891E+05 -6.000    

   20    1959.8        1.315     -2.102      3.011     -102.6      1.061    
                      0.8518      1.408     -99.70      3.552     0.4588    

                       2.157     -1.951      1.540      7000.      7000.    

                      -2.000      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -5.965     -3.618     -8.632      6.413    

                      -14.39     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.1105E-01 0.2544     0.2665     0.1510    

                     -0.2486    -0.1446     0.1394     0.8045E-01 0.9157E-01



                     -0.4503    -0.5000      0.000     0.8457E-01-0.3931E-01

                     -0.4697E-01 0.1431    -0.7116    -0.1141     0.2695    

                      0.3288E-01 0.1525E-02-0.6074     -1.229      7000.    



                     -0.2390    -0.6590     -2.142     -1.982    -0.3807    

                     -0.3252      9.204      8.720    -0.1672E+05 -6.000    

                     -0.4288     -2.381      9.354      8.808    -0.1969E+05



                      -6.000     0.5846    -0.3693      8.865      9.057    

                     -0.1944E+05 -6.000    -0.6489    -0.6332      9.076    

                       8.777    -0.1891E+05 -6.000    

   21    2081.4        1.315     -2.102      3.011     -102.6      1.061    
                      0.8518      1.408     -99.70      3.552     0.4588    

                       2.157     -1.951      1.540      7000.      7000.    

                      -2.000      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -5.965     -3.618     -8.632      6.413    

                      -14.39     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.1105E-01 0.2544    -0.3348E-01 0.4510    

                     -0.2486    -0.1446     0.1394     0.8045E-01 0.9157E-01



                     -0.4503    -0.5000      0.000     0.8457E-01-0.3931E-01

                     -0.4697E-01 0.1431    -0.7116    -0.1141     0.2695    

                      0.3288E-01 0.1525E-02-0.6074     -1.229      7000.    



                     -0.2390    -0.6590     -2.142     -1.982    -0.3807    

                     -0.3252      9.204      8.720    -0.1672E+05 -6.000    

                     -0.4288     -2.381      9.354      8.808    -0.1969E+05



                      -6.000     0.5846    -0.3693      8.865      9.057    

                     -0.1944E+05 -6.000    -0.6489    -0.6332      9.076    

                       8.777    -0.1891E+05 -6.000    

   22    1843.5        1.315     -2.102      3.011     -102.6      1.061    
                      0.8518      1.408     -99.70      3.552     0.4588    

                       2.157     -1.951      1.540      7000.      7000.    

                      -2.000      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -5.965     -3.618     -8.632      6.413    

                      -14.39     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.1105E-01 0.2544    -0.3348E-01 0.1510    

                     -0.2486     0.1554     0.1394     0.8045E-01 0.9157E-01



                     -0.4503    -0.5000      0.000     0.8457E-01-0.3931E-01

                     -0.4697E-01 0.1431    -0.7116    -0.1141     0.2695    

                      0.3288E-01 0.1525E-02-0.6074     -1.229      7000.    



                     -0.2390    -0.6590     -2.142     -1.982    -0.3807    

                     -0.3252      9.204      8.720    -0.1672E+05 -6.000    

                     -0.4288     -2.381      9.354      8.808    -0.1969E+05



                      -6.000     0.5846    -0.3693      8.865      9.057    

                     -0.1944E+05 -6.000    -0.6489    -0.6332      9.076    

                       8.777    -0.1891E+05 -6.000    

   23    2076.4        1.315     -2.102      3.011     -102.6      1.061    
                      0.8518      1.408     -99.70      3.552     0.4588    

                       2.157     -1.951      1.540      7000.      7000.    

                      -2.000      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -5.965     -3.618     -8.632      6.413    

                      -14.39     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.1105E-01 0.2544    -0.3348E-01 0.1510    

                     -0.2486    -0.1446     0.4394     0.8045E-01 0.9157E-01



                     -0.4503    -0.5000      0.000     0.8457E-01-0.3931E-01

                     -0.4697E-01 0.1431    -0.7116    -0.1141     0.2695    

                      0.3288E-01 0.1525E-02-0.6074     -1.229      7000.    



                     -0.2390    -0.6590     -2.142     -1.982    -0.3807    

                     -0.3252      9.204      8.720    -0.1672E+05 -6.000    

                     -0.4288     -2.381      9.354      8.808    -0.1969E+05



                      -6.000     0.5846    -0.3693      8.865      9.057    

                     -0.1944E+05 -6.000    -0.6489    -0.6332      9.076    

                       8.777    -0.1891E+05 -6.000    

   24    2035.2        1.315     -2.102      3.011     -102.6      1.061    
                      0.8518      1.408     -99.70      3.552     0.4588    

                       2.157     -1.951      1.540      7000.      7000.    

                      -2.000      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -5.965     -3.618     -8.632      6.413    

                      -14.39     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.1105E-01 0.2544    -0.3348E-01 0.1510    

                     -0.2486    -0.1446     0.1394     0.3804     0.9157E-01



                     -0.4503    -0.5000      0.000     0.8457E-01-0.3931E-01

                     -0.4697E-01 0.1431    -0.7116    -0.1141     0.2695    

                      0.3288E-01 0.1525E-02-0.6074     -1.229      7000.    



                     -0.2390    -0.6590     -2.142     -1.982    -0.3807    

                     -0.3252      9.204      8.720    -0.1672E+05 -6.000    

                     -0.4288     -2.381      9.354      8.808    -0.1969E+05



                      -6.000     0.5846    -0.3693      8.865      9.057    

                     -0.1944E+05 -6.000    -0.6489    -0.6332      9.076    

                       8.777    -0.1891E+05 -6.000    

   25    2029.8        1.315     -2.102      3.011     -102.6      1.061    
                      0.8518      1.408     -99.70      3.552     0.4588    

                       2.157     -1.951      1.540      7000.      7000.    

                      -2.000      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -5.965     -3.618     -8.632      6.413    

                      -14.39     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.1105E-01 0.2544    -0.3348E-01 0.1510    

                     -0.2486    -0.1446     0.1394     0.8045E-01 0.3916    



                     -0.4503    -0.5000      0.000     0.8457E-01-0.3931E-01

                     -0.4697E-01 0.1431    -0.7116    -0.1141     0.2695    

                      0.3288E-01 0.1525E-02-0.6074     -1.229      7000.    



                     -0.2390    -0.6590     -2.142     -1.982    -0.3807    

                     -0.3252      9.204      8.720    -0.1672E+05 -6.000    

                     -0.4288     -2.381      9.354      8.808    -0.1969E+05



                      -6.000     0.5846    -0.3693      8.865      9.057    

                     -0.1944E+05 -6.000    -0.6489    -0.6332      9.076    

                       8.777    -0.1891E+05 -6.000    

   26    1882.0        1.315     -2.102      3.011     -102.6      1.061    
                      0.8518      1.408     -99.70      3.552     0.4588    

                       2.157     -1.951      1.540      7000.      7000.    

                      -2.000      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -5.965     -3.618     -8.632      6.413    

                      -14.39     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.1105E-01 0.2544    -0.3348E-01 0.1510    

                     -0.2486    -0.1446     0.1394     0.8045E-01 0.9157E-01



                      0.4970E-01-0.5000      0.000     0.8457E-01-0.3931E-01

                     -0.4697E-01 0.1431    -0.7116    -0.1141     0.2695    

                      0.3288E-01 0.1525E-02-0.6074     -1.229      7000.    



                     -0.2390    -0.6590     -2.142     -1.982    -0.3807    

                     -0.3252      9.204      8.720    -0.1672E+05 -6.000    

                     -0.4288     -2.381      9.354      8.808    -0.1969E+05



                      -6.000     0.5846    -0.3693      8.865      9.057    

                     -0.1944E+05 -6.000    -0.6489    -0.6332      9.076    

                       8.777    -0.1891E+05 -6.000    

   27    2342.6        1.315     -2.102      3.011     -102.6      1.061    
                      0.8518      1.408     -99.70      3.552     0.4588    

                       2.157     -1.951      1.540      7000.      7000.    

                      -2.000      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -5.965     -3.618     -8.632      6.413    

                      -14.39     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.1105E-01 0.2544    -0.3348E-01 0.1510    

                     -0.2486    -0.1446     0.1394     0.8045E-01 0.9157E-01



                     -0.4503      0.000      0.000     0.8457E-01-0.3931E-01

                     -0.4697E-01 0.1431    -0.7116    -0.1141     0.2695    

                      0.3288E-01 0.1525E-02-0.6074     -1.229      7000.    



                     -0.2390    -0.6590     -2.142     -1.982    -0.3807    

                     -0.3252      9.204      8.720    -0.1672E+05 -6.000    

                     -0.4288     -2.381      9.354      8.808    -0.1969E+05



                      -6.000     0.5846    -0.3693      8.865      9.057    

                     -0.1944E+05 -6.000    -0.6489    -0.6332      9.076    

                       8.777    -0.1891E+05 -6.000    

   28    1898.6        1.315     -2.102      3.011     -102.6      1.061    
                      0.8518      1.408     -99.70      3.552     0.4588    

                       2.157     -1.951      1.540      7000.      7000.    

                      -2.000      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -5.965     -3.618     -8.632      6.413    

                      -14.39     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.1105E-01 0.2544    -0.3348E-01 0.1510    

                     -0.2486    -0.1446     0.1394     0.8045E-01 0.9157E-01



                     -0.4503    -0.5000      0.000     0.3846    -0.3931E-01

                     -0.4697E-01 0.1431    -0.7116    -0.1141     0.2695    

                      0.3288E-01 0.1525E-02-0.6074     -1.229      7000.    



                     -0.2390    -0.6590     -2.142     -1.982    -0.3807    

                     -0.3252      9.204      8.720    -0.1672E+05 -6.000    

                     -0.4288     -2.381      9.354      8.808    -0.1969E+05



                      -6.000     0.5846    -0.3693      8.865      9.057    

                     -0.1944E+05 -6.000    -0.6489    -0.6332      9.076    

                       8.777    -0.1891E+05 -6.000    

   29    1859.4        1.315     -2.102      3.011     -102.6      1.061    
                      0.8518      1.408     -99.70      3.552     0.4588    

                       2.157     -1.951      1.540      7000.      7000.    

                      -2.000      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -5.965     -3.618     -8.632      6.413    

                      -14.39     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.1105E-01 0.2544    -0.3348E-01 0.1510    

                     -0.2486    -0.1446     0.1394     0.8045E-01 0.9157E-01



                     -0.4503    -0.5000      0.000     0.8457E-01 0.2607    

                     -0.4697E-01 0.1431    -0.7116    -0.1141     0.2695    

                      0.3288E-01 0.1525E-02-0.6074     -1.229      7000.    



                     -0.2390    -0.6590     -2.142     -1.982    -0.3807    

                     -0.3252      9.204      8.720    -0.1672E+05 -6.000    

                     -0.4288     -2.381      9.354      8.808    -0.1969E+05



                      -6.000     0.5846    -0.3693      8.865      9.057    

                     -0.1944E+05 -6.000    -0.6489    -0.6332      9.076    

                       8.777    -0.1891E+05 -6.000    

   30    1837.3        1.315     -2.102      3.011     -102.6      1.061    
                      0.8518      1.408     -99.70      3.552     0.4588    

                       2.157     -1.951      1.540      7000.      7000.    

                      -2.000      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -5.965     -3.618     -8.632      6.413    

                      -14.39     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.1105E-01 0.2544    -0.3348E-01 0.1510    

                     -0.2486    -0.1446     0.1394     0.8045E-01 0.9157E-01



                     -0.4503    -0.5000      0.000     0.8457E-01-0.3931E-01

                      0.2530     0.1431    -0.7116    -0.1141     0.2695    

                      0.3288E-01 0.1525E-02-0.6074     -1.229      7000.    



                     -0.2390    -0.6590     -2.142     -1.982    -0.3807    

                     -0.3252      9.204      8.720    -0.1672E+05 -6.000    

                     -0.4288     -2.381      9.354      8.808    -0.1969E+05



                      -6.000     0.5846    -0.3693      8.865      9.057    

                     -0.1944E+05 -6.000    -0.6489    -0.6332      9.076    

                       8.777    -0.1891E+05 -6.000    

   31    1904.4        1.315     -2.102      3.011     -102.6      1.061    
                      0.8518      1.408     -99.70      3.552     0.4588    

                       2.157     -1.951      1.540      7000.      7000.    

                      -2.000      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -5.965     -3.618     -8.632      6.413    

                      -14.39     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.1105E-01 0.2544    -0.3348E-01 0.1510    

                     -0.2486    -0.1446     0.1394     0.8045E-01 0.9157E-01



                     -0.4503    -0.5000      0.000     0.8457E-01-0.3931E-01

                     -0.4697E-01 0.4431    -0.7116    -0.1141     0.2695    

                      0.3288E-01 0.1525E-02-0.6074     -1.229      7000.    



                     -0.2390    -0.6590     -2.142     -1.982    -0.3807    

                     -0.3252      9.204      8.720    -0.1672E+05 -6.000    

                     -0.4288     -2.381      9.354      8.808    -0.1969E+05



                      -6.000     0.5846    -0.3693      8.865      9.057    

                     -0.1944E+05 -6.000    -0.6489    -0.6332      9.076    

                       8.777    -0.1891E+05 -6.000    

   32    1840.0        1.315     -2.102      3.011     -102.6      1.061    
                      0.8518      1.408     -99.70      3.552     0.4588    

                       2.157     -1.951      1.540      7000.      7000.    

                      -2.000      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -5.965     -3.618     -8.632      6.413    

                      -14.39     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.1105E-01 0.2544    -0.3348E-01 0.1510    

                     -0.2486    -0.1446     0.1394     0.8045E-01 0.9157E-01



                     -0.4503    -0.5000      0.000     0.8457E-01-0.3931E-01

                     -0.4697E-01 0.1431    -0.7116     0.1859     0.2695    

                      0.3288E-01 0.1525E-02-0.6074     -1.229      7000.    



                     -0.2390    -0.6590     -2.142     -1.982    -0.3807    

                     -0.3252      9.204      8.720    -0.1672E+05 -6.000    

                     -0.4288     -2.381      9.354      8.808    -0.1969E+05



                      -6.000     0.5846    -0.3693      8.865      9.057    

                     -0.1944E+05 -6.000    -0.6489    -0.6332      9.076    

                       8.777    -0.1891E+05 -6.000    

   33    1898.1        1.315     -2.102      3.011     -102.6      1.061    
                      0.8518      1.408     -99.70      3.552     0.4588    

                       2.157     -1.951      1.540      7000.      7000.    

                      -2.000      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -5.965     -3.618     -8.632      6.413    

                      -14.39     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.1105E-01 0.2544    -0.3348E-01 0.1510    

                     -0.2486    -0.1446     0.1394     0.8045E-01 0.9157E-01



                     -0.4503    -0.5000      0.000     0.8457E-01-0.3931E-01

                     -0.4697E-01 0.1431    -0.7116    -0.1141     0.5695    

                      0.3288E-01 0.1525E-02-0.6074     -1.229      7000.    



                     -0.2390    -0.6590     -2.142     -1.982    -0.3807    

                     -0.3252      9.204      8.720    -0.1672E+05 -6.000    

                     -0.4288     -2.381      9.354      8.808    -0.1969E+05



                      -6.000     0.5846    -0.3693      8.865      9.057    

                     -0.1944E+05 -6.000    -0.6489    -0.6332      9.076    

                       8.777    -0.1891E+05 -6.000    

   34    1871.3        1.315     -2.102      3.011     -102.6      1.061    
                      0.8518      1.408     -99.70      3.552     0.4588    

                       2.157     -1.951      1.540      7000.      7000.    

                      -2.000      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -5.965     -3.618     -8.632      6.413    

                      -14.39     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.1105E-01 0.2544    -0.3348E-01 0.1510    

                     -0.2486    -0.1446     0.1394     0.8045E-01 0.9157E-01



                     -0.4503    -0.5000      0.000     0.8457E-01-0.3931E-01

                     -0.4697E-01 0.1431    -0.7116    -0.1141     0.2695    

                      0.3329     0.1525E-02-0.6074     -1.229      7000.    



                     -0.2390    -0.6590     -2.142     -1.982    -0.3807    

                     -0.3252      9.204      8.720    -0.1672E+05 -6.000    

                     -0.4288     -2.381      9.354      8.808    -0.1969E+05



                      -6.000     0.5846    -0.3693      8.865      9.057    

                     -0.1944E+05 -6.000    -0.6489    -0.6332      9.076    

                       8.777    -0.1891E+05 -6.000    

   35    1847.4        1.315     -2.102      3.011     -102.6      1.061    
                      0.8518      1.408     -99.70      3.552     0.4588    

                       2.157     -1.951      1.540      7000.      7000.    

                      -2.000      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -5.965     -3.618     -8.632      6.413    

                      -14.39     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.1105E-01 0.2544    -0.3348E-01 0.1510    

                     -0.2486    -0.1446     0.1394     0.8045E-01 0.9157E-01



                     -0.4503    -0.5000      0.000     0.8457E-01-0.3931E-01

                     -0.4697E-01 0.1431    -0.7116    -0.1141     0.2695    

                      0.3288E-01 0.3015    -0.6074     -1.229      7000.    



                     -0.2390    -0.6590     -2.142     -1.982    -0.3807    

                     -0.3252      9.204      8.720    -0.1672E+05 -6.000    

                     -0.4288     -2.381      9.354      8.808    -0.1969E+05



                      -6.000     0.5846    -0.3693      8.865      9.057    

                     -0.1944E+05 -6.000    -0.6489    -0.6332      9.076    

                       8.777    -0.1891E+05 -6.000    

   36    1862.0        1.315     -2.102      3.011     -102.6      1.061    
                      0.8518      1.408     -99.70      3.552     0.4588    

                       2.157     -1.951      1.540      7000.      7000.    

                      -2.000      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -5.965     -3.618     -8.632      6.413    

                      -14.39     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.1105E-01 0.2544    -0.3348E-01 0.1510    

                     -0.2486    -0.1446     0.1394     0.8045E-01 0.9157E-01



                     -0.4503    -0.5000      0.000     0.8457E-01-0.3931E-01

                     -0.4697E-01 0.1431    -0.7116    -0.1141     0.2695    

                      0.3288E-01 0.1525E-02-0.3074     -1.229      7000.    



                     -0.2390    -0.6590     -2.142     -1.982    -0.3807    

                     -0.3252      9.204      8.720    -0.1672E+05 -6.000    

                     -0.4288     -2.381      9.354      8.808    -0.1969E+05



                      -6.000     0.5846    -0.3693      8.865      9.057    

                     -0.1944E+05 -6.000    -0.6489    -0.6332      9.076    

                       8.777    -0.1891E+05 -6.000    

   37    1921.0        1.315     -2.102      3.011     -102.6      1.061    
                      0.8518      1.408     -99.70      3.552     0.4588    

                       2.157     -1.951      1.540      7000.      7000.    

                      -2.000      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -5.965     -3.618     -8.632      6.413    

                      -14.39     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.1105E-01 0.2544    -0.3348E-01 0.1510    

                     -0.2486    -0.1446     0.1394     0.8045E-01 0.9157E-01



                     -0.4503    -0.5000      0.000     0.8457E-01-0.3931E-01

                     -0.4697E-01 0.1431    -0.7116    -0.1141     0.2695    

                      0.3288E-01 0.1525E-02-0.6074    -0.9290      7000.    



                     -0.2390    -0.6590     -2.142     -1.982    -0.3807    

                     -0.3252      9.204      8.720    -0.1672E+05 -6.000    

                     -0.4288     -2.381      9.354      8.808    -0.1969E+05



                      -6.000     0.5846    -0.3693      8.865      9.057    

                     -0.1944E+05 -6.000    -0.6489    -0.6332      9.076    

                       8.777    -0.1891E+05 -6.000    

   38    2082.4        1.315     -2.102      3.011     -102.6      1.061    
                      0.8518      1.408     -99.70      3.552     0.4588    

                       2.157     -1.951      1.540      7000.      7000.    

                      -2.000      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -5.965     -3.618     -8.632      6.413    

                      -14.39     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.1105E-01 0.2544    -0.3348E-01 0.1510    

                     -0.2486    -0.1446     0.1394     0.8045E-01 0.9157E-01



                     -0.4503    -0.5000      0.000     0.8457E-01-0.3931E-01

                     -0.4697E-01 0.1431    -0.7116    -0.1141     0.2695    

                      0.3288E-01 0.1525E-02-0.6074     -1.229      7000.    



                     -0.2390    -0.6590     -2.142     -1.982    -0.3807    

                     -0.3252      9.604      8.720    -0.1672E+05 -6.000    

                     -0.4288     -2.381      9.354      8.808    -0.1969E+05



                      -6.000     0.5846    -0.3693      8.865      9.057    

                     -0.1944E+05 -6.000    -0.6489    -0.6332      9.076    

                       8.777    -0.1891E+05 -6.000    

   39    1865.6        1.315     -2.102      3.011     -102.6      1.061    
                      0.8518      1.408     -99.70      3.552     0.4588    

                       2.157     -1.951      1.540      7000.      7000.    

                      -2.000      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -5.965     -3.618     -8.632      6.413    

                      -14.39     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.1105E-01 0.2544    -0.3348E-01 0.1510    

                     -0.2486    -0.1446     0.1394     0.8045E-01 0.9157E-01



                     -0.4503    -0.5000      0.000     0.8457E-01-0.3931E-01

                     -0.4697E-01 0.1431    -0.7116    -0.1141     0.2695    

                      0.3288E-01 0.1525E-02-0.6074     -1.229      7000.    



                     -0.2390    -0.6590     -2.142     -1.982    -0.3807    

                     -0.3252      9.204      9.120    -0.1672E+05 -6.000    

                     -0.4288     -2.381      9.354      8.808    -0.1969E+05



                      -6.000     0.5846    -0.3693      8.865      9.057    

                     -0.1944E+05 -6.000    -0.6489    -0.6332      9.076    

                       8.777    -0.1891E+05 -6.000    

   40    2000.8        1.315     -2.102      3.011     -102.6      1.061    
                      0.8518      1.408     -99.70      3.552     0.4588    

                       2.157     -1.951      1.540      7000.      7000.    

                      -2.000      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -5.965     -3.618     -8.632      6.413    

                      -14.39     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.1105E-01 0.2544    -0.3348E-01 0.1510    

                     -0.2486    -0.1446     0.1394     0.8045E-01 0.9157E-01



                     -0.4503    -0.5000      0.000     0.8457E-01-0.3931E-01

                     -0.4697E-01 0.1431    -0.7116    -0.1141     0.2695    

                      0.3288E-01 0.1525E-02-0.6074     -1.229      7000.    



                     -0.2390    -0.6590     -2.142     -1.982    -0.3807    

                     -0.3252      9.204      8.720    -0.1672E+05 -6.000    

                      0.5712     -2.381      9.354      8.808    -0.1969E+05



                      -6.000     0.5846    -0.3693      8.865      9.057    

                     -0.1944E+05 -6.000    -0.6489    -0.6332      9.076    

                       8.777    -0.1891E+05 -6.000    

   41    1873.1        1.315     -2.102      3.011     -102.6      1.061    
                      0.8518      1.408     -99.70      3.552     0.4588    

                       2.157     -1.951      1.540      7000.      7000.    

                      -2.000      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -5.965     -3.618     -8.632      6.413    

                      -14.39     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.1105E-01 0.2544    -0.3348E-01 0.1510    

                     -0.2486    -0.1446     0.1394     0.8045E-01 0.9157E-01



                     -0.4503    -0.5000      0.000     0.8457E-01-0.3931E-01

                     -0.4697E-01 0.1431    -0.7116    -0.1141     0.2695    

                      0.3288E-01 0.1525E-02-0.6074     -1.229      7000.    



                     -0.2390    -0.6590     -2.142     -1.982    -0.3807    

                     -0.3252      9.204      8.720    -0.1672E+05 -6.000    

                     -0.4288     -1.381      9.354      8.808    -0.1969E+05



                      -6.000     0.5846    -0.3693      8.865      9.057    

                     -0.1944E+05 -6.000    -0.6489    -0.6332      9.076    

                       8.777    -0.1891E+05 -6.000    

   42    1938.4        1.315     -2.102      3.011     -102.6      1.061    
                      0.8518      1.408     -99.70      3.552     0.4588    

                       2.157     -1.951      1.540      7000.      7000.    

                      -2.000      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -5.965     -3.618     -8.632      6.413    

                      -14.39     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.1105E-01 0.2544    -0.3348E-01 0.1510    

                     -0.2486    -0.1446     0.1394     0.8045E-01 0.9157E-01



                     -0.4503    -0.5000      0.000     0.8457E-01-0.3931E-01

                     -0.4697E-01 0.1431    -0.7116    -0.1141     0.2695    

                      0.3288E-01 0.1525E-02-0.6074     -1.229      7000.    



                     -0.2390    -0.6590     -2.142     -1.982    -0.3807    

                     -0.3252      9.204      8.720    -0.1672E+05 -6.000    

                     -0.4288     -2.381      9.754      8.808    -0.1969E+05



                      -6.000     0.5846    -0.3693      8.865      9.057    

                     -0.1944E+05 -6.000    -0.6489    -0.6332      9.076    

                       8.777    -0.1891E+05 -6.000    

   43    1849.5        1.315     -2.102      3.011     -102.6      1.061    
                      0.8518      1.408     -99.70      3.552     0.4588    

                       2.157     -1.951      1.540      7000.      7000.    

                      -2.000      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -5.965     -3.618     -8.632      6.413    

                      -14.39     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.1105E-01 0.2544    -0.3348E-01 0.1510    

                     -0.2486    -0.1446     0.1394     0.8045E-01 0.9157E-01



                     -0.4503    -0.5000      0.000     0.8457E-01-0.3931E-01

                     -0.4697E-01 0.1431    -0.7116    -0.1141     0.2695    

                      0.3288E-01 0.1525E-02-0.6074     -1.229      7000.    



                     -0.2390    -0.6590     -2.142     -1.982    -0.3807    

                     -0.3252      9.204      8.720    -0.1672E+05 -6.000    

                     -0.4288     -2.381      9.354      9.208    -0.1969E+05



                      -6.000     0.5846    -0.3693      8.865      9.057    

                     -0.1944E+05 -6.000    -0.6489    -0.6332      9.076    

                       8.777    -0.1891E+05 -6.000    

   44    1830.8        1.315     -2.102      3.011     -102.6      1.061    
                      0.8518      1.408     -99.70      3.552     0.4588    

                       2.157     -1.951      1.540      7000.      7000.    

                      -2.000      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -5.965     -3.618     -8.632      6.413    

                      -14.39     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.1105E-01 0.2544    -0.3348E-01 0.1510    

                     -0.2486    -0.1446     0.1394     0.8045E-01 0.9157E-01



                     -0.4503    -0.5000      0.000     0.8457E-01-0.3931E-01

                     -0.4697E-01 0.1431    -0.7116    -0.1141     0.2695    

                      0.3288E-01 0.1525E-02-0.6074     -1.229      7000.    



                     -0.2390    -0.6590     -2.142     -1.982    -0.3807    

                     -0.3252      9.204      8.720    -0.1672E+05 -6.000    

                     -0.4288     -2.381      9.354      8.808    -0.1969E+05



                      -6.000      1.585    -0.3693      8.865      9.057    

                     -0.1944E+05 -6.000    -0.6489    -0.6332      9.076    

                       8.777    -0.1891E+05 -6.000    

   45    1860.4        1.315     -2.102      3.011     -102.6      1.061    
                      0.8518      1.408     -99.70      3.552     0.4588    

                       2.157     -1.951      1.540      7000.      7000.    

                      -2.000      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -5.965     -3.618     -8.632      6.413    

                      -14.39     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.1105E-01 0.2544    -0.3348E-01 0.1510    

                     -0.2486    -0.1446     0.1394     0.8045E-01 0.9157E-01



                     -0.4503    -0.5000      0.000     0.8457E-01-0.3931E-01

                     -0.4697E-01 0.1431    -0.7116    -0.1141     0.2695    

                      0.3288E-01 0.1525E-02-0.6074     -1.229      7000.    



                     -0.2390    -0.6590     -2.142     -1.982    -0.3807    

                     -0.3252      9.204      8.720    -0.1672E+05 -6.000    

                     -0.4288     -2.381      9.354      8.808    -0.1969E+05



                      -6.000     0.5846     0.6307      8.865      9.057    

                     -0.1944E+05 -6.000    -0.6489    -0.6332      9.076    

                       8.777    -0.1891E+05 -6.000    

   46    2435.0        1.315     -2.102      3.011     -102.6      1.061    
                      0.8518      1.408     -99.70      3.552     0.4588    

                       2.157     -1.951      1.540      7000.      7000.    

                      -2.000      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -5.965     -3.618     -8.632      6.413    

                      -14.39     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.1105E-01 0.2544    -0.3348E-01 0.1510    

                     -0.2486    -0.1446     0.1394     0.8045E-01 0.9157E-01



                     -0.4503    -0.5000      0.000     0.8457E-01-0.3931E-01

                     -0.4697E-01 0.1431    -0.7116    -0.1141     0.2695    

                      0.3288E-01 0.1525E-02-0.6074     -1.229      7000.    



                     -0.2390    -0.6590     -2.142     -1.982    -0.3807    

                     -0.3252      9.204      8.720    -0.1672E+05 -6.000    

                     -0.4288     -2.381      9.354      8.808    -0.1969E+05



                      -6.000     0.5846    -0.3693      9.265      9.057    

                     -0.1944E+05 -6.000    -0.6489    -0.6332      9.076    

                       8.777    -0.1891E+05 -6.000    

   47    2025.8        1.315     -2.102      3.011     -102.6      1.061    
                      0.8518      1.408     -99.70      3.552     0.4588    

                       2.157     -1.951      1.540      7000.      7000.    

                      -2.000      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -5.965     -3.618     -8.632      6.413    

                      -14.39     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.1105E-01 0.2544    -0.3348E-01 0.1510    

                     -0.2486    -0.1446     0.1394     0.8045E-01 0.9157E-01



                     -0.4503    -0.5000      0.000     0.8457E-01-0.3931E-01

                     -0.4697E-01 0.1431    -0.7116    -0.1141     0.2695    

                      0.3288E-01 0.1525E-02-0.6074     -1.229      7000.    



                     -0.2390    -0.6590     -2.142     -1.982    -0.3807    

                     -0.3252      9.204      8.720    -0.1672E+05 -6.000    

                     -0.4288     -2.381      9.354      8.808    -0.1969E+05



                      -6.000     0.5846    -0.3693      8.865      9.457    

                     -0.1944E+05 -6.000    -0.6489    -0.6332      9.076    

                       8.777    -0.1891E+05 -6.000    

   48    1892.7        1.315     -2.102      3.011     -102.6      1.061    
                      0.8518      1.408     -99.70      3.552     0.4588    

                       2.157     -1.951      1.540      7000.      7000.    

                      -2.000      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -5.965     -3.618     -8.632      6.413    

                      -14.39     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.1105E-01 0.2544    -0.3348E-01 0.1510    

                     -0.2486    -0.1446     0.1394     0.8045E-01 0.9157E-01



                     -0.4503    -0.5000      0.000     0.8457E-01-0.3931E-01

                     -0.4697E-01 0.1431    -0.7116    -0.1141     0.2695    

                      0.3288E-01 0.1525E-02-0.6074     -1.229      7000.    



                     -0.2390    -0.6590     -2.142     -1.982    -0.3807    

                     -0.3252      9.204      8.720    -0.1672E+05 -6.000    

                     -0.4288     -2.381      9.354      8.808    -0.1969E+05



                      -6.000     0.5846    -0.3693      8.865      9.057    

                     -0.1944E+05 -6.000     0.3511    -0.6332      9.076    

                       8.777    -0.1891E+05 -6.000    

   49    1881.6        1.315     -2.102      3.011     -102.6      1.061    
                      0.8518      1.408     -99.70      3.552     0.4588    

                       2.157     -1.951      1.540      7000.      7000.    

                      -2.000      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -5.965     -3.618     -8.632      6.413    

                      -14.39     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.1105E-01 0.2544    -0.3348E-01 0.1510    

                     -0.2486    -0.1446     0.1394     0.8045E-01 0.9157E-01



                     -0.4503    -0.5000      0.000     0.8457E-01-0.3931E-01

                     -0.4697E-01 0.1431    -0.7116    -0.1141     0.2695    

                      0.3288E-01 0.1525E-02-0.6074     -1.229      7000.    



                     -0.2390    -0.6590     -2.142     -1.982    -0.3807    

                     -0.3252      9.204      8.720    -0.1672E+05 -6.000    

                     -0.4288     -2.381      9.354      8.808    -0.1969E+05



                      -6.000     0.5846    -0.3693      8.865      9.057    

                     -0.1944E+05 -6.000    -0.6489     0.3668      9.076    

                       8.777    -0.1891E+05 -6.000    

   50    1965.2        1.315     -2.102      3.011     -102.6      1.061    
                      0.8518      1.408     -99.70      3.552     0.4588    

                       2.157     -1.951      1.540      7000.      7000.    

                      -2.000      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -5.965     -3.618     -8.632      6.413    

                      -14.39     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.1105E-01 0.2544    -0.3348E-01 0.1510    

                     -0.2486    -0.1446     0.1394     0.8045E-01 0.9157E-01



                     -0.4503    -0.5000      0.000     0.8457E-01-0.3931E-01

                     -0.4697E-01 0.1431    -0.7116    -0.1141     0.2695    

                      0.3288E-01 0.1525E-02-0.6074     -1.229      7000.    



                     -0.2390    -0.6590     -2.142     -1.982    -0.3807    

                     -0.3252      9.204      8.720    -0.1672E+05 -6.000    

                     -0.4288     -2.381      9.354      8.808    -0.1969E+05



                      -6.000     0.5846    -0.3693      8.865      9.057    

                     -0.1944E+05 -6.000    -0.6489    -0.6332      9.476    

                       8.777    -0.1891E+05 -6.000    

   51    1844.4        1.315     -2.102      3.011     -102.6      1.061    
                      0.8518      1.408     -99.70      3.552     0.4588    

                       2.157     -1.951      1.540      7000.      7000.    

                      -2.000      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -5.965     -3.618     -8.632      6.413    

                      -14.39     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.1105E-01 0.2544    -0.3348E-01 0.1510    

                     -0.2486    -0.1446     0.1394     0.8045E-01 0.9157E-01



                     -0.4503    -0.5000      0.000     0.8457E-01-0.3931E-01

                     -0.4697E-01 0.1431    -0.7116    -0.1141     0.2695    

                      0.3288E-01 0.1525E-02-0.6074     -1.229      7000.    



                     -0.2390    -0.6590     -2.142     -1.982    -0.3807    

                     -0.3252      9.204      8.720    -0.1672E+05 -6.000    

                     -0.4288     -2.381      9.354      8.808    -0.1969E+05



                      -6.000     0.5846    -0.3693      8.865      9.057    

                     -0.1944E+05 -6.000    -0.6489    -0.6332      9.076    

                       9.177    -0.1891E+05 -6.000    
 finished setting up initial simplex
 count number of function evaluations which here is neval=np1          51          51

beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    560.467      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    560.467               101
loop is:        1
neval is:       51


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      101
neval,tstepnext:       51     101

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.228570      -1.47591      -827.202       827.202       1868.22       2695.43    
   2  0.709707     -0.342904      -192.186       192.186       1799.18       1991.37    
   3  0.151889      -1.88460      -1056.26       1056.26       1842.02       2898.28    
   4  0.456170E-01  -3.08747      -1730.43       1730.43       2013.05       3743.48    
   5  0.882557     -0.124932      -70.0202       70.0202       1890.21       1960.23    
   6  0.711292     -0.340672      -190.935       190.935       1904.86       2095.80    
   7  0.241669      -1.42019      -795.969       795.969       1969.92       2765.88    
   8  0.682871     -0.381450      -213.790       213.790       1924.71       2138.50    
   9  0.500657     -0.691834      -387.750       387.750       2029.67       2417.42    
  10  0.494633     -0.703939      -394.535       394.535       1935.97       2330.51    
  11  0.437126     -0.827535      -463.806       463.806       1894.57       2358.38    
  12  0.462981     -0.770069      -431.599       431.599       2396.21       2827.81    
  13  0.988878     -0.111840E-01  -6.26826       6.26826       1883.82       1890.09    
  14  0.878158     -0.129929      -72.8210       72.8210       2207.80       2280.63    
  15  0.825605     -0.191638      -107.407       107.407       1868.19       1975.59    
  16  0.966665     -0.339033E-01  -19.0017       19.0017       1867.99       1886.99    
  17  0.340930      -1.07608      -603.106       603.106       1868.22       2471.33    
  18  0.288920      -1.24161      -695.880       695.880       2004.40       2700.28    
  19  0.442843     -0.814539      -456.523       456.523       2116.68       2573.21    
  20  0.878635     -0.129386      -72.5165       72.5165       1959.76       2032.28    
  21  0.198777E-01  -3.91816      -2196.00       2196.00       2081.44       4277.44    
  22  0.315829      -1.15255      -645.968       645.968       1843.54       2489.51    
  23  0.208690      -1.56690      -878.199       878.199       2076.38       2954.58    
  24  0.849393     -0.163234      -91.4871       91.4871       2035.22       2126.71    
  25  0.945818     -0.557056E-01  -31.2212       31.2212       2029.82       2061.04    
  26  0.567839     -0.565917      -317.178       317.178       1881.96       2199.14    
  27  0.718388     -0.330745      -185.372       185.372       2342.61       2527.98    
  28  0.115406      -2.15930      -1210.22       1210.22       1898.64       3108.85    
  29  0.659869E-01  -2.71830      -1523.52       1523.52       1859.42       3382.94    
  30  0.171393      -1.76380      -988.551       988.551       1837.28       2825.83    
  31  0.161953      -1.82045      -1020.30       1020.30       1904.43       2924.73    
  32  0.455406     -0.786566      -440.844       440.844       1839.98       2280.83    
  33  0.788693     -0.237378      -133.042       133.042       1898.07       2031.11    
  34  0.157754      -1.84672      -1035.03       1035.03       1871.32       2906.35    
  35  0.126279      -2.06926      -1159.75       1159.75       1847.39       3007.15    
  36  0.646962     -0.435467      -244.065       244.065       1862.04       2106.10    
  37  0.730769     -0.313658      -175.795       175.795       1921.00       2096.80    
  38  0.443446E-01  -3.11577      -1746.29       1746.29       2082.37       3828.65    
  39  0.219048      -1.51847      -851.050       851.050       1865.59       2716.64    
  40  0.311223E-01  -3.46983      -1944.73       1944.73       2000.81       3945.54    
  41  0.864417     -0.145700      -81.6602       81.6602       1873.15       1954.81    
  42  0.372606     -0.987233      -553.312       553.312       1938.43       2491.74    
  43  0.599250E-01  -2.81466      -1577.53       1577.53       1849.52       3427.04    
  44  0.250528      -1.38418      -775.789       775.789       1830.81       2606.60    
  45  0.404968E-01  -3.20653      -1797.16       1797.16       1860.39       3657.55    
  46  0.792822     -0.232156      -130.116       130.116       2435.02       2565.13    
  47  0.826691     -0.190324      -106.670       106.670       2025.84       2132.51    
  48  0.258424      -1.35316      -758.400       758.400       1892.75       2651.15    
  49  0.713620     -0.337405      -189.105       189.105       1881.57       2070.68    
  50  0.936186     -0.659413E-01  -36.9579       36.9579       1965.16       2002.11    
  51  0.655367E-01  -2.72514      -1527.35       1527.35       1844.36       3371.72    
loop,thermsimp(1:2)        1   827.202       192.186    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     53       1940.57          0.86          1.11         22.39          0.09          0.05         24.51
Just calling func    0   0         24.51


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     54       2339.37          0.88          1.12         22.00          0.16          0.05         24.19
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1940.57
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    560.467               101
loop is:        1
neval is:       53
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        1      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    560.467      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    560.467               101
loop is:        2
neval is:       53


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      101
neval,tstepnext:       53     101

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.352733      -1.04204      -584.032       584.032       1867.99       2452.02    
   2  0.440787     -0.819193      -459.131       459.131       1883.82       2342.95    
   3  0.685789     -0.377185      -211.400       211.400       1873.15       2084.55    
   4  0.673104     -0.395856      -221.864       221.864       1890.21       2112.07    
   5  0.655536     -0.422301      -236.686       236.686       1868.19       2104.87    
   6  0.422838     -0.860766      -482.431       482.431       1799.18       2281.61    
   7  0.300870      -1.20108      -673.165       673.165       1965.16       2638.32    
   8  0.776987     -0.252331      -141.423       141.423       1898.07       2039.49    
   9  0.170551      -1.76872      -991.310       991.310       1959.76       2951.07    
  10  0.587497     -0.531884      -298.104       298.104       2029.82       2327.93    
  11  0.250425      -1.38459      -776.020       776.020       1881.57       2657.59    
  12  0.776362E-01  -2.55572      -1432.40       1432.40       1904.86       3337.26    
  13  0.766647     -0.265729      -148.932       148.932       1921.00       2069.93    
  14  0.480193     -0.733568      -411.141       411.141       1862.04       2273.18    
  15  0.434643     -0.833231      -466.999       466.999       2035.22       2502.22    
  16  0.815924E-01  -2.50602      -1404.54       1404.54       2025.84       3430.38    
  17  0.724257E-01  -2.62519      -1471.34       1471.34       1924.71       3396.05    
  18  0.573795     -0.555483      -311.330       311.330       1881.96       2193.29    
  19  0.196096      -1.62915      -913.085       913.085       2207.80       3120.89    
  20  0.240673      -1.42432      -798.282       798.282       1839.98       2638.27    
  21  0.194228      -1.63872      -918.451       918.451       1935.97       2854.43    
  22  0.236387      -1.44229      -808.355       808.355       1894.57       2702.93    
  23  0.261662      -1.34070      -751.419       751.419       2029.67       2781.09    
  24  0.146321      -1.92195      -1077.19       1077.19       1868.22       2945.42    
  25  0.169637      -1.77410      -994.323       994.323       1843.54       2837.86    
  26  0.886717     -0.120229      -67.3845       67.3845       1938.43       2005.82    
  27  0.253412      -1.37274      -769.376       769.376       2342.61       3111.99    
  28  0.470820     -0.753279      -422.188       422.188       2435.02       2857.20    
  29  0.329871      -1.10905      -621.589       621.589       2116.68       2738.27    
  30  0.726784     -0.319126      -178.860       178.860       1830.81       2009.67    
  31  0.612351     -0.490450      -274.881       274.881       1892.75       2167.63    
  32  0.146573      -1.92023      -1076.23       1076.23       1868.22       2944.45    
  33  0.812633     -0.207476      -116.283       116.283       2004.40       2120.68    
  34  0.486789     -0.719925      -403.494       403.494       1865.59       2269.08    
  35  0.653508     -0.425400      -238.423       238.423       1969.92       2208.34    
  36  0.180127      -1.71409      -960.694       960.694       1837.28       2797.97    
  37  0.155218      -1.86292      -1044.11       1044.11       2396.21       3440.32    
  38  0.830615     -0.185589      -104.016       104.016       1842.02       1946.04    
  39  0.728345     -0.316980      -177.657       177.657       1871.32       2048.98    
  40  0.262318      -1.33820      -750.017       750.017       1904.43       2654.45    
  41  0.234222      -1.45148      -813.509       813.509       2076.38       2889.89    
  42  0.250201      -1.38549      -776.524       776.524       1847.39       2623.92    
  43  0.898433     -0.107103      -60.0280       60.0280       1898.64       1958.67    
  44  0.580277     -0.544250      -305.035       305.035       1844.36       2149.40    
  45  0.823617     -0.194050      -108.758       108.758       1859.42       1968.18    
  46  0.820676     -0.197627      -110.763       110.763       1849.52       1960.28    
  47  0.502494     -0.688171      -385.697       385.697       1860.39       2246.09    
  48  0.751016     -0.286329      -160.478       160.478       2013.05       2173.53    
  49  0.360461      -1.02037      -571.885       571.885       2082.37       2654.25    
  50  0.948712     -0.526497E-01  -29.5085       29.5085       2000.81       2030.32    
  51  0.452918     -0.792045      -443.916       443.916       1940.57       2384.49    
loop,thermsimp(1:2)        2   584.032       459.131    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     55       1831.67          0.88          1.12         22.02          0.06          0.05         24.13
Just calling func    0   0         24.13


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     56       2795.03          0.87          1.11         22.07          0.13          0.05         24.23
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1831.67
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    560.467               101
loop is:        2
neval is:       55
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        2      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    560.467      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    560.467               101
loop is:        3
neval is:       55


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      101
neval,tstepnext:       55     101

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.167898      -1.78440      -1000.10       1000.10       1842.02       2842.12    
   2  0.274399      -1.29317      -724.781       724.781       1898.64       2623.42    
   3  0.597410E-01  -2.81774      -1579.25       1579.25       1849.52       3428.77    
   4  0.283115E-01  -3.56449      -1997.78       1997.78       1859.42       3857.20    
   5  0.901069     -0.104174      -58.3861       58.3861       1938.43       1996.82    
   6  0.717939     -0.331371      -185.723       185.723       1830.81       2016.54    
   7  0.294866      -1.22123      -684.462       684.462       2000.81       2685.27    
   8  0.935651     -0.665127E-01  -37.2782       37.2782       1898.07       1935.35    
   9  0.314362      -1.15721      -648.579       648.579       1871.32       2519.90    
  10  0.807729     -0.213529      -119.676       119.676       1921.00       2040.68    
  11  0.757191     -0.278140      -155.888       155.888       1873.15       2029.03    
  12  0.508654     -0.675987      -378.869       378.869       1868.19       2247.06    
  13  0.722060     -0.325647      -182.514       182.514       1890.21       2072.72    
  14  0.424032     -0.857947      -480.851       480.851       2004.40       2485.25    
  15  0.786154     -0.240602      -134.850       134.850       1844.36       1979.21    
  16  0.399894     -0.916557      -513.700       513.700       1892.75       2406.45    
  17  0.757416     -0.277843      -155.722       155.722       2013.05       2168.78    
  18  0.637270     -0.450563      -252.526       252.526       1881.96       2134.49    
  19  0.586055     -0.534342      -299.481       299.481       1969.92       2269.40    
  20  0.821724     -0.196351      -110.048       110.048       1860.39       1970.44    
  21  0.921558     -0.816897E-01  -45.7844       45.7844       1865.59       1911.37    
  22  0.985596     -0.145083E-01  -8.13145       8.13145       1862.04       1870.17    
  23  0.257194      -1.35793      -761.073       761.073       1799.18       2560.25    
  24  0.921438E-01  -2.38440      -1336.38       1336.38       2029.82       3366.20    
  25  0.114653      -2.16584      -1213.89       1213.89       1883.82       3097.71    
  26  0.379827     -0.968040      -542.555       542.555       1940.57       2483.13    
  27  0.541451     -0.613503      -343.848       343.848       1867.99       2211.84    
  28  0.544274     -0.608302      -340.934       340.934       2035.22       2376.16    
  29  0.934365     -0.678883E-01  -38.0492       38.0492       1847.39       1885.44    
  30  0.266419E-01  -3.62527      -2031.85       2031.85       1839.98       3871.83    
  31  0.919572     -0.838466E-01  -46.9933       46.9933       1965.16       2012.15    
  32  0.864639     -0.145444      -81.5165       81.5165       2082.37       2163.88    
  33  0.341156      -1.07542      -602.736       602.736       1904.43       2507.17    
  34  0.803175     -0.219182      -122.845       122.845       1881.57       2004.42    
  35  0.699424     -0.357498      -200.366       200.366       1894.57       2094.94    
  36  0.223868E-01  -3.79928      -2129.38       2129.38       2116.68       4246.06    
  37  0.605689     -0.501389      -281.012       281.012       2029.67       2310.68    
  38  0.312349      -1.16363      -652.179       652.179       1837.28       2489.46    
  39  0.437501     -0.826675      -463.325       463.325       1843.54       2306.86    
  40  0.303330      -1.19293      -668.600       668.600       1935.97       2604.57    
  41  0.129735      -2.04226      -1144.62       1144.62       2435.02       3579.64    
  42  0.954352     -0.467224E-01  -26.1864       26.1864       2076.38       2102.56    
  43  0.519807     -0.654297      -366.712       366.712       1868.22       2234.94    
  44  0.950560     -0.507036E-01  -28.4177       28.4177       1868.22       1896.64    
  45  0.443941     -0.812064      -455.135       455.135       1959.76       2414.90    
  46  0.911446     -0.927229E-01  -51.9682       51.9682       2342.61       2394.58    
  47  0.782475     -0.245293      -137.479       137.479       2207.80       2345.28    
  48  0.412534     -0.885438      -496.259       496.259       1904.86       2401.12    
  49  0.843850     -0.169780      -95.1563       95.1563       1924.71       2019.87    
  50  0.149432      -1.90091      -1065.40       1065.40       2025.84       3091.24    
  51  0.292747      -1.22845      -688.505       688.505       1831.67       2520.17    
loop,thermsimp(1:2)        3   1000.10       724.781    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     57       1886.43          0.87          1.12         22.05          0.06          0.05         24.15
Just calling func    0   0         24.15


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     58       2149.30          0.86          1.12         22.18          0.11          0.04         24.31
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1886.43
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    560.467               101
loop is:        3
neval is:       57
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        3      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    560.467      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    560.467               101
loop is:        4
neval is:       57


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      101
neval,tstepnext:       57     101

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.883237     -0.124162      -69.5887       69.5887       1862.04       1931.63    
   2  0.114178      -2.16999      -1216.21       1216.21       1847.39       3063.60    
   3  0.217017      -1.52778      -856.270       856.270       1868.22       2724.50    
   4  0.138317      -1.97821      -1108.72       1108.72       1865.59       2974.31    
   5  0.832728     -0.183048      -102.592       102.592       1898.07       2000.66    
   6  0.390825     -0.939496      -526.557       526.557       1860.39       2386.95    
   7  0.283633      -1.26007      -706.231       706.231       1844.36       2550.59    
   8  0.725809     -0.320468      -179.612       179.612       1938.43       2118.04    
   9  0.506121     -0.680979      -381.667       381.667       1881.57       2263.24    
  10  0.216234      -1.53139      -858.296       858.296       1965.16       2823.45    
  11  0.637942     -0.449509      -251.935       251.935       1830.81       2082.75    
  12  0.536707     -0.622302      -348.780       348.780       1924.71       2273.49    
  13  0.231844      -1.46169      -819.231       819.231       1873.15       2692.38    
  14  0.491379     -0.710540      -398.235       398.235       1921.00       2319.24    
  15  0.825774     -0.191434      -107.293       107.293       1890.21       1997.50    
  16  0.671593     -0.398102      -223.123       223.123       1894.57       2117.70    
  17  0.549103     -0.599470      -335.983       335.983       2076.38       2412.36    
  18  0.659287     -0.416597      -233.489       233.489       1881.96       2115.45    
  19  0.205012      -1.58469      -888.165       888.165       2082.37       2970.53    
  20  0.400541E-02  -5.52011      -3093.84       3093.84       2013.05       5106.89    
  21  0.750831     -0.286575      -160.616       160.616       1867.99       2028.60    
  22  0.619921     -0.478162      -267.994       267.994       1868.22       2136.22    
  23  0.435226     -0.831889      -466.247       466.247       1868.19       2334.43    
  24  0.460974     -0.774414      -434.034       434.034       1969.92       2403.95    
  25  0.891582E-01  -2.41734      -1354.84       1354.84       1843.54       3198.38    
  26  0.589618E-01  -2.83087      -1586.61       1586.61       2029.67       3616.28    
  27  0.541391     -0.613613      -343.910       343.910       2207.80       2551.71    
  28  0.545108E-01  -2.90936      -1630.60       1630.60       2035.22       3665.82    
  29  0.744722     -0.294744      -165.194       165.194       2342.61       2507.81    
  30  0.712477     -0.339008      -190.003       190.003       1904.86       2094.86    
  31  0.563836     -0.572992      -321.143       321.143       1892.75       2213.89    
  32  0.161455      -1.82353      -1022.03       1022.03       1959.76       2981.79    
  33  0.640738     -0.445135      -249.484       249.484       1940.57       2190.06    
  34  0.157494      -1.84837      -1035.95       1035.95       2004.40       3040.34    
  35  0.695323     -0.363378      -203.662       203.662       1837.28       2040.94    
  36  0.792798     -0.232186      -130.133       130.133       1904.43       2034.56    
  37  0.940634     -0.612017E-01  -34.3015       34.3015       1871.32       1905.63    
  38  0.750008     -0.287672      -161.231       161.231       1831.67       1992.90    
  39  0.298939E-01  -3.51010      -1967.30       1967.30       1799.18       3766.48    
  40  0.633510     -0.456480      -255.842       255.842       1935.97       2191.82    
  41  0.465723     -0.764164      -428.289       428.289       1898.64       2326.93    
  42  0.916259     -0.874560E-01  -49.0162       49.0162       2000.81       2049.82    
  43  0.451376     -0.795456      -445.827       445.827       1842.02       2287.85    
  44  0.414090     -0.881672      -494.149       494.149       2025.84       2519.99    
  45  0.273092      -1.29795      -727.457       727.457       1883.82       2611.28    
  46  0.361379      -1.01783      -570.459       570.459       2029.82       2600.28    
  47  0.548848     -0.599934      -336.243       336.243       1849.52       2185.76    
  48  0.832309     -0.183552      -102.875       102.875       2435.02       2537.89    
  49  0.673017     -0.395985      -221.937       221.937       1859.42       2081.36    
  50  0.692516     -0.367425      -205.930       205.930       1839.98       2045.91    
  51  0.354468E-01  -3.33972      -1871.81       1871.81       1886.43       3758.23    
loop,thermsimp(1:2)        4   69.5887       1216.21    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     59       1830.83          0.88          1.11         22.00          0.12          0.05         24.17
Just calling func    0   0         24.17


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     60       1861.46          0.87          1.11         21.98          0.12          0.05         24.13
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1830.83
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    560.467               101
loop is:        4
neval is:       59
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        4      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    560.467      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    560.467               101
loop is:        5
neval is:       59


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      101
neval,tstepnext:       59     101

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.968189     -0.323278E-01  -18.1187       18.1187       1871.32       1889.44    
   2  0.384676     -0.955353      -535.444       535.444       1862.04       2397.48    
   3  0.472770     -0.749146      -419.872       419.872       1831.67       2251.54    
   4  0.131186      -2.03114      -1138.39       1138.39       1890.21       3028.59    
   5  0.387497     -0.948046      -531.349       531.349       1898.07       2429.42    
   6  0.474858     -0.744739      -417.402       417.402       1867.99       2285.39    
   7  0.654056     -0.424563      -237.954       237.954       1904.43       2142.38    
   8  0.375266     -0.980119      -549.325       549.325       1837.28       2386.60    
   9  0.605577     -0.501574      -281.116       281.116       1839.98       2121.10    
  10  0.485605     -0.722360      -404.860       404.860       2000.81       2405.67    
  11  0.503843     -0.685490      -384.195       384.195       1859.42       2243.62    
  12  0.374521     -0.982108      -550.440       550.440       1830.81       2381.25    
  13  0.955542E-01  -2.34806      -1316.01       1316.01       1904.86       3220.87    
  14  0.902567     -0.102512      -57.4547       57.4547       1881.96       1939.42    
  15  0.347215      -1.05781      -592.868       592.868       1894.57       2487.44    
  16  0.893138     -0.113014      -63.3408       63.3408       1938.43       2001.77    
  17  0.561145     -0.577776      -323.824       323.824       1868.22       2192.05    
  18  0.667287     -0.404536      -226.729       226.729       1849.52       2076.25    
  19  0.601102     -0.508991      -285.273       285.273       1940.57       2225.85    
  20  0.569928     -0.562245      -315.120       315.120       1935.97       2251.09    
  21  0.655926     -0.421708      -236.354       236.354       1892.75       2129.10    
  22  0.355892      -1.03313      -579.034       579.034       1881.57       2460.61    
  23  0.208013      -1.57015      -880.020       880.020       1924.71       2804.73    
  24  0.879772     -0.128093      -71.7918       71.7918       1842.02       1913.81    
  25  0.114206E-01  -4.47233      -2506.60       2506.60       1921.00       4427.60    
  26  0.950245     -0.510357E-01  -28.6038       28.6038       1898.64       1927.24    
  27  0.321268      -1.13548      -636.399       636.399       1868.19       2504.59    
  28  0.379005     -0.970207      -543.769       543.769       1860.39       2404.16    
  29  0.117960      -2.13741      -1197.95       1197.95       1969.92       3167.87    
  30  0.822558     -0.195337      -109.480       109.480       2076.38       2185.86    
  31  0.671085     -0.398860      -223.548       223.548       2342.61       2566.16    
  32  0.220279      -1.51286      -847.909       847.909       2025.84       2873.75    
  33  0.836335     -0.178727      -100.170       100.170       2435.02       2535.19    
  34  0.982442E-01  -2.32030      -1300.45       1300.45       1844.36       3144.81    
  35  0.912526     -0.915389E-01  -51.3046       51.3046       2207.80       2259.11    
  36  0.758802     -0.276015      -154.697       154.697       2029.82       2184.52    
  37  0.562651     -0.575096      -322.322       322.322       1883.82       2206.14    
  38  0.248142      -1.39375      -781.154       781.154       1873.15       2654.30    
  39  0.864881     -0.145163      -81.3592       81.3592       1868.22       1949.58    
  40  0.495151     -0.702893      -393.949       393.949       1965.16       2359.11    
  41  0.112352E-01  -4.48870      -2515.77       2515.77       2082.37       4598.14    
  42  0.745500     -0.293700      -164.609       164.609       1865.59       2030.20    
  43  0.405071     -0.903693      -506.490       506.490       1959.76       2466.25    
  44  0.617259     -0.482466      -270.407       270.407       2004.40       2274.80    
  45  0.992755     -0.727089E-02  -4.07510       4.07510       1847.39       1851.47    
  46  0.888739     -0.117952      -66.1083       66.1083       1843.54       1909.65    
  47  0.976701     -0.235748E-01  -13.2129       13.2129       2029.67       2042.89    
  48  0.461976     -0.772242      -432.817       432.817       2035.22       2468.04    
  49  0.150581      -1.89325      -1061.11       1061.11       1886.43       2947.53    
  50  0.726286E-01  -2.62240      -1469.77       1469.77       1799.18       3268.95    
  51  0.280837      -1.26998      -711.783       711.783       1830.83       2542.61    
loop,thermsimp(1:2)        5   18.1187       535.444    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     61       1796.12          0.88          1.12         22.03          0.06          0.06         24.15
Just calling func    0   0         24.15


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     62       1988.89          0.86          1.11         22.00          0.18          0.05         24.19
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

   60    1796.1        1.221     -2.196      3.081     -102.6     0.9674    
                      0.7582      1.314     -99.70      3.458     0.3652    

                       2.063     -2.045      1.540      7000.      7000.    

                      -2.041      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -5.731     -3.384     -8.398      6.647    

                      -14.16     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.2509E-01 0.2430    -0.1944E-01 0.1375    

                     -0.2486    -0.1306     0.1534     0.9449E-01 0.1056    



                     -0.4269    -0.4766      0.000     0.9861E-01-0.2527E-01

                     -0.3293E-01 0.1571    -0.7116    -0.1001     0.2835    

                      0.4692E-01 0.1556E-01-0.5934     -1.215      7000.    



                     -0.2390    -0.6590     -2.142     -1.982    -0.3807    

                     -0.3252      8.807      8.739    -0.1672E+05 -6.000    

                     -0.3820     -2.334      9.373      8.827    -0.1969E+05



                      -6.000     0.6314    -0.3225      8.884      9.076    

                     -0.1944E+05 -6.000    -0.6021    -0.5864      9.095    

                       8.796    -0.1891E+05 -6.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1796.12
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    560.467               101
loop is:        5
neval is:       61
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        5      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    560.467      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    560.467               101
loop is:        6
neval is:       61


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      101
neval,tstepnext:       61     101

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.806234     -0.215382      -120.715       120.715       1847.39       1968.11    
   2  0.337878      -1.08507      -608.147       608.147       1871.32       2479.47    
   3  0.930612     -0.719127E-01  -40.3047       40.3047       1843.54       1883.84    
   4  0.843645     -0.170024      -95.2928       95.2928       1842.02       1937.32    
   5  0.757799     -0.277337      -155.438       155.438       1898.64       2054.08    
   6  0.627925     -0.465335      -260.805       260.805       1881.96       2142.77    
   7  0.412314     -0.885971      -496.558       496.558       1868.22       2364.78    
   8  0.282274      -1.26488      -708.922       708.922       1938.43       2647.35    
   9  0.426609E-01  -3.15447      -1767.98       1767.98       1865.59       3633.57    
  10  0.484876     -0.723862      -405.701       405.701       2029.67       2435.37    
  11  0.372210     -0.988296      -553.908       553.908       1849.52       2403.42    
  12  0.740507     -0.300421      -168.376       168.376       1839.98       2008.36    
  13  0.361519      -1.01744      -570.243       570.243       1892.75       2462.99    
  14  0.421034     -0.865042      -484.828       484.828       1904.43       2389.26    
  15  0.780595     -0.247699      -138.827       138.827       2029.82       2168.65    
  16  0.758410     -0.276531      -154.987       154.987       2076.38       2231.36    
  17  0.522921E-01  -2.95091      -1653.89       1653.89       1868.22       3522.11    
  18  0.609673     -0.494833      -277.338       277.338       1883.82       2161.16    
  19  0.204029      -1.58949      -890.858       890.858       1940.57       2831.43    
  20  0.516385     -0.660902      -370.414       370.414       1859.42       2229.84    
  21  0.323918      -1.12726      -631.794       631.794       1935.97       2567.77    
  22  0.671820     -0.397765      -222.935       222.935       1831.67       2054.60    
  23  0.850344     -0.162114      -90.8595       90.8595       2207.80       2298.66    
  24  0.515631     -0.662364      -371.233       371.233       2004.40       2375.63    
  25  0.919408     -0.840249E-01  -47.0932       47.0932       1867.99       1915.08    
  26  0.516519     -0.660643      -370.269       370.269       1965.16       2335.43    
  27  0.986900     -0.131869E-01  -7.39081       7.39081       1830.81       1838.21    
  28  0.127351      -2.06081      -1155.02       1155.02       1837.28       2992.30    
  29  0.775028E-01  -2.55744      -1433.36       1433.36       1862.04       3295.40    
  30  0.778307     -0.250634      -140.472       140.472       1860.39       2000.86    
  31  0.548570     -0.600441      -336.527       336.527       2000.81       2337.34    
  32  0.191672      -1.65197      -925.875       925.875       1898.07       2823.95    
  33  0.593733     -0.521326      -292.186       292.186       1881.57       2173.76    
  34  0.612853     -0.489631      -274.422       274.422       1959.76       2234.19    
  35  0.872749     -0.136107      -76.2835       76.2835       2035.22       2111.51    
  36  0.291105E-01  -3.53666      -1982.18       1982.18       1894.57       3876.75    
  37  0.310804      -1.16859      -654.958       654.958       1868.19       2523.14    
  38  0.238051      -1.43527      -804.423       804.423       2435.02       3239.44    
  39  0.600295     -0.510334      -286.025       286.025       1830.83       2116.85    
  40  0.856575     -0.154813      -86.7678       86.7678       2342.61       2429.38    
  41  0.127990      -2.05580      -1152.21       1152.21       1873.15       3025.36    
  42  0.390396E-01  -3.24318      -1817.70       1817.70       1924.71       3742.40    
  43  0.469298E-01  -3.05910      -1714.53       1714.53       2025.84       3740.37    
  44  0.170208      -1.77073      -992.439       992.439       1886.43       2878.87    
  45  0.457801     -0.781320      -437.904       437.904       1890.21       2328.11    
  46  0.451589     -0.794982      -445.562       445.562       1844.36       2289.92    
  47  0.601844     -0.507757      -284.581       284.581       1969.92       2254.50    
  48  0.923684     -0.793857E-01  -44.4931       44.4931       1904.86       1949.35    
  49  0.113154      -2.17901      -1221.26       1221.26       1799.18       3020.44    
  50  0.652894     -0.426340      -238.950       238.950       1921.00       2159.95    
  51  0.600010     -0.510809      -286.292       286.292       1796.12       2082.41    
loop,thermsimp(1:2)        6   120.715       608.147    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     63       1893.04          0.88          1.12         22.01          0.11          0.05         24.16
Just calling func    0   0         24.16


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     64       2044.86          0.87          1.12         22.27          0.09          0.04         24.39
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1893.04
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    560.467               101
loop is:        6
neval is:       63
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        6      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    560.467      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    560.467               101
loop is:        7
neval is:       63


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      101
neval,tstepnext:       63     101

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.117714      -2.13949      -1199.12       1199.12       1830.81       3029.93    
   2  0.421875     -0.863045      -483.709       483.709       1843.54       2327.25    
   3  0.700103     -0.356528      -199.823       199.823       1867.99       2067.81    
   4  0.209367      -1.56367      -876.384       876.384       1842.02       2718.41    
   5  0.117251      -2.14344      -1201.33       1201.33       1904.86       3106.19    
   6  0.898330     -0.107218      -60.0920       60.0920       1847.39       1907.49    
   7  0.209806      -1.56157      -875.211       875.211       1860.39       2735.60    
   8  0.917155     -0.864790E-01  -48.4687       48.4687       1839.98       1888.45    
   9  0.120514E-01  -4.41857      -2476.47       2476.47       1898.64       4375.10    
  10  0.189983      -1.66082      -930.837       930.837       1831.67       2762.50    
  11  0.257131      -1.35817      -761.209       761.209       1796.12       2557.32    
  12  0.913158E-01  -2.39343      -1341.44       1341.44       2035.22       3376.66    
  13  0.336531      -1.08906      -610.385       610.385       1830.83       2441.21    
  14  0.318351      -1.14460      -641.512       641.512       1881.96       2523.48    
  15  0.919606     -0.838101E-01  -46.9728       46.9728       1921.00       1967.98    
  16  0.719771E-01  -2.63141      -1474.82       1474.82       1883.82       3358.64    
  17  0.788730E-01  -2.53992      -1423.54       1423.54       2029.82       3453.36    
  18  0.905929     -0.987941E-01  -55.3709       55.3709       1881.57       1936.94    
  19  0.665501     -0.407215      -228.231       228.231       1859.42       2087.65    
  20  0.812159     -0.208059      -116.611       116.611       2076.38       2192.99    
  21  0.412726E-01  -3.18756      -1786.52       1786.52       1959.76       3746.29    
  22  0.256064      -1.36233      -763.540       763.540       1969.92       2733.46    
  23  0.277519      -1.28187      -718.444       718.444       1844.36       2562.81    
  24  0.279550      -1.27457      -714.357       714.357       2207.80       2922.16    
  25  0.857884     -0.153286      -85.9120       85.9120       1890.21       1976.12    
  26  0.205158      -1.58398      -887.767       887.767       1965.16       2852.92    
  27  0.482085     -0.729635      -408.937       408.937       2000.81       2409.75    
  28  0.494966E-01  -3.00585      -1684.68       1684.68       1868.22       3552.91    
  29  0.338791      -1.08237      -606.635       606.635       2004.40       2611.03    
  30  0.249491E-01  -3.69092      -2068.64       2068.64       1904.43       3973.07    
  31  0.480710     -0.732491      -410.537       410.537       1849.52       2260.05    
  32  0.908951E-01  -2.39805      -1344.03       1344.03       2342.61       3686.64    
  33  0.283223      -1.26152      -707.042       707.042       2029.67       2736.71    
  34  0.277734      -1.28109      -718.010       718.010       1892.75       2610.76    
  35  0.504407     -0.684372      -383.569       383.569       1871.32       2254.89    
  36  0.251881      -1.37880      -772.771       772.771       1868.19       2640.96    
  37  0.568193     -0.565294      -316.829       316.829       1935.97       2252.80    
  38  0.186135      -1.68128      -942.303       942.303       1938.43       2880.73    
  39  0.964582     -0.360604E-01  -20.2107       20.2107       1898.07       1918.28    
  40  0.493045     -0.707155      -396.337       396.337       1940.57       2336.91    
  41  0.477950     -0.738248      -413.764       413.764       1886.43       2300.19    
  42  0.114879      -2.16388      -1212.78       1212.78       1837.28       3050.06    
  43  0.324003      -1.12700      -631.647       631.647       1799.18       2430.83    
  44  0.720573     -0.327708      -183.670       183.670       1873.15       2056.82    
  45  0.934913     -0.673019E-01  -37.7206       37.7206       2435.02       2472.74    
  46  0.516467     -0.660745      -370.326       370.326       1862.04       2232.37    
  47  0.351513      -1.04551      -585.973       585.973       1868.22       2454.20    
  48  0.310221      -1.17047      -656.011       656.011       1865.59       2521.60    
  49  0.467571     -0.760204      -426.070       426.070       2025.84       2451.91    
  50  0.700644     -0.355756      -199.389       199.389       1924.71       2124.10    
  51  0.608579E-01  -2.79921      -1568.87       1568.87       1893.04       3461.91    
loop,thermsimp(1:2)        7   1199.12       483.709    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     65       1892.11          0.88          1.12         22.11          0.11          0.05         24.27
Just calling func    0   0         24.27


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     66       2086.76          0.87          1.11         22.05          0.08          0.05         24.17
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1892.11
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    560.467               101
loop is:        7
neval is:       65
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        7      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    560.467      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    560.467               101
loop is:        8
neval is:       65


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      101
neval,tstepnext:       65     101

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.487401     -0.718668      -402.790       402.790       1839.98       2242.77    
   2  0.568497     -0.564760      -316.530       316.530       1847.39       2163.92    
   3  0.632037E-01  -2.76139      -1547.67       1547.67       1898.07       3445.74    
   4  0.184325      -1.69105      -947.780       947.780       1881.57       2829.35    
   5  0.949772     -0.515332E-01  -28.8827       28.8827       1921.00       1949.89    
   6  0.512179     -0.669081      -374.998       374.998       1890.21       2265.21    
   7  0.573767     -0.555532      -311.358       311.358       1873.15       2184.50    
   8  0.590189     -0.527312      -295.541       295.541       1867.99       2163.53    
   9  0.323917      -1.12727      -631.797       631.797       1859.42       2491.22    
  10  0.246420E-01  -3.70330      -2075.58       2075.58       1924.71       4000.29    
  11  0.923153E-01  -2.38255      -1335.34       1335.34       2076.38       3411.72    
  12  0.236043      -1.44374      -809.170       809.170       1862.04       2671.21    
  13  0.885388     -0.121730      -68.2254       68.2254       1935.97       2004.20    
  14  0.617726     -0.481710      -269.983       269.983       1871.32       2141.31    
  15  0.349992      -1.04985      -588.404       588.404       1849.52       2437.92    
  16  0.892028     -0.114257      -64.0375       64.0375       1886.43       1950.46    
  17  0.382423     -0.961227      -538.737       538.737       1843.54       2382.28    
  18  0.850527     -0.161899      -90.7394       90.7394       1940.57       2031.31    
  19  0.653461     -0.425472      -238.463       238.463       2000.81       2239.27    
  20  0.413959     -0.881988      -494.325       494.325       1799.18       2293.51    
  21  0.807813     -0.213424      -119.617       119.617       1830.83       1950.44    
  22  0.348045      -1.05542      -591.531       591.531       2025.84       2617.37    
  23  0.435267     -0.831795      -466.194       466.194       1868.22       2334.42    
  24  0.434284     -0.834056      -467.461       467.461       2435.02       2902.48    
  25  0.983564     -0.165728E-01  -9.28854       9.28854       1865.59       1874.88    
  26  0.545923     -0.605277      -339.238       339.238       1881.96       2221.20    
  27  0.227140      -1.48219      -830.718       830.718       1796.12       2626.83    
  28  0.965085     -0.355395E-01  -19.9188       19.9188       1844.36       1864.28    
  29  0.183882      -1.69346      -949.128       949.128       1892.75       2841.88    
  30  0.187300E-02  -6.28022      -3519.86       3519.86       2004.40       5524.25    
  31  0.428736     -0.846914      -474.668       474.668       1868.19       2342.85    
  32  0.459764     -0.777041      -435.506       435.506       1842.02       2277.53    
  33  0.914786     -0.890649E-01  -49.9180       49.9180       1969.92       2019.83    
  34  0.872236     -0.136696      -76.6134       76.6134       1860.39       1937.00    
  35  0.789367     -0.236524      -132.564       132.564       2029.67       2162.24    
  36  0.619233E-01  -2.78186      -1559.14       1559.14       1831.67       3390.81    
  37  0.138004E-01  -4.28306      -2400.51       2400.51       1965.16       4365.67    
  38  0.287035      -1.24815      -699.547       699.547       1938.43       2637.98    
  39  0.138758E-01  -4.27761      -2397.46       2397.46       2207.80       4605.26    
  40  0.593330     -0.522005      -292.567       292.567       1830.81       2123.38    
  41  0.399445     -0.917679      -514.329       514.329       1837.28       2351.61    
  42  0.982947     -0.172001E-01  -9.64012       9.64012       1904.86       1914.50    
  43  0.259534      -1.34887      -755.996       755.996       1883.82       2639.82    
  44  0.816592E-01  -2.50520      -1404.08       1404.08       2035.22       3439.31    
  45  0.166083      -1.79527      -1006.19       1006.19       2029.82       3036.01    
  46  0.967370     -0.331741E-01  -18.5930       18.5930       1893.04       1911.64    
  47  0.371024     -0.991488      -555.697       555.697       1868.22       2423.92    
  48  0.941964     -0.597885E-01  -33.5095       33.5095       2342.61       2376.12    
  49  0.130219      -2.03854      -1142.53       1142.53       1959.76       3102.30    
  50  0.599455     -0.511734      -286.810       286.810       1904.43       2191.24    
  51  0.519323     -0.655230      -367.235       367.235       1892.11       2259.34    
loop,thermsimp(1:2)        8   402.790       316.530    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     67       1897.95          0.88          1.12         21.95          0.12          0.05         24.12
Just calling func    0   0         24.12


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     68       2141.97          0.87          1.11         22.06          0.10          0.05         24.20
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1897.95
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    560.467               101
loop is:        8
neval is:       67
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        8      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    560.467      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    560.467               101
loop is:        9
neval is:       67


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      101
neval,tstepnext:       67     101

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.878288E-01  -2.43237      -1363.26       1363.26       1844.36       3207.62    
   2  0.192227      -1.64908      -924.255       924.255       1865.59       2789.84    
   3  0.872733     -0.136126      -76.2942       76.2942       1893.04       1969.34    
   4  0.444113     -0.811675      -454.918       454.918       1904.86       2359.78    
   5  0.194382      -1.63793      -918.007       918.007       1860.39       2778.40    
   6  0.358074      -1.02702      -575.610       575.610       1921.00       2496.61    
   7  0.461693     -0.772855      -433.160       433.160       1830.83       2263.99    
   8  0.180202      -1.71368      -960.461       960.461       1886.43       2846.89    
   9  0.944954     -0.566187E-01  -31.7330       31.7330       1935.97       1967.71    
  10  0.738770     -0.302769      -169.692       169.692       1969.92       2139.61    
  11  0.822491E-01  -2.49800      -1400.05       1400.05       1940.57       3340.62    
  12  0.313602      -1.15963      -649.935       649.935       1830.81       2480.75    
  13  0.978185     -0.220567E-01  -12.3621       12.3621       1871.32       1883.69    
  14  0.540591E-01  -2.91768      -1635.26       1635.26       2029.67       3664.94    
  15  0.872885     -0.135951      -76.1961       76.1961       1867.99       1944.18    
  16  0.209079      -1.56504      -877.155       877.155       1847.39       2724.55    
  17  0.789205E-01  -2.53931      -1423.20       1423.20       1873.15       3296.35    
  18  0.746404     -0.292489      -163.930       163.930       1904.43       2068.36    
  19  0.110219      -2.20529      -1235.99       1235.99       1881.96       3117.96    
  20  0.656016     -0.421570      -236.276       236.276       2000.81       2237.08    
  21  0.665675     -0.406953      -228.084       228.084       1839.98       2068.07    
  22  0.563292     -0.573957      -321.684       321.684       1892.11       2213.79    
  23  0.615044     -0.486062      -272.422       272.422       1890.21       2162.63    
  24  0.128081      -2.05509      -1151.81       1151.81       1842.02       2993.83    
  25  0.459916     -0.776711      -435.321       435.321       1799.18       2234.50    
  26  0.433297     -0.836332      -468.737       468.737       1868.22       2336.96    
  27  0.225675      -1.48866      -834.345       834.345       1868.19       2702.53    
  28  0.808805     -0.212197      -118.930       118.930       1837.28       1956.21    
  29  0.578238     -0.547770      -307.007       307.007       2342.61       2649.62    
  30  0.569572     -0.562871      -315.471       315.471       1843.54       2159.01    
  31  0.291272      -1.23350      -691.335       691.335       1868.22       2559.56    
  32  0.144426      -1.93499      -1084.50       1084.50       1849.52       2934.01    
  33  0.908321     -0.961572E-01  -53.8930       53.8930       1859.42       1913.32    
  34  0.593166     -0.522281      -292.722       292.722       2025.84       2318.56    
  35  0.327630      -1.11587      -625.410       625.410       1796.12       2421.52    
  36  0.823214E-01  -2.49712      -1399.56       1399.56       1938.43       3337.99    
  37  0.742531     -0.297691      -166.846       166.846       1883.82       2050.67    
  38  0.476201E-01  -3.04450      -1706.34       1706.34       1862.04       3568.38    
  39  0.183829      -1.69375      -949.292       949.292       1881.57       2830.86    
  40  0.417257     -0.874053      -489.878       489.878       1892.75       2382.63    
  41  0.647723E-01  -2.73688      -1533.93       1533.93       2435.02       3968.95    
  42  0.123950E-01  -4.39046      -2460.71       2460.71       2029.82       4490.53    
  43  0.281372E-01  -3.57066      -2001.24       2001.24       1959.76       3961.00    
  44  0.883044     -0.124380      -69.7110       69.7110       1831.67       1901.38    
  45  0.445413     -0.808754      -453.280       453.280       2076.38       2529.66    
  46  0.418101     -0.872031      -488.745       488.745       2035.22       2523.97    
  47  0.301534      -1.19887      -671.929       671.929       1898.07       2570.00    
  48  0.674500     -0.393783      -220.703       220.703       1924.71       2145.41    
  49  0.732783     -0.310905      -174.252       174.252       1965.16       2139.41    
  50  0.970355     -0.300929E-01  -16.8661       16.8661       2207.80       2224.67    
  51  0.981589     -0.185824E-01  -10.4148       10.4148       1897.95       1908.37    
loop,thermsimp(1:2)        9   1363.26       924.255    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     69       1913.24          0.88          1.12         22.07          0.12          0.05         24.23
Just calling func    0   0         24.23


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     70       2175.17          0.87          1.11         22.05          0.04          0.05         24.12
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1913.24
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    560.467               101
loop is:        9
neval is:       69
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        9      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    560.467      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    560.467               101
loop is:       10
neval is:       69


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      101
neval,tstepnext:       69     101

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.611807     -0.491339      -275.380       275.380       1871.32       2146.70    
   2  0.877337     -0.130865      -73.3454       73.3454       1831.67       1905.01    
   3  0.821280     -0.196891      -110.351       110.351       1897.95       2008.30    
   4  0.989636     -0.104181E-01  -5.83901       5.83901       1859.42       1865.26    
   5  0.492813     -0.707625      -396.601       396.601       1867.99       2264.59    
   6  0.904083     -0.100835      -56.5145       56.5145       1837.28       1893.79    
   7  0.490620     -0.712086      -399.101       399.101       1935.97       2335.08    
   8  0.572439     -0.557850      -312.657       312.657       1893.04       2205.70    
   9  0.588753     -0.529749      -296.907       296.907       1883.82       2180.73    
  10  0.341799      -1.07353      -601.679       601.679       1839.98       2441.66    
  11  0.449605     -0.799385      -448.030       448.030       1904.43       2352.46    
  12  0.740720     -0.300132      -168.214       168.214       1965.16       2133.37    
  13  0.173164E-01  -4.05610      -2273.31       2273.31       1969.92       4243.23    
  14  0.828389     -0.188272      -105.520       105.520       1924.71       2030.23    
  15  0.110451      -2.20318      -1234.81       1234.81       1843.54       3078.35    
  16  0.646816     -0.435693      -244.192       244.192       1890.21       2134.40    
  17  0.857676     -0.153529      -86.0478       86.0478       1892.11       1978.15    
  18  0.691202E-02  -4.97449      -2788.04       2788.04       2207.80       4995.85    
  19  0.530885     -0.633210      -354.894       354.894       1799.18       2154.07    
  20  0.742957     -0.297117      -166.525       166.525       2000.81       2167.33    
  21  0.883526E-01  -2.42642      -1359.93       1359.93       1830.83       3190.75    
  22  0.599138     -0.512263      -287.107       287.107       2025.84       2312.94    
  23  0.476407     -0.741482      -415.577       415.577       1868.22       2283.80    
  24  0.509994E-01  -2.97594      -1667.92       1667.92       1904.86       3572.78    
  25  0.669768     -0.400824      -224.649       224.649       1892.75       2117.40    
  26  0.874430     -0.134183      -75.2051       75.2051       1796.12       1871.32    
  27  0.830739     -0.185440      -103.933       103.933       1830.81       1934.75    
  28  0.166673      -1.79172      -1004.20       1004.20       1921.00       2925.20    
  29  0.578742     -0.546898      -306.518       306.518       2035.22       2341.74    
  30  0.433531     -0.835791      -468.434       468.434       2076.38       2544.81    
  31  0.979127     -0.210935E-01  -11.8222       11.8222       1868.22       1880.05    
  32  0.310252      -1.17037      -655.955       655.955       1898.07       2554.03    
  33  0.686879     -0.375597      -210.510       210.510       2342.61       2553.12    
  34  0.243104      -1.41427      -792.651       792.651       1868.19       2660.84    
  35  0.459407     -0.777818      -435.942       435.942       1847.39       2283.34    
  36  0.332163      -1.10213      -617.708       617.708       1860.39       2478.10    
  37  0.512243     -0.668956      -374.928       374.928       1865.59       2240.52    
  38  0.323240      -1.12936      -632.970       632.970       1881.57       2514.54    
  39  0.667455     -0.404284      -226.588       226.588       1886.43       2113.02    
  40  0.460037     -0.776449      -435.174       435.174       1849.52       2284.69    
  41  0.227415      -1.48098      -830.039       830.039       1842.02       2672.06    
  42  0.636494     -0.451780      -253.208       253.208       1881.96       2135.17    
  43  0.432078     -0.839149      -470.316       470.316       1844.36       2314.68    
  44  0.609015     -0.495913      -277.943       277.943       1873.15       2151.09    
  45  0.427755     -0.849205      -475.952       475.952       1938.43       2414.38    
  46  0.496712     -0.699745      -392.184       392.184       1940.57       2332.76    
  47  0.295308      -1.21974      -683.623       683.623       1862.04       2545.66    
  48  0.928979     -0.736692E-01  -41.2892       41.2892       2029.67       2070.96    
  49  0.245696E-01  -3.70625      -2077.23       2077.23       1959.76       4036.99    
  50  0.833617E-01  -2.48457      -1392.52       1392.52       2435.02       3827.53    
  51  0.499690     -0.693767      -388.834       388.834       1913.24       2302.07    
loop,thermsimp(1:2)       10   275.380       73.3454    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     71       1880.07          0.88          1.12         22.37          0.11          0.05         24.54
Just calling func    0   0         24.54


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     72       1866.10          0.87          1.11         22.03          0.10          0.05         24.16
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1866.10
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    560.467               101
loop is:       10
neval is:       71
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       10      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    560.467      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    560.467               101
loop is:       11
neval is:       71


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      101
neval,tstepnext:       71     101

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.356780      -1.03064      -577.639       577.639       1859.42       2437.06    
   2  0.318207      -1.14505      -641.766       641.766       1796.12       2437.88    
   3  0.410972E-01  -3.19181      -1788.91       1788.91       1868.22       3657.13    
   4  0.217948      -1.52350      -853.870       853.870       1837.28       2691.15    
   5  0.460755     -0.774888      -434.300       434.300       1831.67       2265.97    
   6  0.694214     -0.364975      -204.557       204.557       1830.81       2035.37    
   7  0.237764      -1.43648      -805.098       805.098       1892.11       2697.20    
   8  0.635477     -0.453379      -254.104       254.104       1897.95       2152.05    
   9  0.882831E-01  -2.42721      -1360.37       1360.37       1924.71       3285.08    
  10  0.889613     -0.116969      -65.5572       65.5572       2029.67       2095.23    
  11  0.236395      -1.44225      -808.335       808.335       1886.43       2694.76    
  12  0.785560     -0.241359      -135.274       135.274       1892.75       2028.02    
  13  0.253594      -1.37202      -768.974       768.974       1965.16       2734.13    
  14  0.767743     -0.264300      -148.132       148.132       1890.21       2038.34    
  15  0.425111     -0.855405      -479.427       479.427       1881.96       2361.39    
  16  0.334680E-01  -3.39717      -1904.00       1904.00       1871.32       3775.32    
  17  0.737903     -0.303943      -170.350       170.350       1873.15       2043.50    
  18  0.530906     -0.633170      -354.871       354.871       1799.18       2154.05    
  19  0.811772     -0.208536      -116.878       116.878       2000.81       2117.69    
  20  0.781494     -0.246548      -138.182       138.182       1883.82       2022.00    
  21  0.668871     -0.402164      -225.400       225.400       1893.04       2118.44    
  22  0.609633     -0.494898      -277.374       277.374       1865.59       2142.96    
  23  0.732795E-01  -2.61347      -1464.77       1464.77       1867.99       3332.75    
  24  0.999755     -0.244962E-03 -0.137293      0.137293       1847.39       1847.53    
  25  0.556911     -0.585350      -328.070       328.070       1868.22       2196.29    
  26  0.381942     -0.962485      -539.442       539.442       1849.52       2388.96    
  27  0.230973      -1.46546      -821.340       821.340       1913.24       2734.58    
  28  0.791084     -0.234351      -131.346       131.346       2025.84       2157.18    
  29  0.122039      -2.10341      -1178.89       1178.89       1844.36       3023.26    
  30  0.411383     -0.888231      -497.825       497.825       1940.57       2438.40    
  31  0.753656     -0.282819      -158.511       158.511       1935.97       2094.49    
  32  0.846821     -0.166266      -93.1868       93.1868       2035.22       2128.41    
  33  0.577745     -0.548622      -307.485       307.485       1904.43       2211.91    
  34  0.859903     -0.150936      -84.5946       84.5946       1938.43       2023.03    
  35  0.915816     -0.879395E-01  -49.2872       49.2872       1839.98       1889.27    
  36  0.220499      -1.51186      -847.349       847.349       1860.39       2707.74    
  37  0.539962     -0.616256      -345.391       345.391       1881.57       2226.96    
  38  0.810725     -0.209827      -117.601       117.601       2076.38       2193.98    
  39  0.901567     -0.103621      -58.0760       58.0760       1862.04       1920.12    
  40  0.196148      -1.62888      -912.937       912.937       2342.61       3255.55    
  41  0.413437     -0.883250      -495.033       495.033       1898.07       2393.10    
  42  0.192892      -1.64562      -922.318       922.318       1868.19       2790.50    
  43  0.194290      -1.63840      -918.271       918.271       1842.02       2760.29    
  44  0.988313     -0.117563E-01  -6.58903       6.58903       1921.00       1927.59    
  45  0.917980     -0.855792E-01  -47.9643       47.9643       1843.54       1891.50    
  46  0.136083      -1.99449      -1117.85       1117.85       1830.83       2948.67    
  47  0.847126     -0.165905      -92.9846       92.9846       1904.86       1997.85    
  48  0.513003     -0.667474      -374.097       374.097       2435.02       2809.11    
  49  0.562161     -0.575967      -322.811       322.811       1959.76       2282.57    
  50  0.926079     -0.767957E-01  -43.0415       43.0415       1969.92       2012.96    
  51  0.890313     -0.116182      -65.1162       65.1162       1866.10       1931.21    
loop,thermsimp(1:2)       11   577.639       641.766    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     73       1920.43          0.88          1.12         22.07          0.14          0.05         24.25
Just calling func    0   0         24.25


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1920.43
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    560.467               101
loop is:       11
neval is:       72
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       11      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    560.467      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    560.467               101
loop is:       12
neval is:       72


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      101
neval,tstepnext:       72     101

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.759790E-01  -2.57730      -1444.49       1444.49       1847.39       3291.88    
   2  0.804470     -0.217571      -121.942       121.942       1839.98       1961.93    
   3  0.984017     -0.161120E-01  -9.03025       9.03025       1843.54       1852.57    
   4  0.587639     -0.531643      -297.969       297.969       1862.04       2160.01    
   5  0.523810     -0.646626      -362.413       362.413       1921.00       2283.42    
   6  0.930607     -0.719181E-01  -40.3077       40.3077       1866.10       1906.41    
   7  0.360114E-01  -3.32392      -1862.95       1862.95       1904.86       3767.81    
   8  0.963815     -0.368556E-01  -20.6563       20.6563       1969.92       1990.57    
   9  0.201264E-01  -3.90572      -2189.03       2189.03       1883.82       4072.85    
  10  0.954897     -0.461522E-01  -25.8668       25.8668       1938.43       1964.30    
  11  0.374160     -0.983071      -550.979       550.979       1892.75       2443.73    
  12  0.174967      -1.74316      -976.982       976.982       1830.81       2807.80    
  13  0.381618     -0.963335      -539.918       539.918       1890.21       2430.12    
  14  0.191097      -1.65498      -927.561       927.561       1873.15       2800.71    
  15  0.425287     -0.854991      -479.195       479.195       1935.97       2415.17    
  16  0.426180     -0.852893      -478.019       478.019       2029.67       2507.69    
  17  0.615671     -0.485042      -271.850       271.850       2000.81       2272.66    
  18  0.787264     -0.239192      -134.059       134.059       1893.04       2027.10    
  19  0.812636     -0.207472      -116.281       116.281       2035.22       2151.50    
  20  0.917241E-01  -2.38897      -1338.94       1338.94       1865.59       3204.53    
  21  0.671310     -0.398525      -223.360       223.360       1897.95       2121.31    
  22  0.548174     -0.601162      -336.932       336.932       1799.18       2136.11    
  23  0.134851      -2.00359      -1122.94       1122.94       2025.84       3148.78    
  24  0.373236     -0.985545      -552.366       552.366       2076.38       2628.74    
  25  0.578774     -0.546843      -306.488       306.488       1868.22       2174.71    
  26  0.910021     -0.942872E-01  -52.8449       52.8449       1904.43       1957.27    
  27  0.192323      -1.64858      -923.974       923.974       1881.57       2805.55    
  28  0.366342      -1.00419      -562.815       562.815       1831.67       2394.48    
  29  0.686994     -0.375430      -210.416       210.416       1959.76       2170.18    
  30  0.486551     -0.720414      -403.769       403.769       1881.96       2285.73    
  31  0.256801      -1.35945      -761.929       761.929       1849.52       2611.45    
  32  0.284977      -1.25535      -703.581       703.581       1898.07       2601.65    
  33  0.903072     -0.101953      -57.1411       57.1411       1859.42       1916.56    
  34  0.226450      -1.48523      -832.423       832.423       1796.12       2628.54    
  35  0.446078     -0.807261      -452.443       452.443       1940.57       2393.02    
  36  0.152634      -1.87971      -1053.52       1053.52       1837.28       2890.80    
  37  0.511955     -0.669518      -375.243       375.243       1886.43       2261.67    
  38  0.513138     -0.667210      -373.949       373.949       1892.11       2266.05    
  39  0.637309     -0.450501      -252.491       252.491       1860.39       2112.88    
  40  0.861477     -0.149107      -83.5696       83.5696       1965.16       2048.73    
  41  0.817364     -0.201671      -113.030       113.030       1913.24       2026.27    
  42  0.793820     -0.230898      -129.411       129.411       1842.02       1971.43    
  43  0.253309      -1.37315      -769.603       769.603       1868.19       2637.79    
  44  0.702532     -0.353065      -197.881       197.881       2435.02       2632.90    
  45  0.822324     -0.195620      -109.639       109.639       1830.83       1940.46    
  46  0.720485     -0.327831      -183.739       183.739       1844.36       2028.10    
  47  0.881589     -0.126029      -70.6354       70.6354       2342.61       2413.25    
  48  0.584479     -0.537035      -300.991       300.991       1924.71       2225.70    
  49  0.697197     -0.360688      -202.154       202.154       1867.99       2070.14    
  50  0.320931      -1.13653      -636.988       636.988       1868.22       2505.21    
  51  0.780071     -0.248371      -139.204       139.204       1920.43       2059.63    
loop,thermsimp(1:2)       12   1444.49       121.942    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     74       1885.69          0.87          1.12         21.98          0.13          0.05         24.15
Just calling func    0   0         24.15


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     75       1874.21          0.86          1.11         22.00          0.10          0.05         24.12
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1874.21
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    560.467               101
loop is:       12
neval is:       74
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       12      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    560.467      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    560.467               101
loop is:       13
neval is:       74


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      101
neval,tstepnext:       74     101

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.872435     -0.136467      -76.4851       76.4851       1843.54       1920.02    
   2  0.311340      -1.16687      -653.993       653.993       1866.10       2520.09    
   3  0.293828      -1.22476      -686.439       686.439       1859.42       2545.86    
   4  0.586668     -0.533296      -298.895       298.895       1830.83       2129.72    
   5  0.360311      -1.02079      -572.119       572.119       1904.43       2476.55    
   6  0.315643      -1.15314      -646.299       646.299       1839.98       2486.28    
   7  0.481464     -0.730923      -409.659       409.659       1938.43       2348.09    
   8  0.720279     -0.328116      -183.899       183.899       1842.02       2025.92    
   9  0.551471     -0.595166      -333.571       333.571       1969.92       2303.49    
  10  0.524434     -0.645435      -361.746       361.746       1913.24       2274.98    
  11  0.781600     -0.246412      -138.106       138.106       1893.04       2031.15    
  12  0.353648      -1.03945      -582.579       582.579       1844.36       2426.94    
  13  0.451044     -0.796190      -446.239       446.239       1965.16       2411.40    
  14  0.325353      -1.12284      -629.317       629.317       1920.43       2549.75    
  15  0.312157      -1.16425      -652.523       652.523       1867.99       2520.51    
  16  0.432418     -0.838362      -469.875       469.875       1860.39       2330.27    
  17  0.296543      -1.21556      -681.283       681.283       1897.95       2579.23    
  18  0.705416     -0.348967      -195.585       195.585       1799.18       1994.77    
  19  0.146505      -1.92069      -1076.49       1076.49       2035.22       3111.71    
  20  0.471608     -0.751607      -421.251       421.251       1862.04       2283.29    
  21  0.633095     -0.457134      -256.209       256.209       1959.76       2215.97    
  22  0.754855     -0.281230      -157.620       157.620       1868.22       2025.85    
  23  0.444501E-01  -3.11339      -1744.95       1744.95       1924.71       3669.66    
  24  0.160973      -1.82652      -1023.70       1023.70       1886.43       2910.13    
  25  0.943694     -0.579536E-01  -32.4811       32.4811       1892.11       1924.59    
  26  0.187304      -1.67502      -938.797       938.797       2000.81       2939.60    
  27  0.840922     -0.173257      -97.1047       97.1047       1921.00       2018.11    
  28  0.888648     -0.118054      -66.1653       66.1653       1881.96       1948.13    
  29  0.920614E-01  -2.38530      -1336.88       1336.88       1940.57       3277.46    
  30  0.906493     -0.981722E-01  -55.0223       55.0223       1831.67       1886.69    
  31  0.221761      -1.50616      -844.152       844.152       2342.61       3186.76    
  32  0.248725      -1.39141      -779.839       779.839       1935.97       2715.81    
  33  0.315928      -1.15224      -645.794       645.794       1890.21       2536.00    
  34  0.949967     -0.513283E-01  -28.7679       28.7679       1892.75       1921.52    
  35  0.802748     -0.219715      -123.143       123.143       1868.22       1991.37    
  36  0.558987     -0.581628      -325.984       325.984       2029.67       2355.66    
  37  0.638133     -0.449209      -251.767       251.767       1898.07       2149.84    
  38  0.637852     -0.449648      -252.013       252.013       1849.52       2101.53    
  39  0.382908     -0.959961      -538.027       538.027       1796.12       2334.14    
  40  0.982834     -0.173149E-01  -9.70446       9.70446       2076.38       2086.08    
  41  0.497022     -0.699120      -391.834       391.834       2435.02       2826.85    
  42  0.263620      -1.33325      -747.241       747.241       1868.19       2615.43    
  43  0.296939      -1.21423      -680.536       680.536       1873.15       2553.68    
  44  0.784161     -0.243141      -136.273       136.273       1881.57       2017.84    
  45  0.545321     -0.606380      -339.856       339.856       1830.81       2170.67    
  46  0.770080     -0.261260      -146.428       146.428       1837.28       1983.71    
  47  0.358755      -1.02511      -574.543       574.543       2025.84       2600.38    
  48  0.325126      -1.12354      -629.709       629.709       1865.59       2495.30    
  49  0.599396     -0.511832      -286.865       286.865       1847.39       2134.26    
  50  0.323708      -1.12791      -632.159       632.159       1904.86       2537.02    
  51  0.329142      -1.11127      -622.828       622.828       1874.21       2497.04    
loop,thermsimp(1:2)       13   76.4851       653.993    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     76       1886.24          0.87          1.12         22.12          0.16          0.05         24.32
Just calling func    0   0         24.32


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     77       1886.99          0.87          1.11         22.07          0.01          0.05         24.11
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1886.24
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    560.467               101
loop is:       13
neval is:       76
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       13      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    560.467      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    560.467               101
loop is:       14
neval is:       76


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      101
neval,tstepnext:       76     101

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.344597      -1.06538      -597.111       597.111       1831.67       2428.78    
   2  0.267720      -1.31781      -738.592       738.592       1843.54       2582.13    
   3  0.279825      -1.27359      -713.807       713.807       1892.75       2606.55    
   4  0.281095      -1.26906      -711.269       711.269       1892.11       2603.37    
   5  0.245867      -1.40297      -786.317       786.317       1881.96       2668.28    
   6  0.914239     -0.896636E-01  -50.2535       50.2535       1837.28       1887.53    
   7  0.180116      -1.71415      -960.728       960.728       1868.22       2828.95    
   8  0.567917     -0.565780      -317.102       317.102       1799.18       2116.28    
   9  0.431941     -0.839465      -470.493       470.493       1881.57       2352.06    
  10  0.877920     -0.130199      -72.9726       72.9726       1921.00       1993.97    
  11  0.280355      -1.27170      -712.745       712.745       1868.22       2580.97    
  12  0.486947     -0.719601      -403.313       403.313       1842.02       2245.34    
  13  0.216546      -1.52995      -857.488       857.488       1893.04       2750.53    
  14  0.483718E-02  -5.33142      -2988.09       2988.09       2076.38       5064.47    
  15  0.785152E-03  -7.14963      -4007.14       4007.14       1849.52       5856.65    
  16  0.300781      -1.20137      -673.330       673.330       1830.83       2504.16    
  17  0.869691     -0.139618      -78.2512       78.2512       1847.39       1925.64    
  18  0.694261E-01  -2.66749      -1495.04       1495.04       1898.07       3393.11    
  19  0.635475     -0.453382      -254.106       254.106       1830.81       2084.92    
  20  0.894977     -0.110958      -62.1881       62.1881       1959.76       2021.95    
  21  0.442267     -0.815841      -457.252       457.252       1913.24       2370.49    
  22  0.283362      -1.26103      -706.766       706.766       1862.04       2568.81    
  23  0.518611     -0.656601      -368.003       368.003       1969.92       2337.92    
  24  0.858122E-01  -2.45559      -1376.28       1376.28       1860.39       3236.67    
  25  0.461153     -0.774026      -433.817       433.817       1796.12       2229.93    
  26  0.180026      -1.71465      -961.008       961.008       1938.43       2899.44    
  27  0.446938E-01  -3.10792      -1741.89       1741.89       2029.67       3771.56    
  28  0.152352      -1.88156      -1054.55       1054.55       1965.16       3019.71    
  29  0.163937E-01  -4.11086      -2304.00       2304.00       1844.36       4148.36    
  30  0.721347     -0.326635      -183.068       183.068       1904.43       2087.50    
  31  0.813323     -0.206626      -115.807       115.807       1839.98       1955.79    
  32  0.569343     -0.563273      -315.696       315.696       1865.59       2181.29    
  33  0.275899      -1.28772      -721.725       721.725       1874.21       2595.93    
  34  0.933187     -0.691492E-01  -38.7559       38.7559       1866.10       1904.85    
  35  0.716570     -0.333279      -186.792       186.792       1867.99       2054.78    
  36  0.405413     -0.902848      -506.017       506.017       1890.21       2396.22    
  37  0.907528     -0.970314E-01  -54.3829       54.3829       1904.86       1959.24    
  38  0.554651     -0.589416      -330.348       330.348       1859.42       2189.77    
  39  0.419962     -0.867592      -486.257       486.257       1920.43       2406.68    
  40  0.824173     -0.193375      -108.380       108.380       1873.15       1981.53    
  41  0.865647     -0.144278      -80.8634       80.8634       1897.95       1978.81    
  42  0.300944      -1.20083      -673.027       673.027       2025.84       2698.87    
  43  0.339688      -1.07973      -605.153       605.153       1868.19       2473.34    
  44  0.217032      -1.52771      -856.233       856.233       1935.97       2792.21    
  45  0.792618E-01  -2.53500      -1420.78       1420.78       2435.02       3855.80    
  46  0.997677     -0.232582E-02  -1.30355       1.30355       1886.43       1887.73    
  47  0.174239      -1.74733      -979.320       979.320       2000.81       2980.13    
  48  0.834084     -0.181422      -101.681       101.681       2035.22       2136.90    
  49  0.324404      -1.12577      -630.955       630.955       2342.61       2973.57    
  50  0.927598     -0.751564E-01  -42.1227       42.1227       1940.57       1982.70    
  51  0.981384     -0.187911E-01  -10.5318       10.5318       1886.24       1896.77    
loop,thermsimp(1:2)       14   597.111       738.592    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     78       1932.97          0.86          1.12         22.04          0.09          0.05         24.16
Just calling func    0   0         24.16


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     79       2051.33          0.87          1.11         22.12          0.07          0.05         24.22
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1932.97
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    560.467               101
loop is:       14
neval is:       78
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       14      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    560.467      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    560.467               101
loop is:       15
neval is:       78


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      101
neval,tstepnext:       78     101

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.229949      -1.46990      -823.830       823.830       1837.28       2661.11    
   2  0.322822      -1.13066      -633.696       633.696       1886.43       2520.12    
   3  0.327586      -1.11601      -625.485       625.485       1886.24       2511.73    
   4  0.799078     -0.224296      -125.711       125.711       1866.10       1991.81    
   5  0.698072     -0.359433      -201.450       201.450       1847.39       2048.84    
   6  0.733871     -0.309421      -173.421       173.421       1839.98       2013.41    
   7  0.823872     -0.193740      -108.585       108.585       1904.86       2013.45    
   8  0.800045     -0.223087      -125.033       125.033       1897.95       2022.98    
   9  0.162010      -1.82010      -1020.10       1020.10       1873.15       2893.25    
  10  0.113138      -2.17915      -1221.34       1221.34       1940.57       3161.92    
  11  0.973966     -0.263784E-01  -14.7842       14.7842       1921.00       1935.79    
  12  0.998107     -0.189521E-02  -1.06220       1.06220       1959.76       1960.83    
  13  0.631351     -0.459893      -257.755       257.755       1867.99       2125.74    
  14  0.698229     -0.359208      -201.325       201.325       1830.81       2032.14    
  15  0.359252      -1.02373      -573.768       573.768       1904.43       2478.20    
  16  0.936266     -0.658562E-01  -36.9102       36.9102       1799.18       1836.09    
  17  0.843107     -0.170662      -95.6503       95.6503       2035.22       2130.87    
  18  0.181284      -1.70769      -957.106       957.106       1865.59       2822.70    
  19  0.354246      -1.03777      -581.634       581.634       1859.42       2441.06    
  20  0.981540     -0.186324E-01  -10.4429       10.4429       1796.12       1806.56    
  21  0.582284E-01  -2.84338      -1593.62       1593.62       1842.02       3435.65    
  22  0.935088     -0.671143E-01  -37.6154       37.6154       1969.92       2007.53    
  23  0.682144     -0.382515      -214.387       214.387       1881.57       2095.96    
  24  0.441439     -0.817715      -458.303       458.303       1913.24       2371.54    
  25  0.325829      -1.12138      -628.498       628.498       1890.21       2518.71    
  26  0.956968E-01  -2.34657      -1315.18       1315.18       1920.43       3235.60    
  27  0.465124E-01  -3.06804      -1719.53       1719.53       1831.67       3551.20    
  28  0.645503     -0.437726      -245.331       245.331       1868.19       2113.52    
  29  0.184751      -1.68875      -946.487       946.487       1830.83       2777.31    
  30  0.676303     -0.391115      -219.207       219.207       1862.04       2081.25    
  31  0.408248     -0.895880      -502.112       502.112       1868.22       2370.34    
  32  0.215511      -1.53474      -860.174       860.174       1843.54       2703.71    
  33  0.762109     -0.271666      -152.260       152.260       1874.21       2026.47    
  34  0.445022     -0.809632      -453.772       453.772       1892.11       2345.88    
  35  0.667113     -0.404797      -226.875       226.875       1892.75       2119.62    
  36  0.995785     -0.422376E-02  -2.36728       2.36728       1881.96       1884.33    
  37  0.278840      -1.27712      -715.783       715.783       2025.84       2741.62    
  38  0.624255     -0.471196      -264.090       264.090       1893.04       2157.13    
  39  0.368212     -0.999097      -559.962       559.962       1935.97       2495.94    
  40  0.330266      -1.10786      -620.918       620.918       1868.22       2489.14    
  41  0.969155     -0.313304E-01  -17.5597       17.5597       1938.43       1955.99    
  42  0.686816     -0.375688      -210.561       210.561       2342.61       2553.17    
  43  0.201053      -1.60419      -899.094       899.094       2000.81       2899.90    
  44  0.481166     -0.731544      -410.006       410.006       1965.16       2375.16    
  45  0.992829     -0.719725E-02  -4.03382       4.03382       1860.39       1864.43    
  46  0.665697     -0.406921      -228.066       228.066       1898.07       2126.14    
  47  0.991934E-02  -4.61327      -2585.59       2585.59       2029.67       4615.26    
  48  0.211644      -1.55285      -870.322       870.322       2435.02       3305.34    
  49  0.908243E-01  -2.39883      -1344.47       1344.47       1844.36       3188.83    
  50  0.643762     -0.440426      -246.845       246.845       2076.38       2323.22    
  51  0.568794E-01  -2.86682      -1606.76       1606.76       1932.97       3539.73    
loop,thermsimp(1:2)       15   823.830       633.696    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     80       1853.07          0.88          1.12         22.29          0.16          0.05         24.49
Just calling func    0   0         24.49


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     81       1824.61          0.87          1.12         22.10          0.13          0.05         24.27
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

   80    1824.6        1.016     -2.401      3.233     -102.6     0.7622    
                      0.5530      1.109     -99.70      3.593      6.320    

                       1.858     -1.768      1.540      7000.      7000.    

                      -2.132      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -6.983     -4.854     -7.885      7.160    

                      -13.64     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.    -0.1094E-01 0.2179     0.1134E-01 0.1079    

                     -0.2486    -0.9978E-01 0.1842     0.1253     0.7215E-01



                     -0.3756    -0.4253      0.000     0.5991E-01 0.5509E-02

                     -0.2151E-02 0.1879    -0.7116    -0.6928E-01 0.3143    

                      0.2051E-01 0.4634E-01-0.5626     -1.184      7000.    



                     -0.2390    -0.6590     -2.142     -1.982    -0.3807    

                     -0.3252      9.164      8.780    -0.1672E+05 -6.000    

                     -0.2794     -2.232      9.414      8.802    -0.1969E+05



                      -6.000     0.7340    -0.2199      8.925      9.117    

                     -0.1944E+05 -6.000    -0.4995    -0.4838      9.136    

                       8.837    -0.1891E+05 -6.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1824.61
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    560.467               101
loop is:       15
neval is:       80
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       15      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    560.467      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    560.467               101
loop is:       16
neval is:       80


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      101
neval,tstepnext:       80     101

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.557805     -0.583747      -327.171       327.171       1796.12       2123.29    
   2  0.850944     -0.161409      -90.4645       90.4645       1799.18       1889.65    
   3  0.343999      -1.06712      -598.084       598.084       1860.39       2458.48    
   4  0.481777E-02  -5.33544      -2990.34       2990.34       1881.96       4872.31    
   5  0.146991      -1.91738      -1074.63       1074.63       1921.00       2995.63    
   6  0.545677     -0.605728      -339.491       339.491       1938.43       2277.92    
   7  0.761940     -0.271888      -152.384       152.384       1959.76       2112.15    
   8  0.944477     -0.571238E-01  -32.0160       32.0160       1866.10       1898.11    
   9  0.965249     -0.353688E-01  -19.8231       19.8231       1969.92       1989.74    
  10  0.634176     -0.455429      -255.253       255.253       1839.98       2095.24    
  11  0.793205     -0.231673      -129.845       129.845       1904.86       2034.71    
  12  0.743605     -0.296246      -166.036       166.036       1897.95       2063.99    
  13  0.983069E-01  -2.31966      -1300.09       1300.09       1874.21       3174.30    
  14  0.618437     -0.480560      -269.338       269.338       1830.81       2100.15    
  15  0.429182     -0.845875      -474.085       474.085       1847.39       2321.48    
  16  0.771528     -0.259382      -145.375       145.375       1862.04       2007.41    
  17  0.218286      -1.52195      -853.002       853.002       1881.57       2734.57    
  18  0.556408     -0.586254      -328.576       328.576       1868.19       2196.76    
  19  0.526292     -0.641899      -359.764       359.764       1892.75       2252.51    
  20  0.665532     -0.407169      -228.205       228.205       1867.99       2096.19    
  21  0.261756      -1.34034      -751.219       751.219       1898.07       2649.29    
  22  0.975508     -0.247971E-01  -13.8980       13.8980       2035.22       2049.12    
  23  0.257613      -1.35630      -760.160       760.160       1893.04       2653.20    
  24  0.981555E-01  -2.32120      -1300.96       1300.96       2076.38       3377.34    
  25  0.955054     -0.459870E-01  -25.7742       25.7742       1892.11       1917.88    
  26  0.887906     -0.118890      -66.6339       66.6339       1868.22       1934.86    
  27  0.407043     -0.898837      -503.769       503.769       1913.24       2417.00    
  28  0.876870     -0.131396      -73.6433       73.6433       1965.16       2038.80    
  29  0.957152     -0.437935E-01  -24.5449       24.5449       1859.42       1883.97    
  30  0.827730     -0.189068      -105.966       105.966       1904.43       2010.40    
  31  0.289027      -1.24124      -695.672       695.672       1868.22       2563.90    
  32  0.125230      -2.07760      -1164.43       1164.43       1935.97       3100.40    
  33  0.242443      -1.41699      -794.176       794.176       1886.24       2680.42    
  34  0.654103     -0.424490      -237.913       237.913       1890.21       2128.12    
  35  0.811871     -0.208414      -116.809       116.809       1886.43       2003.24    
  36  0.145201E-01  -4.23222      -2372.02       2372.02       2342.61       4714.63    
  37  0.344449      -1.06581      -597.351       597.351       1837.28       2434.63    
  38  0.265532      -1.32602      -743.191       743.191       1843.54       2586.73    
  39  0.811851     -0.208438      -116.823       116.823       2025.84       2142.66    
  40  0.983290E-01  -2.31944      -1299.97       1299.97       1830.83       3130.79    
  41  0.347314      -1.05753      -592.709       592.709       1865.59       2458.30    
  42  0.923773     -0.792888E-01  -44.4388       44.4388       1873.15       1917.58    
  43  0.690375     -0.370520      -207.665       207.665       2000.81       2208.47    
  44  0.227523      -1.48051      -829.775       829.775       1940.57       2770.35    
  45  0.652275     -0.427289      -239.481       239.481       1844.36       2083.84    
  46  0.669640     -0.401014      -224.755       224.755       1920.43       2145.18    
  47  0.288804      -1.24201      -696.105       696.105       2435.02       3131.12    
  48  0.404648     -0.904738      -507.076       507.076       1842.02       2349.10    
  49  0.371042     -0.991440      -555.670       555.670       1932.97       2488.64    
  50  0.308424      -1.17628      -659.267       659.267       1831.67       2490.93    
  51  0.911221     -0.929703E-01  -52.1069       52.1069       1824.61       1876.72    
loop,thermsimp(1:2)       16   327.171       90.4645    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     82       1870.44          0.87          1.11         21.95          0.12          0.05         24.10
Just calling func    0   0         24.10


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     83       1839.10          0.87          1.11         22.05          0.08          0.05         24.17
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1839.10
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    560.467               101
loop is:       16
neval is:       82
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       16      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    560.467      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    560.467               101
loop is:       17
neval is:       82


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      101
neval,tstepnext:       82     101

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.739792     -0.301387      -168.917       168.917       1824.61       1993.53    
   2  0.527958     -0.638738      -357.992       357.992       1859.42       2217.42    
   3  0.326119      -1.12049      -627.999       627.999       1799.18       2427.18    
   4  0.647061     -0.435314      -243.979       243.979       1866.10       2110.08    
   5  0.419805     -0.867966      -486.467       486.467       1873.15       2359.61    
   6  0.218417      -1.52135      -852.665       852.665       1892.11       2744.77    
   7  0.168864      -1.77866      -996.882       996.882       1868.22       2865.11    
   8  0.761417     -0.272575      -152.769       152.769       1969.92       2122.69    
   9  0.383989     -0.957143      -536.447       536.447       1886.43       2422.87    
  10  0.104774      -2.25595      -1264.39       1264.39       1862.04       3126.43    
  11  0.167912      -1.78432      -1000.05       1000.05       1904.43       2904.48    
  12  0.997930     -0.207190E-02  -1.16123       1.16123       1904.86       1906.02    
  13  0.493294     -0.706650      -396.054       396.054       1965.16       2361.21    
  14  0.483048     -0.727639      -407.818       407.818       2035.22       2443.04    
  15  0.715967     -0.334121      -187.264       187.264       1897.95       2085.22    
  16  0.595423E-01  -2.82107      -1581.12       1581.12       1844.36       3425.48    
  17  0.636569     -0.451662      -253.142       253.142       1839.98       2093.13    
  18  0.482980     -0.727779      -407.897       407.897       1867.99       2275.88    
  19  0.500121     -0.692905      -388.351       388.351       1830.81       2219.17    
  20  0.426980     -0.851018      -476.968       476.968       1959.76       2436.73    
  21  0.546576     -0.604082      -338.569       338.569       1796.12       2134.68    
  22  0.142720      -1.94687      -1091.16       1091.16       1890.21       2981.37    
  23  0.473622     -0.747346      -418.863       418.863       2025.84       2444.70    
  24  0.892718E-01  -2.41607      -1354.13       1354.13       1920.43       3274.56    
  25  0.660659     -0.414518      -232.324       232.324       1868.19       2100.51    
  26  0.328755      -1.11244      -623.488       623.488       2000.81       2624.30    
  27  0.544150     -0.608530      -341.061       341.061       1892.75       2233.81    
  28  0.199068      -1.61411      -904.656       904.656       1938.43       2843.09    
  29  0.685070     -0.378234      -211.988       211.988       1847.39       2059.38    
  30  0.500258     -0.692632      -388.198       388.198       1842.02       2230.22    
  31  0.130607      -2.03556      -1140.87       1140.87       1913.24       3054.10    
  32  0.982013E-01  -2.32074      -1300.70       1300.70       1837.28       3137.98    
  33  0.581494E-01  -2.84474      -1594.38       1594.38       1865.59       3459.97    
  34  0.841391     -0.172699      -96.7923       96.7923       1860.39       1957.18    
  35  0.838937E-01  -2.47820      -1388.95       1388.95       1932.97       3321.92    
  36  0.729848     -0.314919      -176.502       176.502       1831.67       2008.17    
  37  0.748292     -0.289962      -162.514       162.514       1868.22       2030.74    
  38  0.229216      -1.47309      -825.619       825.619       1843.54       2669.16    
  39  0.710713     -0.341487      -191.392       191.392       1898.07       2089.46    
  40  0.511506     -0.670395      -375.735       375.735       1893.04       2268.78    
  41  0.106756      -2.23721      -1253.88       1253.88       1886.24       3140.12    
  42  0.583466     -0.538770      -301.963       301.963       1881.57       2183.53    
  43  0.993140E-01  -2.30947      -1294.38       1294.38       1940.57       3234.96    
  44  0.461224     -0.773871      -433.729       433.729       1921.00       2354.73    
  45  0.574465     -0.554316      -310.676       310.676       1935.97       2246.65    
  46  0.715977     -0.334107      -187.256       187.256       1830.83       2018.08    
  47  0.877584     -0.130583      -73.1875       73.1875       2435.02       2508.20    
  48  0.492354     -0.708558      -397.124       397.124       1874.21       2271.33    
  49  0.874926     -0.133616      -74.8877       74.8877       2076.38       2151.26    
  50  0.800367     -0.222685      -124.808       124.808       2342.61       2467.42    
  51  0.507308     -0.678636      -380.353       380.353       1839.10       2219.45    
loop,thermsimp(1:2)       17   168.917       357.992    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     84       1959.70          0.88          1.12         22.14          0.09          0.05         24.27
Just calling func    0   0         24.27


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     85       2253.58          0.86          1.12         21.99          0.09          0.05         24.11
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1959.70
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    560.467               101
loop is:       17
neval is:       84
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       17      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    560.467      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    560.467               101
loop is:       18
neval is:       84


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      101
neval,tstepnext:       84     101

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.382860     -0.960086      -538.097       538.097       1904.86       2442.96    
   2  0.293468      -1.22599      -687.127       687.127       1860.39       2547.52    
   3  0.954036     -0.470539E-01  -26.3722       26.3722       1824.61       1850.98    
   4  0.452934     -0.792010      -443.896       443.896       1831.67       2275.56    
   5  0.251692      -1.37955      -773.192       773.192       1830.83       2604.02    
   6  0.881081     -0.126605      -70.9582       70.9582       1868.22       1939.18    
   7  0.855311     -0.156290      -87.5953       87.5953       1847.39       1934.99    
   8  0.576474     -0.550824      -308.719       308.719       1897.95       2206.67    
   9  0.433835     -0.835090      -468.041       468.041       1898.07       2366.11    
  10  0.298626      -1.20856      -677.361       677.361       1839.98       2517.35    
  11  0.269991      -1.30937      -733.858       733.858       1868.19       2602.04    
  12  0.884826     -0.122364      -68.5811       68.5811       1866.10       1934.68    
  13  0.664124     -0.409287      -229.392       229.392       1969.92       2199.31    
  14  0.580836     -0.543287      -304.495       304.495       1796.12       2100.61    
  15  0.285501      -1.25351      -702.551       702.551       2076.38       2778.93    
  16  0.690757     -0.369967      -207.355       207.355       1881.57       2088.93    
  17  0.578320     -0.547628      -306.928       306.928       1859.42       2166.35    
  18  0.563230     -0.574067      -321.746       321.746       1830.81       2152.56    
  19  0.681565     -0.383363      -214.863       214.863       1839.10       2053.96    
  20  0.453362     -0.791065      -443.366       443.366       1842.02       2285.39    
  21  0.645457     -0.437797      -245.371       245.371       1892.75       2138.12    
  22  0.982222E-01  -2.32052      -1300.58       1300.58       1935.97       3236.55    
  23  0.843064     -0.170712      -95.6788       95.6788       1893.04       1988.72    
  24  0.505683     -0.681845      -382.152       382.152       1874.21       2256.36    
  25  0.350376      -1.04875      -587.790       587.790       1867.99       2455.78    
  26  0.367167      -1.00194      -561.555       561.555       1921.00       2482.56    
  27  0.268175      -1.31611      -737.639       737.639       1873.15       2610.78    
  28  0.989085E-01  -2.31356      -1296.68       1296.68       1965.16       3261.83    
  29  0.349392      -1.05156      -589.366       589.366       1886.43       2475.79    
  30  0.945468     -0.560755E-01  -31.4285       31.4285       1799.18       1830.61    
  31  0.305400      -1.18613      -664.788       664.788       1959.76       2624.55    
  32  0.942706     -0.590006E-01  -33.0679       33.0679       2035.22       2068.29    
  33  0.778346     -0.250584      -140.444       140.444       2025.84       2166.28    
  34  0.256449      -1.36083      -762.699       762.699       2342.61       3105.31    
  35  0.338120      -1.08436      -607.746       607.746       2435.02       3042.76    
  36  0.644609     -0.439112      -246.108       246.108       2000.81       2246.92    
  37  0.420837     -0.865509      -485.089       485.089       1843.54       2328.63    
  38  0.793406     -0.231421      -129.704       129.704       1892.11       2021.81    
  39  0.685561     -0.377517      -211.586       211.586       1938.43       2150.02    
  40  0.278740      -1.27748      -715.984       715.984       1868.22       2584.21    
  41  0.414078     -0.881700      -494.164       494.164       1904.43       2398.59    
  42  0.999720     -0.280334E-03 -0.157118      0.157118       1890.21       1890.36    
  43  0.714259     -0.336509      -188.602       188.602       1913.24       2101.84    
  44  0.713371     -0.337753      -189.300       189.300       1862.04       2051.34    
  45  0.451360     -0.795490      -445.846       445.846       1837.28       2283.13    
  46  0.887280     -0.119595      -67.0291       67.0291       1886.24       1953.27    
  47  0.234319      -1.45107      -813.279       813.279       1940.57       2753.85    
  48  0.277567E-01  -3.58428      -2008.87       2008.87       1920.43       3929.30    
  49  0.582411     -0.540579      -302.977       302.977       1932.97       2235.95    
  50  0.969019     -0.314707E-01  -17.6383       17.6383       1844.36       1862.00    
  51  0.441889     -0.816696      -457.731       457.731       1959.70       2417.43    
loop,thermsimp(1:2)       18   538.097       687.127    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     86       1877.42          0.88          1.12         22.40          0.07          0.05         24.52
Just calling func    0   0         24.52


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     87       2669.08          0.87          1.12         22.12          0.14          0.05         24.30
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1877.42
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    560.467               101
loop is:       18
neval is:       86
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       18      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    560.467      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    560.467               101
loop is:       19
neval is:       86


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      101
neval,tstepnext:       86     101

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.352992      -1.04131      -583.620       583.620       1799.18       2382.80    
   2  0.270835E-01  -3.60883      -2022.63       2022.63       1824.61       3847.24    
   3  0.923755     -0.793087E-01  -44.4499       44.4499       1844.36       1888.81    
   4  0.535520     -0.624517      -350.021       350.021       1890.21       2240.23    
   5  0.629344     -0.463078      -259.540       259.540       1866.10       2125.64    
   6  0.572648E-01  -2.86007      -1602.98       1602.98       1847.39       3450.37    
   7  0.353113E-01  -3.34355      -1873.95       1873.95       1868.22       3742.18    
   8  0.580838     -0.543283      -304.492       304.492       1886.24       2190.73    
   9  0.370403     -0.993164      -556.636       556.636       1893.04       2449.68    
  10  0.443010     -0.814162      -456.311       456.311       1892.11       2348.42    
  11  0.188704      -1.66757      -934.621       934.621       1862.04       2796.66    
  12  0.177608      -1.72818      -968.588       968.588       1839.10       2807.69    
  13  0.694998     -0.363847      -203.924       203.924       2035.22       2239.15    
  14  0.160742      -1.82796      -1024.51       1024.51       1881.57       2906.08    
  15  0.290050      -1.23770      -693.692       693.692       1796.12       2489.81    
  16  0.441138E-01  -3.12098      -1749.21       1749.21       1913.24       3662.44    
  17  0.372461     -0.987622      -553.530       553.530       1892.75       2446.28    
  18  0.652779     -0.426517      -239.049       239.049       1938.43       2177.48    
  19  0.998108     -0.189387E-02  -1.06146       1.06146       1830.81       1831.88    
  20  0.741140     -0.299566      -167.897       167.897       2025.84       2193.74    
  21  0.623042     -0.473141      -265.180       265.180       1859.42       2124.60    
  22  0.504617     -0.683955      -383.335       383.335       1969.92       2353.25    
  23  0.872499     -0.136394      -76.4445       76.4445       1897.95       1974.40    
  24  0.142620      -1.94757      -1091.55       1091.55       1932.97       3024.52    
  25  0.580285     -0.544236      -305.027       305.027       2000.81       2305.83    
  26  0.860063E-01  -2.45334      -1375.01       1375.01       1874.21       3249.22    
  27  0.401846     -0.911687      -510.971       510.971       1831.67       2342.64    
  28  0.161242      -1.82485      -1022.77       1022.77       1837.28       2860.05    
  29  0.550753     -0.596469      -334.302       334.302       1842.02       2176.32    
  30  0.815012     -0.204553      -114.645       114.645       1843.54       1958.18    
  31  0.438663     -0.824024      -461.838       461.838       1898.07       2359.91    
  32  0.542283     -0.611968      -342.988       342.988       1904.43       2247.42    
  33  0.943132E-01  -2.36113      -1323.34       1323.34       1959.70       3283.04    
  34  0.236587      -1.44144      -807.879       807.879       1904.86       2712.74    
  35  0.283068      -1.26207      -707.348       707.348       1867.99       2575.34    
  36  0.973178     -0.271886E-01  -15.2383       15.2383       1886.43       1901.67    
  37  0.596723     -0.516302      -289.370       289.370       1921.00       2210.37    
  38  0.595114     -0.519003      -290.884       290.884       1839.98       2130.87    
  39  0.948736     -0.526250E-01  -29.4946       29.4946       1860.39       1889.89    
  40  0.216072E-01  -3.83473      -2149.24       2149.24       1868.22       4017.47    
  41  0.440213     -0.820496      -459.861       459.861       1868.19       2328.05    
  42  0.905197     -0.996023E-01  -55.8239       55.8239       1830.83       1886.65    
  43  0.158396      -1.84266      -1032.75       1032.75       1873.15       2905.90    
  44  0.287789      -1.24553      -698.077       698.077       1959.76       2657.84    
  45  0.238244      -1.43446      -803.969       803.969       1940.57       2744.54    
  46  0.363881      -1.01093      -566.592       566.592       2076.38       2642.97    
  47  0.828805     -0.187771      -105.239       105.239       2435.02       2540.26    
  48  0.587140     -0.532492      -298.445       298.445       2342.61       2641.06    
  49  0.141687      -1.95414      -1095.23       1095.23       1935.97       3031.21    
  50  0.879115     -0.128839      -72.2101       72.2101       1965.16       2037.37    
  51  0.742190     -0.298150      -167.104       167.104       1877.42       2044.52    
loop,thermsimp(1:2)       19   583.620       2022.63    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     88       1876.39          0.88          1.12         21.99          0.16          0.05         24.20
Just calling func    0   0         24.20


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     89       1836.91          0.87          1.11         22.00          0.10          0.05         24.14
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1836.91
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    560.467               101
loop is:       19
neval is:       88
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       19      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    560.467      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    560.467               101
loop is:       20
neval is:       88


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      101
neval,tstepnext:       88     101

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.534746     -0.625963      -350.832       350.832       1830.81       2181.65    
   2  0.288348      -1.24359      -696.991       696.991       1830.83       2527.82    
   3  0.910112E-01  -2.39677      -1343.31       1343.31       1844.36       3187.67    
   4  0.213812      -1.54266      -864.609       864.609       1860.39       2725.00    
   5  0.575222     -0.552999      -309.938       309.938       1886.43       2196.37    
   6  0.855707     -0.155827      -87.3361       87.3361       1843.54       1930.88    
   7  0.818692     -0.200047      -112.120       112.120       1897.95       2010.07    
   8  0.309911      -1.17147      -656.571       656.571       1965.16       2621.73    
   9  0.773438     -0.256910      -143.990       143.990       1877.42       2021.41    
  10  0.440502E-01  -3.12243      -1750.02       1750.02       1859.42       3609.44    
  11  0.211655      -1.55280      -870.293       870.293       1866.10       2736.39    
  12  0.713577     -0.337465      -189.138       189.138       1839.98       2029.12    
  13  0.927405     -0.753650E-01  -42.2397       42.2397       1842.02       1884.26    
  14  0.360229      -1.02101      -572.245       572.245       1938.43       2510.68    
  15  0.911872     -0.922553E-01  -51.7061       51.7061       1886.24       1937.95    
  16  0.800691     -0.222280      -124.581       124.581       2025.84       2150.42    
  17  0.169830      -1.77296      -993.686       993.686       1921.00       2914.69    
  18  0.581014     -0.542980      -304.323       304.323       2035.22       2339.55    
  19  0.869395     -0.139958      -78.4417       78.4417       1890.21       1968.65    
  20  0.773880     -0.256338      -143.669       143.669       1904.43       2048.10    
  21  0.496085     -0.701008      -392.892       392.892       2000.81       2393.70    
  22  0.530037     -0.634809      -355.790       355.790       1868.19       2223.98    
  23  0.239414      -1.42956      -801.223       801.223       1831.67       2632.89    
  24  0.595728     -0.517972      -290.306       290.306       1892.11       2182.41    
  25  0.170793      -1.76730      -990.517       990.517       1969.92       2960.43    
  26  0.983027     -0.171183E-01  -9.59424       9.59424       1898.07       1907.67    
  27  0.608714     -0.496407      -278.220       278.220       1799.18       2077.40    
  28  0.518727     -0.656378      -367.879       367.879       1892.75       2260.63    
  29  0.887918     -0.118876      -66.6260       66.6260       1893.04       1959.67    
  30  0.140498      -1.96256      -1099.95       1099.95       1796.12       2896.07    
  31  0.256308      -1.36138      -763.007       763.007       2435.02       3198.02    
  32  0.887238     -0.119642      -67.0553       67.0553       1867.99       1935.04    
  33  0.306042      -1.18403      -663.612       663.612       2342.61       3006.22    
  34  0.993873     -0.614632E-02  -3.44481       3.44481       2076.38       2079.82    
  35  0.275412E-01  -3.59207      -2013.24       2013.24       1959.76       3973.00    
  36  0.698960     -0.358161      -200.738       200.738       1904.86       2105.60    
  37  0.268424      -1.31519      -737.119       737.119       1940.57       2677.69    
  38  0.580935E-01  -2.84570      -1594.92       1594.92       1862.04       3456.96    
  39  0.242705      -1.41591      -793.571       793.571       1839.10       2632.67    
  40  0.443517     -0.813019      -455.671       455.671       1837.28       2292.95    
  41  0.904179     -0.100728      -56.4546       56.4546       1873.15       1929.60    
  42  0.454025     -0.789603      -442.547       442.547       1881.57       2324.12    
  43  0.592994     -0.522572      -292.884       292.884       1932.97       2225.86    
  44  0.401796     -0.911812      -511.041       511.041       1935.97       2447.02    
  45  0.130776      -2.03427      -1140.14       1140.14       1874.21       3014.35    
  46  0.709753     -0.342839      -192.150       192.150       1959.70       2151.85    
  47  0.388071     -0.946568      -530.520       530.520       1847.39       2377.91    
  48  0.362521      -1.01467      -568.690       568.690       1913.24       2481.93    
  49  0.285379      -1.25394      -702.791       702.791       1868.22       2571.02    
  50  0.286508      -1.24999      -700.578       700.578       1824.61       2525.19    
  51  0.951542     -0.496714E-01  -27.8392       27.8392       1836.91       1864.75    
loop,thermsimp(1:2)       20   350.832       696.991    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     90       1944.15          0.88          1.12         21.98          0.11          0.05         24.14
Just calling func    0   0         24.14


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     91       2177.40          0.88          1.11         21.96          0.11          0.05         24.12
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1944.15
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    560.467               101
loop is:       20
neval is:       90
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       20      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    560.467      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    560.467               101
loop is:       21
neval is:       90


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      101
neval,tstepnext:       90     101

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.297422      -1.21260      -679.625       679.625       1836.91       2516.53    
   2  0.663536     -0.410173      -229.889       229.889       1842.02       2071.91    
   3  0.263982      -1.33188      -746.473       746.473       1898.07       2644.54    
   4  0.792402     -0.232686      -130.413       130.413       1873.15       2003.56    
   5  0.624731     -0.470434      -263.663       263.663       1843.54       2107.20    
   6  0.170977      -1.76622      -989.912       989.912       1867.99       2857.90    
   7  0.362487      -1.01477      -568.744       568.744       1886.24       2454.99    
   8  0.659245     -0.416659      -233.524       233.524       1893.04       2126.57    
   9  0.746481E-03  -7.20014      -4035.44       4035.44       1890.21       5925.65    
  10  0.690046     -0.370998      -207.932       207.932       1897.95       2105.88    
  11  0.905636     -0.991173E-01  -55.5520       55.5520       1877.42       1932.97    
  12  0.317643      -1.14683      -642.760       642.760       1839.98       2482.74    
  13  0.321948      -1.13336      -635.214       635.214       1904.43       2539.64    
  14  0.293974      -1.22426      -686.161       686.161       1799.18       2485.34    
  15  0.679275     -0.386729      -216.749       216.749       2076.38       2293.13    
  16  0.180340      -1.71291      -960.031       960.031       1904.86       2864.89    
  17  0.539600     -0.616927      -345.768       345.768       2025.84       2371.61    
  18  0.260315      -1.34586      -754.311       754.311       1959.70       2714.01    
  19  0.256777      -1.35955      -761.982       761.982       1830.81       2592.80    
  20  0.518851     -0.656138      -367.744       367.744       1892.11       2259.85    
  21  0.485887     -0.721780      -404.534       404.534       1886.43       2290.96    
  22  0.562814     -0.574805      -322.160       322.160       1868.19       2190.35    
  23  0.906369     -0.983082E-01  -55.0986       55.0986       1932.97       1988.07    
  24  0.332143      -1.10219      -617.741       617.741       1892.75       2510.49    
  25  0.912001E-01  -2.39470      -1342.15       1342.15       1837.28       3179.43    
  26  0.302569      -1.19545      -670.008       670.008       1881.57       2551.58    
  27  0.362040      -1.01600      -569.435       569.435       2035.22       2604.66    
  28  0.630870     -0.460656      -258.183       258.183       1847.39       2105.58    
  29  0.685312     -0.377881      -211.790       211.790       2000.81       2212.60    
  30  0.329910      -1.10894      -621.523       621.523       1935.97       2557.50    
  31  0.906630E-01  -2.40061      -1345.46       1345.46       1913.24       3258.70    
  32  0.339749      -1.07955      -605.052       605.052       1938.43       2543.48    
  33  0.783039     -0.244573      -137.075       137.075       1824.61       1961.69    
  34  0.322673      -1.13112      -633.954       633.954       1830.83       2464.78    
  35  0.255311      -1.36527      -765.190       765.190       1868.22       2633.41    
  36  0.645921     -0.437078      -244.968       244.968       1965.16       2210.12    
  37  0.240122      -1.42661      -799.567       799.567       1839.10       2638.67    
  38  0.224638      -1.49326      -836.926       836.926       1831.67       2668.59    
  39  0.682659     -0.381760      -213.964       213.964       1940.57       2154.54    
  40  0.533856     -0.627629      -351.766       351.766       1860.39       2212.16    
  41  0.439620E-02  -5.42701      -3041.66       3041.66       1866.10       4907.76    
  42  0.409891     -0.891863      -499.860       499.860       1796.12       2295.98    
  43  0.379406     -0.969149      -543.176       543.176       1921.00       2464.18    
  44  0.982111     -0.180514E-01  -10.1172       10.1172       1969.92       1980.03    
  45  0.243530      -1.41251      -791.668       791.668       2342.61       3134.28    
  46  0.709323     -0.343445      -192.490       192.490       1874.21       2066.70    
  47  0.212014      -1.55110      -869.343       869.343       1844.36       2713.70    
  48  0.530919     -0.633146      -354.858       354.858       2435.02       2789.87    
  49  0.439600     -0.821890      -460.643       460.643       1862.04       2322.68    
  50  0.304385      -1.18946      -666.654       666.654       1859.42       2526.08    
  51  0.850253     -0.162221      -90.9196       90.9196       1944.15       2035.07    
loop,thermsimp(1:2)       21   679.625       229.889    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     92       2004.06          0.88          1.11         21.99          0.11          0.05         24.14
Just calling func    0   0         24.14


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     93       2289.18          0.87          1.11         21.96          0.11          0.05         24.10
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   2004.06
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    560.467               101
loop is:       21
neval is:       92
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       21      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    560.467      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    560.467               101
loop is:       22
neval is:       92


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      101
neval,tstepnext:       92     101

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.383671     -0.957969      -536.910       536.910       1877.42       2414.33    
   2  0.741480     -0.299107      -167.639       167.639       1824.61       1992.25    
   3  0.138898      -1.97401      -1106.37       1106.37       1969.92       3076.29    
   4  0.751974E-01  -2.58764      -1450.29       1450.29       1932.97       3383.26    
   5  0.824485     -0.192996      -108.168       108.168       1873.15       1981.31    
   6  0.982900     -0.172482E-01  -9.66707       9.66707       1944.15       1953.81    
   7  0.693409     -0.366136      -205.207       205.207       1874.21       2079.42    
   8  0.941572     -0.602045E-01  -33.7426       33.7426       1842.02       1875.77    
   9  0.812713     -0.207378      -116.229       116.229       1847.39       1963.62    
  10  0.879507     -0.128393      -71.9602       71.9602       1897.95       1969.91    
  11  0.418958     -0.869984      -487.597       487.597       1843.54       2331.14    
  12  0.314952      -1.15533      -647.527       647.527       1893.04       2540.57    
  13  0.812426     -0.207731      -116.426       116.426       1940.57       2057.00    
  14  0.213788      -1.54277      -864.672       864.672       1868.19       2732.86    
  15  0.521629     -0.650798      -364.751       364.751       1965.16       2329.91    
  16  0.287143      -1.24777      -699.337       699.337       1860.39       2559.73    
  17  0.518340     -0.657125      -368.297       368.297       2000.81       2369.11    
  18  0.712802E-02  -4.94372      -2770.79       2770.79       1892.11       4662.90    
  19  0.579935     -0.544838      -305.364       305.364       1886.43       2191.79    
  20  0.508101E-02  -5.28224      -2960.53       2960.53       2076.38       5036.90    
  21  0.984466     -0.156557E-01  -8.77453       8.77453       1796.12       1804.89    
  22  0.394325     -0.930579      -521.559       521.559       1862.04       2383.60    
  23  0.837309     -0.177562      -99.5177       99.5177       2025.84       2125.36    
  24  0.683519     -0.380501      -213.258       213.258       1886.24       2099.50    
  25  0.892337     -0.113912      -63.8439       63.8439       1921.00       1984.85    
  26  0.297675      -1.21175      -679.148       679.148       1830.83       2509.97    
  27  0.566054     -0.569065      -318.943       318.943       1839.98       2158.93    
  28  0.325499E-01  -3.42498      -1919.59       1919.59       1799.18       3718.77    
  29  0.721169     -0.326882      -183.207       183.207       1892.75       2075.95    
  30  0.370449     -0.993040      -556.567       556.567       1836.91       2393.48    
  31  0.398952     -0.918913      -515.021       515.021       1859.42       2374.44    
  32  0.942469     -0.592518E-01  -33.2087       33.2087       1904.43       1937.64    
  33  0.379045     -0.970101      -543.710       543.710       1938.43       2482.14    
  34  0.218373      -1.52155      -852.779       852.779       1881.57       2734.35    
  35  0.413944     -0.882024      -494.346       494.346       1935.97       2430.32    
  36  0.452532     -0.792896      -444.393       444.393       1830.81       2275.21    
  37  0.938896     -0.630505E-01  -35.3377       35.3377       2035.22       2070.56    
  38  0.389299     -0.943409      -528.750       528.750       1868.22       2396.97    
  39  0.943794     -0.578471E-01  -32.4214       32.4214       1839.10       1871.52    
  40  0.706887     -0.346884      -194.417       194.417       1898.07       2092.49    
  41  0.274873      -1.29145      -723.814       723.814       1831.67       2555.48    
  42  0.343864      -1.06751      -598.304       598.304       1844.36       2442.66    
  43  0.869527E-01  -2.44239      -1368.88       1368.88       1959.70       3328.58    
  44  0.859615     -0.151271      -84.7822       84.7822       2435.02       2519.80    
  45  0.264079      -1.33151      -746.266       746.266       1867.99       2614.25    
  46  0.494871     -0.703457      -394.265       394.265       1904.86       2299.13    
  47  0.112943      -2.18087      -1222.31       1222.31       2342.61       3564.92    
  48  0.358273      -1.02646      -575.298       575.298       1837.28       2412.58    
  49  0.215257      -1.53592      -860.834       860.834       1913.24       2774.07    
  50  0.441681     -0.817166      -457.995       457.995       1866.10       2324.09    
  51  0.888276     -0.118473      -66.4003       66.4003       2004.06       2070.46    
loop,thermsimp(1:2)       22   536.910       167.639    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     94       1873.49          0.87          1.11         22.03          0.11          0.05         24.18
Just calling func    0   0         24.18


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     95       2130.32          0.87          1.11         22.03          0.06          0.05         24.12
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1873.49
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    560.467               101
loop is:       22
neval is:       94
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       22      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    560.467      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    560.467               101
loop is:       23
neval is:       94


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      101
neval,tstepnext:       94     101

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.327656      -1.11579      -625.365       625.365       1796.12       2421.48    
   2  0.736029     -0.306486      -171.775       171.775       1839.10       2010.88    
   3  0.608436     -0.496864      -278.476       278.476       1842.02       2120.50    
   4  0.584882     -0.536346      -300.604       300.604       1904.43       2205.03    
   5  0.617514     -0.482053      -270.175       270.175       1944.15       2214.32    
   6  0.376473     -0.976909      -547.526       547.526       1847.39       2394.92    
   7  0.535145     -0.625218      -350.415       350.415       1897.95       2248.37    
   8  0.341783      -1.07358      -601.706       601.706       1873.15       2474.85    
   9  0.804208E-01  -2.52048      -1412.65       1412.65       1921.00       3333.65    
  10  0.660499     -0.414760      -232.460       232.460       1824.61       2057.07    
  11  0.739860E-01  -2.60388      -1459.39       1459.39       1940.57       3399.96    
  12  0.203251      -1.59331      -893.000       893.000       2004.06       2897.06    
  13  0.637025     -0.450946      -252.741       252.741       2035.22       2287.96    
  14  0.687460     -0.374752      -210.036       210.036       1892.75       2102.78    
  15  0.663581     -0.410105      -229.850       229.850       1874.21       2104.06    
  16  0.579690     -0.545263      -305.602       305.602       1898.07       2203.67    
  17  0.775653     -0.254050      -142.387       142.387       1886.24       2028.63    
  18  0.284124      -1.25834      -705.261       705.261       2025.84       2731.10    
  19  0.317710      -1.14662      -642.641       642.641       1839.98       2482.63    
  20  0.958871     -0.419990E-01  -23.5391       23.5391       1886.43       1909.97    
  21  0.582932     -0.539685      -302.476       302.476       1830.81       2133.29    
  22  0.905476     -0.992942E-01  -55.6512       55.6512       1904.86       1960.51    
  23  0.225214      -1.49070      -835.490       835.490       1866.10       2701.59    
  24  0.618260     -0.480846      -269.498       269.498       1965.16       2234.66    
  25  0.608706     -0.496420      -278.227       278.227       1843.54       2121.77    
  26  0.651052     -0.429165      -240.533       240.533       2000.81       2241.34    
  27  0.138439E-02  -6.58249      -3689.27       3689.27       1859.42       5548.70    
  28  0.157375      -1.84913      -1036.37       1036.37       1862.04       2898.41    
  29  0.168063      -1.78342      -999.547       999.547       1836.91       2836.46    
  30  0.924354     -0.786598E-01  -44.0863       44.0863       1868.22       1912.31    
  31  0.985585     -0.145204E-01  -8.13822       8.13822       1837.28       1845.42    
  32  0.540844E-01  -2.91721      -1635.00       1635.00       1877.42       3512.42    
  33  0.535345     -0.624843      -350.204       350.204       1935.97       2286.18    
  34  0.736351     -0.306048      -171.530       171.530       1844.36       2015.89    
  35  0.283062E-01  -3.56467      -1997.88       1997.88       1938.43       3936.32    
  36  0.690743     -0.369987      -207.366       207.366       1830.83       2038.19    
  37  0.260994      -1.34326      -752.851       752.851       2435.02       3187.87    
  38  0.243637      -1.41208      -791.424       791.424       1893.04       2684.47    
  39  0.850226     -0.162253      -90.9376       90.9376       1831.67       1922.60    
  40  0.589307     -0.528809      -296.380       296.380       1860.39       2156.77    
  41  0.515087     -0.663420      -371.825       371.825       1867.99       2239.81    
  42  0.348855      -1.05310      -590.228       590.228       1868.19       2458.41    
  43  0.791407     -0.233943      -131.118       131.118       1881.57       2012.69    
  44  0.370775     -0.992160      -556.073       556.073       1913.24       2469.31    
  45  0.676021     -0.391531      -219.441       219.441       1969.92       2189.36    
  46  0.125601      -2.07465      -1162.77       1162.77       1959.70       3122.47    
  47  0.582904     -0.539733      -302.503       302.503       1932.97       2235.47    
  48  0.818994     -0.199679      -111.913       111.913       2342.61       2454.52    
  49  0.291406      -1.23304      -691.078       691.078       1799.18       2490.26    
  50  0.887104     -0.119794      -67.1404       67.1404       1892.11       1959.25    
  51  0.666242     -0.406102      -227.607       227.607       1873.49       2101.09    
loop,thermsimp(1:2)       23   625.365       171.775    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     96       1889.21          0.88          1.11         22.02          0.14          0.05         24.21
Just calling func    0   0         24.21


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     97       2172.03          0.87          1.11         21.97          0.08          0.04         24.07
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1889.21
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    560.467               101
loop is:       23
neval is:       96
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       23      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    560.467      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    560.467               101
loop is:       24
neval is:       96


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      101
neval,tstepnext:       96     101

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.291502      -1.23271      -690.893       690.893       1837.28       2528.17    
   2  0.991852     -0.818183E-02  -4.58565       4.58565       1886.43       1891.01    
   3  0.317368      -1.14769      -643.245       643.245       1868.22       2511.47    
   4  0.737330     -0.304720      -170.786       170.786       1831.67       2002.45    
   5  0.834641     -0.180753      -101.306       101.306       1892.11       1993.41    
   6  0.464401     -0.767007      -429.883       429.883       1904.86       2334.74    
   7  0.592116     -0.524053      -293.715       293.715       1839.10       2132.82    
   8  0.464372     -0.767069      -429.917       429.917       1881.57       2311.49    
   9  0.636055E-01  -2.75505      -1544.12       1544.12       1844.36       3388.48    
  10  0.712927     -0.338376      -189.649       189.649       1886.24       2075.89    
  11  0.265597      -1.32578      -743.054       743.054       1830.83       2573.88    
  12  0.152318      -1.88178      -1054.68       1054.68       1824.61       2879.29    
  13  0.629580     -0.462703      -259.330       259.330       1873.49       2132.82    
  14  0.849464     -0.163150      -91.4400       91.4400       1892.75       1984.19    
  15  0.487816     -0.717817      -402.313       402.313       1874.21       2276.52    
  16  0.374667     -0.981718      -550.221       550.221       1842.02       2392.24    
  17  0.657383     -0.419488      -235.109       235.109       1843.54       2078.65    
  18  0.846901     -0.166172      -93.1338       93.1338       1830.81       1923.95    
  19  0.201185      -1.60353      -898.727       898.727       1860.39       2759.12    
  20  0.771980     -0.258797      -145.047       145.047       1969.92       2114.96    
  21  0.507739     -0.677788      -379.878       379.878       1898.07       2277.95    
  22  0.280262      -1.27203      -712.932       712.932       1904.43       2617.36    
  23  0.285359      -1.25401      -702.830       702.830       1944.15       2646.98    
  24  0.246191      -1.40165      -785.577       785.577       1965.16       2750.73    
  25  0.559989E-01  -2.88242      -1615.50       1615.50       1932.97       3548.48    
  26  0.330462      -1.10726      -620.585       620.585       1867.99       2488.57    
  27  0.899405     -0.106022      -59.4220       59.4220       2000.81       2060.23    
  28  0.637003     -0.450981      -252.760       252.760       1897.95       2150.71    
  29  0.699726E-01  -2.65965      -1490.65       1490.65       1935.97       3426.62    
  30  0.677191     -0.389802      -218.471       218.471       2035.22       2253.69    
  31  0.649507     -0.431542      -241.865       241.865       1847.39       2089.26    
  32  0.527986     -0.638685      -357.962       357.962       1796.12       2154.08    
  33  0.374870E-01  -3.28376      -1840.44       1840.44       2342.61       4183.05    
  34  0.448697     -0.801407      -449.163       449.163       1868.19       2317.35    
  35  0.809612     -0.211200      -118.371       118.371       1913.24       2031.61    
  36  0.836235     -0.178846      -100.237       100.237       1873.15       1973.38    
  37  0.198161      -1.61867      -907.214       907.214       1839.98       2747.20    
  38  0.222702      -1.50192      -841.777       841.777       1799.18       2640.96    
  39  0.888863     -0.117812      -66.0297       66.0297       1893.04       1959.07    
  40  0.868267     -0.141256      -79.1693       79.1693       1866.10       1945.27    
  41  0.164066      -1.80749      -1013.04       1013.04       2025.84       3038.88    
  42  0.163797      -1.80912      -1013.96       1013.96       1836.91       2850.86    
  43  0.883498     -0.123867      -69.4232       69.4232       2004.06       2073.48    
  44  0.749983     -0.287705      -161.249       161.249       1862.04       2023.29    
  45  0.666691     -0.405428      -227.229       227.229       1959.70       2186.93    
  46  0.978530     -0.217038E-01  -12.1643       12.1643       2435.02       2447.18    
  47  0.442024     -0.816391      -457.561       457.561       1921.00       2378.56    
  48  0.228080      -1.47806      -828.404       828.404       1940.57       2768.98    
  49  0.226174      -1.48645      -833.106       833.106       1877.42       2710.52    
  50  0.388394     -0.945736      -530.054       530.054       1938.43       2468.49    
  51  0.257425      -1.35703      -760.569       760.569       1889.21       2649.78    
loop,thermsimp(1:2)       24   690.893       4.58565    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     98       1541.09          0.88          1.11         22.05          0.07          0.05         24.16
Just calling func    0   0         24.16


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     99       1305.70          0.86          1.11         21.93          0.12          0.05         24.07
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1305.70
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    560.467               101
loop is:       24
neval is:       98
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       24      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    560.467      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    560.467               101
loop is:       25
neval is:       98


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      101
neval,tstepnext:       98     101

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.145902      -1.92482      -1078.80       1078.80       1886.43       2965.23    
   2  0.438196     -0.825090      -462.436       462.436       1830.81       2293.25    
   3  0.637359     -0.450422      -252.447       252.447       1866.10       2118.55    
   4  0.122813      -2.09709      -1175.35       1175.35       1893.04       3068.40    
   5  0.926899     -0.759107E-01  -42.5455       42.5455       1873.15       1915.69    
   6  0.456580     -0.783992      -439.402       439.402       1892.75       2332.15    
   7  0.988763     -0.113008E-01  -6.33376       6.33376       1892.11       1898.44    
   8  0.499609     -0.693930      -388.925       388.925       1831.67       2220.59    
   9  0.432617     -0.837902      -469.617       469.617       1862.04       2331.66    
  10  0.403570     -0.907406      -508.572       508.572       1913.24       2421.81    
  11  0.435824     -0.830517      -465.478       465.478       2000.81       2466.29    
  12  0.504807     -0.683579      -383.124       383.124       2004.06       2387.18    
  13  0.778763     -0.250048      -140.144       140.144       1886.24       2026.39    
  14  0.429140     -0.845972      -474.140       474.140       1843.54       2317.68    
  15  0.597763     -0.514562      -288.395       288.395       1847.39       2135.79    
  16  0.425932     -0.853476      -478.345       478.345       1969.92       2448.26    
  17  0.825778     -0.191430      -107.290       107.290       1839.10       1946.39    
  18  0.448772     -0.801241      -449.069       449.069       1873.49       2322.56    
  19  0.701335     -0.354770      -198.837       198.837       1897.95       2096.79    
  20  0.425857     -0.853651      -478.444       478.444       1796.12       2274.56    
  21  0.800815     -0.222126      -124.494       124.494       1959.70       2084.20    
  22  0.724239     -0.322634      -180.826       180.826       2035.22       2216.05    
  23  0.312194      -1.16413      -652.457       652.457       1874.21       2526.66    
  24  0.796592     -0.227412      -127.457       127.457       1898.07       2025.53    
  25  0.164146      -1.80700      -1012.77       1012.77       1881.57       2894.34    
  26  0.503041     -0.687083      -385.088       385.088       1868.19       2253.27    
  27  0.640838     -0.444978      -249.396       249.396       1904.86       2154.26    
  28  0.327752      -1.11550      -625.200       625.200       1921.00       2546.20    
  29  0.720325     -0.328053      -183.863       183.863       1842.02       2025.89    
  30  0.447570     -0.803922      -450.572       450.572       2435.02       2885.59    
  31  0.377461     -0.974289      -546.057       546.057       1938.43       2484.49    
  32  0.951264     -0.499633E-01  -28.0028       28.0028       1867.99       1895.99    
  33  0.610405     -0.493632      -276.665       276.665       1868.22       2144.89    
  34  0.564697     -0.571466      -320.288       320.288       1837.28       2157.57    
  35  0.993998     -0.601974E-02  -3.37387       3.37387       1830.83       1834.20    
  36  0.908032     -0.964757E-01  -54.0715       54.0715       1904.43       1958.50    
  37  0.731210     -0.313055      -175.457       175.457       1799.18       1974.64    
  38  0.818812     -0.199901      -112.038       112.038       1944.15       2056.19    
  39  0.423172     -0.859976      -481.989       481.989       1889.21       2371.20    
  40  0.554414     -0.589843      -330.588       330.588       1877.42       2208.00    
  41  0.244903E-01  -3.70948      -2079.04       2079.04       1839.98       3919.03    
  42  0.337898      -1.08501      -608.113       608.113       1965.16       2573.27    
  43  0.634521E-01  -2.75747      -1545.47       1545.47       1860.39       3405.86    
  44  0.824978     -0.192398      -107.833       107.833       1940.57       2048.41    
  45  0.954123     -0.469622E-01  -26.3208       26.3208       1836.91       1863.23    
  46  0.807852     -0.213376      -119.590       119.590       1824.61       1944.20    
  47  0.335430      -1.09234      -612.222       612.222       2025.84       2638.06    
  48  0.266194      -1.32353      -741.796       741.796       1844.36       2586.16    
  49  0.797818     -0.225874      -126.595       126.595       1935.97       2062.57    
  50  0.710601     -0.341644      -191.480       191.480       1932.97       2124.45    
  51  0.469059     -0.757026      -424.288       424.288       1305.70       1729.98    
loop,thermsimp(1:2)       25   1078.80       462.436    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    100       1833.49          0.88          1.11         21.95          0.16          0.05         24.15
Just calling func    0   0         24.15


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    101       2064.32          0.87          1.11         22.21          0.11          0.05         24.35
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  100    2064.3       0.8280     -2.589      3.373     -102.6     0.9553    
                      0.3648     0.9210     -99.70      3.649      1.012    

                       1.670     -1.653      1.540      7000.      7000.    

                      -2.216      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -7.786     -5.632     -7.415      7.630    

                      -13.17     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.    -0.2479E-01 0.1950    -0.1991E-01 0.8076E-01

                     -0.2486    -0.7155E-01 0.1575     0.1535     0.5992E-01



                     -0.5694    -0.5415      0.000     0.4438E-01-0.1914E-01

                      0.2608E-01 0.2161    -0.7116    -0.9651     0.3425    

                      0.7695E-01 0.7457E-01-0.5344     -1.156      7000.    



                     -0.2390    -0.6590     -2.142     -1.982    -0.3807    

                     -0.3252      9.138      8.725    -0.1672E+05 -6.000    

                     -0.1853     -2.138      9.451      8.793    -0.1969E+05



                      -6.000     0.8281    -0.1258      8.962      9.154    

                     -0.1944E+05 -6.000    -0.4054    -0.3897      9.173    

                       8.874    -0.1891E+05 -6.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1833.49
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    560.467               101
loop is:       25
neval is:      100
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       25      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    560.467      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    560.467               101
loop is:       26
neval is:      100


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      101
neval,tstepnext:      100     101

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.781042     -0.247126      -138.506       138.506       1305.70       1444.20    
   2  0.928800     -0.738619E-01  -41.3972       41.3972       1830.83       1872.22    
   3  0.727994     -0.317462      -177.927       177.927       1836.91       2014.84    
   4  0.109723E-01  -4.51238      -2529.04       2529.04       1867.99       4397.03    
   5  0.160096      -1.83198      -1026.76       1026.76       1892.11       2918.87    
   6  0.497079     -0.699006      -391.770       391.770       1873.15       2264.92    
   7  0.789473     -0.236389      -132.488       132.488       1824.61       1957.10    
   8  0.763780     -0.269476      -151.032       151.032       1839.10       1990.13    
   9  0.217288      -1.52653      -855.572       855.572       1904.43       2760.00    
  10  0.867642     -0.141976      -79.5732       79.5732       1799.18       1878.75    
  11  0.740966     -0.299800      -168.028       168.028       1898.07       2066.10    
  12  0.999757     -0.242662E-03 -0.136004      0.136004       1842.02       1842.16    
  13  0.587476     -0.531920      -298.124       298.124       1886.24       2184.37    
  14  0.703619     -0.351518      -197.015       197.015       1940.57       2137.59    
  15  0.740946     -0.299828      -168.044       168.044       1944.15       2112.19    
  16  0.335927      -1.09086      -611.392       611.392       1935.97       2547.37    
  17  0.736553     -0.305774      -171.376       171.376       1959.70       2131.08    
  18  0.597397     -0.515174      -288.738       288.738       1897.95       2186.69    
  19  0.126601      -2.06672      -1158.33       1158.33       1866.10       3024.43    
  20  0.990194     -0.985477E-02  -5.52328       5.52328       1932.97       1938.49    
  21  0.716453     -0.333443      -186.884       186.884       1847.39       2034.28    
  22  0.279233E-01  -3.57829      -2005.52       2005.52       1868.22       3873.74    
  23  0.413932     -0.882054      -494.363       494.363       1904.86       2399.22    
  24  0.109516      -2.21168      -1239.58       1239.58       1837.28       3076.86    
  25  0.440749     -0.819279      -459.179       459.179       1877.42       2336.60    
  26  0.412115     -0.886453      -496.828       496.828       2035.22       2532.05    
  27  0.146963      -1.91758      -1074.74       1074.74       1831.67       2906.41    
  28  0.345919      -1.06155      -594.964       594.964       1868.19       2463.15    
  29  0.343614      -1.06824      -598.711       598.711       1796.12       2394.83    
  30  0.600334E-01  -2.81285      -1576.51       1576.51       1830.81       3407.33    
  31  0.751538     -0.285634      -160.088       160.088       1843.54       2003.63    
  32  0.878119     -0.129973      -72.8458       72.8458       1873.49       1946.33    
  33  0.544046     -0.608721      -341.168       341.168       1862.04       2203.21    
  34  0.931023     -0.714714E-01  -40.0574       40.0574       1892.75       1932.80    
  35  0.131968      -2.02520      -1135.06       1135.06       1889.21       3024.27    
  36  0.826694E-01  -2.49291      -1397.19       1397.19       2004.06       3401.25    
  37  0.174702E-02  -6.34984      -3558.88       3558.88       1913.24       5472.12    
  38  0.233470      -1.45470      -815.314       815.314       1969.92       2785.23    
  39  0.232927      -1.45703      -816.617       816.617       2000.81       2817.43    
  40  0.958279     -0.426163E-01  -23.8851       23.8851       1938.43       1962.32    
  41  0.820100     -0.198330      -111.157       111.157       1874.21       1985.37    
  42  0.305797      -1.18483      -664.061       664.061       1921.00       2585.06    
  43  0.260853      -1.34380      -753.156       753.156       1965.16       2718.31    
  44  0.960408     -0.403967E-01  -22.6411       22.6411       1844.36       1867.00    
  45  0.318957      -1.14270      -640.445       640.445       2025.84       2666.28    
  46  0.146887      -1.91809      -1075.03       1075.03       2435.02       3510.04    
  47  0.787623     -0.238735      -133.803       133.803       1881.57       2015.37    
  48  0.452412     -0.793163      -444.542       444.542       1886.43       2330.97    
  49  0.218339      -1.52170      -852.866       852.866       1893.04       2745.91    
  50  0.177672      -1.72782      -968.386       968.386       1860.39       2828.78    
  51  0.928922     -0.737304E-01  -41.3235       41.3235       1833.49       1874.81    
loop,thermsimp(1:2)       26   138.506       41.3972    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    102       1973.58          0.88          1.12         22.14          0.19          0.05         24.38
Just calling func    0   0         24.38


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1973.58
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    560.467               101
loop is:       26
neval is:      101
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       26      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    560.467      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    560.467               101
loop is:       27
neval is:      101


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      101
neval,tstepnext:      101     101

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.818509     -0.200271      -112.246       112.246       1305.70       1417.94    
   2  0.309452      -1.17295      -657.402       657.402       1842.02       2499.42    
   3  0.303638      -1.19192      -668.032       668.032       1844.36       2512.39    
   4  0.754457     -0.281757      -157.916       157.916       1830.83       1988.74    
   5  0.623133     -0.472996      -265.099       265.099       1833.49       2098.59    
   6  0.989422E-01  -2.31322      -1296.48       1296.48       1799.18       3095.67    
   7  0.695126     -0.363662      -203.821       203.821       1892.75       2096.57    
   8  0.832210E-01  -2.48626      -1393.47       1393.47       1932.97       3326.44    
   9  0.869521     -0.139813      -78.3608       78.3608       1873.49       1951.85    
  10  0.488136     -0.717160      -401.945       401.945       1824.61       2226.56    
  11  0.579877     -0.544940      -305.421       305.421       1938.43       2243.85    
  12  0.480435     -0.733064      -410.858       410.858       1874.21       2285.07    
  13  0.792626     -0.232404      -130.255       130.255       1839.10       1969.36    
  14  0.870230     -0.138998      -77.9037       77.9037       1843.54       1921.44    
  15  0.886361     -0.120631      -67.6096       67.6096       1836.91       1904.52    
  16  0.358181      -1.02672      -575.442       575.442       1881.57       2457.01    
  17  0.560125     -0.579594      -324.844       324.844       1847.39       2172.24    
  18  0.546151     -0.604859      -339.004       339.004       1898.07       2237.07    
  19  0.732086     -0.311858      -174.786       174.786       1944.15       2118.93    
  20  0.590102     -0.527460      -295.624       295.624       1959.70       2255.33    
  21  0.867355     -0.142307      -79.7587       79.7587       1940.57       2020.33    
  22  0.749758     -0.288005      -161.418       161.418       1886.24       2047.66    
  23  0.721970     -0.325772      -182.584       182.584       1897.95       2080.54    
  24  0.596865     -0.516065      -289.238       289.238       1862.04       2151.28    
  25  0.878161     -0.129925      -72.8186       72.8186       1873.15       1945.96    
  26  0.558752E-01  -2.88463      -1616.74       1616.74       1886.43       3503.17    
  27  0.555543     -0.587810      -329.448       329.448       1877.42       2206.86    
  28  0.597562     -0.514897      -288.583       288.583       1796.12       2084.70    
  29  0.995329     -0.468202E-02  -2.62412       2.62412       1904.86       1907.49    
  30  0.206787      -1.57606      -883.333       883.333       1868.19       2751.52    
  31  0.645457     -0.437797      -245.371       245.371       2035.22       2280.59    
  32  0.871352     -0.137710      -77.1817       77.1817       1935.97       2013.16    
  33  0.701360     -0.354733      -198.816       198.816       1921.00       2119.82    
  34  0.936151     -0.659784E-01  -36.9788       36.9788       2025.84       2062.82    
  35  0.590091     -0.527478      -295.634       295.634       1965.16       2260.79    
  36  0.750433     -0.287105      -160.913       160.913       1893.04       2053.96    
  37  0.326255      -1.12007      -627.765       627.765       1904.43       2532.20    
  38  0.873133     -0.135668      -76.0374       76.0374       1969.92       2045.95    
  39  0.621627     -0.475415      -266.454       266.454       2000.81       2267.26    
  40  0.153041      -1.87705      -1052.03       1052.03       1860.39       2912.42    
  41  0.196696      -1.62610      -911.374       911.374       1831.67       2743.04    
  42  0.365028      -1.00778      -564.828       564.828       1892.11       2456.93    
  43  0.398429     -0.920226      -515.757       515.757       1889.21       2404.96    
  44  0.549691     -0.598399      -335.383       335.383       1866.10       2201.48    
  45  0.994179     -0.583795E-02  -3.27198       3.27198       1837.28       1840.55    
  46  0.147335E-01  -4.21763      -2363.85       2363.85       2004.06       4367.91    
  47  0.224737      -1.49282      -836.679       836.679       1830.81       2667.49    
  48  0.182172      -1.70281      -954.367       954.367       2435.02       3389.38    
  49  0.230919      -1.46569      -821.471       821.471       1868.22       2689.70    
  50  0.491818     -0.709647      -397.734       397.734       1867.99       2265.72    
  51  0.370754     -0.992217      -556.105       556.105       1973.58       2529.68    
loop,thermsimp(1:2)       27   112.246       657.402    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    103       1821.56          0.87          1.12         22.25          0.11          0.05         24.41
Just calling func    0   0         24.41


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1821.56
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    560.467               101
loop is:       27
neval is:      102
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       27      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    560.467      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    560.467               101
loop is:       28
neval is:      102


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 




neval>tstepnex so lower away!t
---> lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
     new SAtemp,tstepnext are :    280.234               151

 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      151
neval,tstepnext:      102     151

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.808657     -0.212380      -59.5162       59.5162       1305.70       1365.21    
   2  0.162004E-01  -4.12272      -1155.33       1155.33       1837.28       2992.61    
   3  0.446841E-01  -3.10814      -871.005       871.005       1836.91       2707.91    
   4  0.757954     -0.277132      -77.6619       77.6619       1904.86       1982.52    
   5  0.525315     -0.643757      -180.403       180.403       1843.54       2023.94    
   6  0.229940      -1.46994      -411.926       411.926       1873.15       2285.07    
   7  0.273310E-01  -3.59973      -1008.77       1008.77       1873.49       2882.25    
   8  0.228047      -1.47820      -414.242       414.242       1839.10       2253.34    
   9  0.963384E-01  -2.33989      -655.716       655.716       1830.83       2486.54    
  10  0.495504     -0.702179      -196.774       196.774       1935.97       2132.75    
  11  0.930436     -0.721018E-01  -20.2054       20.2054       1940.57       1960.78    
  12  0.138744      -1.97513      -553.497       553.497       1969.92       2523.41    
  13  0.676381     -0.390999      -109.571       109.571       1886.24       1995.81    
  14  0.763696     -0.269586      -75.5471       75.5471       1893.04       1968.59    
  15  0.282468      -1.26419      -354.269       354.269       2025.84       2380.11    
  16  0.359172      -1.02395      -286.946       286.946       1897.95       2184.90    
  17  0.392258     -0.935834      -262.252       262.252       1796.12       2058.37    
  18  0.524686     -0.644955      -180.738       180.738       1892.75       2073.49    
  19  0.850465     -0.161972      -45.3900       45.3900       1833.49       1878.88    
  20  0.227056      -1.48256      -415.462       415.462       1944.15       2359.61    
  21  0.942039     -0.597082E-01  -16.7322       16.7322       1921.00       1937.73    
  22  0.807336     -0.214016      -59.9745       59.9745       1862.04       1922.01    
  23  0.345853      -1.06174      -297.536       297.536       1847.39       2144.93    
  24  0.762940     -0.270575      -75.8244       75.8244       1866.10       1941.92    
  25  0.589959     -0.527702      -147.880       147.880       1877.42       2025.30    
  26  0.563539     -0.573518      -160.719       160.719       1824.61       1985.33    
  27  0.812044     -0.208201      -58.3450       58.3450       1898.07       1956.42    
  28  0.735850     -0.306729      -85.9559       85.9559       1938.43       2024.39    
  29  0.396292     -0.925605      -259.386       259.386       1959.70       2219.09    
  30  0.623568     -0.472298      -132.354       132.354       1965.16       2097.51    
  31  0.925937     -0.769486E-01  -21.5636       21.5636       1867.99       1889.55    
  32  0.880074     -0.127749      -35.7997       35.7997       2000.81       2036.61    
  33  0.379958     -0.967693      -271.180       271.180       2035.22       2306.40    
  34  0.842940E-01  -2.47344      -693.143       693.143       1874.21       2567.35    
  35  0.199092      -1.61399      -452.294       452.294       1889.21       2341.50    
  36  0.625899     -0.468566      -131.308       131.308       1892.11       2023.41    
  37  0.888337     -0.118405      -33.1809       33.1809       1881.57       1914.75    
  38  0.959633     -0.412048E-01  -11.5470       11.5470       1842.02       1853.57    
  39  0.289813      -1.23852      -347.075       347.075       1844.36       2191.44    
  40  0.889440     -0.117163      -32.8331       32.8331       1973.58       2006.41    
  41  0.797260     -0.226575      -63.4938       63.4938       1904.43       1967.92    
  42  0.451097     -0.796073      -223.086       223.086       1830.81       2053.90    
  43  0.609578     -0.494989      -138.713       138.713       1868.22       2006.94    
  44  0.910850     -0.933770E-01  -26.1674       26.1674       1831.67       1857.83    
  45  0.448191     -0.802536      -224.898       224.898       1868.19       2093.08    
  46  0.831229     -0.184850      -51.8011       51.8011       1860.39       1912.19    
  47  0.246260      -1.40137      -392.711       392.711       1799.18       2191.89    
  48  0.280480      -1.27125      -356.248       356.248       1932.97       2289.22    
  49  0.161513      -1.82317      -510.913       510.913       2435.02       2945.93    
  50  0.337020      -1.08761      -304.786       304.786       1886.43       2191.21    
  51  0.160136      -1.83173      -513.312       513.312       1821.56       2334.88    
loop,thermsimp(1:2)       28   59.5162       1155.33    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    104       1864.01          0.88          1.12         22.01          0.09          0.05         24.14
Just calling func    0   0         24.15


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1864.01
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    280.234               151
loop is:       28
neval is:      103
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       28      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    560.467      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    280.234               151
loop is:       29
neval is:      103


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      151
neval,tstepnext:      103     151

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.115886      -2.15515      -603.946       603.946       1305.70       1909.64    
   2  0.685048     -0.378267      -106.003       106.003       1842.02       1948.03    
   3  0.739526     -0.301746      -84.5594       84.5594       1831.67       1916.23    
   4  0.161448      -1.82357      -511.026       511.026       1833.49       2344.51    
   5  0.819608     -0.198929      -55.7467       55.7467       1867.99       1923.73    
   6  0.750679     -0.286777      -80.3645       80.3645       1860.39       1940.76    
   7  0.797409     -0.226388      -63.4414       63.4414       1881.57       1945.01    
   8  0.193123      -1.64443      -460.825       460.825       1862.04       2322.86    
   9  0.189346E-01  -3.96676      -1111.62       1111.62       1921.00       3032.62    
  10  0.715264     -0.335103      -93.9072       93.9072       1866.10       1960.01    
  11  0.384856     -0.954886      -267.591       267.591       1898.07       2165.66    
  12  0.268023      -1.31668      -368.979       368.979       1940.57       2309.55    
  13  0.777164     -0.252104      -70.6480       70.6480       1904.43       1975.08    
  14  0.707495E-01  -2.64861      -742.230       742.230       1893.04       2635.27    
  15  0.233610      -1.45410      -407.488       407.488       1904.86       2312.35    
  16  0.193057      -1.64477      -460.921       460.921       1824.61       2285.53    
  17  0.486879     -0.719739      -201.695       201.695       1886.24       2087.94    
  18  0.735370     -0.307381      -86.1387       86.1387       1973.58       2059.72    
  19  0.147509      -1.91387      -536.330       536.330       1868.22       2404.55    
  20  0.739111     -0.302308      -84.7168       84.7168       1892.11       1976.82    
  21  0.886241     -0.120766      -33.8427       33.8427       1843.54       1877.38    
  22  0.158672      -1.84092      -515.887       515.887       1938.43       2454.32    
  23  0.143658      -1.94032      -543.744       543.744       1877.42       2421.16    
  24  0.637431E-02  -5.05548      -1416.72       1416.72       2000.81       3417.52    
  25  0.753372     -0.283196      -79.3612       79.3612       1830.81       1910.18    
  26  0.555831     -0.587292      -164.579       164.579       1796.12       1960.69    
  27  0.280013      -1.27292      -356.715       356.715       1892.75       2249.46    
  28  0.811304     -0.209112      -58.6004       58.6004       1868.19       1926.79    
  29  0.972296E-02  -4.63327      -1298.40       1298.40       1965.16       3263.55    
  30  0.713459     -0.337631      -94.6156       94.6156       1935.97       2030.59    
  31  0.194621      -1.63670      -458.658       458.658       1847.39       2306.05    
  32  0.492587     -0.708083      -198.429       198.429       1897.95       2096.38    
  33  0.759094E-01  -2.57821      -722.503       722.503       1886.43       2608.93    
  34  0.494544     -0.704119      -197.318       197.318       1844.36       2041.68    
  35  0.297023      -1.21395      -340.189       340.189       1799.18       2139.37    
  36  0.429878E-01  -3.14684      -881.850       881.850       1959.70       2841.55    
  37  0.490931     -0.711452      -199.373       199.373       1839.10       2038.47    
  38  0.534417     -0.626578      -175.588       175.588       1873.15       2048.73    
  39  0.254967      -1.36662      -382.973       382.973       1932.97       2315.94    
  40  0.995945     -0.406335E-02  -1.13869       1.13869       2035.22       2036.36    
  41  0.428814E-01  -3.14932      -882.545       882.545       1821.56       2704.11    
  42  0.332915      -1.09987      -308.220       308.220       1889.21       2197.43    
  43  0.657266     -0.419666      -117.605       117.605       1944.15       2061.75    
  44  0.301071      -1.20041      -336.395       336.395       2025.84       2362.23    
  45  0.998178     -0.182349E-02 -0.511005      0.511005       1830.83       1831.34    
  46  0.533372     -0.628536      -176.137       176.137       1969.92       2146.05    
  47  0.244746      -1.40753      -394.438       394.438       1874.21       2268.65    
  48  0.345321      -1.06328      -297.968       297.968       1836.91       2134.88    
  49  0.339541      -1.08016      -302.698       302.698       1873.49       2176.18    
  50  0.456434     -0.784311      -219.790       219.790       2435.02       2654.81    
  51  0.510210     -0.672933      -188.578       188.578       1864.01       2052.59    
loop,thermsimp(1:2)       29   603.946       106.003    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    105       1736.29          0.87          1.12         22.00          0.09          0.05         24.13
Just calling func    0   0         24.13


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    106       1706.19          0.86          1.11         22.11          0.05          0.05         24.19
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1706.19
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    280.234               151
loop is:       29
neval is:      105
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       29      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    560.467      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    280.234               151
loop is:       30
neval is:      105


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      151
neval,tstepnext:      105     151

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.396389E-01  -3.22794      -904.579       904.579       1830.83       2735.40    
   2  0.712690     -0.338709      -94.9177       94.9177       1843.54       1938.46    
   3  0.284498      -1.25703      -352.262       352.262       1305.70       1657.96    
   4  0.132414      -2.02182      -566.583       566.583       1830.81       2397.40    
   5  0.868558     -0.140920      -39.4906       39.4906       1831.67       1871.16    
   6  0.695240     -0.363498      -101.864       101.864       1867.99       1969.85    
   7  0.777362     -0.251849      -70.5766       70.5766       1868.19       1938.76    
   8  0.302494      -1.19569      -335.074       335.074       1860.39       2195.47    
   9  0.710188     -0.342225      -95.9031       95.9031       1881.57       1977.47    
  10  0.884530     -0.122698      -34.3842       34.3842       1842.02       1876.41    
  11  0.146421E-01  -4.22386      -1183.67       1183.67       1866.10       3049.77    
  12  0.834801     -0.180562      -50.5995       50.5995       1796.12       1846.71    
  13  0.414011     -0.881863      -247.128       247.128       1904.43       2151.56    
  14  0.655777     -0.421935      -118.240       118.240       1892.11       2010.35    
  15  0.530106     -0.634679      -177.859       177.859       1935.97       2113.83    
  16  0.325231      -1.12322      -314.764       314.764       2035.22       2349.99    
  17  0.293550      -1.22571      -343.485       343.485       1839.10       2182.59    
  18  0.194161      -1.63907      -459.323       459.323       1844.36       2303.68    
  19  0.589029E-01  -2.83186      -793.584       793.584       1873.15       2666.73    
  20  0.385142     -0.954143      -267.383       267.383       1864.01       2131.39    
  21  0.287461      -1.24667      -349.358       349.358       1973.58       2322.94    
  22  0.528518     -0.637678      -178.699       178.699       1944.15       2122.85    
  23  0.517042     -0.659630      -184.851       184.851       1886.24       2071.09    
  24  0.453375     -0.791035      -221.675       221.675       1897.95       2119.63    
  25  0.695596     -0.362986      -101.721       101.721       1836.91       1938.63    
  26  0.645178     -0.438228      -122.806       122.806       1799.18       1921.99    
  27  0.696076     -0.362297      -101.528       101.528       1969.92       2071.44    
  28  0.483522     -0.726659      -203.634       203.634       1898.07       2101.71    
  29  0.155396E-01  -4.16436      -1166.99       1166.99       1873.49       3040.48    
  30  0.883154     -0.124256      -34.8207       34.8207       1889.21       1924.03    
  31  0.525944     -0.642561      -180.067       180.067       1892.75       2072.81    
  32  0.746799     -0.291959      -81.8167       81.8167       1874.21       1956.02    
  33  0.458658     -0.779449      -218.428       218.428       1824.61       2043.04    
  34  0.614284     -0.487298      -136.557       136.557       1847.39       1983.95    
  35  0.581412     -0.542295      -151.969       151.969       1940.57       2092.54    
  36  0.820935     -0.197312      -55.2934       55.2934       1904.86       1960.15    
  37  0.852366     -0.159739      -44.7643       44.7643       1932.97       1977.74    
  38  0.527059     -0.640443      -179.474       179.474       1862.04       2041.51    
  39  0.376404     -0.977092      -273.814       273.814       1833.49       2107.30    
  40  0.729525E-01  -2.61795      -733.637       733.637       2025.84       2759.48    
  41  0.342258      -1.07219      -300.464       300.464       1868.22       2168.69    
  42  0.955065     -0.459761E-01  -12.8840       12.8840       1877.42       1890.30    
  43  0.508654E-01  -2.97857      -834.696       834.696       1938.43       2773.13    
  44  0.471716     -0.751379      -210.562       210.562       1886.43       2096.99    
  45  0.137118      -1.98691      -556.801       556.801       1893.04       2449.84    
  46  0.844826     -0.168625      -47.2543       47.2543       2435.02       2482.27    
  47  0.841708     -0.172322      -48.2904       48.2904       1821.56       1869.85    
  48  0.360396E-01  -3.32314      -931.255       931.255       1959.70       2890.96    
  49  0.953282     -0.478444E-01  -13.4076       13.4076       1921.00       1934.41    
  50  0.503408     -0.686355      -192.340       192.340       1965.16       2157.50    
  51  0.593854     -0.521122      -146.036       146.036       1706.19       1852.23    
loop,thermsimp(1:2)       30   904.579       94.9177    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    107       3173.38          0.88          1.12         22.03          0.12          0.05         24.19
Just calling func    0   0         24.19


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   3173.38
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    280.234               151
loop is:       30
neval is:      106
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       30      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    560.467      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    280.234               151
loop is:       31
neval is:      106


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      151
neval,tstepnext:      106     151

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.248581      -1.39199      -390.082       390.082       1305.70       1695.78    
   2  0.247647      -1.39575      -391.137       391.137       1796.12       2187.25    
   3  0.396263     -0.925678      -259.406       259.406       1706.19       1965.60    
   4  0.386461     -0.950723      -266.425       266.425       1821.56       2087.99    
   5  0.729285     -0.315691      -88.4671       88.4671       1831.67       1920.13    
   6  0.665866     -0.406667      -113.962       113.962       1842.02       1955.98    
   7  0.385122     -0.954194      -267.397       267.397       1877.42       2144.81    
   8  0.625701     -0.468883      -131.397       131.397       1799.18       1930.58    
   9  0.392668     -0.934792      -261.960       261.960       1889.21       2151.17    
  10  0.698356     -0.359026      -100.611       100.611       1921.00       2021.61    
  11  0.537534E-01  -2.92335      -819.221       819.221       1843.54       2662.76    
  12  0.289307      -1.24027      -347.565       347.565       1836.91       2184.47    
  13  0.138460E-01  -4.27976      -1199.33       1199.33       1868.19       3067.52    
  14  0.824110     -0.193451      -54.2114       54.2114       1874.21       1928.42    
  15  0.560983     -0.578065      -161.993       161.993       1904.86       2066.85    
  16  0.116087E-01  -4.45600      -1248.72       1248.72       1867.99       3116.71    
  17  0.218033      -1.52311      -426.826       426.826       1881.57       2308.40    
  18  0.893705E-01  -2.41497      -676.755       676.755       1932.97       2609.73    
  19  0.304886      -1.18782      -332.866       332.866       1847.39       2180.26    
  20  0.179833      -1.71573      -480.805       480.805       1892.11       2372.91    
  21  0.867378     -0.142281      -39.8719       39.8719       1862.04       1901.91    
  22  0.243287      -1.41351      -396.114       396.114       1824.61       2220.73    
  23  0.772489     -0.258138      -72.3389       72.3389       1886.24       1958.58    
  24  0.321011      -1.13628      -318.424       318.424       1969.92       2288.34    
  25  0.499417     -0.694314      -194.570       194.570       1892.75       2087.32    
  26  0.396806     -0.924307      -259.022       259.022       1940.57       2199.60    
  27  0.580203E-01  -2.84696      -797.815       797.815       1886.43       2684.24    
  28  0.854206     -0.157583      -44.1600       44.1600       1898.07       1942.23    
  29  0.914649     -0.892145E-01  -25.0009       25.0009       1833.49       1858.49    
  30  0.167601      -1.78617      -500.545       500.545       1935.97       2436.52    
  31  0.350137      -1.04943      -294.086       294.086       1897.95       2192.04    
  32  0.522932     -0.648304      -181.677       181.677       1944.15       2125.82    
  33  0.538779     -0.618450      -173.311       173.311       1864.01       2037.32    
  34  0.693066     -0.366629      -102.742       102.742       1904.43       2007.17    
  35  0.361961      -1.01622      -284.779       284.779       1965.16       2249.94    
  36  0.310665      -1.16904      -327.604       327.604       1868.22       2195.83    
  37  0.818669     -0.200076      -56.0680       56.0680       1839.10       1895.17    
  38  0.582861     -0.539807      -151.272       151.272       1860.39       2011.66    
  39  0.401728     -0.911979      -255.567       255.567       1844.36       2099.93    
  40  0.171089      -1.76557      -494.773       494.773       1973.58       2468.35    
  41  0.980174     -0.200248E-01  -5.61162       5.61162       2035.22       2040.83    
  42  0.495496     -0.702196      -196.779       196.779       1830.81       2027.59    
  43  0.436683     -0.828549      -232.187       232.187       1893.04       2125.23    
  44  0.910411     -0.938588E-01  -26.3024       26.3024       2435.02       2461.32    
  45  0.649932     -0.430887      -120.749       120.749       1873.15       1993.90    
  46  0.755226     -0.280738      -78.6722       78.6722       1830.83       1909.50    
  47  0.927352     -0.754221E-01  -21.1358       21.1358       2025.84       2046.97    
  48  0.848028     -0.164842      -46.1942       46.1942       1938.43       1984.63    
  49  0.146193      -1.92283      -538.842       538.842       1959.70       2498.54    
  50  0.571278     -0.559879      -156.897       156.897       1873.49       2030.38    
  51  0.244418      -1.40888      -394.815       394.815       3173.38       3568.20    
loop,thermsimp(1:2)       31   390.082       391.137    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    108       1866.10          0.87          1.11         22.04          0.09          0.05         24.16
Just calling func    0   0         24.17


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    109       2161.43          0.87          1.12         21.97          0.10          0.05         24.11
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1866.10
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    280.234               151
loop is:       31
neval is:      108
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       31      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    560.467      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    280.234               151
loop is:       32
neval is:      108


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      151
neval,tstepnext:      108     151

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.996070     -0.393760E-02  -1.10345       1.10345       1305.70       1306.80    
   2  0.758684E-02  -4.88134      -1367.92       1367.92       1833.49       3201.40    
   3  0.404439     -0.905254      -253.683       253.683       1839.10       2092.78    
   4  0.947917E-01  -2.35607      -660.251       660.251       1862.04       2522.29    
   5  0.834417     -0.181022      -50.7285       50.7285       1830.83       1881.55    
   6  0.891274     -0.115104      -32.2560       32.2560       1831.67       1863.92    
   7  0.744451     -0.295108      -82.6993       82.6993       1874.21       1956.91    
   8  0.559638     -0.580466      -162.666       162.666       1799.18       1961.85    
   9  0.821724     -0.196351      -55.0241       55.0241       1898.07       1953.09    
  10  0.847292     -0.165710      -46.4374       46.4374       1842.02       1888.46    
  11  0.661676     -0.412979      -115.731       115.731       1886.24       2001.97    
  12  0.993427     -0.659478E-02  -1.84808       1.84808       1706.19       1708.04    
  13  0.425996     -0.853326      -239.131       239.131       1938.43       2177.56    
  14  0.673132     -0.395813      -110.920       110.920       1873.15       1984.07    
  15  0.234810      -1.44898      -406.053       406.053       1904.43       2310.48    
  16  0.122926      -2.09617      -587.418       587.418       1860.39       2447.81    
  17  0.523553     -0.647118      -181.344       181.344       1921.00       2102.35    
  18  0.959317     -0.415333E-01  -11.6390       11.6390       1830.81       1842.45    
  19  0.321726      -1.13406      -317.801       317.801       1873.49       2191.29    
  20  0.493112     -0.707018      -198.130       198.130       1864.01       2062.14    
  21  0.416134     -0.876748      -245.694       245.694       2035.22       2280.92    
  22  0.409432     -0.892985      -250.244       250.244       2025.84       2276.08    
  23  0.657956     -0.418617      -117.311       117.311       1904.86       2022.17    
  24  0.904324     -0.100567      -28.1824       28.1824       1892.75       1920.93    
  25  0.714426     -0.336276      -94.2360       94.2360       1821.56       1915.80    
  26  0.150521      -1.89365      -530.665       530.665       1844.36       2375.03    
  27  0.758740     -0.276096      -77.3714       77.3714       1893.04       1970.42    
  28  0.359105      -1.02414      -286.999       286.999       1944.15       2231.15    
  29  0.666937     -0.405060      -113.511       113.511       1877.42       1990.93    
  30  0.343213      -1.06940      -299.683       299.683       1889.21       2188.89    
  31  0.484849     -0.723918      -202.866       202.866       1847.39       2050.26    
  32  0.874661     -0.133919      -37.5286       37.5286       1836.91       1874.44    
  33  0.994710     -0.530415E-02  -1.48640       1.48640       1796.12       1797.60    
  34  0.821923     -0.196109      -54.9564       54.9564       1897.95       1952.91    
  35  0.954096E-02  -4.65216      -1303.69       1303.69       1868.22       3171.92    
  36  0.240030      -1.42699      -399.891       399.891       1940.57       2340.47    
  37  0.279003      -1.27653      -357.727       357.727       1824.61       2182.34    
  38  0.553830     -0.590898      -165.590       165.590       1965.16       2130.75    
  39  0.400809     -0.914271      -256.210       256.210       1969.92       2226.13    
  40  0.146125      -1.92330      -538.972       538.972       1881.57       2420.54    
  41  0.811879     -0.208403      -58.4017       58.4017       1892.11       1950.51    
  42  0.349149      -1.05226      -294.878       294.878       1935.97       2230.85    
  43  0.897422     -0.108229      -30.3294       30.3294       2435.02       2465.35    
  44  0.114492      -2.16725      -607.337       607.337       1973.58       2580.92    
  45  0.831901E-01  -2.48663      -696.837       696.837       1959.70       2656.54    
  46  0.721169     -0.326882      -91.6033       91.6033       1932.97       2024.57    
  47  0.801724     -0.220991      -61.9292       61.9292       1843.54       1905.47    
  48  0.466569     -0.762349      -213.636       213.636       1886.43       2100.06    
  49  0.103404      -2.26911      -635.882       635.882       1868.19       2504.07    
  50  0.417206     -0.874175      -244.973       244.973       1867.99       2112.96    
  51  0.267666      -1.31802      -369.352       369.352       1866.10       2235.45    
loop,thermsimp(1:2)       32   1.10345       1367.92    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    110       1842.47          0.88          1.12         22.23          0.12          0.05         24.39
Just calling func    0   0         24.39


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1842.47
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    280.234               151
loop is:       32
neval is:      109
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       32      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    560.467      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    280.234               151
loop is:       33
neval is:      109


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      151
neval,tstepnext:      109     151

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.455591     -0.786160      -220.309       220.309       1305.70       1526.00    
   2  0.588265E-01  -2.83316      -793.948       793.948       1706.19       2500.14    
   3  0.787103E-01  -2.54198      -712.349       712.349       1796.12       2508.46    
   4  0.597713     -0.514644      -144.221       144.221       1830.81       1975.04    
   5  0.110741      -2.20056      -616.672       616.672       1831.67       2448.34    
   6  0.677861     -0.388813      -108.958       108.958       1836.91       1945.87    
   7  0.307724      -1.17855      -330.270       330.270       1830.83       2161.10    
   8  0.550587     -0.596770      -167.235       167.235       1842.02       2009.26    
   9  0.601295     -0.508669      -142.546       142.546       1843.54       1986.09    
  10  0.487121     -0.719243      -201.556       201.556       1821.56       2023.12    
  11  0.146295      -1.92213      -538.645       538.645       1892.75       2431.39    
  12  0.714050     -0.336802      -94.3832       94.3832       1892.11       1986.49    
  13  0.723089     -0.324223      -90.8583       90.8583       1897.95       1988.81    
  14  0.805432     -0.216376      -60.6359       60.6359       1898.07       1958.71    
  15  0.123280      -2.09329      -586.612       586.612       1874.21       2460.82    
  16  0.853039     -0.158950      -44.5432       44.5432       1799.18       1843.72    
  17  0.288289      -1.24379      -348.552       348.552       1893.04       2241.60    
  18  0.705126     -0.349379      -97.9078       97.9078       1873.15       1971.05    
  19  0.772420     -0.258227      -72.3638       72.3638       1877.42       1949.78    
  20  0.962845     -0.378631E-01  -10.6105       10.6105       1886.24       1896.85    
  21  0.245802      -1.40323      -393.232       393.232       1904.86       2298.09    
  22  0.752702     -0.284087      -79.6106       79.6106       1932.97       2012.58    
  23  0.729896     -0.314853      -88.2323       88.2323       1847.39       1935.63    
  24  0.869278     -0.140092      -39.2586       39.2586       1864.01       1903.27    
  25  0.597817E-01  -2.81706      -789.434       789.434       1839.10       2628.53    
  26  0.984108     -0.160195E-01  -4.48921       4.48921       1886.43       1890.92    
  27  0.278288      -1.27910      -358.447       358.447       1921.00       2279.45    
  28  0.588278     -0.530555      -148.679       148.679       1867.99       2016.67    
  29  0.807614     -0.213671      -59.8779       59.8779       1965.16       2025.03    
  30  0.428679     -0.847047      -237.371       237.371       1938.43       2175.80    
  31  0.452991     -0.791883      -221.912       221.912       1824.61       2046.52    
  32  0.678742     -0.387514      -108.595       108.595       1889.21       1997.80    
  33  0.504500     -0.684188      -191.733       191.733       1873.49       2065.22    
  34  0.894800     -0.111155      -31.1494       31.1494       1969.92       2001.07    
  35  0.854311     -0.157461      -44.1258       44.1258       1935.97       1980.10    
  36  0.756230     -0.279410      -78.3001       78.3001       1944.15       2022.45    
  37  0.744369     -0.295219      -82.7303       82.7303       1866.10       1948.83    
  38  0.435758     -0.830668      -232.781       232.781       2025.84       2258.62    
  39  0.677387     -0.389513      -109.155       109.155       2035.22       2144.38    
  40  0.504989     -0.683219      -191.461       191.461       1904.43       2095.89    
  41  0.325676      -1.12185      -314.381       314.381       1940.57       2254.96    
  42  0.147207      -1.91591      -536.904       536.904       1844.36       2381.26    
  43  0.432041     -0.839234      -235.182       235.182       1881.57       2116.75    
  44  0.615972     -0.484555      -135.789       135.789       1860.39       1996.18    
  45  0.150867      -1.89136      -530.022       530.022       2435.02       2965.04    
  46  0.464307     -0.767210      -214.998       214.998       1868.19       2083.18    
  47  0.379753     -0.968234      -271.332       271.332       1862.04       2133.37    
  48  0.886192     -0.120822      -33.8583       33.8583       1973.58       2007.44    
  49  0.231751E-01  -3.76468      -1054.99       1054.99       1959.70       3014.69    
  50  0.257662      -1.35611      -380.027       380.027       1868.22       2248.25    
  51  0.470381E-01  -3.05680      -856.618       856.618       1842.47       2699.09    
loop,thermsimp(1:2)       33   220.309       793.948    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    111       1804.91          0.88          1.12         22.22          0.04          0.05         24.31
Just calling func    0   0         24.31


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    112       2911.48          0.88          1.12         21.96          0.15          0.05         24.15
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1804.91
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    280.234               151
loop is:       33
neval is:      111
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       33      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    560.467      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    280.234               151
loop is:       34
neval is:      111


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      151
neval,tstepnext:      111     151

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.961594E-01  -2.34175      -656.237       656.237       1305.70       1961.93    
   2  0.298819      -1.20792      -338.500       338.500       1799.18       2137.68    
   3  0.706385     -0.347595      -97.4080       97.4080       1886.43       1983.84    
   4  0.958764     -0.421100E-01  -11.8006       11.8006       1886.24       1898.04    
   5  0.306496      -1.18255      -331.391       331.391       1864.01       2195.40    
   6  0.905447     -0.993270E-01  -27.8348       27.8348       1847.39       1875.23    
   7  0.234113      -1.45195      -406.885       406.885       1836.91       2243.79    
   8  0.704141     -0.350777      -98.2995       98.2995       1866.10       1964.40    
   9  0.908200     -0.962902E-01  -26.9837       26.9837       1877.42       1904.40    
  10  0.656383     -0.421011      -117.982       117.982       1898.07       2016.05    
  11  0.967894     -0.326327E-01  -9.14479       9.14479       1873.15       1882.29    
  12  0.754670     -0.281475      -78.8787       78.8787       1830.81       1909.69    
  13  0.488960     -0.715475      -200.500       200.500       1935.97       2136.47    
  14  0.451577     -0.795009      -222.788       222.788       1843.54       2066.33    
  15  0.387599E-01  -3.25037      -910.863       910.863       1892.11       2802.97    
  16  0.210942E-02  -6.16134      -1726.62       1726.62       1897.95       3624.57    
  17  0.656530     -0.420787      -117.919       117.919       1860.39       1978.31    
  18  0.181246      -1.70790      -478.611       478.611       1889.21       2367.82    
  19  0.758879     -0.275913      -77.3201       77.3201       1969.92       2047.24    
  20  0.392052     -0.936362      -262.400       262.400       1973.58       2235.98    
  21  0.406710     -0.899654      -252.113       252.113       1842.02       2094.14    
  22  0.830107     -0.186201      -52.1797       52.1797       1932.97       1985.15    
  23  0.311833      -1.16529      -326.553       326.553       1867.99       2194.54    
  24  0.945407     -0.561396E-01  -15.7322       15.7322       1944.15       1959.88    
  25  0.303319      -1.19297      -334.310       334.310       1821.56       2155.87    
  26  0.284230      -1.25797      -352.526       352.526       1965.16       2317.68    
  27  0.292492      -1.22932      -344.496       344.496       1824.61       2169.11    
  28  0.401496     -0.912557      -255.729       255.729       1873.49       2129.22    
  29  0.379648     -0.968510      -271.409       271.409       1868.19       2139.60    
  30  0.723496E-01  -2.62625      -735.963       735.963       1904.43       2640.39    
  31  0.940338     -0.615157E-01  -17.2388       17.2388       1881.57       1898.81    
  32  0.766237     -0.266264      -74.6160       74.6160       1862.04       1936.66    
  33  0.984920     -0.151946E-01  -4.25804       4.25804       2035.22       2039.48    
  34  0.552546     -0.593218      -166.240       166.240       1830.83       1997.07    
  35  0.735557     -0.307128      -86.0676       86.0676       1938.43       2024.50    
  36  0.142195      -1.95056      -546.611       546.611       1893.04       2439.66    
  37  0.304783      -1.18816      -332.961       332.961       1868.22       2201.19    
  38  0.868582     -0.140894      -39.4832       39.4832       1940.57       1980.06    
  39  0.382741     -0.960397      -269.136       269.136       2025.84       2294.97    
  40  0.273812      -1.29531      -362.991       362.991       1921.00       2283.99    
  41  0.601920     -0.507631      -142.255       142.255       1904.86       2047.12    
  42  0.827744     -0.189051      -52.9786       52.9786       1844.36       1897.34    
  43  0.881186E-01  -2.42907      -680.708       680.708       1892.75       2573.46    
  44  0.386744     -0.949994      -266.220       266.220       1831.67       2097.89    
  45  0.852312     -0.159803      -44.7822       44.7822       1874.21       1918.99    
  46  0.830189     -0.186102      -52.1522       52.1522       1706.19       1758.34    
  47  0.216531      -1.53002      -428.764       428.764       1796.12       2224.88    
  48  0.835540     -0.179677      -50.3516       50.3516       1839.10       1889.45    
  49  0.962152     -0.385824E-01  -10.8121       10.8121       1842.47       1853.28    
  50  0.866477     -0.143320      -40.1630       40.1630       2435.02       2475.18    
  51  0.640111     -0.446114      -125.016       125.016       1804.91       1929.93    
loop,thermsimp(1:2)       34   656.237       338.500    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    113       1869.58          0.87          1.11         22.01          0.12          0.05         24.15
Just calling func    0   0         24.15


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    114       2903.15          0.87          1.11         22.00          0.08          0.04         24.10
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1869.58
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    280.234               151
loop is:       34
neval is:      113
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       34      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    560.467      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    280.234               151
loop is:       35
neval is:      113


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      151
neval,tstepnext:      113     151

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.348096      -1.05528      -295.724       295.724       1706.19       2001.92    
   2  0.175000      -1.74297      -488.440       488.440       1842.47       2330.91    
   3  0.131587      -2.02809      -568.339       568.339       1847.39       2415.73    
   4  0.301717      -1.19826      -335.794       335.794       1873.15       2208.94    
   5  0.166877      -1.79050      -501.759       501.759       1839.10       2340.86    
   6  0.481073     -0.731736      -205.057       205.057       1844.36       2049.42    
   7  0.706381     -0.347600      -97.4094       97.4094       1886.24       1983.65    
   8  0.702617     -0.352943      -98.9065       98.9065       1881.57       1980.48    
   9  0.552795     -0.592767      -166.113       166.113       1877.42       2043.53    
  10  0.495420     -0.702349      -196.822       196.822       1830.81       2027.64    
  11  0.479343     -0.735339      -206.067       206.067       1874.21       2080.27    
  12  0.462659     -0.770765      -215.994       215.994       1804.91       2020.90    
  13  0.631315E-01  -2.76253      -774.155       774.155       1862.04       2636.20    
  14  0.785681     -0.241205      -67.5937       67.5937       1944.15       2011.74    
  15  0.767932     -0.264055      -73.9970       73.9970       1305.70       1379.69    
  16  0.262689E-01  -3.63937      -1019.87       1019.87       1866.10       2885.97    
  17  0.871353     -0.137708      -38.5904       38.5904       1860.39       1898.98    
  18  0.618350     -0.480701      -134.709       134.709       1940.57       2075.28    
  19  0.196090      -1.62918      -456.552       456.552       1886.43       2342.98    
  20  0.925050     -0.779078E-01  -21.8324       21.8324       1932.97       1954.80    
  21  0.903269     -0.101735      -28.5096       28.5096       1830.83       1859.34    
  22  0.958828     -0.420436E-01  -11.7820       11.7820       1898.07       1909.85    
  23  0.969274     -0.312081E-01  -8.74556       8.74556       1938.43       1947.18    
  24  0.313932      -1.15858      -324.673       324.673       2035.22       2359.90    
  25  0.106324      -2.24126      -628.078       628.078       1904.86       2532.94    
  26  0.718705     -0.330304      -92.5624       92.5624       1969.92       2062.48    
  27  0.751116     -0.286195      -80.2014       80.2014       1843.54       1923.74    
  28  0.996391     -0.361592E-02  -1.01330       1.01330       1842.02       1843.04    
  29  0.313387      -1.16032      -325.160       325.160       1831.67       2156.83    
  30  0.305057      -1.18726      -332.709       332.709       1873.49       2206.20    
  31  0.408833     -0.894447      -250.654       250.654       1935.97       2186.63    
  32  0.589856     -0.527877      -147.929       147.929       1799.18       1947.11    
  33  0.808683     -0.212349      -59.5073       59.5073       1868.19       1927.69    
  34  0.481635     -0.730569      -204.730       204.730       1821.56       2026.29    
  35  0.677481     -0.389374      -109.116       109.116       1824.61       1933.73    
  36  0.673605     -0.395111      -110.723       110.723       1867.99       1978.71    
  37  0.409374E-01  -3.19571      -895.546       895.546       1864.01       2759.56    
  38  0.362144      -1.01571      -284.637       284.637       1868.22       2152.86    
  39  0.364718E-01  -3.31122      -927.914       927.914       1796.12       2724.03    
  40  0.280272      -1.27199      -356.456       356.456       1973.58       2330.03    
  41  0.532528     -0.630120      -176.581       176.581       1836.91       2013.49    
  42  0.901591     -0.103595      -29.0307       29.0307       1921.00       1950.03    
  43  0.262858      -1.33614      -374.431       374.431       2025.84       2400.27    
  44  0.168755      -1.77931      -498.623       498.623       1965.16       2463.78    
  45  0.504619     -0.683952      -191.666       191.666       1889.21       2080.87    
  46  0.900650     -0.104639      -29.3233       29.3233       1893.04       1922.37    
  47  0.438495     -0.824406      -231.026       231.026       2435.02       2666.04    
  48  0.984597     -0.155233E-01  -4.35016       4.35016       1892.75       1897.10    
  49  0.469739     -0.755579      -211.739       211.739       1904.43       2116.17    
  50  0.252111      -1.37789      -386.130       386.130       1892.11       2278.24    
  51  0.764692     -0.268282      -75.1818       75.1818       1869.58       1944.76    
loop,thermsimp(1:2)       35   295.724       488.440    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    115       3165.68          0.88          1.12         22.02          0.10          0.05         24.16
Just calling func    0   0         24.16


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    116       3103.75          0.86          1.12         21.95          0.12          0.05         24.10
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3   3103.75
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    280.234               151
loop is:       35
neval is:      115
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       35      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    560.467      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    280.234               151
loop is:       36
neval is:      115


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      151
neval,tstepnext:      115     151

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.757905E-01  -2.57978      -722.942       722.942       1305.70       2028.64    
   2  0.962370     -0.383559E-01  -10.7486       10.7486       1842.02       1852.77    
   3  0.356737      -1.03076      -288.853       288.853       1830.83       2119.68    
   4  0.884319     -0.122937      -34.4511       34.4511       1892.75       1927.20    
   5  0.919725E-01  -2.38627      -668.712       668.712       1860.39       2529.10    
   6  0.900184     -0.105156      -29.4682       29.4682       1898.07       1927.54    
   7  0.390055     -0.941468      -263.831       263.831       1893.04       2156.88    
   8  0.263976      -1.33190      -373.243       373.243       1843.54       2216.78    
   9  0.898455     -0.107078      -30.0070       30.0070       1868.19       1898.19    
  10  0.697674E-01  -2.66259      -746.147       746.147       1824.61       2570.76    
  11  0.888938     -0.117727      -32.9911       32.9911       1869.58       1902.57    
  12  0.824147     -0.193406      -54.1989       54.1989       1799.18       1853.38    
  13  0.941109     -0.606968E-01  -17.0093       17.0093       1938.43       1955.44    
  14  0.885654     -0.121429      -34.0284       34.0284       1921.00       1955.03    
  15  0.798208     -0.225386      -63.1607       63.1607       1932.97       1996.13    
  16  0.365331      -1.00695      -282.182       282.182       1867.99       2150.17    
  17  0.519490     -0.654907      -183.527       183.527       1881.57       2065.10    
  18  0.922741     -0.804065E-01  -22.5326       22.5326       1886.24       1908.77    
  19  0.877443     -0.130744      -36.6388       36.6388       1706.19       1742.83    
  20  0.584844     -0.536410      -150.320       150.320       1944.15       2094.47    
  21  0.671390     -0.398406      -111.647       111.647       1836.91       1948.56    
  22  0.203335      -1.59290      -446.384       446.384       1804.91       2251.29    
  23  0.330236E-01  -3.41053      -955.747       955.747       1821.56       2777.31    
  24  0.879725     -0.128146      -35.9109       35.9109       1830.81       1866.73    
  25  0.833976     -0.181550      -50.8766       50.8766       1877.42       1928.29    
  26  0.901698     -0.103475      -28.9972       28.9972       1844.36       1873.36    
  27  0.692847     -0.366946      -102.831       102.831       1969.92       2072.75    
  28  0.550572     -0.596797      -167.243       167.243       1940.57       2107.82    
  29  0.158383E-01  -4.14532      -1161.66       1161.66       1874.21       3035.87    
  30  0.503246     -0.686677      -192.430       192.430       1889.21       2081.64    
  31  0.648812     -0.432612      -121.233       121.233       1904.43       2025.66    
  32  0.306980      -1.18097      -330.948       330.948       1868.22       2199.17    
  33  0.205188      -1.58383      -443.843       443.843       1831.67       2275.51    
  34  0.265146      -1.32748      -372.003       372.003       1935.97       2307.98    
  35  0.272730E-01  -3.60186      -1009.36       1009.36       1873.49       2882.85    
  36  0.262990E-01  -3.63823      -1019.55       1019.55       1873.15       2892.70    
  37  0.492753     -0.707748      -198.335       198.335       1892.11       2090.44    
  38  0.255065      -1.36624      -382.865       382.865       1973.58       2356.44    
  39  0.623259     -0.472794      -132.493       132.493       1842.47       1974.96    
  40  0.949296     -0.520343E-01  -14.5818       14.5818       1839.10       1853.68    
  41  0.982394     -0.177630E-01  -4.97779       4.97779       1886.43       1891.41    
  42  0.566450     -0.568366      -159.275       159.275       2035.22       2194.50    
  43  0.557613     -0.584090      -163.682       163.682       2025.84       2189.52    
  44  0.900731     -0.104549      -29.2981       29.2981       1847.39       1876.69    
  45  0.671339     -0.398481      -111.668       111.668       1965.16       2076.82    
  46  0.650454     -0.430084      -120.524       120.524       1904.86       2025.39    
  47  0.749315     -0.288595      -80.8742       80.8742       1862.04       1942.91    
  48  0.667497     -0.404220      -113.276       113.276       2435.02       2548.29    
  49  0.132870      -2.01838      -565.620       565.620       1796.12       2361.73    
  50  0.964787     -0.358480E-01  -10.0458       10.0458       1864.01       1874.06    
  51  0.835780     -0.179390      -50.2710       50.2710       3103.75       3154.03    
loop,thermsimp(1:2)       36   722.942       10.7486    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    117       1861.01          0.88          1.12         21.95          0.11          0.05         24.11
Just calling func    0   0         24.11


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    118       1935.82          0.87          1.11         22.07          0.11          0.04         24.20
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1861.01
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    280.234               151
loop is:       36
neval is:      117
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       36      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    560.467      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    280.234               151
loop is:       37
neval is:      117


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      151
neval,tstepnext:      117     151

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.939165     -0.627646E-01  -17.5888       17.5888       1706.19       1723.78    
   2  0.112532E-01  -4.48710      -1257.44       1257.44       1842.02       3099.46    
   3  0.907929     -0.965891E-01  -27.0675       27.0675       1799.18       1826.25    
   4  0.478640     -0.736807      -206.478       206.478       1839.10       2045.58    
   5  0.737686     -0.304237      -85.2575       85.2575       1830.81       1916.07    
   6  0.114880      -2.16387      -606.389       606.389       1844.36       2450.75    
   7  0.309837      -1.17171      -328.352       328.352       1864.01       2192.36    
   8  0.469091     -0.756958      -212.125       212.125       1847.39       2059.52    
   9  0.721151     -0.326907      -91.6103       91.6103       1886.43       1978.04    
  10  0.557251     -0.584740      -163.864       163.864       1868.19       2032.05    
  11  0.581534     -0.542085      -151.911       151.911       1869.58       2021.49    
  12  0.501412     -0.690326      -193.453       193.453       1886.24       2079.69    
  13  0.783062     -0.244543      -68.5293       68.5293       1892.75       1961.28    
  14  0.571322     -0.559803      -156.876       156.876       1898.07       2054.95    
  15  0.902729E-01  -2.40492      -673.939       673.939       1877.42       2551.35    
  16  0.695403E-01  -2.66585      -747.061       747.061       1862.04       2609.10    
  17  0.128872      -2.04894      -574.182       574.182       1836.91       2411.09    
  18  0.940828E-01  -2.36358      -662.355       662.355       1921.00       2583.36    
  19  0.326350      -1.11979      -313.802       313.802       1938.43       2252.23    
  20  0.102915      -2.27385      -637.211       637.211       1842.47       2479.68    
  21  0.324524      -1.12540      -315.374       315.374       1932.97       2248.35    
  22  0.259454      -1.34918      -378.085       378.085       1904.86       2282.95    
  23  0.782812     -0.244863      -68.6188       68.6188       1904.43       1973.05    
  24  0.383591     -0.958178      -268.514       268.514       1305.70       1574.21    
  25  0.626880     -0.466999      -130.869       130.869       1881.57       2012.44    
  26  0.292269      -1.23008      -344.710       344.710       1969.92       2314.63    
  27  0.448852     -0.801062      -224.485       224.485       1965.16       2189.64    
  28  0.685432     -0.377706      -105.846       105.846       1889.21       1995.05    
  29  0.995399     -0.461118E-02  -1.29221       1.29221       1892.11       1893.40    
  30  0.163323      -1.81203      -507.791       507.791       1944.15       2451.94    
  31  0.952940     -0.482038E-01  -13.5083       13.5083       1940.57       1954.08    
  32  0.861306     -0.149306      -41.8405       41.8405       1830.83       1872.67    
  33  0.587276     -0.532261      -149.158       149.158       1867.99       2017.15    
  34  0.908704     -0.957357E-01  -26.8284       26.8284       1893.04       1919.87    
  35  0.585935     -0.534546      -149.798       149.798       2025.84       2175.64    
  36  0.429836     -0.844352      -236.616       236.616       2035.22       2271.84    
  37  0.726203     -0.319926      -89.6542       89.6542       1868.22       1957.88    
  38  0.151145E-01  -4.19210      -1174.77       1174.77       1843.54       3018.31    
  39  0.927869     -0.748646E-01  -20.9796       20.9796       1804.91       1825.89    
  40  0.961645     -0.391099E-01  -10.9599       10.9599       1831.67       1842.63    
  41  0.253977      -1.37051      -384.063       384.063       1935.97       2320.04    
  42  0.768038     -0.263917      -73.9583       73.9583       1973.58       2047.54    
  43  0.569441E-01  -2.86569      -803.062       803.062       1796.12       2599.18    
  44  0.103919      -2.26415      -634.490       634.490       1860.39       2494.88    
  45  0.312226      -1.16403      -326.200       326.200       2435.02       2761.22    
  46  0.473636E-02  -5.35249      -1499.95       1499.95       1824.61       3324.56    
  47  0.192099      -1.64975      -462.314       462.314       1821.56       2283.88    
  48  0.799429     -0.223858      -62.7325       62.7325       1873.49       1936.22    
  49  0.164379      -1.80558      -505.985       505.985       1873.15       2379.13    
  50  0.421896     -0.862996      -241.841       241.841       1874.21       2116.05    
  51  0.361660      -1.01705      -285.012       285.012       1861.01       2146.02    
loop,thermsimp(1:2)       37   17.5888       1257.44    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    119       2290.85          0.88          1.12         22.03          0.13          0.04         24.20
Just calling func    0   0         24.19


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2290.85
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    280.234               151
loop is:       37
neval is:      118
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       37      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    560.467      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    280.234               151
loop is:       38
neval is:      118


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      151
neval,tstepnext:      118     151

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.371753     -0.989525      -277.298       277.298       1305.70       1582.99    
   2  0.687927     -0.374072      -104.828       104.828       1706.19       1811.02    
   3  0.288957      -1.24148      -347.904       347.904       1804.91       2152.81    
   4  0.192838      -1.64590      -461.237       461.237       1799.18       2260.42    
   5  0.369869     -0.994607      -278.723       278.723       1831.67       2110.39    
   6  0.735973     -0.306562      -85.9090       85.9090       1830.83       1916.73    
   7  0.637144     -0.450760      -126.318       126.318       1892.11       2018.42    
   8  0.703934     -0.351071      -98.3819       98.3819       1830.81       1929.20    
   9  0.864279     -0.145859      -40.8746       40.8746       1893.04       1933.92    
  10  0.473452     -0.747705      -209.532       209.532       1873.49       2083.02    
  11  0.242010      -1.41877      -397.589       397.589       1940.57       2338.16    
  12  0.510769     -0.671838      -188.272       188.272       1868.22       2056.50    
  13  0.829624     -0.186782      -52.3427       52.3427       1892.75       1945.09    
  14  0.228911      -1.47442      -413.183       413.183       1904.43       2317.61    
  15  0.310006      -1.17116      -328.200       328.200       1886.43       2214.63    
  16  0.248341      -1.39295      -390.353       390.353       1889.21       2279.56    
  17  0.723214     -0.324050      -90.8097       90.8097       1881.57       1972.38    
  18  0.420900     -0.865360      -242.503       242.503       1867.99       2110.49    
  19  0.133903      -2.01064      -563.448       563.448       1869.58       2433.03    
  20  0.571916     -0.558763      -156.584       156.584       1868.19       2024.77    
  21  0.609104     -0.495766      -138.930       138.930       1839.10       1978.03    
  22  0.582057     -0.541186      -151.659       151.659       1973.58       2125.24    
  23  0.440731     -0.819321      -229.602       229.602       1898.07       2127.67    
  24  0.211006      -1.55587      -436.007       436.007       1847.39       2283.40    
  25  0.665769     -0.406813      -114.003       114.003       1886.24       2000.24    
  26  0.766062     -0.266493      -74.6802       74.6802       1874.21       1948.89    
  27  0.321416E-01  -3.43760      -963.332       963.332       1861.01       2824.34    
  28  0.165897E-01  -4.09897      -1148.67       1148.67       2025.84       3174.51    
  29  0.634553     -0.454835      -127.460       127.460       1965.16       2092.62    
  30  0.981834     -0.183335E-01  -5.13767       5.13767       1864.01       1869.15    
  31  0.511720     -0.669978      -187.750       187.750       1932.97       2120.72    
  32  0.426358     -0.852477      -238.893       238.893       1938.43       2177.32    
  33  0.500527     -0.692094      -193.948       193.948       2035.22       2229.17    
  34  0.100483      -2.29777      -643.913       643.913       1904.86       2548.77    
  35  0.837324     -0.177545      -49.7540       49.7540       1821.56       1871.32    
  36  0.257741      -1.35580      -379.941       379.941       1969.92       2349.86    
  37  0.437184     -0.827401      -231.866       231.866       1935.97       2167.84    
  38  0.707529     -0.345976      -96.9542       96.9542       1873.15       1970.10    
  39  0.538379     -0.619193      -173.519       173.519       1836.91       2010.43    
  40  0.611820     -0.491317      -137.683       137.683       1844.36       1982.04    
  41  0.404533     -0.905022      -253.618       253.618       1944.15       2197.77    
  42  0.902499     -0.102588      -28.7487       28.7487       1842.47       1871.22    
  43  0.704299     -0.350552      -98.2366       98.2366       1860.39       1958.63    
  44  0.511818     -0.669786      -187.697       187.697       1877.42       2065.11    
  45  0.748131     -0.290178      -81.3176       81.3176       1921.00       2002.32    
  46  0.296598      -1.21538      -340.590       340.590       1796.12       2136.71    
  47  0.805122     -0.216762      -60.7440       60.7440       1862.04       1922.78    
  48  0.525063     -0.644236      -180.537       180.537       2435.02       2615.55    
  49  0.192567      -1.64731      -461.632       461.632       1843.54       2305.17    
  50  0.991898     -0.813527E-02  -2.27978       2.27978       1842.02       1844.30    
  51  0.238175      -1.43475      -402.065       402.065       2290.85       2692.92    
loop,thermsimp(1:2)       38   277.298       104.828    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    120       2040.83          0.88          1.11         22.06          0.10          0.05         24.20
Just calling func    0   0         24.20


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2040.83
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    280.234               151
loop is:       38
neval is:      119
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       38      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    560.467      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    280.234               151
loop is:       39
neval is:      119


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      151
neval,tstepnext:      119     151

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.724264     -0.322600      -90.4033       90.4033       1305.70       1396.10    
   2  0.309663      -1.17227      -328.510       328.510       1706.19       2034.70    
   3  0.688114     -0.373801      -104.752       104.752       1842.02       1946.77    
   4  0.677876     -0.388791      -108.952       108.952       1864.01       1972.96    
   5  0.283701      -1.25984      -353.048       353.048       1842.47       2195.52    
   6  0.183733      -1.69427      -474.792       474.792       1821.56       2296.36    
   7  0.243414      -1.41299      -395.968       395.968       1830.83       2226.79    
   8  0.785389     -0.241576      -67.6976       67.6976       1862.04       1929.74    
   9  0.258033      -1.35467      -379.624       379.624       1830.81       2210.44    
  10  0.137887      -1.98132      -555.234       555.234       1893.04       2448.28    
  11  0.386520     -0.950573      -266.383       266.383       1892.75       2159.13    
  12  0.882934     -0.124505      -34.8906       34.8906       1874.21       1909.10    
  13  0.395106     -0.928602      -260.225       260.225       1860.39       2120.62    
  14  0.107633      -2.22903      -624.650       624.650       1873.15       2497.80    
  15  0.434094     -0.834495      -233.854       233.854       1881.57       2115.42    
  16  0.558484     -0.582529      -163.244       163.244       1839.10       2002.34    
  17  0.102706      -2.27589      -637.780       637.780       1844.36       2482.14    
  18  0.325804      -1.12146      -314.270       314.270       1886.24       2200.51    
  19  0.693871     -0.365469      -102.417       102.417       1921.00       2023.42    
  20  0.832622     -0.183176      -51.3320       51.3320       1836.91       1888.24    
  21  0.691207     -0.369316      -103.495       103.495       1892.11       1995.60    
  22  0.903946     -0.100985      -28.2995       28.2995       1868.19       1896.49    
  23  0.258785E-01  -3.65434      -1024.07       1024.07       1868.22       2892.29    
  24  0.247338      -1.39700      -391.486       391.486       1877.42       2268.90    
  25  0.861464     -0.149122      -41.7891       41.7891       1873.49       1915.28    
  26  0.954919     -0.461290E-01  -12.9269       12.9269       1965.16       1978.08    
  27  0.579638     -0.545352      -152.826       152.826       1831.67       1984.49    
  28  0.537182     -0.621418      -174.142       174.142       1867.99       2042.13    
  29  0.407710     -0.897199      -251.425       251.425       1932.97       2184.40    
  30  0.958466     -0.424211E-01  -11.8878       11.8878       1973.58       1985.47    
  31  0.884674     -0.122536      -34.3387       34.3387       1898.07       1932.41    
  32  0.395055     -0.928731      -260.262       260.262       1796.12       2056.38    
  33  0.325425      -1.12262      -314.597       314.597       1804.91       2119.51    
  34  0.679842     -0.385895      -108.141       108.141       1935.97       2044.12    
  35  0.765292     -0.267498      -74.9619       74.9619       1938.43       2013.39    
  36  0.217460      -1.52574      -427.564       427.564       1944.15       2371.71    
  37  0.181189      -1.70822      -478.700       478.700       1886.43       2365.13    
  38  0.518456     -0.656899      -184.085       184.085       2035.22       2219.31    
  39  0.249864E-01  -3.68942      -1033.90       1033.90       1799.18       2833.08    
  40  0.336654      -1.08870      -305.091       305.091       1889.21       2194.30    
  41  0.873801     -0.134903      -37.8043       37.8043       1847.39       1885.20    
  42  0.478904     -0.736255      -206.323       206.323       1843.54       2049.86    
  43  0.819950     -0.198512      -55.6298       55.6298       1904.43       1960.06    
  44  0.966813     -0.337500E-01  -9.45789       9.45789       1940.57       1950.03    
  45  0.514109     -0.665319      -186.445       186.445       1969.92       2156.36    
  46  0.483734     -0.726221      -203.512       203.512       1869.58       2073.09    
  47  0.227743E-01  -3.78212      -1059.88       1059.88       1904.86       2964.74    
  48  0.409495     -0.892830      -250.201       250.201       2435.02       2685.22    
  49  0.198361      -1.61767      -453.325       453.325       2290.85       2744.18    
  50  0.925767     -0.771331E-01  -21.6153       21.6153       1861.01       1882.62    
  51  0.842113     -0.171842      -48.1558       48.1558       2040.83       2088.98    
loop,thermsimp(1:2)       39   90.4033       328.510    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    121       1806.26          0.87          1.11         21.99          0.10          0.05         24.13
Just calling func    0   0         24.13


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    122       1776.25          0.87          1.11         22.02          0.06          0.05         24.11
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  120    1806.3        1.052     -2.365      3.207     -102.6     0.8411    
                       2.669      1.145     -99.70      3.640     0.3495    

                       1.894     -1.790      1.540      7000.      7000.    

                      -2.117      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -7.133     -4.548     -7.974      7.071    

                      -13.73     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.1739E-01 0.2223    -0.3454E-01 0.1130    

                     -0.2486    -0.1051     0.1388     0.1199     0.1062    



                     -0.5411    -0.5530      0.000     0.6284E-01-0.3832E-01

                     -0.3997E-01 0.1826    -0.7116    -0.8108E-01 0.3090    

                      0.6056E-01 0.4101E-01-0.5679     -1.190      7000.    



                     -0.2390    -0.6590     -2.142     -1.982    -0.3807    

                     -0.3252      9.168      8.748    -0.1672E+05 -6.000    

                     -0.4977     -2.249      9.407      8.793    -0.1969E+05



                      -6.000     0.7162    -0.2377      8.918      9.077    

                     -0.1944E+05 -6.000    -0.5173    -0.5016      9.129    

                       8.830    -0.1891E+05 -6.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1776.25
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    280.234               151
loop is:       39
neval is:      121
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       39      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    560.467      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    280.234               151
loop is:       40
neval is:      121


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      151
neval,tstepnext:      121     151

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.954632     -0.464296E-01  -13.0111       13.0111       1305.70       1318.71    
   2  0.450411     -0.797594      -223.513       223.513       1861.01       2084.52    
   3  0.691912E-01  -2.67088      -748.471       748.471       1847.39       2595.86    
   4  0.740935     -0.299842      -84.0258       84.0258       1836.91       1920.94    
   5  0.452531     -0.792898      -222.197       222.197       1868.19       2090.38    
   6  0.461330     -0.773642      -216.801       216.801       1874.21       2091.01    
   7  0.102999      -2.27303      -636.981       636.981       1873.49       2510.47    
   8  0.475106     -0.744217      -208.555       208.555       1862.04       2070.59    
   9  0.240275      -1.42597      -399.605       399.605       1898.07       2297.68    
  10  0.276707E-01  -3.58738      -1005.31       1005.31       1842.02       2847.33    
  11  0.132701E-01  -4.32224      -1211.24       1211.24       1940.57       3151.81    
  12  0.997219     -0.278509E-02 -0.780475      0.780475       1904.43       1905.21    
  13  0.563305     -0.573934      -160.836       160.836       1864.01       2024.85    
  14  0.347949      -1.05570      -295.843       295.843       1965.16       2261.00    
  15  0.546018     -0.605103      -169.570       169.570       1831.67       2001.24    
  16  0.343968      -1.06721      -299.067       299.067       1973.58       2272.65    
  17  0.945234     -0.563230E-01  -15.7836       15.7836       1892.11       1907.89    
  18  0.346208      -1.06072      -297.248       297.248       1839.10       2136.35    
  19  0.406433     -0.900337      -252.305       252.305       1938.43       2190.74    
  20  0.632259     -0.458455      -128.475       128.475       1921.00       2049.48    
  21  0.983930     -0.162002E-01  -4.53984       4.53984       1706.19       1710.73    
  22  0.200798      -1.60546      -449.903       449.903       1867.99       2317.89    
  23  0.223962      -1.49628      -419.307       419.307       1935.97       2355.28    
  24  0.594322     -0.520335      -145.815       145.815       1843.54       1989.36    
  25  0.875298     -0.133191      -37.3246       37.3246       1796.12       1833.44    
  26  0.327822      -1.11529      -312.540       312.540       1869.58       2182.12    
  27  0.215105      -1.53663      -430.615       430.615       2040.83       2471.44    
  28  0.905181     -0.996198E-01  -27.9168       27.9168       1881.57       1909.49    
  29  0.699086     -0.357981      -100.318       100.318       1804.91       1905.23    
  30  0.747401     -0.291154      -81.5912       81.5912       1860.39       1941.98    
  31  0.699189     -0.357834      -100.277       100.277       1969.92       2070.19    
  32  0.563488     -0.573610      -160.745       160.745       1892.75       2053.49    
  33  0.155576      -1.86062      -521.409       521.409       1932.97       2454.38    
  34  0.380593     -0.966025      -270.713       270.713       1889.21       2159.92    
  35  0.626112     -0.468226      -131.213       131.213       1842.47       1973.68    
  36  0.372369     -0.987870      -276.834       276.834       1886.24       2163.08    
  37  0.517531     -0.658686      -184.586       184.586       1830.81       2015.40    
  38  0.673247     -0.395643      -110.872       110.872       2035.22       2146.10    
  39  0.741527     -0.299044      -83.8022       83.8022       1830.83       1914.63    
  40  0.280982      -1.26947      -355.747       355.747       1877.42       2233.16    
  41  0.331745      -1.10339      -309.207       309.207       1821.56       2130.77    
  42  0.712030     -0.339635      -95.1772       95.1772       1886.43       1981.60    
  43  0.200581      -1.60654      -450.206       450.206       1944.15       2394.35    
  44  0.989915     -0.101357E-01  -2.84037       2.84037       1893.04       1895.88    
  45  0.808031     -0.213155      -59.7333       59.7333       1844.36       1904.09    
  46  0.893446     -0.112670      -31.5739       31.5739       1873.15       1904.72    
  47  0.364885      -1.00817      -282.524       282.524       2435.02       2717.54    
  48  0.923731     -0.793347E-01  -22.2323       22.2323       2290.85       2313.09    
  49  0.504880     -0.683434      -191.521       191.521       1799.18       1990.70    
  50  0.724988     -0.321600      -90.1233       90.1233       1868.22       1958.35    
  51  0.927322     -0.754540E-01  -21.1448       21.1448       1776.25       1797.39    
loop,thermsimp(1:2)       40   13.0111       223.513    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    123       1908.99          0.87          1.12         22.25          0.11          0.05         24.39
Just calling func    0   0         24.39


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1908.99
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    280.234               151
loop is:       40
neval is:      122
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       40      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    560.467      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    280.234               151
loop is:       41
neval is:      122


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      151
neval,tstepnext:      122     151

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.357965      -1.02732      -287.890       287.890       1305.70       1593.59    
   2  0.414955     -0.879585      -246.489       246.489       1706.19       1952.68    
   3  0.407443     -0.897854      -251.609       251.609       1776.25       2027.86    
   4  0.883897     -0.123414      -34.5849       34.5849       1796.12       1830.70    
   5  0.520045     -0.653840      -183.228       183.228       1893.04       2076.27    
   6  0.634521     -0.454885      -127.474       127.474       1844.36       1971.83    
   7  0.344406      -1.06594      -298.711       298.711       1873.15       2171.86    
   8  0.545595     -0.605879      -169.788       169.788       1904.43       2074.22    
   9  0.766876     -0.265430      -74.3823       74.3823       1804.91       1879.29    
  10  0.639043     -0.447783      -125.484       125.484       1892.11       2017.59    
  11  0.850701     -0.161694      -45.3122       45.3122       1881.57       1926.88    
  12  0.832060     -0.183851      -51.5213       51.5213       1830.83       1882.35    
  13  0.728209     -0.317167      -88.8808       88.8808       1836.91       1925.79    
  14  0.531327     -0.632378      -177.214       177.214       1860.39       2037.60    
  15  0.188974E-01  -3.96873      -1112.17       1112.17       1868.22       2980.40    
  16  0.246817      -1.39911      -392.077       392.077       1842.47       2234.55    
  17  0.935336     -0.668496E-01  -18.7335       18.7335       1886.43       1905.16    
  18  0.730823     -0.313585      -87.8770       87.8770       1843.54       1931.42    
  19  0.482288     -0.729213      -204.350       204.350       1799.18       2003.53    
  20  0.782974E-04  -9.45500      -2649.61       2649.61       1831.67       4481.27    
  21  0.258744      -1.35192      -378.853       378.853       1830.81       2209.67    
  22  0.389044     -0.944063      -264.558       264.558       1864.01       2128.57    
  23  0.611459E-01  -2.79449      -783.111       783.111       1921.00       2704.11    
  24  0.124922      -2.08006      -582.904       582.904       1892.75       2475.65    
  25  0.253683      -1.37167      -384.388       384.388       1969.92       2354.30    
  26  0.781437     -0.246621      -69.1114       69.1114       1862.04       1931.15    
  27  0.835634     -0.179565      -50.3202       50.3202       1861.01       1911.33    
  28  0.542030     -0.612434      -171.625       171.625       1868.19       2039.81    
  29  0.463443     -0.769071      -215.520       215.520       1874.21       2089.73    
  30  0.120587      -2.11538      -592.801       592.801       1821.56       2414.37    
  31  0.733316     -0.310178      -86.9224       86.9224       1839.10       1926.02    
  32  0.955530     -0.454889E-01  -12.7475       12.7475       2035.22       2047.97    
  33  0.419735     -0.868132      -243.280       243.280       1889.21       2132.49    
  34  0.284829      -1.25587      -351.936       351.936       1886.24       2238.18    
  35  0.924079     -0.789582E-01  -22.1267       22.1267       1869.58       1891.71    
  36  0.432674     -0.837770      -234.771       234.771       1938.43       2173.20    
  37  0.155293      -1.86244      -521.918       521.918       1877.42       2399.33    
  38  0.634342     -0.455168      -127.553       127.553       1965.16       2092.71    
  39  0.935635     -0.665293E-01  -18.6438       18.6438       1973.58       1992.22    
  40  0.931832     -0.706024E-01  -19.7852       19.7852       1898.07       1917.86    
  41  0.875970     -0.132424      -37.1096       37.1096       2290.85       2327.96    
  42  0.273544      -1.29629      -363.265       363.265       1867.99       2231.25    
  43  0.799596     -0.223649      -62.6741       62.6741       1935.97       1998.65    
  44  0.772883     -0.257628      -72.1960       72.1960       1944.15       2016.34    
  45  0.274276      -1.29362      -362.516       362.516       1932.97       2295.49    
  46  0.116034      -2.15387      -603.588       603.588       2040.83       2644.42    
  47  0.700214     -0.356369      -99.8667       99.8667       1873.49       1973.35    
  48  0.704184E-01  -2.65330      -743.545       743.545       1847.39       2590.94    
  49  0.699980E-01  -2.65929      -745.223       745.223       2435.02       3180.24    
  50  0.186964      -1.67684      -469.907       469.907       1842.02       2311.93    
  51  0.342641      -1.07107      -300.150       300.150       1908.99       2209.14    
loop,thermsimp(1:2)       41   287.890       246.489    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    124       2289.38          0.88          1.12         22.24          0.05          0.05         24.33
Just calling func    0   0         24.34


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2289.38
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    280.234               151
loop is:       41
neval is:      123
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       41      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    560.467      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    280.234               151
loop is:       42
neval is:      123


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      151
neval,tstepnext:      123     151

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.559413E-01  -2.88345      -808.040       808.040       1305.70       2113.74    
   2  0.688513     -0.373221      -104.589       104.589       1796.12       1900.70    
   3  0.530653     -0.633647      -177.569       177.569       1804.91       1982.48    
   4  0.542886     -0.610856      -171.182       171.182       1830.83       2002.01    
   5  0.603382     -0.505205      -141.575       141.575       1869.58       2011.15    
   6  0.478412     -0.737283      -206.612       206.612       1886.43       2093.04    
   7  0.809657     -0.211144      -59.1698       59.1698       1861.01       1920.18    
   8  0.764585     -0.268422      -75.2208       75.2208       1898.07       1973.29    
   9  0.228600      -1.47578      -413.563       413.563       1836.91       2250.47    
  10  0.495526     -0.702136      -196.762       196.762       1839.10       2035.86    
  11  0.368264     -0.998954      -279.941       279.941       1881.57       2161.51    
  12  0.407647     -0.897355      -251.469       251.469       1862.04       2113.51    
  13  0.316165      -1.15149      -322.687       322.687       1843.54       2166.23    
  14  0.458518     -0.779756      -218.514       218.514       1706.19       1924.71    
  15  0.643610     -0.440663      -123.489       123.489       1844.36       1967.85    
  16  0.316553E-01  -3.45285      -967.605       967.605       1873.49       2841.09    
  17  0.570171     -0.561819      -157.441       157.441       1973.58       2131.02    
  18  0.448642E-01  -3.10412      -869.878       869.878       1935.97       2805.85    
  19  0.128957      -2.04828      -573.997       573.997       1799.18       2373.18    
  20  0.159422      -1.83620      -514.566       514.566       1944.15       2458.71    
  21  0.154083      -1.87026      -524.110       524.110       1892.11       2416.22    
  22  0.696997     -0.360974      -101.157       101.157       1776.25       1877.40    
  23  0.579421     -0.545727      -152.931       152.931       1860.39       2013.32    
  24  0.528206     -0.638269      -178.865       178.865       1868.19       2047.05    
  25  0.322914      -1.13037      -316.767       316.767       2035.22       2351.99    
  26  0.369562     -0.995437      -278.955       278.955       1904.43       2183.38    
  27  0.134248      -2.00806      -562.727       562.727       1893.04       2455.77    
  28  0.950150     -0.511358E-01  -14.3300       14.3300       1874.21       1888.54    
  29  0.138040      -1.98021      -554.922       554.922       1965.16       2520.08    
  30  0.316838      -1.14936      -322.091       322.091       1864.01       2186.10    
  31  0.151783      -1.88530      -528.326       528.326       1889.21       2417.53    
  32  0.338674      -1.08272      -303.414       303.414       1873.15       2176.56    
  33  0.814165     -0.205592      -57.6139       57.6139       1938.43       1996.05    
  34  0.578183     -0.547865      -153.530       153.530       1908.99       2062.52    
  35  0.208707      -1.56682      -439.077       439.077       1830.81       2269.89    
  36  0.540561     -0.615147      -172.385       172.385       1867.99       2040.37    
  37  0.910129     -0.941686E-01  -26.3892       26.3892       1842.47       1868.86    
  38  0.907740     -0.967972E-01  -27.1258       27.1258       1886.24       1913.37    
  39  0.549661     -0.598453      -167.707       167.707       1932.97       2100.68    
  40  0.193889      -1.64047      -459.715       459.715       1842.02       2301.74    
  41  0.807651     -0.213625      -59.8650       59.8650       2290.85       2350.72    
  42  0.613777     -0.488124      -136.789       136.789       1969.92       2106.70    
  43  0.664452     -0.408793      -114.557       114.557       1877.42       1991.97    
  44  0.584630     -0.536776      -150.423       150.423       1821.56       1971.99    
  45  0.618915     -0.479787      -134.453       134.453       1892.75       2027.20    
  46  0.542097     -0.612311      -171.590       171.590       1847.39       2018.98    
  47  0.133641      -2.01260      -563.998       563.998       2040.83       2604.83    
  48  0.479627     -0.734747      -205.901       205.901       1921.00       2126.90    
  49  0.225939      -1.48749      -416.845       416.845       1868.22       2285.07    
  50  0.324869      -1.12433      -315.076       315.076       2435.02       2750.09    
  51  0.669051     -0.401895      -112.625       112.625       2289.38       2402.01    
loop,thermsimp(1:2)       42   808.040       104.589    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    125       2002.47          0.88          1.12         22.01          0.10          0.05         24.16
Just calling func    0   0         24.16


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    126       3326.05          0.86          1.12         22.07          0.08          0.05         24.19
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   2002.47
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    280.234               151
loop is:       42
neval is:      125
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       42      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    560.467      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    280.234               151
loop is:       43
neval is:      125


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      151
neval,tstepnext:      125     151

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.788601     -0.237495      -66.5540       66.5540       1842.47       1909.02    
   2  0.796559     -0.227454      -63.7403       63.7403       1776.25       1839.99    
   3  0.784232     -0.243051      -68.1110       68.1110       1874.21       1942.32    
   4  0.503549     -0.686074      -192.261       192.261       1796.12       1988.38    
   5  0.468337     -0.758566      -212.576       212.576       1886.24       2098.82    
   6  0.198518      -1.61688      -453.104       453.104       1861.01       2314.11    
   7  0.857529     -0.153700      -43.0719       43.0719       1706.19       1749.26    
   8  0.845427     -0.167913      -47.0549       47.0549       1844.36       1891.42    
   9  0.710919     -0.341197      -95.6149       95.6149       1821.56       1917.18    
  10  0.934107     -0.681640E-01  -19.1019       19.1019       1898.07       1917.17    
  11  0.565087     -0.570775      -159.951       159.951       1804.91       1964.86    
  12  0.147377      -1.91476      -536.581       536.581       1877.42       2414.00    
  13  0.471965     -0.750851      -210.414       210.414       1938.43       2148.85    
  14  0.287319      -1.24716      -349.497       349.497       1830.83       2180.32    
  15  0.526906     -0.640733      -179.555       179.555       1869.58       2049.13    
  16  0.176999      -1.73161      -485.256       485.256       1860.39       2345.65    
  17  0.868579     -0.140897      -39.4840       39.4840       1847.39       1886.88    
  18  0.621282     -0.475971      -133.383       133.383       1892.75       2026.13    
  19  0.181881      -1.70440      -477.632       477.632       1839.10       2316.73    
  20  0.565209     -0.570560      -159.890       159.890       1867.99       2027.88    
  21  0.927617     -0.751364E-01  -21.0557       21.0557       1868.19       1889.24    
  22  0.296120      -1.21699      -341.042       341.042       1908.99       2250.03    
  23  0.152389      -1.88132      -527.209       527.209       1886.43       2413.64    
  24  0.508731     -0.675835      -189.392       189.392       1932.97       2122.36    
  25  0.389654     -0.942496      -264.119       264.119       1969.92       2234.04    
  26  0.770754     -0.260386      -72.9690       72.9690       1862.04       1935.01    
  27  0.144347      -1.93554      -542.402       542.402       1305.70       1848.10    
  28  0.690124     -0.370884      -103.934       103.934       1921.00       2024.94    
  29  0.882429     -0.125077      -35.0508       35.0508       1973.58       2008.63    
  30  0.781105     -0.247045      -69.2305       69.2305       1881.57       1950.80    
  31  0.331946      -1.10278      -309.037       309.037       1843.54       2152.58    
  32  0.157011      -1.85144      -518.835       518.835       1873.15       2391.98    
  33  0.734200     -0.308973      -86.5847       86.5847       1904.43       1991.01    
  34  0.563390     -0.573784      -160.794       160.794       1864.01       2024.80    
  35  0.349498      -1.05126      -294.598       294.598       1836.91       2131.51    
  36  0.256822      -1.35937      -380.941       380.941       1830.81       2211.76    
  37  0.563556     -0.573488      -160.711       160.711       1868.22       2028.94    
  38  0.945419E-01  -2.35871      -660.991       660.991       1842.02       2503.01    
  39  0.571450     -0.559577      -156.812       156.812       2290.85       2447.67    
  40  0.583029E-01  -2.84210      -796.453       796.453       2035.22       2831.68    
  41  0.428808     -0.846746      -237.287       237.287       1799.18       2036.47    
  42  0.628450     -0.464499      -130.168       130.168       2289.38       2419.55    
  43  0.152789      -1.87869      -526.474       526.474       1892.11       2418.58    
  44  0.787004E-01  -2.54211      -712.384       712.384       1889.21       2601.59    
  45  0.170927E-01  -4.06911      -1140.30       1140.30       1893.04       3033.34    
  46  0.531078     -0.632847      -177.345       177.345       1944.15       2121.49    
  47  0.206082E-01  -3.88206      -1087.89       1087.89       1965.16       3053.04    
  48  0.909565     -0.947891E-01  -26.5631       26.5631       2040.83       2067.39    
  49  0.456291     -0.784625      -219.878       219.878       2435.02       2654.89    
  50  0.997425E-02  -4.60775      -1291.25       1291.25       1935.97       3227.22    
  51  0.251070      -1.38202      -387.289       387.289       2002.47       2389.76    
loop,thermsimp(1:2)       43   66.5540       63.7403    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    127       1781.82          0.88          1.12         21.93          0.18          0.05         24.15
Just calling func    0   0         24.15


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    128       1707.38          0.87          1.11         22.00          0.14          0.05         24.16
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1707.38
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    280.234               151
loop is:       43
neval is:      127
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       43      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    560.467      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    280.234               151
loop is:       44
neval is:      127


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      151
neval,tstepnext:      127     151

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.104987      -2.25392      -631.625       631.625       1706.19       2337.82    
   2  0.780131E-01  -2.55088      -714.842       714.842       1776.25       2491.09    
   3  0.723689     -0.323394      -90.6260       90.6260       1305.70       1396.32    
   4  0.439896     -0.821218      -230.133       230.133       1847.39       2077.53    
   5  0.967364     -0.331803E-01  -9.29824       9.29824       1868.19       1877.48    
   6  0.235884      -1.44441      -404.774       404.774       1844.36       2249.13    
   7  0.311956      -1.16489      -326.443       326.443       1842.47       2168.91    
   8  0.600573     -0.509870      -142.883       142.883       1898.07       2040.95    
   9  0.781739     -0.246234      -69.0031       69.0031       1821.56       1890.57    
  10  0.505036     -0.683126      -191.435       191.435       1862.04       2053.47    
  11  0.896130     -0.109670      -30.7333       30.7333       1874.21       1904.94    
  12  0.545040     -0.606897      -170.073       170.073       1881.57       2051.64    
  13  0.338019      -1.08465      -303.957       303.957       1804.91       2108.87    
  14  0.200467      -1.60711      -450.365       450.365       1796.12       2246.48    
  15  0.548763     -0.600089      -168.165       168.165       1904.43       2072.60    
  16  0.897241     -0.108431      -30.3860       30.3860       1973.58       2003.96    
  17  0.229905      -1.47009      -411.968       411.968       1864.01       2275.98    
  18  0.387828     -0.947193      -265.435       265.435       1921.00       2186.44    
  19  0.789400     -0.236482      -66.2703       66.2703       1892.75       1959.02    
  20  0.495667     -0.701851      -196.682       196.682       1867.99       2064.67    
  21  0.818926     -0.199761      -55.9799       55.9799       1868.22       1924.20    
  22  0.181319      -1.70750      -478.498       478.498       1799.18       2277.68    
  23  0.901986     -0.103156      -28.9079       28.9079       1869.58       1898.49    
  24  0.933790E-01  -2.37109      -664.459       664.459       2040.83       2705.29    
  25  0.171523      -1.76304      -494.062       494.062       1886.24       2380.30    
  26  0.648450     -0.433170      -121.389       121.389       1944.15       2065.54    
  27  0.777448     -0.251739      -70.5457       70.5457       1932.97       2003.52    
  28  0.777670     -0.251453      -70.4656       70.4656       1836.91       1907.37    
  29  0.972420     -0.279672E-01  -7.83736       7.83736       1938.43       1946.27    
  30  0.825305     -0.192002      -53.8053       53.8053       1843.54       1897.35    
  31  0.470649     -0.753642      -211.196       211.196       1830.83       2042.02    
  32  0.263953      -1.33198      -373.266       373.266       1830.81       2204.08    
  33  0.857551     -0.153675      -43.0650       43.0650       1969.92       2012.98    
  34  0.950157     -0.511279E-01  -14.3278       14.3278       1908.99       1923.32    
  35  0.866482     -0.143314      -40.1614       40.1614       1861.01       1901.17    
  36  0.904889     -0.999433E-01  -28.0075       28.0075       1839.10       1867.11    
  37  0.297565      -1.21212      -339.677       339.677       1860.39       2200.07    
  38  0.902696     -0.102369      -28.6873       28.6873       2002.47       2031.15    
  39  0.800054     -0.223076      -62.5135       62.5135       1873.15       1935.66    
  40  0.534162     -0.627057      -175.722       175.722       1886.43       2062.15    
  41  0.593018     -0.522530      -146.430       146.430       1877.42       2023.85    
  42  0.682417E-01  -2.68470      -752.343       752.343       1892.11       2644.45    
  43  0.336048      -1.09050      -305.595       305.595       2289.38       2594.98    
  44  0.576540     -0.550710      -154.328       154.328       2290.85       2445.18    
  45  0.217955      -1.52347      -426.927       426.927       1842.02       2268.95    
  46  0.281607      -1.26724      -355.124       355.124       1889.21       2244.33    
  47  0.306631      -1.18211      -331.267       331.267       2435.02       2766.28    
  48  0.676335E-01  -2.69365      -754.852       754.852       2035.22       2790.08    
  49  0.145631      -1.92668      -539.920       539.920       1893.04       2432.96    
  50  0.820952     -0.197291      -55.2876       55.2876       1965.16       2020.44    
  51  0.224137      -1.49550      -419.089       419.089       1707.38       2126.47    
loop,thermsimp(1:2)       44   631.625       714.842    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    129       1756.37          0.88          1.11         21.92          0.17          0.05         24.12
Just calling func    0   0         24.12


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    130       2013.47          0.86          1.11         21.98          0.15          0.05         24.15
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1756.37
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    280.234               151
loop is:       44
neval is:      129
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       44      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    560.467      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    280.234               151
loop is:       45
neval is:      129


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      151
neval,tstepnext:      129     151

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.872614     -0.136261      -38.1850       38.1850       1305.70       1343.88    
   2  0.990306     -0.974175E-02  -2.72997       2.72997       1839.10       1841.83    
   3  0.488656     -0.716096      -200.674       200.674       1868.19       2068.86    
   4  0.865115E-01  -2.44748      -685.866       685.866       1821.56       2507.43    
   5  0.234262      -1.45132      -406.708       406.708       1843.54       2250.25    
   6  0.906541     -0.981186E-01  -27.4961       27.4961       1869.58       1897.07    
   7  0.680454     -0.384995      -107.889       107.889       1861.01       1968.89    
   8  0.575574     -0.552388      -154.798       154.798       1874.21       2029.01    
   9  0.537443E-02  -5.22610      -1464.53       1464.53       1836.91       3301.44    
  10  0.421676     -0.863518      -241.987       241.987       1908.99       2150.98    
  11  0.297588      -1.21204      -339.656       339.656       1868.22       2207.88    
  12  0.119337      -2.12581      -595.723       595.723       1873.15       2468.87    
  13  0.958276     -0.426192E-01  -11.9433       11.9433       1938.43       1950.37    
  14  0.115549      -2.15806      -604.760       604.760       1892.75       2497.51    
  15  0.104220      -2.26125      -633.680       633.680       1932.97       2566.65    
  16  0.719503     -0.329194      -92.2512       92.2512       1973.58       2065.83    
  17  0.875656     -0.132782      -37.2099       37.2099       1969.92       2007.13    
  18  0.578760     -0.546868      -153.251       153.251       1965.16       2118.41    
  19  0.923704     -0.793639E-01  -22.2404       22.2404       1877.42       1899.66    
  20  0.457980     -0.780930      -218.843       218.843       2002.47       2221.31    
  21  0.783173     -0.244401      -68.4895       68.4895       1898.07       1966.56    
  22  0.764479     -0.268561      -75.2598       75.2598       1830.83       1906.09    
  23  0.496891     -0.699384      -195.991       195.991       1881.57       2077.56    
  24  0.554859     -0.589041      -165.069       165.069       1862.04       2027.11    
  25  0.734503E-02  -4.91373      -1376.99       1376.99       1886.43       3263.42    
  26  0.117643      -2.14010      -599.729       599.729       1867.99       2467.72    
  27  0.145440      -1.92799      -540.288       540.288       1944.15       2484.44    
  28  0.375449     -0.979633      -274.526       274.526       1904.43       2178.96    
  29  0.954324E-01  -2.34934      -658.363       658.363       1847.39       2505.76    
  30  0.449085     -0.800543      -224.339       224.339       1804.91       2029.25    
  31  0.354483      -1.03709      -290.629       290.629       1707.38       1998.01    
  32  0.153971      -1.87099      -524.314       524.314       1842.47       2366.78    
  33  0.871598     -0.137427      -38.5116       38.5116       1921.00       1959.51    
  34  0.633061     -0.457188      -128.119       128.119       1860.39       1988.51    
  35  0.947022E-01  -2.35702      -660.516       660.516       1830.81       2491.33    
  36  0.793812     -0.230909      -64.7085       64.7085       1889.21       1953.92    
  37  0.760585     -0.273667      -76.6907       76.6907       1796.12       1872.81    
  38  0.124312      -2.08496      -584.277       584.277       1844.36       2428.64    
  39  0.961605E-03  -6.94691      -1946.76       1946.76       1842.02       3788.78    
  40  0.672529     -0.396710      -111.171       111.171       1864.01       1975.18    
  41  0.749847E-01  -2.59047      -725.937       725.937       1799.18       2525.12    
  42  0.982441     -0.177147E-01  -4.96426       4.96426       1706.19       1711.16    
  43  0.340727      -1.07667      -301.720       301.720       1886.24       2187.96    
  44  0.915043     -0.887846E-01  -24.8804       24.8804       1893.04       1917.92    
  45  0.150614      -1.89303      -530.492       530.492       2290.85       2821.35    
  46  0.892785     -0.113409      -31.7810       31.7810       1776.25       1808.03    
  47  0.844073     -0.169516      -47.5040       47.5040       2289.38       2336.89    
  48  0.469949     -0.755131      -211.613       211.613       1892.11       2103.72    
  49  0.389072     -0.943991      -264.538       264.538       2040.83       2305.37    
  50  0.738049     -0.303745      -85.1196       85.1196       2435.02       2520.14    
  51  0.250173      -1.38560      -388.293       388.293       1756.37       2144.67    
loop,thermsimp(1:2)       45   38.1850       2.72997    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    131       1922.03          0.86          1.12         22.03          0.10          0.05         24.16
Just calling func    0   0         24.17


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1922.03
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    280.234               151
loop is:       45
neval is:      130
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       45      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    560.467      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    280.234               151
loop is:       46
neval is:      130


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      151
neval,tstepnext:      130     151

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.880559E-01  -2.42978      -680.907       680.907       1305.70       1986.60    
   2  0.312747      -1.16236      -325.733       325.733       1706.19       2031.92    
   3  0.317683      -1.14670      -321.344       321.344       1776.25       2097.59    
   4  0.693053     -0.366649      -102.747       102.747       1839.10       1941.85    
   5  0.361881      -1.01644      -284.840       284.840       1796.12       2080.96    
   6  0.127478      -2.05981      -577.228       577.228       1869.58       2446.81    
   7  0.718706     -0.330302      -92.5619       92.5619       1877.42       1969.98    
   8  0.609419E-01  -2.79783      -784.047       784.047       1830.83       2614.87    
   9  0.320798      -1.13695      -318.610       318.610       1893.04       2211.65    
  10  0.343503      -1.06856      -299.446       299.446       1938.43       2237.88    
  11  0.671828     -0.397753      -111.464       111.464       1889.21       2000.67    
  12  0.616702     -0.483369      -135.456       135.456       1921.00       2056.46    
  13  0.806358E-01  -2.51781      -705.576       705.576       1898.07       2603.65    
  14  0.997284     -0.271972E-02 -0.762159      0.762159       1861.01       1861.77    
  15  0.554344     -0.589969      -165.329       165.329       1864.01       2029.34    
  16  0.411057     -0.889023      -249.134       249.134       1860.39       2109.53    
  17  0.846258E-01  -2.46952      -692.042       692.042       1707.38       2399.42    
  18  0.737439     -0.304571      -85.3512       85.3512       1969.92       2055.27    
  19  0.393790     -0.931939      -261.161       261.161       1862.04       2123.20    
  20  0.965947     -0.346467E-01  -9.70917       9.70917       1874.21       1883.92    
  21  0.150166      -1.89601      -531.327       531.327       1804.91       2336.24    
  22  0.212005      -1.55114      -434.683       434.683       1973.58       2408.26    
  23  0.615060     -0.486036      -136.204       136.204       1868.19       2004.39    
  24  0.382142     -0.961962      -269.574       269.574       1881.57       2151.15    
  25  0.249044      -1.39013      -389.561       389.561       1892.11       2281.67    
  26  0.245943      -1.40266      -393.072       393.072       1965.16       2358.23    
  27  0.108882      -2.21749      -621.417       621.417       1756.37       2377.79    
  28  0.199835      -1.61026      -451.250       451.250       1908.99       2360.24    
  29  0.863954     -0.146235      -40.9801       40.9801       1904.43       1945.41    
  30  0.392842     -0.934347      -261.835       261.835       1886.24       2148.08    
  31  0.770596     -0.260592      -73.0265       73.0265       1868.22       1941.25    
  32  0.149868      -1.89800      -531.884       531.884       2002.47       2534.35    
  33  0.234154      -1.45178      -406.836       406.836       1843.54       2250.38    
  34  0.611512     -0.491821      -137.825       137.825       2040.83       2178.65    
  35  0.518093E-01  -2.96019      -829.544       829.544       2289.38       3118.93    
  36  0.567953     -0.565716      -158.533       158.533       1842.47       2001.00    
  37  0.190847      -1.65628      -464.147       464.147       1844.36       2308.51    
  38  0.104561      -2.25798      -632.763       632.763       1867.99       2500.75    
  39  0.135276      -2.00044      -560.590       560.590       1873.15       2433.74    
  40  0.262364      -1.33802      -374.959       374.959       1944.15       2319.11    
  41  0.463951     -0.767976      -215.213       215.213       1830.81       2046.03    
  42  0.419672     -0.868282      -243.322       243.322       1892.75       2136.07    
  43  0.897011     -0.108687      -30.4577       30.4577       1847.39       1877.85    
  44  0.818933     -0.199754      -55.9777       55.9777       1821.56       1877.54    
  45  0.136906      -1.98846      -557.235       557.235       2435.02       2992.25    
  46  0.561722     -0.576748      -161.624       161.624       1799.18       1960.81    
  47  0.991681     -0.835368E-02  -2.34098       2.34098       1932.97       1935.31    
  48  0.653388     -0.425585      -119.263       119.263       2290.85       2410.12    
  49  0.578557     -0.547219      -153.349       153.349       1886.43       2039.78    
  50  0.784121     -0.243191      -68.1504       68.1504       1836.91       1905.06    
  51  0.827307     -0.189579      -53.1265       53.1265       1922.03       1975.16    
loop,thermsimp(1:2)       46   680.907       325.733    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    132       1848.50          0.87          1.12         21.90          0.19          0.05         24.12
Just calling func    0   0         24.13


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    133       2786.70          0.86          1.12         21.98          0.17          0.05         24.18
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1848.50
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    280.234               151
loop is:       46
neval is:      132
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       46      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    560.467      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    280.234               151
loop is:       47
neval is:      132


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      151
neval,tstepnext:      132     151

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.419083E-01  -3.17227      -888.977       888.977       1861.01       2749.98    
   2  0.581082     -0.542864      -152.129       152.129       1821.56       1973.69    
   3  0.690143     -0.370857      -103.927       103.927       1847.39       1951.32    
   4  0.958690     -0.421877E-01  -11.8224       11.8224       1874.21       1886.03    
   5  0.947492     -0.539367E-01  -15.1149       15.1149       1836.91       1852.02    
   6  0.253816E-01  -3.67373      -1029.50       1029.50       1932.97       2962.47    
   7  0.811950     -0.208316      -58.3772       58.3772       1868.22       1926.60    
   8  0.448512     -0.801821      -224.697       224.697       1839.10       2063.80    
   9  0.625244     -0.469613      -131.602       131.602       1904.43       2036.03    
  10  0.557627     -0.584065      -163.675       163.675       1799.18       1962.86    
  11  0.762657     -0.270947      -75.9286       75.9286       1877.42       1953.34    
  12  0.579328     -0.545887      -152.976       152.976       1922.03       2075.00    
  13  0.168395      -1.78144      -499.221       499.221       1305.70       1804.92    
  14  0.993282     -0.674111E-02  -1.88909       1.88909       1889.21       1891.10    
  15  0.573458     -0.556070      -155.830       155.830       1842.47       1998.30    
  16  0.900456     -0.104854      -29.3835       29.3835       1868.19       1897.57    
  17  0.961937     -0.388068E-01  -10.8750       10.8750       1864.01       1874.88    
  18  0.685702     -0.377312      -105.736       105.736       1706.19       1811.93    
  19  0.335644      -1.09171      -305.933       305.933       1886.43       2192.36    
  20  0.726392     -0.319666      -89.5811       89.5811       1830.81       1920.40    
  21  0.523515     -0.647189      -181.364       181.364       1969.92       2151.28    
  22  0.877914     -0.130206      -36.4882       36.4882       1921.00       1957.49    
  23  0.893563     -0.112539      -31.5372       31.5372       1796.12       1827.65    
  24  0.829449     -0.186994      -52.4021       52.4021       1776.25       1828.65    
  25  0.454457     -0.788653      -221.007       221.007       1860.39       2081.40    
  26  0.261407      -1.34168      -375.983       375.983       1862.04       2238.02    
  27  0.144225      -1.93638      -542.640       542.640       1892.75       2435.39    
  28  0.963744     -0.369299E-01  -10.3490       10.3490       1886.24       1896.59    
  29  0.267843      -1.31735      -369.167       369.167       1881.57       2250.74    
  30  0.251943E-01  -3.68114      -1031.58       1031.58       2040.83       3072.41    
  31  0.321532      -1.13466      -317.969       317.969       1893.04       2211.01    
  32  0.440903     -0.818930      -229.492       229.492       1938.43       2167.92    
  33  0.214416      -1.53984      -431.515       431.515       1843.54       2275.05    
  34  0.212185      -1.55030      -434.446       434.446       1892.11       2326.55    
  35  0.948253E-01  -2.35572      -660.152       660.152       1844.36       2504.51    
  36  0.507627     -0.678008      -190.001       190.001       1944.15       2134.15    
  37  0.415074     -0.879299      -246.409       246.409       1804.91       2051.32    
  38  0.768069     -0.263876      -73.9470       73.9470       1965.16       2039.10    
  39  0.462999E-01  -3.07261      -861.050       861.050       1908.99       2770.04    
  40  0.835390     -0.179856      -50.4019       50.4019       1756.37       1806.78    
  41  0.678734     -0.387526      -108.598       108.598       1707.38       1815.98    
  42  0.363569      -1.01179      -283.536       283.536       1973.58       2257.12    
  43  0.677161     -0.389846      -109.248       109.248       2290.85       2400.10    
  44  0.506668     -0.679899      -190.531       190.531       1873.15       2063.68    
  45  0.875658     -0.132779      -37.2092       37.2092       1869.58       1906.79    
  46  0.924863     -0.781102E-01  -21.8891       21.8891       1867.99       1889.88    
  47  0.794570E-01  -2.53254      -709.703       709.703       2002.47       2712.17    
  48  0.449212     -0.800261      -224.260       224.260       1898.07       2122.33    
  49  0.658987     -0.417051      -116.872       116.872       1830.83       1947.70    
  50  0.674357     -0.393995      -110.411       110.411       2435.02       2545.43    
  51  0.436334     -0.829348      -232.411       232.411       1848.50       2080.91    
loop,thermsimp(1:2)       47   888.977       152.129    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    134       1975.54          0.87          1.12         21.99          0.24          0.05         24.27
Just calling func    0   0         24.27


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1975.54
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    280.234               151
loop is:       47
neval is:      133
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       47      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    560.467      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    280.234               151
loop is:       48
neval is:      133


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      151
neval,tstepnext:      133     151

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.566816     -0.567720      -159.094       159.094       1305.70       1464.79    
   2  0.216137      -1.53184      -429.273       429.273       1756.37       2185.65    
   3  0.476425     -0.741444      -207.778       207.778       1706.19       1913.97    
   4  0.184047      -1.69256      -474.314       474.314       1707.38       2181.69    
   5  0.722630     -0.324858      -91.0363       91.0363       1796.12       1887.15    
   6  0.887750     -0.119065      -33.3660       33.3660       1776.25       1809.61    
   7  0.236344      -1.44247      -404.228       404.228       1836.91       2241.14    
   8  0.798055     -0.225578      -63.2144       63.2144       1864.01       1927.22    
   9  0.425454     -0.854597      -239.487       239.487       1874.21       2113.69    
  10  0.605701     -0.501368      -140.500       140.500       1867.99       2008.49    
  11  0.742456     -0.297792      -83.4514       83.4514       1889.21       1972.66    
  12  0.378462E-01  -3.27423      -917.548       917.548       1886.24       2803.79    
  13  0.341910      -1.07321      -300.749       300.749       1868.19       2168.94    
  14  0.794971E-01  -2.53203      -709.561       709.561       1869.58       2579.14    
  15  0.586423     -0.533715      -149.565       149.565       1830.81       1980.38    
  16  0.990523     -0.952170E-02  -2.66830       2.66830       1868.22       1870.89    
  17  0.348475      -1.05419      -295.419       295.419       1830.83       2126.24    
  18  0.998034     -0.196755E-02 -0.551373      0.551373       1847.39       1847.94    
  19  0.616072     -0.484391      -135.743       135.743       1877.42       2013.16    
  20  0.427239     -0.850411      -238.314       238.314       1921.00       2159.32    
  21  0.598160     -0.513898      -144.011       144.011       1799.18       1943.19    
  22  0.642831     -0.441873      -123.828       123.828       1821.56       1945.39    
  23  0.392766     -0.934541      -261.890       261.890       1842.47       2104.36    
  24  0.738407     -0.303260      -84.9837       84.9837       1904.43       1989.41    
  25  0.334341      -1.09559      -307.022       307.022       1965.16       2272.18    
  26  0.997912     -0.208996E-02 -0.585676      0.585676       1804.91       1805.50    
  27  0.492305E-01  -3.01124      -843.852       843.852       1873.15       2717.00    
  28  0.304734      -1.18832      -333.006       333.006       1839.10       2172.11    
  29  0.159886      -1.83330      -513.751       513.751       1922.03       2435.78    
  30  0.991331     -0.870666E-02  -2.43990       2.43990       1848.50       1850.94    
  31  0.735164     -0.307662      -86.2173       86.2173       1860.39       1946.61    
  32  0.279948      -1.27315      -356.780       356.780       1898.07       2254.85    
  33  0.457260     -0.782502      -219.284       219.284       1944.15       2163.43    
  34  0.678170     -0.388358      -108.831       108.831       1969.92       2078.75    
  35  0.689603     -0.371639      -104.146       104.146       1938.43       2042.58    
  36  0.468470     -0.758283      -212.496       212.496       1886.43       2098.92    
  37  0.937429     -0.646141E-01  -18.1071       18.1071       1893.04       1911.15    
  38  0.115915      -2.15490      -603.875       603.875       1862.04       2465.91    
  39  0.125789      -2.07315      -580.965       580.965       1881.57       2462.54    
  40  0.137562      -1.98368      -555.895       555.895       1973.58       2529.47    
  41  0.273901      -1.29499      -362.899       362.899       1843.54       2206.44    
  42  0.934963     -0.672484E-01  -18.8453       18.8453       1892.11       1910.95    
  43  0.450296     -0.797850      -223.584       223.584       2290.85       2514.44    
  44  0.681645     -0.383246      -107.398       107.398       1892.75       2000.15    
  45  0.282914E-01  -3.56520      -999.088       999.088       1844.36       2843.45    
  46  0.962226     -0.385062E-01  -10.7907       10.7907       2435.02       2445.81    
  47  0.771412     -0.259533      -72.7298       72.7298       2002.47       2075.20    
  48  0.778208     -0.250761      -70.2718       70.2718       1861.01       1931.28    
  49  0.945686     -0.558450E-01  -15.6496       15.6496       1908.99       1924.64    
  50  0.648669     -0.432833      -121.294       121.294       1932.97       2054.27    
  51  0.214283      -1.54046      -431.688       431.688       1975.54       2407.22    
loop,thermsimp(1:2)       48   159.094       429.273    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    135       1755.02          0.88          1.11         22.29          0.19          0.05         24.52
Just calling func    0   0         24.52


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1755.02
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    280.234               151
loop is:       48
neval is:      134
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       48      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    560.467      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    280.234               151
loop is:       49
neval is:      134


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      151
neval,tstepnext:      134     151

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.180970      -1.70942      -479.038       479.038       1305.70       1784.73    
   2  0.335083      -1.09338      -306.401       306.401       1804.91       2111.31    
   3  0.585160     -0.535871      -150.169       150.169       1776.25       1926.42    
   4  0.445729     -0.808044      -226.441       226.441       1847.39       2073.83    
   5  0.963605     -0.370741E-01  -10.3894       10.3894       1848.50       1858.89    
   6  0.538074     -0.619758      -173.677       173.677       1868.22       2041.90    
   7  0.971443     -0.289729E-01  -8.11919       8.11919       1796.12       1804.23    
   8  0.817136     -0.201950      -56.5932       56.5932       1892.11       1948.70    
   9  0.216943      -1.52812      -428.231       428.231       1893.04       2321.28    
  10  0.572311     -0.558074      -156.391       156.391       1706.19       1862.58    
  11  0.511761     -0.669897      -187.728       187.728       1908.99       2096.72    
  12  0.331920E-01  -3.40545      -954.321       954.321       1864.01       2818.33    
  13  0.662680     -0.411462      -115.306       115.306       1861.01       1976.31    
  14  0.578679     -0.547007      -153.290       153.290       1799.18       1952.47    
  15  0.473979     -0.746592      -209.220       209.220       1821.56       2030.78    
  16  0.243750      -1.41161      -395.581       395.581       1860.39       2255.97    
  17  0.784227     -0.243057      -68.1129       68.1129       1889.21       1957.32    
  18  0.215065      -1.53682      -430.667       430.667       1830.81       2261.48    
  19  0.813272     -0.206689      -57.9213       57.9213       1904.43       1962.35    
  20  0.877336     -0.130865      -36.6728       36.6728       1892.75       1929.42    
  21  0.911070     -0.931357E-01  -26.0998       26.0998       1867.99       1894.09    
  22  0.424500     -0.856844      -240.117       240.117       1877.42       2117.53    
  23  0.122508      -2.09958      -588.373       588.373       1938.43       2526.80    
  24  0.173199      -1.75331      -491.338       491.338       1932.97       2424.31    
  25  0.243010      -1.41465      -396.434       396.434       2002.47       2398.90    
  26  0.618804     -0.479966      -134.503       134.503       1969.92       2104.42    
  27  0.365303      -1.00703      -282.203       282.203       1886.43       2168.63    
  28  0.178054      -1.72567      -483.591       483.591       1842.47       2326.06    
  29  0.416122     -0.876776      -245.702       245.702       1874.21       2119.91    
  30  0.789287     -0.236625      -66.3104       66.3104       1830.83       1897.14    
  31  0.786736     -0.239863      -67.2177       67.2177       1921.00       1988.22    
  32  0.295880      -1.21780      -341.269       341.269       1944.15       2285.42    
  33  0.418649     -0.870722      -244.006       244.006       1868.19       2112.19    
  34  0.706992     -0.346736      -97.1671       97.1671       1839.10       1936.27    
  35  0.281863      -1.26633      -354.869       354.869       1707.38       2062.25    
  36  0.357290      -1.02921      -288.419       288.419       1756.37       2044.79    
  37  0.174180      -1.74767      -489.755       489.755       1843.54       2333.29    
  38  0.190924      -1.65588      -464.034       464.034       1836.91       2300.94    
  39  0.630369     -0.461449      -129.314       129.314       1898.07       2027.38    
  40  0.252261      -1.37729      -385.964       385.964       1965.16       2351.12    
  41  0.359213      -1.02384      -286.915       286.915       1975.54       2262.45    
  42  0.740344     -0.300640      -84.2496       84.2496       1922.03       2006.28    
  43  0.283211      -1.26156      -353.533       353.533       2435.02       2788.55    
  44  0.965119     -0.355039E-01  -9.94938       9.94938       1881.57       1891.52    
  45  0.389600     -0.942634      -264.158       264.158       1862.04       2126.20    
  46  0.598383     -0.513525      -143.907       143.907       2290.85       2434.76    
  47  0.631795     -0.459190      -128.681       128.681       1973.58       2102.26    
  48  0.997460     -0.254363E-02 -0.712812      0.712812       1869.58       1870.29    
  49  0.192532      -1.64749      -461.684       461.684       1873.15       2334.83    
  50  0.769348     -0.262212      -73.4805       73.4805       1886.24       1959.72    
  51  0.740745     -0.300099      -84.0978       84.0978       1755.02       1839.11    
loop,thermsimp(1:2)       49   479.038       306.401    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    136       1835.24          0.88          1.12         21.91          0.17          0.05         24.14
Just calling func    0   0         24.14


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1835.24
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    280.234               151
loop is:       49
neval is:      135
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       49      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    560.467      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    280.234               151
loop is:       50
neval is:      135


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      151
neval,tstepnext:      135     151

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.317228E-01  -3.45072      -967.008       967.008       1305.70       2272.70    
   2  0.601445     -0.508421      -142.477       142.477       1796.12       1938.59    
   3  0.651191     -0.428952      -120.207       120.207       1755.02       1875.22    
   4  0.187303      -1.67503      -469.399       469.399       1848.50       2317.90    
   5  0.664603     -0.408566      -114.494       114.494       1706.19       1820.68    
   6  0.945236     -0.563208E-01  -15.7830       15.7830       1869.58       1885.36    
   7  0.865870     -0.144020      -40.3592       40.3592       1881.57       1921.93    
   8  0.674117     -0.394351      -110.511       110.511       1867.99       1978.50    
   9  0.959689E-01  -2.34373      -656.792       656.792       1830.83       2487.62    
  10  0.663337     -0.410472      -115.028       115.028       1776.25       1891.28    
  11  0.384854     -0.954891      -267.593       267.593       1892.75       2160.34    
  12  0.892338     -0.113910      -31.9215       31.9215       1839.10       1871.02    
  13  0.470837     -0.753243      -211.084       211.084       1892.11       2103.19    
  14  0.262618      -1.33706      -374.688       374.688       1799.18       2173.87    
  15  0.877143     -0.131085      -36.7344       36.7344       1889.21       1925.94    
  16  0.262102      -1.33902      -375.239       375.239       1886.24       2261.48    
  17  0.306130      -1.18375      -331.726       331.726       1904.43       2236.16    
  18  0.251844      -1.37895      -386.428       386.428       1861.01       2247.43    
  19  0.371147     -0.991157      -277.756       277.756       1921.00       2198.76    
  20  0.244393E-01  -3.71156      -1040.11       1040.11       1922.03       2962.13    
  21  0.550903     -0.596197      -167.074       167.074       1898.07       2065.15    
  22  0.509078     -0.675154      -189.201       189.201       1821.56       2010.77    
  23  0.741178     -0.299515      -83.9342       83.9342       1868.22       1952.16    
  24  0.585965     -0.534496      -149.784       149.784       1756.37       1906.16    
  25  0.602491     -0.506683      -141.990       141.990       1707.38       1849.37    
  26  0.532366     -0.630423      -176.666       176.666       1847.39       2024.06    
  27  0.264247      -1.33087      -372.955       372.955       1908.99       2281.94    
  28  0.468512     -0.758194      -212.472       212.472       1973.58       2186.05    
  29  0.338122      -1.08435      -303.871       303.871       1969.92       2273.79    
  30  0.815455     -0.204008      -57.1701       57.1701       1804.91       1862.08    
  31  0.126007      -2.07142      -580.482       580.482       1868.19       2448.67    
  32  0.391435     -0.937937      -262.842       262.842       1877.42       2140.26    
  33  0.477179     -0.739864      -207.335       207.335       1874.21       2081.54    
  34  0.926058     -0.768180E-01  -21.5270       21.5270       1862.04       1883.57    
  35  0.305992E-01  -3.48678      -977.114       977.114       1886.43       2863.54    
  36  0.142122      -1.95107      -546.756       546.756       1860.39       2407.15    
  37  0.934627E-01  -2.37019      -664.208       664.208       1830.81       2495.02    
  38  0.933240     -0.690924E-01  -19.3620       19.3620       1975.54       1994.90    
  39  0.551354     -0.595378      -166.845       166.845       1944.15       2110.99    
  40  0.167646      -1.78590      -500.470       500.470       1836.91       2337.38    
  41  0.657770     -0.418900      -117.390       117.390       1893.04       2010.43    
  42  0.937012     -0.650587E-01  -18.2316       18.2316       1842.47       1860.70    
  43  0.435130     -0.832109      -233.185       233.185       1843.54       2076.72    
  44  0.346278E-01  -3.36310      -942.453       942.453       1873.15       2815.60    
  45  0.529273     -0.636251      -178.299       178.299       1965.16       2143.46    
  46  0.543808     -0.609159      -170.707       170.707       2002.47       2173.17    
  47  0.476993     -0.740254      -207.444       207.444       1932.97       2140.42    
  48  0.602365     -0.506891      -142.048       142.048       2290.85       2432.90    
  49  0.429141     -0.845970      -237.069       237.069       1938.43       2175.50    
  50  0.161300E-01  -4.12707      -1156.55       1156.55       2435.02       3591.56    
  51  0.806405     -0.215169      -60.2977       60.2977       1835.24       1895.54    
loop,thermsimp(1:2)       50   967.008       142.477    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    137       1779.82          0.87          1.12         21.88          0.21          0.05         24.13
Just calling func    0   0         24.13


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    138       3288.17          0.87          1.11         21.92          0.21          0.05         24.16
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1779.82
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    280.234               151
loop is:       50
neval is:      137
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       50      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    560.467      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    280.234               151
loop is:       51
neval is:      137


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      151
neval,tstepnext:      137     151

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.929295     -0.733287E-01  -20.5492       20.5492       1706.19       1726.74    
   2  0.669511     -0.401208      -112.432       112.432       1707.38       1819.81    
   3  0.863337E-01  -2.44954      -686.442       686.442       1842.47       2528.91    
   4  0.279945      -1.27316      -356.783       356.783       1804.91       2161.69    
   5  0.832640     -0.183154      -51.3260       51.3260       1839.10       1890.43    
   6  0.848933     -0.163775      -45.8954       45.8954       1755.02       1800.91    
   7  0.141794      -1.95338      -547.404       547.404       1862.04       2409.44    
   8  0.208764      -1.56655      -439.001       439.001       1869.58       2308.58    
   9  0.755787     -0.279996      -78.4643       78.4643       1776.25       1854.71    
  10  0.177416      -1.72926      -484.597       484.597       1835.24       2319.84    
  11  0.405148     -0.903503      -253.192       253.192       1756.37       2009.57    
  12  0.640380     -0.445693      -124.898       124.898       1881.57       2006.47    
  13  0.548060     -0.601370      -168.524       168.524       1889.21       2057.73    
  14  0.773287     -0.257105      -72.0494       72.0494       1796.12       1868.16    
  15  0.180768      -1.71054      -479.351       479.351       1868.22       2347.58    
  16  0.135846      -1.99624      -559.413       559.413       1867.99       2427.40    
  17  0.601016     -0.509133      -142.676       142.676       1975.54       2118.21    
  18  0.302263      -1.19646      -335.288       335.288       1893.04       2228.33    
  19  0.189428      -1.66374      -466.237       466.237       1821.56       2287.80    
  20  0.737158     -0.304953      -85.4581       85.4581       1847.39       1932.85    
  21  0.790680     -0.234862      -65.8162       65.8162       1898.07       1963.89    
  22  0.177192E-01  -4.03310      -1130.21       1130.21       1843.54       2973.75    
  23  0.236042      -1.44375      -404.586       404.586       1874.21       2278.79    
  24  0.459229     -0.778206      -218.080       218.080       1892.11       2110.18    
  25  0.586479E-01  -2.83620      -794.800       794.800       1944.15       2738.95    
  26  0.263766      -1.33269      -373.465       373.465       1877.42       2250.88    
  27  0.942550     -0.591663E-01  -16.5804       16.5804       1932.97       1949.55    
  28  0.106855      -2.23628      -626.681       626.681       1965.16       2591.84    
  29  0.710700     -0.341505      -95.7011       95.7011       1892.75       1988.45    
  30  0.207109E-01  -3.87709      -1086.49       1086.49       2002.47       3088.96    
  31  0.901203     -0.104025      -29.1513       29.1513       1799.18       1828.33    
  32  0.949751     -0.515555E-01  -14.4476       14.4476       1938.43       1952.88    
  33  0.343487      -1.06861      -299.460       299.460       1973.58       2273.04    
  34  0.875043     -0.133483      -37.4064       37.4064       1921.00       1958.41    
  35  0.122447E-01  -4.40266      -1233.77       1233.77       1904.43       3138.20    
  36  0.820650     -0.197659      -55.3907       55.3907       1861.01       1916.40    
  37  0.748866     -0.289195      -81.0422       81.0422       1886.24       1967.28    
  38  0.594525     -0.519992      -145.719       145.719       1305.70       1451.41    
  39  0.927863E-01  -2.37746      -666.243       666.243       1969.92       2636.16    
  40  0.631335     -0.459918      -128.885       128.885       1908.99       2037.87    
  41  0.282620      -1.26365      -354.118       354.118       1848.50       2202.61    
  42  0.707811     -0.345578      -96.8425       96.8425       1836.91       1933.75    
  43  0.930463     -0.720730E-01  -20.1973       20.1973       1860.39       1880.59    
  44  0.988563     -0.115032E-01  -3.22360       3.22360       2290.85       2294.08    
  45  0.869439     -0.139907      -39.2067       39.2067       1868.19       1907.39    
  46  0.693921     -0.365397      -102.397       102.397       1830.83       1933.22    
  47  0.731753     -0.312312      -87.5204       87.5204       1830.81       1918.33    
  48  0.848712     -0.164035      -45.9682       45.9682       1873.15       1919.11    
  49  0.174447      -1.74613      -489.326       489.326       1886.43       2375.75    
  50  0.313212      -1.16087      -325.316       325.316       1922.03       2247.35    
  51  0.880789     -0.126937      -35.5720       35.5720       1779.82       1815.39    
loop,thermsimp(1:2)       51   20.5492       112.432    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    139       1732.92          0.88          1.11         21.93          0.23          0.05         24.19
Just calling func    0   0         24.19


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1732.92
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    280.234               151
loop is:       51
neval is:      138
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       51      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    560.467      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    280.234               151
loop is:       52
neval is:      138


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      151
neval,tstepnext:      138     151

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.658032     -0.418502      -117.278       117.278       1305.70       1422.97    
   2  0.385391     -0.953496      -267.202       267.202       1706.19       1973.39    
   3  0.323679      -1.12800      -316.104       316.104       1755.02       2071.12    
   4  0.402516E-01  -3.21260      -900.280       900.280       1779.82       2680.10    
   5  0.866022     -0.143846      -40.3104       40.3104       1707.38       1747.69    
   6  0.560147     -0.579555      -162.411       162.411       1799.18       1961.59    
   7  0.389098     -0.943925      -264.520       264.520       1776.25       2040.77    
   8  0.470755     -0.753417      -211.133       211.133       1796.12       2007.25    
   9  0.794299     -0.230295      -64.5364       64.5364       1860.39       1924.93    
  10  0.897132     -0.108553      -30.4202       30.4202       1839.10       1869.52    
  11  0.359474      -1.02311      -286.711       286.711       1868.19       2154.90    
  12  0.604694     -0.503032      -140.967       140.967       1861.01       2001.97    
  13  0.101554      -2.28717      -640.941       640.941       1830.81       2471.76    
  14  0.274480      -1.29288      -362.307       362.307       1873.15       2235.45    
  15  0.916086     -0.876445E-01  -24.5609       24.5609       1847.39       1871.95    
  16  0.820070E-01  -2.50095      -700.851       700.851       1830.83       2531.68    
  17  0.975902     -0.243929E-01  -6.83572       6.83572       1836.91       1843.75    
  18  0.131665      -2.02750      -568.173       568.173       1932.97       2501.14    
  19  0.751313     -0.285933      -80.1281       80.1281       1938.43       2018.56    
  20  0.775324     -0.254475      -71.3124       71.3124       1921.00       1992.31    
  21  0.237000      -1.43969      -403.451       403.451       1898.07       2301.52    
  22  0.113641      -2.17471      -609.426       609.426       1886.24       2495.67    
  23  0.762281     -0.271440      -76.0666       76.0666       1892.75       1968.81    
  24  0.783730     -0.243690      -68.2902       68.2902       1881.57       1949.86    
  25  0.492891     -0.707468      -198.256       198.256       1756.37       1954.63    
  26  0.471904     -0.750980      -210.450       210.450       1908.99       2119.44    
  27  0.855781     -0.155740      -43.6437       43.6437       1889.21       1932.85    
  28  0.636473     -0.451814      -126.613       126.613       1892.11       2018.72    
  29  0.433340     -0.836232      -234.340       234.340       1975.54       2209.88    
  30  0.482236     -0.729321      -204.380       204.380       1804.91       2009.29    
  31  0.855143E-01  -2.45907      -689.115       689.115       1848.50       2537.61    
  32  0.916579     -0.871071E-01  -24.4103       24.4103       1893.04       1917.45    
  33  0.232519      -1.45878      -408.800       408.800       1922.03       2330.83    
  34  0.283977      -1.25886      -352.776       352.776       1877.42       2230.19    
  35  0.401228E-01  -3.21581      -901.179       901.179       1973.58       2874.76    
  36  0.235231      -1.44719      -405.551       405.551       1874.21       2279.76    
  37  0.233426      -1.45489      -407.709       407.709       1821.56       2229.27    
  38  0.903594     -0.101376      -28.4089       28.4089       2290.85       2319.26    
  39  0.857571     -0.153651      -43.0582       43.0582       1869.58       1912.64    
  40  0.444085     -0.811739      -227.477       227.477       1835.24       2062.72    
  41  0.151055      -1.89011      -529.673       529.673       1868.22       2397.90    
  42  0.745694     -0.293440      -82.2317       82.2317       1886.43       1968.66    
  43  0.470647E-01  -3.05623      -856.459       856.459       1862.04       2718.50    
  44  0.344459      -1.06578      -298.668       298.668       1867.99       2166.66    
  45  0.592738     -0.523004      -146.563       146.563       1842.47       1989.03    
  46  0.754292     -0.281975      -79.0189       79.0189       1965.16       2044.18    
  47  0.162950      -1.81431      -508.432       508.432       1969.92       2478.35    
  48  0.939100     -0.628333E-01  -17.6080       17.6080       1944.15       1961.76    
  49  0.966845     -0.337175E-01  -9.44879       9.44879       1843.54       1852.99    
  50  0.287323      -1.24715      -349.493       349.493       2002.47       2351.96    
  51  0.835081     -0.180227      -50.5056       50.5056       1732.92       1783.43    
loop,thermsimp(1:2)       52   117.278       267.202    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    140       1852.37          0.86          1.12         22.04          0.23          0.05         24.30
Just calling func    0   0         24.30


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1852.37
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    280.234               151
loop is:       52
neval is:      139
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       52      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    560.467      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    280.234               151
loop is:       53
neval is:      139


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      151
neval,tstepnext:      139     151

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.581749     -0.541717      -151.807       151.807       1305.70       1457.50    
   2  0.307993      -1.17768      -330.025       330.025       1707.38       2037.40    
   3  0.551684     -0.594779      -166.677       166.677       1732.92       1899.60    
   4  0.969976     -0.304835E-01  -8.54251       8.54251       1836.91       1845.45    
   5  0.401714     -0.912015      -255.577       255.577       1843.54       2099.12    
   6  0.336211      -1.09002      -305.459       305.459       1839.10       2144.56    
   7  0.649191     -0.432028      -121.069       121.069       1847.39       1968.46    
   8  0.426986     -0.851005      -238.480       238.480       1869.58       2108.06    
   9  0.479997     -0.733976      -205.685       205.685       1893.04       2098.73    
  10  0.441527     -0.817516      -229.096       229.096       1860.39       2089.49    
  11  0.218988      -1.51874      -425.602       425.602       1889.21       2314.81    
  12  0.935549     -0.666221E-01  -18.6698       18.6698       1881.57       1900.24    
  13  0.159996      -1.83261      -513.559       513.559       1756.37       2269.93    
  14  0.486870     -0.719759      -201.701       201.701       1799.18       2000.88    
  15  0.835520     -0.179701      -50.3582       50.3582       1944.15       1994.51    
  16  0.643759     -0.440431      -123.424       123.424       1886.43       2009.85    
  17  0.177188      -1.73054      -484.957       484.957       1892.75       2377.70    
  18  0.408356     -0.895617      -250.982       250.982       1706.19       1957.17    
  19  0.463768     -0.768371      -215.324       215.324       1842.47       2057.79    
  20  0.616820     -0.483178      -135.403       135.403       1921.00       2056.41    
  21  0.377083     -0.975289      -273.309       273.309       1861.01       2134.31    
  22  0.278016      -1.28008      -358.721       358.721       1796.12       2154.84    
  23  0.746435     -0.292446      -81.9533       81.9533       1804.91       1886.86    
  24  0.872234     -0.136697      -38.3071       38.3071       1938.43       1976.74    
  25  0.887073E-01  -2.42241      -678.842       678.842       1892.11       2570.95    
  26  0.124913      -2.08014      -582.925       582.925       1776.25       2359.17    
  27  0.918160     -0.853835E-01  -23.9273       23.9273       1965.16       1989.08    
  28  0.924603     -0.783912E-01  -21.9679       21.9679       1835.24       1857.21    
  29  0.863214     -0.147092      -41.2203       41.2203       1755.02       1796.24    
  30  0.823499E-02  -4.79936      -1344.94       1344.94       1908.99       3253.93    
  31  0.548113     -0.601275      -168.497       168.497       1868.19       2036.68    
  32  0.800553     -0.222452      -62.3385       62.3385       1867.99       1930.33    
  33  0.180829      -1.71020      -479.256       479.256       1975.54       2454.79    
  34  0.968975E-01  -2.33410      -654.094       654.094       1821.56       2475.66    
  35  0.749847     -0.287886      -80.6755       80.6755       1877.42       1958.09    
  36  0.902028     -0.103110      -28.8949       28.8949       1873.15       1902.04    
  37  0.312083      -1.16449      -326.328       326.328       1874.21       2200.54    
  38  0.472691     -0.749313      -209.983       209.983       1898.07       2108.05    
  39  0.970346     -0.301026E-01  -8.43576       8.43576       2290.85       2299.29    
  40  0.485853     -0.721850      -202.287       202.287       1922.03       2124.32    
  41  0.604658     -0.503092      -140.983       140.983       2002.47       2143.45    
  42  0.172238      -1.75888      -492.898       492.898       1868.22       2361.12    
  43  0.359079E-01  -3.32680      -932.281       932.281       1830.81       2763.10    
  44  0.464923     -0.765884      -214.627       214.627       1969.92       2184.54    
  45  0.293512      -1.22584      -343.521       343.521       1886.24       2229.76    
  46  0.572788     -0.557239      -156.157       156.157       1932.97       2089.13    
  47  0.931713     -0.707300E-01  -19.8209       19.8209       1830.83       1850.65    
  48  0.983012     -0.171340E-01  -4.80153       4.80153       1848.50       1853.30    
  49  0.572194     -0.558278      -156.448       156.448       1779.82       1936.27    
  50  0.272189      -1.30126      -364.657       364.657       1862.04       2226.70    
  51  0.521081     -0.651849      -182.670       182.670       1852.37       2035.04    
loop,thermsimp(1:2)       53   151.807       330.025    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    141       1896.60          0.86          1.12         21.89          0.23          0.05         24.15
Just calling func    0   0         24.15


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  140    1896.6        1.161     -2.042      2.996     -102.6     0.8890    
                      0.8873      1.254     -99.70      3.500     0.2359    

                       2.467     -1.976      1.540      7000.      7000.    

                      -1.974      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -6.113     -3.610     -8.246      6.799    

                      -14.00     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.3003E-01 0.2558    -0.2332E-01-0.1466    

                     -0.2486    -0.1214     0.1855     0.7010E-01 0.8774E-01



                     -0.4603    -0.5094      0.000     0.8914E-01-0.3169E-01

                     -0.1249E-01 0.1408    -0.7116    -0.8996E-01 0.2927    

                      0.5394E-01 0.2468E-01-0.5842     -1.206      7000.    



                     -0.2390    -0.6590     -2.142     -1.982    -0.3807    

                     -0.3252      9.208      8.751    -0.1672E+05 -6.000    

                     -0.4585     -2.304      9.385      8.819    -0.1969E+05



                      -6.000     0.6618    -0.2921      8.861      9.109    

                     -0.1944E+05 -6.000    -0.5717    -0.5560      9.107    

                       8.770    -0.1891E+05 -6.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1896.60
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    280.234               151
loop is:       53
neval is:      140
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       53      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    560.467      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    280.234               151
loop is:       54
neval is:      140


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      151
neval,tstepnext:      140     151

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.565968     -0.569218      -159.514       159.514       1305.70       1465.21    
   2  0.698829     -0.358349      -100.421       100.421       1755.02       1855.44    
   3  0.550231     -0.597418      -167.417       167.417       1836.91       2004.33    
   4  0.844966     -0.168459      -47.2078       47.2078       1830.83       1878.03    
   5  0.139804      -1.96751      -551.363       551.363       1848.50       2399.86    
   6  0.119451      -2.12485      -595.454       595.454       1835.24       2430.70    
   7  0.474112     -0.746312      -209.142       209.142       1804.91       2014.05    
   8  0.293024      -1.22750      -343.987       343.987       1732.92       2076.91    
   9  0.760137     -0.274256      -76.8558       76.8558       1881.57       1958.43    
  10  0.216376      -1.53074      -428.964       428.964       1873.15       2302.11    
  11  0.837069     -0.177849      -49.8392       49.8392       1867.99       1917.83    
  12  0.969258     -0.312245E-01  -8.75017       8.75017       1779.82       1788.57    
  13  0.335918      -1.09089      -305.704       305.704       1706.19       2011.89    
  14  0.966643     -0.339265E-01  -9.50736       9.50736       1877.42       1886.92    
  15  0.723887     -0.323119      -90.5489       90.5489       1847.39       1937.94    
  16  0.459929E-01  -3.07927      -862.915       862.915       1938.43       2801.35    
  17  0.536724     -0.622271      -174.381       174.381       1965.16       2139.54    
  18  0.432574     -0.838001      -234.836       234.836       1944.15       2178.98    
  19  0.160308      -1.83066      -513.012       513.012       1799.18       2312.19    
  20  0.885158     -0.121989      -34.1854       34.1854       1886.43       1920.61    
  21  0.753783     -0.282650      -79.2082       79.2082       1852.37       1931.58    
  22  0.135562      -1.99832      -559.998       559.998       1868.19       2428.18    
  23  0.817964     -0.200937      -56.3093       56.3093       1707.38       1763.69    
  24  0.286617      -1.24961      -350.183       350.183       1921.00       2271.19    
  25  0.319126      -1.14217      -320.075       320.075       1842.47       2162.54    
  26  0.104479E-01  -4.56135      -1278.24       1278.24       1932.97       3211.22    
  27  0.671407     -0.398379      -111.639       111.639       1860.39       1972.03    
  28  0.782955     -0.244680      -68.5677       68.5677       1893.04       1961.61    
  29  0.186689      -1.67831      -470.320       470.320       1843.54       2313.86    
  30  0.462519     -0.771067      -216.079       216.079       1898.07       2114.15    
  31  0.203171      -1.59371      -446.610       446.610       1869.58       2316.19    
  32  0.851762E-01  -2.46303      -690.225       690.225       1922.03       2612.25    
  33  0.702824     -0.352649      -98.8240       98.8240       1861.01       1959.83    
  34  0.747923     -0.290456      -81.3955       81.3955       2002.47       2083.86    
  35  0.224450      -1.49410      -418.698       418.698       1839.10       2257.80    
  36  0.243563E-02  -6.01755      -1686.32       1686.32       1796.12       3482.44    
  37  0.160790      -1.82766      -512.172       512.172       1969.92       2482.09    
  38  0.880431     -0.127343      -35.6859       35.6859       1874.21       1909.89    
  39  0.507306     -0.678640      -190.178       190.178       1862.04       2052.22    
  40  0.266019      -1.32419      -371.082       371.082       1886.24       2257.32    
  41  0.310751      -1.16876      -327.527       327.527       1756.37       2083.90    
  42  0.945006     -0.565640E-01  -15.8511       15.8511       2290.85       2306.71    
  43  0.265699E-01  -3.62797      -1016.68       1016.68       1889.21       2905.89    
  44  0.652842     -0.426420      -119.497       119.497       1776.25       1895.74    
  45  0.799409     -0.223882      -62.7394       62.7394       1868.22       1930.96    
  46  0.543529     -0.609672      -170.851       170.851       1892.75       2063.60    
  47  0.361947      -1.01626      -284.790       284.790       1975.54       2260.33    
  48  0.398721     -0.919492      -257.673       257.673       1821.56       2079.24    
  49  0.349489      -1.05128      -294.605       294.605       1892.11       2186.71    
  50  0.948739     -0.526212E-01  -14.7462       14.7462       1830.81       1845.56    
  51  0.346176      -1.06081      -297.274       297.274       1896.60       2193.87    
loop,thermsimp(1:2)       54   159.514       100.421    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    142       1932.26          0.87          1.11         21.92          0.21          0.05         24.16
Just calling func    0   0         24.16


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1932.26
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    280.234               151
loop is:       54
neval is:      141
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       54      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    560.467      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    280.234               151
loop is:       55
neval is:      141


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      151
neval,tstepnext:      141     151

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.194359      -1.63805      -459.036       459.036       1305.70       1764.73    
   2  0.875287     -0.133204      -37.3281       37.3281       1707.38       1744.71    
   3  0.103612      -2.26710      -635.317       635.317       1779.82       2415.14    
   4  0.159072      -1.83840      -515.182       515.182       1830.81       2346.00    
   5  0.118738      -2.13084      -597.132       597.132       1755.02       2352.15    
   6  0.294105      -1.22382      -342.955       342.955       1830.83       2173.78    
   7  0.967643     -0.328919E-01  -9.21743       9.21743       1877.42       1886.63    
   8  0.675183     -0.392772      -110.068       110.068       1776.25       1886.32    
   9  0.170112      -1.77130      -496.378       496.378       1874.21       2370.59    
  10  0.990992     -0.904902E-02  -2.53584       2.53584       1867.99       1870.52    
  11  0.198513      -1.61690      -453.111       453.111       1886.43       2339.54    
  12  0.404817E-01  -3.20690      -898.683       898.683       1868.22       2766.91    
  13  0.834933E-01  -2.48299      -695.817       695.817       1852.37       2548.19    
  14  0.458935     -0.778848      -218.259       218.259       1847.39       2065.65    
  15  0.929311     -0.733118E-01  -20.5444       20.5444       1881.57       1902.12    
  16  0.593071     -0.522440      -146.405       146.405       1861.01       2007.41    
  17  0.963359E-01  -2.33991      -655.723       655.723       1893.04       2548.77    
  18  0.383119E-01  -3.26200      -914.121       914.121       1860.39       2774.51    
  19  0.841843     -0.172161      -48.2454       48.2454       1836.91       1885.15    
  20  0.874261     -0.134376      -37.6568       37.6568       1706.19       1743.85    
  21  0.706443     -0.347513      -97.3849       97.3849       1804.91       1902.29    
  22  0.423649E-01  -3.16143      -885.941       885.941       1862.04       2747.98    
  23  0.904835     -0.100003      -28.0242       28.0242       1892.75       1920.77    
  24  0.728800     -0.316356      -88.6536       88.6536       1732.92       1821.57    
  25  0.764304     -0.268790      -75.3241       75.3241       1821.56       1896.89    
  26  0.578519     -0.547284      -153.367       153.367       2002.47       2155.83    
  27  0.321737      -1.13402      -317.791       317.791       1756.37       2074.16    
  28  0.592944     -0.522656      -146.466       146.466       1898.07       2044.54    
  29  0.159596      -1.83511      -514.260       514.260       1965.16       2479.42    
  30  0.797332     -0.226484      -63.4684       63.4684       1842.47       1905.94    
  31  0.263979      -1.33189      -373.240       373.240       1944.15       2317.39    
  32  0.449355     -0.799942      -224.171       224.171       1892.11       2116.28    
  33  0.859901     -0.150938      -42.2978       42.2978       1896.60       1938.90    
  34  0.730093     -0.314584      -88.1569       88.1569       1886.24       1974.40    
  35  0.484666     -0.724295      -202.972       202.972       1839.10       2042.07    
  36  0.180217      -1.71359      -480.206       480.206       1975.54       2455.74    
  37  0.857397     -0.153854      -43.1151       43.1151       1921.00       1964.12    
  38  0.502370     -0.688418      -192.918       192.918       1873.15       2066.06    
  39  0.245408      -1.40484      -393.682       393.682       2290.85       2684.54    
  40  0.134540      -2.00590      -562.119       562.119       1799.18       2361.30    
  41  0.468137     -0.758995      -212.696       212.696       1843.54       2056.24    
  42  0.864548E-01  -2.44813      -686.050       686.050       1869.58       2555.63    
  43  0.178791      -1.72154      -482.433       482.433       1848.50       2330.93    
  44  0.690351     -0.370555      -103.842       103.842       1868.19       1972.03    
  45  0.731648     -0.312455      -87.5605       87.5605       1835.24       1922.80    
  46  0.857623     -0.153591      -43.0413       43.0413       1969.92       2012.96    
  47  0.754956     -0.281095      -78.7724       78.7724       1922.03       2000.80    
  48  0.355557      -1.03407      -289.782       289.782       1938.43       2228.21    
  49  0.200964      -1.60463      -449.672       449.672       1889.21       2338.88    
  50  0.243499      -1.41264      -395.870       395.870       1932.97       2328.84    
  51  0.796288     -0.227794      -63.8357       63.8357       1932.26       1996.09    
loop,thermsimp(1:2)       55   459.036       37.3281    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    143       1698.86          0.87          1.12         21.98          0.27          0.05         24.29
Just calling func    0   0         24.29


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    144       1672.43          0.86          1.12         21.98          0.27          0.05         24.29
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1672.43
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    280.234               151
loop is:       55
neval is:      143
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       55      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    560.467      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    280.234               151
loop is:       56
neval is:      143


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      151
neval,tstepnext:      143     151

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.141299      -1.95688      -548.384       548.384       1706.19       2254.57    
   2  0.197548      -1.62177      -454.476       454.476       1707.38       2161.85    
   3  0.774000     -0.256183      -71.7911       71.7911       1305.70       1377.49    
   4  0.170284      -1.77029      -496.095       496.095       1732.92       2229.02    
   5  0.250636      -1.38376      -387.775       387.775       1867.99       2255.76    
   6  0.907951     -0.965652E-01  -27.0608       27.0608       1836.91       1863.97    
   7  0.611678     -0.491549      -137.749       137.749       1776.25       1914.00    
   8  0.735945E-02  -4.91177      -1376.44       1376.44       1877.42       3253.86    
   9  0.309131      -1.17399      -328.992       328.992       1821.56       2150.56    
  10  0.577854     -0.548434      -153.690       153.690       1881.57       2035.26    
  11  0.931529     -0.709274E-01  -19.8763       19.8763       1804.91       1824.79    
  12  0.665703     -0.406912      -114.031       114.031       1842.47       1956.50    
  13  0.585695     -0.534955      -149.913       149.913       1892.75       2042.66    
  14  0.295001      -1.22078      -342.103       342.103       1835.24       2177.34    
  15  0.317712E-01  -3.44920      -966.581       966.581       1896.60       2863.18    
  16  0.222963      -1.50075      -420.561       420.561       1921.00       2341.56    
  17  0.325931      -1.12107      -314.162       314.162       1868.19       2182.35    
  18  0.785098     -0.241947      -67.8016       67.8016       1886.24       1954.04    
  19  0.550467     -0.596988      -167.296       167.296       1932.26       2099.55    
  20  0.780222     -0.248176      -69.5474       69.5474       1922.03       1991.58    
  21  0.130712      -2.03476      -570.208       570.208       1861.01       2431.21    
  22  0.873397     -0.135365      -37.9338       37.9338       1969.92       2007.85    
  23  0.366975      -1.00246      -280.923       280.923       1839.10       2120.02    
  24  0.813244     -0.206724      -57.9310       57.9310       1898.07       1956.00    
  25  0.782660E-01  -2.54764      -713.935       713.935       1843.54       2557.47    
  26  0.700327     -0.356208      -99.8215       99.8215       1847.39       1947.21    
  27  0.437766     -0.826071      -231.493       231.493       1873.15       2104.64    
  28  0.508966E-01  -2.97796      -834.524       834.524       1756.37       2590.90    
  29  0.276850      -1.28428      -359.898       359.898       1892.11       2252.00    
  30  0.792031     -0.233154      -65.3377       65.3377       2002.47       2067.80    
  31  0.174747      -1.74441      -488.844       488.844       1830.83       2319.67    
  32  0.469718     -0.755623      -211.751       211.751       1938.43       2150.18    
  33  0.252316      -1.37707      -385.902       385.902       1944.15       2330.05    
  34  0.980061     -0.201409E-01  -5.64415       5.64415       1932.97       1938.62    
  35  0.838300     -0.176379      -49.4275       49.4275       1848.50       1897.92    
  36  0.369385     -0.995915      -279.089       279.089       1889.21       2168.30    
  37  0.923139     -0.799751E-01  -22.4117       22.4117       1886.43       1908.84    
  38  0.592446     -0.523496      -146.701       146.701       1830.81       1977.52    
  39  0.348787      -1.05329      -295.168       295.168       1755.02       2050.18    
  40  0.569584     -0.562850      -157.730       157.730       1799.18       1956.91    
  41  0.543034E-01  -2.91317      -816.368       816.368       1874.21       2690.58    
  42  0.582662     -0.540148      -151.368       151.368       1779.82       1931.19    
  43  0.702825     -0.352648      -98.8238       98.8238       1975.54       2074.36    
  44  0.941375     -0.604140E-01  -16.9300       16.9300       1965.16       1982.09    
  45  0.258857      -1.35148      -378.730       378.730       1852.37       2231.10    
  46  0.116535      -2.14956      -602.380       602.380       1893.04       2495.42    
  47  0.102671      -2.27622      -637.875       637.875       1869.58       2507.45    
  48  0.172023      -1.76013      -493.247       493.247       2290.85       2784.10    
  49  0.434982E-01  -3.13504      -878.543       878.543       1862.04       2740.58    
  50  0.852122     -0.160026      -44.8447       44.8447       1868.22       1913.07    
  51  0.583521     -0.538675      -150.955       150.955       1672.43       1823.39    
loop,thermsimp(1:2)       56   548.384       454.476    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    145       1751.28          0.88          1.12         22.31          0.13          0.05         24.49
Just calling func    0   0         24.49


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1751.28
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    280.234               151
loop is:       56
neval is:      144
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       56      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    560.467      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    280.234               151
loop is:       57
neval is:      144


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      151
neval,tstepnext:      144     151

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.662269     -0.412083      -115.480       115.480       1305.70       1421.18    
   2  0.724212     -0.322671      -90.4234       90.4234       1672.43       1762.85    
   3  0.633711     -0.456163      -127.832       127.832       1804.91       1932.74    
   4  0.448566     -0.801700      -224.663       224.663       1836.91       2061.57    
   5  0.964228     -0.364273E-01  -10.2082       10.2082       1848.50       1858.70    
   6  0.714306     -0.336444      -94.2830       94.2830       1886.43       1980.71    
   7  0.528330     -0.638035      -178.799       178.799       1868.22       2047.02    
   8  0.654127     -0.424453      -118.946       118.946       1776.25       1895.19    
   9  0.368899     -0.997232      -279.458       279.458       1779.82       2059.28    
  10  0.227697      -1.47974      -414.673       414.673       1932.97       2347.64    
  11  0.612266     -0.490588      -137.479       137.479       1847.39       1984.87    
  12  0.313777      -1.15907      -324.812       324.812       1886.24       2211.05    
  13  0.258526      -1.35276      -379.089       379.089       1898.07       2277.16    
  14  0.119298      -2.12613      -595.814       595.814       1842.47       2438.28    
  15  0.213331      -1.54491      -432.935       432.935       1799.18       2232.12    
  16  0.294218      -1.22343      -342.848       342.848       1830.81       2173.66    
  17  0.352988      -1.04132      -291.813       291.813       1965.16       2256.97    
  18  0.348706      -1.05353      -295.233       295.233       1922.03       2217.26    
  19  0.449249     -0.800179      -224.237       224.237       1969.92       2194.15    
  20  0.879121     -0.128833      -36.1033       36.1033       1881.57       1917.67    
  21  0.464081     -0.767695      -215.134       215.134       1892.75       2107.88    
  22  0.497582     -0.697995      -195.602       195.602       1755.02       1950.62    
  23  0.920207     -0.831566E-01  -23.3033       23.3033       2002.47       2025.77    
  24  0.811773     -0.208535      -58.4385       58.4385       1975.54       2033.97    
  25  0.190651      -1.65731      -464.434       464.434       1932.26       2396.69    
  26  0.645174     -0.438235      -122.808       122.808       1873.15       1995.95    
  27  0.668343     -0.402954      -112.921       112.921       1839.10       1952.02    
  28  0.765111     -0.267735      -75.0283       75.0283       1938.43       2013.46    
  29  0.991779     -0.825499E-02  -2.31333       2.31333       1821.56       1823.88    
  30  0.136888      -1.98859      -557.271       557.271       1707.38       2264.65    
  31  0.645145E-01  -2.74086      -768.083       768.083       1889.21       2657.29    
  32  0.408515E-01  -3.19781      -896.134       896.134       1835.24       2731.38    
  33  0.264109      -1.33140      -373.102       373.102       1868.19       2241.29    
  34  0.382737     -0.960407      -269.138       269.138       1732.92       2002.06    
  35  0.402738E-02  -5.51464      -1545.39       1545.39       1852.37       3397.76    
  36  0.318074      -1.14547      -320.999       320.999       1892.11       2213.10    
  37  0.245237      -1.40553      -393.878       393.878       1706.19       2100.07    
  38  0.519766     -0.654377      -183.379       183.379       1867.99       2051.37    
  39  0.255147      -1.36592      -382.776       382.776       1830.83       2213.60    
  40  0.833841     -0.181712      -50.9218       50.9218       1944.15       1995.07    
  41  0.696242E-01  -2.66464      -746.723       746.723       1921.00       2667.73    
  42  0.487295     -0.718886      -201.456       201.456       1861.01       2062.46    
  43  0.276229E-01  -3.58911      -1005.79       1005.79       1893.04       2898.83    
  44  0.638327     -0.448905      -125.798       125.798       1869.58       1995.38    
  45  0.206684      -1.57657      -441.807       441.807       1843.54       2285.35    
  46  0.736003     -0.306521      -85.8976       85.8976       1756.37       1842.27    
  47  0.217444E-01  -3.82840      -1072.85       1072.85       1874.21       2947.05    
  48  0.956929     -0.440260E-01  -12.3376       12.3376       1862.04       1874.38    
  49  0.883561     -0.123795      -34.6914       34.6914       2290.85       2325.55    
  50  0.700901     -0.355388      -99.5918       99.5918       1896.60       1996.19    
  51  0.201997      -1.59950      -448.234       448.234       1751.28       2199.52    
loop,thermsimp(1:2)       57   115.480       90.4234    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    146       1946.53          0.87          1.11         21.99          0.12          0.04         24.13
Just calling func    0   0         24.13


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1946.53
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    280.234               151
loop is:       57
neval is:      145
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       57      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    560.467      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    280.234               151
loop is:       58
neval is:      145


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      151
neval,tstepnext:      145     151

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.584865E-01  -2.83896      -795.572       795.572       1305.70       2101.27    
   2  0.104884      -2.25490      -631.900       631.900       1672.43       2304.33    
   3  0.784254     -0.243023      -68.1031       68.1031       1821.56       1889.67    
   4  0.813133     -0.206861      -57.9694       57.9694       1756.37       1814.34    
   5  0.490778     -0.711764      -199.460       199.460       1848.50       2047.96    
   6  0.168573      -1.78039      -498.924       498.924       1862.04       2360.96    
   7  0.450161     -0.798149      -223.668       223.668       1776.25       1999.92    
   8  0.828233     -0.188461      -52.8131       52.8131       1881.57       1934.38    
   9  0.994731     -0.528342E-02  -1.48059       1.48059       1804.91       1806.39    
  10  0.813340     -0.206606      -57.8980       57.8980       1755.02       1812.91    
  11  0.776133     -0.253432      -71.0201       71.0201       1839.10       1910.12    
  12  0.729556     -0.315319      -88.3630       88.3630       1886.43       1974.79    
  13  0.530451     -0.634028      -177.676       177.676       1847.39       2025.07    
  14  0.752564E-01  -2.58685      -724.924       724.924       1944.15       2669.07    
  15  0.918457     -0.850597E-01  -23.8366       23.8366       1869.58       1893.41    
  16  0.162642      -1.81621      -508.962       508.962       1873.15       2382.11    
  17  0.725851     -0.320411      -89.7899       89.7899       1896.60       1986.39    
  18  0.322292      -1.13230      -317.308       317.308       1732.92       2050.23    
  19  0.838064     -0.176661      -49.5064       49.5064       1938.43       1987.94    
  20  0.346062E-01  -3.36372      -942.628       942.628       2002.47       2945.09    
  21  0.442915     -0.814377      -228.216       228.216       1975.54       2203.75    
  22  0.143708      -1.93997      -543.646       543.646       1868.22       2411.87    
  23  0.940845     -0.609769E-01  -17.0878       17.0878       1867.99       1885.08    
  24  0.972503     -0.278816E-01  -7.81338       7.81338       1779.82       1787.63    
  25  0.291831      -1.23158      -345.131       345.131       1836.91       2182.04    
  26  0.211976      -1.55128      -434.722       434.722       1861.01       2295.73    
  27  0.695427     -0.363229      -101.789       101.789       1706.19       1807.98    
  28  0.982540E-01  -2.32020      -650.198       650.198       1892.75       2542.95    
  29  0.730742     -0.313695      -87.9079       87.9079       1830.81       1918.72    
  30  0.417794     -0.872766      -244.578       244.578       1969.92       2214.49    
  31  0.868385     -0.141121      -39.5468       39.5468       1751.28       1790.83    
  32  0.300897      -1.20099      -336.557       336.557       1886.24       2222.80    
  33  0.917219     -0.864093E-01  -24.2148       24.2148       1892.11       1916.32    
  34  0.304394      -1.18943      -333.319       333.319       1830.83       2164.14    
  35  0.856500     -0.154901      -43.4086       43.4086       1922.03       1965.44    
  36  0.310652      -1.16908      -327.616       327.616       1799.18       2126.80    
  37  0.846275     -0.166911      -46.7742       46.7742       1868.19       1914.96    
  38  0.206825      -1.57588      -441.616       441.616       1965.16       2406.77    
  39  0.606376     -0.500256      -140.189       140.189       1707.38       1847.57    
  40  0.840015     -0.174336      -48.8547       48.8547       1898.07       1946.93    
  41  0.348835      -1.05315      -295.130       295.130       1843.54       2138.67    
  42  0.857325     -0.153939      -43.1388       43.1388       2290.85       2333.99    
  43  0.308035E-01  -3.48013      -975.249       975.249       1932.97       2908.22    
  44  0.400632     -0.914711      -256.333       256.333       1932.26       2188.59    
  45  0.242237      -1.41784      -397.326       397.326       1842.47       2239.79    
  46  0.407771     -0.897050      -251.384       251.384       1889.21       2140.59    
  47  0.430691     -0.842364      -236.059       236.059       1921.00       2157.06    
  48  0.415503     -0.878266      -246.120       246.120       1835.24       2081.36    
  49  0.593575     -0.521591      -146.167       146.167       1893.04       2039.21    
  50  0.973620     -0.267342E-01  -7.49182       7.49182       1874.21       1881.70    
  51  0.510257     -0.672840      -188.552       188.552       1946.53       2135.08    
loop,thermsimp(1:2)       58   795.572       631.900    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    147       1785.11          0.87          1.11         21.89          0.26          0.05         24.19
Just calling func    0   0         24.19


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    148       2179.26          0.87          1.11         21.95          0.21          0.05         24.19
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1785.11
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    280.234               151
loop is:       58
neval is:      147
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       58      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    560.467      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    280.234               151
loop is:       59
neval is:      147


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      151
neval,tstepnext:      147     151

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.330032      -1.10857      -310.658       310.658       1779.82       2090.48    
   2  0.939148     -0.627826E-01  -17.5938       17.5938       1751.28       1768.87    
   3  0.130906      -2.03328      -569.793       569.793       1804.91       2374.70    
   4  0.664370     -0.408916      -114.592       114.592       1706.19       1820.78    
   5  0.490908     -0.711498      -199.386       199.386       1755.02       1954.40    
   6  0.711731     -0.340055      -95.2949       95.2949       1756.37       1851.67    
   7  0.676080     -0.391444      -109.696       109.696       1707.38       1817.07    
   8  0.611139     -0.492432      -137.996       137.996       1874.21       2012.20    
   9  0.614246     -0.487359      -136.574       136.574       1867.99       2004.56    
  10  0.988045     -0.120275E-01  -3.37052       3.37052       1821.56       1824.93    
  11  0.232883      -1.45722      -408.362       408.362       1869.58       2277.94    
  12  0.450825     -0.796675      -223.255       223.255       1839.10       2062.36    
  13  0.493319     -0.706599      -198.013       198.013       1868.19       2066.20    
  14  0.191184      -1.65452      -463.652       463.652       1892.11       2355.76    
  15  0.894136     -0.111897      -31.3574       31.3574       1830.81       1862.17    
  16  0.391751     -0.937128      -262.615       262.615       1881.57       2144.19    
  17  0.236278      -1.44275      -404.307       404.307       1898.07       2302.38    
  18  0.496874E-01  -3.00200      -841.263       841.263       1922.03       2763.29    
  19  0.784524     -0.242678      -68.0067       68.0067       1886.43       1954.43    
  20  0.292328      -1.22988      -344.654       344.654       1896.60       2241.25    
  21  0.832247E-01  -2.48621      -696.720       696.720       1938.43       2635.15    
  22  0.423133     -0.860069      -241.020       241.020       1776.25       2017.27    
  23  0.234472      -1.45042      -406.456       406.456       1847.39       2253.85    
  24  0.868463     -0.141031      -39.5215       39.5215       1893.04       1932.57    
  25  0.122969      -2.09582      -587.320       587.320       1848.50       2435.82    
  26  0.811771     -0.208537      -58.4391       58.4391       1732.92       1791.36    
  27  0.786834     -0.239738      -67.1828       67.1828       1835.24       1902.42    
  28  0.163144      -1.81312      -508.097       508.097       1305.70       1813.79    
  29  0.571103     -0.560186      -156.983       156.983       1799.18       1956.16    
  30  0.769982     -0.261388      -73.2496       73.2496       1946.53       2019.78    
  31  0.471769     -0.751265      -210.530       210.530       1843.54       2054.07    
  32  0.584935     -0.536254      -150.276       150.276       1889.21       2039.48    
  33  0.416140     -0.876734      -245.690       245.690       1921.00       2166.69    
  34  0.106525E-01  -4.54196      -1272.81       1272.81       1830.83       3103.64    
  35  0.595424     -0.518482      -145.296       145.296       1836.91       1982.21    
  36  0.302400      -1.19600      -335.161       335.161       1932.26       2267.42    
  37  0.629701     -0.462510      -129.611       129.611       1975.54       2105.15    
  38  0.939026E-01  -2.36550      -662.892       662.892       1969.92       2632.81    
  39  0.911727     -0.924151E-01  -25.8978       25.8978       1886.24       1912.14    
  40  0.289502      -1.23959      -347.376       347.376       1842.47       2189.84    
  41  0.326571      -1.11911      -313.612       313.612       1861.01       2174.62    
  42  0.972366     -0.280231E-01  -7.85301       7.85301       1672.43       1680.28    
  43  0.823413     -0.194297      -54.4486       54.4486       2290.85       2345.30    
  44  0.790717     -0.234815      -65.8030       65.8030       1862.04       1927.84    
  45  0.167922      -1.78426      -500.009       500.009       1873.15       2373.16    
  46  0.804665     -0.217329      -60.9030       60.9030       1965.16       2026.06    
  47  0.154714      -1.86617      -522.965       522.965       1868.22       2391.19    
  48  0.240456      -1.42522      -399.395       399.395       1892.75       2292.14    
  49  0.351787      -1.04473      -292.769       292.769       1944.15       2236.92    
  50  0.666429E-01  -2.70841      -758.987       758.987       1932.97       2691.96    
  51  0.484113     -0.725437      -203.292       203.292       1785.11       1988.40    
loop,thermsimp(1:2)       59   310.658       17.5938    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    149       1814.29          0.87          1.12         21.94          0.15          0.05         24.12
Just calling func    0   0         24.12


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    150       3111.35          0.86          1.11         21.91          0.20          0.05         24.14
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1814.29
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    280.234               151
loop is:       59
neval is:      149
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       59      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    560.467      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    280.234               151
loop is:       60
neval is:      149


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      151
neval,tstepnext:      149     151

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.304136      -1.19028      -333.557       333.557       1672.43       2005.99    
   2  0.843344     -0.170380      -47.7462       47.7462       1751.28       1799.03    
   3  0.457815     -0.781289      -218.944       218.944       1732.92       1951.86    
   4  0.933709     -0.685899E-01  -19.2212       19.2212       1305.70       1324.92    
   5  0.887159     -0.119731      -33.5526       33.5526       1707.38       1740.93    
   6  0.786211     -0.240530      -67.4047       67.4047       1706.19       1773.60    
   7  0.794803     -0.229661      -64.3588       64.3588       1821.56       1885.92    
   8  0.573435E-01  -2.85870      -801.103       801.103       1756.37       2557.48    
   9  0.647106     -0.435245      -121.970       121.970       1830.81       1952.78    
  10  0.110118      -2.20620      -618.253       618.253       1835.24       2453.49    
  11  0.339548      -1.08014      -302.691       302.691       1886.24       2188.93    
  12  0.635246     -0.453742      -127.154       127.154       1862.04       1989.19    
  13  0.488392     -0.716638      -200.826       200.826       1893.04       2093.87    
  14  0.602571     -0.506549      -141.952       141.952       1755.02       1896.97    
  15  0.710041     -0.342433      -95.9613       95.9613       1886.43       1982.39    
  16  0.585763     -0.534840      -149.880       149.880       1799.18       1949.06    
  17  0.288010      -1.24476      -348.823       348.823       1836.91       2185.73    
  18  0.455238     -0.786934      -220.526       220.526       1785.11       2005.64    
  19  0.723984     -0.322986      -90.5115       90.5115       1867.99       1958.50    
  20  0.554067     -0.590470      -165.470       165.470       1874.21       2039.68    
  21  0.646516     -0.436157      -122.226       122.226       1776.25       1898.47    
  22  0.271985      -1.30201      -364.867       364.867       1946.53       2311.39    
  23  0.901636E-02  -4.70871      -1319.54       1319.54       1965.16       3284.70    
  24  0.383616     -0.958114      -268.496       268.496       1889.21       2157.70    
  25  0.443516     -0.813022      -227.836       227.836       1843.54       2071.38    
  26  0.223023      -1.50048      -420.486       420.486       1839.10       2259.59    
  27  0.123255      -2.09350      -586.669       586.669       1868.19       2454.86    
  28  0.817485     -0.201523      -56.4735       56.4735       1779.82       1836.29    
  29  0.333893      -1.09693      -307.398       307.398       1975.54       2282.93    
  30  0.867877     -0.141706      -39.7107       39.7107       1881.57       1921.28    
  31  0.365747      -1.00581      -281.863       281.863       1921.00       2202.87    
  32  0.429445     -0.845262      -236.871       236.871       1861.01       2097.88    
  33  0.856620     -0.154761      -43.3693       43.3693       1842.47       1885.84    
  34  0.729532     -0.315352      -88.3724       88.3724       1944.15       2032.52    
  35  0.315845      -1.15251      -322.971       322.971       1896.60       2219.57    
  36  0.547596     -0.602217      -168.761       168.761       1847.39       2016.15    
  37  0.752130     -0.284846      -79.8236       79.8236       1932.26       2012.08    
  38  0.806451     -0.215112      -60.2817       60.2817       1869.58       1929.86    
  39  0.618613     -0.480275      -134.589       134.589       1892.75       2027.34    
  40  0.630350     -0.461480      -129.322       129.322       1898.07       2027.39    
  41  0.251741      -1.37935      -386.542       386.542       2290.85       2677.40    
  42  0.846504     -0.166640      -46.6981       46.6981       1892.11       1938.80    
  43  0.830791     -0.185377      -51.9488       51.9488       1873.15       1925.09    
  44  0.566838     -0.567681      -159.083       159.083       1804.91       1963.99    
  45  0.499450E-01  -2.99683      -839.814       839.814       1868.22       2708.04    
  46  0.976301     -0.239838E-01  -6.72108       6.72108       1848.50       1855.22    
  47  0.401049     -0.913672      -256.042       256.042       1969.92       2225.96    
  48  0.709931E-01  -2.64517      -741.267       741.267       1938.43       2679.70    
  49  0.920370E-02  -4.68815      -1313.78       1313.78       1932.97       3246.75    
  50  0.379723     -0.968314      -271.354       271.354       1922.03       2193.38    
  51  0.207569      -1.57229      -440.609       440.609       1814.29       2254.90    
loop,thermsimp(1:2)       60   333.557       47.7462    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    151       1677.28          0.87          1.12         22.02          0.24          0.05         24.29
Just calling func    0   0         24.29


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1677.28
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    280.234               151
loop is:       60
neval is:      150
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       60      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    560.467      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    280.234               151
loop is:       61
neval is:      150


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      151
neval,tstepnext:      150     151

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.829682     -0.186713      -52.3232       52.3232       1305.70       1358.02    
   2  0.735850     -0.306729      -85.9558       85.9558       1707.38       1793.33    
   3  0.828786     -0.187793      -52.6260       52.6260       1706.19       1758.82    
   4  0.592078     -0.524118      -146.875       146.875       1751.28       1898.16    
   5  0.691797E-01  -2.67105      -748.518       748.518       1779.82       2528.34    
   6  0.772335     -0.258337      -72.3947       72.3947       1848.50       1920.89    
   7  0.504563     -0.684063      -191.698       191.698       1842.47       2034.17    
   8  0.700615     -0.355797      -99.7062       99.7062       1821.56       1921.27    
   9  0.764596     -0.268408      -75.2169       75.2169       1755.02       1830.23    
  10  0.459614     -0.777368      -217.845       217.845       1776.25       1994.09    
  11  0.931193     -0.712882E-01  -19.9774       19.9774       1881.57       1901.55    
  12  0.502482E-01  -2.99078      -838.117       838.117       1873.15       2711.26    
  13  0.498197     -0.696760      -195.256       195.256       1869.58       2064.83    
  14  0.551534E-01  -2.89764      -812.015       812.015       1892.11       2704.12    
  15  0.172209      -1.75905      -492.945       492.945       1799.18       2292.13    
  16  0.238868E-01  -3.73443      -1046.51       1046.51       1732.92       2779.43    
  17  0.699366     -0.357581      -100.206       100.206       1830.81       1931.02    
  18  0.764093     -0.269066      -75.4015       75.4015       1867.99       1943.39    
  19  0.465633     -0.764357      -214.199       214.199       1804.91       2019.11    
  20  0.209906      -1.56110      -437.472       437.472       1886.43       2323.90    
  21  0.216891      -1.52836      -428.298       428.298       1862.04       2290.34    
  22  0.795854E-01  -2.53092      -709.251       709.251       1785.11       2494.36    
  23  0.701683     -0.354273      -99.2794       99.2794       1672.43       1771.71    
  24  0.574425     -0.554385      -155.357       155.357       1932.26       2087.61    
  25  0.674968     -0.393090      -110.157       110.157       1847.39       1957.55    
  26  0.684189     -0.379521      -106.355       106.355       1892.75       1999.10    
  27  0.541862     -0.612745      -171.712       171.712       1898.07       2069.78    
  28  0.668027     -0.403426      -113.054       113.054       1944.15       2057.20    
  29  0.353251      -1.04058      -291.605       291.605       1874.21       2165.81    
  30  0.778708     -0.250119      -70.0919       70.0919       1843.54       1913.63    
  31  0.829283     -0.187194      -52.4581       52.4581       1893.04       1945.50    
  32  0.679297     -0.386697      -108.366       108.366       1861.01       1969.37    
  33  0.536301     -0.623060      -174.602       174.602       1889.21       2063.81    
  34  0.247738      -1.39538      -391.033       391.033       1836.91       2227.94    
  35  0.271399      -1.30416      -365.471       365.471       1886.24       2251.71    
  36  0.284124      -1.25835      -352.631       352.631       1922.03       2274.66    
  37  0.664442     -0.408808      -114.562       114.562       1921.00       2035.56    
  38  0.874508     -0.134094      -37.5775       37.5775       1896.60       1934.18    
  39  0.916444     -0.872538E-01  -24.4515       24.4515       1969.92       1994.37    
  40  0.295165      -1.22022      -341.947       341.947       1814.29       2156.24    
  41  0.242592      -1.41637      -396.916       396.916       1839.10       2236.02    
  42  0.396124     -0.926028      -259.504       259.504       1975.54       2235.04    
  43  0.509193E-01  -2.97751      -834.400       834.400       1946.53       2780.93    
  44  0.778911     -0.249858      -70.0186       70.0186       1835.24       1905.26    
  45  0.351009      -1.04694      -293.389       293.389       1868.19       2161.58    
  46  0.480934     -0.732025      -205.138       205.138       1756.37       1961.51    
  47  0.908579     -0.958731E-01  -26.8669       26.8669       2290.85       2317.72    
  48  0.898885     -0.106600      -29.8729       29.8729       1938.43       1968.30    
  49  0.561121     -0.577819      -161.924       161.924       1868.22       2030.15    
  50  0.851109     -0.161215      -45.1780       45.1780       1932.97       1978.15    
  51  0.975854     -0.244425E-01  -6.84962       6.84962       1677.28       1684.13    
loop,thermsimp(1:2)       61   52.3232       85.9558    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    152       1840.65          0.88          1.12         22.02          0.24          0.04         24.29
Just calling func    0   0         24.29


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1840.65
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    280.234               151
loop is:       61
neval is:      151
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       61      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    560.467      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    280.234               151
loop is:       62
neval is:      151


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      151
neval,tstepnext:      151     151

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.917395     -0.862167E-01  -24.1608       24.1608       1305.70       1329.86    
   2  0.899579E-01  -2.40841      -674.919       674.919       1677.28       2352.20    
   3  0.997625     -0.237830E-02 -0.666481      0.666481       1706.19       1706.86    
   4  0.224083      -1.49574      -419.157       419.157       1672.43       2091.59    
   5  0.120769      -2.11388      -592.380       592.380       1707.38       2299.76    
   6  0.302676E-01  -3.49768      -980.167       980.167       1755.02       2735.18    
   7  0.315161      -1.15467      -323.578       323.578       1751.28       2074.86    
   8  0.155895      -1.85857      -520.835       520.835       1881.57       2402.41    
   9  0.467639     -0.760060      -212.994       212.994       1835.24       2048.24    
  10  0.277823      -1.28077      -358.915       358.915       1843.54       2202.45    
  11  0.712282     -0.339281      -95.0780       95.0780       1848.50       1943.57    
  12  0.929560     -0.730437E-01  -20.4693       20.4693       1821.56       1842.03    
  13  0.499024     -0.695101      -194.791       194.791       1830.81       2025.61    
  14  0.940347     -0.615066E-01  -17.2362       17.2362       1896.60       1913.84    
  15  0.714006     -0.336864      -94.4006       94.4006       1867.99       1962.39    
  16  0.162603      -1.81644      -509.029       509.029       1893.04       2402.07    
  17  0.663729     -0.409881      -114.862       114.862       1847.39       1962.26    
  18  0.314148      -1.15789      -324.480       324.480       1756.37       2080.85    
  19  0.497386     -0.698388      -195.712       195.712       1938.43       2134.14    
  20  0.368387     -0.998622      -279.848       279.848       1861.01       2140.85    
  21  0.326342      -1.11981      -313.808       313.808       1932.97       2246.78    
  22  0.442952     -0.814294      -228.193       228.193       1776.25       2004.44    
  23  0.929694     -0.729000E-01  -20.4291       20.4291       1969.92       1990.35    
  24  0.945450E-01  -2.35868      -660.981       660.981       1892.75       2553.73    
  25  0.407158     -0.898555      -251.805       251.805       1804.91       2056.72    
  26  0.706679     -0.347179      -97.2913       97.2913       1868.22       1965.52    
  27  0.657848     -0.418781      -117.357       117.357       1842.47       1959.83    
  28  0.968040     -0.324817E-01  -9.10248       9.10248       1921.00       1930.10    
  29  0.330387      -1.10749      -310.356       310.356       1944.15       2254.50    
  30  0.756161     -0.279501      -78.3256       78.3256       1889.21       1967.53    
  31  0.307772      -1.17840      -330.226       330.226       1869.58       2199.80    
  32  0.759008E-01  -2.57833      -722.534       722.534       1898.07       2620.61    
  33  0.615618E-01  -2.78771      -781.211       781.211       1932.26       2713.47    
  34  0.545984     -0.605166      -169.588       169.588       1814.29       1983.88    
  35  0.339865      -1.07921      -302.430       302.430       1868.19       2170.62    
  36  0.816477     -0.202757      -56.8194       56.8194       1874.21       1931.03    
  37  0.932889     -0.694691E-01  -19.4676       19.4676       1836.91       1856.38    
  38  0.667042     -0.404902      -113.467       113.467       1975.54       2089.00    
  39  0.583049     -0.539484      -151.182       151.182       1839.10       1990.28    
  40  0.210192      -1.55973      -437.090       437.090       1886.24       2323.33    
  41  0.158846      -1.83982      -515.580       515.580       1922.03       2437.61    
  42  0.360401      -1.02054      -285.989       285.989       1862.04       2148.03    
  43  0.508154     -0.676971      -189.710       189.710       1799.18       1988.89    
  44  0.873303     -0.135473      -37.9641       37.9641       2290.85       2328.82    
  45  0.650524     -0.429977      -120.494       120.494       1886.43       2006.92    
  46  0.805601     -0.216166      -60.5770       60.5770       1785.11       1845.69    
  47  0.312590E-03  -8.07062      -2261.66       2261.66       1779.82       4041.48    
  48  0.892261     -0.113997      -31.9457       31.9457       1892.11       1924.05    
  49  0.504672     -0.683846      -191.637       191.637       1873.15       2064.78    
  50  0.269834      -1.30995      -367.091       367.091       1732.92       2100.01    
  51  0.752889     -0.283838      -79.5409       79.5409       1840.65       1920.19    
loop,thermsimp(1:2)       62   24.1608       674.919    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    153       2403.65          0.88          1.13         22.20          0.16          0.04         24.41
Just calling func    0   0         24.41


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2403.65
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    280.234               151
loop is:       62
neval is:      152
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       62      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    560.467      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    280.234               151
loop is:       63
neval is:      152


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 




neval>tstepnex so lower away!t
---> lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
     new SAtemp,tstepnext are :    140.117               201

 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      201
neval,tstepnext:      152     201

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.617195     -0.482570      -67.6161       67.6161       1305.70       1373.31    
   2  0.828850     -0.187716      -26.3021       26.3021       1706.19       1732.49    
   3  0.138898      -1.97402      -276.593       276.593       1821.56       2098.16    
   4  0.174947      -1.74327      -244.262       244.262       1785.11       2029.37    
   5  0.452367E-01  -3.09585      -433.780       433.780       1836.91       2270.69    
   6  0.982229     -0.179305E-01  -2.51236       2.51236       1896.60       1899.11    
   7  0.855728     -0.155803      -21.8306       21.8306       1840.65       1862.48    
   8  0.350750      -1.04768      -146.798       146.798       1892.11       2038.90    
   9  0.880054     -0.127772      -17.9030       17.9030       1921.00       1938.91    
  10  0.106511      -2.23950      -313.792       313.792       1874.21       2188.00    
  11  0.336060      -1.09047      -152.793       152.793       1848.50       2001.29    
  12  0.904819     -0.100020      -14.0145       14.0145       1842.47       1856.48    
  13  0.765597     -0.267099      -37.4250       37.4250       1847.39       1884.82    
  14  0.551789     -0.594589      -83.3119       83.3119       1867.99       1951.30    
  15  0.832435     -0.183400      -25.6974       25.6974       1868.22       1893.92    
  16  0.353494      -1.03989      -145.706       145.706       1889.21       2034.91    
  17  0.510104     -0.673140      -94.3183       94.3183       1814.29       1908.61    
  18  0.523162     -0.647863      -90.7766       90.7766       1799.18       1889.96    
  19  0.953043     -0.480957E-01  -6.73902       6.73902       1839.10       1845.84    
  20  0.267001E-01  -3.62309      -507.656       507.656       1969.92       2477.57    
  21  0.280924      -1.26967      -177.902       177.902       1776.25       1954.15    
  22  0.956868     -0.440901E-01  -6.17777       6.17777       1886.43       1892.61    
  23  0.779725     -0.248814      -34.8630       34.8630       1830.81       1865.68    
  24  0.901061     -0.104183      -14.5978       14.5978       1835.24       1849.84    
  25  0.533391     -0.628501      -88.0636       88.0636       1804.91       1892.97    
  26  0.642536     -0.442333      -61.9783       61.9783       1873.15       1935.12    
  27  0.520565E-01  -2.95543      -414.105       414.105       1751.28       2165.39    
  28  0.330080      -1.10842      -155.308       155.308       1756.37       1911.68    
  29  0.280801      -1.27011      -177.964       177.964       1975.54       2153.50    
  30  0.144013      -1.93785      -271.526       271.526       1672.43       1943.96    
  31  0.201537      -1.60178      -224.436       224.436       1732.92       1957.36    
  32  0.920188     -0.831777E-01  -11.6546       11.6546       1938.43       1950.09    
  33  0.747222     -0.291393      -40.8291       40.8291       1861.01       1901.83    
  34  0.697959     -0.359595      -50.3853       50.3853       1862.04       1912.42    
  35  0.492949     -0.707349      -99.1115       99.1115       1868.19       1967.30    
  36  0.378001     -0.972857      -136.314       136.314       1869.58       2005.89    
  37  0.936484     -0.656225E-01  -9.19482       9.19482       1843.54       1852.73    
  38  0.458232     -0.780381      -109.344       109.344       1932.97       2042.32    
  39  0.286796      -1.24898      -175.004       175.004       1944.15       2119.15    
  40  0.524458     -0.645389      -90.4299       90.4299       1707.38       1797.81    
  41  0.126679      -2.06610      -289.495       289.495       1886.24       2175.74    
  42  0.645270     -0.438086      -61.3832       61.3832       2290.85       2352.24    
  43  0.996049     -0.395919E-02 -0.554750      0.554750       1677.28       1677.83    
  44  0.470695     -0.753545      -105.584       105.584       1893.04       1998.63    
  45  0.783048     -0.244561      -34.2671       34.2671       1881.57       1915.84    
  46  0.682425     -0.382103      -53.5391       53.5391       1922.03       1975.57    
  47  0.623779     -0.471960      -66.1295       66.1295       1892.75       1958.88    
  48  0.138146      -1.97945      -277.354       277.354       1898.07       2175.42    
  49  0.317697      -1.14666      -160.666       160.666       1932.26       2092.92    
  50  0.215616      -1.53426      -214.975       214.975       1755.02       1969.99    
  51  0.392653     -0.934829      -130.985       130.985       2403.65       2534.63    
loop,thermsimp(1:2)       63   67.6161       26.3021    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    154       1779.82          0.87          1.11         21.92          0.19          0.05         24.14
Just calling func    0   0         24.14


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1779.82
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    140.117               201
loop is:       63
neval is:      153
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       63      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    560.467      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    140.117               201
loop is:       64
neval is:      153


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      201
neval,tstepnext:      153     201

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.816548     -0.202670      -28.3974       28.3974       1305.70       1334.09    
   2  0.209930      -1.56098      -218.720       218.720       1677.28       1896.00    
   3  0.710991     -0.341096      -47.7933       47.7933       1706.19       1753.98    
   4  0.967365     -0.331789E-01  -4.64892       4.64892       1707.38       1712.03    
   5  0.650635E-01  -2.73239      -382.854       382.854       1839.10       2221.95    
   6  0.578340     -0.547593      -76.7270       76.7270       1835.24       1911.97    
   7  0.928890E-01  -2.37635      -332.967       332.967       1843.54       2176.51    
   8  0.486974     -0.719546      -100.820       100.820       1842.47       1943.29    
   9  0.560625     -0.578703      -81.0860       81.0860       1840.65       1921.74    
  10  0.552834     -0.592698      -83.0469       83.0469       1830.81       1913.86    
  11  0.744529E-01  -2.59759      -363.966       363.966       1847.39       2211.36    
  12  0.937600     -0.644318E-01  -9.02799       9.02799       1799.18       1808.21    
  13  0.154459      -1.86783      -261.714       261.714       1886.43       2148.14    
  14  0.186893E-02  -6.28239      -880.268       880.268       1804.91       2685.18    
  15  0.250797      -1.38311      -193.797       193.797       1868.22       2062.02    
  16  0.924847E-01  -2.38071      -333.578       333.578       1896.60       2230.18    
  17  0.476680     -0.740911      -103.814       103.814       1861.01       1964.82    
  18  0.266527      -1.32228      -185.273       185.273       1814.29       1999.56    
  19  0.369755     -0.994916      -139.405       139.405       1756.37       1895.78    
  20  0.595561     -0.518252      -72.6158       72.6158       1862.04       1934.66    
  21  0.636070     -0.452447      -63.3955       63.3955       1881.57       1944.97    
  22  0.447294     -0.804540      -112.730       112.730       1873.15       1985.88    
  23  0.964945     -0.356839E-01  -4.99991       4.99991       1921.00       1926.00    
  24  0.752421     -0.284460      -39.8576       39.8576       1672.43       1712.29    
  25  0.705556     -0.348769      -48.8684       48.8684       1938.43       1987.30    
  26  0.943467     -0.581939E-01  -8.15394       8.15394       1867.99       1876.14    
  27  0.272564      -1.29988      -182.135       182.135       1776.25       1958.38    
  28  0.215815      -1.53333      -214.846       214.846       1732.92       1947.77    
  29  0.756955     -0.278452      -39.0158       39.0158       1892.75       1931.76    
  30  0.538381     -0.619189      -86.7588       86.7588       1868.19       1954.95    
  31  0.182967      -1.69845      -237.981       237.981       1755.02       1993.00    
  32  0.644758     -0.438881      -61.4946       61.4946       1922.03       1983.52    
  33  0.939477     -0.624320E-01  -8.74778       8.74778       1893.04       1901.79    
  34  0.663186     -0.410699      -57.5459       57.5459       1848.50       1906.04    
  35  0.795014     -0.229396      -32.1423       32.1423       1869.58       1901.72    
  36  0.630792     -0.460779      -64.5629       64.5629       1785.11       1849.68    
  37  0.151039      -1.89022      -264.851       264.851       1889.21       2154.06    
  38  0.668306     -0.403009      -56.4684       56.4684       1892.11       1948.57    
  39  0.683820     -0.380061      -53.2530       53.2530       1932.97       1986.22    
  40  0.122229      -2.10186      -294.506       294.506       1932.26       2226.76    
  41  0.664453     -0.408791      -57.2785       57.2785       1821.56       1878.84    
  42  0.548687     -0.600228      -84.1020       84.1020       1944.15       2028.25    
  43  0.931535     -0.709210E-01  -9.93723       9.93723       1975.54       1985.47    
  44  0.139742      -1.96796      -275.744       275.744       1751.28       2027.03    
  45  0.429142     -0.845967      -118.534       118.534       1898.07       2016.61    
  46  0.531147     -0.632717      -88.6543       88.6543       1886.24       1974.90    
  47  0.575558     -0.552416      -77.4028       77.4028       1874.21       1951.61    
  48  0.336537      -1.08905      -152.594       152.594       1836.91       1989.50    
  49  0.324486      -1.12551      -157.703       157.703       2290.85       2448.56    
  50  0.652768     -0.426534      -59.7646       59.7646       1969.92       2029.68    
  51  0.537860     -0.620158      -86.8946       86.8946       1779.82       1866.71    
loop,thermsimp(1:2)       64   28.3974       218.720    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    155       1852.37          0.88          1.11         22.05          0.22          0.05         24.31
Just calling func    0   0         24.31


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1852.37
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    140.117               201
loop is:       64
neval is:      154
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       64      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    560.467      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    140.117               201
loop is:       65
neval is:      154


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      201
neval,tstepnext:      154     201

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.367522      -1.00097      -140.253       140.253       1305.70       1445.95    
   2  0.298218      -1.20993      -169.532       169.532       1707.38       1876.91    
   3  0.374092     -0.983254      -137.770       137.770       1672.43       1810.20    
   4  0.417366     -0.873791      -122.433       122.433       1706.19       1828.62    
   5  0.299382      -1.20604      -168.986       168.986       1799.18       1968.17    
   6  0.373029     -0.986099      -138.169       138.169       1785.11       1923.28    
   7  0.628224     -0.464858      -65.1345       65.1345       1779.82       1844.95    
   8  0.111397      -2.19465      -307.508       307.508       1867.99       2175.50    
   9  0.983555     -0.165818E-01  -2.32339       2.32339       1821.56       1823.89    
  10  0.394578     -0.929938      -130.300       130.300       1756.37       1886.67    
  11  0.410639     -0.890042      -124.710       124.710       1677.28       1801.99    
  12  0.700680     -0.355705      -49.8402       49.8402       1869.58       1919.42    
  13  0.223946      -1.49635      -209.664       209.664       1893.04       2102.71    
  14  0.651113E-01  -2.73166      -382.751       382.751       1848.50       2231.25    
  15  0.704010     -0.350963      -49.1758       49.1758       1835.24       1884.42    
  16  0.172411      -1.75787      -246.308       246.308       1830.81       2077.12    
  17  0.567412     -0.566670      -79.4000       79.4000       1840.65       1920.05    
  18  0.186334      -1.68021      -235.426       235.426       1921.00       2156.43    
  19  0.677524     -0.389310      -54.5490       54.5490       1892.75       1947.30    
  20  0.362270      -1.01537      -142.270       142.270       1862.04       2004.31    
  21  0.603880     -0.504381      -70.6722       70.6722       1842.47       1913.14    
  22  0.782208     -0.245635      -34.4176       34.4176       1881.57       1915.99    
  23  0.129808      -2.04170      -286.077       286.077       1732.92       2019.00    
  24  0.284816      -1.25591      -175.975       175.975       1892.11       2068.08    
  25  0.246930      -1.39865      -195.975       195.975       1874.21       2070.18    
  26  0.256917      -1.35900      -190.419       190.419       1868.19       2058.61    
  27  0.240545      -1.42485      -199.645       199.645       1776.25       1975.89    
  28  0.218018      -1.52318      -213.423       213.423       1861.01       2074.43    
  29  0.235583E-01  -3.74828      -525.197       525.197       1886.24       2411.44    
  30  0.114660      -2.16578      -303.462       303.462       1922.03       2225.49    
  31  0.119129      -2.12755      -298.106       298.106       1975.54       2273.64    
  32  0.471707     -0.751398      -105.284       105.284       1873.15       1978.43    
  33  0.607413     -0.498546      -69.8546       69.8546       1932.97       2002.83    
  34  0.568731     -0.564347      -79.0745       79.0745       1938.43       2017.51    
  35  0.587492     -0.531893      -74.5272       74.5272       1836.91       1911.44    
  36  0.411259     -0.888533      -124.498       124.498       1755.02       1879.51    
  37  0.836192     -0.178897      -25.0664       25.0664       1814.29       1839.36    
  38  0.152977      -1.87747      -263.065       263.065       1898.07       2161.14    
  39  0.941831     -0.599291E-01  -8.39708       8.39708       1751.28       1759.68    
  40  0.936595     -0.655045E-01  -9.17828       9.17828       1944.15       1953.33    
  41  0.856621     -0.154759      -21.6844       21.6844       1969.92       1991.60    
  42  0.484786     -0.724047      -101.451       101.451       1868.22       1969.68    
  43  0.188261      -1.66993      -233.985       233.985       1886.43       2120.41    
  44  0.957606     -0.433189E-01  -6.06971       6.06971       1889.21       1895.28    
  45  0.234891      -1.44863      -202.978       202.978       1843.54       2046.52    
  46  0.758920     -0.275858      -38.6524       38.6524       1847.39       1886.05    
  47  0.135340      -1.99997      -280.229       280.229       1839.10       2119.33    
  48  0.779121E-01  -2.55217      -357.603       357.603       1932.26       2289.86    
  49  0.573767     -0.555531      -77.8393       77.8393       1896.60       1974.44    
  50  0.982512     -0.176424E-01  -2.47200       2.47200       2290.85       2293.33    
  51  0.109579      -2.21111      -309.814       309.814       1852.37       2162.19    
loop,thermsimp(1:2)       65   140.253       169.532    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    156       1742.17          0.87          1.12         21.91          0.24          0.05         24.19
Just calling func    0   0         24.18


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1742.17
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    140.117               201
loop is:       65
neval is:      155
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       65      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    560.467      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    140.117               201
loop is:       66
neval is:      155


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      201
neval,tstepnext:      155     201

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.255462      -1.36468      -191.215       191.215       1305.70       1496.91    
   2  0.513427E-01  -2.96923      -416.040       416.040       1751.28       2167.32    
   3  0.288453      -1.24322      -174.197       174.197       1677.28       1851.48    
   4  0.107044      -2.23452      -313.093       313.093       1672.43       1985.52    
   5  0.756779     -0.278684      -39.0483       39.0483       1821.56       1860.61    
   6  0.333762      -1.09733      -153.754       153.754       1706.19       1859.95    
   7  0.270335      -1.30809      -183.286       183.286       1814.29       1997.57    
   8  0.666278E-01  -2.70863      -379.525       379.525       1779.82       2159.34    
   9  0.517510     -0.658727      -92.2987       92.2987       1707.38       1799.68    
  10  0.719680     -0.328949      -46.0913       46.0913       1755.02       1801.11    
  11  0.401542     -0.912442      -127.849       127.849       1835.24       1963.09    
  12  0.408125     -0.896181      -125.570       125.570       1847.39       1972.96    
  13  0.481086     -0.731710      -102.525       102.525       1756.37       1858.90    
  14  0.166952E-01  -4.09263      -573.447       573.447       1889.21       2462.65    
  15  0.913266     -0.907286E-01  -12.7126       12.7126       1836.91       1849.62    
  16  0.972084     -0.283134E-01  -3.96719       3.96719       1842.47       1846.44    
  17  0.889421     -0.117184      -16.4195       16.4195       1881.57       1897.99    
  18  0.171754      -1.76169      -246.843       246.843       1869.58       2116.42    
  19  0.925876     -0.770155E-01  -10.7912       10.7912       1840.65       1851.44    
  20  0.992897     -0.712866E-02 -0.998845      0.998845       1785.11       1786.11    
  21  0.118575E-01  -4.43479      -621.389       621.389       1892.75       2514.14    
  22  0.492413     -0.708438      -99.2641       99.2641       1944.15       2043.41    
  23  0.952433     -0.487360E-01  -6.82874       6.82874       1799.18       1806.01    
  24  0.591826     -0.524543      -73.4973       73.4973       1868.22       1941.72    
  25  0.762199     -0.271548      -38.0484       38.0484       1896.60       1934.65    
  26  0.613492     -0.488588      -68.4594       68.4594       1776.25       1844.71    
  27  0.134863      -2.00350      -280.724       280.724       1873.15       2153.87    
  28  0.633670     -0.456227      -63.9250       63.9250       1969.92       2033.84    
  29  0.829625     -0.186782      -26.1713       26.1713       1932.97       1959.14    
  30  0.148219      -1.90906      -267.492       267.492       1862.04       2129.53    
  31  0.198093      -1.61902      -226.852       226.852       1938.43       2165.28    
  32  0.321318      -1.13532      -159.078       159.078       1732.92       1892.00    
  33  0.475408     -0.743582      -104.188       104.188       1843.54       1947.73    
  34  0.196520      -1.62699      -227.969       227.969       1868.19       2096.16    
  35  0.637413     -0.450337      -63.0999       63.0999       1892.11       1955.21    
  36  0.596751     -0.516255      -72.3361       72.3361       1874.21       1946.54    
  37  0.351361      -1.04594      -146.554       146.554       1861.01       2007.56    
  38  0.111764      -2.19136      -307.047       307.047       1830.81       2137.86    
  39  0.213579      -1.54375      -216.305       216.305       1893.04       2109.35    
  40  0.799647     -0.223585      -31.3281       31.3281       1839.10       1870.43    
  41  0.670682     -0.399460      -55.9711       55.9711       1886.43       1942.40    
  42  0.104235      -2.26111      -316.819       316.819       1921.00       2237.82    
  43  0.607160E-01  -2.80155      -392.544       392.544       1898.07       2290.62    
  44  0.462312     -0.771516      -108.102       108.102       1852.37       1960.47    
  45  0.269658      -1.31060      -183.637       183.637       1867.99       2051.62    
  46  0.678606     -0.387714      -54.3253       54.3253       1922.03       1976.35    
  47  0.669051     -0.401895      -56.3123       56.3123       1848.50       1904.81    
  48  0.551912     -0.594367      -83.2808       83.2808       1975.54       2058.82    
  49  0.116070E-01  -4.45614      -624.381       624.381       1932.26       2556.64    
  50  0.911337     -0.928428E-01  -13.0088       13.0088       2290.85       2303.86    
  51  0.302404      -1.19599      -167.578       167.578       1742.17       1909.75    
loop,thermsimp(1:2)       66   191.215       416.040    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    157       1784.39          0.87          1.12         21.96          0.18          0.05         24.18
Just calling func    0   0         24.18


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1784.39
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    140.117               201
loop is:       66
neval is:      156
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       66      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    560.467      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    140.117               201
loop is:       67
neval is:      156


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      201
neval,tstepnext:      156     201

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.297913      -1.21095      -169.675       169.675       1305.70       1475.37    
   2  0.840396     -0.173882      -24.3637       24.3637       1785.11       1809.48    
   3  0.165782      -1.79708      -251.801       251.801       1707.38       1959.18    
   4  0.516202E-01  -2.96384      -415.284       415.284       1755.02       2170.30    
   5  0.163201      -1.81278      -254.000       254.000       1799.18       2053.18    
   6  0.201529      -1.60182      -224.442       224.442       1776.25       2000.69    
   7  0.791805     -0.233441      -32.7090       32.7090       1842.47       1875.18    
   8  0.306466      -1.18265      -165.709       165.709       1836.91       2002.62    
   9  0.625963     -0.468465      -65.6398       65.6398       1840.65       1906.29    
  10  0.255827      -1.36325      -191.015       191.015       1677.28       1868.29    
  11  0.275269      -1.29001      -180.752       180.752       1756.37       1937.13    
  12  0.546374     -0.604451      -84.6938       84.6938       1706.19       1790.88    
  13  0.738275E-01  -2.60602      -365.148       365.148       1821.56       2186.71    
  14  0.459460     -0.777704      -108.969       108.969       1839.10       1948.07    
  15  0.245891      -1.40287      -196.565       196.565       1732.92       1929.49    
  16  0.818144E-01  -2.50330      -350.755       350.755       1881.57       2232.33    
  17  0.791963     -0.233241      -32.6810       32.6810       1848.50       1881.18    
  18  0.652560     -0.426852      -59.8092       59.8092       1742.17       1801.98    
  19  0.743237     -0.296740      -41.5782       41.5782       1896.60       1938.18    
  20  0.146095      -1.92350      -269.515       269.515       1868.22       2137.74    
  21  0.747148     -0.291492      -40.8430       40.8430       1886.43       1927.27    
  22  0.935024E-01  -2.36977      -332.044       332.044       1874.21       2206.25    
  23  0.924202     -0.788243E-01  -11.0446       11.0446       1843.54       1854.58    
  24  0.193934      -1.64024      -229.825       229.825       1892.11       2121.93    
  25  0.112499      -2.18481      -306.128       306.128       1932.97       2239.10    
  26  0.609079     -0.495807      -69.4710       69.4710       1852.37       1921.84    
  27  0.387822     -0.947210      -132.720       132.720       1835.24       1967.96    
  28  0.151976      -1.88403      -263.985       263.985       1847.39       2111.38    
  29  0.820125     -0.198299      -27.7850       27.7850       1922.03       1949.81    
  30  0.100865      -2.29397      -321.424       321.424       1672.43       1993.85    
  31  0.246930      -1.39865      -195.975       195.975       1814.29       2010.26    
  32  0.101973      -2.28305      -319.893       319.893       1861.01       2180.90    
  33  0.389401     -0.943145      -132.151       132.151       1969.92       2102.07    
  34  0.573635     -0.555762      -77.8716       77.8716       1944.15       2022.02    
  35  0.730896E-01  -2.61607      -366.555       366.555       1867.99       2234.54    
  36  0.260104      -1.34667      -188.691       188.691       1975.54       2164.23    
  37  0.562102     -0.576073      -80.7175       80.7175       1868.19       1948.90    
  38  0.159056      -1.83850      -257.605       257.605       1893.04       2150.65    
  39  0.779134E-02  -4.85474      -680.231       680.231       1869.58       2549.81    
  40  0.693208     -0.366425      -51.3423       51.3423       1862.04       1913.38    
  41  0.600279     -0.510361      -71.5102       71.5102       1830.81       1902.32    
  42  0.419387     -0.868962      -121.756       121.756       1873.15       1994.90    
  43  0.952036     -0.491524E-01  -6.88708       6.88708       1779.82       1786.71    
  44  0.613955     -0.487834      -68.3537       68.3537       1938.43       2006.79    
  45  0.842752     -0.171082      -23.9715       23.9715       1751.28       1775.25    
  46  0.733219     -0.310311      -43.4798       43.4798       1921.00       1964.48    
  47  0.776088     -0.253489      -35.5182       35.5182       1898.07       1933.59    
  48  0.965215     -0.354047E-01  -4.96079       4.96079       2290.85       2295.82    
  49  0.487812     -0.717826      -100.580       100.580       1889.21       1989.79    
  50  0.864492     -0.145613      -20.4028       20.4028       1892.75       1913.15    
  51  0.334607      -1.09480      -153.400       153.400       1784.39       1937.79    
loop,thermsimp(1:2)       67   169.675       24.3637    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    158       1840.40          0.88          1.12         21.94          0.20          0.05         24.19
Just calling func    0   0         24.19


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1840.40
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    140.117               201
loop is:       67
neval is:      157
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       67      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    560.467      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    140.117               201
loop is:       68
neval is:      157


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      201
neval,tstepnext:      157     201

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.944296E-02  -4.66249      -653.293       653.293       1305.70       1958.99    
   2  0.714357     -0.336373      -47.1315       47.1315       1751.28       1798.41    
   3  0.997096     -0.290808E-02 -0.407472      0.407472       1779.82       1780.23    
   4  0.905437     -0.993373E-01  -13.9188       13.9188       1706.19       1720.11    
   5  0.307060      -1.18071      -165.438       165.438       1742.17       1907.61    
   6  0.179061      -1.72003      -241.005       241.005       1785.11       2026.12    
   7  0.384312     -0.956301      -133.994       133.994       1843.54       1977.53    
   8  0.901101     -0.104138      -14.5916       14.5916       1677.28       1691.87    
   9  0.606170     -0.500594      -70.1417       70.1417       1842.47       1912.61    
  10  0.515234     -0.663133      -92.9161       92.9161       1848.50       1941.41    
  11  0.639447     -0.447152      -62.6535       62.6535       1830.81       1893.47    
  12  0.820429     -0.197928      -27.7330       27.7330       1840.65       1868.39    
  13  0.521739     -0.650587      -91.1582       91.1582       1892.75       1983.91    
  14  0.767979     -0.263993      -36.9899       36.9899       1862.04       1899.03    
  15  0.530366     -0.634187      -88.8603       88.8603       1852.37       1941.23    
  16  0.732471     -0.311332      -43.6229       43.6229       1886.43       1930.05    
  17  0.440461     -0.819933      -114.886       114.886       1732.92       1847.81    
  18  0.595715     -0.517993      -72.5796       72.5796       1898.07       1970.65    
  19  0.407958     -0.896592      -125.628       125.628       1756.37       1882.00    
  20  0.544683     -0.607550      -85.1281       85.1281       1784.39       1869.51    
  21  0.611386E-01  -2.79461      -391.572       391.572       1896.60       2288.17    
  22  0.135041      -2.00218      -280.539       280.539       1839.10       2119.64    
  23  0.547242     -0.602864      -84.4714       84.4714       1868.19       1952.66    
  24  0.214436      -1.53975      -215.744       215.744       1922.03       2137.77    
  25  0.340220      -1.07816      -151.069       151.069       1707.38       1858.45    
  26  0.270394      -1.30787      -183.255       183.255       1921.00       2104.26    
  27  0.605229     -0.502149      -70.3595       70.3595       1835.24       1905.60    
  28  0.630206     -0.461709      -64.6932       64.6932       1889.21       1953.90    
  29  0.942476     -0.592449E-01  -8.30121       8.30121       1672.43       1680.73    
  30  0.293125      -1.22716      -171.945       171.945       1873.15       2045.09    
  31  0.526210     -0.642056      -89.9628       89.9628       1776.25       1866.21    
  32  0.972201     -0.281927E-01  -3.95027       3.95027       1836.91       1840.86    
  33  0.570000     -0.562119      -78.7623       78.7623       1938.43       2017.19    
  34  0.752945     -0.283763      -39.7600       39.7600       1814.29       1854.05    
  35  0.333005      -1.09960      -154.072       154.072       1944.15       2098.22    
  36  0.430444     -0.842939      -118.110       118.110       1799.18       1917.29    
  37  0.106505      -2.23957      -313.801       313.801       1969.92       2283.72    
  38  0.327953      -1.11488      -156.214       156.214       1847.39       2003.61    
  39  0.586631     -0.533359      -74.7327       74.7327       1892.11       1966.84    
  40  0.563274     -0.573989      -80.4256       80.4256       1868.22       1948.65    
  41  0.802100     -0.220522      -30.8988       30.8988       1893.04       1923.94    
  42  0.594871     -0.519411      -72.7782       72.7782       1975.54       2048.31    
  43  0.816066     -0.203261      -28.4802       28.4802       1755.02       1783.50    
  44  0.170795E-01  -4.06987      -570.258       570.258       1861.01       2431.26    
  45  0.554958     -0.588864      -82.5097       82.5097       1821.56       1904.07    
  46  0.674023     -0.394492      -55.2749       55.2749       1874.21       1929.48    
  47  0.371758     -0.989512      -138.647       138.647       1881.57       2020.22    
  48  0.309440      -1.17299      -164.356       164.356       1867.99       2032.34    
  49  0.182337      -1.70190      -238.465       238.465       1932.97       2171.44    
  50  0.443504     -0.813049      -113.922       113.922       2290.85       2404.78    
  51  0.407824     -0.896918      -125.673       125.673       1840.40       1966.08    
loop,thermsimp(1:2)       68   653.293       47.1315    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    159       3117.97          0.87          1.12         21.86          0.26          0.05         24.15
Just calling func    0   0         24.15


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    160       1716.46          0.87          1.12         21.92          0.27          0.05         24.22
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3   1716.46
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    140.117               201
loop is:       68
neval is:      159
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       68      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    560.467      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    140.117               201
loop is:       69
neval is:      159


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      201
neval,tstepnext:      159     201

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.521048     -0.651914      -91.3441       91.3441       1672.43       1763.78    
   2  0.554375     -0.589913      -82.6568       82.6568       1677.28       1759.94    
   3  0.404373     -0.905418      -126.864       126.864       1706.19       1833.06    
   4  0.632877     -0.457478      -64.1005       64.1005       1779.82       1843.92    
   5  0.395261     -0.928209      -130.058       130.058       1755.02       1885.07    
   6  0.715068     -0.335378      -46.9922       46.9922       1751.28       1798.27    
   7  0.918313     -0.852174E-01  -11.9404       11.9404       1836.91       1848.85    
   8  0.529514E-01  -2.93838      -411.717       411.717       1732.92       2144.64    
   9  0.284219      -1.25801      -176.268       176.268       1814.29       1990.56    
  10  0.809402     -0.211460      -29.6291       29.6291       1707.38       1737.01    
  11  0.604758     -0.502928      -70.4686       70.4686       1776.25       1846.72    
  12  0.624772     -0.470369      -65.9066       65.9066       1840.65       1906.56    
  13  0.622683     -0.473718      -66.3759       66.3759       1784.39       1850.76    
  14  0.491656     -0.709976      -99.4796       99.4796       1756.37       1855.85    
  15  0.823484     -0.194211      -27.2122       27.2122       1830.81       1858.03    
  16  0.185629E-01  -3.98659      -558.588       558.588       1862.04       2420.63    
  17  0.911253     -0.929346E-01  -13.0217       13.0217       1821.56       1834.59    
  18  0.825116     -0.192231      -26.9348       26.9348       1835.24       1862.18    
  19  0.902913     -0.102129      -14.3101       14.3101       1742.17       1756.48    
  20  0.869925     -0.139348      -19.5250       19.5250       1842.47       1861.99    
  21  0.135445      -1.99919      -280.120       280.120       1799.18       2079.30    
  22  0.516840     -0.660022      -92.4803       92.4803       1893.04       1985.52    
  23  0.127583      -2.05899      -288.499       288.499       1874.21       2162.71    
  24  0.237062E-01  -3.74202      -524.320       524.320       1886.43       2410.75    
  25  0.456233     -0.784753      -109.957       109.957       1852.37       1962.33    
  26  0.547397     -0.602581      -84.4318       84.4318       1848.50       1932.93    
  27  0.231746E-02  -6.06728      -850.128       850.128       1868.22       2718.35    
  28  0.467213     -0.760969      -106.625       106.625       1868.19       1974.81    
  29  0.397333     -0.922981      -129.325       129.325       1889.21       2018.53    
  30  0.291343      -1.23325      -172.800       172.800       1305.70       1478.50    
  31  0.964262     -0.363922E-01  -5.09916       5.09916       1840.40       1845.50    
  32  0.260485      -1.34521      -188.486       188.486       1892.11       2080.59    
  33  0.868574     -0.140902      -19.7428       19.7428       1898.07       1917.81    
  34  0.832573     -0.183235      -25.6743       25.6743       1843.54       1869.21    
  35  0.240383      -1.42552      -199.740       199.740       1892.75       2092.49    
  36  0.878342     -0.129719      -18.1758       18.1758       1847.39       1865.57    
  37  0.168707      -1.77959      -249.351       249.351       1938.43       2187.78    
  38  0.348015      -1.05551      -147.895       147.895       1881.57       2029.47    
  39  0.846224     -0.166971      -23.3955       23.3955       1785.11       1808.51    
  40  0.842580     -0.171286      -24.0001       24.0001       1867.99       1891.99    
  41  0.230401      -1.46794      -205.683       205.683       1873.15       2078.83    
  42  0.441962     -0.816531      -114.410       114.410       1975.54       2089.95    
  43  0.772036     -0.258724      -36.2516       36.2516       1944.15       1980.40    
  44  0.970063     -0.303946E-01  -4.25879       4.25879       1921.00       1925.26    
  45  0.610535     -0.493419      -69.1364       69.1364       1839.10       1908.24    
  46  0.548201     -0.601114      -84.2262       84.2262       1922.03       2006.26    
  47  0.322533      -1.13155      -158.549       158.549       1932.97       2091.52    
  48  0.194318E-01  -3.94084      -552.178       552.178       1969.92       2522.09    
  49  0.219930      -1.51445      -212.199       212.199       1896.60       2108.80    
  50  0.538995E-01  -2.92063      -409.230       409.230       2290.85       2700.08    
  51  0.189941      -1.66104      -232.740       232.740       1716.46       1949.19    
loop,thermsimp(1:2)       69   91.3441       82.6568    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    161       1724.85          0.87          1.12         21.95          0.16          0.05         24.16
Just calling func    0   0         24.16


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  160    1724.9       0.8440     -2.238      3.169     -102.6     0.6409    
                       1.126     0.9370     -99.70      3.538     0.4532E-01

                       2.410     -1.631      1.540      7000.      7000.    

                      -2.187      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -8.073     -4.741     -7.454      7.591    

                      -18.41     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.5979E-02 0.1950    -0.3992E-01 0.1006    

                     -0.2486    -0.7395E-01 0.1568     0.9889E-01 0.8870E-01



                     -0.6264    -0.6149      0.000     0.4107E-01-0.4403E-01

                     -0.1550E-02 0.1741    -0.7116    -0.5075E-01 0.3402    

                      0.5091E-01 0.7218E-01-0.5367     -1.158      7000.    



                     -0.2390    -0.6590     -2.142     -1.982    -0.3807    

                     -0.3252      9.148      8.743    -0.1672E+05 -6.000    

                     -0.6245     -2.145      9.448      8.778    -0.1969E+05



                      -6.000     0.8201    -0.3659      8.904      9.135    

                     -0.1944E+05 -6.000    -0.4134    -0.3977      9.129    

                       8.812    -0.1891E+05 -6.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1724.85
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    140.117               201
loop is:       69
neval is:      160
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       69      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    560.467      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    140.117               201
loop is:       70
neval is:      160


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      201
neval,tstepnext:      160     201

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.242177      -1.41809      -198.698       198.698       1305.70       1504.39    
   2  0.384023     -0.957054      -134.099       134.099       1707.38       1841.48    
   3  0.672379     -0.396933      -55.6170       55.6170       1742.17       1797.79    
   4  0.204591      -1.58674      -222.329       222.329       1677.28       1899.61    
   5  0.145151      -1.92998      -270.423       270.423       1672.43       1942.85    
   6  0.235757      -1.44495      -202.462       202.462       1751.28       1953.74    
   7  0.882595     -0.124889      -17.4991       17.4991       1785.11       1802.61    
   8  0.215562      -1.53451      -215.010       215.010       1706.19       1921.20    
   9  0.248905      -1.39068      -194.858       194.858       1821.56       2016.42    
  10  0.695481     -0.363152      -50.8837       50.8837       1779.82       1830.70    
  11  0.515786     -0.662063      -92.7662       92.7662       1840.40       1933.17    
  12  0.956817     -0.441428E-01  -6.18515       6.18515       1776.25       1782.43    
  13  0.256477      -1.36072      -190.659       190.659       1836.91       2027.57    
  14  0.870409     -0.138792      -19.4471       19.4471       1784.39       1803.83    
  15  0.296335      -1.21627      -170.419       170.419       1756.37       1926.79    
  16  0.563087     -0.574322      -80.4722       80.4722       1830.81       1911.29    
  17  0.860973     -0.149692      -20.9744       20.9744       1842.47       1863.44    
  18  0.336353      -1.08959      -152.670       152.670       1835.24       1987.91    
  19  0.432238     -0.838780      -117.527       117.527       1847.39       1964.92    
  20  0.411587     -0.887734      -124.387       124.387       1843.54       1967.93    
  21  0.685679     -0.377346      -52.8725       52.8725       1755.02       1807.89    
  22  0.178038E-01  -4.02835      -564.439       564.439       1867.99       2432.43    
  23  0.330516      -1.10710      -155.123       155.123       1840.65       1995.78    
  24  0.987115     -0.129685E-01  -1.81710       1.81710       1839.10       1840.92    
  25  0.702947     -0.352474      -49.3875       49.3875       1898.07       1947.46    
  26  0.159040      -1.83860      -257.619       257.619       1921.00       2178.62    
  27  0.329714      -1.10953      -155.464       155.464       1848.50       2003.96    
  28  0.542452     -0.611656      -85.7034       85.7034       1716.46       1802.16    
  29  0.484074     -0.725518      -101.657       101.657       1852.37       1954.03    
  30  0.574330     -0.554551      -77.7020       77.7020       1868.19       1945.89    
  31  0.987944     -0.121288E-01  -1.69945       1.69945       1944.15       1945.85    
  32  0.565195E-01  -2.87317      -402.580       402.580       1893.04       2295.62    
  33  0.662626     -0.411545      -57.6644       57.6644       1814.29       1871.95    
  34  0.462195     -0.771769      -108.138       108.138       1922.03       2030.17    
  35  0.413957     -0.881994      -123.582       123.582       1889.21       2012.79    
  36  0.627825     -0.465493      -65.2235       65.2235       1881.57       1946.79    
  37  0.373783E-01  -3.28667      -460.517       460.517       1873.15       2333.66    
  38  0.318481      -1.14419      -160.321       160.321       1799.18       1959.50    
  39  0.193037      -1.64487      -230.475       230.475       1892.11       2122.58    
  40  0.246573      -1.40010      -196.178       196.178       1975.54       2171.71    
  41  0.913643     -0.903152E-01  -12.6547       12.6547       1932.97       1945.63    
  42  0.593287     -0.522077      -73.1517       73.1517       1892.75       1965.90    
  43  0.323913      -1.12728      -157.951       157.951       1896.60       2054.55    
  44  0.270579E-01  -3.60978      -505.790       505.790       1732.92       2238.71    
  45  0.684823     -0.378595      -53.0475       53.0475       1874.21       1927.26    
  46  0.279340      -1.27532      -178.694       178.694       1938.43       2117.13    
  47  0.285511      -1.25348      -175.633       175.633       1886.43       2062.06    
  48  0.361874      -1.01646      -142.423       142.423       1862.04       2004.46    
  49  0.779291     -0.249370      -34.9410       34.9410       1969.92       2004.86    
  50  0.590933     -0.526053      -73.7090       73.7090       2290.85       2364.56    
  51  0.493821E-01  -3.00817      -421.495       421.495       1724.85       2146.35    
loop,thermsimp(1:2)       70   198.698       134.099    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    162       1705.66          0.87          1.11         21.95          0.16          0.05         24.14
Just calling func    0   0         24.14


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1705.66
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    140.117               201
loop is:       70
neval is:      161
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       70      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    560.467      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    140.117               201
loop is:       71
neval is:      161


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      201
neval,tstepnext:      161     201

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.810305     -0.210344      -29.4727       29.4727       1305.70       1335.17    
   2  0.601567     -0.508218      -71.2099       71.2099       1776.25       1847.46    
   3  0.190401      -1.65862      -232.401       232.401       1742.17       1974.57    
   4  0.827263     -0.189632      -26.5707       26.5707       1716.46       1743.03    
   5  0.581677     -0.541840      -75.9210       75.9210       1785.11       1861.03    
   6  0.680336     -0.385169      -53.9687       53.9687       1784.39       1838.36    
   7  0.641383     -0.444128      -62.2299       62.2299       1755.02       1817.25    
   8  0.593931     -0.520992      -72.9998       72.9998       1779.82       1852.82    
   9  0.326400      -1.11963      -156.879       156.879       1839.10       1995.98    
  10  0.964323     -0.363286E-01  -5.09025       5.09025       1707.38       1712.47    
  11  0.481751     -0.730328      -102.331       102.331       1842.47       1944.80    
  12  0.230624E-01  -3.76955      -528.178       528.178       1814.29       2342.47    
  13  0.214859      -1.53777      -215.468       215.468       1677.28       1892.75    
  14  0.325804      -1.12146      -157.135       157.135       1830.81       1987.95    
  15  0.668745     -0.402353      -56.3764       56.3764       1706.19       1762.57    
  16  0.803263     -0.219073      -30.6958       30.6958       1756.37       1787.07    
  17  0.465531     -0.764577      -107.130       107.130       1874.21       1981.34    
  18  0.589796     -0.527978      -73.9787       73.9787       1840.40       1914.38    
  19  0.783335     -0.244195      -34.2159       34.2159       1672.43       1706.65    
  20  0.937099     -0.649659E-01  -9.10282       9.10282       1932.97       1942.07    
  21  0.504081     -0.685019      -95.9826       95.9826       1944.15       2040.13    
  22  0.368431E-01  -3.30109      -462.538       462.538       1868.19       2330.72    
  23  0.462712     -0.770651      -107.981       107.981       1881.57       1989.55    
  24  0.172447      -1.75767      -246.279       246.279       1898.07       2144.35    
  25  0.361979      -1.01617      -142.383       142.383       1751.28       1893.66    
  26  0.616189     -0.484202      -67.8449       67.8449       1852.37       1920.22    
  27  0.495582     -0.702023      -98.3653       98.3653       1799.18       1897.55    
  28  0.492859     -0.707532      -99.1372       99.1372       1847.39       1946.53    
  29  0.189027      -1.66586      -233.416       233.416       1892.75       2126.16    
  30  0.336237      -1.08994      -152.719       152.719       1843.54       1996.26    
  31  0.997382     -0.262184E-02 -0.367363      0.367363       1835.24       1835.61    
  32  0.629287     -0.463168      -64.8976       64.8976       1840.65       1905.55    
  33  0.226178      -1.48644      -208.275       208.275       1848.50       2056.77    
  34  0.522315     -0.649483      -91.0036       91.0036       1862.04       1953.04    
  35  0.238835E-02  -6.03715      -845.907       845.907       1969.92       2815.82    
  36  0.123092E-01  -4.39741      -616.151       616.151       1889.21       2505.36    
  37  0.488141     -0.717152      -100.485       100.485       1821.56       1922.05    
  38  0.925188     -0.777584E-01  -10.8953       10.8953       1836.91       1847.80    
  39  0.676413     -0.390952      -54.7789       54.7789       1922.03       1976.81    
  40  0.638827     -0.448121      -62.7894       62.7894       1896.60       1959.39    
  41  0.789998     -0.235725      -33.0290       33.0290       1886.43       1919.46    
  42  0.453703E-01  -3.09290      -433.367       433.367       1938.43       2371.80    
  43  0.866893     -0.142840      -20.0143       20.0143       1892.11       1912.12    
  44  0.122493E-01  -4.40228      -616.834       616.834       1724.85       2341.69    
  45  0.172311      -1.75846      -246.389       246.389       1975.54       2221.93    
  46  0.899580     -0.105827      -14.8281       14.8281       1921.00       1935.83    
  47  0.857845     -0.153332      -21.4844       21.4844       1732.92       1754.41    
  48  0.176813      -1.73266      -242.775       242.775       1893.04       2135.82    
  49  0.795271E-01  -2.53166      -354.728       354.728       1873.15       2227.87    
  50  0.461368     -0.773559      -108.389       108.389       2290.85       2399.24    
  51  0.727625     -0.317970      -44.5529       44.5529       1705.66       1750.21    
loop,thermsimp(1:2)       71   29.4727       71.2099    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    163       1699.82          0.87          1.12         21.87          0.22          0.05         24.12
Just calling func    0   0         24.12


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    164       1660.61          0.87          1.11         22.07          0.15          0.05         24.25
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1660.61
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    140.117               201
loop is:       71
neval is:      163
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       71      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    560.467      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    140.117               201
loop is:       72
neval is:      163


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      201
neval,tstepnext:      163     201

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.870330     -0.138883      -19.4598       19.4598       1305.70       1325.16    
   2  0.470451     -0.754063      -105.657       105.657       1672.43       1778.09    
   3  0.615627     -0.485114      -67.9727       67.9727       1707.38       1775.35    
   4  0.291899      -1.23135      -172.533       172.533       1716.46       1888.99    
   5  0.584822     -0.536448      -75.1654       75.1654       1705.66       1780.83    
   6  0.681731     -0.383120      -53.6816       53.6816       1732.92       1786.60    
   7  0.680149     -0.385444      -54.0072       54.0072       1706.19       1760.20    
   8  0.560478     -0.578966      -81.1229       81.1229       1756.37       1837.50    
   9  0.392299     -0.935730      -131.112       131.112       1755.02       1886.13    
  10  0.586793     -0.533083      -74.6939       74.6939       1835.24       1909.94    
  11  0.461418     -0.773452      -108.374       108.374       1784.39       1892.76    
  12  0.142886      -1.94571      -272.627       272.627       1776.25       2048.87    
  13  0.960325     -0.404831E-01  -5.67237       5.67237       1836.91       1842.58    
  14  0.547176     -0.602984      -84.4882       84.4882       1779.82       1864.31    
  15  0.817596     -0.201386      -28.2176       28.2176       1785.11       1813.33    
  16  0.184065      -1.69247      -237.143       237.143       1677.28       1914.42    
  17  0.763954     -0.269247      -37.7261       37.7261       1751.28       1789.01    
  18  0.740640     -0.300240      -42.0687       42.0687       1799.18       1841.25    
  19  0.257299      -1.35751      -190.211       190.211       1840.65       2030.86    
  20  0.274950      -1.29117      -180.914       180.914       1892.11       2073.02    
  21  0.850599     -0.161814      -22.6729       22.6729       1840.40       1863.08    
  22  0.265651      -1.32557      -185.735       185.735       1886.43       2072.16    
  23  0.388810     -0.944665      -132.363       132.363       1852.37       1984.73    
  24  0.921262     -0.820106E-01  -11.4911       11.4911       1821.56       1833.06    
  25  0.622168     -0.474545      -66.4918       66.4918       1921.00       1987.49    
  26  0.831499     -0.184526      -25.8551       25.8551       1932.97       1958.83    
  27  0.777776     -0.251317      -35.2137       35.2137       1842.47       1877.68    
  28  0.519638     -0.654624      -91.7238       91.7238       1847.39       1939.12    
  29  0.343480      -1.06863      -149.733       149.733       1862.04       2011.77    
  30  0.379182     -0.969738      -135.877       135.877       1896.60       2032.48    
  31  0.509964     -0.673415      -94.3568       94.3568       1742.17       1836.53    
  32  0.457294E-01  -3.08501      -432.262       432.262       1922.03       2354.29    
  33  0.952238     -0.489400E-01  -6.85732       6.85732       1874.21       1881.07    
  34  0.198116      -1.61890      -226.835       226.835       1830.81       2057.65    
  35  0.863922     -0.146273      -20.4953       20.4953       1881.57       1902.07    
  36  0.765944     -0.266646      -37.3616       37.3616       1839.10       1876.46    
  37  0.849389     -0.163238      -22.8724       22.8724       1843.54       1866.41    
  38  0.488339     -0.716745      -100.428       100.428       1944.15       2044.58    
  39  0.969632     -0.308388E-01  -4.32104       4.32104       1848.50       1852.82    
  40  0.971690     -0.287184E-01  -4.02393       4.02393       1892.75       1896.77    
  41  0.690522     -0.370307      -51.8863       51.8863       1893.04       1944.93    
  42  0.266028      -1.32415      -185.536       185.536       1898.07       2083.61    
  43  0.581296     -0.542495      -76.0127       76.0127       1975.54       2051.55    
  44  0.636654     -0.451529      -63.2669       63.2669       1873.15       1936.41    
  45  0.947680     -0.537383E-01  -7.52965       7.52965       1868.19       1875.72    
  46  0.792806     -0.232176      -32.5318       32.5318       1724.85       1757.38    
  47  0.420588     -0.866101      -121.355       121.355       1814.29       1935.64    
  48  0.780043     -0.248407      -34.8060       34.8060       1938.43       1973.24    
  49  0.834700E-01  -2.48327      -347.948       347.948       2290.85       2638.80    
  50  0.707823     -0.345562      -48.4190       48.4190       1889.21       1937.63    
  51  0.836500     -0.178529      -25.0150       25.0150       1660.61       1685.62    
loop,thermsimp(1:2)       72   19.4598       105.657    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    165       1694.67          0.87          1.12         22.26          0.20          0.05         24.50
Just calling func    0   0         24.50


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1694.67
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    140.117               201
loop is:       72
neval is:      164
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       72      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    560.467      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    140.117               201
loop is:       73
neval is:      164


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      201
neval,tstepnext:      164     201

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.741909     -0.298528      -41.8289       41.8289       1305.70       1347.52    
   2  0.823468     -0.194230      -27.2149       27.2149       1660.61       1687.82    
   3  0.352913      -1.04153      -145.937       145.937       1724.85       1870.79    
   4  0.268511      -1.31486      -184.234       184.234       1706.19       1890.43    
   5  0.137541      -1.98383      -277.969       277.969       1707.38       1985.35    
   6  0.953738     -0.473661E-01  -6.63680       6.63680       1672.43       1679.07    
   7  0.366602      -1.00348      -140.604       140.604       1705.66       1846.27    
   8  0.861530     -0.149046      -20.8838       20.8838       1732.92       1753.80    
   9  0.190086      -1.66028      -232.633       232.633       1751.28       1983.91    
  10  0.931621     -0.708293E-01  -9.92438       9.92438       1785.11       1795.04    
  11  0.135562      -1.99833      -280.000       280.000       1821.56       2101.56    
  12  0.577052     -0.549824      -77.0396       77.0396       1742.17       1819.21    
  13  0.937511     -0.645266E-01  -9.04126       9.04126       1756.37       1765.42    
  14  0.836727     -0.178258      -24.9769       24.9769       1799.18       1824.16    
  15  0.124731      -2.08159      -291.666       291.666       1836.91       2128.58    
  16  0.830758     -0.185417      -25.9801       25.9801       1848.50       1874.48    
  17  0.925849     -0.770442E-01  -10.7952       10.7952       1840.40       1851.20    
  18  0.945668     -0.558633E-01  -7.82740       7.82740       1779.82       1787.65    
  19  0.700762     -0.355587      -49.8237       49.8237       1843.54       1893.36    
  20  0.585168E-01  -2.83844      -397.713       397.713       1868.19       2265.90    
  21  0.241985      -1.41888      -198.809       198.809       1839.10       2037.91    
  22  0.426115     -0.853047      -119.526       119.526       1842.47       1962.00    
  23  0.730656     -0.313813      -43.9705       43.9705       1874.21       1918.18    
  24  0.227460      -1.48078      -207.483       207.483       1755.02       1962.50    
  25  0.824070     -0.193500      -27.1126       27.1126       1716.46       1743.57    
  26  0.912829     -0.912064E-01  -12.7796       12.7796       1784.39       1797.17    
  27  0.130860      -2.03363      -284.946       284.946       1892.75       2177.69    
  28  0.126999      -2.06358      -289.142       289.142       1881.57       2170.71    
  29  0.394828E-01  -3.23189      -452.842       452.842       1835.24       2288.08    
  30  0.927793     -0.749466E-01  -10.5013       10.5013       1677.28       1687.78    
  31  0.161762      -1.82163      -255.241       255.241       1814.29       2069.53    
  32  0.510374     -0.672611      -94.2442       94.2442       1873.15       1967.39    
  33  0.930607     -0.719186E-01  -10.0770       10.0770       1889.21       1899.28    
  34  0.825283E-01  -2.49461      -349.537       349.537       1847.39       2196.93    
  35  0.569143     -0.563624      -78.9732       78.9732       1893.04       1972.02    
  36  0.732951     -0.310676      -43.5310       43.5310       1932.97       1976.50    
  37  0.554950     -0.588877      -82.5117       82.5117       1938.43       2020.94    
  38  0.614368     -0.487160      -68.2594       68.2594       1852.37       1920.63    
  39  0.127889      -2.05659      -288.164       288.164       1921.00       2209.17    
  40  0.510007     -0.673330      -94.3449       94.3449       1862.04       1956.38    
  41  0.206107      -1.57936      -221.295       221.295       1840.65       2061.95    
  42  0.812962E-01  -2.50966      -351.645       351.645       1896.60       2248.24    
  43  0.711913     -0.339799      -47.6116       47.6116       1944.15       1991.76    
  44  0.649899     -0.430939      -60.3818       60.3818       1776.25       1836.63    
  45  0.102708      -2.27587      -318.887       318.887       1975.54       2294.42    
  46  0.152702      -1.87927      -263.317       263.317       1830.81       2094.13    
  47  0.827734     -0.189064      -26.4910       26.4910       1886.43       1912.92    
  48  0.558329     -0.582808      -81.6612       81.6612       1892.11       1973.77    
  49  0.174746      -1.74442      -244.423       244.423       1898.07       2142.49    
  50  0.107247      -2.23262      -312.828       312.828       1922.03       2234.86    
  51  0.988891     -0.111711E-01  -1.56526       1.56526       1694.67       1696.24    
loop,thermsimp(1:2)       73   41.8289       27.2149    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    166       1962.20          0.88          1.12         21.91          0.16          0.05         24.11
Just calling func    0   0         24.12


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1962.20
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    140.117               201
loop is:       73
neval is:      165
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       73      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    560.467      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    140.117               201
loop is:       74
neval is:      165


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      201
neval,tstepnext:      165     201

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.835960     -0.179175      -25.1054       25.1054       1305.70       1330.80    
   2  0.439366     -0.822423      -115.235       115.235       1672.43       1787.67    
   3  0.603094     -0.505682      -70.8545       70.8545       1677.28       1748.13    
   4  0.695854E-01  -2.66520      -373.440       373.440       1660.61       2034.05    
   5  0.273021      -1.29821      -181.901       181.901       1694.67       1876.58    
   6  0.418319     -0.871511      -122.113       122.113       1716.46       1838.57    
   7  0.688437     -0.373331      -52.3100       52.3100       1732.92       1785.23    
   8  0.400930     -0.913969      -128.062       128.062       1756.37       1884.44    
   9  0.569492     -0.563010      -78.8872       78.8872       1779.82       1858.71    
  10  0.812441     -0.207712      -29.1039       29.1039       1785.11       1814.22    
  11  0.222094      -1.50465      -210.827       210.827       1784.39       1995.21    
  12  0.695761     -0.362749      -50.8273       50.8273       1742.17       1793.00    
  13  0.909536E-01  -2.39741      -335.917       335.917       1799.18       2135.10    
  14  0.297191      -1.21338      -170.015       170.015       1776.25       1946.26    
  15  0.806729     -0.214767      -30.0925       30.0925       1705.66       1735.75    
  16  0.407021     -0.898891      -125.950       125.950       1840.40       1966.35    
  17  0.520426     -0.653107      -91.5114       91.5114       1724.85       1816.36    
  18  0.826852     -0.190129      -26.6403       26.6403       1848.50       1875.14    
  19  0.729268     -0.315714      -44.2369       44.2369       1706.19       1750.43    
  20  0.344086      -1.06687      -149.486       149.486       1843.54       1993.03    
  21  0.280849      -1.26994      -177.940       177.940       1889.21       2067.15    
  22  0.301244E-01  -3.50242      -490.748       490.748       1886.43       2377.18    
  23  0.503253     -0.686663      -96.2131       96.2131       1874.21       1970.42    
  24  0.549007     -0.599644      -84.0202       84.0202       1852.37       1936.39    
  25  0.814230     -0.205513      -28.7958       28.7958       1862.04       1890.84    
  26  0.641489     -0.443963      -62.2067       62.2067       1842.47       1904.68    
  27  0.248696      -1.39152      -194.976       194.976       1755.02       1949.99    
  28  0.684472     -0.379107      -53.1193       53.1193       1873.15       1926.27    
  29  0.815126     -0.204413      -28.6417       28.6417       1893.04       1921.69    
  30  0.388210     -0.946208      -132.580       132.580       1892.11       2024.69    
  31  0.670538     -0.399675      -56.0012       56.0012       1932.97       1988.97    
  32  0.851104     -0.161221      -22.5898       22.5898       1751.28       1773.87    
  33  0.381078     -0.964752      -135.178       135.178       1707.38       1842.56    
  34  0.776256     -0.253273      -35.4878       35.4878       1944.15       1979.64    
  35  0.168040      -1.78355      -249.906       249.906       1938.43       2188.34    
  36  0.229069      -1.47373      -206.494       206.494       1839.10       2045.59    
  37  0.917563     -0.860337E-01  -12.0548       12.0548       1840.65       1852.71    
  38  0.161815      -1.82130      -255.195       255.195       1814.29       2069.48    
  39  0.355170      -1.03516      -145.043       145.043       1830.81       1975.86    
  40  0.221709      -1.50639      -211.070       211.070       1821.56       2032.63    
  41  0.424436     -0.856993      -120.079       120.079       1836.91       1956.99    
  42  0.337698      -1.08560      -152.111       152.111       1898.07       2050.18    
  43  0.574481     -0.554289      -77.6653       77.6653       1881.57       1959.24    
  44  0.614536     -0.486888      -68.2212       68.2212       1892.75       1960.97    
  45  0.345602      -1.06247      -148.870       148.870       1847.39       1996.26    
  46  0.330006      -1.10864      -155.340       155.340       1921.00       2076.34    
  47  0.934389     -0.678626E-01  -9.50869       9.50869       1922.03       1931.54    
  48  0.884466     -0.122771      -17.2023       17.2023       1896.60       1913.80    
  49  0.928979     -0.736686E-01  -10.3222       10.3222       1868.19       1878.51    
  50  0.788461     -0.237672      -33.3018       33.3018       1835.24       1868.54    
  51  0.963462     -0.372219E-01  -5.21542       5.21542       1962.20       1967.42    
loop,thermsimp(1:2)       74   25.1054       115.235    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    167       1827.20          0.87          1.11         21.93          0.15          0.05         24.12
Just calling func    0   0         24.12


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1827.20
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    140.117               201
loop is:       74
neval is:      166
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       74      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    560.467      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    140.117               201
loop is:       75
neval is:      166


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      201
neval,tstepnext:      166     201

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.374776     -0.981426      -137.514       137.514       1305.70       1443.21    
   2  0.269095      -1.31269      -183.930       183.930       1705.66       1889.59    
   3  0.301960      -1.19746      -167.784       167.784       1677.28       1845.06    
   4  0.927593     -0.751619E-01  -10.5315       10.5315       1706.19       1716.72    
   5  0.783450     -0.244048      -34.1952       34.1952       1751.28       1785.48    
   6  0.716705     -0.333091      -46.6717       46.6717       1732.92       1779.59    
   7  0.728578     -0.316661      -44.3696       44.3696       1672.43       1716.80    
   8  0.752541     -0.284300      -39.8352       39.8352       1742.17       1782.00    
   9  0.111710      -2.19185      -307.115       307.115       1785.11       2092.23    
  10  0.202752E-01  -3.89836      -546.226       546.226       1724.85       2271.08    
  11  0.967738     -0.327937E-01  -4.59495       4.59495       1716.46       1721.05    
  12  0.530869     -0.633240      -88.7277       88.7277       1707.38       1796.11    
  13  0.752699E-01  -2.58668      -362.437       362.437       1840.65       2203.09    
  14  0.658334     -0.418043      -58.5749       58.5749       1779.82       1838.39    
  15  0.383542     -0.958305      -134.275       134.275       1835.24       1969.52    
  16  0.280803      -1.27010      -177.963       177.963       1848.50       2026.46    
  17  0.976909     -0.233616E-01  -3.27335       3.27335       1694.67       1697.95    
  18  0.611898     -0.491189      -68.8239       68.8239       1868.19       1937.01    
  19  0.860469     -0.150278      -21.0565       21.0565       1756.37       1777.43    
  20  0.375446     -0.979641      -137.264       137.264       1862.04       1999.30    
  21  0.964573     -0.360702E-01  -5.05404       5.05404       1842.47       1847.52    
  22  0.865663     -0.144259      -20.2131       20.2131       1896.60       1916.81    
  23  0.498009     -0.697137      -97.6806       97.6806       1893.04       1990.72    
  24  0.732547     -0.311228      -43.6083       43.6083       1873.15       1916.75    
  25  0.293766      -1.22497      -171.639       171.639       1922.03       2093.67    
  26  0.805097     -0.216793      -30.3764       30.3764       1852.37       1882.75    
  27  0.236791      -1.44058      -201.849       201.849       1776.25       1978.10    
  28  0.759809     -0.274688      -38.4885       38.4885       1755.02       1793.50    
  29  0.279804      -1.27367      -178.462       178.462       1836.91       2015.37    
  30  0.862550     -0.147862      -20.7180       20.7180       1881.57       1902.29    
  31  0.784800     -0.242327      -33.9540       33.9540       1892.75       1926.70    
  32  0.231425      -1.46350      -205.061       205.061       1840.40       2045.46    
  33  0.839725     -0.174681      -24.4758       24.4758       1962.20       1986.68    
  34  0.204862      -1.58542      -222.144       222.144       1874.21       2096.35    
  35  0.741170     -0.299525      -41.9685       41.9685       1830.81       1872.78    
  36  0.838703     -0.175898      -24.6463       24.6463       1944.15       1968.79    
  37  0.287711      -1.24580      -174.557       174.557       1932.97       2107.53    
  38  0.937479     -0.645611E-01  -9.04610       9.04610       1843.54       1852.59    
  39  0.188655      -1.66783      -233.692       233.692       1784.39       2018.08    
  40  0.818317     -0.200505      -28.0942       28.0942       1847.39       1875.49    
  41  0.903487     -0.101493      -14.2209       14.2209       1892.11       1906.33    
  42  0.148828      -1.90496      -266.918       266.918       1821.56       2088.48    
  43  0.573616E-01  -2.85838      -400.507       400.507       1660.61       2061.12    
  44  0.792726E-01  -2.53486      -355.177       355.177       1839.10       2194.28    
  45  0.150401      -1.89445      -265.445       265.445       1898.07       2163.52    
  46  0.511444     -0.670518      -93.9508       93.9508       1889.21       1983.16    
  47  0.179810      -1.71585      -240.420       240.420       1814.29       2054.71    
  48  0.167282      -1.78808      -250.540       250.540       1921.00       2171.54    
  49  0.589016     -0.529302      -74.1641       74.1641       1799.18       1873.35    
  50  0.974997     -0.253206E-01  -3.54785       3.54785       1938.43       1941.98    
  51  0.750240     -0.287363      -40.2643       40.2643       1827.20       1867.47    
loop,thermsimp(1:2)       75   137.514       183.930    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    168       1840.99          0.87          1.13         21.96          0.16          0.05         24.16
Just calling func    0   0         24.16


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1840.99
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    140.117               201
loop is:       75
neval is:      167
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       75      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    560.467      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    140.117               201
loop is:       76
neval is:      167


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      201
neval,tstepnext:      167     201

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.497287E-01  -3.00117      -420.515       420.515       1305.70       1726.21    
   2  0.604222     -0.503814      -70.5928       70.5928       1694.67       1765.27    
   3  0.106168      -2.24273      -314.244       314.244       1706.19       2020.44    
   4  0.342113      -1.07261      -150.291       150.291       1672.43       1822.72    
   5  0.473442     -0.747725      -104.769       104.769       1716.46       1821.22    
   6  0.100866E-01  -4.59655      -644.054       644.054       1756.37       2400.43    
   7  0.911848     -0.922817E-01  -12.9302       12.9302       1732.92       1745.85    
   8  0.633547     -0.456421      -63.9522       63.9522       1742.17       1806.12    
   9  0.729024     -0.316048      -44.2837       44.2837       1751.28       1795.56    
  10  0.620163     -0.477772      -66.9440       66.9440       1755.02       1821.96    
  11  0.867018     -0.142695      -19.9940       19.9940       1707.38       1727.37    
  12  0.969344E-01  -2.33372      -326.994       326.994       1779.82       2106.81    
  13  0.358466      -1.02592      -143.749       143.749       1677.28       1821.03    
  14  0.953168     -0.479638E-01  -6.72053       6.72053       1842.47       1849.19    
  15  0.684510     -0.379052      -53.1115       53.1115       1843.54       1896.65    
  16  0.482047     -0.729713      -102.245       102.245       1827.20       1929.45    
  17  0.974791     -0.255318E-01  -3.57744       3.57744       1830.81       1834.39    
  18  0.978669     -0.215619E-01  -3.02119       3.02119       1799.18       1802.20    
  19  0.929785     -0.728022E-01  -10.2008       10.2008       1847.39       1857.59    
  20  0.715020     -0.335444      -47.0014       47.0014       1852.37       1899.37    
  21  0.598247     -0.513752      -71.9853       71.9853       1705.66       1777.65    
  22  0.107080      -2.23418      -313.046       313.046       1881.57       2194.62    
  23  0.559093     -0.581439      -81.4694       81.4694       1892.11       1973.57    
  24  0.933094     -0.692491E-01  -9.70297       9.70297       1873.15       1882.85    
  25  0.470169E-01  -3.05725      -428.372       428.372       1896.60       2324.97    
  26  0.166768      -1.79115      -250.971       250.971       1892.75       2143.72    
  27  0.331277      -1.10480      -154.801       154.801       1868.19       2022.99    
  28  0.961755     -0.389952E-01  -5.46389       5.46389       1938.43       1943.90    
  29  0.464366E-01  -3.06967      -430.112       430.112       1944.15       2374.26    
  30  0.966136E-03  -6.94221      -972.720       972.720       1835.24       2807.96    
  31  0.941012     -0.607999E-01  -8.51909       8.51909       1776.25       1784.77    
  32  0.201947E-01  -3.90233      -546.783       546.783       1889.21       2435.99    
  33  0.679249     -0.386768      -54.1927       54.1927       1962.20       2016.39    
  34  0.318772      -1.14328      -160.192       160.192       1893.04       2053.24    
  35  0.388100     -0.946493      -132.620       132.620       1862.04       1994.66    
  36  0.658606     -0.417629      -58.5169       58.5169       1836.91       1895.43    
  37  0.774362     -0.255715      -35.8300       35.8300       1784.39       1820.22    
  38  0.704871     -0.349740      -49.0044       49.0044       1848.50       1897.50    
  39  0.274189      -1.29394      -181.302       181.302       1840.40       2021.71    
  40  0.881806     -0.125783      -17.6243       17.6243       1814.29       1831.91    
  41  0.198448      -1.61723      -226.601       226.601       1660.61       1887.21    
  42  0.342590      -1.07122      -150.096       150.096       1821.56       1971.66    
  43  0.603787     -0.504534      -70.6937       70.6937       1785.11       1855.81    
  44  0.667409     -0.404353      -56.6567       56.6567       1922.03       1978.69    
  45  0.317014      -1.14881      -160.967       160.967       1874.21       2035.18    
  46  0.368458     -0.998429      -139.897       139.897       1932.97       2072.87    
  47  0.139912      -1.96674      -275.574       275.574       1898.07       2173.64    
  48  0.537645     -0.620557      -86.9506       86.9506       1921.00       2007.95    
  49  0.159021      -1.83872      -257.636       257.636       1839.10       2096.74    
  50  0.729011     -0.316067      -44.2863       44.2863       1840.65       1884.94    
  51  0.802486     -0.220041      -30.8315       30.8315       1840.99       1871.82    
loop,thermsimp(1:2)       76   420.515       70.5928    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    169       1698.87          0.87          1.11         21.90          0.18          0.05         24.12
Just calling func    0   0         24.12


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    170       1963.82          0.86          1.11         21.91          0.25          0.05         24.18
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1698.87
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    140.117               201
loop is:       76
neval is:      169
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       76      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    560.467      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    140.117               201
loop is:       77
neval is:      169


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      201
neval,tstepnext:      169     201

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.596761     -0.516238      -72.3337       72.3337       1305.70       1378.03    
   2  0.476930     -0.740385      -103.740       103.740       1707.38       1811.12    
   3  0.845382     -0.167966      -23.5349       23.5349       1732.92       1756.46    
   4  0.397814     -0.921770      -129.155       129.155       1694.67       1823.83    
   5  0.249923      -1.38660      -194.286       194.286       1705.66       1899.95    
   6  0.591552     -0.525005      -73.5621       73.5621       1776.25       1849.81    
   7  0.143111      -1.94414      -272.406       272.406       1751.28       2023.69    
   8  0.306099      -1.18385      -165.877       165.877       1799.18       1965.06    
   9  0.441827     -0.816836      -114.453       114.453       1742.17       1856.62    
  10  0.504521     -0.684146      -95.8604       95.8604       1784.39       1880.25    
  11  0.127660      -2.05839      -288.415       288.415       1677.28       1965.69    
  12  0.333524      -1.09804      -153.854       153.854       1716.46       1870.31    
  13  0.130890      -2.03340      -284.913       284.913       1755.02       2039.93    
  14  0.307732      -1.17853      -165.131       165.131       1672.43       1837.56    
  15  0.154434E-01  -4.17057      -584.368       584.368       1814.29       2398.66    
  16  0.357863      -1.02761      -143.985       143.985       1830.81       1974.80    
  17  0.271898      -1.30233      -182.478       182.478       1842.47       2024.95    
  18  0.906228E-01  -2.40105      -336.428       336.428       1785.11       2121.54    
  19  0.344142      -1.06670      -149.463       149.463       1847.39       1996.86    
  20  0.392886     -0.934237      -130.902       130.902       1840.99       1971.89    
  21  0.454318     -0.788958      -110.546       110.546       1873.15       1983.69    
  22  0.384129     -0.956778      -134.061       134.061       1840.65       1974.71    
  23  0.354037      -1.03835      -145.491       145.491       1660.61       1806.10    
  24  0.154212      -1.86943      -261.939       261.939       1836.91       2098.85    
  25  0.816320     -0.202949      -28.4366       28.4366       1843.54       1871.98    
  26  0.994970     -0.504291E-02 -0.706596      0.706596       1848.50       1849.20    
  27  0.374719E-01  -3.28416      -460.167       460.167       1852.37       2312.54    
  28  0.227113      -1.48231      -207.696       207.696       1827.20       2034.90    
  29  0.410587     -0.890167      -124.727       124.727       1938.43       2063.16    
  30  0.104540E-01  -4.56077      -639.041       639.041       1821.56       2460.61    
  31  0.994826     -0.518730E-02 -0.726828      0.726828       1892.11       1892.83    
  32  0.738930     -0.302553      -42.3927       42.3927       1922.03       1964.42    
  33  0.715904     -0.334209      -46.8283       46.8283       1862.04       1908.87    
  34  0.128324      -2.05320      -287.688       287.688       1921.00       2208.69    
  35  0.856095     -0.155374      -21.7704       21.7704       1962.20       1983.97    
  36  0.423967     -0.858099      -120.234       120.234       1706.19       1826.43    
  37  0.504650     -0.683890      -95.8245       95.8245       1840.40       1936.23    
  38  0.347036      -1.05833      -148.290       148.290       1868.19       2016.48    
  39  0.906779     -0.978566E-01  -13.7114       13.7114       1874.21       1887.92    
  40  0.616911     -0.483030      -67.6807       67.6807       1893.04       1960.72    
  41  0.540209     -0.615800      -86.2839       86.2839       1932.97       2019.26    
  42  0.772932     -0.257564      -36.0890       36.0890       1839.10       1875.19    
  43  0.544989     -0.606989      -85.0495       85.0495       1779.82       1864.87    
  44  0.951523     -0.496917E-01  -6.96265       6.96265       1892.75       1899.71    
  45  0.172505      -1.75733      -246.232       246.232       1898.07       2144.30    
  46  0.871391     -0.137665      -19.2891       19.2891       1881.57       1900.86    
  47  0.127604      -2.05882      -288.476       288.476       1896.60       2185.08    
  48  0.785934     -0.240882      -33.7517       33.7517       1944.15       1977.90    
  49  0.815977     -0.203369      -28.4955       28.4955       1756.37       1784.87    
  50  0.350587      -1.04815      -146.863       146.863       1889.21       2036.07    
  51  0.739645     -0.301584      -42.2571       42.2571       1698.87       1741.13    
loop,thermsimp(1:2)       77   72.3337       103.740    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    171       1818.60          0.87          1.11         21.92          0.16          0.05         24.11
Just calling func    0   0         24.11


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1818.60
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    140.117               201
loop is:       77
neval is:      170
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       77      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    560.467      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    140.117               201
loop is:       78
neval is:      170


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      201
neval,tstepnext:      170     201

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.941883     -0.598737E-01  -8.38931       8.38931       1305.70       1314.08    
   2  0.368209     -0.999105      -139.991       139.991       1698.87       1838.86    
   3  0.508630     -0.676034      -94.7237       94.7237       1732.92       1827.64    
   4  0.744324     -0.295279      -41.3736       41.3736       1756.37       1797.75    
   5  0.401586     -0.912333      -127.833       127.833       1660.61       1788.44    
   6  0.712794     -0.338563      -47.4384       47.4384       1707.38       1754.82    
   7  0.186976      -1.67678      -234.944       234.944       1694.67       1929.62    
   8  0.688451     -0.373311      -52.3072       52.3072       1706.19       1758.50    
   9  0.668652     -0.402492      -56.3959       56.3959       1672.43       1728.83    
  10  0.656767     -0.420426      -58.9088       58.9088       1848.50       1907.41    
  11  0.853336     -0.158602      -22.2229       22.2229       1776.25       1798.47    
  12  0.556440     -0.586195      -82.1358       82.1358       1742.17       1824.30    
  13  0.258558E-01  -3.65522      -512.158       512.158       1779.82       2291.98    
  14  0.121003E-01  -4.41452      -618.549       618.549       1716.46       2335.00    
  15  0.150890      -1.89120      -264.989       264.989       1843.54       2108.53    
  16  0.820074     -0.198360      -27.7936       27.7936       1839.10       1866.89    
  17  0.151452      -1.88748      -264.468       264.468       1784.39       2048.86    
  18  0.305465      -1.18592      -166.168       166.168       1874.21       2040.38    
  19  0.533202     -0.628854      -88.1131       88.1131       1892.11       1980.22    
  20  0.143416      -1.94201      -272.108       272.108       1892.75       2164.86    
  21  0.687081     -0.375303      -52.5862       52.5862       1705.66       1758.25    
  22  0.546247     -0.604685      -84.7265       84.7265       1881.57       1966.30    
  23  0.356987      -1.03006      -144.328       144.328       1862.04       2006.37    
  24  0.545718     -0.605653      -84.8623       84.8623       1840.40       1925.27    
  25  0.789688     -0.236117      -33.0839       33.0839       1893.04       1926.13    
  26  0.752086     -0.284904      -39.9199       39.9199       1922.03       1961.95    
  27  0.388816     -0.944650      -132.361       132.361       1799.18       1931.54    
  28  0.988428     -0.116395E-01  -1.63090       1.63090       1677.28       1678.91    
  29  0.124991      -2.07952      -291.375       291.375       1840.99       2132.36    
  30  0.568214     -0.565257      -79.2021       79.2021       1840.65       1919.85    
  31  0.551032     -0.595962      -83.5043       83.5043       1830.81       1914.32    
  32  0.423622     -0.858913      -120.348       120.348       1944.15       2064.50    
  33  0.647554     -0.434553      -60.8882       60.8882       1873.15       1934.03    
  34  0.686255     -0.376506      -52.7549       52.7549       1962.20       2014.96    
  35  0.548072     -0.601349      -84.2592       84.2592       1847.39       1931.65    
  36  0.880777     -0.126951      -17.7880       17.7880       1868.19       1885.97    
  37  0.894918     -0.111023      -15.5562       15.5562       1932.97       1948.53    
  38  0.241077      -1.42264      -199.336       199.336       1751.28       1950.62    
  39  0.546141     -0.604877      -84.7535       84.7535       1842.47       1927.22    
  40  0.266590      -1.32204      -185.240       185.240       1827.20       2012.44    
  41  0.575085     -0.553238      -77.5180       77.5180       1889.21       1966.73    
  42  0.907139     -0.974596E-01  -13.6557       13.6557       1755.02       1768.67    
  43  0.469109     -0.756920      -106.057       106.057       1938.43       2044.49    
  44  0.738008     -0.303801      -42.5676       42.5676       1836.91       1879.48    
  45  0.557598     -0.584116      -81.8446       81.8446       1785.11       1866.96    
  46  0.305677      -1.18523      -166.070       166.070       1898.07       2064.14    
  47  0.392927     -0.934131      -130.887       130.887       1896.60       2027.49    
  48  0.121997      -2.10376      -294.772       294.772       1921.00       2215.77    
  49  0.712082     -0.339563      -47.5785       47.5785       1852.37       1899.95    
  50  0.342132      -1.07256      -150.283       150.283       1814.29       1964.57    
  51  0.288307      -1.24373      -174.268       174.268       1818.60       1992.87    
loop,thermsimp(1:2)       78   8.38931       139.991    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    172       1704.99          0.87          1.11         22.14          0.12          0.05         24.29
Just calling func    0   0         24.29


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1704.99
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    140.117               201
loop is:       78
neval is:      171
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       78      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    560.467      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    140.117               201
loop is:       79
neval is:      171


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      201
neval,tstepnext:      171     201

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.708826E-01  -2.64673      -370.852       370.852       1305.70       1676.55    
   2  0.952063     -0.491245E-01  -6.88317       6.88317       1677.28       1684.16    
   3  0.207928      -1.57057      -220.063       220.063       1672.43       1892.49    
   4  0.564009     -0.572686      -80.2429       80.2429       1707.38       1787.62    
   5  0.461636     -0.772979      -108.307       108.307       1705.66       1813.97    
   6  0.683812     -0.380072      -53.2544       53.2544       1706.19       1759.45    
   7  0.153569      -1.87360      -262.523       262.523       1755.02       2017.54    
   8  0.605650     -0.501453      -70.2621       70.2621       1660.61       1730.87    
   9  0.257296      -1.35753      -190.213       190.213       1756.37       1946.59    
  10  0.517987     -0.657805      -92.1695       92.1695       1776.25       1868.42    
  11  0.571129     -0.560140      -78.4851       78.4851       1742.17       1820.65    
  12  0.735134     -0.307703      -43.1144       43.1144       1732.92       1776.04    
  13  0.766340E-02  -4.87130      -682.551       682.551       1698.87       2381.42    
  14  0.435932     -0.830269      -116.335       116.335       1839.10       1955.44    
  15  0.513945     -0.665639      -93.2673       93.2673       1785.11       1878.38    
  16  0.447046     -0.805095      -112.807       112.807       1836.91       1949.72    
  17  0.244813      -1.40726      -197.181       197.181       1868.19       2065.37    
  18  0.183933      -1.69318      -237.244       237.244       1852.37       2089.61    
  19  0.413164     -0.883910      -123.851       123.851       1848.50       1972.35    
  20  0.869613     -0.139707      -19.5754       19.5754       1830.81       1850.39    
  21  0.853260     -0.158691      -22.2352       22.2352       1840.65       1862.89    
  22  0.138067      -1.98001      -277.433       277.433       1840.40       2117.84    
  23  0.940528     -0.613134E-01  -8.59104       8.59104       1893.04       1901.64    
  24  0.694939     -0.363931      -50.9929       50.9929       1842.47       1893.46    
  25  0.962776     -0.379346E-01  -5.31528       5.31528       1694.67       1699.99    
  26  0.378266     -0.972158      -136.216       136.216       1799.18       1935.40    
  27  0.855922     -0.155576      -21.7988       21.7988       1847.39       1869.19    
  28  0.393452     -0.932797      -130.701       130.701       1873.15       2003.85    
  29  0.253590      -1.37204      -192.246       192.246       1932.97       2125.22    
  30  0.777948     -0.251096      -35.1828       35.1828       1751.28       1786.46    
  31  0.654890     -0.423288      -59.3098       59.3098       1922.03       1981.34    
  32  0.690016E-01  -2.67363      -374.620       374.620       1814.29       2188.91    
  33  0.101034      -2.29229      -321.189       321.189       1881.57       2202.76    
  34  0.684533     -0.379019      -53.1069       53.1069       1889.21       1942.31    
  35  0.592603     -0.523230      -73.3134       73.3134       1892.11       1965.42    
  36  0.904830     -0.100009      -14.0129       14.0129       1818.60       1832.62    
  37  0.400244     -0.915681      -128.302       128.302       1862.04       1990.34    
  38  0.698191     -0.359263      -50.3388       50.3388       1827.20       1877.54    
  39  0.551449E-01  -2.89779      -406.029       406.029       1962.20       2368.23    
  40  0.500493     -0.692161      -96.9834       96.9834       1896.60       1993.58    
  41  0.289592      -1.23928      -173.644       173.644       1874.21       2047.85    
  42  0.447163     -0.804833      -112.771       112.771       1938.43       2051.20    
  43  0.690940     -0.369702      -51.8014       51.8014       1784.39       1836.19    
  44  0.631068     -0.460341      -64.5016       64.5016       1898.07       1962.57    
  45  0.926041     -0.768363E-01  -10.7661       10.7661       1944.15       1954.91    
  46  0.436187     -0.829684      -116.253       116.253       1843.54       1959.79    
  47  0.314139      -1.15792      -162.244       162.244       1840.99       2003.23    
  48  0.363110      -1.01305      -141.945       141.945       1892.75       2034.69    
  49  0.446982     -0.805238      -112.827       112.827       1921.00       2033.83    
  50  0.541529     -0.613360      -85.9420       85.9420       1779.82       1865.76    
  51  0.415529     -0.878202      -123.051       123.051       1704.99       1828.04    
loop,thermsimp(1:2)       79   370.852       6.88317    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    173       1853.93          0.86          1.12         21.93          0.16          0.05         24.13
Just calling func    0   0         24.13


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1853.93
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    140.117               201
loop is:       79
neval is:      172
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       79      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    560.467      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    140.117               201
loop is:       80
neval is:      172


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      201
neval,tstepnext:      172     201

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.668425     -0.402832      -56.4435       56.4435       1305.70       1362.14    
   2  0.238500      -1.43339      -200.842       200.842       1677.28       1878.12    
   3  0.689211     -0.372208      -52.1527       52.1527       1694.67       1746.83    
   4  0.540774     -0.614753      -86.1373       86.1373       1660.61       1746.75    
   5  0.178857      -1.72117      -241.165       241.165       1706.19       1947.36    
   6  0.884253     -0.123012      -17.2361       17.2361       1732.92       1750.16    
   7  0.755546     -0.280314      -39.2768       39.2768       1751.28       1790.56    
   8  0.654086E-01  -2.72710      -382.113       382.113       1707.38       2089.49    
   9  0.802958     -0.219452      -30.7490       30.7490       1705.66       1736.41    
  10  0.840665     -0.173562      -24.3189       24.3189       1742.17       1766.49    
  11  0.864930     -0.145107      -20.3319       20.3319       1704.99       1725.32    
  12  0.728243     -0.317120      -44.4339       44.4339       1818.60       1863.04    
  13  0.453086     -0.791672      -110.927       110.927       1784.39       1895.31    
  14  0.702549E-01  -2.65563      -372.098       372.098       1830.81       2202.91    
  15  0.610595     -0.493321      -69.1226       69.1226       1840.65       1909.77    
  16  0.728410E-02  -4.92206      -689.664       689.664       1779.82       2469.48    
  17  0.913763     -0.901841E-01  -12.6363       12.6363       1776.25       1788.88    
  18  0.165001      -1.80180      -252.463       252.463       1847.39       2099.86    
  19  0.917747E-01  -2.38842      -334.658       334.658       1827.20       2161.86    
  20  0.338507      -1.08321      -151.776       151.776       1785.11       1936.89    
  21  0.357666      -1.02815      -144.062       144.062       1672.43       1816.49    
  22  0.389441     -0.943044      -132.136       132.136       1842.47       1974.61    
  23  0.879897     -0.127950      -17.9280       17.9280       1893.04       1910.97    
  24  0.418897     -0.870129      -121.920       121.920       1799.18       1921.10    
  25  0.838426     -0.176230      -24.6927       24.6927       1889.21       1913.90    
  26  0.185169      -1.68649      -236.305       236.305       1756.37       1992.68    
  27  0.200952      -1.60469      -224.844       224.844       1836.91       2061.75    
  28  0.877256     -0.130957      -18.3492       18.3492       1944.15       1962.50    
  29  0.386592     -0.950385      -133.165       133.165       1839.10       1972.27    
  30  0.888706     -0.117988      -16.5322       16.5322       1843.54       1860.07    
  31  0.105408      -2.24991      -315.251       315.251       1898.07       2213.32    
  32  0.994268     -0.574873E-02 -0.805494      0.805494       1892.11       1892.91    
  33  0.764077     -0.269087      -37.7036       37.7036       1848.50       1886.20    
  34  0.812108     -0.208121      -29.1613       29.1613       1922.03       1951.19    
  35  0.121669      -2.10645      -295.150       295.150       1862.04       2157.19    
  36  0.637909     -0.449559      -62.9908       62.9908       1896.60       1959.59    
  37  0.316007E-02  -5.75716      -806.676       806.676       1840.99       2647.66    
  38  0.229677      -1.47108      -206.123       206.123       1873.15       2079.27    
  39  0.521374     -0.651288      -91.2564       91.2564       1755.02       1846.27    
  40  0.391402     -0.938019      -131.432       131.432       1921.00       2052.43    
  41  0.327357      -1.11670      -156.469       156.469       1892.75       2049.22    
  42  0.963139     -0.375576E-01  -5.26246       5.26246       1874.21       1879.47    
  43  0.174261      -1.74720      -244.812       244.812       1938.43       2183.24    
  44  0.331602      -1.10382      -154.664       154.664       1868.19       2022.85    
  45  0.526338     -0.641812      -89.9287       89.9287       1852.37       1942.30    
  46  0.413265     -0.883667      -123.817       123.817       1840.40       1964.22    
  47  0.541510E-02  -5.21856      -731.209       731.209       1932.97       2664.18    
  48  0.781613     -0.246396      -34.5242       34.5242       1814.29       1848.81    
  49  0.656825     -0.420337      -58.8963       58.8963       1881.57       1940.47    
  50  0.584791     -0.536501      -75.1729       75.1729       1962.20       2037.37    
  51  0.811204     -0.209236      -29.3175       29.3175       1853.93       1883.25    
loop,thermsimp(1:2)       80   56.4435       200.842    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    174       1645.02          0.87          1.11         21.87          0.22          0.05         24.12
Just calling func    0   0         24.12


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    175       1590.93          0.87          1.11         22.02          0.11          0.05         24.14
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1590.93
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    140.117               201
loop is:       80
neval is:      174
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       80      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    560.467      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    140.117               201
loop is:       81
neval is:      174


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      201
neval,tstepnext:      174     201

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.270023      -1.30925      -183.448       183.448       1305.70       1489.14    
   2  0.879265     -0.128669      -18.0286       18.0286       1704.99       1723.01    
   3  0.684902     -0.378479      -53.0313       53.0313       1705.66       1758.69    
   4  0.893896     -0.112166      -15.7163       15.7163       1660.61       1676.33    
   5  0.476761     -0.740739      -103.790       103.790       1694.67       1798.46    
   6  0.755167     -0.280817      -39.3471       39.3471       1732.92       1772.27    
   7  0.452407     -0.793173      -111.137       111.137       1742.17       1853.31    
   8  0.723906     -0.323093      -45.2708       45.2708       1776.25       1821.52    
   9  0.451260     -0.795711      -111.493       111.493       1751.28       1862.77    
  10  0.668265     -0.403071      -56.4771       56.4771       1672.43       1728.91    
  11  0.777249     -0.251995      -35.3088       35.3088       1755.02       1790.32    
  12  0.342240      -1.07224      -150.240       150.240       1814.29       1964.53    
  13  0.639156     -0.447606      -62.7172       62.7172       1843.54       1906.26    
  14  0.166924      -1.79022      -250.840       250.840       1818.60       2069.44    
  15  0.375260     -0.980137      -137.334       137.334       1677.28       1814.61    
  16  0.299730      -1.20487      -168.823       168.823       1874.21       2043.03    
  17  0.407119     -0.898650      -125.916       125.916       1853.93       1979.85    
  18  0.762992E-01  -2.57309      -360.534       360.534       1848.50       2209.03    
  19  0.281066      -1.26917      -177.831       177.831       1892.11       2069.94    
  20  0.220512      -1.51180      -211.829       211.829       1784.39       1996.22    
  21  0.389846     -0.942004      -131.991       131.991       1840.65       1972.64    
  22  0.660048     -0.415443      -58.2106       58.2106       1893.04       1951.25    
  23  0.150026      -1.89695      -265.795       265.795       1889.21       2155.00    
  24  0.113767      -2.17360      -304.558       304.558       1799.18       2103.74    
  25  0.810589     -0.209994      -29.4237       29.4237       1785.11       1814.54    
  26  0.247911      -1.39468      -195.419       195.419       1881.57       2076.99    
  27  0.408875     -0.894345      -125.313       125.313       1852.37       1977.68    
  28  0.310528      -1.16948      -163.864       163.864       1706.19       1870.06    
  29  0.663027     -0.410939      -57.5796       57.5796       1922.03       1979.61    
  30  0.798362     -0.225193      -31.5533       31.5533       1896.60       1928.15    
  31  0.564885     -0.571133      -80.0254       80.0254       1944.15       2024.17    
  32  0.473510E-02  -5.35275      -750.011       750.011       1840.40       2590.41    
  33  0.933475E-01  -2.37143      -332.277       332.277       1839.10       2171.38    
  34  0.931702     -0.707423E-01  -9.91219       9.91219       1842.47       1852.38    
  35  0.341741      -1.07370      -150.444       150.444       1756.37       1906.82    
  36  0.171330      -1.76417      -247.189       247.189       1868.19       2115.38    
  37  0.355860      -1.03322      -144.771       144.771       1962.20       2106.97    
  38  0.469639     -0.755790      -105.899       105.899       1892.75       1998.65    
  39  0.805376     -0.216446      -30.3277       30.3277       1921.00       1951.33    
  40  0.651615     -0.428301      -60.0123       60.0123       1836.91       1896.92    
  41  0.126831      -2.06490      -289.327       289.327       1873.15       2162.47    
  42  0.715737     -0.334442      -46.8610       46.8610       1707.38       1754.24    
  43  0.444007     -0.811915      -113.763       113.763       1847.39       1961.16    
  44  0.887105     -0.119791      -16.7848       16.7848       1862.04       1878.82    
  45  0.492139     -0.708993      -99.3419       99.3419       1827.20       1926.55    
  46  0.590315     -0.527098      -73.8553       73.8553       1938.43       2012.29    
  47  0.313130      -1.16114      -162.695       162.695       1830.81       1993.51    
  48  0.824070     -0.193500      -27.1126       27.1126       1898.07       1925.18    
  49  0.785026     -0.242039      -33.9138       33.9138       1779.82       1813.73    
  50  0.105781      -2.24638      -314.756       314.756       1840.99       2155.74    
  51  0.644933     -0.438608      -61.4564       61.4564       1590.93       1652.38    
loop,thermsimp(1:2)       81   183.448       18.0286    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    176       1747.61          0.87          1.11         21.92          0.18          0.05         24.13
Just calling func    0   0         24.13


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1747.61
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    140.117               201
loop is:       81
neval is:      175
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       81      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    560.467      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    140.117               201
loop is:       82
neval is:      175


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      201
neval,tstepnext:      175     201

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.130014E-01  -4.34270      -608.485       608.485       1305.70       1914.18    
   2  0.906957E-01  -2.40025      -336.315       336.315       1590.93       1927.24    
   3  0.973677     -0.266758E-01  -3.73774       3.73774       1660.61       1664.35    
   4  0.764409     -0.268653      -37.6428       37.6428       1704.99       1742.63    
   5  0.647718     -0.434300      -60.8528       60.8528       1672.43       1733.28    
   6  0.450945     -0.796410      -111.590       111.590       1707.38       1818.97    
   7  0.342138      -1.07254      -150.281       150.281       1705.66       1855.94    
   8  0.491560     -0.710170      -99.5068       99.5068       1732.92       1832.43    
   9  0.728901     -0.316218      -44.3075       44.3075       1755.02       1799.32    
  10  0.361124      -1.01853      -142.714       142.714       1694.67       1837.39    
  11  0.187026      -1.67651      -234.907       234.907       1779.82       2014.73    
  12  0.560514     -0.578901      -81.1138       81.1138       1785.11       1866.23    
  13  0.218776      -1.51971      -212.936       212.936       1677.28       1890.22    
  14  0.109271      -2.21392      -310.208       310.208       1776.25       2086.45    
  15  0.263420E-01  -3.63659      -509.548       509.548       1842.47       2352.02    
  16  0.654642     -0.423667      -59.3629       59.3629       1742.17       1801.53    
  17  0.975959     -0.243343E-01  -3.40964       3.40964       1751.28       1754.69    
  18  0.107212      -2.23295      -312.874       312.874       1706.19       2019.06    
  19  0.972340     -0.280494E-01  -3.93019       3.93019       1862.04       1865.97    
  20  0.259158      -1.35032      -189.202       189.202       1836.91       2026.11    
  21  0.889970     -0.116568      -16.3331       16.3331       1843.54       1859.87    
  22  0.956672     -0.442943E-01  -6.20637       6.20637       1756.37       1762.58    
  23  0.299261      -1.20644      -169.042       169.042       1898.07       2067.11    
  24  0.114836      -2.16425      -303.248       303.248       1827.20       2130.45    
  25  0.728848     -0.316291      -44.3177       44.3177       1896.60       1940.92    
  26  0.650336     -0.430267      -60.2876       60.2876       1893.04       1953.33    
  27  0.816983     -0.202137      -28.3229       28.3229       1921.00       1949.33    
  28  0.507860     -0.677550      -94.9361       94.9361       1847.39       1942.33    
  29  0.920661     -0.826634E-01  -11.5825       11.5825       1814.29       1825.87    
  30  0.253772      -1.37132      -192.145       192.145       1840.65       2032.80    
  31  0.667512     -0.404198      -56.6349       56.6349       1852.37       1909.01    
  32  0.772715     -0.257844      -36.1284       36.1284       1922.03       1958.16    
  33  0.757620     -0.277573      -38.8927       38.8927       1853.93       1892.83    
  34  0.776421     -0.253060      -35.4580       35.4580       1830.81       1866.27    
  35  0.886642     -0.120314      -16.8581       16.8581       1784.39       1801.24    
  36  0.238693E-01  -3.73516      -523.359       523.359       1892.75       2416.11    
  37  0.303957      -1.19087      -166.861       166.861       1938.43       2105.29    
  38  0.875267     -0.133226      -18.6672       18.6672       1944.15       1962.81    
  39  0.144246      -1.93624      -271.299       271.299       1874.21       2145.51    
  40  0.993963     -0.605564E-02 -0.848498      0.848498       1818.60       1819.45    
  41  0.172168      -1.75928      -246.505       246.505       1892.11       2138.61    
  42  0.979713     -0.204952E-01  -2.87173       2.87173       1881.57       1884.44    
  43  0.938694     -0.632658E-01  -8.86461       8.86461       1799.18       1808.05    
  44  0.716061     -0.333990      -46.7977       46.7977       1962.20       2009.00    
  45  0.764601     -0.268402      -37.6076       37.6076       1868.19       1905.79    
  46  0.546951     -0.603396      -84.5460       84.5460       1889.21       1973.75    
  47  0.104442      -2.25912      -316.541       316.541       1840.99       2157.53    
  48  0.669980     -0.400508      -56.1179       56.1179       1873.15       1929.26    
  49  0.255048      -1.36630      -191.442       191.442       1839.10       2030.54    
  50  0.761153     -0.272921      -38.2408       38.2408       1848.50       1886.74    
  51  0.273269      -1.29730      -181.774       181.774       1747.61       1929.38    
loop,thermsimp(1:2)       82   608.485       336.315    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    177       1644.89          0.87          1.12         21.91          0.15          0.05         24.10
Just calling func    0   0         24.10


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    178       1588.30          0.86          1.11         21.95          0.11          0.05         24.08
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1588.30
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    140.117               201
loop is:       82
neval is:      177
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       82      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    560.467      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    140.117               201
loop is:       83
neval is:      177


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      201
neval,tstepnext:      177     201

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.609134     -0.495717      -69.4582       69.4582       1660.61       1730.07    
   2  0.266275      -1.32323      -185.406       185.406       1672.43       1857.84    
   3  0.545538     -0.605984      -84.9085       84.9085       1704.99       1789.89    
   4  0.196234      -1.62845      -228.173       228.173       1751.28       1979.45    
   5  0.786411     -0.240275      -33.6666       33.6666       1756.37       1790.04    
   6  0.453912     -0.789853      -110.672       110.672       1755.02       1865.69    
   7  0.900549     -0.104751      -14.6773       14.6773       1784.39       1799.06    
   8  0.339919      -1.07905      -151.193       151.193       1742.17       1893.36    
   9  0.511643     -0.670128      -93.8962       93.8962       1799.18       1893.08    
  10  0.628202     -0.464894      -65.1394       65.1394       1707.38       1772.52    
  11  0.672886E-01  -2.69876      -378.142       378.142       1818.60       2196.75    
  12  0.518493     -0.656829      -92.0328       92.0328       1814.29       1906.32    
  13  0.994926     -0.508642E-02 -0.712693      0.712693       1732.92       1733.63    
  14  0.733191     -0.310349      -43.4851       43.4851       1694.67       1738.16    
  15  0.952818     -0.483318E-01  -6.77210       6.77210       1705.66       1712.43    
  16  0.735955     -0.306586      -42.9579       42.9579       1843.54       1886.50    
  17  0.743149     -0.296859      -41.5949       41.5949       1862.04       1903.63    
  18  0.549375     -0.598975      -83.9265       83.9265       1785.11       1869.04    
  19  0.355140      -1.03524      -145.055       145.055       1830.81       1975.87    
  20  0.482165     -0.729469      -102.211       102.211       1881.57       1983.78    
  21  0.577197     -0.549571      -77.0042       77.0042       1848.50       1925.50    
  22  0.107316E-01  -4.53456      -635.369       635.369       1677.28       2312.65    
  23  0.923969     -0.790764E-01  -11.0799       11.0799       1853.93       1865.01    
  24  0.810451     -0.210164      -29.4475       29.4475       1868.19       1897.63    
  25  0.143346      -1.94249      -272.176       272.176       1852.37       2124.55    
  26  0.994184     -0.583318E-02 -0.817328      0.817328       1305.70       1306.51    
  27  0.870737     -0.138415      -19.3943       19.3943       1590.93       1610.32    
  28  0.970691     -0.297469E-01  -4.16805       4.16805       1873.15       1877.31    
  29  0.351269      -1.04620      -146.591       146.591       1747.61       1894.20    
  30  0.464982     -0.765756      -107.295       107.295       1896.60       2003.90    
  31  0.921785     -0.814432E-01  -11.4116       11.4116       1847.39       1858.80    
  32  0.110512      -2.20263      -308.626       308.626       1921.00       2229.63    
  33  0.261408      -1.34167      -187.991       187.991       1893.04       2081.04    
  34  0.908908     -0.955118E-01  -13.3828       13.3828       1922.03       1935.41    
  35  0.819412     -0.199168      -27.9068       27.9068       1944.15       1972.05    
  36  0.466482     -0.762536      -106.844       106.844       1889.21       1996.05    
  37  0.717237     -0.332349      -46.5677       46.5677       1962.20       2008.77    
  38  0.802331     -0.220234      -30.8584       30.8584       1779.82       1810.68    
  39  0.949390     -0.519355E-01  -7.27704       7.27704       1706.19       1713.47    
  40  0.258511      -1.35282      -189.553       189.553       1836.91       2026.46    
  41  0.270423      -1.30777      -183.240       183.240       1839.10       2022.34    
  42  0.366439      -1.00392      -140.667       140.667       1840.65       1981.32    
  43  0.934403     -0.678476E-01  -9.50659       9.50659       1898.07       1907.58    
  44  0.956654     -0.443133E-01  -6.20904       6.20904       1776.25       1782.46    
  45  0.377790     -0.973417      -136.392       136.392       1938.43       2074.82    
  46  0.203667      -1.59127      -222.964       222.964       1827.20       2050.17    
  47  0.673892     -0.394685      -55.3020       55.3020       1892.11       1947.41    
  48  0.347380      -1.05734      -148.150       148.150       1874.21       2022.36    
  49  0.144339      -1.93559      -271.209       271.209       1840.99       2112.20    
  50  0.728571     -0.316670      -44.3708       44.3708       1842.47       1886.84    
  51  0.243065      -1.41443      -198.185       198.185       1588.30       1786.48    
loop,thermsimp(1:2)       83   69.4582       185.406    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    179       1823.39          0.87          1.12         21.98          0.08          0.05         24.09
Just calling func    0   0         24.09


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1823.39
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    140.117               201
loop is:       83
neval is:      178
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       83      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    560.467      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    140.117               201
loop is:       84
neval is:      178


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      201
neval,tstepnext:      178     201

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.572627     -0.557521      -78.1180       78.1180       1305.70       1383.81    
   2  0.468879     -0.757411      -106.126       106.126       1590.93       1697.05    
   3  0.886741E-01  -2.42279      -339.473       339.473       1705.66       2045.13    
   4  0.211783      -1.55219      -217.488       217.488       1706.19       1923.68    
   5  0.573306     -0.556336      -77.9520       77.9520       1660.61       1738.56    
   6  0.401711     -0.912021      -127.790       127.790       1732.92       1860.71    
   7  0.505706     -0.681800      -95.5317       95.5317       1694.67       1790.21    
   8  0.603045     -0.505763      -70.8660       70.8660       1707.38       1778.24    
   9  0.696575     -0.361580      -50.6635       50.6635       1776.25       1826.91    
  10  0.294614      -1.22209      -171.235       171.235       1588.30       1759.53    
  11  0.527550     -0.639511      -89.6063       89.6063       1704.99       1794.59    
  12  0.657157     -0.419832      -58.8256       58.8256       1756.37       1815.20    
  13  0.627866     -0.465428      -65.2143       65.2143       1784.39       1849.60    
  14  0.993353E-02  -4.61184      -646.196       646.196       1779.82       2426.02    
  15  0.885166E-01  -2.42456      -339.722       339.722       1672.43       2012.15    
  16  0.265764      -1.32515      -185.676       185.676       1847.39       2033.07    
  17  0.446403     -0.806534      -113.009       113.009       1853.93       1966.94    
  18  0.287864      -1.24527      -174.483       174.483       1755.02       1929.50    
  19  0.926928E-01  -2.37846      -333.263       333.263       1785.11       2118.38    
  20  0.394849     -0.929252      -130.204       130.204       1873.15       2003.35    
  21  0.540746     -0.614805      -86.1445       86.1445       1843.54       1929.68    
  22  0.846435     -0.166721      -23.3605       23.3605       1842.47       1865.83    
  23  0.417037     -0.874580      -122.543       122.543       1799.18       1921.72    
  24  0.210713      -1.55726      -218.198       218.198       1742.17       1960.37    
  25  0.764669     -0.268312      -37.5950       37.5950       1747.61       1785.20    
  26  0.219471E-01  -3.81912      -535.123       535.123       1868.19       2403.31    
  27  0.200728      -1.60581      -225.001       225.001       1862.04       2087.04    
  28  0.572660     -0.557463      -78.1100       78.1100       1814.29       1892.40    
  29  0.599083E-01  -2.81494      -394.421       394.421       1898.07       2292.49    
  30  0.214614      -1.53891      -215.628       215.628       1848.50       2064.12    
  31  0.489389     -0.714598      -100.127       100.127       1922.03       2022.16    
  32  0.162616      -1.81636      -254.503       254.503       1892.11       2146.61    
  33  0.710022     -0.342459      -47.9843       47.9843       1944.15       1992.13    
  34  0.753583     -0.282916      -39.6413       39.6413       1830.81       1870.46    
  35  0.743317     -0.296633      -41.5632       41.5632       1751.28       1792.84    
  36  0.155416      -1.86165      -260.848       260.848       1840.65       2101.50    
  37  0.643355     -0.441059      -61.7998       61.7998       1881.57       1943.37    
  38  0.656098     -0.421444      -59.0515       59.0515       1889.21       1948.26    
  39  0.327550      -1.11611      -156.386       156.386       1896.60       2052.99    
  40  0.192244      -1.64899      -231.052       231.052       1962.20       2193.25    
  41  0.433590     -0.835657      -117.090       117.090       1839.10       1956.19    
  42  0.788561     -0.237545      -33.2841       33.2841       1874.21       1907.49    
  43  0.978028     -0.222173E-01  -3.11302       3.11302       1836.91       1840.02    
  44  0.110322      -2.20435      -308.867       308.867       1827.20       2136.07    
  45  0.795332     -0.228995      -32.0861       32.0861       1938.43       1970.52    
  46  0.497518E-01  -3.00071      -420.450       420.450       1893.04       2313.49    
  47  0.852459     -0.159631      -22.3669       22.3669       1840.99       1863.36    
  48  0.133240      -2.01560      -282.420       282.420       1852.37       2134.79    
  49  0.671163     -0.398743      -55.8706       55.8706       1818.60       1874.47    
  50  0.245122      -1.40600      -197.004       197.004       1921.00       2118.01    
  51  0.820498     -0.197843      -27.7212       27.7212       1823.39       1851.11    
loop,thermsimp(1:2)       84   78.1180       106.126    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    180       2164.35          0.87          1.12         22.07          0.14          0.05         24.27
Just calling func    0   0         24.27


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2164.35
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    140.117               201
loop is:       84
neval is:      179
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       84      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    560.467      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    140.117               201
loop is:       85
neval is:      179


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      201
neval,tstepnext:      179     201

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.197499      -1.62202      -227.273       227.273       1305.70       1532.97    
   2  0.793097     -0.231809      -32.4804       32.4804       1590.93       1623.41    
   3  0.261081      -1.34293      -188.166       188.166       1660.61       1848.78    
   4  0.912198     -0.918984E-01  -12.8765       12.8765       1588.30       1601.17    
   5  0.493539     -0.706153      -98.9439       98.9439       1707.38       1806.32    
   6  0.721001     -0.327115      -45.8343       45.8343       1747.61       1793.44    
   7  0.578790     -0.546816      -76.6182       76.6182       1694.67       1771.29    
   8  0.684127     -0.379612      -53.1900       53.1900       1751.28       1804.47    
   9  0.627712     -0.465674      -65.2488       65.2488       1704.99       1770.24    
  10  0.858540     -0.152522      -21.3709       21.3709       1756.37       1777.74    
  11  0.712254E-01  -2.64191      -370.176       370.176       1776.25       2146.42    
  12  0.927250     -0.755316E-01  -10.5833       10.5833       1836.91       1847.49    
  13  0.458073     -0.780727      -109.393       109.393       1784.39       1893.78    
  14  0.940004     -0.618714E-01  -8.66922       8.66922       1823.39       1832.06    
  15  0.322549      -1.13150      -158.542       158.542       1732.92       1891.46    
  16  0.939473     -0.624358E-01  -8.74831       8.74831       1840.99       1849.74    
  17  0.726080     -0.320095      -44.8507       44.8507       1842.47       1887.32    
  18  0.602088E-02  -5.11252      -716.350       716.350       1830.81       2547.16    
  19  0.735289     -0.307492      -43.0848       43.0848       1818.60       1861.69    
  20  0.847617     -0.165326      -23.1650       23.1650       1814.29       1837.45    
  21  0.747190E-01  -2.59402      -363.466       363.466       1874.21       2237.67    
  22  0.248374      -1.39282      -195.157       195.157       1799.18       1994.34    
  23  0.350184      -1.04930      -147.024       147.024       1706.19       1853.22    
  24  0.327739E-03  -8.02329      -1124.20       1124.20       1755.02       2879.21    
  25  0.130012      -2.04013      -285.856       285.856       1843.54       2129.40    
  26  0.609791     -0.494639      -69.3073       69.3073       1881.57       1950.88    
  27  0.793414     -0.231410      -32.4245       32.4245       1889.21       1921.63    
  28  0.962567     -0.381519E-01  -5.34573       5.34573       1839.10       1844.45    
  29  0.499469     -0.694211      -97.2706       97.2706       1742.17       1839.44    
  30  0.887491     -0.119357      -16.7240       16.7240       1853.93       1870.66    
  31  0.136374      -1.99236      -279.163       279.163       1938.43       2217.59    
  32  0.292356      -1.22978      -172.313       172.313       1944.15       2116.46    
  33  0.301564      -1.19877      -167.969       167.969       1873.15       2041.11    
  34  0.352543      -1.04258      -146.083       146.083       1672.43       1818.51    
  35  0.483726     -0.726236      -101.758       101.758       1922.03       2023.79    
  36  0.410499     -0.890381      -124.757       124.757       1847.39       1972.15    
  37  0.458111     -0.780644      -109.381       109.381       1705.66       1815.04    
  38  0.670071     -0.400372      -56.0989       56.0989       1896.60       1952.70    
  39  0.175486      -1.74020      -243.831       243.831       1848.50       2092.33    
  40  0.798907     -0.224511      -31.4577       31.4577       1862.04       1893.50    
  41  0.270487      -1.30753      -183.207       183.207       1840.65       2023.86    
  42  0.480368     -0.733202      -102.734       102.734       1921.00       2023.74    
  43  0.658406     -0.417933      -58.5595       58.5595       1785.11       1843.67    
  44  0.937976     -0.640304E-01  -8.97174       8.97174       1852.37       1861.34    
  45  0.710083     -0.342373      -47.9722       47.9722       1827.20       1875.18    
  46  0.567340     -0.566797      -79.4178       79.4178       1892.11       1971.52    
  47  0.201426      -1.60233      -224.514       224.514       1962.20       2186.72    
  48  0.660313     -0.415042      -58.1544       58.1544       1898.07       1956.23    
  49  0.524008     -0.646249      -90.5504       90.5504       1893.04       1983.59    
  50  0.513616     -0.666280      -93.3571       93.3571       1868.19       1961.54    
  51  0.951218     -0.500122E-01  -7.00756       7.00756       2164.35       2171.36    
loop,thermsimp(1:2)       85   227.273       32.4804    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    181       1665.69          0.87          1.12         22.21          0.16          0.05         24.41
Just calling func    0   0         24.41


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  180    1665.7       0.9595     -2.146      2.965     -102.6     0.9630    
                       1.138      1.598     -99.70      3.379     0.8132    

                       2.475     -1.686      1.540      7000.      7000.    

                      -2.137      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -7.538     -4.390     -7.743      6.566    

                      -13.66     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.1446E-01 0.2463    -0.3953E-01 0.8982E-01

                     -0.2486    -0.9127E-01 0.1358     0.8518E-01 0.5510E-01



                     -0.5856    -0.5782      0.000     0.4844E-01-0.4011E-01

                      0.1431E-01 0.1332    -0.7116    -0.5914E-01 0.3228    

                      0.1805E-01 0.5486E-01-0.5541     -1.176      7000.    



                     -0.2390    -0.6590     -2.142     -1.982    -0.3807    

                     -0.3252      9.166      8.711    -0.1672E+05 -6.000    

                     -0.6103     -2.203      9.425      8.860    -0.1969E+05



                      -6.000     0.7624    -0.5617      8.882      9.068    

                     -0.1944E+05 -6.000    -0.6476    -0.4554      9.114    

                       9.189    -0.1891E+05 -6.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1665.69
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    140.117               201
loop is:       85
neval is:      180
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       85      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    560.467      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    140.117               201
loop is:       86
neval is:      180


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      201
neval,tstepnext:      180     201

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.464881     -0.765974      -107.326       107.326       1305.70       1413.02    
   2  0.948887     -0.524654E-01  -7.35129       7.35129       1588.30       1595.65    
   3  0.532332     -0.630488      -88.3420       88.3420       1590.93       1679.27    
   4  0.374267     -0.982785      -137.705       137.705       1704.99       1842.69    
   5  0.694531     -0.364519      -51.0753       51.0753       1694.67       1745.75    
   6  0.414371     -0.880994      -123.442       123.442       1756.37       1879.82    
   7  0.208827E-01  -3.86883      -542.089       542.089       1747.61       2289.69    
   8  0.627187     -0.466511      -65.3660       65.3660       1751.28       1816.65    
   9  0.148799E-01  -4.20774      -589.576       589.576       1707.38       2296.95    
  10  0.809008     -0.211946      -29.6972       29.6972       1705.66       1735.36    
  11  0.647680     -0.434359      -60.8610       60.8610       1672.43       1733.29    
  12  0.289351      -1.24012      -173.761       173.761       1823.39       1997.15    
  13  0.222457      -1.50302      -210.599       210.599       1814.29       2024.89    
  14  0.374268     -0.982782      -137.704       137.704       1742.17       1879.87    
  15  0.785765     -0.241097      -33.7818       33.7818       1785.11       1818.89    
  16  0.298051      -1.21049      -169.610       169.610       1839.10       2008.71    
  17  0.725075     -0.321480      -45.0448       45.0448       1836.91       1881.95    
  18  0.386364     -0.950976      -133.248       133.248       1660.61       1793.86    
  19  0.631686     -0.459363      -64.3644       64.3644       1840.99       1905.35    
  20  0.688282     -0.373557      -52.3417       52.3417       1706.19       1758.53    
  21  0.373817     -0.983990      -137.874       137.874       1852.37       1990.24    
  22  0.219845      -1.51483      -212.254       212.254       1818.60       2030.86    
  23  0.926271     -0.765889E-01  -10.7314       10.7314       1853.93       1864.66    
  24  0.618127     -0.481061      -67.4048       67.4048       1827.20       1894.61    
  25  0.176216      -1.73604      -243.249       243.249       1842.47       2085.72    
  26  0.742943     -0.297136      -41.6338       41.6338       1732.92       1774.55    
  27  0.357690      -1.02809      -144.052       144.052       1862.04       2006.09    
  28  0.478359     -0.737394      -103.321       103.321       1784.39       1887.71    
  29  0.395976     -0.926401      -129.804       129.804       1889.21       2019.01    
  30  0.803186     -0.219169      -30.7093       30.7093       1881.57       1912.28    
  31  0.231845      -1.46168      -204.807       204.807       1896.60       2101.41    
  32  0.808968     -0.211996      -29.7043       29.7043       1898.07       1927.78    
  33  0.579217     -0.546078      -76.5147       76.5147       1868.19       1944.70    
  34  0.384357     -0.956183      -133.977       133.977       1892.11       2026.08    
  35  0.856367     -0.155057      -21.7261       21.7261       1847.39       1869.12    
  36  0.265661      -1.32553      -185.729       185.729       1893.04       2078.77    
  37  0.288915      -1.24162      -173.972       173.972       1799.18       1973.15    
  38  0.224915      -1.49203      -209.059       209.059       1921.00       2130.06    
  39  0.685944     -0.376959      -52.8184       52.8184       1922.03       1974.85    
  40  0.265936      -1.32450      -185.584       185.584       1840.65       2026.24    
  41  0.412966     -0.884389      -123.918       123.918       1873.15       1997.06    
  42  0.440796     -0.819173      -114.780       114.780       1848.50       1963.28    
  43  0.572522     -0.557705      -78.1438       78.1438       1944.15       2022.29    
  44  0.798412     -0.225131      -31.5447       31.5447       1843.54       1875.08    
  45  0.127097      -2.06281      -289.034       289.034       1776.25       2065.28    
  46  0.243397      -1.41306      -197.994       197.994       2164.35       2362.34    
  47  0.322195      -1.13260      -158.696       158.696       1962.20       2120.90    
  48  0.512728     -0.668011      -93.5996       93.5996       1938.43       2032.03    
  49  0.786191     -0.240556      -33.7059       33.7059       1874.21       1907.91    
  50  0.733079     -0.310501      -43.5065       43.5065       1830.81       1874.32    
  51  0.601364     -0.508554      -71.2570       71.2570       1665.69       1736.95    
loop,thermsimp(1:2)       86   107.326       7.35129    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    182       1778.56          0.87          1.12         21.99          0.13          0.05         24.16
Just calling func    0   0         24.16


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1778.56
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    140.117               201
loop is:       86
neval is:      181
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       86      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    560.467      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    140.117               201
loop is:       87
neval is:      181


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      201
neval,tstepnext:      181     201

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.182970      -1.69843      -237.979       237.979       1305.70       1543.67    
   2  0.721345     -0.326637      -45.7674       45.7674       1588.30       1634.06    
   3  0.842493     -0.171390      -24.0146       24.0146       1590.93       1614.94    
   4  0.260540      -1.34500      -188.457       188.457       1672.43       1860.89    
   5  0.782605     -0.245127      -34.3464       34.3464       1705.66       1740.01    
   6  0.208492      -1.56785      -219.683       219.683       1665.69       1885.37    
   7  0.290568E-01  -3.53850      -495.804       495.804       1694.67       2190.48    
   8  0.673682     -0.394997      -55.3457       55.3457       1706.19       1761.54    
   9  0.399393     -0.917808      -128.600       128.600       1732.92       1861.52    
  10  0.966971     -0.335863E-01  -4.70601       4.70601       1660.61       1665.32    
  11  0.390645     -0.939956      -131.704       131.704       1751.28       1882.98    
  12  0.259548      -1.34881      -188.992       188.992       1785.11       1974.10    
  13  0.260765      -1.34413      -188.336       188.336       1704.99       1893.32    
  14  0.110601E-01  -4.50441      -631.144       631.144       1853.93       2485.08    
  15  0.727710     -0.317852      -44.5365       44.5365       1847.39       1891.93    
  16  0.717076     -0.332574      -46.5992       46.5992       1830.81       1877.41    
  17  0.612129     -0.490811      -68.7710       68.7710       1843.54       1912.31    
  18  0.589376     -0.528691      -74.0785       74.0785       1756.37       1830.45    
  19  0.541615     -0.613199      -85.9196       85.9196       1742.17       1828.09    
  20  0.330403      -1.10744      -155.171       155.171       1836.91       1992.08    
  21  0.229530      -1.47172      -206.213       206.213       1784.39       1990.60    
  22  0.564010     -0.572684      -80.2427       80.2427       1827.20       1907.45    
  23  0.454226     -0.789161      -110.575       110.575       1840.99       1951.56    
  24  0.579528     -0.545541      -76.4395       76.4395       1874.21       1950.65    
  25  0.245500      -1.40446      -196.788       196.788       1881.57       2078.36    
  26  0.708019     -0.345284      -48.3801       48.3801       1898.07       1946.45    
  27  0.300215      -1.20326      -168.597       168.597       1868.19       2036.78    
  28  0.721461     -0.326478      -45.7450       45.7450       1848.50       1894.24    
  29  0.326772      -1.11849      -156.720       156.720       1799.18       1955.90    
  30  0.580879     -0.543212      -76.1132       76.1132       1922.03       1998.14    
  31  0.963075     -0.376241E-01  -5.27177       5.27177       1852.37       1857.64    
  32  0.656935     -0.420170      -58.8728       58.8728       1873.15       1932.02    
  33  0.908335     -0.961416E-01  -13.4711       13.4711       1823.39       1836.86    
  34  0.765938     -0.266654      -37.3628       37.3628       1862.04       1899.40    
  35  0.497301     -0.698561      -97.8801       97.8801       1839.10       1936.98    
  36  0.833603     -0.181997      -25.5009       25.5009       1889.21       1914.71    
  37  0.433057     -0.836886      -117.262       117.262       1944.15       2061.41    
  38  0.349547      -1.05112      -147.279       147.279       1814.29       1961.57    
  39  0.142838      -1.94604      -272.674       272.674       1892.11       2164.78    
  40  0.326780      -1.11847      -156.716       156.716       1840.65       1997.37    
  41  0.707709     -0.345723      -48.4416       48.4416       1818.60       1867.04    
  42  0.914339     -0.895538E-01  -12.5480       12.5480       1938.43       1950.98    
  43  0.392800     -0.934454      -130.933       130.933       1776.25       1907.18    
  44  0.434772     -0.832933      -116.708       116.708       1893.04       2009.75    
  45  0.229545      -1.47165      -206.204       206.204       1842.47       2048.67    
  46  0.661281     -0.413577      -57.9491       57.9491       1896.60       1954.55    
  47  0.459966     -0.776602      -108.815       108.815       1962.20       2071.02    
  48  0.352439      -1.04288      -146.125       146.125       1921.00       2067.13    
  49  0.490345     -0.712647      -99.8538       99.8538       1747.61       1847.46    
  50  0.837788     -0.176990      -24.7993       24.7993       1707.38       1732.18    
  51  0.247493      -1.39637      -195.656       195.656       1778.56       1974.21    
loop,thermsimp(1:2)       87   237.979       45.7674    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    183       1655.48          0.87          1.11         21.89          0.23          0.05         24.15
Just calling func    0   0         24.15


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    184       1901.98          0.87          1.11         22.09          0.14          0.05         24.27
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1655.48
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    140.117               201
loop is:       87
neval is:      183
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       87      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    560.467      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    140.117               201
loop is:       88
neval is:      183


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      201
neval,tstepnext:      183     201

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.220180      -1.51331      -212.040       212.040       1305.70       1517.74    
   2  0.246752E-01  -3.70196      -518.707       518.707       1590.93       2109.63    
   3  0.679039     -0.387076      -54.2359       54.2359       1588.30       1642.53    
   4  0.709027     -0.343862      -48.1808       48.1808       1660.61       1708.79    
   5  0.577754     -0.548608      -76.8692       76.8692       1707.38       1784.25    
   6  0.738694     -0.302871      -42.4374       42.4374       1705.66       1748.10    
   7  0.181723      -1.70527      -238.937       238.937       1706.19       1945.13    
   8  0.103748      -2.26579      -317.475       317.475       1742.17       2059.64    
   9  0.456811E-02  -5.38866      -755.042       755.042       1756.37       2511.42    
  10  0.303247      -1.19321      -167.188       167.188       1823.39       1990.58    
  11  0.284736      -1.25619      -176.014       176.014       1747.61       1923.62    
  12  0.900494     -0.104812      -14.6859       14.6859       1852.37       1867.06    
  13  0.691792     -0.368470      -51.6288       51.6288       1672.43       1724.06    
  14  0.502714     -0.687735      -96.3632       96.3632       1732.92       1829.28    
  15  0.305219      -1.18673      -166.280       166.280       1818.60       1984.88    
  16  0.412005     -0.886720      -124.244       124.244       1830.81       1955.06    
  17  0.412225     -0.886186      -124.170       124.170       1751.28       1875.45    
  18  0.121697      -2.10622      -295.117       295.117       1665.69       1960.81    
  19  0.465374     -0.764915      -107.177       107.177       1847.39       1954.57    
  20  0.273016      -1.29823      -181.903       181.903       1704.99       1886.89    
  21  0.502763     -0.687636      -96.3494       96.3494       1848.50       1944.85    
  22  0.516442     -0.660793      -92.5883       92.5883       1862.04       1954.63    
  23  0.554333     -0.589990      -82.6676       82.6676       1776.25       1858.91    
  24  0.192397E-01  -3.95078      -553.571       553.571       1827.20       2380.77    
  25  0.451279E-01  -3.09825      -434.118       434.118       1843.54       2277.66    
  26  0.457340     -0.782327      -109.617       109.617       1889.21       1998.82    
  27  0.325184      -1.12336      -157.402       157.402       1873.15       2030.55    
  28  0.700952     -0.355315      -49.7857       49.7857       1839.10       1888.89    
  29  0.961087     -0.396906E-01  -5.56132       5.56132       1898.07       1903.63    
  30  0.195966E-02  -6.23498      -873.626       873.626       1874.21       2747.83    
  31  0.766376     -0.266082      -37.2826       37.2826       1938.43       1975.71    
  32  0.398846     -0.919180      -128.793       128.793       1840.99       1969.78    
  33  0.675249     -0.392674      -55.0203       55.0203       1896.60       1951.62    
  34  0.189468      -1.66354      -233.090       233.090       1799.18       2032.27    
  35  0.444608     -0.810562      -113.573       113.573       1814.29       1927.86    
  36  0.514006     -0.665520      -93.2506       93.2506       1785.11       1878.36    
  37  0.575199     -0.553039      -77.4901       77.4901       1778.56       1856.05    
  38  0.121449      -2.10826      -295.403       295.403       1784.39       2079.79    
  39  0.209130      -1.56480      -219.255       219.255       1836.91       2056.16    
  40  0.466284E-01  -3.06555      -429.535       429.535       1840.65       2270.19    
  41  0.386630E-01  -3.25287      -455.782       455.782       1922.03       2377.81    
  42  0.335751E-01  -3.39397      -475.553       475.553       1893.04       2368.60    
  43  0.878126     -0.129965      -18.2103       18.2103       1868.19       1886.40    
  44  0.652938     -0.426273      -59.7280       59.7280       1842.47       1902.20    
  45  0.932456E-01  -2.37252      -332.430       332.430       1944.15       2276.58    
  46  0.662683     -0.411458      -57.6522       57.6522       1921.00       1978.65    
  47  0.204704      -1.58619      -222.252       222.252       1962.20       2184.45    
  48  0.985446     -0.146609E-01  -2.05424       2.05424       1881.57       1883.63    
  49  0.105847      -2.24576      -314.669       314.669       1892.11       2206.77    
  50  0.843201     -0.170550      -23.8969       23.8969       1694.67       1718.57    
  51  0.364087      -1.01036      -141.569       141.569       1655.48       1797.05    
loop,thermsimp(1:2)       88   212.040       518.707    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    185       3005.43          0.88          1.12         21.98          0.13          0.05         24.15
Just calling func    0   0         24.15


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    186       1661.38          0.86          1.11         21.94          0.16          0.04         24.12
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3   1661.38
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    140.117               201
loop is:       88
neval is:      185
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       88      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    560.467      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    140.117               201
loop is:       89
neval is:      185


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      201
neval,tstepnext:      185     201

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.876761     -0.131521      -18.4284       18.4284       1305.70       1324.12    
   2  0.765270     -0.267527      -37.4851       37.4851       1588.30       1625.78    
   3  0.215687      -1.53393      -214.929       214.929       1660.61       1875.54    
   4  0.999601E-01  -2.30298      -322.687       322.687       1694.67       2017.36    
   5  0.706519     -0.347405      -48.6773       48.6773       1672.43       1721.11    
   6  0.201358      -1.60267      -224.561       224.561       1705.66       1930.22    
   7  0.450677     -0.797005      -111.674       111.674       1707.38       1819.05    
   8  0.897557     -0.108078      -15.1436       15.1436       1655.48       1670.62    
   9  0.161166      -1.82532      -255.758       255.758       1732.92       1988.68    
  10  0.972556E-01  -2.33041      -326.530       326.530       1778.56       2105.09    
  11  0.742112     -0.298255      -41.7905       41.7905       1776.25       1818.04    
  12  0.172377      -1.75807      -246.335       246.335       1852.37       2098.71    
  13  0.658751     -0.417410      -58.4861       58.4861       1751.28       1809.77    
  14  0.725340     -0.321114      -44.9935       44.9935       1785.11       1830.11    
  15  0.501488     -0.690175      -96.7051       96.7051       1881.57       1978.28    
  16  0.845372     -0.167978      -23.5366       23.5366       1868.19       1891.72    
  17  0.132369      -2.02216      -283.339       283.339       1704.99       1988.33    
  18  0.734515E-01  -2.61113      -365.863       365.863       1839.10       2204.96    
  19  0.391205     -0.938523      -131.503       131.503       1842.47       1973.97    
  20  0.376983     -0.975555      -136.692       136.692       1898.07       2034.76    
  21  0.315463      -1.15371      -161.655       161.655       1747.61       1909.26    
  22  0.267113      -1.32008      -184.966       184.966       1814.29       1999.25    
  23  0.965292     -0.353243E-01  -4.94953       4.94953       1848.50       1853.45    
  24  0.954592     -0.464714E-01  -6.51143       6.51143       1706.19       1712.70    
  25  0.992414     -0.761515E-02  -1.06701       1.06701       1896.60       1897.67    
  26  0.867953E-02  -4.74679      -665.105       665.105       1847.39       2512.50    
  27  0.829585     -0.186829      -26.1779       26.1779       1862.04       1888.22    
  28  0.349695      -1.05069      -147.220       147.220       1830.81       1978.03    
  29  0.673511     -0.395251      -55.3813       55.3813       1665.69       1721.07    
  30  0.340696      -1.07676      -150.873       150.873       1840.99       1991.86    
  31  0.558731     -0.582087      -81.5602       81.5602       1938.43       2019.99    
  32  0.747295     -0.291295      -40.8153       40.8153       1921.00       1961.82    
  33  0.123287      -2.09324      -293.299       293.299       1818.60       2111.90    
  34  0.355051      -1.03549      -145.090       145.090       1823.39       1968.48    
  35  0.511895     -0.669636      -93.8272       93.8272       1889.21       1983.03    
  36  0.571856E-01  -2.86145      -400.938       400.938       1873.15       2274.08    
  37  0.507517     -0.678226      -95.0309       95.0309       1799.18       1894.21    
  38  0.326770      -1.11850      -156.720       156.720       1836.91       1993.63    
  39  0.736001     -0.306523      -42.9491       42.9491       1742.17       1785.12    
  40  0.970046     -0.304120E-01  -4.26123       4.26123       1784.39       1788.65    
  41  0.673510     -0.395253      -55.3816       55.3816       1590.93       1646.31    
  42  0.335032      -1.09353      -153.222       153.222       1962.20       2115.42    
  43  0.872321E-01  -2.43918      -341.771       341.771       1892.11       2233.88    
  44  0.749956     -0.287741      -40.3173       40.3173       1840.65       1880.97    
  45  0.159001      -1.83884      -257.653       257.653       1944.15       2201.80    
  46  0.529687     -0.635468      -89.0398       89.0398       1843.54       1932.58    
  47  0.142415      -1.94901      -273.089       273.089       1893.04       2166.13    
  48  0.803387     -0.218919      -30.6742       30.6742       1922.03       1952.70    
  49  0.709133     -0.343713      -48.1600       48.1600       1827.20       1875.36    
  50  0.261172      -1.34258      -188.118       188.118       1756.37       1944.49    
  51  0.106599      -2.23868      -313.677       313.677       1661.38       1975.05    
loop,thermsimp(1:2)       89   18.4284       37.4851    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    187       1613.45          0.87          1.12         21.91          0.16          0.05         24.10
Just calling func    0   0         24.10


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1613.45
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    140.117               201
loop is:       89
neval is:      186
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       89      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    560.467      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    140.117               201
loop is:       90
neval is:      186


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      201
neval,tstepnext:      186     201

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.157371      -1.84915      -259.097       259.097       1305.70       1564.79    
   2  0.894146     -0.111886      -15.6771       15.6771       1588.30       1603.97    
   3  0.721270     -0.326741      -45.7820       45.7820       1590.93       1636.71    
   4  0.536866     -0.622006      -87.1535       87.1535       1655.48       1742.63    
   5  0.418107     -0.872017      -122.184       122.184       1706.19       1828.38    
   6  0.391189     -0.938564      -131.509       131.509       1665.69       1797.20    
   7  0.799669     -0.223558      -31.3242       31.3242       1672.43       1703.76    
   8  0.595070     -0.519076      -72.7314       72.7314       1742.17       1814.90    
   9  0.384356E-03  -7.86394      -1101.87       1101.87       1784.39       2886.26    
  10  0.654302     -0.424187      -59.4357       59.4357       1751.28       1810.72    
  11  0.873355     -0.135413      -18.9737       18.9737       1776.25       1795.22    
  12  0.303212      -1.19332      -167.204       167.204       1707.38       1874.58    
  13  0.434159     -0.834344      -116.906       116.906       1785.11       1902.02    
  14  0.970825     -0.296089E-01  -4.14871       4.14871       1848.50       1852.65    
  15  0.405896     -0.901659      -126.338       126.338       1827.20       1953.54    
  16  0.250423      -1.38461      -194.007       194.007       1660.61       1854.62    
  17  0.517030     -0.659654      -92.4286       92.4286       1840.65       1933.08    
  18  0.165468      -1.79897      -252.067       252.067       1862.04       2114.11    
  19  0.679403     -0.386541      -54.1609       54.1609       1868.19       1922.35    
  20  0.554013     -0.590567      -82.7484       82.7484       1799.18       1881.93    
  21  0.211764E-01  -3.85487      -540.132       540.132       1896.60       2436.73    
  22  0.453828     -0.790038      -110.698       110.698       1747.61       1858.30    
  23  0.377409     -0.974426      -136.533       136.533       1705.66       1842.19    
  24  0.496879     -0.699408      -97.9988       97.9988       1843.54       1941.54    
  25  0.214619      -1.53889      -215.624       215.624       1756.37       1972.00    
  26  0.724154     -0.322751      -45.2229       45.2229       1922.03       1967.25    
  27  0.385609     -0.952932      -133.522       133.522       1921.00       2054.52    
  28  0.777864     -0.251204      -35.1979       35.1979       1823.39       1858.59    
  29  0.709283     -0.343500      -48.1301       48.1301       1842.47       1890.60    
  30  0.191760      -1.65151      -231.405       231.405       1661.38       1892.78    
  31  0.347616      -1.05666      -148.055       148.055       1830.81       1978.87    
  32  0.191581      -1.65244      -231.535       231.535       1881.57       2113.11    
  33  0.770989     -0.260081      -36.4418       36.4418       1889.21       1925.65    
  34  0.788566E-01  -2.54012      -355.914       355.914       1704.99       2060.90    
  35  0.229474      -1.47197      -206.247       206.247       1732.92       1939.17    
  36  0.339326      -1.08079      -151.437       151.437       1840.99       1992.43    
  37  0.220886      -1.51011      -211.591       211.591       1836.91       2048.50    
  38  0.223644      -1.49770      -209.853       209.853       1814.29       2024.14    
  39  0.138287      -1.97842      -277.210       277.210       1694.67       1971.88    
  40  0.796402     -0.227651      -31.8978       31.8978       1938.43       1970.33    
  41  0.104384      -2.25968      -316.619       316.619       1898.07       2214.69    
  42  0.919642     -0.837713E-01  -11.7378       11.7378       1852.37       1864.11    
  43  0.360767      -1.01952      -142.852       142.852       1778.56       1921.41    
  44  0.924300     -0.787181E-01  -11.0297       11.0297       1818.60       1829.63    
  45  0.561139     -0.577786      -80.9576       80.9576       1962.20       2043.16    
  46  0.509073E-01  -2.97775      -417.233       417.233       1893.04       2310.28    
  47  0.715469     -0.334817      -46.9136       46.9136       1944.15       1991.06    
  48  0.294040E-01  -3.52662      -494.139       494.139       1839.10       2333.24    
  49  0.264026E-02  -5.93688      -831.857       831.857       1892.11       2723.96    
  50  0.634029     -0.455661      -63.8457       63.8457       1873.15       1936.99    
  51  0.319148      -1.14210      -160.028       160.028       1613.45       1773.48    
loop,thermsimp(1:2)       90   259.097       15.6771    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    188       1758.77          0.87          1.11         21.95          0.13          0.04         24.11
Just calling func    0   0         24.11


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1758.77
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    140.117               201
loop is:       90
neval is:      187
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       90      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    560.467      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    140.117               201
loop is:       91
neval is:      187


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      201
neval,tstepnext:      187     201

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.102884      -2.27415      -318.647       318.647       1305.70       1624.34    
   2  0.846291     -0.166892      -23.3844       23.3844       1588.30       1611.68    
   3  0.167054      -1.78944      -250.730       250.730       1590.93       1841.66    
   4  0.786038     -0.240750      -33.7332       33.7332       1672.43       1706.16    
   5  0.680218     -0.385341      -53.9928       53.9928       1655.48       1709.47    
   6  0.843894     -0.169729      -23.7819       23.7819       1613.45       1637.23    
   7  0.295559      -1.21889      -170.787       170.787       1776.25       1947.03    
   8  0.383493     -0.958433      -134.293       134.293       1665.69       1799.98    
   9  0.867247     -0.142431      -19.9570       19.9570       1751.28       1771.24    
  10  0.241960      -1.41898      -198.823       198.823       1742.17       1940.99    
  11  0.486925     -0.719645      -100.834       100.834       1706.19       1807.03    
  12  0.750166     -0.287460      -40.2781       40.2781       1818.60       1858.88    
  13  0.507045     -0.679156      -95.1612       95.1612       1705.66       1800.82    
  14  0.237743      -1.43656      -201.287       201.287       1848.50       2049.78    
  15  0.256837E-01  -3.66190      -513.094       513.094       1660.61       2173.70    
  16  0.776460     -0.253010      -35.4509       35.4509       1747.61       1783.06    
  17  0.316300      -1.15106      -161.283       161.283       1823.39       1984.68    
  18  0.493161     -0.706919      -99.0513       99.0513       1852.37       1951.42    
  19  0.807271     -0.214096      -29.9985       29.9985       1707.38       1737.38    
  20  0.338915      -1.08201      -151.607       151.607       1799.18       1950.79    
  21  0.132986      -2.01751      -282.687       282.687       1842.47       2125.16    
  22  0.409975     -0.891659      -124.936       124.936       1661.38       1786.31    
  23  0.525021     -0.644317      -90.2797       90.2797       1785.11       1875.39    
  24  0.393064     -0.933783      -130.839       130.839       1778.56       1909.39    
  25  0.176068      -1.73689      -243.367       243.367       1868.19       2111.55    
  26  0.965490     -0.351191E-01  -4.92078       4.92078       1889.21       1894.13    
  27  0.387767     -0.947350      -132.740       132.740       1840.65       1973.39    
  28  0.936248     -0.658753E-01  -9.23024       9.23024       1873.15       1882.38    
  29  0.914720     -0.891370E-01  -12.4896       12.4896       1732.92       1745.41    
  30  0.332171      -1.10211      -154.424       154.424       1843.54       1997.96    
  31  0.845314E-01  -2.47063      -346.177       346.177       1827.20       2173.38    
  32  0.687741     -0.374343      -52.4518       52.4518       1922.03       1974.48    
  33  0.899776     -0.105610      -14.7977       14.7977       1938.43       1953.23    
  34  0.558791     -0.581980      -81.5452       81.5452       1694.67       1776.22    
  35  0.882799     -0.124658      -17.4667       17.4667       1756.37       1773.84    
  36  0.235569      -1.44575      -202.574       202.574       1830.81       2033.39    
  37  0.533400     -0.628484      -88.0612       88.0612       1944.15       2032.21    
  38  0.147169      -1.91617      -268.488       268.488       1840.99       2109.48    
  39  0.966208E-01  -2.33696      -327.448       327.448       1814.29       2141.74    
  40  0.952887     -0.482588E-01  -6.76187       6.76187       1962.20       1968.96    
  41  0.155551      -1.86078      -260.727       260.727       1836.91       2097.64    
  42  0.645067     -0.438401      -61.4274       61.4274       1921.00       1982.43    
  43  0.394254     -0.930759      -130.415       130.415       1704.99       1835.40    
  44  0.546893     -0.603501      -84.5607       84.5607       1881.57       1966.13    
  45  0.390314     -0.940803      -131.822       131.822       1862.04       1993.86    
  46  0.311561      -1.16616      -163.399       163.399       1898.07       2061.47    
  47  0.752427E-01  -2.58704      -362.487       362.487       1893.04       2255.53    
  48  0.144673      -1.93328      -270.885       270.885       1839.10       2109.99    
  49  0.297567      -1.21212      -169.838       169.838       1896.60       2066.44    
  50  0.544131     -0.608565      -85.2703       85.2703       1892.11       1977.38    
  51  0.750603E-01  -2.58946      -362.827       362.827       1758.77       2121.60    
loop,thermsimp(1:2)       91   318.647       23.3844    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    189       1637.12          0.87          1.12         21.84          0.23          0.05         24.10
Just calling func    0   0         24.10


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    190       1529.84          0.87          1.11         21.94          0.20          0.05         24.18
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1529.84
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    140.117               201
loop is:       91
neval is:      189
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       91      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    560.467      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    140.117               201
loop is:       92
neval is:      189


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      201
neval,tstepnext:      189     201

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.218624      -1.52040      -213.034       213.034       1588.30       1801.33    
   2  0.389473     -0.942961      -132.125       132.125       1305.70       1437.82    
   3  0.919121     -0.843378E-01  -11.8171       11.8171       1613.45       1625.27    
   4  0.970518     -0.299250E-01  -4.19300       4.19300       1672.43       1676.62    
   5  0.713317     -0.337830      -47.3356       47.3356       1655.48       1702.82    
   6  0.639607     -0.446902      -62.6185       62.6185       1707.38       1770.00    
   7  0.712661     -0.338749      -47.4644       47.4644       1732.92       1780.39    
   8  0.212311      -1.54970      -217.140       217.140       1751.28       1968.42    
   9  0.831769     -0.184200      -25.8096       25.8096       1756.37       1782.18    
  10  0.794875     -0.229571      -32.1667       32.1667       1694.67       1726.84    
  11  0.909815     -0.945137E-01  -13.2430       13.2430       1747.61       1760.85    
  12  0.753651E-01  -2.58541      -362.260       362.260       1661.38       2023.64    
  13  0.676081     -0.391442      -54.8477       54.8477       1665.69       1720.54    
  14  0.597437     -0.515107      -72.1752       72.1752       1705.66       1777.84    
  15  0.146947      -1.91768      -268.700       268.700       1706.19       1974.89    
  16  0.854910     -0.156760      -21.9647       21.9647       1704.99       1726.95    
  17  0.984999     -0.151146E-01  -2.11781       2.11781       1590.93       1593.05    
  18  0.533419     -0.628448      -88.0561       88.0561       1818.60       1906.66    
  19  0.383774     -0.957703      -134.190       134.190       1785.11       1919.30    
  20  0.691729     -0.368561      -51.6417       51.6417       1873.15       1924.79    
  21  0.313732E-01  -3.46180      -485.057       485.057       1889.21       2374.26    
  22  0.415635     -0.877947      -123.015       123.015       1778.56       1901.57    
  23  0.288746      -1.24221      -174.054       174.054       1742.17       1916.22    
  24  0.176464      -1.73464      -243.052       243.052       1776.25       2019.30    
  25  0.881312     -0.126344      -17.7029       17.7029       1799.18       1816.88    
  26  0.962783     -0.379267E-01  -5.31418       5.31418       1852.37       1857.69    
  27  0.415450     -0.878393      -123.078       123.078       1938.43       2061.51    
  28  0.271836      -1.30256      -182.510       182.510       1881.57       2064.08    
  29  0.926655     -0.761736E-01  -10.6732       10.6732       1962.20       1972.87    
  30  0.277790      -1.28089      -179.474       179.474       1840.65       2020.13    
  31  0.189974      -1.66087      -232.716       232.716       1922.03       2154.74    
  32  0.410540     -0.890281      -124.743       124.743       1892.11       2016.85    
  33  0.952387     -0.487839E-01  -6.83545       6.83545       1921.00       1927.84    
  34  0.896015     -0.109798      -15.3845       15.3845       1823.39       1838.78    
  35  0.121549E-01  -4.41002      -617.918       617.918       1862.04       2479.96    
  36  0.723911     -0.323087      -45.2700       45.2700       1843.54       1888.81    
  37  0.759053     -0.275683      -38.6279       38.6279       1944.15       1982.78    
  38  0.969929     -0.305320E-01  -4.27805       4.27805       1830.81       1835.09    
  39  0.852636     -0.159422      -22.3377       22.3377       1848.50       1870.83    
  40  0.730471     -0.314065      -44.0059       44.0059       1898.07       1942.08    
  41  0.528358     -0.637981      -89.3918       89.3918       1896.60       1985.99    
  42  0.404403     -0.905344      -126.854       126.854       1836.91       1963.76    
  43  0.232822      -1.45748      -204.217       204.217       1840.99       2045.21    
  44  0.847643     -0.165296      -23.1607       23.1607       1839.10       1862.26    
  45  0.429393E-01  -3.14797      -441.083       441.083       1868.19       2309.27    
  46  0.673157     -0.395777      -55.4551       55.4551       1758.77       1814.23    
  47  0.806068E-01  -2.51817      -352.838       352.838       1842.47       2195.31    
  48  0.926018     -0.768619E-01  -10.7696       10.7696       1814.29       1825.06    
  49  0.167973      -1.78395      -249.962       249.962       1827.20       2077.17    
  50  0.780773     -0.247471      -34.6749       34.6749       1660.61       1695.28    
  51  0.565702E-01  -2.87227      -402.454       402.454       1529.84       1932.30    
loop,thermsimp(1:2)       92   213.034       132.125    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    191       1563.70          0.87          1.11         21.93          0.18          0.05         24.13
Just calling func    0   0         24.13


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    192       1556.76          0.87          1.10         21.98          0.18          0.05         24.18
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1556.76
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    140.117               201
loop is:       92
neval is:      191
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       92      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    560.467      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    140.117               201
loop is:       93
neval is:      191


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      201
neval,tstepnext:      191     201

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.148595      -1.90653      -267.137       267.137       1305.70       1572.83    
   2  0.695074     -0.363738      -50.9658       50.9658       1590.93       1641.89    
   3  0.541180     -0.614003      -86.0322       86.0322       1613.45       1699.48    
   4  0.189791      -1.66183      -232.851       232.851       1672.43       1905.28    
   5  0.245553      -1.40424      -196.758       196.758       1660.61       1857.37    
   6  0.641474     -0.443986      -62.2100       62.2100       1655.48       1717.69    
   7  0.308462      -1.17616      -164.799       164.799       1665.69       1830.49    
   8  0.478005     -0.738133      -103.425       103.425       1694.67       1798.10    
   9  0.395759     -0.926951      -129.881       129.881       1704.99       1834.87    
  10  0.438776E-01  -3.12635      -438.054       438.054       1747.61       2185.66    
  11  0.294628E-01  -3.52463      -493.860       493.860       1707.38       2201.24    
  12  0.331052E-01  -3.40806      -477.527       477.527       1705.66       2183.19    
  13  0.916325E-01  -2.38997      -334.875       334.875       1732.92       2067.80    
  14  0.985908     -0.141919E-01  -1.98852       1.98852       1756.37       1758.36    
  15  0.511724     -0.669970      -93.8740       93.8740       1588.30       1682.17    
  16  0.185695      -1.68365      -235.908       235.908       1758.77       1994.68    
  17  0.830711     -0.185474      -25.9880       25.9880       1799.18       1825.17    
  18  0.765179E-04  -9.47799      -1328.03       1328.03       1814.29       3142.31    
  19  0.129365      -2.04512      -286.556       286.556       1830.81       2117.37    
  20  0.796363     -0.227700      -31.9046       31.9046       1823.39       1855.30    
  21  0.589256     -0.528895      -74.1072       74.1072       1852.37       1926.48    
  22  0.770995     -0.260073      -36.4406       36.4406       1839.10       1875.54    
  23  0.685430     -0.377709      -52.9235       52.9235       1848.50       1901.42    
  24  0.487688     -0.718080      -100.615       100.615       1843.54       1944.16    
  25  0.114898      -2.16371      -303.173       303.173       1778.56       2081.73    
  26  0.165093      -1.80124      -252.385       252.385       1818.60       2070.99    
  27  0.302275      -1.19642      -167.639       167.639       1742.17       1909.81    
  28  0.123669      -2.09014      -292.864       292.864       1785.11       2077.98    
  29  0.960526     -0.402739E-01  -5.64305       5.64305       1873.15       1878.79    
  30  0.744557     -0.294966      -41.3297       41.3297       1921.00       1962.33    
  31  0.418436     -0.871232      -122.074       122.074       1529.84       1651.92    
  32  0.624411     -0.470947      -65.9876       65.9876       1898.07       1964.06    
  33  0.920055     -0.833222E-01  -11.6748       11.6748       1836.91       1848.58    
  34  0.330507      -1.10713      -155.127       155.127       1751.28       1906.41    
  35  0.889566     -0.117022      -16.3967       16.3967       1962.20       1978.60    
  36  0.269410      -1.31152      -183.766       183.766       1706.19       1889.96    
  37  0.458780     -0.779184      -109.177       109.177       1944.15       2053.32    
  38  0.952588     -0.485730E-01  -6.80589       6.80589       1896.60       1903.41    
  39  0.213836      -1.54254      -216.137       216.137       1892.11       2108.24    
  40  0.460697     -0.775015      -108.593       108.593       1776.25       1884.84    
  41  0.571693     -0.559153      -78.3468       78.3468       1840.65       1919.00    
  42  0.201363      -1.60265      -224.558       224.558       1661.38       1885.93    
  43  0.707817     -0.345570      -48.4202       48.4202       1840.99       1889.41    
  44  0.927118     -0.756745E-01  -10.6033       10.6033       1938.43       1949.03    
  45  0.288916      -1.24162      -173.972       173.972       1881.57       2055.54    
  46  0.702737     -0.352773      -49.4294       49.4294       1827.20       1876.63    
  47  0.253190      -1.37362      -192.467       192.467       1922.03       2114.50    
  48  0.709086     -0.343779      -48.1692       48.1692       1842.47       1890.64    
  49  0.399421     -0.917738      -128.591       128.591       1868.19       1996.78    
  50  0.837301     -0.177572      -24.8809       24.8809       1889.21       1914.09    
  51  0.906694     -0.979507E-01  -13.7245       13.7245       1556.76       1570.49    
loop,thermsimp(1:2)       93   267.137       50.9658    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    193       1618.25          0.87          1.11         21.93          0.17          0.05         24.13
Just calling func    0   0         24.14


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    194       1664.23          0.87          1.11         21.89          0.18          0.05         24.10
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1618.25
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    140.117               201
loop is:       93
neval is:      193
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       93      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    560.467      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    140.117               201
loop is:       94
neval is:      193


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      201
neval,tstepnext:      193     201

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.842284     -0.171638      -24.0493       24.0493       1556.76       1580.81    
   2  0.478368     -0.737375      -103.319       103.319       1305.70       1409.01    
   3  0.283498      -1.26055      -176.624       176.624       1590.93       1767.55    
   4  0.520516     -0.652935      -91.4872       91.4872       1529.84       1621.33    
   5  0.703282E-01  -2.65458      -371.952       371.952       1588.30       1960.25    
   6  0.914137     -0.897748E-01  -12.5790       12.5790       1613.45       1626.03    
   7  0.479535     -0.734938      -102.977       102.977       1655.48       1758.46    
   8  0.921875     -0.813456E-01  -11.3979       11.3979       1756.37       1767.77    
   9  0.739547     -0.301718      -42.2758       42.2758       1694.67       1736.95    
  10  0.790753     -0.234770      -32.8953       32.8953       1799.18       1832.08    
  11  0.212247E-01  -3.85259      -539.813       539.813       1665.69       2205.50    
  12  0.286971      -1.24837      -174.918       174.918       1704.99       1879.90    
  13  0.695666     -0.362886      -50.8464       50.8464       1836.91       1887.76    
  14  0.534590     -0.626255      -87.7489       87.7489       1823.39       1911.14    
  15  0.945577     -0.559603E-01  -7.84099       7.84099       1660.61       1668.45    
  16  0.619446     -0.478930      -67.1062       67.1062       1839.10       1906.21    
  17  0.291083E-01  -3.53673      -495.556       495.556       1827.20       2322.76    
  18  0.372584E-01  -3.28988      -460.967       460.967       1873.15       2334.11    
  19  0.713241     -0.337936      -47.3505       47.3505       1776.25       1823.60    
  20  0.280281      -1.27196      -178.223       178.223       1661.38       1839.60    
  21  0.254796      -1.36729      -191.581       191.581       1840.99       2032.57    
  22  0.498598     -0.695955      -97.5150       97.5150       1706.19       1803.71    
  23  0.515261E-01  -2.96567      -415.540       415.540       1842.47       2258.01    
  24  0.347627      -1.05662      -148.051       148.051       1848.50       1996.55    
  25  0.696212     -0.362102      -50.7366       50.7366       1896.60       1947.34    
  26  0.707749E-01  -2.64825      -371.065       371.065       1672.43       2043.50    
  27  0.364523E-01  -3.31175      -464.032       464.032       1751.28       2215.31    
  28  0.895087E-02  -4.71600      -660.792       660.792       1742.17       2402.96    
  29  0.333194      -1.09903      -153.993       153.993       1889.21       2043.20    
  30  0.451375     -0.795457      -111.457       111.457       1840.65       1952.11    
  31  0.849961E-01  -2.46515      -345.409       345.409       1852.37       2197.78    
  32  0.524791     -0.644756      -90.3412       90.3412       1843.54       1933.88    
  33  0.641068     -0.444619      -62.2987       62.2987       1938.43       2000.73    
  34  0.757376     -0.277895      -38.9378       38.9378       1921.00       1959.94    
  35  0.760597     -0.273651      -38.3431       38.3431       1898.07       1936.41    
  36  0.709070     -0.343801      -48.1723       48.1723       1962.20       2010.37    
  37  0.794718     -0.229768      -32.1943       32.1943       1758.77       1790.97    
  38  0.869679     -0.139632      -19.5647       19.5647       1868.19       1887.75    
  39  0.229100E-01  -3.77618      -529.107       529.107       1944.15       2473.25    
  40  0.935590     -0.665776E-01  -9.32864       9.32864       1881.57       1890.90    
  41  0.889453     -0.117149      -16.4145       16.4145       1732.92       1749.34    
  42  0.529054     -0.636665      -89.2075       89.2075       1818.60       1907.81    
  43  0.907902     -0.966186E-01  -13.5379       13.5379       1785.11       1798.65    
  44  0.693802     -0.365568      -51.2222       51.2222       1778.56       1829.78    
  45  0.883803     -0.123521      -17.3074       17.3074       1892.11       1909.41    
  46  0.275134E-01  -3.59308      -503.451       503.451       1922.03       2425.48    
  47  0.324767      -1.12465      -157.582       157.582       1830.81       1988.40    
  48  0.853326     -0.158614      -22.2245       22.2245       1705.66       1727.89    
  49  0.325639      -1.12197      -157.207       157.207       1747.61       1904.81    
  50  0.773280     -0.257115      -36.0261       36.0261       1707.38       1743.40    
  51  0.108890      -2.21741      -310.697       310.697       1618.25       1928.94    
loop,thermsimp(1:2)       94   24.0493       103.319    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    195       1609.45          0.87          1.11         21.97          0.19          0.05         24.19
Just calling func    0   0         24.19


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1609.45
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    140.117               201
loop is:       94
neval is:      194
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       94      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    560.467      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    140.117               201
loop is:       95
neval is:      194


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      201
neval,tstepnext:      194     201

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.744650     -0.294841      -41.3122       41.3122       1305.70       1347.01    
   2  0.739179     -0.302215      -42.3454       42.3454       1556.76       1599.11    
   3  0.131167      -2.03128      -284.617       284.617       1529.84       1814.46    
   4  0.523356     -0.647493      -90.7247       90.7247       1613.45       1704.18    
   5  0.660412     -0.414891      -58.1333       58.1333       1660.61       1718.74    
   6  0.433074E-01  -3.13943      -439.887       439.887       1705.66       2145.55    
   7  0.480352     -0.733236      -102.739       102.739       1694.67       1797.41    
   8  0.808114     -0.213053      -29.8523       29.8523       1707.38       1737.23    
   9  0.723804     -0.323235      -45.2906       45.2906       1732.92       1778.21    
  10  0.322682      -1.13109      -158.484       158.484       1655.48       1813.96    
  11  0.898907     -0.106576      -14.9331       14.9331       1590.93       1605.86    
  12  0.359972      -1.02173      -143.161       143.161       1756.37       1899.54    
  13  0.879118     -0.128836      -18.0521       18.0521       1758.77       1776.83    
  14  0.963559     -0.371220E-01  -5.20141       5.20141       1785.11       1790.31    
  15  0.662848     -0.411210      -57.6174       57.6174       1706.19       1763.81    
  16  0.648402     -0.433244      -60.7048       60.7048       1776.25       1836.95    
  17  0.375343     -0.979916      -137.303       137.303       1778.56       1915.86    
  18  0.812441     -0.207712      -29.1040       29.1040       1799.18       1828.28    
  19  0.248177E-01  -3.69620      -517.900       517.900       1661.38       2179.28    
  20  0.653530     -0.425366      -59.6010       59.6010       1704.99       1764.59    
  21  0.712244     -0.339334      -47.5464       47.5464       1868.19       1915.73    
  22  0.358229      -1.02658      -143.841       143.841       1836.91       1980.75    
  23  0.325518      -1.12234      -157.258       157.258       1881.57       2038.83    
  24  0.770349     -0.260912      -36.5581       36.5581       1747.61       1784.16    
  25  0.633518E-01  -2.75905      -386.590       386.590       1839.10       2225.69    
  26  0.168796      -1.77907      -249.277       249.277       1818.60       2067.88    
  27  0.562007     -0.576241      -80.7410       80.7410       1892.11       1972.85    
  28  0.156316      -1.85588      -260.040       260.040       1823.39       2083.43    
  29  0.967732     -0.328002E-01  -4.59586       4.59586       1618.25       1622.84    
  30  0.538071     -0.619766      -86.8396       86.8396       1843.54       1930.38    
  31  0.967495     -0.330453E-01  -4.63021       4.63021       1898.07       1902.70    
  32  0.771619     -0.259265      -36.3273       36.3273       1896.60       1932.93    
  33  0.246044      -1.40225      -196.478       196.478       1840.65       2037.13    
  34  0.700731     -0.355631      -49.8300       49.8300       1921.00       1970.83    
  35  0.382714     -0.960468      -134.578       134.578       1588.30       1722.87    
  36  0.580395     -0.544047      -76.2301       76.2301       1830.81       1907.04    
  37  0.305131      -1.18701      -166.321       166.321       1848.50       2014.82    
  38  0.624250     -0.471204      -66.0236       66.0236       1938.43       2004.46    
  39  0.575432     -0.552634      -77.4333       77.4333       1962.20       2039.63    
  40  0.701335     -0.354770      -49.7093       49.7093       1840.99       1890.70    
  41  0.290211      -1.23715      -173.345       173.345       1889.21       2062.55    
  42  0.140976      -1.95916      -274.512       274.512       1672.43       1946.94    
  43  0.275714      -1.28839      -180.525       180.525       1852.37       2032.90    
  44  0.856479     -0.154925      -21.7076       21.7076       1665.69       1687.40    
  45  0.994286     -0.573084E-02 -0.802987      0.802987       1751.28       1752.08    
  46  0.913008     -0.910102E-01  -12.7521       12.7521       1842.47       1855.22    
  47  0.204063      -1.58933      -222.692       222.692       1827.20       2049.90    
  48  0.388833     -0.944605      -132.355       132.355       1873.15       2005.50    
  49  0.781619     -0.246387      -34.5230       34.5230       1742.17       1776.69    
  50  0.373421     -0.985049      -138.022       138.022       1922.03       2060.05    
  51  0.834918     -0.180422      -25.2801       25.2801       1609.45       1634.73    
loop,thermsimp(1:2)       95   41.3122       42.3454    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    196       1655.87          0.87          1.12         22.05          0.20          0.05         24.29
Just calling func    0   0         24.29


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1655.87
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    140.117               201
loop is:       95
neval is:      195
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       95      95
 right before GO TO 250



 right after: 250 IF (loop < nloop) CYCLE Main_loop 
loop,nloop:       95      95
loop was equal to nloop so did not start main cycle again, now will do the following: 




calculate mean & stdev of func values for current simplex (hmean,hstd)
 write hstd
 RMS of function values of last simplex =   125.473    

hmean,hstd :    1758.42       125.473    


writing best so far by calling functn2 
 but just writing params not moments. see the change in functn2
hmean,hstd :    1758.42       125.473    
h(1),h(best1),h(np1) :    1305.70       1305.70       1655.87    
htherm(1),htherm(best1),htherm(np1) :    1347.01       1347.01       2225.69    


 CHECK hstd>?stopcr
---------> IF hstd>stopcr (and maxfn,neval.nevalp conditions as well) then set iflag and loop to zero and go to the start of the main cycle again 
---------> IF hstd<=stopcr then find the centroid of the current simplex and get the function value there 
 ............
 ............
 ............
 ............
  (hstd > stopcr .AND. (((maxfn>=0).AND.(neval <= maxfn)).OR.((maxfn<0).AND.(nevalp <= -1*maxfn))  )) 
  so set iflag=0 and loop=0 and start the main cycle again 
  right before CYCLE MAIN_LOOP 



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    560.467      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    140.117               201
loop is:        1
neval is:      195


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      201
neval,tstepnext:      195     201

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.204528E-01  -3.88964      -545.004       545.004       1305.70       1850.70    
   2  0.977100     -0.231667E-01  -3.24604       3.24604       1556.76       1560.01    
   3  0.491467     -0.710361      -99.5335       99.5335       1590.93       1690.46    
   4  0.802113E-01  -2.52309      -353.528       353.528       1618.25       1971.77    
   5  0.891044     -0.115361      -16.1641       16.1641       1609.45       1625.62    
   6  0.397551     -0.922433      -129.248       129.248       1665.69       1794.94    
   7  0.121203      -2.11029      -295.687       295.687       1613.45       1909.14    
   8  0.789985E-01  -2.53833      -355.662       355.662       1660.61       2016.27    
   9  0.921855     -0.813679E-01  -11.4010       11.4010       1588.30       1599.70    
  10  0.252671      -1.37567      -192.754       192.754       1707.38       1900.13    
  11  0.787271     -0.239182      -33.5135       33.5135       1751.28       1784.79    
  12  0.634653     -0.454676      -63.7078       63.7078       1706.19       1769.90    
  13  0.706648     -0.347222      -48.6517       48.6517       1704.99       1753.64    
  14  0.349740E-01  -3.35315      -469.833       469.833       1742.17       2212.00    
  15  0.686787     -0.375731      -52.6462       52.6462       1758.77       1811.42    
  16  0.309348      -1.17329      -164.397       164.397       1732.92       1897.32    
  17  0.703748     -0.351336      -49.2280       49.2280       1747.61       1796.83    
  18  0.985092     -0.150207E-01  -2.10466       2.10466       1785.11       1787.22    
  19  0.440741     -0.819298      -114.798       114.798       1694.67       1809.47    
  20  0.796112     -0.228015      -31.9488       31.9488       1655.48       1687.43    
  21  0.451938     -0.794210      -111.282       111.282       1529.84       1641.12    
  22  0.230902      -1.46576      -205.378       205.378       1799.18       2004.56    
  23  0.760212     -0.274159      -38.4142       38.4142       1776.25       1814.66    
  24  0.250434E-02  -5.98973      -839.262       839.262       1842.47       2681.73    
  25  0.627913E-01  -2.76794      -387.835       387.835       1840.99       2228.82    
  26  0.263128      -1.33511      -187.072       187.072       1756.37       1943.45    
  27  0.177986      -1.72605      -241.849       241.849       1898.07       2139.92    
  28  0.919776     -0.836247E-01  -11.7172       11.7172       1830.81       1842.53    
  29  0.854272     -0.157506      -22.0693       22.0693       1868.19       1890.26    
  30  0.648187     -0.433576      -60.7512       60.7512       1778.56       1839.31    
  31  0.853797     -0.158061      -22.1471       22.1471       1843.54       1865.69    
  32  0.484551     -0.724533      -101.519       101.519       1896.60       1998.12    
  33  0.423817     -0.858454      -120.284       120.284       1672.43       1792.71    
  34  0.932015     -0.704065E-01  -9.86513       9.86513       1921.00       1930.87    
  35  0.161906      -1.82074      -255.116       255.116       1892.11       2147.22    
  36  0.812519     -0.207617      -29.0906       29.0906       1836.91       1866.00    
  37  0.346838      -1.05890      -148.370       148.370       1938.43       2086.80    
  38  0.477141     -0.739943      -103.678       103.678       1873.15       1976.82    
  39  0.931946     -0.704808E-01  -9.87555       9.87555       1848.50       1858.37    
  40  0.189794      -1.66182      -232.848       232.848       1852.37       2085.22    
  41  0.361902      -1.01638      -142.412       142.412       1840.65       1983.06    
  42  0.775630E-02  -4.85925      -680.863       680.863       1881.57       2562.43    
  43  0.292497      -1.22930      -172.246       172.246       1962.20       2134.45    
  44  0.264300      -1.33067      -186.449       186.449       1827.20       2013.65    
  45  0.529597     -0.635638      -89.0636       89.0636       1922.03       2011.09    
  46  0.163272      -1.81234      -253.939       253.939       1889.21       2143.15    
  47  0.212593      -1.54838      -216.954       216.954       1818.60       2035.56    
  48  0.359173      -1.02395      -143.473       143.473       1823.39       1966.87    
  49  0.993707     -0.631295E-02 -0.884551      0.884551       1705.66       1706.55    
  50  0.261479      -1.34140      -187.953       187.953       1661.38       1849.33    
  51  0.441392     -0.817822      -114.591       114.591       1655.87       1770.46    
loop,thermsimp(1:2)        1   545.004       3.24604    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    197       1587.39          0.87          1.11         22.10          0.12          0.05         24.26
Just calling func    0   0         24.26


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    198       1721.86          0.87          1.10         22.20          0.15          0.05         24.37
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1587.39
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    140.117               201
loop is:        1
neval is:      197
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        1      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    560.467      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    140.117               201
loop is:        2
neval is:      197


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      201
neval,tstepnext:      197     201

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.225672      -1.48867      -208.588       208.588       1556.76       1765.35    
   2  0.726663     -0.319292      -44.7382       44.7382       1588.30       1633.03    
   3  0.929061     -0.735808E-01  -10.3099       10.3099       1609.45       1619.76    
   4  0.764703     -0.268268      -37.5889       37.5889       1529.84       1567.43    
   5  0.119617      -2.12346      -297.533       297.533       1655.48       1953.01    
   6  0.369672     -0.995138      -139.436       139.436       1590.93       1730.36    
   7  0.875806     -0.132611      -18.5810       18.5810       1705.66       1724.24    
   8  0.657886     -0.418723      -58.6701       58.6701       1704.99       1763.66    
   9  0.387095E-01  -3.25167      -455.614       455.614       1706.19       2161.81    
  10  0.454078     -0.789485      -110.620       110.620       1655.87       1766.49    
  11  0.890470     -0.116006      -16.2543       16.2543       1751.28       1767.54    
  12  0.118445      -2.13331      -298.912       298.912       1785.11       2084.02    
  13  0.190238      -1.65948      -232.521       232.521       1672.43       1904.95    
  14  0.435624     -0.830976      -116.434       116.434       1665.69       1782.12    
  15  0.768655     -0.263114      -36.8666       36.8666       1747.61       1784.47    
  16  0.870896E-01  -2.44082      -342.000       342.000       1694.67       2036.67    
  17  0.936453     -0.656556E-01  -9.19945       9.19945       1758.77       1767.97    
  18  0.159312      -1.83689      -257.379       257.379       1776.25       2033.63    
  19  0.988165     -0.119051E-01  -1.66811       1.66811       1778.56       1780.22    
  20  0.713347     -0.337787      -47.3296       47.3296       1830.81       1878.14    
  21  0.417075     -0.874489      -122.531       122.531       1661.38       1783.91    
  22  0.719048     -0.329827      -46.2143       46.2143       1305.70       1351.91    
  23  0.785519     -0.241411      -33.8258       33.8258       1848.50       1882.32    
  24  0.356994      -1.03004      -144.325       144.325       1843.54       1987.87    
  25  0.357951      -1.02736      -143.950       143.950       1836.91       1980.86    
  26  0.154816      -1.86552      -261.391       261.391       1868.19       2129.58    
  27  0.246912      -1.39872      -195.985       195.985       1732.92       1928.91    
  28  0.553458     -0.591570      -82.8889       82.8889       1707.38       1790.27    
  29  0.729602     -0.315256      -44.1727       44.1727       1613.45       1657.62    
  30  0.605470     -0.501750      -70.3037       70.3037       1921.00       1991.31    
  31  0.278987E-01  -3.57918      -501.503       501.503       1756.37       2257.88    
  32  0.187991      -1.67136      -234.186       234.186       1823.39       2057.58    
  33  0.543158     -0.610355      -85.5211       85.5211       1618.25       1703.77    
  34  0.996749     -0.325625E-02 -0.456255      0.456255       1873.15       1873.60    
  35  0.540727     -0.614841      -86.1496       86.1496       1840.65       1926.80    
  36  0.833271E-01  -2.48498      -348.188       348.188       1896.60       2244.79    
  37  0.404538     -0.905011      -126.807       126.807       1799.18       1925.99    
  38  0.147302      -1.91527      -268.362       268.362       1922.03       2190.39    
  39  0.364226E-01  -3.31257      -464.147       464.147       1827.20       2291.35    
  40  0.381304     -0.964158      -135.095       135.095       1660.61       1795.70    
  41  0.737758     -0.304140      -42.6151       42.6151       1818.60       1861.22    
  42  0.179374      -1.71828      -240.760       240.760       1852.37       2093.13    
  43  0.281757      -1.26671      -177.488       177.488       1938.43       2115.92    
  44  0.192633      -1.64697      -230.768       230.768       1962.20       2192.97    
  45  0.954983     -0.460617E-01  -6.45402       6.45402       1898.07       1904.52    
  46  0.710258     -0.342127      -47.9378       47.9378       1889.21       1937.14    
  47  0.831769     -0.184201      -25.8097       25.8097       1892.11       1917.92    
  48  0.912541     -0.915218E-01  -12.8238       12.8238       1742.17       1754.99    
  49  0.221543      -1.50714      -211.176       211.176       1840.99       2052.16    
  50  0.690803E-02  -4.97507      -697.091       697.091       1881.57       2578.66    
  51  0.162616      -1.81637      -254.503       254.503       1587.39       1841.89    
loop,thermsimp(1:2)        2   208.588       44.7382    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    199       1526.77          0.88          1.12         22.12          0.17          0.05         24.33
Just calling func    0   0         24.33


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1526.77
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    140.117               201
loop is:        2
neval is:      198
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        2      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    560.467      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    140.117               201
loop is:        3
neval is:      198


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      201
neval,tstepnext:      198     201

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.415533     -0.878194      -123.050       123.050       1305.70       1428.75    
   2  0.117190E-02  -6.74913      -945.667       945.667       1529.84       2475.51    
   3  0.432199     -0.838870      -117.540       117.540       1609.45       1726.99    
   4  0.466381     -0.762753      -106.875       106.875       1588.30       1695.17    
   5  0.696685     -0.361422      -50.6413       50.6413       1613.45       1664.09    
   6  0.193714      -1.64137      -229.984       229.984       1618.25       1848.23    
   7  0.535145     -0.625217      -87.6035       87.6035       1705.66       1793.26    
   8  0.812984     -0.207044      -29.0104       29.0104       1590.93       1619.94    
   9  0.956789     -0.441723E-01  -6.18928       6.18928       1742.17       1748.36    
  10  0.496711E-01  -3.00233      -420.677       420.677       1704.99       2125.66    
  11  0.206308E-01  -3.88097      -543.790       543.790       1556.76       2100.55    
  12  0.423434     -0.859358      -120.411       120.411       1655.87       1776.28    
  13  0.216826      -1.52866      -214.191       214.191       1751.28       1965.47    
  14  0.792422     -0.232661      -32.5998       32.5998       1758.77       1791.37    
  15  0.265940      -1.32449      -185.583       185.583       1778.56       1964.14    
  16  0.993400     -0.662201E-02 -0.927856      0.927856       1665.69       1666.62    
  17  0.645200E-01  -2.74078      -384.030       384.030       1661.38       2045.41    
  18  0.651527     -0.428436      -60.0311       60.0311       1747.61       1807.64    
  19  0.858875     -0.152131      -21.3162       21.3162       1707.38       1728.69    
  20  0.126056      -2.07103      -290.186       290.186       1660.61       1950.80    
  21  0.772661E-01  -2.56050      -358.769       358.769       1587.39       1946.16    
  22  0.441429     -0.817737      -114.579       114.579       1818.60       1933.18    
  23  0.166586      -1.79224      -251.123       251.123       1873.15       2124.27    
  24  0.217490      -1.52560      -213.763       213.763       1830.81       2044.58    
  25  0.632871     -0.457488      -64.1018       64.1018       1848.50       1912.60    
  26  0.201694      -1.60100      -224.328       224.328       1898.07       2122.40    
  27  0.282690      -1.26341      -177.025       177.025       1672.43       1849.46    
  28  0.255086E-01  -3.66874      -514.053       514.053       1892.11       2406.16    
  29  0.562308     -0.575706      -80.6661       80.6661       1799.18       1879.85    
  30  0.283366E-01  -3.56360      -499.320       499.320       1840.65       2339.97    
  31  0.404254E-01  -3.20830      -449.536       449.536       1732.92       2182.46    
  32  0.170475      -1.76917      -247.890       247.890       1889.21       2137.10    
  33  0.141712      -1.95396      -273.782       273.782       1655.48       1929.26    
  34  0.773173     -0.257253      -36.0454       36.0454       1836.91       1872.95    
  35  0.255978      -1.36266      -190.932       190.932       1843.54       2034.47    
  36  0.823739     -0.193902      -27.1689       27.1689       1921.00       1948.17    
  37  0.166307      -1.79392      -251.358       251.358       1776.25       2027.61    
  38  0.676319     -0.391090      -54.7983       54.7983       1694.67       1749.47    
  39  0.144546      -1.93416      -271.008       271.008       1840.99       2112.00    
  40  0.593436     -0.521826      -73.1167       73.1167       1823.39       1896.51    
  41  0.762921     -0.270600      -37.9156       37.9156       1785.11       1823.03    
  42  0.855796     -0.155724      -21.8195       21.8195       1852.37       1874.19    
  43  0.433555     -0.835737      -117.101       117.101       1938.43       2055.53    
  44  0.252891      -1.37480      -192.632       192.632       1868.19       2060.82    
  45  0.942909     -0.587850E-01  -8.23677       8.23677       1706.19       1714.43    
  46  0.432313     -0.838605      -117.503       117.503       1922.03       2039.53    
  47  0.975713     -0.245869E-01  -3.44504       3.44504       1962.20       1965.65    
  48  0.541226     -0.613919      -86.0204       86.0204       1896.60       1982.62    
  49  0.255057      -1.36627      -191.437       191.437       1756.37       1947.81    
  50  0.202141      -1.59879      -224.017       224.017       1827.20       2051.22    
  51  0.949562     -0.517549E-01  -7.25173       7.25173       1526.77       1534.02    
loop,thermsimp(1:2)        3   123.050       945.667    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    200       2366.90          0.87          1.12         22.06          0.11          0.05         24.21
Just calling func    0   0         24.21


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2366.90
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    140.117               201
loop is:        3
neval is:      199
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        3      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    560.467      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    140.117               201
loop is:        4
neval is:      199


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      201
neval,tstepnext:      199     201

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.656626     -0.420640      -58.9387       58.9387       1305.70       1364.63    
   2  0.880966     -0.126736      -17.7578       17.7578       1526.77       1544.53    
   3  0.854972     -0.156687      -21.9545       21.9545       1590.93       1612.88    
   4  0.797101     -0.226774      -31.7749       31.7749       1613.45       1645.23    
   5  0.158477      -1.84214      -258.116       258.116       1665.69       1923.80    
   6  0.593839     -0.521148      -73.0216       73.0216       1588.30       1661.32    
   7  0.817101     -0.201993      -28.3026       28.3026       1706.19       1734.49    
   8  0.997190     -0.281377E-02 -0.394256      0.394256       1609.45       1609.85    
   9  0.402857     -0.909174      -127.391       127.391       1707.38       1834.77    
  10  0.690455     -0.370405      -51.9000       51.9000       1742.17       1794.07    
  11  0.609635     -0.494895      -69.3431       69.3431       1694.67       1764.02    
  12  0.491117     -0.711073      -99.6333       99.6333       1655.87       1755.51    
  13  0.990676     -0.936814E-02  -1.31263       1.31263       1758.77       1760.09    
  14  0.976919     -0.233519E-01  -3.27200       3.27200       1705.66       1708.93    
  15  0.692556     -0.367366      -51.4742       51.4742       1747.61       1799.08    
  16  0.549694     -0.598394      -83.8451       83.8451       1785.11       1868.96    
  17  0.538267E-01  -2.92199      -409.419       409.419       1618.25       2027.66    
  18  0.602193     -0.507178      -71.0642       71.0642       1672.43       1743.50    
  19  0.537276     -0.621243      -87.0466       87.0466       1836.91       1923.96    
  20  0.338220      -1.08406      -151.895       151.895       1852.37       2004.27    
  21  0.306772      -1.18165      -165.569       165.569       1799.18       1964.75    
  22  0.895389     -0.110497      -15.4826       15.4826       1823.39       1838.87    
  23  0.120096      -2.11946      -296.972       296.972       1848.50       2145.47    
  24  0.680166     -0.385418      -54.0035       54.0035       1655.48       1709.48    
  25  0.369434     -0.995782      -139.526       139.526       1818.60       1958.13    
  26  0.235484      -1.44611      -202.625       202.625       1587.39       1790.01    
  27  0.260836      -1.34386      -188.298       188.298       1756.37       1944.67    
  28  0.720259     -0.328144      -45.9786       45.9786       1921.00       1966.98    
  29  0.695069     -0.363744      -50.9667       50.9667       1660.61       1711.58    
  30  0.105076      -2.25307      -315.694       315.694       1778.56       2094.25    
  31  0.968349     -0.321628E-01  -4.50655       4.50655       1751.28       1755.79    
  32  0.974131     -0.262091E-01  -3.67234       3.67234       1962.20       1965.87    
  33  0.647785E-01  -2.73678      -383.469       383.469       1896.60       2280.07    
  34  0.910402     -0.938690E-01  -13.1526       13.1526       1776.25       1789.40    
  35  0.488733     -0.715939      -100.315       100.315       1843.54       1943.85    
  36  0.377436E-01  -3.27694      -459.155       459.155       1922.03       2381.18    
  37  0.154608      -1.86686      -261.579       261.579       1830.81       2092.39    
  38  0.277804      -1.28084      -179.467       179.467       1661.38       1840.84    
  39  0.969547     -0.309263E-01  -4.33329       4.33329       1827.20       1831.54    
  40  0.380083     -0.967367      -135.544       135.544       1938.43       2073.98    
  41  0.751822     -0.285256      -39.9692       39.9692       1868.19       1908.16    
  42  0.137692      -1.98274      -277.815       277.815       1556.76       1834.58    
  43  0.293470      -1.22598      -171.781       171.781       1840.99       2012.77    
  44  0.433705     -0.835390      -117.052       117.052       1898.07       2015.12    
  45  0.418034     -0.872194      -122.209       122.209       1873.15       1995.35    
  46  0.166728      -1.79139      -251.004       251.004       1704.99       1955.99    
  47  0.921960     -0.812537E-01  -11.3850       11.3850       1889.21       1900.59    
  48  0.412601     -0.885275      -124.042       124.042       1732.92       1856.96    
  49  0.925181     -0.777655E-01  -10.8963       10.8963       1840.65       1851.55    
  50  0.687711     -0.374386      -52.4579       52.4579       1892.11       1944.56    
  51  0.729890     -0.314862      -44.1175       44.1175       2366.90       2411.02    
loop,thermsimp(1:2)        4   58.9387       17.7578    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    201       1529.84          0.88          1.11         21.97          0.19          0.05         24.21
Just calling func    0   0         24.21


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    202       1873.84          0.86          1.09         22.02          0.16          0.04         24.16
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  200    1529.8       0.8624E-01 -2.230      3.272     -102.6     0.4983    
                       2.051      1.441     -99.70      3.810      1.330    

                       3.310     -6.956      1.540      7000.      7000.    

                      -2.473      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -11.96     -8.803     -5.560      7.782    

                      -11.69     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.    -0.9916E-02 0.1801    -0.1064     0.1750E-01

                     -0.2486     0.3971E-01 0.1416     0.9301E-01 0.8314E-02



                      -1.125    -0.9493      0.000    -0.1105    -0.1001    

                      0.3940E-02 0.1823    -0.7116     0.4969E-01 0.4538    

                      0.3570E-01 0.1349    -0.4231     -1.045      7000.    



                     -0.2390    -0.6590     -2.142     -1.982    -0.3807    

                     -0.3252      9.116      8.712    -0.1672E+05 -6.000    

                      -1.240     -1.767      9.600      8.810    -0.1969E+05



                      -6.000      1.199    -0.5794      8.913      9.136    

                     -0.1944E+05 -6.000    -0.4448    -0.1882E-01  9.252    

                       8.894    -0.1891E+05 -6.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1529.84
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    140.117               201
loop is:        4
neval is:      201
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        4      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    560.467      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    140.117               201
loop is:        5
neval is:      201


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      201
neval,tstepnext:      201     201

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.630229     -0.461672      -64.6881       64.6881       1305.70       1370.38    
   2  0.876370     -0.131967      -18.4908       18.4908       1526.77       1545.26    
   3  0.840080     -0.174259      -24.4166       24.4166       1609.45       1633.87    
   4  0.608986E-01  -2.79854      -392.123       392.123       1590.93       1983.05    
   5  0.311901      -1.16507      -163.246       163.246       1613.45       1776.70    
   6  0.937552E-01  -2.36707      -331.666       331.666       1588.30       1919.96    
   7  0.608418     -0.496893      -69.6231       69.6231       1705.66       1775.28    
   8  0.297707      -1.21164      -169.772       169.772       1655.48       1825.25    
   9  0.365777      -1.00573      -140.920       140.920       1660.61       1801.53    
  10  0.194673      -1.63643      -229.292       229.292       1706.19       1935.48    
  11  0.941388     -0.604003E-01  -8.46310       8.46310       1672.43       1680.89    
  12  0.984881     -0.152343E-01  -2.13458       2.13458       1655.87       1658.01    
  13  0.750245     -0.287355      -40.2633       40.2633       1751.28       1791.54    
  14  0.437446     -0.826803      -115.849       115.849       1758.77       1874.62    
  15  0.174754      -1.74437      -244.416       244.416       1694.67       1939.09    
  16  0.300465E-01  -3.50501      -491.111       491.111       1776.25       2267.36    
  17  0.372924     -0.986380      -138.208       138.208       1587.39       1725.60    
  18  0.803506     -0.218771      -30.6535       30.6535       1742.17       1772.82    
  19  0.232583      -1.45851      -204.362       204.362       1747.61       1951.97    
  20  0.383368     -0.958759      -134.338       134.338       1827.20       1961.54    
  21  0.622786     -0.473552      -66.3526       66.3526       1556.76       1623.12    
  22  0.356422      -1.03164      -144.550       144.550       1707.38       1851.93    
  23  0.919964     -0.834212E-01  -11.6887       11.6887       1823.39       1835.08    
  24  0.550740     -0.596492      -83.5786       83.5786       1661.38       1744.95    
  25  0.402627     -0.909745      -127.471       127.471       1840.65       1968.12    
  26  0.256265      -1.36154      -190.775       190.775       1732.92       1923.70    
  27  0.763510     -0.269828      -37.8075       37.8075       1785.11       1822.92    
  28  0.388963     -0.944271      -132.308       132.308       1889.21       2021.52    
  29  0.981923     -0.182423E-01  -2.55605       2.55605       1868.19       1870.74    
  30  0.656629     -0.420635      -58.9381       58.9381       1665.69       1724.63    
  31  0.932472     -0.699161E-01  -9.79643       9.79643       1836.91       1846.71    
  32  0.336775      -1.08834      -152.495       152.495       1843.54       1996.03    
  33  0.810758     -0.209786      -29.3945       29.3945       1892.11       1921.50    
  34  0.557014     -0.585166      -81.9916       81.9916       1756.37       1838.37    
  35  0.652747     -0.426565      -59.7690       59.7690       1704.99       1764.76    
  36  0.890774     -0.115665      -16.2066       16.2066       1818.60       1834.81    
  37  0.703035     -0.352349      -49.3700       49.3700       1799.18       1848.55    
  38  0.534296     -0.626805      -87.8259       87.8259       1962.20       2050.03    
  39  0.604162     -0.503914      -70.6068       70.6068       1921.00       1991.61    
  40  0.545557     -0.605948      -84.9035       84.9035       1873.15       1958.05    
  41  0.371346     -0.990620      -138.803       138.803       1852.37       1991.17    
  42  0.491801     -0.709680      -99.4382       99.4382       1840.99       1940.43    
  43  0.879731     -0.128139      -17.9545       17.9545       1898.07       1916.03    
  44  0.995113     -0.489866E-02 -0.686384      0.686384       1618.25       1618.93    
  45  0.467927     -0.759444      -106.411       106.411       1938.43       2044.84    
  46  0.355083      -1.03540      -145.077       145.077       1830.81       1975.89    
  47  0.216960      -1.52804      -214.104       214.104       1778.56       1992.66    
  48  0.276988      -1.28378      -179.879       179.879       1848.50       2028.38    
  49  0.905458     -0.993144E-01  -13.9156       13.9156       1896.60       1910.52    
  50  0.704241     -0.350635      -49.1298       49.1298       1922.03       1971.16    
  51  0.784564     -0.242627      -33.9962       33.9962       1529.84       1563.84    
loop,thermsimp(1:2)        5   64.6881       18.4908    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    203       1868.97          0.88          1.12         21.89          0.19          0.05         24.11
Just calling func    0   0         24.11


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1868.97
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    140.117               201
loop is:        5
neval is:      202
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        5      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    560.467      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    140.117               201
loop is:        6
neval is:      202


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 




neval>tstepnex so lower away!t
---> lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
     new SAtemp,tstepnext are :    70.0584               251

 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      251
neval,tstepnext:      202     251

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.215976      -1.53259      -107.371       107.371       1305.70       1413.07    
   2  0.942431     -0.592928E-01  -4.15396       4.15396       1526.77       1530.93    
   3  0.193824      -1.64081      -114.952       114.952       1529.84       1644.79    
   4  0.162512      -1.81700      -127.296       127.296       1618.25       1745.54    
   5  0.625243     -0.469616      -32.9005       32.9005       1556.76       1589.66    
   6  0.499178     -0.694793      -48.6761       48.6761       1609.45       1658.13    
   7  0.706095     -0.348006      -24.3807       24.3807       1655.87       1680.25    
   8  0.527414     -0.639770      -44.8213       44.8213       1672.43       1717.25    
   9  0.575748     -0.552085      -38.6782       38.6782       1665.69       1704.37    
  10  0.490522     -0.712286      -49.9016       49.9016       1587.39       1637.29    
  11  0.306517      -1.18248      -82.8429       82.8429       1661.38       1744.22    
  12  0.798470     -0.225057      -15.7672       15.7672       1704.99       1720.75    
  13  0.333550      -1.09796      -76.9216       76.9216       1742.17       1819.09    
  14  0.166731      -1.79138      -125.501       125.501       1705.66       1831.16    
  15  0.443580     -0.812878      -56.9490       56.9490       1613.45       1670.40    
  16  0.669985     -0.400500      -28.0584       28.0584       1751.28       1779.34    
  17  0.339921      -1.07904      -75.5960       75.5960       1660.61       1736.21    
  18  0.201260      -1.60316      -112.315       112.315       1785.11       1897.43    
  19  0.772250     -0.258447      -18.1064       18.1064       1655.48       1673.59    
  20  0.401372E-01  -3.21545      -225.270       225.270       1818.60       2043.87    
  21  0.940962     -0.608526E-01  -4.26324       4.26324       1823.39       1827.66    
  22  0.115324      -2.16001      -151.327       151.327       1756.37       1907.70    
  23  0.939991E-01  -2.36447      -165.651       165.651       1836.91       2002.56    
  24  0.412221     -0.886196      -62.0855       62.0855       1799.18       1861.27    
  25  0.136462      -1.99171      -139.536       139.536       1707.38       1846.91    
  26  0.310095      -1.17088      -82.0297       82.0297       1868.19       1950.22    
  27  0.985727     -0.143755E-01  -1.00712       1.00712       1758.77       1759.78    
  28  0.900161     -0.105182      -7.36886       7.36886       1896.60       1903.97    
  29  0.250220      -1.38542      -97.0601       97.0601       1898.07       1995.13    
  30  0.780405     -0.247942      -17.3704       17.3704       1588.30       1605.67    
  31  0.228719      -1.47526      -103.354       103.354       1892.11       1995.46    
  32  0.407088     -0.898727      -62.9634       62.9634       1732.92       1795.88    
  33  0.975627     -0.246749E-01  -1.72869       1.72869       1706.19       1707.92    
  34  0.885140     -0.122009      -8.54779       8.54779       1694.67       1703.22    
  35  0.896135     -0.109664      -7.68290       7.68290       1840.99       1848.67    
  36  0.856661     -0.154713      -10.8390       10.8390       1747.61       1758.45    
  37  0.258643      -1.35231      -94.7406       94.7406       1873.15       1967.89    
  38  0.336283      -1.08980      -76.3498       76.3498       1827.20       1903.55    
  39  0.868205     -0.141327      -9.90115       9.90115       1840.65       1850.55    
  40  0.937935     -0.640747E-01  -4.48897       4.48897       1922.03       1926.52    
  41  0.418906     -0.870109      -60.9585       60.9585       1830.81       1891.77    
  42  0.351040      -1.04685      -73.3410       73.3410       1590.93       1664.27    
  43  0.611628E-01  -2.79422      -195.758       195.758       1852.37       2048.13    
  44  0.153518      -1.87394      -131.285       131.285       1921.00       2052.29    
  45  0.938341     -0.636423E-01  -4.45868       4.45868       1778.56       1783.01    
  46  0.598133     -0.513942      -36.0060       36.0060       1843.54       1879.55    
  47  0.795771     -0.228444      -16.0045       16.0045       1889.21       1905.21    
  48  0.295375      -1.21951      -85.4370       85.4370       1848.50       1933.93    
  49  0.804738     -0.217239      -15.2194       15.2194       1938.43       1953.65    
  50  0.260094      -1.34671      -94.3487       94.3487       1962.20       2056.55    
  51  0.640517     -0.445479      -31.2096       31.2096       1868.97       1900.18    
loop,thermsimp(1:2)        6   107.371       4.15396    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    204       1999.28          0.87          1.11         21.98          0.10          0.05         24.11
Just calling func    0   0         24.12


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1999.28
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    70.0584               251
loop is:        6
neval is:      203
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        6      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    560.467      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    70.0584               251
loop is:        7
neval is:      203


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      251
neval,tstepnext:      203     251

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.264215      -1.33099      -93.2473       93.2473       1305.70       1398.94    
   2  0.401807     -0.911784      -63.8781       63.8781       1526.77       1590.65    
   3  0.418885     -0.870159      -60.9619       60.9619       1556.76       1617.73    
   4  0.753378     -0.283189      -19.8398       19.8398       1588.30       1608.14    
   5  0.792066     -0.233111      -16.3314       16.3314       1587.39       1603.72    
   6  0.868474     -0.141017      -9.87944       9.87944       1529.84       1539.72    
   7  0.318670      -1.14360      -80.1187       80.1187       1609.45       1689.57    
   8  0.863267     -0.147031      -10.3008       10.3008       1590.93       1601.23    
   9  0.589255     -0.528896      -37.0536       37.0536       1613.45       1650.51    
  10  0.632079E-01  -2.76133      -193.454       193.454       1655.48       1848.93    
  11  0.992270     -0.775975E-02 -0.543636      0.543636       1655.87       1656.42    
  12  0.466140     -0.763269      -53.4734       53.4734       1694.67       1748.15    
  13  0.177509      -1.72873      -121.112       121.112       1665.69       1786.80    
  14  0.933326     -0.690005E-01  -4.83407       4.83407       1706.19       1711.03    
  15  0.876357     -0.131982      -9.24642       9.24642       1672.43       1681.68    
  16  0.673496     -0.395274      -27.6923       27.6923       1704.99       1732.68    
  17  0.648708     -0.432773      -30.3194       30.3194       1660.61       1690.93    
  18  0.400813     -0.914259      -64.0516       64.0516       1661.38       1725.43    
  19  0.763164     -0.270282      -18.9355       18.9355       1618.25       1637.18    
  20  0.196240      -1.62842      -114.084       114.084       1747.61       1861.69    
  21  0.923666     -0.794046E-01  -5.56296       5.56296       1758.77       1764.34    
  22  0.999600     -0.400298E-03 -0.280442E-01  0.280442E-01   1751.28       1751.31    
  23  0.379715     -0.968335      -67.8401       67.8401       1778.56       1846.40    
  24  0.197375      -1.62265      -113.680       113.680       1732.92       1846.60    
  25  0.760736     -0.273468      -19.1588       19.1588       1742.17       1761.33    
  26  0.392182     -0.936030      -65.5768       65.5768       1823.39       1888.97    
  27  0.256208      -1.36177      -95.4032       95.4032       1705.66       1801.06    
  28  0.251796      -1.37914      -96.6200       96.6200       1707.38       1804.00    
  29  0.332089E-01  -3.40494      -238.545       238.545       1840.99       2079.53    
  30  0.970457     -0.299883E-01  -2.10093       2.10093       1840.65       1842.75    
  31  0.467370E-01  -3.06322      -214.604       214.604       1799.18       2013.79    
  32  0.716125     -0.333901      -23.3926       23.3926       1843.54       1866.93    
  33  0.757897     -0.277208      -19.4207       19.4207       1830.81       1850.24    
  34  0.765628     -0.267059      -18.7097       18.7097       1785.11       1803.82    
  35  0.323816      -1.12758      -78.9965       78.9965       1868.97       1947.97    
  36  0.909845     -0.944807E-01  -6.61917       6.61917       1827.20       1833.82    
  37  0.515782     -0.662071      -46.3837       46.3837       1896.60       1942.98    
  38  0.464370     -0.767074      -53.7400       53.7400       1889.21       1942.95    
  39  0.445707     -0.808094      -56.6138       56.6138       1756.37       1812.99    
  40  0.786320     -0.240391      -16.8415       16.8415       1922.03       1938.87    
  41  0.631860     -0.459087      -32.1629       32.1629       1848.50       1880.66    
  42  0.672488     -0.396772      -27.7972       27.7972       1868.19       1895.98    
  43  0.251717E-02  -5.98462      -419.273       419.273       1938.43       2357.70    
  44  0.245023      -1.40640      -98.5305       98.5305       1873.15       1971.68    
  45  0.252688      -1.37560      -96.3723       96.3723       1898.07       1994.44    
  46  0.268946      -1.31324      -92.0038       92.0038       1892.11       1984.11    
  47  0.550357     -0.597189      -41.8381       41.8381       1836.91       1878.75    
  48  0.826205     -0.190912      -13.3750       13.3750       1818.60       1831.98    
  49  0.964276     -0.363780E-01  -2.54859       2.54859       1852.37       1854.92    
  50  0.415479     -0.878324      -61.5340       61.5340       1921.00       1982.54    
  51  0.599143E-01  -2.81484      -197.203       197.203       1999.28       2196.48    
loop,thermsimp(1:2)        7   93.2473       63.8781    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    205       1597.91          0.87          1.11         22.07          0.11          0.05         24.21
Just calling func    0   0         24.22


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1597.91
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    70.0584               251
loop is:        7
neval is:      204
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        7      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    560.467      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    70.0584               251
loop is:        8
neval is:      204


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      251
neval,tstepnext:      204     251

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.105813      -2.24608      -157.357       157.357       1305.70       1463.05    
   2  0.476819     -0.740619      -51.8866       51.8866       1529.84       1581.73    
   3  0.564430     -0.571938      -40.0691       40.0691       1526.77       1566.84    
   4  0.211741      -1.55239      -108.758       108.758       1590.93       1699.69    
   5  0.154226E-01  -4.17192      -292.278       292.278       1587.39       1879.66    
   6  0.489577     -0.714213      -50.0366       50.0366       1588.30       1638.33    
   7  0.583965     -0.537914      -37.6854       37.6854       1556.76       1594.45    
   8  0.430258     -0.843370      -59.0852       59.0852       1618.25       1677.33    
   9  0.280982      -1.26946      -88.9367       88.9367       1613.45       1702.39    
  10  0.535183     -0.625146      -43.7968       43.7968       1655.87       1699.67    
  11  0.306750      -1.18172      -82.7897       82.7897       1672.43       1755.22    
  12  0.924930     -0.780370E-01  -5.46715       5.46715       1609.45       1614.92    
  13  0.829670E-01  -2.48931      -174.397       174.397       1660.61       1835.01    
  14  0.330275      -1.10783      -77.6128       77.6128       1706.19       1783.80    
  15  0.229751      -1.47076      -103.039       103.039       1661.38       1764.41    
  16  0.455737     -0.785839      -55.0546       55.0546       1704.99       1760.04    
  17  0.830949     -0.185187      -12.9739       12.9739       1694.67       1707.65    
  18  0.148624      -1.90634      -133.555       133.555       1751.28       1884.84    
  19  0.883001     -0.124429      -8.71732       8.71732       1742.17       1750.89    
  20  0.668001     -0.403466      -28.2662       28.2662       1758.77       1787.04    
  21  0.610583     -0.493341      -34.5627       34.5627       1665.69       1700.25    
  22  0.689050     -0.372441      -26.0926       26.0926       1705.66       1731.75    
  23  0.124417      -2.08412      -146.010       146.010       1785.11       1931.12    
  24  0.785584E-01  -2.54391      -178.223       178.223       1707.38       1885.60    
  25  0.936565     -0.655366E-01  -4.59139       4.59139       1756.37       1760.97    
  26  0.483719     -0.726252      -50.8801       50.8801       1818.60       1869.48    
  27  0.715685     -0.334515      -23.4356       23.4356       1827.20       1850.64    
  28  0.786437     -0.240243      -16.8310       16.8310       1840.65       1857.48    
  29  0.361023      -1.01881      -71.3765       71.3765       1778.56       1849.93    
  30  0.325559      -1.12221      -78.6203       78.6203       1732.92       1811.54    
  31  0.850460     -0.161978      -11.3479       11.3479       1655.48       1666.83    
  32  0.301358      -1.19946      -84.0321       84.0321       1830.81       1914.85    
  33  0.304725      -1.18834      -83.2535       83.2535       1852.37       1935.62    
  34  0.887065     -0.119838      -8.39563       8.39563       1747.61       1756.00    
  35  0.762822     -0.270730      -18.9669       18.9669       1843.54       1862.51    
  36  0.364130      -1.01024      -70.7762       70.7762       1836.91       1907.69    
  37  0.762041     -0.271754      -19.0387       19.0387       1848.50       1867.54    
  38  0.941180     -0.606207E-01  -4.24699       4.24699       1823.39       1827.64    
  39  0.449403     -0.799835      -56.0352       56.0352       1868.19       1924.22    
  40  0.743855     -0.295910      -20.7310       20.7310       1922.03       1942.76    
  41  0.743104     -0.296920      -20.8017       20.8017       1889.21       1910.01    
  42  0.350527      -1.04832      -73.4434       73.4434       1896.60       1970.04    
  43  0.607240     -0.498831      -34.9473       34.9473       1868.97       1903.92    
  44  0.557347     -0.584567      -40.9538       40.9538       1873.15       1914.10    
  45  0.217970      -1.52340      -106.727       106.727       1921.00       2027.73    
  46  0.364570      -1.00904      -70.6914       70.6914       1892.11       1962.80    
  47  0.330900      -1.10594      -77.4803       77.4803       1898.07       1975.55    
  48  0.861127     -0.149514      -10.4747       10.4747       1799.18       1809.66    
  49  0.710764E-01  -2.64400      -185.234       185.234       1840.99       2026.22    
  50  0.264543      -1.32975      -93.1603       93.1603       1999.28       2092.44    
  51  0.985836     -0.142654E-01 -0.999413      0.999413       1597.91       1598.91    
loop,thermsimp(1:2)        8   157.357       51.8866    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    206       1924.84          0.87          1.11         21.95          0.19          0.05         24.18
Just calling func    0   0         24.18


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1924.84
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    70.0584               251
loop is:        8
neval is:      205
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        8      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    560.467      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    70.0584               251
loop is:        9
neval is:      205


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      251
neval,tstepnext:      205     251

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.641422     -0.444068      -31.1107       31.1107       1305.70       1336.81    
   2  0.805197     -0.216668      -15.1794       15.1794       1526.77       1541.95    
   3  0.976428     -0.238543E-01  -1.67120       1.67120       1529.84       1531.51    
   4  0.599028     -0.512447      -35.9012       35.9012       1556.76       1592.67    
   5  0.591081     -0.525802      -36.8369       36.8369       1597.91       1634.75    
   6  0.151500      -1.88717      -132.212       132.212       1609.45       1741.67    
   7  0.565682     -0.569723      -39.9139       39.9139       1588.30       1628.21    
   8  0.345258      -1.06346      -74.5046       74.5046       1655.48       1729.98    
   9  0.658101     -0.418397      -29.3122       29.3122       1618.25       1647.56    
  10  0.691977E-01  -2.67079      -187.111       187.111       1655.87       1842.98    
  11  0.289062      -1.24111      -86.9505       86.9505       1590.93       1677.88    
  12  0.949819     -0.514835E-01  -3.60686       3.60686       1665.69       1669.30    
  13  0.791632     -0.233658      -16.3697       16.3697       1613.45       1629.82    
  14  0.400532     -0.914962      -64.1008       64.1008       1694.67       1758.78    
  15  0.241886      -1.41929      -99.4332       99.4332       1705.66       1805.09    
  16  0.383016     -0.959678      -67.2336       67.2336       1742.17       1809.40    
  17  0.993978     -0.604041E-02 -0.423181      0.423181       1672.43       1672.85    
  18  0.807089     -0.214322      -15.0150       15.0150       1747.61       1762.62    
  19  0.732161     -0.311755      -21.8411       21.8411       1704.99       1726.83    
  20  0.176507      -1.73440      -121.509       121.509       1756.37       1877.88    
  21  0.628098     -0.465059      -32.5813       32.5813       1661.38       1693.96    
  22  0.383392     -0.958697      -67.1648       67.1648       1706.19       1773.36    
  23  0.906421     -0.982517E-01  -6.88336       6.88336       1758.77       1765.66    
  24  0.329288      -1.11082      -77.8226       77.8226       1799.18       1877.00    
  25  0.869436     -0.139911      -9.80193       9.80193       1732.92       1742.72    
  26  0.354994      -1.03565      -72.5563       72.5563       1823.39       1895.95    
  27  0.127935      -2.05623      -144.057       144.057       1660.61       1804.67    
  28  0.840123     -0.174207      -12.2047       12.2047       1778.56       1790.76    
  29  0.625861     -0.468627      -32.8313       32.8313       1827.20       1860.04    
  30  0.488384     -0.716653      -50.2076       50.2076       1840.65       1890.86    
  31  0.888226E-01  -2.42111      -169.619       169.619       1843.54       2013.16    
  32  0.262955      -1.33577      -93.5820       93.5820       1848.50       1942.08    
  33  0.153205E-01  -4.17856      -292.744       292.744       1818.60       2111.35    
  34  0.432355     -0.838509      -58.7447       58.7447       1587.39       1646.13    
  35  0.225273      -1.49044      -104.418       104.418       1751.28       1855.70    
  36  0.812147     -0.208074      -14.5774       14.5774       1707.38       1721.95    
  37  0.832805E-01  -2.48554      -174.133       174.133       1868.97       2043.11    
  38  0.442280     -0.815813      -57.1545       57.1545       1836.91       1894.06    
  39  0.106639      -2.23831      -156.813       156.813       1889.21       2046.02    
  40  0.143053      -1.94454      -136.231       136.231       1873.15       2009.38    
  41  0.871774     -0.137225      -9.61378       9.61378       1830.81       1840.43    
  42  0.137692      -1.98273      -138.907       138.907       1868.19       2007.09    
  43  0.366512      -1.00372      -70.3194       70.3194       1785.11       1855.43    
  44  0.617157     -0.482633      -33.8125       33.8125       1852.37       1886.18    
  45  0.420337     -0.866700      -60.7196       60.7196       1922.03       1982.75    
  46  0.935846     -0.663044E-01  -4.64518       4.64518       1892.11       1896.75    
  47  0.979912     -0.202925E-01  -1.42166       1.42166       1896.60       1898.02    
  48  0.692793     -0.367024      -25.7132       25.7132       1898.07       1923.78    
  49  0.155424      -1.86160      -130.421       130.421       1840.99       1971.41    
  50  0.703218     -0.352088      -24.6668       24.6668       1921.00       1945.67    
  51  0.396734     -0.924489      -64.7683       64.7683       1924.84       1989.61    
loop,thermsimp(1:2)        9   31.1107       15.1794    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    207       1567.29          0.86          1.11         21.98          0.12          0.04         24.12
Just calling func    0   0         24.12


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1567.29
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    70.0584               251
loop is:        9
neval is:      206
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        9      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    560.467      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    70.0584               251
loop is:       10
neval is:      206


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      251
neval,tstepnext:      206     251

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.833163     -0.182525      -12.7874       12.7874       1305.70       1318.48    
   2  0.367543      -1.00091      -70.1225       70.1225       1529.84       1599.96    
   3  0.528755     -0.637231      -44.6434       44.6434       1526.77       1571.41    
   4  0.776829     -0.252535      -17.6922       17.6922       1556.76       1574.46    
   5  0.149594E-01  -4.20242      -294.415       294.415       1588.30       1882.71    
   6  0.892228     -0.114033      -7.98897       7.98897       1613.45       1621.44    
   7  0.191037      -1.65529      -115.967       115.967       1597.91       1713.88    
   8  0.516533     -0.660616      -46.2817       46.2817       1587.39       1633.67    
   9  0.273230      -1.29744      -90.8968       90.8968       1618.25       1709.14    
  10  0.822225     -0.195741      -13.7133       13.7133       1665.69       1679.40    
  11  0.359850      -1.02207      -71.6045       71.6045       1672.43       1744.04    
  12  0.611658     -0.491581      -34.4394       34.4394       1590.93       1625.37    
  13  0.249481      -1.38837      -97.2671       97.2671       1661.38       1758.64    
  14  0.441252     -0.818139      -57.3175       57.3175       1707.38       1764.69    
  15  0.910514E-01  -2.39633      -167.883       167.883       1704.99       1872.87    
  16  0.745146     -0.294175      -20.6094       20.6094       1655.48       1676.09    
  17  0.758301     -0.276675      -19.3834       19.3834       1609.45       1628.84    
  18  0.638521     -0.448601      -31.4283       31.4283       1732.92       1764.35    
  19  0.150180      -1.89592      -132.825       132.825       1694.67       1827.50    
  20  0.144147      -1.93692      -135.698       135.698       1747.61       1883.30    
  21  0.104928      -2.25448      -157.945       157.945       1758.77       1916.72    
  22  0.398120     -0.921002      -64.5240       64.5240       1706.19       1770.72    
  23  0.802258     -0.220325      -15.4356       15.4356       1778.56       1793.99    
  24  0.399299     -0.918044      -64.3167       64.3167       1660.61       1724.93    
  25  0.493060     -0.707124      -49.5400       49.5400       1705.66       1755.20    
  26  0.504407     -0.684372      -47.9460       47.9460       1742.17       1790.12    
  27  0.762058     -0.271733      -19.0372       19.0372       1830.81       1849.85    
  28  0.430267     -0.843350      -59.0838       59.0838       1655.87       1714.96    
  29  0.993832     -0.618725E-02 -0.433469      0.433469       1785.11       1785.55    
  30  0.705390     -0.349005      -24.4507       24.4507       1751.28       1775.73    
  31  0.969760     -0.307069E-01  -2.15128       2.15128       1827.20       1829.36    
  32  0.245618      -1.40398      -98.3605       98.3605       1799.18       1897.54    
  33  0.685790     -0.377184      -26.4249       26.4249       1756.37       1782.80    
  34  0.905089     -0.997222E-01  -6.98638       6.98638       1852.37       1859.36    
  35  0.414065     -0.881732      -61.7728       61.7728       1840.65       1902.43    
  36  0.714747E-01  -2.63841      -184.843       184.843       1836.91       2021.75    
  37  0.694510     -0.364548      -25.5397       25.5397       1823.39       1848.93    
  38  0.770213E-01  -2.56367      -179.607       179.607       1892.11       2071.71    
  39  0.846173     -0.167031      -11.7019       11.7019       1896.60       1908.30    
  40  0.485012     -0.723582      -50.6930       50.6930       1898.07       1948.76    
  41  0.345787      -1.06193      -74.3974       74.3974       1848.50       1922.89    
  42  0.851861     -0.160332      -11.2326       11.2326       1921.00       1932.23    
  43  0.774151     -0.255989      -17.9342       17.9342       1840.99       1858.92    
  44  0.512382     -0.668685      -46.8470       46.8470       1922.03       1968.88    
  45  0.839798     -0.174594      -12.2318       12.2318       1924.84       1937.08    
  46  0.430550     -0.842692      -59.0377       59.0377       1868.19       1927.22    
  47  0.988263     -0.118067E-01 -0.827158      0.827158       1873.15       1873.97    
  48  0.349495      -1.05127      -73.6500       73.6500       1843.54       1917.19    
  49  0.290701      -1.23546      -86.5544       86.5544       1868.97       1955.53    
  50  0.210466      -1.55843      -109.181       109.181       1889.21       1998.39    
  51  0.361038      -1.01877      -71.3735       71.3735       1567.29       1638.66    
loop,thermsimp(1:2)       10   12.7874       70.1225    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    208       1563.69          0.87          1.12         21.95          0.15          0.05         24.14
Just calling func    0   0         24.14


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1563.69
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    70.0584               251
loop is:       10
neval is:      207
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       10      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    560.467      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    70.0584               251
loop is:       11
neval is:      207


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      251
neval,tstepnext:      207     251

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.919397     -0.840375E-01  -5.88754       5.88754       1305.70       1311.58    
   2  0.309089      -1.17413      -82.2575       82.2575       1526.77       1609.03    
   3  0.237901      -1.43590      -100.597       100.597       1556.76       1657.36    
   4  0.542467     -0.611627      -42.8496       42.8496       1529.84       1572.69    
   5  0.523672     -0.646889      -45.3201       45.3201       1613.45       1658.77    
   6  0.850058     -0.162450      -11.3810       11.3810       1590.93       1602.31    
   7  0.589343     -0.528746      -37.0431       37.0431       1609.45       1646.50    
   8  0.979269     -0.209490E-01  -1.46765       1.46765       1587.39       1588.85    
   9  0.110419      -2.20347      -154.372       154.372       1567.29       1721.66    
  10  0.557914     -0.583550      -40.8826       40.8826       1655.48       1696.36    
  11  0.474464     -0.745569      -52.2334       52.2334       1665.69       1717.92    
  12  0.312482      -1.16321      -81.4925       81.4925       1618.25       1699.74    
  13  0.297011      -1.21399      -85.0500       85.0500       1597.91       1682.96    
  14  0.857571     -0.153651      -10.7646       10.7646       1655.87       1666.64    
  15  0.792567     -0.232479      -16.2871       16.2871       1660.61       1676.90    
  16  0.963006     -0.376958E-01  -2.64091       2.64091       1672.43       1675.07    
  17  0.294103      -1.22382      -85.7392       85.7392       1705.66       1791.40    
  18  0.403484     -0.907618      -63.5863       63.5863       1661.38       1724.96    
  19  0.449313     -0.800035      -56.0492       56.0492       1732.92       1788.97    
  20  0.721912     -0.325852      -22.8287       22.8287       1707.38       1730.21    
  21  0.512488     -0.668479      -46.8326       46.8326       1706.19       1753.02    
  22  0.885190     -0.121953      -8.54382       8.54382       1751.28       1759.82    
  23  0.694751E-01  -2.66679      -186.831       186.831       1756.37       1943.20    
  24  0.820879     -0.197380      -13.8281       13.8281       1785.11       1798.94    
  25  0.211527      -1.55340      -108.829       108.829       1742.17       1851.00    
  26  0.937420     -0.646236E-01  -4.52743       4.52743       1778.56       1783.08    
  27  0.515756E-01  -2.96471      -207.703       207.703       1694.67       1902.38    
  28  0.695222     -0.363525      -25.4680       25.4680       1827.20       1852.67    
  29  0.718776     -0.330205      -23.1337       23.1337       1823.39       1846.53    
  30  0.536080     -0.623471      -43.6794       43.6794       1830.81       1874.49    
  31  0.585855     -0.534682      -37.4590       37.4590       1840.99       1878.45    
  32  0.693572     -0.365900      -25.6344       25.6344       1852.37       1878.01    
  33  0.700823     -0.355500      -24.9057       24.9057       1704.99       1729.89    
  34  0.250985      -1.38236      -96.8461       96.8461       1873.15       1969.99    
  35  0.290600      -1.23581      -86.5786       86.5786       1588.30       1674.88    
  36  0.828609     -0.188007      -13.1715       13.1715       1747.61       1760.78    
  37  0.225820      -1.48802      -104.248       104.248       1799.18       1903.43    
  38  0.999674     -0.326354E-03 -0.228638E-01  0.228638E-01   1840.65       1840.68    
  39  0.878216     -0.129862      -9.09796       9.09796       1896.60       1905.70    
  40  0.685898E-01  -2.67961      -187.729       187.729       1758.77       1946.50    
  41  0.273860      -1.29514      -90.7353       90.7353       1843.54       1934.28    
  42  0.697655     -0.360030      -25.2232       25.2232       1848.50       1873.72    
  43  0.293168      -1.22701      -85.9623       85.9623       1868.19       1954.15    
  44  0.319476      -1.14107      -79.9418       79.9418       1921.00       2000.94    
  45  0.874681     -0.133896      -9.38057       9.38057       1924.84       1934.23    
  46  0.408697     -0.894781      -62.6869       62.6869       1898.07       1960.76    
  47  0.142130E-01  -4.25360      -298.000       298.000       1868.97       2166.97    
  48  0.164528      -1.80468      -126.433       126.433       1922.03       2048.46    
  49  0.652669     -0.426685      -29.8929       29.8929       1889.21       1919.10    
  50  0.492107     -0.709060      -49.6756       49.6756       1836.91       1886.58    
  51  0.542705     -0.611189      -42.8190       42.8190       1563.69       1606.51    
loop,thermsimp(1:2)       11   5.88754       82.2575    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    209       1731.03          0.87          1.11         21.94          0.16          0.05         24.14
Just calling func    0   0         24.14


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1731.03
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    70.0584               251
loop is:       11
neval is:      208
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       11      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    560.467      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    70.0584               251
loop is:       12
neval is:      208


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      251
neval,tstepnext:      208     251

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.762868     -0.270671      -18.9628       18.9628       1305.70       1324.66    
   2  0.482922E-01  -3.03048      -212.311       212.311       1529.84       1742.15    
   3  0.612960     -0.489456      -34.2905       34.2905       1587.39       1621.68    
   4  0.910127     -0.941714E-01  -6.59750       6.59750       1590.93       1597.53    
   5  0.362433      -1.01492      -71.1035       71.1035       1563.69       1634.79    
   6  0.476779     -0.740702      -51.8925       51.8925       1526.77       1578.66    
   7  0.179006E-01  -4.02292      -281.839       281.839       1609.45       1891.29    
   8  0.589646     -0.528233      -37.0071       37.0071       1556.76       1593.77    
   9  0.926206     -0.766581E-01  -5.37055       5.37055       1613.45       1618.82    
  10  0.492629     -0.707999      -49.6013       49.6013       1655.87       1705.47    
  11  0.661123     -0.413815      -28.9912       28.9912       1588.30       1617.29    
  12  0.542248     -0.612032      -42.8780       42.8780       1672.43       1715.31    
  13  0.216527      -1.53004      -107.192       107.192       1660.61       1767.80    
  14  0.549832     -0.598143      -41.9050       41.9050       1597.91       1639.82    
  15  0.429556     -0.845003      -59.1996       59.1996       1655.48       1714.68    
  16  0.264838      -1.32864      -93.0822       93.0822       1618.25       1711.33    
  17  0.251706      -1.37949      -96.6452       96.6452       1665.69       1762.33    
  18  0.701724     -0.354215      -24.8157       24.8157       1567.29       1592.10    
  19  0.324289      -1.12612      -78.8941       78.8941       1661.38       1740.27    
  20  0.160749E-02  -6.43308      -450.692       450.692       1704.99       2155.68    
  21  0.533627     -0.628058      -44.0008       44.0008       1707.38       1751.38    
  22  0.883065     -0.124357      -8.71223       8.71223       1706.19       1714.90    
  23  0.484824     -0.723969      -50.7201       50.7201       1751.28       1802.00    
  24  0.724157     -0.322747      -22.6112       22.6112       1747.61       1770.22    
  25  0.847375     -0.165612      -11.6025       11.6025       1778.56       1790.16    
  26  0.167586      -1.78626      -125.143       125.143       1732.92       1858.06    
  27  0.890079     -0.116445      -8.15794       8.15794       1705.66       1713.82    
  28  0.235223      -1.44722      -101.390       101.390       1785.11       1886.50    
  29  0.206112      -1.57934      -110.646       110.646       1840.65       1951.30    
  30  0.463385     -0.769198      -53.8888       53.8888       1823.39       1877.28    
  31  0.487880E-01  -3.02027      -211.595       211.595       1742.17       1953.76    
  32  0.244157      -1.40994      -98.7784       98.7784       1827.20       1925.98    
  33  0.770602     -0.260583      -18.2560       18.2560       1848.50       1866.75    
  34  0.264159      -1.33120      -93.2620       93.2620       1830.81       1924.08    
  35  0.189030E-01  -3.96843      -278.022       278.022       1852.37       2130.39    
  36  0.635342     -0.453592      -31.7779       31.7779       1840.99       1872.77    
  37  0.139550      -1.96933      -137.968       137.968       1836.91       1974.88    
  38  0.561566     -0.577026      -40.4255       40.4255       1694.67       1735.10    
  39  0.951789     -0.494118E-01  -3.46171       3.46171       1799.18       1802.64    
  40  0.527693     -0.639242      -44.7843       44.7843       1896.60       1941.38    
  41  0.925337     -0.775972E-01  -5.43634       5.43634       1889.21       1894.64    
  42  0.795352     -0.228971      -16.0414       16.0414       1924.84       1940.89    
  43  0.530799     -0.633371      -44.3730       44.3730       1843.54       1887.91    
  44  0.642763     -0.441979      -30.9643       30.9643       1756.37       1787.34    
  45  0.485146     -0.723305      -50.6736       50.6736       1758.77       1809.45    
  46  0.795896     -0.228287      -15.9934       15.9934       1868.19       1884.18    
  47  0.519140     -0.655581      -45.9290       45.9290       1898.07       1944.00    
  48  0.694073E-01  -2.66776      -186.899       186.899       1873.15       2060.05    
  49  0.401486     -0.912583      -63.9342       63.9342       1921.00       1984.94    
  50  0.587982E-01  -2.83364      -198.521       198.521       1922.03       2120.55    
  51  0.752652     -0.284152      -19.9072       19.9072       1731.03       1750.94    
loop,thermsimp(1:2)       12   18.9628       212.311    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    210       1561.28          0.86          1.11         21.94          0.28          0.05         24.24
Just calling func    0   0         24.24


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    211       3583.44          0.86          1.11         21.94          0.25          0.05         24.21
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1561.28
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    70.0584               251
loop is:       12
neval is:      210
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       12      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    560.467      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    70.0584               251
loop is:       13
neval is:      210


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      251
neval,tstepnext:      210     251

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.592808     -0.522884      -36.6324       36.6324       1305.70       1342.33    
   2  0.691791     -0.368472      -25.8145       25.8145       1526.77       1552.59    
   3  0.688173     -0.373715      -26.1819       26.1819       1567.29       1593.47    
   4  0.439966     -0.821058      -57.5220       57.5220       1556.76       1614.29    
   5  0.945690     -0.558403E-01  -3.91208       3.91208       1590.93       1594.84    
   6  0.238956      -1.43147      -100.287       100.287       1588.30       1688.58    
   7  0.280830E-01  -3.57259      -250.290       250.290       1613.45       1863.74    
   8  0.902031E-01  -2.40569      -168.539       168.539       1587.39       1755.93    
   9  0.198361      -1.61767      -113.331       113.331       1563.69       1677.02    
  10  0.201288      -1.60302      -112.305       112.305       1597.91       1710.22    
  11  0.710033     -0.342444      -23.9911       23.9911       1655.87       1679.86    
  12  0.182913      -1.69874      -119.011       119.011       1618.25       1737.26    
  13  0.817316     -0.201730      -14.1329       14.1329       1705.66       1719.79    
  14  0.894732     -0.111231      -7.79265       7.79265       1655.48       1663.27    
  15  0.854000     -0.157824      -11.0569       11.0569       1706.19       1717.25    
  16  0.248066      -1.39406      -97.6657       97.6657       1672.43       1770.10    
  17  0.670877     -0.399170      -27.9652       27.9652       1694.67       1722.64    
  18  0.701473     -0.354573      -24.8408       24.8408       1661.38       1686.22    
  19  0.199467      -1.61210      -112.942       112.942       1529.84       1642.78    
  20  0.391533     -0.937685      -65.6927       65.6927       1731.03       1796.72    
  21  0.586761     -0.533138      -37.3508       37.3508       1707.38       1744.73    
  22  0.163799      -1.80912      -126.744       126.744       1665.69       1792.43    
  23  0.955964     -0.450353E-01  -3.15510       3.15510       1660.61       1663.76    
  24  0.365727      -1.00587      -70.4695       70.4695       1747.61       1818.08    
  25  0.733577     -0.309822      -21.7057       21.7057       1756.37       1778.08    
  26  0.111597      -2.19286      -153.628       153.628       1778.56       1932.18    
  27  0.714895     -0.335619      -23.5129       23.5129       1751.28       1774.79    
  28  0.816688     -0.202498      -14.1867       14.1867       1799.18       1813.37    
  29  0.480603     -0.732714      -51.3328       51.3328       1758.77       1810.11    
  30  0.573891     -0.555316      -38.9046       38.9046       1732.92       1771.83    
  31  0.204452      -1.58742      -111.212       111.212       1848.50       1959.71    
  32  0.845356E-01  -2.47058      -173.085       173.085       1840.99       2014.07    
  33  0.524789E-01  -2.94734      -206.486       206.486       1823.39       2029.88    
  34  0.631781     -0.459213      -32.1717       32.1717       1868.19       1900.36    
  35  0.620363     -0.477450      -33.4494       33.4494       1785.11       1818.56    
  36  0.553551     -0.591402      -41.4327       41.4327       1843.54       1884.97    
  37  0.546271     -0.604640      -42.3601       42.3601       1609.45       1651.81    
  38  0.402204     -0.910797      -63.8090       63.8090       1889.21       1953.02    
  39  0.735174     -0.307648      -21.5533       21.5533       1830.81       1852.37    
  40  0.359565      -1.02286      -71.6599       71.6599       1827.20       1898.86    
  41  0.564111     -0.572504      -40.1088       40.1088       1924.84       1964.95    
  42  0.412661     -0.885128      -62.0107       62.0107       1896.60       1958.61    
  43  0.795853     -0.228341      -15.9972       15.9972       1898.07       1914.07    
  44  0.909991E-01  -2.39691      -167.923       167.923       1840.65       2008.58    
  45  0.830687     -0.185502      -12.9960       12.9960       1742.17       1755.17    
  46  0.592588     -0.523256      -36.6585       36.6585       1836.91       1873.57    
  47  0.489472     -0.714427      -50.0517       50.0517       1921.00       1971.05    
  48  0.992056     -0.797586E-02 -0.558776      0.558776       1873.15       1873.70    
  49  0.808208     -0.212936      -14.9179       14.9179       1922.03       1936.95    
  50  0.212569      -1.54849      -108.485       108.485       1852.37       1960.86    
  51  0.214041      -1.54159      -108.001       108.001       1561.28       1669.28    
loop,thermsimp(1:2)       13   36.6324       25.8145    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    212       1571.48          0.88          1.11         21.85          0.36          0.04         24.24
Just calling func    0   0         24.24


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1571.48
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    70.0584               251
loop is:       13
neval is:      211
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       13      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    560.467      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    70.0584               251
loop is:       14
neval is:      211


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      251
neval,tstepnext:      211     251

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.338981      -1.08181      -75.7899       75.7899       1305.70       1381.49    
   2  0.649641     -0.431335      -30.2187       30.2187       1526.77       1556.99    
   3  0.930116     -0.724456E-01  -5.07543       5.07543       1567.29       1572.36    
   4  0.297326      -1.21293      -84.9758       84.9758       1590.93       1675.90    
   5  0.751734     -0.285373      -19.9928       19.9928       1556.76       1576.76    
   6  0.409056     -0.893902      -62.6254       62.6254       1529.84       1592.47    
   7  0.115094      -2.16201      -151.467       151.467       1609.45       1760.92    
   8  0.606681     -0.499753      -35.0119       35.0119       1655.48       1690.49    
   9  0.140571      -1.96204      -137.458       137.458       1660.61       1798.07    
  10  0.447669E-01  -3.10629      -217.622       217.622       1561.28       1778.90    
  11  0.517394     -0.658951      -46.1651       46.1651       1563.69       1609.85    
  12  0.587057     -0.532633      -37.3154       37.3154       1655.87       1693.19    
  13  0.384993E-01  -3.25712      -228.188       228.188       1661.38       1889.56    
  14  0.829105E-01  -2.48999      -174.445       174.445       1588.30       1762.74    
  15  0.382179     -0.961866      -67.3869       67.3869       1597.91       1665.30    
  16  0.269516      -1.31113      -91.8556       91.8556       1706.19       1798.05    
  17  0.879580     -0.128311      -8.98925       8.98925       1705.66       1714.65    
  18  0.760503E-01  -2.57636      -180.496       180.496       1694.67       1875.17    
  19  0.482544     -0.728684      -51.0504       51.0504       1618.25       1669.30    
  20  0.561499     -0.577145      -40.4339       40.4339       1707.38       1747.81    
  21  0.254621      -1.36798      -95.8384       95.8384       1742.17       1838.01    
  22  0.479261     -0.735511      -51.5287       51.5287       1587.39       1638.92    
  23  0.638455     -0.448704      -31.4355       31.4355       1672.43       1703.87    
  24  0.289082      -1.24105      -86.9457       86.9457       1732.92       1819.87    
  25  0.656024     -0.421558      -29.5337       29.5337       1751.28       1780.81    
  26  0.597431     -0.515117      -36.0883       36.0883       1756.37       1792.46    
  27  0.859562     -0.151333      -10.6021       10.6021       1665.69       1676.29    
  28  0.554826     -0.589100      -41.2714       41.2714       1731.03       1772.30    
  29  0.128413      -2.05250      -143.795       143.795       1758.77       1902.57    
  30  0.311170      -1.16742      -81.7874       81.7874       1799.18       1880.97    
  31  0.606679     -0.499755      -35.0121       35.0121       1747.61       1782.62    
  32  0.923238     -0.798686E-01  -5.59547       5.59547       1785.11       1790.71    
  33  0.734154     -0.309037      -21.6507       21.6507       1830.81       1852.47    
  34  0.988670     -0.113947E-01 -0.798296      0.798296       1613.45       1614.25    
  35  0.136308      -1.99284      -139.615       139.615       1836.91       1976.52    
  36  0.345839      -1.06178      -74.3869       74.3869       1873.15       1947.53    
  37  0.349440      -1.05142      -73.6611       73.6611       1843.54       1917.20    
  38  0.625658E-01  -2.77154      -194.170       194.170       1827.20       2021.37    
  39  0.394804     -0.929365      -65.1098       65.1098       1868.19       1933.30    
  40  0.899667E-02  -4.71090      -330.038       330.038       1898.07       2228.11    
  41  0.823946     -0.193651      -13.5669       13.5669       1778.56       1792.12    
  42  0.834235     -0.181240      -12.6974       12.6974       1922.03       1934.73    
  43  0.777534     -0.251627      -17.6286       17.6286       1889.21       1906.84    
  44  0.384993     -0.954531      -66.8729       66.8729       1896.60       1963.47    
  45  0.247443E-01  -3.69916      -259.157       259.157       1848.50       2107.65    
  46  0.810695     -0.209863      -14.7027       14.7027       1852.37       1867.07    
  47  0.893618     -0.112477      -7.87994       7.87994       1924.84       1932.72    
  48  0.545617     -0.605837      -42.4440       42.4440       1921.00       1963.45    
  49  0.587193     -0.532402      -37.2993       37.2993       1840.65       1877.95    
  50  0.991207     -0.883185E-02 -0.618746      0.618746       1840.99       1841.61    
  51  0.477440     -0.739316      -51.7954       51.7954       1571.48       1623.28    
loop,thermsimp(1:2)       14   75.7899       30.2187    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    213       1502.52          0.86          1.11         21.92          0.33          0.05         24.28
Just calling func    0   0         24.28


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1502.52
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    70.0584               251
loop is:       14
neval is:      212
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       14      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    560.467      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    70.0584               251
loop is:       15
neval is:      212


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      251
neval,tstepnext:      212     251

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.219724      -1.51538      -106.165       106.165       1305.70       1411.86    
   2  0.894567E-01  -2.41400      -169.121       169.121       1526.77       1695.89    
   3  0.863615     -0.146628      -10.2725       10.2725       1567.29       1577.56    
   4  0.807990     -0.213206      -14.9369       14.9369       1556.76       1571.70    
   5  0.318173      -1.14516      -80.2282       80.2282       1529.84       1610.07    
   6  0.464606     -0.766566      -53.7044       53.7044       1563.69       1617.39    
   7  0.574933     -0.553501      -38.7774       38.7774       1613.45       1652.23    
   8  0.974939     -0.253802E-01  -1.77810       1.77810       1571.48       1573.26    
   9  0.415757     -0.877653      -61.4870       61.4870       1587.39       1648.87    
  10  0.187109      -1.67606      -117.422       117.422       1597.91       1715.34    
  11  0.730515E-01  -2.61659      -183.314       183.314       1618.25       1801.56    
  12  0.209185      -1.56454      -109.609       109.609       1590.93       1700.54    
  13  0.496690     -0.699790      -49.0262       49.0262       1665.69       1714.71    
  14  0.862986     -0.147356      -10.3236       10.3236       1655.48       1665.80    
  15  0.888200     -0.118558      -8.30598       8.30598       1655.87       1664.18    
  16  0.380888     -0.965250      -67.6239       67.6239       1672.43       1740.05    
  17  0.135305      -2.00022      -140.132       140.132       1705.66       1845.79    
  18  0.927079     -0.757167E-01  -5.30459       5.30459       1707.38       1712.68    
  19  0.603067     -0.505727      -35.4304       35.4304       1609.45       1644.88    
  20  0.136202      -1.99362      -139.670       139.670       1588.30       1727.97    
  21  0.954653     -0.464076E-01  -3.25124       3.25124       1731.03       1734.28    
  22  0.151192      -1.88920      -132.355       132.355       1561.28       1693.63    
  23  0.449259     -0.800155      -56.0576       56.0576       1751.28       1807.34    
  24  0.780874     -0.247341      -17.3284       17.3284       1747.61       1764.93    
  25  0.456238     -0.784740      -54.9777       54.9777       1785.11       1840.09    
  26  0.163284      -1.81227      -126.964       126.964       1778.56       1905.52    
  27  0.821444     -0.196692      -13.7799       13.7799       1756.37       1770.15    
  28  0.861448     -0.149141      -10.4486       10.4486       1706.19       1716.64    
  29  0.924167     -0.788621E-01  -5.52495       5.52495       1660.61       1666.13    
  30  0.195059      -1.63445      -114.507       114.507       1732.92       1847.43    
  31  0.375134     -0.980472      -68.6904       68.6904       1742.17       1810.86    
  32  0.909862     -0.944628E-01  -6.61792       6.61792       1840.99       1847.61    
  33  0.831459     -0.184574      -12.9310       12.9310       1830.81       1843.75    
  34  0.627278     -0.466365      -32.6728       32.6728       1852.37       1885.04    
  35  0.918890     -0.845891E-01  -5.92618       5.92618       1694.67       1700.60    
  36  0.475784     -0.742791      -52.0388       52.0388       1840.65       1892.69    
  37  0.344524      -1.06559      -74.6537       74.6537       1799.18       1873.83    
  38  0.286778      -1.24905      -87.5062       87.5062       1661.38       1748.88    
  39  0.336148      -1.09020      -76.3779       76.3779       1758.77       1835.15    
  40  0.709840     -0.342716      -24.0102       24.0102       1889.21       1913.22    
  41  0.219827      -1.51491      -106.132       106.132       1843.54       1949.67    
  42  0.347594      -1.05672      -74.0321       74.0321       1924.84       1998.88    
  43  0.905734     -0.990099E-01  -6.93648       6.93648       1868.19       1875.12    
  44  0.826231     -0.190881      -13.3728       13.3728       1922.03       1935.40    
  45  0.400277     -0.915599      -64.1455       64.1455       1873.15       1937.29    
  46  0.555153     -0.588512      -41.2302       41.2302       1921.00       1962.23    
  47  0.864397     -0.145723      -10.2092       10.2092       1896.60       1906.81    
  48  0.277380E-01  -3.58495      -251.156       251.156       1836.91       2088.07    
  49  0.993968     -0.605015E-02 -0.423864      0.423864       1827.20       1827.63    
  50  0.717076     -0.332573      -23.2996       23.2996       1848.50       1871.80    
  51  0.736253     -0.306182      -21.4506       21.4506       1502.52       1523.97    
loop,thermsimp(1:2)       15   106.165       169.121    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    214       1597.78          0.87          1.12         22.16          0.32          0.05         24.52
Just calling func    0   0         24.52


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1597.78
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    70.0584               251
loop is:       15
neval is:      213
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       15      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    560.467      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    70.0584               251
loop is:       16
neval is:      213


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      251
neval,tstepnext:      213     251

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.231724      -1.46221      -102.440       102.440       1305.70       1408.14    
   2  0.641193     -0.444425      -31.1357       31.1357       1502.52       1533.66    
   3  0.353033      -1.04119      -72.9445       72.9445       1556.76       1629.71    
   4  0.928955     -0.736953E-01  -5.16298       5.16298       1571.48       1576.65    
   5  0.350257      -1.04909      -73.4975       73.4975       1567.29       1640.78    
   6  0.682617     -0.381821      -26.7498       26.7498       1529.84       1556.59    
   7  0.162763      -1.81546      -127.188       127.188       1563.69       1690.87    
   8  0.874032     -0.134639      -9.43257       9.43257       1609.45       1618.89    
   9  0.518909     -0.656027      -45.9602       45.9602       1587.39       1633.35    
  10  0.461984     -0.772226      -54.1009       54.1009       1613.45       1667.55    
  11  0.449468     -0.799691      -56.0251       56.0251       1655.87       1711.90    
  12  0.523281     -0.647637      -45.3725       45.3725       1655.48       1700.85    
  13  0.637377     -0.450394      -31.5539       31.5539       1660.61       1692.16    
  14  0.596329     -0.516963      -36.2176       36.2176       1561.28       1597.50    
  15  0.286246      -1.25090      -87.6363       87.6363       1526.77       1614.41    
  16  0.590425     -0.526913      -36.9147       36.9147       1590.93       1627.84    
  17  0.853637     -0.158249      -11.0867       11.0867       1694.67       1705.76    
  18  0.245572      -1.40416      -98.3735       98.3735       1707.38       1805.75    
  19  0.375654     -0.979088      -68.5933       68.5933       1665.69       1734.28    
  20  0.281654      -1.26708      -88.7693       88.7693       1597.91       1686.68    
  21  0.443392     -0.813302      -56.9787       56.9787       1706.19       1763.17    
  22  0.442934     -0.814335      -57.0510       57.0510       1588.30       1645.35    
  23  0.171790      -1.76149      -123.407       123.407       1731.03       1854.44    
  24  0.802582     -0.219921      -15.4074       15.4074       1672.43       1687.84    
  25  0.162733      -1.81564      -127.201       127.201       1661.38       1788.58    
  26  0.838320     -0.176355      -12.3551       12.3551       1747.61       1759.96    
  27  0.210754      -1.55706      -109.085       109.085       1756.37       1865.46    
  28  0.240377      -1.42554      -99.8714       99.8714       1618.25       1718.12    
  29  0.173042E-01  -4.05680      -284.213       284.213       1751.28       2035.49    
  30  0.640146     -0.446059      -31.2502       31.2502       1742.17       1773.42    
  31  0.749210     -0.288736      -20.2284       20.2284       1827.20       1847.43    
  32  0.666162     -0.406222      -28.4593       28.4593       1758.77       1787.23    
  33  0.601746     -0.507920      -35.5841       35.5841       1785.11       1820.70    
  34  0.677044     -0.390020      -27.3242       27.3242       1830.81       1858.14    
  35  0.290379      -1.23657      -86.6321       86.6321       1705.66       1792.29    
  36  0.439723     -0.821610      -57.5607       57.5607       1732.92       1790.48    
  37  0.680091     -0.385528      -27.0095       27.0095       1840.99       1868.00    
  38  0.803784     -0.218425      -15.3025       15.3025       1848.50       1863.80    
  39  0.507823     -0.677622      -47.4732       47.4732       1799.18       1846.65    
  40  0.894573     -0.111408      -7.80510       7.80510       1868.19       1875.99    
  41  0.826908     -0.190062      -13.3155       13.3155       1852.37       1865.69    
  42  0.815562     -0.203878      -14.2834       14.2834       1840.65       1854.94    
  43  0.352457      -1.04283      -73.0589       73.0589       1778.56       1851.61    
  44  0.104059      -2.26279      -158.528       158.528       1896.60       2055.13    
  45  0.601892     -0.507677      -35.5670       35.5670       1889.21       1924.77    
  46  0.988184     -0.118862E-01 -0.832727      0.832727       1922.03       1922.86    
  47  0.733912     -0.309366      -21.6737       21.6737       1873.15       1894.82    
  48  0.107394      -2.23125      -156.318       156.318       1843.54       1999.86    
  49  0.592150     -0.523995      -36.7103       36.7103       1921.00       1957.71    
  50  0.821901     -0.196136      -13.7410       13.7410       1924.84       1938.59    
  51  0.400070E-01  -3.21870      -225.497       225.497       1597.78       1823.28    
loop,thermsimp(1:2)       16   102.440       31.1357    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    215       1544.91          0.88          1.11         21.93          0.21          0.05         24.19
Just calling func    0   0         24.19


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1544.91
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    70.0584               251
loop is:       16
neval is:      214
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       16      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    560.467      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    70.0584               251
loop is:       17
neval is:      214


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      251
neval,tstepnext:      214     251

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.776913     -0.252427      -17.6846       17.6846       1305.70       1323.38    
   2  0.350417      -1.04863      -73.4655       73.4655       1502.52       1575.99    
   3  0.533846     -0.627648      -43.9720       43.9720       1529.84       1573.81    
   4  0.622955     -0.473280      -33.1573       33.1573       1571.48       1604.64    
   5  0.661091E-01  -2.71645      -190.310       190.310       1561.28       1751.59    
   6  0.759206     -0.275482      -19.2998       19.2998       1526.77       1546.07    
   7  0.430535     -0.842727      -59.0401       59.0401       1609.45       1668.49    
   8  0.257678      -1.35604      -95.0023       95.0023       1590.93       1685.93    
   9  0.296561      -1.21550      -85.1561       85.1561       1556.76       1641.92    
  10  0.805929     -0.215760      -15.1158       15.1158       1587.39       1602.50    
  11  0.421616     -0.863661      -60.5067       60.5067       1567.29       1627.79    
  12  0.767803     -0.264223      -18.5110       18.5110       1588.30       1606.81    
  13  0.605260     -0.502097      -35.1761       35.1761       1613.45       1648.63    
  14  0.566784     -0.567776      -39.7775       39.7775       1597.91       1637.69    
  15  0.292740      -1.22847      -86.0647       86.0647       1672.43       1758.50    
  16  0.898463     -0.107069      -7.50112       7.50112       1563.69       1571.19    
  17  0.218067      -1.52295      -106.696       106.696       1660.61       1767.31    
  18  0.856756     -0.154603      -10.8312       10.8312       1655.48       1666.31    
  19  0.338883      -1.08210      -75.8103       75.8103       1694.67       1770.48    
  20  0.796034     -0.228113      -15.9813       15.9813       1655.87       1671.85    
  21  0.778636     -0.250212      -17.5294       17.5294       1618.25       1635.77    
  22  0.575989     -0.551667      -38.6490       38.6490       1665.69       1704.34    
  23  0.355531      -1.03414      -72.4505       72.4505       1747.61       1820.06    
  24  0.164949      -1.80212      -126.254       126.254       1706.19       1832.44    
  25  0.315998      -1.15202      -80.7087       80.7087       1742.17       1822.88    
  26  0.330933      -1.10584      -77.4734       77.4734       1758.77       1836.25    
  27  0.429436     -0.845283      -59.2192       59.2192       1661.38       1720.59    
  28  0.464808     -0.766130      -53.6739       53.6739       1732.92       1786.59    
  29  0.192211      -1.64916      -115.538       115.538       1705.66       1821.20    
  30  0.866849     -0.142891      -10.0107       10.0107       1707.38       1717.39    
  31  0.474973     -0.744498      -52.1584       52.1584       1785.11       1837.27    
  32  0.667713     -0.403897      -28.2964       28.2964       1597.78       1626.08    
  33  0.994155     -0.586200E-02 -0.410683      0.410683       1799.18       1799.59    
  34  0.577739     -0.548634      -38.4364       38.4364       1827.20       1865.64    
  35  0.381919     -0.962546      -67.4344       67.4344       1778.56       1845.99    
  36  0.733204     -0.310331      -21.7413       21.7413       1731.03       1752.77    
  37  0.492382     -0.708500      -49.6364       49.6364       1840.65       1890.29    
  38  0.188899E-01  -3.96913      -278.071       278.071       1830.81       2108.89    
  39  0.741920E-01  -2.60110      -182.229       182.229       1848.50       2030.73    
  40  0.210592      -1.55783      -109.139       109.139       1756.37       1865.51    
  41  0.682838     -0.381498      -26.7272       26.7272       1852.37       1879.10    
  42  0.656831     -0.420328      -29.4475       29.4475       1840.99       1870.44    
  43  0.444670     -0.810424      -56.7770       56.7770       1868.19       1924.96    
  44  0.872301     -0.136621      -9.57145       9.57145       1873.15       1882.72    
  45  0.932741     -0.696282E-01  -4.87804       4.87804       1922.03       1926.91    
  46  0.601727     -0.507951      -35.5863       35.5863       1889.21       1924.79    
  47  0.940344     -0.615097E-01  -4.30927       4.30927       1924.84       1929.15    
  48  0.208477E-01  -3.87051      -271.162       271.162       1921.00       2192.16    
  49  0.257831      -1.35545      -94.9607       94.9607       1843.54       1938.50    
  50  0.522803     -0.648550      -45.4364       45.4364       1751.28       1796.72    
  51  0.676437     -0.390915      -27.3869       27.3869       1544.91       1572.29    
loop,thermsimp(1:2)       17   17.6846       73.4655    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    216       1449.71          0.88          1.11         21.99          0.24          0.05         24.27
Just calling func    0   0         24.27


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1449.71
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    70.0584               251
loop is:       17
neval is:      215
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       17      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    560.467      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    70.0584               251
loop is:       18
neval is:      215


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      251
neval,tstepnext:      215     251

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.240395      -1.42547      -99.8662       99.8662       1305.70       1405.56    
   2  0.711556E-02  -4.94547      -346.472       346.472       1526.77       1873.24    
   3  0.909796     -0.945347E-01  -6.62296       6.62296       1563.69       1570.31    
   4  0.659218     -0.416702      -29.1935       29.1935       1544.91       1574.10    
   5  0.833482     -0.182144      -12.7607       12.7607       1529.84       1542.60    
   6  0.726295E-01  -2.62238      -183.720       183.720       1502.52       1686.24    
   7  0.687091     -0.375288      -26.2921       26.2921       1587.39       1613.68    
   8  0.860775     -0.149922      -10.5033       10.5033       1571.48       1581.99    
   9  0.846215     -0.166982      -11.6985       11.6985       1588.30       1599.99    
  10  0.398551     -0.919919      -64.4481       64.4481       1597.78       1662.23    
  11  0.416092     -0.876849      -61.4307       61.4307       1567.29       1628.72    
  12  0.463389     -0.769189      -53.8882       53.8882       1618.25       1672.13    
  13  0.207356      -1.57332      -110.224       110.224       1597.91       1708.14    
  14  0.133003      -2.01738      -141.335       141.335       1556.76       1698.10    
  15  0.464971     -0.765779      -53.6493       53.6493       1613.45       1667.10    
  16  0.568281     -0.565140      -39.5928       39.5928       1655.48       1695.07    
  17  0.638811     -0.448147      -31.3964       31.3964       1609.45       1640.85    
  18  0.865664     -0.144259      -10.1065       10.1065       1655.87       1665.98    
  19  0.475002     -0.744436      -52.1540       52.1540       1590.93       1643.08    
  20  0.537086     -0.621597      -43.5481       43.5481       1665.69       1709.24    
  21  0.782345     -0.245459      -17.1965       17.1965       1707.38       1724.57    
  22  0.725469     -0.320937      -22.4843       22.4843       1661.38       1683.86    
  23  0.701426E-01  -2.65723      -186.161       186.161       1561.28       1747.44    
  24  0.297043      -1.21388      -85.0425       85.0425       1731.03       1816.07    
  25  0.444870     -0.809973      -56.7454       56.7454       1672.43       1729.18    
  26  0.685684     -0.377338      -26.4357       26.4357       1660.61       1687.05    
  27  0.651244     -0.428871      -30.0460       30.0460       1694.67       1724.72    
  28  0.269082      -1.31274      -91.9684       91.9684       1732.92       1824.89    
  29  0.177107      -1.73100      -121.271       121.271       1751.28       1872.55    
  30  0.766464     -0.265968      -18.6333       18.6333       1799.18       1817.81    
  31  0.801833     -0.220855      -15.4727       15.4727       1747.61       1763.08    
  32  0.759414     -0.275209      -19.2807       19.2807       1705.66       1724.94    
  33  0.566307     -0.568618      -39.8365       39.8365       1742.17       1782.01    
  34  0.297948      -1.21084      -84.8292       84.8292       1706.19       1791.02    
  35  0.430097E-01  -3.14633      -220.427       220.427       1758.77       1979.20    
  36  0.529414     -0.635984      -44.5560       44.5560       1785.11       1829.67    
  37  0.717133     -0.332494      -23.2940       23.2940       1778.56       1801.85    
  38  0.209457      -1.56323      -109.518       109.518       1756.37       1865.89    
  39  0.732428     -0.311390      -21.8155       21.8155       1827.20       1849.02    
  40  0.697782     -0.359849      -25.2104       25.2104       1840.99       1866.20    
  41  0.977227     -0.230362E-01  -1.61388       1.61388       1852.37       1853.99    
  42  0.744700     -0.294773      -20.6514       20.6514       1873.15       1893.80    
  43  0.713341     -0.337796      -23.6655       23.6655       1840.65       1864.32    
  44  0.497823     -0.697510      -48.8665       48.8665       1889.21       1938.07    
  45  0.968758     -0.317404E-01  -2.22368       2.22368       1868.19       1870.41    
  46  0.287665      -1.24596      -87.2898       87.2898       1922.03       2009.32    
  47  0.964672     -0.359674E-01  -2.51982       2.51982       1924.84       1927.36    
  48  0.733769     -0.309561      -21.6874       21.6874       1843.54       1865.23    
  49  0.692680     -0.367187      -25.7246       25.7246       1848.50       1874.22    
  50  0.328873      -1.11208      -77.9107       77.9107       1830.81       1908.73    
  51  0.744920     -0.294478      -20.6307       20.6307       1449.71       1470.34    
loop,thermsimp(1:2)       18   99.8662       346.472    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    217       1439.46          0.87          1.11         21.99          0.18          0.05         24.20
Just calling func    0   0         24.20


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    218       1572.47          0.88          1.11         21.90          0.29          0.05         24.22
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1439.46
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    70.0584               251
loop is:       18
neval is:      217
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       18      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    560.467      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    70.0584               251
loop is:       19
neval is:      217


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      251
neval,tstepnext:      217     251

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.722200     -0.325453      -22.8007       22.8007       1305.70       1328.50    
   2  0.240049      -1.42691      -99.9672       99.9672       1449.71       1549.67    
   3  0.365543      -1.00637      -70.5048       70.5048       1529.84       1600.35    
   4  0.399010     -0.918769      -64.3675       64.3675       1563.69       1628.05    
   5  0.685268     -0.377945      -26.4782       26.4782       1544.91       1571.39    
   6  0.335805E-01  -3.39381      -237.765       237.765       1571.48       1809.25    
   7  0.820520     -0.197817      -13.8587       13.8587       1588.30       1602.16    
   8  0.756560     -0.278973      -19.5444       19.5444       1587.39       1606.93    
   9  0.869461     -0.139882      -9.79993       9.79993       1567.29       1577.09    
  10  0.787378     -0.239047      -16.7472       16.7472       1609.45       1626.20    
  11  0.330926      -1.10586      -77.4748       77.4748       1590.93       1668.40    
  12  0.339084E-01  -3.38409      -237.084       237.084       1597.78       1834.87    
  13  0.672805     -0.396300      -27.7641       27.7641       1655.87       1683.64    
  14  0.822413     -0.195513      -13.6973       13.6973       1613.45       1627.15    
  15  0.928870     -0.737865E-01  -5.16936       5.16936       1618.25       1623.41    
  16  0.778944     -0.249816      -17.5017       17.5017       1661.38       1678.88    
  17  0.301602E-01  -3.50123      -245.291       245.291       1502.52       1747.81    
  18  0.292626      -1.22886      -86.0921       86.0921       1660.61       1746.70    
  19  0.149515      -1.90036      -133.136       133.136       1655.48       1788.62    
  20  0.500330E-01  -2.99507      -209.830       209.830       1556.76       1766.59    
  21  0.759114E-01  -2.57819      -180.624       180.624       1597.91       1778.54    
  22  0.613440     -0.488673      -34.2356       34.2356       1665.69       1699.92    
  23  0.132502      -2.02116      -141.599       141.599       1707.38       1848.98    
  24  0.189750E-02  -6.26722      -439.072       439.072       1694.67       2133.75    
  25  0.507622     -0.678018      -47.5009       47.5009       1705.66       1753.16    
  26  0.378733     -0.970924      -68.0214       68.0214       1672.43       1740.45    
  27  0.139411      -1.97033      -138.038       138.038       1561.28       1699.32    
  28  0.298599      -1.20865      -84.6764       84.6764       1747.61       1832.28    
  29  0.767617     -0.264464      -18.5279       18.5279       1742.17       1760.70    
  30  0.656077     -0.421478      -29.5281       29.5281       1706.19       1735.72    
  31  0.701883     -0.353988      -24.7999       24.7999       1778.56       1803.36    
  32  0.940950     -0.608655E-01  -4.26414       4.26414       1731.03       1735.29    
  33  0.621043     -0.476355      -33.3727       33.3727       1799.18       1832.55    
  34  0.622910     -0.473353      -33.1623       33.1623       1732.92       1766.08    
  35  0.525019     -0.644320      -45.1401       45.1401       1785.11       1830.25    
  36  0.871126     -0.137969      -9.66588       9.66588       1827.20       1836.87    
  37  0.475532     -0.743322      -52.0759       52.0759       1852.37       1904.45    
  38  0.320094      -1.13914      -79.8064       79.8064       1840.65       1920.46    
  39  0.688986     -0.372534      -26.0991       26.0991       1843.54       1869.64    
  40  0.831218     -0.184863      -12.9512       12.9512       1756.37       1769.33    
  41  0.639633     -0.446861      -31.3064       31.3064       1840.99       1872.29    
  42  0.628257     -0.464807      -32.5636       32.5636       1868.19       1900.75    
  43  0.925835     -0.770596E-01  -5.39867       5.39867       1751.28       1756.68    
  44  0.611089     -0.492512      -34.5046       34.5046       1526.77       1561.28    
  45  0.423003E-01  -3.16296      -221.592       221.592       1848.50       2070.09    
  46  0.430763     -0.842198      -59.0031       59.0031       1873.15       1932.15    
  47  0.374764     -0.981459      -68.7595       68.7595       1830.81       1899.57    
  48  0.109336      -2.21333      -155.062       155.062       1924.84       2079.91    
  49  0.642636E-02  -5.04735      -353.609       353.609       1889.21       2242.82    
  50  0.232984      -1.45679      -102.060       102.060       1758.77       1860.83    
  51  0.169005E-01  -4.08041      -285.867       285.867       1439.46       1725.33    
loop,thermsimp(1:2)       19   22.8007       99.9672    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    219       1466.62          0.87          1.11         21.93          0.24          0.05         24.20
Just calling func    0   0         24.20


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1466.62
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    70.0584               251
loop is:       19
neval is:      218
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       19      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    560.467      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    70.0584               251
loop is:       20
neval is:      218


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      251
neval,tstepnext:      218     251

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.311857      -1.16521      -81.6329       81.6329       1305.70       1387.33    
   2  0.362384      -1.01505      -71.1128       71.1128       1449.71       1520.82    
   3  0.900627     -0.104664      -7.33261       7.33261       1526.77       1534.10    
   4  0.233893      -1.45289      -101.787       101.787       1544.91       1646.69    
   5  0.183338      -1.69642      -118.849       118.849       1567.29       1686.14    
   6  0.351708      -1.04495      -73.2077       73.2077       1529.84       1603.05    
   7  0.979617     -0.205938E-01  -1.44277       1.44277       1588.30       1589.74    
   8  0.801294     -0.221527      -15.5199       15.5199       1587.39       1602.91    
   9  0.423893     -0.858275      -60.1294       60.1294       1618.25       1678.37    
  10  0.486446     -0.720630      -50.4862       50.4862       1609.45       1659.94    
  11  0.430531     -0.842736      -59.0407       59.0407       1613.45       1672.49    
  12  0.214629      -1.53884      -107.809       107.809       1563.69       1671.50    
  13  0.860310     -0.150463      -10.5412       10.5412       1590.93       1601.47    
  14  0.450659     -0.797045      -55.8397       55.8397       1661.38       1717.22    
  15  0.867432     -0.142218      -9.96357       9.96357       1655.87       1665.84    
  16  0.850327     -0.162134      -11.3588       11.3588       1561.28       1572.64    
  17  0.914193     -0.897130E-01  -6.28515       6.28515       1665.69       1671.97    
  18  0.908448     -0.960172E-01  -6.72682       6.72682       1439.46       1446.19    
  19  0.349788E-01  -3.35301      -234.907       234.907       1731.03       1965.94    
  20  0.825048     -0.192314      -13.4732       13.4732       1706.19       1719.66    
  21  0.628933     -0.463730      -32.4882       32.4882       1672.43       1704.92    
  22  0.756366     -0.279229      -19.5624       19.5624       1660.61       1680.17    
  23  0.545707     -0.605674      -42.4325       42.4325       1502.52       1544.96    
  24  0.653619     -0.425231      -29.7910       29.7910       1705.66       1735.45    
  25  0.781643     -0.246357      -17.2594       17.2594       1751.28       1768.54    
  26  0.444411     -0.811005      -56.8177       56.8177       1742.17       1798.99    
  27  0.223111      -1.50008      -105.094       105.094       1732.92       1838.01    
  28  0.143901      -1.93863      -135.817       135.817       1556.76       1692.58    
  29  0.419282E-01  -3.17180      -222.211       222.211       1756.37       1978.59    
  30  0.407367     -0.898040      -62.9152       62.9152       1597.91       1660.83    
  31  0.722138     -0.325538      -22.8067       22.8067       1655.48       1678.29    
  32  0.290143      -1.23738      -86.6889       86.6889       1778.56       1865.24    
  33  0.236931E-01  -3.74257      -262.199       262.199       1571.48       1833.68    
  34  0.198981      -1.61454      -113.112       113.112       1785.11       1898.22    
  35  0.765966     -0.266617      -18.6788       18.6788       1747.61       1766.28    
  36  0.522733     -0.648684      -45.4458       45.4458       1799.18       1844.63    
  37  0.297579E-01  -3.51466      -246.232       246.232       1597.78       1844.02    
  38  0.175475      -1.74026      -121.920       121.920       1827.20       1949.12    
  39  0.311931      -1.16497      -81.6161       81.6161       1707.38       1788.99    
  40  0.310920      -1.16822      -81.8437       81.8437       1758.77       1840.62    
  41  0.122272      -2.10150      -147.228       147.228       1843.54       1990.77    
  42  0.949359     -0.519686E-01  -3.64084       3.64084       1840.99       1844.63    
  43  0.500750     -0.691648      -48.4558       48.4558       1830.81       1879.27    
  44  0.729401E-01  -2.61812      -183.421       183.421       1868.19       2051.61    
  45  0.952528     -0.486360E-01  -3.40736       3.40736       1852.37       1855.78    
  46  0.718842     -0.330114      -23.1273       23.1273       1840.65       1863.78    
  47  0.529396     -0.636019      -44.5585       44.5585       1873.15       1917.70    
  48  0.314661      -1.15626      -81.0056       81.0056       1848.50       1929.50    
  49  0.947465     -0.539649E-01  -3.78069       3.78069       1924.84       1928.63    
  50  0.613869     -0.487974      -34.1867       34.1867       1694.67       1728.86    
  51  0.303056      -1.19384      -83.6385       83.6385       1466.62       1550.26    
loop,thermsimp(1:2)       20   81.6329       71.1128    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    220       1443.32          0.87          1.11         21.96          0.29          0.05         24.28
Just calling func    0   0         24.27


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1443.32
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    70.0584               251
loop is:       20
neval is:      219
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       20      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    560.467      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    70.0584               251
loop is:       21
neval is:      219


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      251
neval,tstepnext:      219     251

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.307193      -1.18028      -82.6884       82.6884       1305.70       1388.38    
   2  0.575213     -0.553015      -38.7433       38.7433       1439.46       1478.20    
   3  0.632244     -0.458480      -32.1204       32.1204       1449.71       1481.83    
   4  0.819203     -0.199424      -13.9713       13.9713       1526.77       1540.74    
   5  0.137693E-02  -6.58790      -461.538       461.538       1502.52       1964.06    
   6  0.367814      -1.00018      -70.0710       70.0710       1466.62       1536.69    
   7  0.452636     -0.792666      -55.5330       55.5330       1561.28       1616.81    
   8  0.278102      -1.27977      -89.6586       89.6586       1588.30       1677.96    
   9  0.417803     -0.872745      -61.1432       61.1432       1590.93       1652.07    
  10  0.682140     -0.382521      -26.7988       26.7988       1587.39       1614.19    
  11  0.204733      -1.58605      -111.116       111.116       1529.84       1640.96    
  12  0.637442     -0.450292      -31.5468       31.5468       1544.91       1576.45    
  13  0.114518      -2.16702      -151.818       151.818       1609.45       1761.27    
  14  0.724207     -0.322678      -22.6063       22.6063       1597.91       1620.52    
  15  0.461399     -0.773492      -54.1897       54.1897       1655.87       1710.06    
  16  0.731739     -0.312332      -21.8815       21.8815       1563.69       1585.57    
  17  0.773272     -0.257124      -18.0137       18.0137       1665.69       1683.70    
  18  0.789195     -0.236742      -16.5858       16.5858       1613.45       1630.04    
  19  0.762001     -0.271807      -19.0424       19.0424       1655.48       1674.52    
  20  0.933384     -0.689386E-01  -4.82973       4.82973       1618.25       1623.07    
  21  0.694037     -0.365230      -25.5874       25.5874       1660.61       1686.20    
  22  0.423570     -0.859038      -60.1828       60.1828       1567.29       1627.47    
  23  0.272919      -1.29858      -90.9765       90.9765       1556.76       1647.74    
  24  0.535843     -0.623914      -43.7105       43.7105       1672.43       1716.14    
  25  0.902288     -0.102822      -7.20352       7.20352       1661.38       1668.58    
  26  0.479374     -0.735275      -51.5122       51.5122       1706.19       1757.70    
  27  0.494900E-01  -3.00599      -210.595       210.595       1694.67       1905.27    
  28  0.921867     -0.813539E-01  -5.69953       5.69953       1705.66       1711.36    
  29  0.132425      -2.02174      -141.640       141.640       1747.61       1889.25    
  30  0.640539     -0.445446      -31.2072       31.2072       1751.28       1782.49    
  31  0.215363      -1.53543      -107.570       107.570       1707.38       1814.95    
  32  0.437204E-01  -3.12994      -219.279       219.279       1742.17       1961.45    
  33  0.166028      -1.79560      -125.797       125.797       1571.48       1697.28    
  34  0.425825     -0.853727      -59.8108       59.8108       1732.92       1792.73    
  35  0.810393     -0.210235      -14.7288       14.7288       1758.77       1773.50    
  36  0.855958     -0.155534      -10.8965       10.8965       1597.78       1608.68    
  37  0.830452     -0.185786      -13.0158       13.0158       1799.18       1812.20    
  38  0.658784     -0.417359      -29.2395       29.2395       1840.99       1870.23    
  39  0.910965     -0.932509E-01  -6.53301       6.53301       1852.37       1858.90    
  40  0.603480     -0.505043      -35.3825       35.3825       1840.65       1876.03    
  41  0.702610     -0.352953      -24.7274       24.7274       1778.56       1803.28    
  42  0.329065      -1.11150      -77.8699       77.8699       1830.81       1908.68    
  43  0.790497     -0.235094      -16.4703       16.4703       1785.11       1801.58    
  44  0.641572     -0.443834      -31.0943       31.0943       1873.15       1904.24    
  45  0.650683     -0.429733      -30.1064       30.1064       1924.84       1954.95    
  46  0.194049E-02  -6.24481      -437.502       437.502       1848.50       2286.00    
  47  0.662053     -0.412409      -28.8928       28.8928       1827.20       1856.10    
  48  0.294846      -1.22130      -85.5624       85.5624       1731.03       1816.59    
  49  0.709874     -0.342668      -24.0068       24.0068       1756.37       1780.38    
  50  0.700314     -0.356226      -24.9566       24.9566       1843.54       1868.50    
  51  0.639811E-01  -2.74917      -192.602       192.602       1443.32       1635.93    
loop,thermsimp(1:2)       21   82.6884       38.7433    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    221       1776.26          0.87          1.11         21.85          0.36          0.05         24.24
Just calling func    0   0         24.24


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  220    1776.3       0.1108     -2.551      3.678     -102.6     0.3115    
                       1.909      1.503     -99.70      3.575      1.135    

                       2.954     -1.587      1.540      7000.      7000.    

                      -1.493      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -10.50     -7.208     -6.029      7.670    

                      -11.76     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.2591E-01 0.1612    -0.5242E-01 0.4004E-01

                     -0.2486     0.3603E-01 0.1139     0.1167     0.3377E-01



                     -0.8359    -0.9276      0.000    -0.3039E-01-0.6829E-01

                      0.1234E-01 0.1768    -0.7116     0.4622E-02 0.4192    

                      0.4667E-01 0.1236    -0.5233     -1.076      7000.    



                     -0.2390    -0.6590     -2.142     -1.982    -0.3807    

                     -0.3252      9.102      8.720    -0.1672E+05 -6.000    

                      -1.171     -1.779      9.540      8.869    -0.1969E+05



                      -6.000      1.187    -0.6131      8.906      9.140    

                     -0.1944E+05 -6.000    -0.5012    -0.1634      9.207    

                       8.899    -0.1891E+05 -6.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1776.26
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    70.0584               251
loop is:       21
neval is:      220
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       21      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    560.467      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    70.0584               251
loop is:       22
neval is:      220


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      251
neval,tstepnext:      220     251

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.838898     -0.175666      -12.3069       12.3069       1305.70       1318.00    
   2  0.801853     -0.220830      -15.4710       15.4710       1439.46       1454.93    
   3  0.768645     -0.263126      -18.4342       18.4342       1449.71       1468.14    
   4  0.855557     -0.156003      -10.9293       10.9293       1466.62       1477.55    
   5  0.845591     -0.167720      -11.7502       11.7502       1526.77       1538.52    
   6  0.350050      -1.04968      -73.5388       73.5388       1544.91       1618.45    
   7  0.927608     -0.751463E-01  -5.26463       5.26463       1563.69       1568.95    
   8  0.655345E-01  -2.72518      -190.922       190.922       1597.78       1788.71    
   9  0.355481      -1.03428      -72.4603       72.4603       1587.39       1659.85    
  10  0.728523     -0.316737      -22.1901       22.1901       1561.28       1583.47    
  11  0.573220     -0.556486      -38.9865       38.9865       1597.91       1636.90    
  12  0.112478      -2.18499      -153.077       153.077       1618.25       1771.32    
  13  0.338739      -1.08253      -75.8401       75.8401       1567.29       1643.13    
  14  0.239648      -1.42858      -100.084       100.084       1613.45       1713.54    
  15  0.918959     -0.845134E-01  -5.92087       5.92087       1443.32       1449.24    
  16  0.283771      -1.25959      -88.2447       88.2447       1529.84       1618.09    
  17  0.414404     -0.880913      -61.7154       61.7154       1556.76       1618.48    
  18  0.716403     -0.333512      -23.3653       23.3653       1590.93       1614.29    
  19  0.317726      -1.14657      -80.3267       80.3267       1661.38       1741.70    
  20  0.339005      -1.08174      -75.7851       75.7851       1655.48       1731.26    
  21  0.163059      -1.81364      -127.061       127.061       1588.30       1715.36    
  22  0.477081     -0.740069      -51.8481       51.8481       1665.69       1717.54    
  23  0.105851      -2.24573      -157.332       157.332       1660.61       1817.94    
  24  0.840431     -0.173840      -12.1790       12.1790       1571.48       1583.66    
  25  0.235315      -1.44683      -101.363       101.363       1655.87       1757.24    
  26  0.865464     -0.144489      -10.1227       10.1227       1705.66       1715.78    
  27  0.909462     -0.949026E-01  -6.64873       6.64873       1672.43       1679.08    
  28  0.152105E-01  -4.18577      -293.248       293.248       1706.19       1999.44    
  29  0.962485     -0.382371E-01  -2.67883       2.67883       1609.45       1612.13    
  30  0.259410      -1.34934      -94.5330       94.5330       1758.77       1853.31    
  31  0.364880      -1.00819      -70.6319       70.6319       1756.37       1827.01    
  32  0.467235     -0.760923      -53.3090       53.3090       1751.28       1804.59    
  33  0.844908     -0.168527      -11.8068       11.8068       1732.92       1744.73    
  34  0.188232      -1.67008      -117.003       117.003       1785.11       1902.12    
  35  0.496585     -0.700000      -49.0409       49.0409       1778.56       1827.60    
  36  0.410505     -0.890367      -62.3777       62.3777       1799.18       1861.56    
  37  0.533875     -0.627594      -43.9682       43.9682       1707.38       1751.35    
  38  0.610668     -0.493202      -34.5529       34.5529       1731.03       1765.58    
  39  0.241933      -1.41910      -99.4196       99.4196       1827.20       1926.62    
  40  0.642629     -0.442188      -30.9790       30.9790       1852.37       1883.35    
  41  0.775072     -0.254799      -17.8508       17.8508       1843.54       1861.39    
  42  0.345343      -1.06322      -74.4873       74.4873       1840.99       1915.48    
  43  0.844097     -0.169488      -11.8741       11.8741       1840.65       1852.53    
  44  0.426886     -0.851239      -59.6365       59.6365       1747.61       1807.24    
  45  0.594109     -0.520693      -36.4789       36.4789       1873.15       1909.62    
  46  0.489527     -0.714316      -50.0439       50.0439       1694.67       1744.72    
  47  0.313882      -1.15874      -81.1795       81.1795       1830.81       1911.99    
  48  0.687066     -0.375325      -26.2947       26.2947       1924.84       1951.14    
  49  0.394505     -0.930124      -65.1630       65.1630       1742.17       1807.33    
  50  0.971200     -0.292233E-01  -2.04734       2.04734       1502.52       1504.57    
  51  0.916939     -0.867145E-01  -6.07508       6.07508       1776.26       1782.34    
loop,thermsimp(1:2)       22   12.3069       15.4710    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    222       1984.19          0.88          1.10         21.90          0.22          0.05         24.15
Just calling func    0   0         24.15


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    223       1610.66          0.87          1.11         22.08          0.24          0.05         24.34
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3   1610.66
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    70.0584               251
loop is:       22
neval is:      222
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       22      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    560.467      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    70.0584               251
loop is:       23
neval is:      222


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      251
neval,tstepnext:      222     251

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.848355     -0.164456      -11.5215       11.5215       1305.70       1317.22    
   2  0.848474     -0.164316      -11.5117       11.5117       1443.32       1454.84    
   3  0.146795      -1.91872      -134.422       134.422       1439.46       1573.88    
   4  0.398624     -0.919738      -64.4354       64.4354       1449.71       1514.14    
   5  0.888093     -0.118679      -8.31443       8.31443       1466.62       1474.93    
   6  0.475009     -0.744421      -52.1530       52.1530       1502.52       1554.68    
   7  0.120824      -2.11342      -148.063       148.063       1526.77       1674.83    
   8  0.270052      -1.30914      -91.7164       91.7164       1563.69       1655.40    
   9  0.201748E-01  -3.90332      -273.461       273.461       1561.28       1834.74    
  10  0.999386     -0.614559E-03 -0.430550E-01  0.430550E-01   1571.48       1571.53    
  11  0.212655      -1.54808      -108.456       108.456       1609.45       1717.91    
  12  0.197911      -1.61994      -113.490       113.490       1590.93       1704.42    
  13  0.786394     -0.240297      -16.8349       16.8349       1529.84       1546.68    
  14  0.781263     -0.246844      -17.2935       17.2935       1544.91       1562.20    
  15  0.788011     -0.238244      -16.6910       16.6910       1556.76       1573.46    
  16  0.956387     -0.445927E-01  -3.12409       3.12409       1597.91       1601.04    
  17  0.717415     -0.332100      -23.2664       23.2664       1567.29       1590.55    
  18  0.808756     -0.212258      -14.8705       14.8705       1587.39       1602.26    
  19  0.756838     -0.278606      -19.5187       19.5187       1672.43       1691.95    
  20  0.570684     -0.560919      -39.2971       39.2971       1613.45       1652.75    
  21  0.946031     -0.554796E-01  -3.88682       3.88682       1588.30       1592.18    
  22  0.678634E-01  -2.69026      -188.475       188.475       1705.66       1894.14    
  23  0.631502     -0.459654      -32.2026       32.2026       1665.69       1697.89    
  24  0.114784E-01  -4.46729      -312.971       312.971       1655.48       1968.45    
  25  0.549681     -0.598417      -41.9242       41.9242       1661.38       1703.30    
  26  0.846433     -0.166725      -11.6805       11.6805       1694.67       1706.35    
  27  0.441841     -0.816805      -57.2241       57.2241       1732.92       1790.14    
  28  0.299100      -1.20698      -84.5589       84.5589       1707.38       1791.94    
  29  0.378130     -0.972517      -68.1330       68.1330       1655.87       1724.01    
  30  0.830469     -0.185764      -13.0144       13.0144       1731.03       1744.04    
  31  0.675108     -0.392883      -27.5248       27.5248       1618.25       1645.77    
  32  0.997619     -0.238377E-02 -0.167003      0.167003       1776.26       1776.43    
  33  0.897623     -0.108005      -7.56664       7.56664       1597.78       1605.35    
  34  0.591811E-01  -2.82715      -198.066       198.066       1751.28       1949.35    
  35  0.229825      -1.47044      -103.016       103.016       1747.61       1850.62    
  36  0.654017     -0.424622      -29.7484       29.7484       1742.17       1771.92    
  37  0.305777      -1.18490      -83.0123       83.0123       1660.61       1743.62    
  38  0.936135     -0.659954E-01  -4.62354       4.62354       1756.37       1761.00    
  39  0.698153     -0.359317      -25.1732       25.1732       1778.56       1803.73    
  40  0.829975     -0.186360      -13.0561       13.0561       1840.65       1853.71    
  41  0.951351     -0.498721E-01  -3.49396       3.49396       1758.77       1762.27    
  42  0.883299     -0.124092      -8.69370       8.69370       1843.54       1852.23    
  43  0.910087     -0.942154E-01  -6.60059       6.60059       1799.18       1805.78    
  44  0.590840     -0.526210      -36.8654       36.8654       1852.37       1889.24    
  45  0.146785      -1.91879      -134.427       134.427       1785.11       1919.54    
  46  0.830381E-01  -2.48846      -174.337       174.337       1873.15       2047.48    
  47  0.289482      -1.23966      -86.8488       86.8488       1830.81       1917.66    
  48  0.594462     -0.520098      -36.4372       36.4372       1840.99       1877.43    
  49  0.241311      -1.42167      -99.5997       99.5997       1827.20       1926.80    
  50  0.612368     -0.490422      -34.3582       34.3582       1924.84       1959.20    
  51  0.952207     -0.489727E-01  -3.43095       3.43095       1610.66       1614.09    
loop,thermsimp(1:2)       23   11.5215       11.5117    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    224       1442.39          0.88          1.11         21.88          0.32          0.05         24.24
Just calling func    0   0         24.24


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1442.39
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    70.0584               251
loop is:       23
neval is:      223
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       23      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    560.467      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    70.0584               251
loop is:       24
neval is:      223


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      251
neval,tstepnext:      223     251

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.102026      -2.28253      -159.911       159.911       1305.70       1465.61    
   2  0.372115     -0.988552      -69.2564       69.2564       1443.32       1512.58    
   3  0.732875     -0.310780      -21.7728       21.7728       1466.62       1488.39    
   4  0.341646      -1.07398      -75.2413       75.2413       1449.71       1524.95    
   5  0.406512     -0.900141      -63.0625       63.0625       1529.84       1592.90    
   6  0.271848      -1.30251      -91.2520       91.2520       1502.52       1593.77    
   7  0.738418     -0.303245      -21.2448       21.2448       1544.91       1566.15    
   8  0.903199     -0.101813      -7.13285       7.13285       1571.48       1578.61    
   9  0.511789     -0.669842      -46.9281       46.9281       1556.76       1603.69    
  10  0.202674      -1.59616      -111.824       111.824       1439.46       1551.28    
  11  0.325695      -1.12179      -78.5912       78.5912       1567.29       1645.88    
  12  0.719720     -0.328893      -23.0417       23.0417       1588.30       1611.34    
  13  0.715609     -0.334622      -23.4431       23.4431       1597.91       1621.36    
  14  0.973328     -0.270339E-01  -1.89395       1.89395       1587.39       1589.28    
  15  0.373998     -0.983504      -68.9028       68.9028       1597.78       1666.69    
  16  0.977965     -0.222815E-01  -1.56101       1.56101       1610.66       1612.22    
  17  0.105495      -2.24909      -157.568       157.568       1618.25       1775.81    
  18  0.729809     -0.314973      -22.0665       22.0665       1613.45       1635.52    
  19  0.378008     -0.972839      -68.1556       68.1556       1563.69       1631.84    
  20  0.678326     -0.388127      -27.1916       27.1916       1526.77       1553.96    
  21  0.671993     -0.397507      -27.8488       27.8488       1672.43       1700.28    
  22  0.515926     -0.661792      -46.3641       46.3641       1665.69       1712.05    
  23  0.363490      -1.01200      -70.8994       70.8994       1661.38       1732.27    
  24  0.206319      -1.57833      -110.575       110.575       1590.93       1701.50    
  25  0.755157E-01  -2.58341      -180.990       180.990       1694.67       1875.66    
  26  0.413763     -0.882461      -61.8239       61.8239       1609.45       1671.28    
  27  0.279023      -1.27646      -89.4268       89.4268       1655.87       1745.30    
  28  0.506422     -0.680385      -47.6667       47.6667       1660.61       1708.28    
  29  0.643082E-02  -5.04665      -353.561       353.561       1731.03       2084.59    
  30  0.285888E-01  -3.55474      -249.040       249.040       1756.37       2005.41    
  31  0.660419     -0.414880      -29.0659       29.0659       1758.77       1787.84    
  32  0.739369     -0.301959      -21.1548       21.1548       1742.17       1763.32    
  33  0.270269      -1.30834      -91.6601       91.6601       1776.26       1867.92    
  34  0.663889     -0.409640      -28.6987       28.6987       1732.92       1761.62    
  35  0.898739E-01  -2.40935      -168.795       168.795       1707.38       1876.17    
  36  0.832427     -0.183410      -12.8494       12.8494       1778.56       1791.41    
  37  0.723106     -0.324200      -22.7130       22.7130       1799.18       1821.89    
  38  0.986274     -0.138207E-01 -0.968258      0.968258       1561.28       1562.25    
  39  0.812861     -0.207195      -14.5158       14.5158       1747.61       1762.12    
  40  0.553236     -0.591971      -41.4726       41.4726       1843.54       1885.01    
  41  0.693785E-01  -2.66818      -186.928       186.928       1840.65       2027.58    
  42  0.117256      -2.14340      -150.163       150.163       1840.99       1991.15    
  43  0.807809     -0.213430      -14.9525       14.9525       1852.37       1867.32    
  44  0.900249     -0.105084      -7.36200       7.36200       1705.66       1713.02    
  45  0.753470     -0.283066      -19.8312       19.8312       1830.81       1850.65    
  46  0.127159      -2.06232      -144.483       144.483       1785.11       1929.60    
  47  0.535389     -0.624762      -43.7699       43.7699       1827.20       1870.97    
  48  0.957281     -0.436582E-01  -3.05862       3.05862       1751.28       1754.34    
  49  0.227700      -1.47973      -103.667       103.667       1924.84       2028.51    
  50  0.636404     -0.451921      -31.6609       31.6609       1655.48       1687.14    
  51  0.905015     -0.998042E-01  -6.99212       6.99212       1442.39       1449.38    
loop,thermsimp(1:2)       24   159.911       69.2564    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    225       1860.76          0.87          1.12         21.85          0.28          0.05         24.16
Just calling func    0   0         24.16


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1860.76
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    70.0584               251
loop is:       24
neval is:      224
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       24      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    560.467      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    70.0584               251
loop is:       25
neval is:      224


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      251
neval,tstepnext:      224     251

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.962782     -0.379284E-01  -2.65721       2.65721       1442.39       1445.05    
   2  0.355374      -1.03458      -72.4813       72.4813       1305.70       1378.18    
   3  0.294461      -1.22261      -85.6540       85.6540       1466.62       1552.27    
   4  0.644538     -0.439222      -30.7712       30.7712       1443.32       1474.09    
   5  0.741622     -0.298915      -20.9415       20.9415       1449.71       1470.65    
   6  0.805913E-01  -2.51837      -176.433       176.433       1439.46       1615.89    
   7  0.498180     -0.696794      -48.8163       48.8163       1526.77       1575.59    
   8  0.771004     -0.260061      -18.2195       18.2195       1561.28       1579.50    
   9  0.753480     -0.283053      -19.8302       19.8302       1544.91       1564.74    
  10  0.460525     -0.775387      -54.3224       54.3224       1571.48       1625.80    
  11  0.918626     -0.848759E-01  -5.94627       5.94627       1587.39       1593.33    
  12  0.355379      -1.03457      -72.4803       72.4803       1529.84       1602.32    
  13  0.664646     -0.408501      -28.6189       28.6189       1502.52       1531.14    
  14  0.328018      -1.11469      -78.0933       78.0933       1556.76       1634.86    
  15  0.529583     -0.635665      -44.5337       44.5337       1588.30       1632.83    
  16  0.259823      -1.34775      -94.4215       94.4215       1610.66       1705.08    
  17  0.463690E-01  -3.07112      -215.158       215.158       1597.91       1813.07    
  18  0.366509      -1.00373      -70.3199       70.3199       1563.69       1634.01    
  19  0.794534     -0.229999      -16.1134       16.1134       1613.45       1629.57    
  20  0.669373     -0.401413      -28.1224       28.1224       1567.29       1595.41    
  21  0.798901     -0.224518      -15.7294       15.7294       1597.78       1613.51    
  22  0.610403     -0.493636      -34.5834       34.5834       1609.45       1644.04    
  23  0.267818      -1.31745      -92.2982       92.2982       1655.48       1747.78    
  24  0.663049     -0.410906      -28.7874       28.7874       1672.43       1701.22    
  25  0.782871     -0.244788      -17.1494       17.1494       1590.93       1608.08    
  26  0.706545     -0.347368      -24.3361       24.3361       1660.61       1684.95    
  27  0.120119      -2.11927      -148.473       148.473       1665.69       1814.16    
  28  0.270575      -1.30721      -91.5809       91.5809       1705.66       1797.24    
  29  0.505391     -0.682422      -47.8094       47.8094       1661.38       1709.18    
  30  0.665734     -0.406865      -28.5043       28.5043       1655.87       1684.38    
  31  0.836788     -0.178185      -12.4834       12.4834       1751.28       1763.76    
  32  0.866983     -0.142736      -9.99987       9.99987       1732.92       1742.92    
  33  0.552904     -0.592571      -41.5146       41.5146       1747.61       1789.12    
  34  0.554153     -0.590314      -41.3565       41.3565       1742.17       1783.53    
  35  0.592407E-01  -2.82615      -197.995       197.995       1618.25       1816.24    
  36  0.902163     -0.102960      -7.21319       7.21319       1758.77       1765.99    
  37  0.266638E-01  -3.62445      -253.923       253.923       1778.56       2032.48    
  38  0.897053     -0.108640      -7.61116       7.61116       1799.18       1806.79    
  39  0.840496     -0.173763      -12.1736       12.1736       1830.81       1842.99    
  40  0.288358      -1.24355      -87.1214       87.1214       1852.37       1939.49    
  41  0.835972E-01  -2.48175      -173.867       173.867       1776.26       1950.13    
  42  0.412070     -0.886563      -62.1112       62.1112       1827.20       1889.32    
  43  0.725010     -0.321570      -22.5287       22.5287       1694.67       1717.20    
  44  0.316556      -1.15026      -80.5851       80.5851       1707.38       1787.96    
  45  0.486178     -0.721181      -50.5248       50.5248       1843.54       1894.06    
  46  0.143341      -1.94253      -136.091       136.091       1785.11       1921.20    
  47  0.956913     -0.440430E-01  -3.08559       3.08559       1840.99       1844.07    
  48  0.362697      -1.01419      -71.0523       71.0523       1756.37       1827.43    
  49  0.951746     -0.494572E-01  -3.46490       3.46490       1840.65       1844.12    
  50  0.511140     -0.671112      -47.0170       47.0170       1924.84       1971.86    
  51  0.364891E-01  -3.31074      -231.945       231.945       1860.76       2092.70    
loop,thermsimp(1:2)       25   2.65721       72.4813    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    226       1731.03          0.87          1.11         22.05          0.31          0.05         24.39
Just calling func    0   0         24.39


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1731.03
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    70.0584               251
loop is:       25
neval is:      225
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       25      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    560.467      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    70.0584               251
loop is:       26
neval is:      225


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      251
neval,tstepnext:      225     251

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.987524     -0.125549E-01 -0.879574      0.879574       1305.70       1306.58    
   2  0.516099     -0.661457      -46.3407       46.3407       1442.39       1488.73    
   3  0.202206      -1.59847      -111.986       111.986       1449.71       1561.69    
   4  0.240260      -1.42603      -99.9057       99.9057       1443.32       1543.23    
   5  0.717263E-01  -2.63490      -184.597       184.597       1502.52       1687.12    
   6  0.395382     -0.927902      -65.0074       65.0074       1466.62       1531.63    
   7  0.494348     -0.704516      -49.3573       49.3573       1544.91       1594.26    
   8  0.970815     -0.296196E-01  -2.07511       2.07511       1526.77       1528.85    
   9  0.992795     -0.723105E-02 -0.506596      0.506596       1561.28       1561.79    
  10  0.387320     -0.948503      -66.4506       66.4506       1587.39       1653.84    
  11  0.586568     -0.533466      -37.3738       37.3738       1567.29       1604.66    
  12  0.119144      -2.12742      -149.044       149.044       1529.84       1678.89    
  13  0.145144      -1.93003      -135.215       135.215       1590.93       1726.14    
  14  0.767931     -0.264056      -18.4993       18.4993       1597.78       1616.28    
  15  0.415014     -0.879442      -61.6123       61.6123       1439.46       1501.07    
  16  0.994477     -0.553801E-02 -0.387984      0.387984       1571.48       1571.87    
  17  0.757243     -0.278071      -19.4812       19.4812       1613.45       1632.93    
  18  0.669290     -0.401537      -28.1311       28.1311       1588.30       1616.43    
  19  0.112026      -2.18903      -153.360       153.360       1563.69       1717.05    
  20  0.434244     -0.834148      -58.4391       58.4391       1556.76       1615.20    
  21  0.491828     -0.709627      -49.7153       49.7153       1609.45       1659.17    
  22  0.517535     -0.658677      -46.1459       46.1459       1655.87       1702.02    
  23  0.411147     -0.888804      -62.2682       62.2682       1660.61       1722.88    
  24  0.250164      -1.38564      -97.0756       97.0756       1672.43       1769.51    
  25  0.109742E-01  -4.51221      -316.118       316.118       1610.66       1926.78    
  26  0.559459     -0.580786      -40.6889       40.6889       1661.38       1702.06    
  27  0.289677      -1.23899      -86.8016       86.8016       1694.67       1781.48    
  28  0.835809     -0.179356      -12.5654       12.5654       1732.92       1745.49    
  29  0.236182      -1.44315      -101.105       101.105       1655.48       1756.58    
  30  0.700988     -0.355264      -24.8893       24.8893       1751.28       1776.17    
  31  0.886914     -0.120007      -8.40752       8.40752       1758.77       1767.18    
  32  0.182911      -1.69875      -119.012       119.012       1742.17       1861.18    
  33  0.693089     -0.366597      -25.6832       25.6832       1707.38       1733.06    
  34  0.108523      -2.22079      -155.585       155.585       1747.61       1903.19    
  35  0.141600      -1.95475      -136.946       136.946       1705.66       1842.61    
  36  0.168348E-01  -4.08431      -286.140       286.140       1799.18       2085.32    
  37  0.419419E-01  -3.17147      -222.188       222.188       1597.91       1820.10    
  38  0.244896      -1.40692      -98.5669       98.5669       1665.69       1764.26    
  39  0.360662      -1.01981      -71.4466       71.4466       1618.25       1689.69    
  40  0.927013     -0.757879E-01  -5.30958       5.30958       1756.37       1761.68    
  41  0.869067     -0.140335      -9.83164       9.83164       1830.81       1840.65    
  42  0.827083     -0.189851      -13.3006       13.3006       1840.99       1854.29    
  43  0.928403     -0.742893E-01  -5.20459       5.20459       1840.65       1845.86    
  44  0.513193     -0.667103      -46.7362       46.7362       1827.20       1873.94    
  45  0.809080     -0.211858      -14.8424       14.8424       1843.54       1858.38    
  46  0.341224E-02  -5.68039      -397.959       397.959       1785.11       2183.07    
  47  0.734431     -0.308659      -21.6242       21.6242       1852.37       1874.00    
  48  0.688454     -0.373307      -26.1533       26.1533       1776.26       1802.42    
  49  0.990614     -0.943067E-02 -0.660698      0.660698       1924.84       1925.51    
  50  0.143408      -1.94206      -136.058       136.058       1778.56       1914.61    
  51  0.868596     -0.140878      -9.86967       9.86967       1731.03       1740.90    
loop,thermsimp(1:2)       26  0.879574       46.3407    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    227       1564.37          0.88          1.11         22.26          0.22          0.05         24.52
Just calling func    0   0         24.52


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1564.37
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    70.0584               251
loop is:       26
neval is:      226
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       26      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    560.467      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    70.0584               251
loop is:       27
neval is:      226


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      251
neval,tstepnext:      226     251

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.199609      -1.61140      -112.892       112.892       1305.70       1418.59    
   2  0.983274     -0.168677E-01  -1.18172       1.18172       1442.39       1443.57    
   3  0.569108     -0.563685      -39.4909       39.4909       1439.46       1478.95    
   4  0.411179     -0.888728      -62.2629       62.2629       1526.77       1589.03    
   5  0.889241     -0.117387      -8.22392       8.22392       1466.62       1474.84    
   6  0.109537      -2.21149      -154.934       154.934       1443.32       1598.26    
   7  0.658027     -0.418509      -29.3201       29.3201       1449.71       1479.03    
   8  0.427534     -0.849722      -59.5302       59.5302       1561.28       1620.81    
   9  0.277803      -1.28084      -89.7337       89.7337       1571.48       1661.22    
  10  0.568421     -0.564892      -39.5755       39.5755       1544.91       1584.48    
  11  0.368489     -0.998346      -69.9425       69.9425       1567.29       1637.23    
  12  0.100945E-01  -4.59576      -321.972       321.972       1556.76       1878.74    
  13  0.811445     -0.208939      -14.6379       14.6379       1597.78       1612.42    
  14  0.135138      -2.00146      -140.219       140.219       1588.30       1728.52    
  15  0.600340     -0.510258      -35.7479       35.7479       1613.45       1649.20    
  16  0.537538     -0.620755      -43.4892       43.4892       1587.39       1630.88    
  17  0.923261     -0.798434E-01  -5.59370       5.59370       1609.45       1615.05    
  18  0.296505      -1.21569      -85.1695       85.1695       1529.84       1615.01    
  19  0.975666     -0.246348E-01  -1.72588       1.72588       1502.52       1504.25    
  20  0.102971      -2.27331      -159.265       159.265       1618.25       1777.51    
  21  0.110137      -2.20603      -154.551       154.551       1655.87       1810.42    
  22  0.874539     -0.134058      -9.39190       9.39190       1661.38       1670.77    
  23  0.887507     -0.119339      -8.36073       8.36073       1563.69       1572.05    
  24  0.811767     -0.208543      -14.6102       14.6102       1660.61       1675.22    
  25  0.304283      -1.18980      -83.3553       83.3553       1590.93       1674.28    
  26  0.304144      -1.19025      -83.3873       83.3873       1707.38       1790.76    
  27  0.854538     -0.157194      -11.0128       11.0128       1731.03       1742.04    
  28  0.543001     -0.610645      -42.7808       42.7808       1732.92       1775.70    
  29  0.808766     -0.212246      -14.8696       14.8696       1655.48       1670.35    
  30  0.286176      -1.25115      -87.6535       87.6535       1756.37       1844.03    
  31  0.328161      -1.11425      -78.0626       78.0626       1665.69       1743.75    
  32  0.563264     -0.574006      -40.2140       40.2140       1758.77       1798.99    
  33  0.180895      -1.70984      -119.789       119.789       1672.43       1792.22    
  34  0.977796     -0.224538E-01  -1.57307       1.57307       1751.28       1752.85    
  35  0.650784     -0.429577      -30.0955       30.0955       1694.67       1724.77    
  36  0.350586      -1.04815      -73.4316       73.4316       1776.26       1849.69    
  37  0.852996E-01  -2.46159      -172.455       172.455       1597.91       1770.37    
  38  0.363921      -1.01082      -70.8164       70.8164       1830.81       1901.63    
  39  0.715496E-01  -2.63737      -184.770       184.770       1705.66       1890.43    
  40  0.540542     -0.615184      -43.0988       43.0988       1840.65       1883.75    
  41  0.458744E-02  -5.38443      -377.225       377.225       1840.99       2218.21    
  42  0.684509     -0.379054      -26.5559       26.5559       1843.54       1870.10    
  43  0.827193     -0.189717      -13.2913       13.2913       1742.17       1755.46    
  44  0.430712     -0.842315      -59.0113       59.0113       1827.20       1886.22    
  45  0.925073     -0.778822E-01  -5.45631       5.45631       1852.37       1857.83    
  46  0.139567      -1.96921      -137.960       137.960       1747.61       1885.57    
  47  0.905138     -0.996680E-01  -6.98258       6.98258       1778.56       1785.54    
  48  0.230323      -1.46827      -102.865       102.865       1924.84       2027.71    
  49  0.854981     -0.156676      -10.9765       10.9765       1610.66       1621.64    
  50  0.526676     -0.641170      -44.9194       44.9194       1799.18       1844.10    
  51  0.425904     -0.853542      -59.7978       59.7978       1564.37       1624.17    
loop,thermsimp(1:2)       27   112.892       1.18172    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    228       1462.36          0.87          1.11         21.88          0.35          0.05         24.25
Just calling func    0   0         24.25


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1462.36
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    70.0584               251
loop is:       27
neval is:      227
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       27      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    560.467      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    70.0584               251
loop is:       28
neval is:      227


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      251
neval,tstepnext:      227     251

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.231666      -1.46246      -102.458       102.458       1305.70       1408.15    
   2  0.922423     -0.807516E-01  -5.65733       5.65733       1442.39       1448.05    
   3  0.556007     -0.586974      -41.1225       41.1225       1466.62       1507.74    
   4  0.921345     -0.819211E-01  -5.73927       5.73927       1439.46       1445.20    
   5  0.623358     -0.472635      -33.1121       33.1121       1449.71       1482.82    
   6  0.967150     -0.334012E-01  -2.34003       2.34003       1502.52       1504.86    
   7  0.239844      -1.42777      -100.027       100.027       1563.69       1663.71    
   8  0.707370     -0.346201      -24.2543       24.2543       1544.91       1569.16    
   9  0.375591     -0.979256      -68.6051       68.6051       1526.77       1595.38    
  10  0.164915      -1.80233      -126.268       126.268       1443.32       1569.59    
  11  0.634729     -0.454558      -31.8456       31.8456       1597.78       1629.63    
  12  0.956585     -0.443852E-01  -3.10956       3.10956       1529.84       1532.95    
  13  0.281051      -1.26922      -88.9194       88.9194       1609.45       1698.37    
  14  0.332446      -1.10128      -77.1538       77.1538       1561.28       1638.43    
  15  0.417901     -0.872510      -61.1267       61.1267       1610.66       1671.79    
  16  0.454459     -0.788647      -55.2514       55.2514       1564.37       1619.62    
  17  0.163150      -1.81309      -127.022       127.022       1587.39       1714.41    
  18  0.412675     -0.885095      -62.0084       62.0084       1567.29       1629.30    
  19  0.510076     -0.673195      -47.1630       47.1630       1613.45       1660.61    
  20  0.159872E-02  -6.43855      -451.075       451.075       1571.48       2022.56    
  21  0.279094      -1.27620      -89.4089       89.4089       1655.48       1744.89    
  22  0.229843E-01  -3.77294      -264.327       264.327       1661.38       1925.70    
  23  0.829240E-02  -4.79242      -335.749       335.749       1590.93       1926.68    
  24  0.722732     -0.324717      -22.7492       22.7492       1660.61       1683.36    
  25  0.399402     -0.917787      -64.2987       64.2987       1694.67       1758.97    
  26  0.321457      -1.13489      -79.5088       79.5088       1588.30       1667.81    
  27  0.103147      -2.27160      -159.144       159.144       1731.03       1890.17    
  28  0.488570     -0.716273      -50.1810       50.1810       1665.69       1715.87    
  29  0.775391     -0.254388      -17.8220       17.8220       1751.28       1769.10    
  30  0.264831      -1.32866      -93.0841       93.0841       1742.17       1835.25    
  31  0.291634      -1.23225      -86.3298       86.3298       1597.91       1684.24    
  32  0.754799E-02  -4.88647      -342.339       342.339       1732.92       2075.26    
  33  0.403715     -0.907047      -63.5463       63.5463       1618.25       1681.79    
  34  0.794963     -0.229460      -16.0756       16.0756       1778.56       1794.63    
  35  0.482612E-01  -3.03113      -212.356       212.356       1707.38       1919.73    
  36  0.309506      -1.17278      -82.1629       82.1629       1672.43       1754.59    
  37  0.265676      -1.32548      -92.8608       92.8608       1758.77       1851.63    
  38  0.793358     -0.231480      -16.2171       16.2171       1655.87       1672.09    
  39  0.603192E-01  -2.80811      -196.731       196.731       1756.37       1953.11    
  40  0.516664     -0.660363      -46.2640       46.2640       1799.18       1845.44    
  41  0.524892E-01  -2.94715      -206.473       206.473       1776.26       1982.73    
  42  0.581500     -0.542144      -37.9818       37.9818       1852.37       1890.35    
  43  0.403805     -0.906823      -63.5306       63.5306       1843.54       1907.07    
  44  0.447829     -0.803344      -56.2810       56.2810       1556.76       1613.05    
  45  0.470604     -0.753737      -52.8057       52.8057       1840.65       1893.46    
  46  0.479088     -0.735871      -51.5539       51.5539       1747.61       1799.16    
  47  0.959223     -0.416322E-01  -2.91668       2.91668       1827.20       1830.12    
  48  0.527403     -0.639789      -44.8226       44.8226       1705.66       1750.48    
  49  0.731687     -0.312402      -21.8864       21.8864       1830.81       1852.70    
  50  0.682707     -0.381689      -26.7406       26.7406       1924.84       1951.59    
  51  0.386616     -0.950322      -66.5781       66.5781       1462.36       1528.94    
loop,thermsimp(1:2)       28   102.458       5.65733    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    229       1504.88          0.87          1.11         21.93          0.24          0.05         24.20
Just calling func    0   0         24.20


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1504.88
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    70.0584               251
loop is:       28
neval is:      228
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       28      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    560.467      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    70.0584               251
loop is:       29
neval is:      228


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      251
neval,tstepnext:      228     251

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.332051      -1.10247      -77.2372       77.2372       1305.70       1382.93    
   2  0.991191     -0.884791E-02 -0.619870      0.619870       1439.46       1440.08    
   3  0.752830     -0.283916      -19.8907       19.8907       1442.39       1462.28    
   4  0.718872     -0.330071      -23.1243       23.1243       1449.71       1472.83    
   5  0.362244      -1.01544      -71.1400       71.1400       1502.52       1573.66    
   6  0.993342E-01  -2.30927      -161.784       161.784       1466.62       1628.40    
   7  0.734379     -0.308729      -21.6291       21.6291       1462.36       1483.99    
   8  0.190509      -1.65806      -116.161       116.161       1529.84       1646.00    
   9  0.113713      -2.17408      -152.312       152.312       1544.91       1697.22    
  10  0.582158     -0.541014      -37.9026       37.9026       1443.32       1481.23    
  11  0.100405E-01  -4.60113      -322.348       322.348       1526.77       1849.12    
  12  0.614877     -0.486333      -34.0717       34.0717       1556.76       1590.84    
  13  0.996806     -0.319890E-02 -0.224110      0.224110       1564.37       1564.59    
  14  0.439871E-01  -3.12386      -218.853       218.853       1567.29       1786.14    
  15  0.610456     -0.493549      -34.5773       34.5773       1597.78       1632.36    
  16  0.676471     -0.390866      -27.3834       27.3834       1561.28       1588.66    
  17  0.263829      -1.33246      -93.3497       93.3497       1613.45       1706.80    
  18  0.761962     -0.271858      -19.0459       19.0459       1563.69       1582.73    
  19  0.405295     -0.903140      -63.2725       63.2725       1588.30       1651.57    
  20  0.184680      -1.68913      -118.338       118.338       1610.66       1729.00    
  21  0.695434     -0.363219      -25.4466       25.4466       1655.87       1681.32    
  22  0.597154     -0.515580      -36.1207       36.1207       1618.25       1654.37    
  23  0.254276      -1.36933      -95.9333       95.9333       1660.61       1756.54    
  24  0.777974     -0.251062      -17.5890       17.5890       1597.91       1615.50    
  25  0.597236     -0.515443      -36.1111       36.1111       1609.45       1645.56    
  26  0.658168     -0.418295      -29.3051       29.3051       1587.39       1616.69    
  27  0.917953     -0.856086E-01  -5.99760       5.99760       1665.69       1671.69    
  28  0.167567      -1.78637      -125.151       125.151       1655.48       1780.63    
  29  0.867739E-02  -4.74703      -332.570       332.570       1705.66       2038.23    
  30  0.157469      -1.84853      -129.505       129.505       1672.43       1801.94    
  31  0.947458     -0.539724E-01  -3.78122       3.78122       1694.67       1698.46    
  32  0.883772     -0.123556      -8.65613       8.65613       1751.28       1759.94    
  33  0.873100     -0.135705      -9.50727       9.50727       1778.56       1788.06    
  34  0.138043      -1.98019      -138.729       138.729       1747.61       1886.33    
  35  0.833185     -0.182500      -12.7856       12.7856       1827.20       1839.99    
  36  0.907894     -0.966275E-01  -6.76957       6.76957       1742.17       1748.94    
  37  0.858432     -0.152648      -10.6943       10.6943       1799.18       1809.88    
  38  0.192050      -1.65000      -115.596       115.596       1758.77       1874.37    
  39  0.890666     -0.115786      -8.11176       8.11176       1830.81       1838.93    
  40  0.389935     -0.941775      -65.9793       65.9793       1731.03       1797.01    
  41  0.842362     -0.171545      -12.0182       12.0182       1852.37       1864.39    
  42  0.143912      -1.93855      -135.812       135.812       1840.65       1976.46    
  43  0.678545     -0.387804      -27.1690       27.1690       1843.54       1870.71    
  44  0.621021     -0.476390      -33.3752       33.3752       1707.38       1740.75    
  45  0.533199     -0.628861      -44.0570       44.0570       1661.38       1705.43    
  46  0.891703     -0.114623      -8.03028       8.03028       1590.93       1598.96    
  47  0.675469     -0.392349      -27.4873       27.4873       1924.84       1952.33    
  48  0.757471     -0.277770      -19.4601       19.4601       1756.37       1775.83    
  49  0.855441     -0.156139      -10.9388       10.9388       1776.26       1787.20    
  50  0.737982     -0.303836      -21.2863       21.2863       1571.48       1592.77    
  51  0.630328     -0.461515      -32.3330       32.3330       1504.88       1537.22    
loop,thermsimp(1:2)       29   77.2372      0.619870    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    230       1489.63          0.88          1.11         21.89          0.22          0.05         24.15
Just calling func    0   0         24.15


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1489.63
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    70.0584               251
loop is:       29
neval is:      229
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       29      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    560.467      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    70.0584               251
loop is:       30
neval is:      229


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      251
neval,tstepnext:      229     251

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.157557      -1.84797      -129.466       129.466       1305.70       1435.16    
   2  0.553200     -0.592035      -41.4771       41.4771       1439.46       1480.94    
   3  0.825049     -0.192313      -13.4731       13.4731       1442.39       1455.86    
   4  0.767336     -0.264830      -18.5536       18.5536       1449.71       1468.26    
   5  0.966534     -0.340385E-01  -2.38468       2.38468       1443.32       1445.71    
   6  0.954430     -0.466410E-01  -3.26760       3.26760       1462.36       1465.63    
   7  0.780674     -0.247598      -17.3463       17.3463       1504.88       1522.23    
   8  0.312863      -1.16199      -81.4073       81.4073       1564.37       1645.78    
   9  0.990226     -0.982218E-02 -0.688127      0.688127       1502.52       1503.21    
  10  0.893872     -0.112193      -7.86003       7.86003       1563.69       1571.55    
  11  0.322320      -1.13221      -79.3208       79.3208       1561.28       1640.60    
  12  0.927465     -0.752997E-01  -5.27538       5.27538       1556.76       1562.04    
  13  0.539466     -0.617176      -43.2384       43.2384       1571.48       1614.72    
  14  0.461474     -0.773330      -54.1783       54.1783       1590.93       1645.11    
  15  0.745701     -0.293430      -20.5573       20.5573       1597.91       1618.47    
  16  0.703580     -0.351573      -24.6307       24.6307       1587.39       1612.02    
  17  0.917420E-01  -2.38878      -167.354       167.354       1466.62       1633.97    
  18  0.671661     -0.398001      -27.8834       27.8834       1597.78       1625.67    
  19  0.845179     -0.168207      -11.7843       11.7843       1609.45       1621.24    
  20  0.283605E-01  -3.56276      -249.601       249.601       1529.84       1779.44    
  21  0.108883E-01  -4.52006      -316.669       316.669       1588.30       1904.97    
  22  0.506006     -0.681208      -47.7243       47.7243       1618.25       1665.97    
  23  0.353918      -1.03869      -72.7691       72.7691       1665.69       1738.46    
  24  0.656862     -0.420282      -29.4443       29.4443       1655.87       1685.32    
  25  0.691560     -0.368806      -25.8379       25.8379       1544.91       1570.74    
  26  0.445402     -0.808779      -56.6618       56.6618       1694.67       1751.34    
  27  0.832700     -0.183081      -12.8264       12.8264       1661.38       1674.20    
  28  0.963063     -0.376360E-01  -2.63672       2.63672       1613.45       1616.09    
  29  0.422212     -0.862247      -60.4077       60.4077       1610.66       1671.07    
  30  0.917895     -0.856720E-01  -6.00204       6.00204       1707.38       1713.38    
  31  0.767210     -0.264994      -18.5651       18.5651       1742.17       1760.73    
  32  0.360836      -1.01933      -71.4127       71.4127       1660.61       1732.02    
  33  0.635930     -0.452667      -31.7131       31.7131       1751.28       1782.99    
  34  0.687292     -0.374995      -26.2716       26.2716       1756.37       1782.65    
  35  0.833832     -0.181724      -12.7313       12.7313       1655.48       1668.21    
  36  0.362075      -1.01590      -71.1727       71.1727       1567.29       1638.46    
  37  0.385764     -0.952530      -66.7328       66.7328       1776.26       1843.00    
  38  0.752556     -0.284279      -19.9162       19.9162       1778.56       1798.47    
  39  0.547433     -0.602515      -42.2112       42.2112       1731.03       1773.24    
  40  0.171004      -1.76607      -123.728       123.728       1672.43       1796.16    
  41  0.159022      -1.83871      -128.817       128.817       1799.18       1928.00    
  42  0.850806     -0.161571      -11.3194       11.3194       1830.81       1842.13    
  43  0.926075     -0.768001E-01  -5.38050       5.38050       1827.20       1832.58    
  44  0.584885     -0.536340      -37.5751       37.5751       1526.77       1564.35    
  45  0.547650     -0.602120      -42.1836       42.1836       1852.37       1894.55    
  46  0.864296     -0.145840      -10.2173       10.2173       1843.54       1853.76    
  47  0.384639     -0.955450      -66.9373       66.9373       1758.77       1825.71    
  48  0.359776      -1.02227      -71.6190       71.6190       1747.61       1819.23    
  49  0.147032      -1.91711      -134.310       134.310       1924.84       2059.15    
  50  0.649806     -0.431082      -30.2009       30.2009       1840.65       1870.85    
  51  0.909946     -0.943695E-01  -6.61138       6.61138       1489.63       1496.24    
loop,thermsimp(1:2)       30   129.466       41.4771    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    231       1926.56          0.87          1.11         21.97          0.14          0.05         24.14
Just calling func    0   0         24.14


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1926.56
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    70.0584               251
loop is:       30
neval is:      230
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       30      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    560.467      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    70.0584               251
loop is:       31
neval is:      230


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      251
neval,tstepnext:      230     251

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.277512      -1.28189      -89.8072       89.8072       1305.70       1395.50    
   2  0.202445      -1.59728      -111.903       111.903       1443.32       1555.23    
   3  0.927152     -0.756373E-01  -5.29903       5.29903       1442.39       1447.69    
   4  0.403144     -0.908460      -63.6453       63.6453       1462.36       1526.01    
   5  0.791838     -0.233398      -16.3515       16.3515       1449.71       1466.06    
   6  0.292576      -1.22903      -86.1039       86.1039       1439.46       1525.56    
   7  0.135578      -1.99821      -139.991       139.991       1489.63       1629.62    
   8  0.516570     -0.660545      -46.2768       46.2768       1502.52       1548.80    
   9  0.730579     -0.313918      -21.9926       21.9926       1504.88       1526.88    
  10  0.508248     -0.676786      -47.4146       47.4146       1556.76       1604.18    
  11  0.928455     -0.742338E-01  -5.20070       5.20070       1526.77       1531.97    
  12  0.696477     -0.361721      -25.3416       25.3416       1544.91       1570.25    
  13  0.465556     -0.764522      -53.5612       53.5612       1563.69       1617.25    
  14  0.194653      -1.63654      -114.653       114.653       1587.39       1702.04    
  15  0.650312     -0.430303      -30.1464       30.1464       1571.48       1601.63    
  16  0.555802     -0.587343      -41.1483       41.1483       1613.45       1654.60    
  17  0.985517     -0.145893E-01  -1.02210       1.02210       1597.91       1598.94    
  18  0.923066     -0.800544E-01  -5.60848       5.60848       1609.45       1615.06    
  19  0.658765     -0.417388      -29.2415       29.2415       1597.78       1627.03    
  20  0.197878      -1.62010      -113.502       113.502       1466.62       1580.12    
  21  0.449673     -0.799236      -55.9932       55.9932       1567.29       1623.28    
  22  0.208093      -1.56977      -109.976       109.976       1561.28       1671.26    
  23  0.102791      -2.27506      -159.387       159.387       1590.93       1750.31    
  24  0.650538     -0.429955      -30.1220       30.1220       1564.37       1594.49    
  25  0.223365      -1.49895      -105.014       105.014       1618.25       1723.26    
  26  0.520729     -0.652525      -45.7149       45.7149       1655.48       1701.19    
  27  0.919707E-01  -2.38629      -167.179       167.179       1610.66       1777.84    
  28  0.788427     -0.237716      -16.6540       16.6540       1661.38       1678.03    
  29  0.395754     -0.926961      -64.9415       64.9415       1655.87       1720.81    
  30  0.903388     -0.101603      -7.11817       7.11817       1707.38       1714.50    
  31  0.569415     -0.563145      -39.4531       39.4531       1660.61       1700.06    
  32  0.974677     -0.256496E-01  -1.79697       1.79697       1665.69       1667.49    
  33  0.376411     -0.977073      -68.4522       68.4522       1694.67       1763.13    
  34  0.309090      -1.17412      -82.2573       82.2573       1742.17       1824.43    
  35  0.248039      -1.39417      -97.6735       97.6735       1731.03       1828.70    
  36  0.941329     -0.604621E-01  -4.23588       4.23588       1529.84       1534.08    
  37  0.131879      -2.02587      -141.930       141.930       1756.37       1898.30    
  38  0.188022      -1.67120      -117.082       117.082       1751.28       1868.36    
  39  0.898649E-01  -2.40945      -168.802       168.802       1672.43       1841.23    
  40  0.853893     -0.157949      -11.0657       11.0657       1778.56       1789.62    
  41  0.643577     -0.440714      -30.8757       30.8757       1747.61       1778.48    
  42  0.664391     -0.408885      -28.6458       28.6458       1758.77       1787.42    
  43  0.825262     -0.192054      -13.4550       13.4550       1827.20       1840.66    
  44  0.611498     -0.491843      -34.4578       34.4578       1830.81       1865.27    
  45  0.284000      -1.25878      -88.1881       88.1881       1776.26       1864.45    
  46  0.108174      -2.22402      -155.811       155.811       1843.54       1999.35    
  47  0.293070      -1.22734      -85.9858       85.9858       1840.65       1926.64    
  48  0.412045     -0.886623      -62.1154       62.1154       1852.37       1914.49    
  49  0.464041     -0.767783      -53.7897       53.7897       1588.30       1642.09    
  50  0.711768     -0.340003      -23.8201       23.8201       1799.18       1823.00    
  51  0.919970     -0.834138E-01  -5.84384       5.84384       1926.56       1932.41    
loop,thermsimp(1:2)       31   89.8072       111.903    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    232       1497.52          0.87          1.11         21.99          0.15          0.05         24.16
Just calling func    0   0         24.16


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1497.52
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    70.0584               251
loop is:       31
neval is:      231
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       31      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    560.467      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    70.0584               251
loop is:       32
neval is:      231


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      251
neval,tstepnext:      231     251

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.701343     -0.354759      -24.8538       24.8538       1305.70       1330.55    
   2  0.779682     -0.248869      -17.4354       17.4354       1442.39       1459.82    
   3  0.611645     -0.491604      -34.4410       34.4410       1449.71       1484.15    
   4  0.380626     -0.965937      -67.6720       67.6720       1439.46       1507.13    
   5  0.986599     -0.134915E-01 -0.945192      0.945192       1462.36       1463.30    
   6  0.699021     -0.358075      -25.0861       25.0861       1504.88       1529.97    
   7  0.981217E-01  -2.32155      -162.644       162.644       1526.77       1689.42    
   8  0.221199      -1.50869      -105.697       105.697       1529.84       1635.54    
   9  0.802460     -0.220073      -15.4180       15.4180       1502.52       1517.94    
  10  0.623430     -0.472519      -33.1039       33.1039       1443.32       1476.43    
  11  0.669862     -0.400684      -28.0713       28.0713       1544.91       1572.98    
  12  0.957999     -0.429090E-01  -3.00614       3.00614       1466.62       1469.63    
  13  0.569879E-01  -2.86492      -200.712       200.712       1564.37       1765.08    
  14  0.245244      -1.40550      -98.4672       98.4672       1597.91       1696.38    
  15  0.870123     -0.139121      -9.74659       9.74659       1571.48       1581.23    
  16  0.429679     -0.844716      -59.1795       59.1795       1556.76       1615.94    
  17  0.369880     -0.994577      -69.6785       69.6785       1609.45       1679.13    
  18  0.964882     -0.357490E-01  -2.50452       2.50452       1563.69       1566.19    
  19  0.625983     -0.468432      -32.8176       32.8176       1567.29       1600.10    
  20  0.508652     -0.675991      -47.3588       47.3588       1597.78       1645.14    
  21  0.694697     -0.364279      -25.5208       25.5208       1489.63       1515.15    
  22  0.817819     -0.201114      -14.0897       14.0897       1588.30       1602.39    
  23  0.655732     -0.422003      -29.5649       29.5649       1613.45       1643.02    
  24  0.658757     -0.417401      -29.2424       29.2424       1665.69       1694.93    
  25  0.325934      -1.12106      -78.5397       78.5397       1561.28       1639.82    
  26  0.849137     -0.163535      -11.4570       11.4570       1661.38       1672.83    
  27  0.953435     -0.476843E-01  -3.34069       3.34069       1660.61       1663.95    
  28  0.435049     -0.832297      -58.3094       58.3094       1655.48       1713.79    
  29  0.155341E-01  -4.16472      -291.774       291.774       1587.39       1879.16    
  30  0.390095     -0.941364      -65.9505       65.9505       1707.38       1773.33    
  31  0.400867E-02  -5.51929      -386.673       386.673       1655.87       2042.55    
  32  0.989750     -0.103025E-01 -0.721778      0.721778       1618.25       1618.97    
  33  0.194149      -1.63913      -114.835       114.835       1590.93       1705.76    
  34  0.573547     -0.555915      -38.9465       38.9465       1694.67       1733.62    
  35  0.570216     -0.561740      -39.3546       39.3546       1610.66       1650.01    
  36  0.802122     -0.220494      -15.4475       15.4475       1747.61       1763.05    
  37  0.831214E-01  -2.48745      -174.267       174.267       1758.77       1933.04    
  38  0.280368      -1.27165      -89.0899       89.0899       1778.56       1867.65    
  39  0.568263     -0.565171      -39.5950       39.5950       1799.18       1838.78    
  40  0.570544     -0.561165      -39.3143       39.3143       1742.17       1781.48    
  41  0.524202     -0.645877      -45.2491       45.2491       1731.03       1776.28    
  42  0.625335E-01  -2.77205      -194.206       194.206       1827.20       2021.41    
  43  0.717146     -0.332476      -23.2928       23.2928       1672.43       1695.72    
  44  0.234175      -1.45169      -101.703       101.703       1776.26       1877.97    
  45  0.366320      -1.00425      -70.3561       70.3561       1830.81       1901.17    
  46  0.458915     -0.778891      -54.5679       54.5679       1751.28       1805.85    
  47  0.379536     -0.968806      -67.8731       67.8731       1756.37       1824.25    
  48  0.854466     -0.157278      -11.0187       11.0187       1852.37       1863.39    
  49  0.452738E-01  -3.09503      -216.833       216.833       1840.65       2057.49    
  50  0.966525     -0.340477E-01  -2.38533       2.38533       1926.56       1928.95    
  51  0.400949     -0.913920      -64.0278       64.0278       1497.52       1561.54    
loop,thermsimp(1:2)       32   24.8538       17.4354    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    233       1440.10          0.88          1.11         21.95          0.16          0.05         24.14
Just calling func    0   0         24.14


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1440.10
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    70.0584               251
loop is:       32
neval is:      232
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       32      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    560.467      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    70.0584               251
loop is:       33
neval is:      232


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      251
neval,tstepnext:      232     251

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.403971     -0.906412      -63.5018       63.5018       1305.70       1369.20    
   2  0.598662     -0.513057      -35.9440       35.9440       1442.39       1478.33    
   3  0.165178      -1.80073      -126.156       126.156       1462.36       1588.52    
   4  0.785331     -0.241651      -16.9297       16.9297       1466.62       1483.55    
   5  0.422061     -0.862604      -60.4327       60.4327       1443.32       1503.76    
   6  0.343624      -1.06821      -74.8368       74.8368       1449.71       1524.54    
   7  0.988862     -0.112001E-01 -0.784661      0.784661       1439.46       1440.24    
   8  0.586093E-01  -2.83686      -198.746       198.746       1489.63       1688.38    
   9  0.324880      -1.12430      -78.7667       78.7667       1502.52       1581.29    
  10  0.869373     -0.139983      -9.80699       9.80699       1504.88       1514.69    
  11  0.314362      -1.15721      -81.0722       81.0722       1497.52       1578.59    
  12  0.635265     -0.453712      -31.7864       31.7864       1563.69       1595.47    
  13  0.800738     -0.222221      -15.5685       15.5685       1544.91       1560.48    
  14  0.234515      -1.45024      -101.601       101.601       1571.48       1673.08    
  15  0.818766     -0.199957      -14.0087       14.0087       1567.29       1581.30    
  16  0.480807     -0.732289      -51.3030       51.3030       1588.30       1639.60    
  17  0.173083      -1.75398      -122.881       122.881       1556.76       1679.65    
  18  0.544835     -0.607272      -42.5445       42.5445       1618.25       1660.79    
  19  0.955728     -0.452816E-01  -3.17236       3.17236       1529.84       1533.01    
  20  0.909631     -0.947157E-01  -6.63564       6.63564       1561.28       1567.92    
  21  0.538276     -0.619384      -43.3930       43.3930       1613.45       1656.85    
  22  0.640373     -0.445705      -31.2254       31.2254       1597.78       1629.01    
  23  0.588429     -0.530300      -37.1520       37.1520       1610.66       1647.81    
  24  0.954392     -0.466804E-01  -3.27035       3.27035       1660.61       1663.88    
  25  0.976738     -0.235363E-01  -1.64892       1.64892       1661.38       1663.02    
  26  0.801897     -0.220775      -15.4672       15.4672       1609.45       1624.92    
  27  0.679499     -0.386400      -27.0706       27.0706       1526.77       1553.84    
  28  0.303686      -1.19176      -83.4930       83.4930       1665.69       1749.18    
  29  0.907562     -0.969936E-01  -6.79522       6.79522       1672.43       1679.23    
  30  0.117971E-01  -4.43990      -311.053       311.053       1597.91       1908.97    
  31  0.324683      -1.12491      -78.8092       78.8092       1590.93       1669.74    
  32  0.662106     -0.412329      -28.8872       28.8872       1655.48       1684.37    
  33  0.334080      -1.09637      -76.8103       76.8103       1694.67       1771.48    
  34  0.307577      -1.17903      -82.6010       82.6010       1747.61       1830.21    
  35  0.539029     -0.617986      -43.2952       43.2952       1564.37       1607.66    
  36  0.822737     -0.195119      -13.6697       13.6697       1707.38       1721.05    
  37  0.973480     -0.268776E-01  -1.88301       1.88301       1731.03       1732.91    
  38  0.918970     -0.845018E-01  -5.92006       5.92006       1742.17       1748.09    
  39  0.203072      -1.59419      -111.687       111.687       1751.28       1862.97    
  40  0.467655     -0.760024      -53.2461       53.2461       1756.37       1809.62    
  41  0.323145      -1.12965      -79.1417       79.1417       1799.18       1878.32    
  42  0.505961     -0.681295      -47.7305       47.7305       1852.37       1900.10    
  43  0.699853E-01  -2.65947      -186.318       186.318       1778.56       1964.87    
  44  0.188263      -1.66991      -116.992       116.992       1776.26       1893.25    
  45  0.663178     -0.410711      -28.7738       28.7738       1587.39       1616.16    
  46  0.680233     -0.385320      -26.9949       26.9949       1830.81       1857.81    
  47  0.717812     -0.331548      -23.2277       23.2277       1926.56       1949.79    
  48  0.319374      -1.14139      -79.9642       79.9642       1758.77       1838.74    
  49  0.667076     -0.404851      -28.3632       28.3632       1827.20       1855.57    
  50  0.755360     -0.280560      -19.6556       19.6556       1655.87       1675.53    
  51  0.105804      -2.24617      -157.363       157.363       1440.10       1597.46    
loop,thermsimp(1:2)       33   63.5018       35.9440    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    234       1769.53          0.88          1.11         21.95          0.15          0.04         24.13
Just calling func    0   0         24.14


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1769.53
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    70.0584               251
loop is:       33
neval is:      233
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       33      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    560.467      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    70.0584               251
loop is:       34
neval is:      233


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      251
neval,tstepnext:      233     251

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.228924      -1.47437      -103.292       103.292       1305.70       1408.99    
   2  0.299376      -1.20605      -84.4943       84.4943       1439.46       1523.95    
   3  0.220114      -1.51361      -106.041       106.041       1442.39       1548.43    
   4  0.229209      -1.47312      -103.205       103.205       1466.62       1569.83    
   5  0.902477     -0.102612      -7.18887       7.18887       1443.32       1450.51    
   6  0.659052     -0.416953      -29.2111       29.2111       1504.88       1534.10    
   7  0.100321E-01  -4.60197      -322.407       322.407       1449.71       1772.11    
   8  0.588837     -0.529606      -37.1033       37.1033       1529.84       1566.95    
   9  0.270943      -1.30585      -91.4857       91.4857       1526.77       1618.26    
  10  0.505518     -0.682171      -47.7919       47.7919       1544.91       1592.70    
  11  0.264565      -1.32967      -93.1546       93.1546       1561.28       1654.43    
  12  0.806386     -0.215193      -15.0761       15.0761       1497.52       1512.59    
  13  0.340560      -1.07716      -75.4644       75.4644       1502.52       1577.99    
  14  0.906186     -0.985106E-01  -6.90149       6.90149       1567.29       1574.19    
  15  0.786070     -0.240709      -16.8637       16.8637       1462.36       1479.22    
  16  0.540508     -0.615247      -43.1032       43.1032       1563.69       1606.79    
  17  0.935065     -0.671392E-01  -4.70367       4.70367       1440.10       1444.80    
  18  0.915359     -0.884391E-01  -6.19591       6.19591       1564.37       1570.56    
  19  0.958261     -0.426353E-01  -2.98696       2.98696       1587.39       1590.37    
  20  0.935110     -0.670907E-01  -4.70027       4.70027       1609.45       1614.15    
  21  0.637755     -0.449800      -31.5123       31.5123       1597.78       1629.30    
  22  0.975714     -0.245861E-01  -1.72247       1.72247       1588.30       1590.02    
  23  0.797424     -0.226369      -15.8591       15.8591       1610.66       1626.52    
  24  0.214179      -1.54094      -107.956       107.956       1613.45       1721.41    
  25  0.372145     -0.988472      -69.2508       69.2508       1618.25       1687.50    
  26  0.925208     -0.777367E-01  -5.44611       5.44611       1661.38       1666.82    
  27  0.175897      -1.73786      -121.751       121.751       1660.61       1782.36    
  28  0.952033     -0.491554E-01  -3.44375       3.44375       1590.93       1594.37    
  29  0.158274E-01  -4.14601      -290.463       290.463       1571.48       1861.95    
  30  0.799308     -0.224008      -15.6937       15.6937       1655.87       1671.57    
  31  0.248227      -1.39341      -97.6202       97.6202       1672.43       1770.05    
  32  0.244914      -1.40685      -98.5615       98.5615       1556.76       1655.33    
  33  0.390842     -0.939452      -65.8165       65.8165       1655.48       1721.30    
  34  0.146784      -1.91879      -134.428       134.428       1489.63       1624.06    
  35  0.500975     -0.691199      -48.4243       48.4243       1707.38       1755.80    
  36  0.480131E-01  -3.03628      -212.717       212.717       1731.03       1943.75    
  37  0.124503      -2.08343      -145.962       145.962       1742.17       1888.13    
  38  0.670304     -0.400024      -28.0251       28.0251       1665.69       1693.71    
  39  0.997449     -0.255468E-02 -0.178977      0.178977       1694.67       1694.85    
  40  0.681761     -0.383076      -26.8377       26.8377       1756.37       1783.21    
  41  0.440529     -0.819778      -57.4324       57.4324       1747.61       1805.04    
  42  0.342489      -1.07152      -75.0688       75.0688       1758.77       1833.84    
  43  0.735753     -0.306861      -21.4982       21.4982       1827.20       1848.70    
  44  0.614752     -0.486537      -34.0860       34.0860       1830.81       1864.90    
  45  0.351660      -1.04509      -73.2174       73.2174       1751.28       1824.50    
  46  0.777165     -0.252103      -17.6619       17.6619       1799.18       1816.84    
  47  0.392618     -0.934919      -65.4989       65.4989       1776.26       1841.76    
  48  0.385647     -0.952832      -66.7539       66.7539       1852.37       1919.13    
  49  0.834392     -0.181052      -12.6843       12.6843       1597.91       1610.60    
  50  0.469158     -0.756815      -53.0213       53.0213       1926.56       1979.59    
  51  0.697320     -0.360511      -25.2568       25.2568       1769.53       1794.78    
loop,thermsimp(1:2)       34   103.292       84.4943    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    235       1878.78          0.87          1.11         22.09          0.12          0.05         24.25
Just calling func    0   0         24.25


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1878.78
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    70.0584               251
loop is:       34
neval is:      234
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       34      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    560.467      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    70.0584               251
loop is:       35
neval is:      234


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      251
neval,tstepnext:      234     251

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.347237      -1.05775      -74.1042       74.1042       1305.70       1379.80    
   2  0.621479     -0.475653      -33.3235       33.3235       1440.10       1473.42    
   3  0.221273      -1.50836      -105.673       105.673       1443.32       1549.00    
   4  0.180626E-01  -4.01391      -281.209       281.209       1462.36       1743.57    
   5  0.216093      -1.53205      -107.333       107.333       1497.52       1604.85    
   6  0.351343      -1.04599      -73.2805       73.2805       1439.46       1512.74    
   7  0.360847      -1.01930      -71.4107       71.4107       1504.88       1576.30    
   8  0.439525     -0.822061      -57.5923       57.5923       1442.39       1499.98    
   9  0.910616E-01  -2.39622      -167.875       167.875       1529.84       1697.72    
  10  0.549745     -0.598300      -41.9160       41.9160       1466.62       1508.54    
  11  0.619825     -0.478318      -33.5102       33.5102       1564.37       1597.88    
  12  0.548169E-01  -2.90376      -203.433       203.433       1567.29       1770.72    
  13  0.947163     -0.542842E-01  -3.80307       3.80307       1502.52       1506.33    
  14  0.725459     -0.320951      -22.4853       22.4853       1588.30       1610.78    
  15  0.481613     -0.730615      -51.1857       51.1857       1587.39       1638.57    
  16  0.866286     -0.143540      -10.0562       10.0562       1544.91       1554.96    
  17  0.221988E-01  -3.80772      -266.763       266.763       1590.93       1857.69    
  18  0.980823     -0.193630E-01  -1.35654       1.35654       1563.69       1565.04    
  19  0.332549      -1.10097      -77.1321       77.1321       1597.91       1675.05    
  20  0.989035     -0.110256E-01 -0.772436      0.772436       1609.45       1610.23    
  21  0.364016      -1.01056      -70.7980       70.7980       1526.77       1597.57    
  22  0.861799     -0.148733      -10.4200       10.4200       1489.63       1500.05    
  23  0.622306     -0.474324      -33.2304       33.2304       1610.66       1643.89    
  24  0.575476     -0.552558      -38.7113       38.7113       1597.78       1636.50    
  25  0.205536      -1.58213      -110.842       110.842       1561.28       1672.12    
  26  0.124037      -2.08718      -146.224       146.224       1556.76       1702.99    
  27  0.467008     -0.761408      -53.3431       53.3431       1661.38       1714.72    
  28  0.273870      -1.29510      -90.7328       90.7328       1655.87       1746.61    
  29  0.842780     -0.171050      -11.9835       11.9835       1618.25       1630.23    
  30  0.709315     -0.343455      -24.0619       24.0619       1665.69       1689.75    
  31  0.677144     -0.389871      -27.3137       27.3137       1694.67       1721.99    
  32  0.656062     -0.421500      -29.5297       29.5297       1655.48       1685.01    
  33  0.721592     -0.326295      -22.8597       22.8597       1613.45       1636.31    
  34  0.120172      -2.11883      -148.442       148.442       1707.38       1855.82    
  35  0.832403     -0.183439      -12.8514       12.8514       1672.43       1685.28    
  36  0.607577     -0.498276      -34.9084       34.9084       1449.71       1484.62    
  37  0.169814      -1.77305      -124.217       124.217       1660.61       1784.83    
  38  0.578085     -0.548034      -38.3944       38.3944       1756.37       1794.77    
  39  0.201144      -1.60373      -112.355       112.355       1769.53       1881.88    
  40  0.922823     -0.803178E-01  -5.62694       5.62694       1747.61       1753.23    
  41  0.136644      -1.99038      -139.443       139.443       1799.18       1938.62    
  42  0.836366     -0.178689      -12.5186       12.5186       1751.28       1763.80    
  43  0.590669     -0.526499      -36.8857       36.8857       1758.77       1795.66    
  44  0.745946     -0.293102      -20.5343       20.5343       1776.26       1796.80    
  45  0.874736     -0.133833      -9.37613       9.37613       1827.20       1836.58    
  46  0.370232     -0.993625      -69.6118       69.6118       1571.48       1641.09    
  47  0.832293     -0.183570      -12.8607       12.8607       1830.81       1843.68    
  48  0.351566      -1.04536      -73.2362       73.2362       1742.17       1815.41    
  49  0.705870     -0.348324      -24.4030       24.4030       1852.37       1876.77    
  50  0.323816      -1.12758      -78.9965       78.9965       1731.03       1810.03    
  51  0.197269      -1.62319      -113.718       113.718       1878.78       1992.50    
loop,thermsimp(1:2)       35   74.1042       33.3235    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    236       1926.56          0.87          1.11         22.02          0.11          0.05         24.16
Just calling func    0   0         24.16


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1926.56
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    70.0584               251
loop is:       35
neval is:      235
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       35      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    560.467      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    70.0584               251
loop is:       36
neval is:      235


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      251
neval,tstepnext:      235     251

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.233712      -1.45367      -101.842       101.842       1305.70       1407.54    
   2  0.607568     -0.498291      -34.9095       34.9095       1440.10       1475.01    
   3  0.905785     -0.989529E-01  -6.93249       6.93249       1449.71       1456.64    
   4  0.995938E-01  -2.30666      -161.601       161.601       1442.39       1603.99    
   5  0.851360     -0.160920      -11.2738       11.2738       1489.63       1500.91    
   6  0.730583     -0.313913      -21.9923       21.9923       1502.52       1524.51    
   7  0.426216     -0.852810      -59.7465       59.7465       1466.62       1526.37    
   8  0.285108      -1.25489      -87.9155       87.9155       1439.46       1527.38    
   9  0.839246     -0.175251      -12.2778       12.2778       1443.32       1455.60    
  10  0.217639      -1.52492      -106.833       106.833       1544.91       1651.74    
  11  0.183996E-02  -6.29801      -441.229       441.229       1563.69       2004.92    
  12  0.682631     -0.381801      -26.7484       26.7484       1504.88       1531.63    
  13  0.203596      -1.59162      -111.506       111.506       1526.77       1638.28    
  14  0.881164     -0.126512      -8.86324       8.86324       1564.37       1573.23    
  15  0.711431     -0.340477      -23.8533       23.8533       1497.52       1521.37    
  16  0.874326     -0.134302      -9.40898       9.40898       1609.45       1618.86    
  17  0.814222     -0.205523      -14.3986       14.3986       1588.30       1602.70    
  18  0.995668     -0.434126E-02 -0.304142      0.304142       1618.25       1618.55    
  19  0.693805     -0.365564      -25.6109       25.6109       1613.45       1639.06    
  20  0.958584     -0.422984E-01  -2.96336       2.96336       1597.78       1600.75    
  21  0.748022     -0.290323      -20.3396       20.3396       1587.39       1607.73    
  22  0.696703     -0.361396      -25.3189       25.3189       1571.48       1596.80    
  23  0.732990     -0.310623      -21.7618       21.7618       1610.66       1632.42    
  24  0.534749     -0.625958      -43.8536       43.8536       1561.28       1605.13    
  25  0.691641     -0.368688      -25.8297       25.8297       1597.91       1623.74    
  26  0.300458      -1.20245      -84.2416       84.2416       1655.48       1739.72    
  27  0.977116     -0.231502E-01  -1.62187       1.62187       1672.43       1674.05    
  28  0.542581     -0.611418      -42.8350       42.8350       1665.69       1708.52    
  29  0.266111      -1.32384      -92.7462       92.7462       1529.84       1622.59    
  30  0.692298     -0.367738      -25.7632       25.7632       1556.76       1582.53    
  31  0.664047     -0.409403      -28.6821       28.6821       1661.38       1690.06    
  32  0.542186     -0.612146      -42.8860       42.8860       1694.67       1737.56    
  33  0.362243      -1.01544      -71.1400       71.1400       1462.36       1533.50    
  34  0.578658     -0.547044      -38.3250       38.3250       1655.87       1694.20    
  35  0.489298     -0.714783      -50.0766       50.0766       1747.61       1797.68    
  36  0.617485     -0.482100      -33.7752       33.7752       1751.28       1785.06    
  37  0.368651     -0.997905      -69.9117       69.9117       1567.29       1637.20    
  38  0.198936      -1.61477      -113.128       113.128       1660.61       1773.74    
  39  0.505263     -0.682676      -47.8272       47.8272       1756.37       1804.20    
  40  0.983997     -0.161325E-01  -1.13022       1.13022       1758.77       1759.90    
  41  0.630553     -0.461159      -32.3081       32.3081       1776.26       1808.57    
  42  0.423821E-01  -3.16103      -221.457       221.457       1731.03       1952.49    
  43  0.488935     -0.715526      -50.1287       50.1287       1742.17       1792.30    
  44  0.402078     -0.911110      -63.8310       63.8310       1827.20       1891.03    
  45  0.380878     -0.965277      -67.6258       67.6258       1830.81       1898.44    
  46  0.260585E-01  -3.64741      -255.532       255.532       1707.38       1962.91    
  47  0.681660     -0.383224      -26.8481       26.8481       1590.93       1617.78    
  48  0.489074     -0.715241      -50.1086       50.1086       1852.37       1902.48    
  49  0.752363     -0.284536      -19.9342       19.9342       1769.53       1789.46    
  50  0.978934     -0.212911E-01  -1.49162       1.49162       1799.18       1800.67    
  51  0.297789      -1.21137      -84.8668       84.8668       1926.56       2011.43    
loop,thermsimp(1:2)       36   101.842       34.9095    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    237       1878.78          0.87          1.11         22.00          0.12          0.05         24.15
Just calling func    0   0         24.15


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1878.78
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    70.0584               251
loop is:       36
neval is:      236
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       36      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    560.467      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    70.0584               251
loop is:       37
neval is:      236


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      251
neval,tstepnext:      236     251

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.411300     -0.888432      -62.2422       62.2422       1305.70       1367.94    
   2  0.697205     -0.360676      -25.2684       25.2684       1443.32       1468.59    
   3  0.314648E-01  -3.45889      -242.324       242.324       1449.71       1692.03    
   4  0.857269     -0.154003      -10.7892       10.7892       1440.10       1450.88    
   5  0.652165     -0.427457      -29.9470       29.9470       1489.63       1519.58    
   6  0.510145     -0.673060      -47.1535       47.1535       1497.52       1544.67    
   7  0.175175      -1.74197      -122.040       122.040       1502.52       1624.56    
   8  0.373803     -0.984025      -68.9393       68.9393       1466.62       1535.56    
   9  0.514972     -0.663642      -46.4937       46.4937       1439.46       1485.95    
  10  0.548235     -0.601051      -42.1087       42.1087       1504.88       1546.99    
  11  0.541310     -0.613763      -42.9993       42.9993       1462.36       1505.36    
  12  0.734083     -0.309133      -21.6573       21.6573       1564.37       1586.03    
  13  0.422599     -0.861332      -60.3436       60.3436       1556.76       1617.11    
  14  0.287055      -1.24808      -87.4386       87.4386       1571.48       1658.92    
  15  0.885133     -0.122017      -8.54833       8.54833       1597.78       1606.33    
  16  0.391075     -0.938857      -65.7749       65.7749       1588.30       1654.07    
  17  0.473784     -0.747003      -52.3339       52.3339       1442.39       1494.72    
  18  0.691812     -0.368440      -25.8124       25.8124       1561.28       1587.09    
  19  0.644447     -0.439363      -30.7811       30.7811       1587.39       1618.17    
  20  0.805933     -0.215754      -15.1154       15.1154       1590.93       1606.04    
  21  0.393766     -0.931998      -65.2944       65.2944       1618.25       1683.54    
  22  0.907098E-01  -2.40009      -168.147       168.147       1609.45       1777.60    
  23  0.376515     -0.976796      -68.4328       68.4328       1529.84       1598.27    
  24  0.819190     -0.199439      -13.9724       13.9724       1597.91       1611.89    
  25  0.692438     -0.367536      -25.7490       25.7490       1610.66       1636.41    
  26  0.188370      -1.66935      -116.952       116.952       1567.29       1684.24    
  27  0.500532     -0.692083      -48.4863       48.4863       1526.77       1575.26    
  28  0.282311      -1.26475      -88.6062       88.6062       1613.45       1702.06    
  29  0.338061      -1.08453      -75.9803       75.9803       1544.91       1620.89    
  30  0.466208     -0.763123      -53.4632       53.4632       1672.43       1725.89    
  31  0.893084     -0.113075      -7.92184       7.92184       1661.38       1669.30    
  32  0.818806     -0.199908      -14.0053       14.0053       1655.87       1669.88    
  33  0.585066     -0.536031      -37.5535       37.5535       1665.69       1703.24    
  34  0.527412     -0.639774      -44.8216       44.8216       1694.67       1739.50    
  35  0.994295     -0.572143E-02 -0.400834      0.400834       1655.48       1655.88    
  36  0.739278     -0.302082      -21.1634       21.1634       1758.77       1779.94    
  37  0.230995      -1.46536      -102.661       102.661       1660.61       1763.27    
  38  0.414929     -0.879648      -61.6267       61.6267       1751.28       1812.91    
  39  0.378446     -0.971682      -68.0745       68.0745       1769.53       1837.60    
  40  0.368620     -0.997990      -69.9176       69.9176       1742.17       1812.09    
  41  0.301312      -1.19961      -84.0426       84.0426       1747.61       1831.65    
  42  0.105882E-01  -4.54801      -318.627       318.627       1799.18       2117.81    
  43  0.481885     -0.730049      -51.1461       51.1461       1756.37       1807.52    
  44  0.446716     -0.805833      -56.4554       56.4554       1776.26       1832.72    
  45  0.482098     -0.729608      -51.1152       51.1152       1827.20       1878.32    
  46  0.278892      -1.27693      -89.4598       89.4598       1830.81       1920.27    
  47  0.756484     -0.279074      -19.5515       19.5515       1852.37       1871.92    
  48  0.662766     -0.411334      -28.8174       28.8174       1731.03       1759.85    
  49  0.433861E-01  -3.13762      -219.816       219.816       1707.38       1927.19    
  50  0.825649E-02  -4.79676      -336.053       336.053       1563.69       1899.74    
  51  0.476679     -0.740911      -51.9071       51.9071       1878.78       1930.69    
loop,thermsimp(1:2)       37   62.2422       25.2684    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    238       1460.12          0.87          1.11         21.94          0.18          0.05         24.13
Just calling func    0   0         24.13


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1460.12
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    70.0584               251
loop is:       37
neval is:      237
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       37      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    560.467      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    70.0584               251
loop is:       38
neval is:      237


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      251
neval,tstepnext:      237     251

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.408852     -0.894401      -62.6604       62.6604       1305.70       1368.36    
   2  0.259700      -1.34823      -94.4547       94.4547       1440.10       1534.55    
   3  0.681144E-01  -2.68657      -188.217       188.217       1443.32       1631.54    
   4  0.158140      -1.84427      -129.207       129.207       1439.46       1568.67    
   5  0.497681     -0.697796      -48.8865       48.8865       1442.39       1491.28    
   6  0.800218     -0.222871      -15.6140       15.6140       1462.36       1477.97    
   7  0.831967     -0.183962      -12.8881       12.8881       1489.63       1502.52    
   8  0.707345     -0.346237      -24.2568       24.2568       1466.62       1490.88    
   9  0.265927      -1.32454      -92.7949       92.7949       1497.52       1590.31    
  10  0.659046     -0.416962      -29.2117       29.2117       1504.88       1534.10    
  11  0.654587E-01  -2.72634      -191.003       191.003       1526.77       1717.77    
  12  0.223329      -1.49911      -105.025       105.025       1564.37       1669.39    
  13  0.996019     -0.398855E-02 -0.279432      0.279432       1561.28       1561.56    
  14  0.553910     -0.590753      -41.3872       41.3872       1529.84       1571.23    
  15  0.218863      -1.51931      -106.440       106.440       1590.93       1697.37    
  16  0.414020     -0.881841      -61.7804       61.7804       1597.78       1659.57    
  17  0.229117      -1.47352      -103.233       103.233       1597.91       1701.15    
  18  0.341764      -1.07363      -75.2172       75.2172       1556.76       1631.98    
  19  0.357052      -1.02987      -72.1513       72.1513       1587.39       1659.54    
  20  0.780779     -0.247463      -17.3369       17.3369       1544.91       1562.24    
  21  0.382234     -0.961721      -67.3767       67.3767       1502.52       1569.90    
  22  0.123899      -2.08829      -146.302       146.302       1610.66       1756.96    
  23  0.393312     -0.933152      -65.3752       65.3752       1588.30       1653.67    
  24  0.481741     -0.730349      -51.1671       51.1671       1655.48       1706.65    
  25  0.120001      -2.12026      -148.542       148.542       1571.48       1720.02    
  26  0.506023     -0.681173      -47.7219       47.7219       1661.38       1709.10    
  27  0.891157     -0.115235      -8.07320       8.07320       1655.87       1663.95    
  28  0.584674     -0.536701      -37.6005       37.6005       1618.25       1655.85    
  29  0.313196      -1.16093      -81.3326       81.3326       1567.29       1648.62    
  30  0.507340     -0.678574      -47.5399       47.5399       1449.71       1497.25    
  31  0.985030     -0.150835E-01  -1.05673       1.05673       1613.45       1614.51    
  32  0.186570      -1.67895      -117.624       117.624       1665.69       1783.31    
  33  0.992622     -0.740493E-02 -0.518778      0.518778       1672.43       1672.95    
  34  0.344152      -1.06667      -74.7293       74.7293       1694.67       1769.40    
  35  0.327214      -1.11714      -78.2652       78.2652       1731.03       1809.29    
  36  0.722008     -0.325719      -22.8194       22.8194       1660.61       1683.43    
  37  0.471441     -0.751960      -52.6812       52.6812       1609.45       1662.13    
  38  0.483594     -0.726510      -50.8981       50.8981       1758.77       1809.67    
  39  0.799410     -0.223881      -15.6847       15.6847       1756.37       1772.06    
  40  0.864070     -0.146101      -10.2356       10.2356       1742.17       1752.40    
  41  0.326419      -1.11957      -78.4356       78.4356       1751.28       1829.72    
  42  0.970166E-01  -2.33287      -163.437       163.437       1747.61       1911.04    
  43  0.822479     -0.195432      -13.6917       13.6917       1776.26       1789.95    
  44  0.719858     -0.328701      -23.0283       23.0283       1769.53       1792.55    
  45  0.359763      -1.02231      -71.6215       71.6215       1852.37       1923.99    
  46  0.879180     -0.128765      -9.02111       9.02111       1827.20       1836.23    
  47  0.152514      -1.88050      -131.745       131.745       1563.69       1695.43    
  48  0.379430     -0.969085      -67.8926       67.8926       1830.81       1898.71    
  49  0.444703     -0.810349      -56.7718       56.7718       1707.38       1764.15    
  50  0.240485      -1.42510      -99.8401       99.8401       1878.78       1978.62    
  51  0.682479     -0.382024      -26.7640       26.7640       1460.12       1486.88    
loop,thermsimp(1:2)       38   62.6604       94.4547    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    239       1931.99          0.87          1.11         21.96          0.19          0.05         24.19
Just calling func    0   0         24.18


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1931.99
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    70.0584               251
loop is:       38
neval is:      238
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       38      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    560.467      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    70.0584               251
loop is:       39
neval is:      238


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      251
neval,tstepnext:      238     251

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.125069      -2.07889      -145.644       145.644       1305.70       1451.34    
   2  0.274837      -1.29158      -90.4858       90.4858       1462.36       1552.85    
   3  0.305931E-01  -3.48698      -244.292       244.292       1460.12       1704.41    
   4  0.929157     -0.734779E-01  -5.14775       5.14775       1466.62       1471.77    
   5  0.995956     -0.405208E-02 -0.283882      0.283882       1442.39       1442.67    
   6  0.904971     -0.998521E-01  -6.99548       6.99548       1449.71       1456.70    
   7  0.189758      -1.66200      -116.437       116.437       1489.63       1606.07    
   8  0.134931      -2.00299      -140.327       140.327       1504.88       1645.21    
   9  0.302412      -1.19596      -83.7874       83.7874       1440.10       1523.88    
  10  0.389155     -0.943777      -66.1195       66.1195       1561.28       1627.40    
  11  0.947428     -0.540040E-01  -3.78344       3.78344       1544.91       1548.69    
  12  0.338357      -1.08365      -75.9190       75.9190       1439.46       1515.38    
  13  0.937476     -0.645645E-01  -4.52329       4.52329       1502.52       1507.05    
  14  0.399493     -0.917560      -64.2828       64.2828       1529.84       1594.12    
  15  0.527586     -0.639444      -44.7984       44.7984       1497.52       1542.32    
  16  0.297740      -1.21153      -84.8782       84.8782       1613.45       1698.33    
  17  0.557978     -0.583436      -40.8746       40.8746       1443.32       1484.20    
  18  0.267521      -1.31856      -92.3760       92.3760       1556.76       1649.14    
  19  0.637637     -0.449986      -31.5253       31.5253       1567.29       1598.81    
  20  0.838569     -0.176059      -12.3344       12.3344       1588.30       1600.63    
  21  0.132199E-01  -4.32603      -303.075       303.075       1618.25       1921.32    
  22  0.745606     -0.293557      -20.5662       20.5662       1587.39       1607.95    
  23  0.334504      -1.09511      -76.7214       76.7214       1597.78       1674.51    
  24  0.118852      -2.12987      -149.216       149.216       1609.45       1758.67    
  25  0.319911      -1.13971      -79.8466       79.8466       1655.87       1735.72    
  26  0.638302E-01  -2.75153      -192.768       192.768       1564.37       1757.14    
  27  0.173204      -1.75329      -122.833       122.833       1672.43       1795.26    
  28  0.885640     -0.121444      -8.50821       8.50821       1660.61       1669.12    
  29  0.710758     -0.341423      -23.9196       23.9196       1563.69       1587.61    
  30  0.938919     -0.630265E-01  -4.41554       4.41554       1590.93       1595.34    
  31  0.217740      -1.52445      -106.801       106.801       1597.91       1704.72    
  32  0.130036      -2.03994      -142.915       142.915       1655.48       1798.39    
  33  0.331090      -1.10537      -77.4402       77.4402       1661.38       1738.82    
  34  0.453525E-01  -3.09329      -216.711       216.711       1526.77       1743.48    
  35  0.494600     -0.704006      -49.3215       49.3215       1571.48       1620.80    
  36  0.488771E-01  -3.01845      -211.468       211.468       1742.17       1953.64    
  37  0.262916E-01  -3.63850      -254.908       254.908       1610.66       1865.57    
  38  0.975293     -0.250177E-01  -1.75270       1.75270       1707.38       1709.13    
  39  0.521026     -0.651955      -45.6749       45.6749       1694.67       1740.35    
  40  0.210960      -1.55609      -109.017       109.017       1756.37       1865.39    
  41  0.475166E-02  -5.34926      -374.761       374.761       1665.69       2040.45    
  42  0.675859     -0.391771      -27.4468       27.4468       1776.26       1803.71    
  43  0.691418     -0.369011      -25.8523       25.8523       1769.53       1795.38    
  44  0.425152     -0.855309      -59.9216       59.9216       1731.03       1790.95    
  45  0.141313      -1.95678      -137.089       137.089       1758.77       1895.86    
  46  0.902170     -0.102952      -7.21266       7.21266       1751.28       1758.49    
  47  0.794321     -0.230268      -16.1322       16.1322       1827.20       1843.34    
  48  0.685387     -0.377772      -26.4661       26.4661       1830.81       1857.28    
  49  0.273223      -1.29747      -90.8984       90.8984       1747.61       1838.50    
  50  0.784111     -0.243205      -17.0386       17.0386       1852.37       1869.41    
  51  0.824524     -0.192949      -13.5177       13.5177       1931.99       1945.50    
loop,thermsimp(1:2)       39   145.644       90.4858    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    240       1454.77          0.87          1.11         21.89          0.23          0.05         24.16
Just calling func    0   0         24.16


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    241       1631.24          0.87          1.09         21.89          0.19          0.05         24.09
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  240    1631.2      -0.8936     -3.022      4.832     -102.6    -0.9265    
                       3.115      1.149     -99.70      3.899      1.159    

                       4.295     -2.141      1.540      7000.      7000.    

                      -2.780      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -13.22     -10.79     -3.556      10.73    

                      -9.607     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.9847E-01 0.6786E-01-0.4144E-01 0.1043E-01

                     -0.2486     0.1824     0.2259     0.1248     0.1177    



                      -1.071     -1.514      0.000    -0.9313E-01-0.1081    

                     -0.7117E-01 0.3509    -0.7116     0.7480E-01 0.5535    

                      0.1399     0.1982    -0.5310    -0.9341      7000.    



                     -0.2390    -0.6590     -2.142     -1.982    -0.3807    

                     -0.3252      9.090      8.777    -0.1672E+05 -6.000    

                      -1.508     -1.339      9.697      8.907    -0.1969E+05



                      -6.000      1.859    -0.4747      9.028      9.316    

                     -0.1944E+05 -6.000    -0.2692     0.2219      9.364    

                       7.915    -0.1891E+05 -6.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1454.77
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    70.0584               251
loop is:       39
neval is:      240
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       39      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    560.467      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    70.0584               251
loop is:       40
neval is:      240


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      251
neval,tstepnext:      240     251

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.465620     -0.764385      -53.5516       53.5516       1442.39       1495.94    
   2  0.310178      -1.17061      -82.0110       82.0110       1305.70       1387.71    
   3  0.883713     -0.123623      -8.66084       8.66084       1449.71       1458.37    
   4  0.641465     -0.444001      -31.1060       31.1060       1466.62       1497.73    
   5  0.458576E-01  -3.08222      -215.935       215.935       1443.32       1659.26    
   6  0.611421     -0.491970      -34.4666       34.4666       1502.52       1536.99    
   7  0.292603      -1.22894      -86.0975       86.0975       1439.46       1525.56    
   8  0.180818      -1.71026      -119.818       119.818       1440.10       1559.91    
   9  0.490648     -0.712028      -49.8836       49.8836       1497.52       1547.40    
  10  0.538601     -0.618781      -43.3508       43.3508       1544.91       1588.26    
  11  0.451209     -0.795824      -55.7542       55.7542       1462.36       1518.11    
  12  0.610260     -0.493870      -34.5998       34.5998       1563.69       1598.29    
  13  0.425113     -0.855401      -59.9280       59.9280       1529.84       1589.77    
  14  0.647858     -0.434084      -30.4112       30.4112       1590.93       1621.34    
  15  0.394937     -0.929029      -65.0863       65.0863       1567.29       1632.37    
  16  0.452279E-01  -3.09604      -216.904       216.904       1588.30       1805.20    
  17  0.954905     -0.461437E-01  -3.23275       3.23275       1489.63       1492.86    
  18  0.362548      -1.01460      -71.0811       71.0811       1587.39       1658.47    
  19  0.808078     -0.213097      -14.9292       14.9292       1571.48       1586.41    
  20  0.219348      -1.51709      -106.285       106.285       1561.28       1667.57    
  21  0.206981      -1.57513      -110.351       110.351       1504.88       1615.24    
  22  0.719933     -0.328597      -23.0210       23.0210       1556.76       1579.79    
  23  0.950238     -0.510432E-01  -3.57601       3.57601       1660.61       1664.19    
  24  0.845993     -0.167244      -11.7168       11.7168       1597.78       1609.50    
  25  0.157926      -1.84563      -129.302       129.302       1613.45       1742.75    
  26  0.430020     -0.843924      -59.1240       59.1240       1460.12       1519.24    
  27  0.624159     -0.471350      -33.0220       33.0220       1597.91       1630.94    
  28  0.355386      -1.03455      -72.4791       72.4791       1707.38       1779.86    
  29  0.297353      -1.21284      -84.9694       84.9694       1655.87       1740.84    
  30  0.185476      -1.68483      -118.036       118.036       1661.38       1779.41    
  31  0.406569     -0.900002      -63.0527       63.0527       1694.67       1757.73    
  32  0.147052      -1.91697      -134.300       134.300       1526.77       1661.07    
  33  0.205955      -1.58010      -110.699       110.699       1564.37       1675.07    
  34  0.383503     -0.958409      -67.1446       67.1446       1751.28       1818.43    
  35  0.514677E-01  -2.96680      -207.849       207.849       1609.45       1817.30    
  36  0.499194     -0.694760      -48.6738       48.6738       1731.03       1779.70    
  37  0.103172E-01  -4.57394      -320.443       320.443       1672.43       1992.87    
  38  0.470163     -0.754676      -52.8714       52.8714       1769.53       1822.40    
  39  0.983694     -0.164404E-01  -1.15179       1.15179       1655.48       1656.63    
  40  0.880425     -0.127351      -8.92199       8.92199       1776.26       1785.18    
  41  0.969759     -0.307072E-01  -2.15130       2.15130       1747.61       1749.76    
  42  0.761826E-01  -2.57462      -180.374       180.374       1827.20       2007.58    
  43  0.124427      -2.08404      -146.004       146.004       1830.81       1976.82    
  44  0.997702     -0.230032E-02 -0.161157      0.161157       1756.37       1756.54    
  45  0.213939      -1.54206      -108.035       108.035       1610.66       1718.69    
  46  0.471369     -0.752113      -52.6919       52.6919       1852.37       1905.06    
  47  0.421561E-01  -3.16638      -221.831       221.831       1758.77       1980.61    
  48  0.693092     -0.366592      -25.6829       25.6829       1618.25       1643.93    
  49  0.375157     -0.980409      -68.6859       68.6859       1931.99       2000.67    
  50  0.285659      -1.25296      -87.7801       87.7801       1742.17       1829.95    
  51  0.338951      -1.08190      -75.7963       75.7963       1454.77       1530.57    
loop,thermsimp(1:2)       40   53.5516       82.0110    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    242       1456.12          0.87          1.11         21.98          0.19          0.05         24.20
Just calling func    0   0         24.20


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    243       1761.05          0.86          1.10         21.98          0.16          0.05         24.15
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1456.12
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    70.0584               251
loop is:       40
neval is:      242
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       40      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    560.467      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    70.0584               251
loop is:       41
neval is:      242


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      251
neval,tstepnext:      242     251

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.231075      -1.46501      -102.636       102.636       1305.70       1408.33    
   2  0.984723     -0.153953E-01  -1.07857       1.07857       1449.71       1450.79    
   3  0.689569     -0.371688      -26.0399       26.0399       1489.63       1515.67    
   4  0.539532     -0.617054      -43.2298       43.2298       1442.39       1485.62    
   5  0.103859      -2.26472      -158.663       158.663       1466.62       1625.28    
   6  0.403261     -0.908171      -63.6250       63.6250       1462.36       1525.98    
   7  0.545138     -0.606716      -42.5056       42.5056       1460.12       1502.62    
   8  0.211198      -1.55496      -108.938       108.938       1439.46       1548.40    
   9  0.533123     -0.629004      -44.0670       44.0670       1454.77       1498.84    
  10  0.891214     -0.115171      -8.06868       8.06868       1502.52       1510.59    
  11  0.604806     -0.502847      -35.2287       35.2287       1497.52       1532.75    
  12  0.176166      -1.73633      -121.645       121.645       1440.10       1561.74    
  13  0.733693     -0.309664      -21.6946       21.6946       1556.76       1578.46    
  14  0.248504      -1.39230      -97.5422       97.5422       1571.48       1669.02    
  15  0.183808      -1.69387      -118.670       118.670       1544.91       1663.58    
  16  0.308674E-02  -5.78064      -404.983       404.983       1529.84       1934.82    
  17  0.651025     -0.429207      -30.0696       30.0696       1563.69       1593.76    
  18  0.864353     -0.145775      -10.2127       10.2127       1597.78       1608.00    
  19  0.547352     -0.602664      -42.2217       42.2217       1504.88       1547.11    
  20  0.631248     -0.460057      -32.2309       32.2309       1590.93       1623.16    
  21  0.344368E-01  -3.36863      -236.001       236.001       1597.91       1833.92    
  22  0.876828     -0.131444      -9.20878       9.20878       1567.29       1576.50    
  23  0.884538     -0.122690      -8.59549       8.59549       1618.25       1626.84    
  24  0.926808     -0.760084E-01  -5.32503       5.32503       1655.48       1660.80    
  25  0.823462     -0.194237      -13.6080       13.6080       1587.39       1600.99    
  26  0.852580     -0.159489      -11.1735       11.1735       1443.32       1454.50    
  27  0.577707     -0.548689      -38.4403       38.4403       1526.77       1565.21    
  28  0.510093     -0.673163      -47.1607       47.1607       1660.61       1707.77    
  29  0.890288     -0.116210      -8.14149       8.14149       1561.28       1569.42    
  30  0.304875      -1.18785      -83.2191       83.2191       1564.37       1647.59    
  31  0.152164      -1.88279      -131.906       131.906       1610.66       1742.56    
  32  0.718687     -0.330329      -23.1424       23.1424       1655.87       1679.02    
  33  0.488128     -0.717177      -50.2443       50.2443       1613.45       1663.70    
  34  0.373052     -0.986038      -69.0803       69.0803       1747.61       1816.69    
  35  0.247351      -1.39695      -97.8679       97.8679       1756.37       1854.24    
  36  0.532108     -0.630909      -44.2005       44.2005       1694.67       1738.87    
  37  0.828879E-02  -4.79285      -335.780       335.780       1661.38       1997.16    
  38  0.168277      -1.78214      -124.854       124.854       1731.03       1855.88    
  39  0.253216      -1.37351      -96.2262       96.2262       1707.38       1803.60    
  40  0.458588     -0.779602      -54.6177       54.6177       1776.26       1830.88    
  41  0.725692     -0.320630      -22.4628       22.4628       1588.30       1610.76    
  42  0.283543      -1.26039      -88.3011       88.3011       1609.45       1697.75    
  43  0.798055     -0.225578      -15.8036       15.8036       1751.28       1767.08    
  44  0.805371     -0.216453      -15.1643       15.1643       1769.53       1784.69    
  45  0.580747     -0.543441      -38.0726       38.0726       1742.17       1780.24    
  46  0.581119     -0.542799      -38.0277       38.0277       1852.37       1890.40    
  47  0.305196      -1.18680      -83.1454       83.1454       1830.81       1913.96    
  48  0.905702     -0.990454E-01  -6.93897       6.93897       1758.77       1765.71    
  49  0.265633E-01  -3.62822      -254.188       254.188       1672.43       1926.62    
  50  0.114529E-01  -4.46951      -313.127       313.127       1931.99       2245.11    
  51  0.990634     -0.941033E-02 -0.659273      0.659273       1456.12       1456.78    
loop,thermsimp(1:2)       41   102.636       1.07857    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    244       1870.61          0.87          1.11         22.10          0.17          0.05         24.31
Just calling func    0   0         24.31


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1870.61
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    70.0584               251
loop is:       41
neval is:      243
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       41      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    560.467      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    70.0584               251
loop is:       42
neval is:      243


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      251
neval,tstepnext:      243     251

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.442958E-01  -3.11686      -218.363       218.363       1305.70       1524.06    
   2  0.196215      -1.62854      -114.093       114.093       1449.71       1563.80    
   3  0.501152     -0.690846      -48.3996       48.3996       1443.32       1491.72    
   4  0.288339      -1.24362      -87.1260       87.1260       1456.12       1543.24    
   5  0.773132     -0.257306      -18.0265       18.0265       1442.39       1460.42    
   6  0.417683     -0.873033      -61.1634       61.1634       1454.77       1515.94    
   7  0.229479      -1.47195      -103.122       103.122       1460.12       1563.24    
   8  0.964123     -0.365367E-01  -2.55970       2.55970       1502.52       1505.08    
   9  0.263782      -1.33263      -93.3621       93.3621       1489.63       1582.99    
  10  0.102960      -2.27342      -159.272       159.272       1462.36       1621.63    
  11  0.828790     -0.187788      -13.1561       13.1561       1497.52       1510.67    
  12  0.738697     -0.302868      -21.2184       21.2184       1504.88       1526.10    
  13  0.458595     -0.779589      -54.6168       54.6168       1439.46       1494.08    
  14  0.905176     -0.996260E-01  -6.97964       6.97964       1440.10       1447.08    
  15  0.147067      -1.91687      -134.293       134.293       1526.77       1661.06    
  16  0.142365      -1.94936      -136.569       136.569       1561.28       1697.85    
  17  0.483147     -0.727435      -50.9630       50.9630       1567.29       1618.25    
  18  0.640417     -0.445636      -31.2206       31.2206       1556.76       1587.98    
  19  0.719349     -0.329408      -23.0778       23.0778       1563.69       1586.76    
  20  0.714234     -0.336545      -23.5778       23.5778       1587.39       1610.96    
  21  0.825507     -0.191757      -13.4342       13.4342       1597.78       1611.22    
  22  0.155188      -1.86312      -130.527       130.527       1588.30       1718.82    
  23  0.248874      -1.39081      -97.4380       97.4380       1590.93       1688.37    
  24  0.107953      -2.22606      -155.954       155.954       1466.62       1622.57    
  25  0.349169      -1.05220      -73.7154       73.7154       1618.25       1691.96    
  26  0.967311     -0.332356E-01  -2.32843       2.32843       1564.37       1566.70    
  27  0.519506     -0.654877      -45.8797       45.8797       1655.48       1701.36    
  28  0.462662     -0.770758      -53.9981       53.9981       1544.91       1598.91    
  29  0.811438     -0.208948      -14.6385       14.6385       1613.45       1628.09    
  30  0.394710E-01  -3.23219      -226.442       226.442       1571.48       1797.92    
  31  0.482930     -0.727884      -50.9944       50.9944       1655.87       1706.87    
  32  0.520883     -0.652231      -45.6943       45.6943       1609.45       1655.15    
  33  0.980978E-01  -2.32179      -162.661       162.661       1660.61       1823.27    
  34  0.626549     -0.467529      -32.7543       32.7543       1694.67       1727.43    
  35  0.618402     -0.480616      -33.6712       33.6712       1610.66       1644.33    
  36  0.681438     -0.383550      -26.8709       26.8709       1758.77       1785.64    
  37  0.816820     -0.202336      -14.1753       14.1753       1751.28       1765.46    
  38  0.578487     -0.547340      -38.3458       38.3458       1742.17       1780.51    
  39  0.349734      -1.05058      -73.6021       73.6021       1769.53       1843.13    
  40  0.945672     -0.558596E-01  -3.91343       3.91343       1707.38       1711.29    
  41  0.767680     -0.264382      -18.5222       18.5222       1747.61       1766.13    
  42  0.122064      -2.10321      -147.347       147.347       1776.26       1923.61    
  43  0.211623      -1.55295      -108.797       108.797       1597.91       1706.71    
  44  0.969992E-01  -2.33305      -163.450       163.450       1756.37       1919.82    
  45  0.877482     -0.130699      -9.15658       9.15658       1731.03       1740.19    
  46  0.448991     -0.800752      -56.0994       56.0994       1852.37       1908.47    
  47  0.833113     -0.182586      -12.7917       12.7917       1830.81       1843.61    
  48  0.691765     -0.368508      -25.8171       25.8171       1672.43       1698.25    
  49  0.310664      -1.16904      -81.9014       81.9014       1529.84       1611.74    
  50  0.422283     -0.862080      -60.3960       60.3960       1661.38       1721.77    
  51  0.382184E-01  -3.26444      -228.701       228.701       1870.61       2099.31    
loop,thermsimp(1:2)       42   218.363       114.093    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    245       1931.99          0.88          1.11         22.23          0.16          0.05         24.43
Just calling func    0   0         24.43


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1931.99
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    70.0584               251
loop is:       42
neval is:      244
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       42      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    560.467      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    70.0584               251
loop is:       43
neval is:      244


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      251
neval,tstepnext:      244     251

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.298594      -1.20867      -84.6776       84.6776       1440.10       1524.77    
   2  0.383173     -0.959268      -67.2048       67.2048       1442.39       1509.59    
   3  0.386205     -0.951387      -66.6527       66.6527       1443.32       1509.98    
   4  0.362178      -1.01562      -71.1527       71.1527       1439.46       1510.61    
   5  0.394462     -0.930233      -65.1707       65.1707       1502.52       1567.69    
   6  0.883072     -0.124349      -8.71167       8.71167       1497.52       1506.23    
   7  0.571477     -0.559531      -39.1999       39.1999       1454.77       1493.97    
   8  0.944036     -0.575912E-01  -4.03475       4.03475       1305.70       1309.73    
   9  0.326573      -1.11910      -78.4025       78.4025       1504.88       1583.29    
  10  0.467297     -0.760791      -53.2998       53.2998       1456.12       1509.42    
  11  0.828365     -0.188301      -13.1921       13.1921       1460.12       1473.31    
  12  0.826991     -0.189962      -13.3084       13.3084       1449.71       1463.02    
  13  0.675447E-01  -2.69497      -188.805       188.805       1564.37       1753.17    
  14  0.924113     -0.789214E-01  -5.52911       5.52911       1489.63       1495.16    
  15  0.810131     -0.210560      -14.7515       14.7515       1563.69       1578.44    
  16  0.410286     -0.890900      -62.4151       62.4151       1556.76       1619.18    
  17  0.334977      -1.09369      -76.6225       76.6225       1544.91       1621.53    
  18  0.119017      -2.12849      -149.119       149.119       1587.39       1736.51    
  19  0.447328     -0.804463      -56.3594       56.3594       1597.78       1654.14    
  20  0.324388E-02  -5.73098      -401.504       401.504       1529.84       1931.35    
  21  0.158272      -1.84344      -129.149       129.149       1567.29       1696.44    
  22  0.241219      -1.42205      -99.6267       99.6267       1462.36       1561.99    
  23  0.259790      -1.34788      -94.4305       94.4305       1466.62       1561.05    
  24  0.521973     -0.650139      -45.5477       45.5477       1613.45       1659.00    
  25  0.336335      -1.08965      -76.3390       76.3390       1610.66       1687.00    
  26  0.642248     -0.442780      -31.0205       31.0205       1609.45       1640.47    
  27  0.984615     -0.155047E-01  -1.08623       1.08623       1526.77       1527.86    
  28  0.373782     -0.984082      -68.9433       68.9433       1590.93       1659.87    
  29  0.932479     -0.699087E-01  -4.89769       4.89769       1618.25       1623.14    
  30  0.711360     -0.340577      -23.8603       23.8603       1561.28       1585.14    
  31  0.315363      -1.15403      -80.8497       80.8497       1672.43       1753.28    
  32  0.528583     -0.637556      -44.6662       44.6662       1655.48       1700.15    
  33  0.622355E-01  -2.77683      -194.540       194.540       1597.91       1792.45    
  34  0.144849      -1.93206      -135.357       135.357       1655.87       1791.23    
  35  0.868928     -0.140495      -9.84283       9.84283       1707.38       1717.22    
  36  0.243398      -1.41306      -98.9966       98.9966       1588.30       1687.29    
  37  0.936928     -0.651491E-01  -4.56425       4.56425       1661.38       1665.94    
  38  0.979804E-01  -2.32299      -162.745       162.745       1694.67       1857.42    
  39  0.805773     -0.215953      -15.1293       15.1293       1731.03       1746.16    
  40  0.210751      -1.55708      -109.087       109.087       1751.28       1860.37    
  41  0.497104     -0.698956      -48.9678       48.9678       1747.61       1796.57    
  42  0.532106     -0.630913      -44.2008       44.2008       1742.17       1786.37    
  43  0.898420     -0.107117      -7.50446       7.50446       1758.77       1766.28    
  44  0.579370     -0.545814      -38.2388       38.2388       1571.48       1609.72    
  45  0.191213      -1.65437      -115.902       115.902       1660.61       1776.51    
  46  0.491633     -0.710023      -49.7431       49.7431       1769.53       1819.27    
  47  0.989123     -0.109370E-01 -0.766229      0.766229       1830.81       1831.58    
  48  0.576855     -0.550164      -38.5436       38.5436       1852.37       1890.91    
  49  0.133368      -2.01464      -141.143       141.143       1756.37       1897.52    
  50  0.708426     -0.344710      -24.1498       24.1498       1776.26       1800.41    
  51  0.183469      -1.69571      -118.799       118.799       1931.99       2050.79    
loop,thermsimp(1:2)       43   84.6776       67.2048    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    246       1870.61          0.87          1.12         21.97          0.10          0.05         24.11
Just calling func    0   0         24.11


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1870.61
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    70.0584               251
loop is:       43
neval is:      245
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       43      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    560.467      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    70.0584               251
loop is:       44
neval is:      245


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      251
neval,tstepnext:      245     251

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.287044      -1.24812      -87.4413       87.4413       1305.70       1393.14    
   2  0.260243      -1.34614      -94.3084       94.3084       1449.71       1544.02    
   3  0.646915     -0.435540      -30.5132       30.5132       1460.12       1490.63    
   4  0.572447     -0.557835      -39.0810       39.0810       1454.77       1493.85    
   5  0.105907      -2.24520      -157.295       157.295       1489.63       1646.93    
   6  0.693038     -0.366671      -25.6884       25.6884       1497.52       1523.21    
   7  0.329408      -1.11046      -77.7970       77.7970       1456.12       1533.92    
   8  0.187221      -1.67546      -117.380       117.380       1442.39       1559.77    
   9  0.545731     -0.605630      -42.4295       42.4295       1443.32       1485.75    
  10  0.752820     -0.283930      -19.8917       19.8917       1439.46       1459.35    
  11  0.153542      -1.87378      -131.274       131.274       1440.10       1571.37    
  12  0.400659     -0.914645      -64.0786       64.0786       1526.77       1590.85    
  13  0.306182      -1.18357      -82.9194       82.9194       1466.62       1549.54    
  14  0.270957E-01  -3.60838      -252.798       252.798       1462.36       1715.16    
  15  0.776765     -0.252618      -17.6980       17.6980       1502.52       1520.22    
  16  0.711945     -0.339755      -23.8027       23.8027       1563.69       1587.49    
  17  0.217190      -1.52698      -106.978       106.978       1504.88       1611.86    
  18  0.285226      -1.25447      -87.8865       87.8865       1561.28       1649.17    
  19  0.348904      -1.05296      -73.7686       73.7686       1571.48       1645.25    
  20  0.686414     -0.376275      -26.3612       26.3612       1556.76       1583.13    
  21  0.212825      -1.54729      -108.400       108.400       1544.91       1653.31    
  22  0.501697     -0.689760      -48.3235       48.3235       1618.25       1666.57    
  23  0.363771      -1.01123      -70.8452       70.8452       1609.45       1680.30    
  24  0.789273     -0.236642      -16.5788       16.5788       1597.78       1614.36    
  25  0.232884      -1.45721      -102.090       102.090       1613.45       1715.54    
  26  0.754896     -0.281175      -19.6987       19.6987       1590.93       1610.63    
  27  0.639358     -0.447290      -31.3365       31.3365       1661.38       1692.71    
  28  0.532505     -0.630163      -44.1482       44.1482       1610.66       1654.81    
  29  0.759813     -0.274683      -19.2439       19.2439       1588.30       1607.54    
  30  0.768360     -0.263497      -18.4602       18.4602       1567.29       1585.75    
  31  0.245116      -1.40602      -98.5037       98.5037       1655.48       1753.98    
  32  0.672517     -0.396727      -27.7941       27.7941       1707.38       1735.17    
  33  0.910675     -0.935691E-01  -6.55530       6.55530       1587.39       1593.94    
  34  0.441618     -0.817310      -57.2595       57.2595       1731.03       1788.29    
  35  0.212980      -1.54656      -108.349       108.349       1564.37       1672.72    
  36  0.471690     -0.751434      -52.6443       52.6443       1672.43       1725.08    
  37  0.968545     -0.319606E-01  -2.23911       2.23911       1758.77       1761.01    
  38  0.711169     -0.340845      -23.8790       23.8790       1660.61       1684.49    
  39  0.222170      -1.50431      -105.390       105.390       1742.17       1847.56    
  40  0.896100     -0.109703      -7.68565       7.68565       1655.87       1663.56    
  41  0.898054     -0.107525      -7.53303       7.53303       1597.91       1605.45    
  42  0.981364     -0.188122E-01  -1.31795       1.31795       1747.61       1748.92    
  43  0.238126      -1.43496      -100.531       100.531       1776.26       1876.79    
  44  0.884882     -0.122301      -8.56824       8.56824       1769.53       1778.09    
  45  0.206421      -1.57784      -110.541       110.541       1830.81       1941.36    
  46  0.421939     -0.862894      -60.4530       60.4530       1694.67       1755.13    
  47  0.334170E-01  -3.39869      -238.107       238.107       1751.28       1989.39    
  48  0.940374     -0.614772E-01  -4.30699       4.30699       1852.37       1856.68    
  49  0.119361      -2.12561      -148.917       148.917       1756.37       1905.29    
  50  0.493355     -0.706527      -49.4982       49.4982       1529.84       1579.34    
  51  0.239498      -1.42921      -100.128       100.128       1870.61       1970.74    
loop,thermsimp(1:2)       44   87.4413       94.3084    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    247       1436.80          0.87          1.11         22.05          0.09          0.05         24.17
Just calling func    0   0         24.18


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    248       2196.92          0.87          1.10         21.89          0.20          0.05         24.11
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1436.80
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    70.0584               251
loop is:       44
neval is:      247
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       44      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    560.467      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    70.0584               251
loop is:       45
neval is:      247


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      251
neval,tstepnext:      247     251

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.204302      -1.58816      -111.264       111.264       1305.70       1416.96    
   2  0.455846E-01  -3.08818      -216.353       216.353       1439.46       1655.81    
   3  0.655807     -0.421889      -29.5569       29.5569       1443.32       1472.88    
   4  0.902989     -0.102045      -7.14912       7.14912       1460.12       1467.27    
   5  0.826012     -0.191146      -13.3914       13.3914       1454.77       1468.16    
   6  0.160871      -1.82715      -128.007       128.007       1502.52       1630.53    
   7  0.516410     -0.660854      -46.2984       46.2984       1497.52       1543.82    
   8  0.506939     -0.679364      -47.5952       47.5952       1456.12       1503.71    
   9  0.728359     -0.316962      -22.2058       22.2058       1449.71       1471.91    
  10  0.453162     -0.791506      -55.4516       55.4516       1466.62       1522.07    
  11  0.837994     -0.176745      -12.3824       12.3824       1442.39       1454.77    
  12  0.118024      -2.13686      -149.705       149.705       1440.10       1589.80    
  13  0.274030      -1.29452      -90.6920       90.6920       1529.84       1620.53    
  14  0.402227     -0.910738      -63.8049       63.8049       1556.76       1620.57    
  15  0.444245     -0.811380      -56.8440       56.8440       1567.29       1624.13    
  16  0.594880     -0.519396      -36.3881       36.3881       1563.69       1600.07    
  17  0.548806     -0.600010      -42.0358       42.0358       1526.77       1568.81    
  18  0.222827      -1.50136      -105.183       105.183       1587.39       1692.57    
  19  0.152541      -1.88032      -131.732       131.732       1597.91       1729.65    
  20  0.816533     -0.202688      -14.2000       14.2000       1588.30       1602.50    
  21  0.525417     -0.643564      -45.0871       45.0871       1590.93       1636.01    
  22  0.661450     -0.413320      -28.9566       28.9566       1504.88       1533.84    
  23  0.437535     -0.826598      -57.9101       57.9101       1597.78       1655.69    
  24  0.464442     -0.766918      -53.7291       53.7291       1571.48       1625.21    
  25  0.683975     -0.379834      -26.6106       26.6106       1489.63       1516.24    
  26  0.407919     -0.896688      -62.8205       62.8205       1561.28       1624.10    
  27  0.934669     -0.675632E-01  -4.73337       4.73337       1544.91       1549.64    
  28  0.866891     -0.142842      -10.0073       10.0073       1610.66       1620.67    
  29  0.145435E-01  -4.23061      -296.390       296.390       1655.87       1952.26    
  30  0.514599     -0.664368      -46.5446       46.5446       1618.25       1664.79    
  31  0.370591     -0.992656      -69.5439       69.5439       1564.37       1633.91    
  32  0.251726      -1.37941      -96.6395       96.6395       1609.45       1706.09    
  33  0.959470     -0.413742E-01  -2.89861       2.89861       1660.61       1663.51    
  34  0.344885E-01  -3.36713      -235.896       235.896       1661.38       1897.27    
  35  0.348690      -1.05357      -73.8117       73.8117       1462.36       1536.17    
  36  0.610898     -0.492826      -34.5266       34.5266       1613.45       1647.98    
  37  0.440567     -0.819693      -57.4264       57.4264       1672.43       1729.86    
  38  0.340409      -1.07761      -75.4955       75.4955       1707.38       1782.87    
  39  0.345015E-01  -3.36675      -235.869       235.869       1747.61       1983.48    
  40  0.667224     -0.404630      -28.3478       28.3478       1655.48       1683.83    
  41  0.138336      -1.97807      -138.581       138.581       1694.67       1833.25    
  42  0.412023     -0.886676      -62.1191       62.1191       1758.77       1820.89    
  43  0.578410     -0.547473      -38.3551       38.3551       1769.53       1807.88    
  44  0.972817     -0.275594E-01  -1.93077       1.93077       1731.03       1732.96    
  45  0.152341      -1.88163      -131.824       131.824       1742.17       1873.99    
  46  0.764264     -0.268842      -18.8346       18.8346       1852.37       1871.21    
  47  0.898082E-01  -2.41008      -168.846       168.846       1776.26       1945.11    
  48  0.205097      -1.58427      -110.992       110.992       1756.37       1867.37    
  49  0.249611E-01  -3.69044      -258.546       258.546       1830.81       2089.36    
  50  0.999211     -0.789000E-03 -0.552761E-01  0.552761E-01   1870.61       1870.67    
  51  0.622898E-01  -2.77596      -194.479       194.479       1436.80       1631.28    
loop,thermsimp(1:2)       45   111.264       216.353    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    249       1349.50          0.86          1.12         22.06          0.19          0.06         24.28
Just calling func    0   0         24.28


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    250       1853.03          0.88          1.12         21.93          0.15          0.05         24.14
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1349.50
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    70.0584               251
loop is:       45
neval is:      249
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       45      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    560.467      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    70.0584               251
loop is:       46
neval is:      249


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      251
neval,tstepnext:      249     251

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.794521     -0.230016      -16.1146       16.1146       1305.70       1321.81    
   2  0.338444      -1.08340      -75.9010       75.9010       1442.39       1518.29    
   3  0.563800     -0.573055      -40.1473       40.1473       1460.12       1500.26    
   4  0.295284      -1.21982      -85.4584       85.4584       1454.77       1540.23    
   5  0.506481     -0.680269      -47.6586       47.6586       1449.71       1497.37    
   6  0.345803      -1.06189      -74.3941       74.3941       1443.32       1517.72    
   7  0.741641     -0.298890      -20.9397       20.9397       1456.12       1477.06    
   8  0.182310      -1.70204      -119.243       119.243       1489.63       1608.87    
   9  0.315187      -1.15459      -80.8886       80.8886       1466.62       1547.51    
  10  0.598844     -0.512755      -35.9228       35.9228       1504.88       1540.81    
  11  0.659119     -0.416852      -29.2040       29.2040       1462.36       1491.56    
  12  0.247481      -1.39642      -97.8312       97.8312       1497.52       1595.35    
  13  0.255298      -1.36532      -95.6523       95.6523       1544.91       1640.56    
  14  0.876488     -0.131833      -9.23598       9.23598       1526.77       1536.01    
  15  0.358010      -1.02719      -71.9637       71.9637       1440.10       1512.06    
  16  0.317480      -1.14734      -80.3809       80.3809       1563.69       1644.07    
  17  0.153422      -1.87456      -131.329       131.329       1588.30       1719.63    
  18  0.296162      -1.21685      -85.2506       85.2506       1529.84       1615.09    
  19  0.629760     -0.462417      -32.3962       32.3962       1556.76       1589.16    
  20  0.458345E-01  -3.08272      -215.970       215.970       1610.66       1826.63    
  21  0.209534      -1.56287      -109.492       109.492       1561.28       1670.77    
  22  0.490210E-01  -3.01551      -211.262       211.262       1567.29       1778.55    
  23  0.144817      -1.93229      -135.373       135.373       1571.48       1706.86    
  24  0.764061     -0.269107      -18.8532       18.8532       1502.52       1521.38    
  25  0.158664      -1.84097      -128.975       128.975       1436.80       1565.78    
  26  0.242818      -1.41544      -99.1636       99.1636       1564.37       1663.53    
  27  0.779950     -0.248525      -17.4113       17.4113       1590.93       1608.34    
  28  0.763580     -0.269737      -18.8974       18.8974       1613.45       1632.35    
  29  0.817639     -0.201335      -14.1052       14.1052       1597.78       1611.89    
  30  0.656802     -0.420373      -29.4507       29.4507       1439.46       1468.91    
  31  0.202192      -1.59854      -111.991       111.991       1660.61       1772.60    
  32  0.469647     -0.755773      -52.9483       52.9483       1618.25       1671.19    
  33  0.107456      -2.23067      -156.277       156.277       1655.48       1811.76    
  34  0.709118     -0.343734      -24.0815       24.0815       1587.39       1611.47    
  35  0.988480     -0.115868E-01 -0.811756      0.811756       1609.45       1610.27    
  36  0.645173     -0.438236      -30.7022       30.7022       1597.91       1628.62    
  37  0.583143     -0.539322      -37.7841       37.7841       1672.43       1710.21    
  38  0.276552E-01  -3.58794      -251.366       251.366       1731.03       1982.39    
  39  0.560517     -0.578896      -40.5566       40.5566       1707.38       1747.93    
  40  0.292779      -1.22834      -86.0553       86.0553       1769.53       1855.58    
  41  0.486207     -0.721121      -50.5206       50.5206       1758.77       1809.29    
  42  0.379142E-01  -3.27243      -229.261       229.261       1694.67       1923.94    
  43  0.459895     -0.776757      -54.4184       54.4184       1756.37       1810.79    
  44  0.810771     -0.209769      -14.6961       14.6961       1870.61       1885.31    
  45  0.189138      -1.66528      -116.667       116.667       1852.37       1969.04    
  46  0.509870     -0.673599      -47.1913       47.1913       1742.17       1789.36    
  47  0.468020E-01  -3.06183      -214.507       214.507       1661.38       1875.88    
  48  0.568404     -0.564922      -39.5776       39.5776       1776.26       1815.84    
  49  0.891250     -0.115130      -8.06586       8.06586       1655.87       1663.94    
  50  0.415261     -0.878849      -61.5708       61.5708       1747.61       1809.18    
  51  0.714019     -0.336846      -23.5989       23.5989       1349.50       1373.10    
loop,thermsimp(1:2)       46   16.1146       75.9010    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    251       1889.43          0.87          1.11         22.06          0.23          0.05         24.33
Just calling func    0   0         24.33


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1889.43
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    70.0584               251
loop is:       46
neval is:      250
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       46      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    560.467      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    70.0584               251
loop is:       47
neval is:      250


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      251
neval,tstepnext:      250     251

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.652512     -0.426926      -29.9098       29.9098       1305.70       1335.61    
   2  0.474910     -0.744630      -52.1676       52.1676       1349.50       1401.67    
   3  0.125725      -2.07366      -145.277       145.277       1439.46       1584.74    
   4  0.950967     -0.502756E-01  -3.52223       3.52223       1456.12       1459.64    
   5  0.562475     -0.575409      -40.3123       40.3123       1462.36       1502.67    
   6  0.728528     -0.316729      -22.1895       22.1895       1449.71       1471.90    
   7  0.326058      -1.12068      -78.5131       78.5131       1460.12       1538.63    
   8  0.460979     -0.774402      -54.2534       54.2534       1440.10       1494.35    
   9  0.186861      -1.67739      -117.515       117.515       1443.32       1560.84    
  10  0.737773     -0.304119      -21.3061       21.3061       1442.39       1463.70    
  11  0.254524      -1.36836      -95.8652       95.8652       1502.52       1598.39    
  12  0.475390     -0.743621      -52.0969       52.0969       1526.77       1578.87    
  13  0.783107     -0.244486      -17.1283       17.1283       1454.77       1471.90    
  14  0.615536     -0.485261      -33.9967       33.9967       1504.88       1538.88    
  15  0.600710E-01  -2.81223      -197.020       197.020       1466.62       1663.64    
  16  0.834417     -0.181022      -12.6821       12.6821       1436.80       1449.48    
  17  0.270355      -1.30802      -91.6378       91.6378       1556.76       1648.40    
  18  0.408387     -0.895540      -62.7401       62.7401       1497.52       1560.26    
  19  0.248286      -1.39318      -97.6037       97.6037       1590.93       1688.53    
  20  0.586808E-01  -2.83564      -198.661       198.661       1489.63       1688.29    
  21  0.747050     -0.291623      -20.4307       20.4307       1609.45       1629.88    
  22  0.261869E-01  -3.64250      -255.188       255.188       1587.39       1842.57    
  23  0.495813     -0.701557      -49.1500       49.1500       1597.78       1646.93    
  24  0.600032     -0.510772      -35.7839       35.7839       1529.84       1565.63    
  25  0.936456     -0.656531E-01  -4.59956       4.59956       1597.91       1602.51    
  26  0.583260     -0.539121      -37.7700       37.7700       1613.45       1651.22    
  27  0.994266     -0.575021E-02 -0.402851      0.402851       1544.91       1545.31    
  28  0.149755      -1.89876      -133.024       133.024       1563.69       1696.71    
  29  0.751239     -0.286032      -20.0389       20.0389       1564.37       1584.41    
  30  0.703931     -0.351075      -24.5958       24.5958       1655.87       1680.47    
  31  0.998476     -0.152564E-02 -0.106884      0.106884       1561.28       1561.39    
  32  0.501495     -0.690161      -48.3516       48.3516       1618.25       1666.60    
  33  0.446468     -0.806387      -56.4942       56.4942       1571.48       1627.98    
  34  0.321376      -1.13514      -79.5265       79.5265       1672.43       1751.96    
  35  0.850901     -0.161459      -11.3116       11.3116       1588.30       1599.61    
  36  0.975881     -0.244142E-01  -1.71042       1.71042       1707.38       1709.09    
  37  0.386316     -0.951100      -66.6326       66.6326       1660.61       1727.24    
  38  0.782734     -0.244962      -17.1617       17.1617       1567.29       1584.45    
  39  0.142678      -1.94716      -136.415       136.415       1742.17       1878.58    
  40  0.509914     -0.673514      -47.1853       47.1853       1747.61       1794.79    
  41  0.211111      -1.55537      -108.967       108.967       1758.77       1867.74    
  42  0.212538      -1.54864      -108.495       108.495       1756.37       1864.87    
  43  0.889982     -0.116555      -8.16563       8.16563       1655.48       1663.65    
  44  0.769070     -0.262573      -18.3955       18.3955       1776.26       1794.66    
  45  0.792434     -0.232646      -16.2988       16.2988       1610.66       1626.96    
  46  0.250220E-01  -3.68800      -258.376       258.376       1769.53       2027.90    
  47  0.190304      -1.65913      -116.236       116.236       1661.38       1777.61    
  48  0.579595     -0.545425      -38.2116       38.2116       1870.61       1908.82    
  49  0.373376     -0.985170      -69.0194       69.0194       1694.67       1763.69    
  50  0.933620E-01  -2.37127      -166.128       166.128       1852.37       2018.50    
  51  0.628243     -0.464828      -32.5651       32.5651       1889.43       1921.99    
loop,thermsimp(1:2)       47   29.9098       52.1676    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    252       1709.82          0.87          1.12         22.24          0.20          0.05         24.48
Just calling func    0   0         24.47


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1709.82
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    70.0584               251
loop is:       47
neval is:      251
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       47      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    560.467      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    70.0584               251
loop is:       48
neval is:      251


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      251
neval,tstepnext:      251     251

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.316013      -1.15197      -80.7054       80.7054       1305.70       1386.40    
   2  0.452730     -0.792459      -55.5184       55.5184       1349.50       1405.02    
   3  0.463916     -0.768051      -53.8085       53.8085       1436.80       1490.61    
   4  0.531172E-01  -2.93526      -205.639       205.639       1456.12       1661.76    
   5  0.933113     -0.692290E-01  -4.85007       4.85007       1442.39       1447.24    
   6  0.107612      -2.22922      -156.176       156.176       1449.71       1605.88    
   7  0.228017      -1.47833      -103.570       103.570       1454.77       1558.34    
   8  0.766526     -0.265887      -18.6276       18.6276       1440.10       1458.72    
   9  0.676418     -0.390944      -27.3889       27.3889       1462.36       1489.75    
  10  0.220696      -1.51097      -105.856       105.856       1460.12       1565.97    
  11  0.959946E-01  -2.34346      -164.179       164.179       1504.88       1669.06    
  12  0.570655     -0.560971      -39.3008       39.3008       1544.91       1584.21    
  13  0.736426     -0.305947      -21.4341       21.4341       1497.52       1518.95    
  14  0.966377     -0.342013E-01  -2.39609       2.39609       1443.32       1445.72    
  15  0.797662     -0.226070      -15.8381       15.8381       1561.28       1577.12    
  16  0.413688     -0.882643      -61.8366       61.8366       1529.84       1591.68    
  17  0.200670      -1.60609      -112.520       112.520       1526.77       1639.29    
  18  0.843958E-01  -2.47224      -173.201       173.201       1564.37       1737.57    
  19  0.375580     -0.979284      -68.6071       68.6071       1567.29       1635.89    
  20  0.968669     -0.318322E-01  -2.23011       2.23011       1439.46       1441.69    
  21  0.379263     -0.969525      -67.9234       67.9234       1502.52       1570.45    
  22  0.421746     -0.863352      -60.4851       60.4851       1588.30       1648.78    
  23  0.639909     -0.446429      -31.2761       31.2761       1597.91       1629.19    
  24  0.549878     -0.598059      -41.8991       41.8991       1610.66       1652.56    
  25  0.226469      -1.48515      -104.047       104.047       1571.48       1675.53    
  26  0.547044E-02  -5.20840      -364.892       364.892       1609.45       1974.35    
  27  0.372808     -0.986692      -69.1261       69.1261       1597.78       1666.91    
  28  0.406819E-01  -3.20197      -224.325       224.325       1556.76       1781.09    
  29  0.664564     -0.408624      -28.6275       28.6275       1613.45       1642.08    
  30  0.708700     -0.344323      -24.1227       24.1227       1466.62       1490.74    
  31  0.863329     -0.146959      -10.2957       10.2957       1655.48       1665.78    
  32  0.406109     -0.901134      -63.1320       63.1320       1618.25       1681.38    
  33  0.101947      -2.28330      -159.965       159.965       1655.87       1815.84    
  34  0.660574     -0.414646      -29.0495       29.0495       1489.63       1518.68    
  35  0.839002     -0.175542      -12.2982       12.2982       1590.93       1603.23    
  36  0.735312E-01  -2.61005      -182.856       182.856       1563.69       1746.54    
  37  0.559917     -0.579967      -40.6316       40.6316       1707.38       1748.01    
  38  0.922004     -0.812055E-01  -5.68913       5.68913       1660.61       1666.30    
  39  0.891471     -0.114882      -8.04847       8.04847       1672.43       1680.48    
  40  0.489346     -0.714686      -50.0698       50.0698       1694.67       1744.74    
  41  0.583196     -0.539231      -37.7777       37.7777       1661.38       1699.15    
  42  0.989235     -0.108230E-01 -0.758246      0.758246       1776.26       1777.02    
  43  0.844741     -0.168725      -11.8206       11.8206       1747.61       1759.43    
  44  0.734982     -0.307909      -21.5716       21.5716       1587.39       1608.96    
  45  0.913246     -0.907495E-01  -6.35777       6.35777       1756.37       1762.73    
  46  0.605096     -0.502369      -35.1952       35.1952       1758.77       1793.97    
  47  0.623739     -0.472024      -33.0692       33.0692       1742.17       1775.24    
  48  0.780990     -0.247193      -17.3180       17.3180       1870.61       1887.93    
  49  0.615662E-01  -2.78764      -195.298       195.298       1889.43       2084.73    
  50  0.646443E-02  -5.04144      -353.195       353.195       1852.37       2205.57    
  51  0.848055     -0.164809      -11.5463       11.5463       1709.82       1721.36    
loop,thermsimp(1:2)       48   80.7054       55.5184    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    253       1463.74          0.86          1.11         21.98          0.13          0.05         24.13
Just calling func    0   0         24.13


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1463.74
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    70.0584               251
loop is:       48
neval is:      252
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       48      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    560.467      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    70.0584               251
loop is:       49
neval is:      252


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 




neval>tstepnex so lower away!t
---> lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
     new SAtemp,tstepnext are :    35.0292               301

 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      301
neval,tstepnext:      252     301

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.991535     -0.850114E-02 -0.297788      0.297788       1305.70       1305.99    
   2  0.120199      -2.11861      -74.2131       74.2131       1349.50       1423.71    
   3  0.825835     -0.191360      -6.70319       6.70319       1439.46       1446.16    
   4  0.769690     -0.261767      -9.16949       9.16949       1443.32       1452.49    
   5  0.206534      -1.57729      -55.2513       55.2513       1442.39       1497.64    
   6  0.435455     -0.831363      -29.1220       29.1220       1440.10       1469.22    
   7  0.408718     -0.894731      -31.3417       31.3417       1462.36       1493.70    
   8  0.504170E-01  -2.98743      -104.647       104.647       1436.80       1541.45    
   9  0.943874     -0.577631E-01  -2.02340       2.02340       1466.62       1468.64    
  10  0.161493      -1.82330      -63.8686       63.8686       1489.63       1553.50    
  11  0.248560      -1.39207      -48.7632       48.7632       1497.52       1546.28    
  12  0.952734     -0.484195E-01  -1.69610       1.69610       1454.77       1456.47    
  13  0.349224      -1.05204      -36.8522       36.8522       1460.12       1496.97    
  14  0.245013      -1.40644      -49.2666       49.2666       1502.52       1551.79    
  15  0.713805     -0.337146      -11.8099       11.8099       1561.28       1573.09    
  16  0.206995      -1.57506      -55.1732       55.1732       1544.91       1600.08    
  17  0.573984     -0.555154      -19.4466       19.4466       1529.84       1549.29    
  18  0.791297     -0.234082      -8.19972       8.19972       1590.93       1599.13    
  19  0.599323     -0.511955      -17.9334       17.9334       1449.71       1467.64    
  20  0.632893     -0.457454      -16.0243       16.0243       1587.39       1603.41    
  21  0.920472     -0.828688E-01  -2.90283       2.90283       1597.91       1600.82    
  22  0.650695     -0.429713      -15.0525       15.0525       1567.29       1582.34    
  23  0.759327     -0.275322      -9.64432       9.64432       1526.77       1536.42    
  24  0.547563     -0.602278      -21.0973       21.0973       1613.45       1634.55    
  25  0.375945     -0.978312      -34.2695       34.2695       1588.30       1622.57    
  26  0.436593     -0.828753      -29.0306       29.0306       1610.66       1639.69    
  27  0.226348      -1.48568      -52.0422       52.0422       1456.12       1508.16    
  28  0.889061     -0.117589      -4.11906       4.11906       1655.48       1659.60    
  29  0.294563      -1.22226      -42.8149       42.8149       1660.61       1703.42    
  30  0.760606     -0.273640      -9.58540       9.58540       1597.78       1607.37    
  31  0.131934      -2.02545      -70.9499       70.9499       1504.88       1575.83    
  32  0.150887      -1.89123      -66.2482       66.2482       1571.48       1637.73    
  33  0.108814      -2.21811      -77.6987       77.6987       1672.43       1750.13    
  34  0.392982     -0.933991      -32.7170       32.7170       1618.25       1650.96    
  35  0.524209     -0.645865      -22.6241       22.6241       1661.38       1684.00    
  36  0.779329     -0.249322      -8.73355       8.73355       1709.82       1718.55    
  37  0.684136     -0.379599      -13.2970       13.2970       1564.37       1577.66    
  38  0.898629     -0.106885      -3.74411       3.74411       1694.67       1698.42    
  39  0.885947E-01  -2.42368      -84.8997       84.8997       1563.69       1648.59    
  40  0.865042     -0.144977      -5.07844       5.07844       1707.38       1712.46    
  41  0.953799     -0.473027E-01  -1.65698       1.65698       1747.61       1749.26    
  42  0.264945      -1.32823      -46.5270       46.5270       1756.37       1802.90    
  43  0.931660     -0.707875E-01  -2.47963       2.47963       1742.17       1744.65    
  44  0.273150      -1.29773      -45.4586       45.4586       1776.26       1821.72    
  45  0.773196     -0.257223      -9.01032       9.01032       1556.76       1565.77    
  46  0.936342     -0.657743E-01  -2.30402       2.30402       1758.77       1761.08    
  47  0.367272      -1.00165      -35.0871       35.0871       1655.87       1690.96    
  48  0.970907     -0.295243E-01  -1.03421       1.03421       1870.61       1871.65    
  49  0.722669     -0.324804      -11.3776       11.3776       1609.45       1620.83    
  50  0.247966      -1.39446      -48.8470       48.8470       1889.43       1938.28    
  51  0.730821     -0.313587      -10.9847       10.9847       1463.74       1474.73    
loop,thermsimp(1:2)       49  0.297788       74.2131    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    254       1689.97          0.87          1.11         22.02          0.14          0.05         24.20
Just calling func    0   0         24.20


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1689.97
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    35.0292               301
loop is:       49
neval is:      253
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       49      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    560.467      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    35.0292               301
loop is:       50
neval is:      253


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      301
neval,tstepnext:      253     301

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.919134E-02  -4.68949      -164.269       164.269       1305.70       1469.96    
   2  0.902150     -0.102974      -3.60711       3.60711       1349.50       1353.11    
   3  0.375868     -0.978517      -34.2767       34.2767       1439.46       1473.74    
   4  0.136549E-01  -4.29366      -150.403       150.403       1443.32       1593.73    
   5  0.948329     -0.530533E-01  -1.85842       1.85842       1454.77       1456.63    
   6  0.489379E-01  -3.01720      -105.690       105.690       1449.71       1555.40    
   7  0.319400      -1.14131      -39.9792       39.9792       1466.62       1506.60    
   8  0.748008     -0.290342      -10.1704       10.1704       1440.10       1450.27    
   9  0.468015     -0.759255      -26.5961       26.5961       1463.74       1490.34    
  10  0.467420     -0.760527      -26.6407       26.6407       1462.36       1489.00    
  11  0.345085      -1.06396      -37.2698       37.2698       1460.12       1497.39    
  12  0.598981     -0.512526      -17.9534       17.9534       1442.39       1460.34    
  13  0.231496      -1.46319      -51.2544       51.2544       1456.12       1507.37    
  14  0.685496     -0.377613      -13.2275       13.2275       1526.77       1540.00    
  15  0.225803      -1.48809      -52.1266       52.1266       1436.80       1488.93    
  16  0.744991E-01  -2.59697      -90.9697       90.9697       1497.52       1588.49    
  17  0.436777     -0.828332      -29.0158       29.0158       1529.84       1558.86    
  18  0.241074      -1.42265      -49.8344       49.8344       1502.52       1552.36    
  19  0.728071     -0.317357      -11.1168       11.1168       1489.63       1500.75    
  20  0.228500      -1.47622      -51.7108       51.7108       1556.76       1608.48    
  21  0.423678     -0.858781      -30.0824       30.0824       1561.28       1591.36    
  22  0.812855     -0.207202      -7.25812       7.25812       1504.88       1512.14    
  23  0.810546     -0.210047      -7.35779       7.35779       1564.37       1571.73    
  24  0.113500      -2.17595      -76.2218       76.2218       1567.29       1643.51    
  25  0.197385      -1.62260      -56.8385       56.8385       1590.93       1647.77    
  26  0.101018      -2.29246      -80.3031       80.3031       1544.91       1625.21    
  27  0.857009E-01  -2.45689      -86.0630       86.0630       1597.91       1683.98    
  28  0.693668     -0.365762      -12.8123       12.8123       1587.39       1600.20    
  29  0.705918     -0.348256      -12.1991       12.1991       1597.78       1609.98    
  30  0.309793      -1.17185      -41.0490       41.0490       1609.45       1650.50    
  31  0.144843      -1.93210      -67.6800       67.6800       1588.30       1655.98    
  32  0.412916     -0.884511      -30.9837       30.9837       1613.45       1644.44    
  33  0.916661     -0.870180E-01  -3.04817       3.04817       1571.48       1574.53    
  34  0.933384E-01  -2.37152      -83.0726       83.0726       1610.66       1693.73    
  35  0.937330     -0.647200E-01  -2.26709       2.26709       1563.69       1565.95    
  36  0.958012     -0.428952E-01  -1.50258       1.50258       1618.25       1619.75    
  37  0.692877E-01  -2.66949      -93.5101       93.5101       1655.48       1748.99    
  38  0.228520E-01  -3.77872      -132.366       132.366       1661.38       1793.74    
  39  0.188135      -1.67060      -58.5197       58.5197       1655.87       1714.39    
  40  0.122595E-01  -4.40146      -154.180       154.180       1694.67       1848.85    
  41  0.776693     -0.252710      -8.85225       8.85225       1660.61       1669.46    
  42  0.571957     -0.558691      -19.5705       19.5705       1707.38       1726.95    
  43  0.313016      -1.16150      -40.6865       40.6865       1709.82       1750.50    
  44  0.512360     -0.668728      -23.4250       23.4250       1742.17       1765.59    
  45  0.874954     -0.133584      -4.67934       4.67934       1747.61       1752.29    
  46  0.617920     -0.481397      -16.8630       16.8630       1672.43       1689.29    
  47  0.529196     -0.636396      -22.2925       22.2925       1758.77       1781.07    
  48  0.389261E-02  -5.54867      -194.366       194.366       1756.37       1950.74    
  49  0.323386E-01  -3.43149      -120.203       120.203       1776.26       1896.46    
  50  0.900641     -0.104648      -3.66575       3.66575       1870.61       1874.28    
  51  0.872638     -0.136235      -4.77220       4.77220       1689.97       1694.74    
loop,thermsimp(1:2)       50   164.269       3.60711    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    255       1490.39          0.88          1.11         21.96          0.17          0.05         24.17
Just calling func    0   0         24.17


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1490.39
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    35.0292               301
loop is:       50
neval is:      254
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       50      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    560.467      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    35.0292               301
loop is:       51
neval is:      254


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      301
neval,tstepnext:      254     301

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.903412     -0.101577      -3.55815       3.55815       1349.50       1353.06    
   2  0.808902     -0.212077      -7.42891       7.42891       1440.10       1447.52    
   3  0.762147     -0.271616      -9.51449       9.51449       1454.77       1464.29    
   4  0.287851      -1.24531      -43.6223       43.6223       1442.39       1486.01    
   5  0.212418      -1.54920      -54.2673       54.2673       1305.70       1359.96    
   6  0.380717     -0.965699      -33.8277       33.8277       1439.46       1473.29    
   7  0.877795     -0.130342      -4.56578       4.56578       1436.80       1441.37    
   8  0.836834     -0.178130      -6.23974       6.23974       1462.36       1468.60    
   9  0.435183     -0.831988      -29.1439       29.1439       1463.74       1492.89    
  10  0.900166     -0.105177      -3.68425       3.68425       1460.12       1463.80    
  11  0.175095      -1.74242      -61.0358       61.0358       1489.63       1550.67    
  12  0.322232      -1.13248      -39.6700       39.6700       1466.62       1506.29    
  13  0.706662     -0.347203      -12.1623       12.1623       1456.12       1468.28    
  14  0.494297     -0.704618      -24.6822       24.6822       1504.88       1529.57    
  15  0.324383      -1.12583      -39.4370       39.4370       1526.77       1566.21    
  16  0.777122     -0.252157      -8.83287       8.83287       1502.52       1511.36    
  17  0.499054E-01  -2.99763      -105.005       105.005       1449.71       1554.71    
  18  0.489193E-01  -3.01758      -105.704       105.704       1529.84       1635.55    
  19  0.480140     -0.733678      -25.7002       25.7002       1563.69       1589.39    
  20  0.914126     -0.897865E-01  -3.14515       3.14515       1564.37       1567.51    
  21  0.613008     -0.489378      -17.1425       17.1425       1571.48       1588.62    
  22  0.470573     -0.753804      -26.4052       26.4052       1497.52       1523.92    
  23  0.614279     -0.487307      -17.0700       17.0700       1561.28       1578.35    
  24  0.410529     -0.890308      -31.1868       31.1868       1443.32       1474.51    
  25  0.582759     -0.539981      -18.9151       18.9151       1587.39       1606.30    
  26  0.422753E-01  -3.16355      -110.817       110.817       1556.76       1667.58    
  27  0.717044     -0.332618      -11.6514       11.6514       1597.78       1609.44    
  28  0.420765     -0.865682      -30.3242       30.3242       1618.25       1648.57    
  29  0.801392     -0.221405      -7.75564       7.75564       1544.91       1552.66    
  30  0.426188     -0.852875      -29.8755       29.8755       1567.29       1597.16    
  31  0.338881      -1.08211      -37.9054       37.9054       1613.45       1651.36    
  32  0.398160     -0.920902      -32.2585       32.2585       1590.93       1623.19    
  33  0.938837     -0.631132E-01  -2.21081       2.21081       1609.45       1611.66    
  34  0.411860E-01  -3.18966      -111.731       111.731       1588.30       1700.03    
  35  0.180703      -1.71090      -59.9315       59.9315       1660.61       1720.54    
  36  0.617012     -0.482867      -16.9144       16.9144       1597.91       1614.83    
  37  0.788612     -0.237480      -8.31875       8.31875       1672.43       1680.75    
  38  0.381719     -0.963071      -33.7356       33.7356       1610.66       1644.39    
  39  0.376038     -0.978064      -34.2608       34.2608       1689.97       1724.23    
  40  0.105996      -2.24435      -78.6180       78.6180       1655.87       1734.49    
  41  0.769932E-01  -2.56404      -89.8163       89.8163       1707.38       1797.19    
  42  0.365987      -1.00516      -35.2099       35.2099       1655.48       1690.69    
  43  0.731763     -0.312298      -10.9396       10.9396       1709.82       1720.76    
  44  0.447137     -0.804891      -28.1947       28.1947       1747.61       1775.80    
  45  0.273519      -1.29638      -45.4113       45.4113       1742.17       1787.58    
  46  0.870614     -0.138556      -4.85352       4.85352       1758.77       1763.63    
  47  0.822463     -0.195452      -6.84652       6.84652       1661.38       1668.22    
  48  0.456061     -0.785129      -27.5024       27.5024       1694.67       1722.18    
  49  0.603947     -0.504269      -17.6642       17.6642       1870.61       1888.28    
  50  0.342037      -1.07284      -37.5806       37.5806       1776.26       1813.84    
  51  0.693527     -0.365965      -12.8195       12.8195       1490.39       1503.21    
loop,thermsimp(1:2)       51   3.55815       7.42891    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    256       1965.44          0.87          1.11         21.89          0.21          0.05         24.12
Just calling func    0   0         24.13


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    257       1601.22          0.87          1.11         21.98          0.18          0.04         24.18
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3   1601.22
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    35.0292               301
loop is:       51
neval is:      256
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       51      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    560.467      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    35.0292               301
loop is:       52
neval is:      256


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      301
neval,tstepnext:      256     301

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.421091     -0.864906      -30.2970       30.2970       1349.50       1379.80    
   2  0.315135      -1.15476      -40.4502       40.4502       1305.70       1346.15    
   3  0.696708     -0.361389      -12.6592       12.6592       1436.80       1449.46    
   4  0.922116     -0.810842E-01  -2.84032       2.84032       1440.10       1442.94    
   5  0.908133     -0.963648E-01  -3.37558       3.37558       1460.12       1463.49    
   6  0.174132      -1.74794      -61.2290       61.2290       1454.77       1516.00    
   7  0.490629     -0.712068      -24.9432       24.9432       1456.12       1481.06    
   8  0.382604     -0.960755      -33.6545       33.6545       1462.36       1496.01    
   9  0.985159     -0.149527E-01 -0.523782      0.523782       1439.46       1439.98    
  10  0.182634      -1.70027      -59.5592       59.5592       1443.32       1502.88    
  11  0.554568     -0.589565      -20.6520       20.6520       1442.39       1463.04    
  12  0.999791     -0.209153E-03 -0.732646E-02  0.732646E-02   1463.74       1463.75    
  13  0.284621      -1.25660      -44.0177       44.0177       1490.39       1534.41    
  14  0.920706E-01  -2.38520      -83.5517       83.5517       1466.62       1550.17    
  15  0.243911      -1.41095      -49.4246       49.4246       1502.52       1551.95    
  16  0.866829     -0.142914      -5.00615       5.00615       1497.52       1502.52    
  17  0.640039     -0.446225      -15.6309       15.6309       1504.88       1520.52    
  18  0.737488E-01  -2.60709      -91.3243       91.3243       1489.63       1580.96    
  19  0.511916     -0.669594      -23.4554       23.4554       1544.91       1568.36    
  20  0.870220     -0.139009      -4.86939       4.86939       1449.71       1454.58    
  21  0.594690     -0.519714      -18.2052       18.2052       1526.77       1544.98    
  22  0.659508     -0.416262      -14.5813       14.5813       1564.37       1578.95    
  23  0.702023     -0.353789      -12.3930       12.3930       1561.28       1573.67    
  24  0.178121      -1.72529      -60.4356       60.4356       1571.48       1631.92    
  25  0.622271     -0.474379      -16.6171       16.6171       1563.69       1580.30    
  26  0.877027     -0.131217      -4.59643       4.59643       1567.29       1571.88    
  27  0.206753      -1.57623      -55.2142       55.2142       1587.39       1642.60    
  28  0.927381     -0.753912E-01  -2.64090       2.64090       1597.78       1600.43    
  29  0.610274     -0.493848      -17.2991       17.2991       1609.45       1626.75    
  30  0.453676     -0.790373      -27.6861       27.6861       1597.91       1625.60    
  31  0.203335      -1.59290      -55.7980       55.7980       1590.93       1646.73    
  32  0.558786     -0.581989      -20.3866       20.3866       1529.84       1550.23    
  33  0.685013     -0.378317      -13.2522       13.2522       1610.66       1623.91    
  34  0.753574     -0.282929      -9.91077       9.91077       1618.25       1628.16    
  35  0.736990E-01  -2.60777      -91.3480       91.3480       1613.45       1704.80    
  36  0.719848     -0.328716      -11.5147       11.5147       1556.76       1568.28    
  37  0.177345E-01  -4.03224      -141.246       141.246       1661.38       1802.62    
  38  0.277334E-01  -3.58512      -125.584       125.584       1672.43       1798.01    
  39  0.228604      -1.47576      -51.6948       51.6948       1655.48       1707.17    
  40  0.874609     -0.133979      -4.69317       4.69317       1588.30       1592.99    
  41  0.875699     -0.132733      -4.64954       4.64954       1660.61       1665.26    
  42  0.540874     -0.614569      -21.5279       21.5279       1709.82       1731.34    
  43  0.343108E-01  -3.37230      -118.129       118.129       1694.67       1812.80    
  44  0.982551     -0.176027E-01 -0.616610      0.616610       1689.97       1690.59    
  45  0.201823      -1.60037      -56.0596       56.0596       1655.87       1711.93    
  46  0.116838      -2.14697      -75.2067       75.2067       1758.77       1833.98    
  47  0.520586     -0.652800      -22.8671       22.8671       1747.61       1770.47    
  48  0.515528     -0.662563      -23.2091       23.2091       1742.17       1765.38    
  49  0.814407     -0.205295      -7.19132       7.19132       1707.38       1714.57    
  50  0.436930     -0.827981      -29.0035       29.0035       1776.26       1805.27    
  51  0.802441     -0.220097      -7.70981       7.70981       1601.22       1608.93    
loop,thermsimp(1:2)       52   30.2970       40.4502    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    258       1510.27          0.87          1.11         21.89          0.21          0.05         24.12
Just calling func    0   0         24.13


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1510.27
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    35.0292               301
loop is:       52
neval is:      257
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       52      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    560.467      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    35.0292               301
loop is:       53
neval is:      257


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      301
neval,tstepnext:      257     301

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.340866E-01  -3.37885      -118.358       118.358       1305.70       1424.05    
   2  0.714674     -0.335928      -11.7673       11.7673       1349.50       1361.27    
   3  0.977792     -0.224587E-01 -0.786711      0.786711       1439.46       1440.25    
   4  0.771231     -0.259767      -9.09944       9.09944       1440.10       1449.20    
   5  0.265148      -1.32747      -46.5002       46.5002       1436.80       1483.30    
   6  0.559491     -0.580728      -20.3424       20.3424       1449.71       1470.05    
   7  0.934824E-01  -2.36998      -83.0186       83.0186       1442.39       1525.41    
   8  0.928182     -0.745278E-01  -2.61065       2.61065       1460.12       1462.73    
   9  0.464905     -0.765922      -26.8296       26.8296       1463.74       1490.57    
  10  0.871919     -0.137059      -4.80105       4.80105       1456.12       1460.92    
  11  0.982233     -0.179265E-01 -0.627950      0.627950       1462.36       1462.99    
  12  0.426376     -0.852433      -29.8601       29.8601       1497.52       1527.38    
  13  0.471128E-01  -3.05521      -107.022       107.022       1443.32       1550.35    
  14  0.686439     -0.376238      -13.1793       13.1793       1454.77       1467.95    
  15  0.117826      -2.13855      -74.9116       74.9116       1504.88       1579.80    
  16  0.756878E-01  -2.58114      -90.4153       90.4153       1490.39       1580.81    
  17  0.196211      -1.62856      -57.0473       57.0473       1526.77       1583.82    
  18  0.431930     -0.839491      -29.4067       29.4067       1466.62       1496.03    
  19  0.707794     -0.345602      -12.1062       12.1062       1529.84       1541.95    
  20  0.174358E-01  -4.04923      -141.841       141.841       1502.52       1644.36    
  21  0.267976      -1.31686      -46.1285       46.1285       1556.76       1602.89    
  22  0.793866     -0.230841      -8.08617       8.08617       1544.91       1552.99    
  23  0.135848      -1.99622      -69.9261       69.9261       1567.29       1637.21    
  24  0.663958     -0.409536      -14.3457       14.3457       1561.28       1575.63    
  25  0.281101      -1.26904      -44.4535       44.4535       1564.37       1608.82    
  26  0.606466     -0.500106      -17.5183       17.5183       1563.69       1581.20    
  27  0.940056     -0.618158E-01  -2.16536       2.16536       1489.63       1491.80    
  28  0.124106      -2.08662      -73.0927       73.0927       1588.30       1661.39    
  29  0.205090      -1.58431      -55.4970       55.4970       1597.78       1653.28    
  30  0.852960     -0.159043      -5.57115       5.57115       1601.22       1606.80    
  31  0.241701      -1.42005      -49.7433       49.7433       1610.66       1660.40    
  32  0.744368     -0.295220      -10.3413       10.3413       1597.91       1608.26    
  33  0.279909      -1.27329      -44.6024       44.6024       1609.45       1654.06    
  34  0.142971      -1.94511      -68.1358       68.1358       1618.25       1686.38    
  35  0.367233      -1.00176      -35.0908       35.0908       1571.48       1606.57    
  36  0.839044     -0.175493      -6.14737       6.14737       1587.39       1593.53    
  37  0.762369     -0.271325      -9.50431       9.50431       1590.93       1600.43    
  38  0.414704     -0.880189      -30.8323       30.8323       1660.61       1691.44    
  39  0.294445      -1.22266      -42.8289       42.8289       1689.97       1732.80    
  40  0.296874      -1.21445      -42.5411       42.5411       1613.45       1655.99    
  41  0.834777     -0.180590      -6.32594       6.32594       1655.48       1661.81    
  42  0.399354     -0.917907      -32.1536       32.1536       1655.87       1688.03    
  43  0.948666     -0.526981E-01  -1.84597       1.84597       1707.38       1709.22    
  44  0.306553E-01  -3.48495      -122.075       122.075       1709.82       1831.89    
  45  0.768324E-01  -2.56613      -89.8895       89.8895       1742.17       1832.06    
  46  0.723813     -0.323222      -11.3222       11.3222       1747.61       1758.93    
  47  0.912222     -0.918720E-01  -3.21820       3.21820       1672.43       1675.65    
  48  0.846322     -0.166855      -5.84479       5.84479       1661.38       1667.22    
  49  0.704090     -0.350850      -12.2900       12.2900       1776.26       1788.55    
  50  0.443839     -0.812294      -28.4540       28.4540       1694.67       1723.13    
  51  0.790462     -0.235137      -8.23667       8.23667       1510.27       1518.50    
loop,thermsimp(1:2)       53   118.358       11.7673    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    259       1436.17          0.87          1.10         22.01          0.14          0.05         24.17
Just calling func    0   0         24.17


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1436.17
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    35.0292               301
loop is:       53
neval is:      258
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       53      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    560.467      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    35.0292               301
loop is:       54
neval is:      258


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      301
neval,tstepnext:      258     301

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.615000     -0.486133      -17.0289       17.0289       1349.50       1366.53    
   2  0.438442     -0.824528      -28.8826       28.8826       1305.70       1334.58    
   3  0.666371     -0.405908      -14.2187       14.2187       1439.46       1453.68    
   4  0.419797     -0.867984      -30.4048       30.4048       1440.10       1470.50    
   5  0.662493     -0.411746      -14.4231       14.4231       1456.12       1470.54    
   6  0.261021      -1.34315      -47.0496       47.0496       1460.12       1507.17    
   7  0.451731     -0.794667      -27.8366       27.8366       1462.36       1490.20    
   8  0.858047     -0.153096      -5.36284       5.36284       1454.77       1460.14    
   9  0.678039     -0.388550      -13.6106       13.6106       1449.71       1463.32    
  10  0.257304      -1.35750      -47.5520       47.5520       1436.80       1484.35    
  11  0.379774     -0.968178      -33.9145       33.9145       1463.74       1497.66    
  12  0.200314      -1.60787      -56.3224       56.3224       1489.63       1545.95    
  13  0.702955E-01  -2.65505      -93.0042       93.0042       1466.62       1559.62    
  14  0.846007     -0.167228      -5.85786       5.85786       1510.27       1516.12    
  15  0.692217     -0.367856      -12.8857       12.8857       1442.39       1455.27    
  16  0.830541     -0.185678      -6.50416       6.50416       1497.52       1504.02    
  17  0.162133E-02  -6.42451      -225.045       225.045       1529.84       1754.89    
  18  0.829216     -0.187275      -6.56008       6.56008       1443.32       1449.88    
  19  0.464918     -0.765894      -26.8287       26.8287       1544.91       1571.74    
  20  0.204157      -1.58887      -55.6567       55.6567       1561.28       1616.94    
  21  0.203429      -1.59244      -55.7818       55.7818       1504.88       1560.67    
  22  0.403935     -0.906500      -31.7540       31.7540       1490.39       1522.15    
  23  0.508037     -0.677201      -23.7218       23.7218       1563.69       1587.41    
  24  0.337702      -1.08559      -38.0274       38.0274       1526.77       1564.80    
  25  0.375672     -0.979039      -34.2950       34.2950       1587.39       1621.68    
  26  0.218755      -1.51980      -53.2375       53.2375       1590.93       1644.17    
  27  0.803422     -0.218876      -7.66704       7.66704       1556.76       1564.43    
  28  0.324101      -1.12670      -39.4675       39.4675       1571.48       1610.95    
  29  0.804001     -0.218155      -7.64178       7.64178       1601.22       1608.87    
  30  0.727676     -0.317899      -11.1358       11.1358       1597.91       1609.05    
  31  0.769479     -0.262042      -9.17913       9.17913       1564.37       1573.55    
  32  0.632293     -0.458402      -16.0575       16.0575       1567.29       1583.34    
  33  0.300459      -1.20244      -42.1206       42.1206       1502.52       1544.64    
  34  0.567362     -0.566759      -19.8531       19.8531       1597.78       1617.64    
  35  0.803345     -0.218971      -7.67039       7.67039       1609.45       1617.12    
  36  0.764706     -0.268264      -9.39709       9.39709       1613.45       1622.85    
  37  0.159444      -1.83606      -64.3158       64.3158       1610.66       1674.97    
  38  0.951670     -0.495367E-01  -1.73523       1.73523       1588.30       1590.03    
  39  0.769198     -0.262407      -9.19190       9.19190       1655.48       1664.67    
  40  0.916532     -0.871588E-01  -3.05310       3.05310       1661.38       1664.43    
  41  0.146117E-01  -4.22593      -148.031       148.031       1672.43       1820.46    
  42  0.196164      -1.62880      -57.0557       57.0557       1618.25       1675.30    
  43  0.399482     -0.917586      -32.1423       32.1423       1655.87       1688.02    
  44  0.646732     -0.435823      -15.2665       15.2665       1660.61       1675.88    
  45  0.207790      -1.57122      -55.0388       55.0388       1707.38       1762.42    
  46  0.276388      -1.28595      -45.0458       45.0458       1694.67       1739.72    
  47  0.410494     -0.890394      -31.1898       31.1898       1689.97       1721.16    
  48  0.437747     -0.826115      -28.9381       28.9381       1747.61       1776.54    
  49  0.414886     -0.879752      -30.8170       30.8170       1776.26       1807.08    
  50  0.453890     -0.789901      -27.6696       27.6696       1709.82       1737.49    
  51  0.141383      -1.95628      -68.5271       68.5271       1436.17       1504.70    
loop,thermsimp(1:2)       54   17.0289       28.8826    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    260       1434.31          0.87          1.09         21.91          0.27          0.05         24.20
Just calling func    0   0         24.19


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1434.31
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    35.0292               301
loop is:       54
neval is:      259
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       54      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    560.467      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    35.0292               301
loop is:       55
neval is:      259


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      301
neval,tstepnext:      259     301

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.626103     -0.468241      -16.4021       16.4021       1305.70       1322.10    
   2  0.909442     -0.949244E-01  -3.32513       3.32513       1349.50       1352.82    
   3  0.449837     -0.798870      -27.9838       27.9838       1443.32       1471.31    
   4  0.761598     -0.272336      -9.53972       9.53972       1439.46       1449.00    
   5  0.706800     -0.347007      -12.1554       12.1554       1442.39       1454.54    
   6  0.214343      -1.54018      -53.9512       53.9512       1454.77       1508.72    
   7  0.855661     -0.155881      -5.46038       5.46038       1449.71       1455.17    
   8  0.432924E-01  -3.13978      -109.984       109.984       1440.10       1550.08    
   9  0.902784     -0.102271      -3.58249       3.58249       1456.12       1459.70    
  10  0.706965     -0.346774      -12.1472       12.1472       1436.80       1448.95    
  11  0.826667     -0.190354      -6.66793       6.66793       1462.36       1469.03    
  12  0.824436     -0.193055      -6.76258       6.76258       1463.74       1470.51    
  13  0.442772     -0.814700      -28.5383       28.5383       1497.52       1526.05    
  14  0.416355     -0.876217      -30.6932       30.6932       1436.17       1466.87    
  15  0.268464      -1.31504      -46.0648       46.0648       1460.12       1506.18    
  16  0.779742     -0.248792      -8.71498       8.71498       1510.27       1518.98    
  17  0.406799E-01  -3.20202      -112.164       112.164       1490.39       1602.56    
  18  0.975397     -0.249106E-01 -0.872599      0.872599       1502.52       1503.40    
  19  0.425150E-01  -3.15790      -110.619       110.619       1489.63       1600.25    
  20  0.302481      -1.19574      -41.8857       41.8857       1466.62       1508.51    
  21  0.732033     -0.311930      -10.9267       10.9267       1504.88       1515.81    
  22  0.774561     -0.255459      -8.94854       8.94854       1556.76       1565.71    
  23  0.899897     -0.105475      -3.69470       3.69470       1526.77       1530.47    
  24  0.549624     -0.598520      -20.9657       20.9657       1544.91       1565.87    
  25  0.143543      -1.94112      -67.9959       67.9959       1564.37       1632.36    
  26  0.229055      -1.47379      -51.6259       51.6259       1567.29       1618.91    
  27  0.334206      -1.09600      -38.3919       38.3919       1563.69       1602.08    
  28  0.301620      -1.19859      -41.9856       41.9856       1588.30       1630.28    
  29  0.856030     -0.155449      -5.44527       5.44527       1601.22       1606.67    
  30  0.978878     -0.213482E-01 -0.747810      0.747810       1597.91       1598.66    
  31  0.890790E-01  -2.41823      -84.7088       84.7088       1571.48       1656.19    
  32  0.275076      -1.29071      -45.2124       45.2124       1561.28       1606.49    
  33  0.506865     -0.679511      -23.8027       23.8027       1609.45       1633.26    
  34  0.628553     -0.464334      -16.2653       16.2653       1597.78       1614.05    
  35  0.787972     -0.238293      -8.34721       8.34721       1587.39       1595.73    
  36  0.746168     -0.292804      -10.2567       10.2567       1613.45       1623.71    
  37  0.116954      -2.14598      -75.1719       75.1719       1590.93       1666.10    
  38  0.245368      -1.40500      -49.2159       49.2159       1661.38       1710.59    
  39  0.873952     -0.134729      -4.71946       4.71946       1655.48       1660.20    
  40  0.850596     -0.161818      -5.66835       5.66835       1610.66       1616.33    
  41  0.455763     -0.785783      -27.5254       27.5254       1618.25       1645.77    
  42  0.984333     -0.157910E-01 -0.553146      0.553146       1660.61       1661.16    
  43  0.956700     -0.442655E-01  -1.55059       1.55059       1655.87       1657.42    
  44  0.186161      -1.68114      -58.8891       58.8891       1689.97       1748.86    
  45  0.791379     -0.233979      -8.19609       8.19609       1709.82       1718.01    
  46  0.262937      -1.33584      -46.7935       46.7935       1694.67       1741.47    
  47  0.115228E-01  -4.46342      -156.350       156.350       1529.84       1686.19    
  48  0.324912      -1.12420      -39.3798       39.3798       1707.38       1746.76    
  49  0.164288      -1.80613      -63.2674       63.2674       1747.61       1810.87    
  50  0.334193E-02  -5.70121      -199.709       199.709       1776.26       1975.97    
  51  0.189130      -1.66532      -58.3348       58.3348       1434.31       1492.64    
loop,thermsimp(1:2)       55   16.4021       3.32513    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    261       1636.91          0.87          1.11         22.05          0.19          0.05         24.26
Just calling func    0   0         24.26


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  260    1636.9       0.5850     -2.293      3.338     -102.6     0.4716    
                       1.647      1.682     -99.70      3.515      1.088    

                       3.278     -2.132      1.540      7000.      7000.    

                      -3.255      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -8.321     -5.535     -6.651      7.886    

                      -12.91     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.5711E-01 0.1996    -0.2453E-01 0.7060E-01

                     -0.2486    -0.3671E-01 0.2031     0.1033     0.1040    



                     -0.6468    -0.8423      0.000     0.3608E-01-0.5192E-01

                     -0.1954E-01 0.2181    -0.7116    -0.2896E-01 0.3808    

                      0.8215E-01 0.8327E-01-0.5716     -1.114      7000.    



                     -0.2390    -0.6590     -2.142     -1.982    -0.3807    

                     -0.3252      9.142      8.758    -0.1672E+05 -6.000    

                     -0.6442     -2.051      9.490      8.932    -0.1969E+05



                      -6.000     0.9681    -0.3564      8.912      9.129    

                     -0.1944E+05 -6.000    -0.6439    -0.2953      9.177    

                       8.864    -0.1891E+05 -6.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1636.91
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    35.0292               301
loop is:       55
neval is:      260
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       55      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    560.467      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    35.0292               301
loop is:       56
neval is:      260


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      301
neval,tstepnext:      260     301

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.245842      -1.40307      -49.1483       49.1483       1305.70       1354.84    
   2  0.963480     -0.372033E-01  -1.30320       1.30320       1349.50       1350.80    
   3  0.633143     -0.457059      -16.0104       16.0104       1436.80       1452.81    
   4  0.939850E-02  -4.66721      -163.489       163.489       1439.46       1602.95    
   5  0.796978     -0.226928      -7.94912       7.94912       1442.39       1450.34    
   6  0.229125      -1.47349      -51.6152       51.6152       1449.71       1501.32    
   7  0.926958     -0.758467E-01  -2.65685       2.65685       1456.12       1458.78    
   8  0.687512     -0.374676      -13.1246       13.1246       1436.17       1449.30    
   9  0.695030     -0.363800      -12.7436       12.7436       1462.36       1475.10    
  10  0.900736     -0.104543      -3.66205       3.66205       1463.74       1467.41    
  11  0.867179     -0.142510      -4.99201       4.99201       1443.32       1448.32    
  12  0.879271     -0.128662      -4.50693       4.50693       1434.31       1438.81    
  13  0.197557      -1.62173      -56.8079       56.8079       1502.52       1559.33    
  14  0.790701     -0.234835      -8.22608       8.22608       1460.12       1468.34    
  15  0.807456     -0.213867      -7.49158       7.49158       1466.62       1474.11    
  16  0.688117     -0.373796      -13.0938       13.0938       1454.77       1467.87    
  17  0.227000      -1.48280      -51.9415       51.9415       1504.88       1556.83    
  18  0.374715     -0.981589      -34.3843       34.3843       1510.27       1544.65    
  19  0.176077      -1.73683      -60.8399       60.8399       1497.52       1558.36    
  20  0.446126E-01  -3.10974      -108.932       108.932       1526.77       1635.70    
  21  0.997763E-01  -2.30482      -80.7362       80.7362       1440.10       1520.83    
  22  0.142978E-01  -4.24765      -148.792       148.792       1556.76       1705.56    
  23  0.652216     -0.427379      -14.9708       14.9708       1544.91       1559.88    
  24  0.909797     -0.945339E-01  -3.31145       3.31145       1587.39       1590.70    
  25  0.145015      -1.93092      -67.6386       67.6386       1597.91       1665.55    
  26  0.189723      -1.66219      -58.2253       58.2253       1489.63       1547.86    
  27  0.260997      -1.34324      -47.0528       47.0528       1563.69       1610.74    
  28  0.167755      -1.78525      -62.5358       62.5358       1490.39       1552.93    
  29  0.148939      -1.90422      -66.7033       66.7033       1561.28       1627.98    
  30  0.209474      -1.56315      -54.7561       54.7561       1601.22       1655.98    
  31  0.594522     -0.519998      -18.2151       18.2151       1597.78       1616.00    
  32  0.401703     -0.912043      -31.9481       31.9481       1610.66       1642.61    
  33  0.306469      -1.18264      -41.4270       41.4270       1567.29       1608.71    
  34  0.879335     -0.128589      -4.50437       4.50437       1613.45       1617.96    
  35  0.920707     -0.826134E-01  -2.89388       2.89388       1588.30       1591.19    
  36  0.215616      -1.53425      -53.7437       53.7437       1564.37       1618.11    
  37  0.821708     -0.196370      -6.87870       6.87870       1609.45       1616.33    
  38  0.935240     -0.669517E-01  -2.34526       2.34526       1618.25       1620.59    
  39  0.691932     -0.368268      -12.9001       12.9001       1571.48       1584.38    
  40  0.493152     -0.706938      -24.7635       24.7635       1655.87       1680.64    
  41  0.362160      -1.01567      -35.5781       35.5781       1655.48       1691.06    
  42  0.636318     -0.452056      -15.8352       15.8352       1660.61       1676.44    
  43  0.178369      -1.72390      -60.3869       60.3869       1590.93       1651.31    
  44  0.987372     -0.127089E-01 -0.445182      0.445182       1529.84       1530.29    
  45  0.557690     -0.583953      -20.4554       20.4554       1661.38       1681.83    
  46  0.434391     -0.833811      -29.2077       29.2077       1709.82       1739.02    
  47  0.759572     -0.275001      -9.63305       9.63305       1694.67       1704.31    
  48  0.578559     -0.547214      -19.1685       19.1685       1707.38       1726.55    
  49  0.262392      -1.33792      -46.8661       46.8661       1689.97       1736.84    
  50  0.615619     -0.485127      -16.9936       16.9936       1747.61       1764.60    
  51  0.580502     -0.543861      -19.0510       19.0510       1636.91       1655.96    
loop,thermsimp(1:2)       56   49.1483       1.30320    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    262       1500.51          0.88          1.11         22.34          0.23          0.05         24.62
Just calling func    0   0         24.61


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1500.51
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    35.0292               301
loop is:       56
neval is:      261
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       56      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    560.467      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    35.0292               301
loop is:       57
neval is:      261


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      301
neval,tstepnext:      261     301

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.303901      -1.19105      -41.7217       41.7217       1349.50       1391.22    
   2  0.729962     -0.314762      -11.0259       11.0259       1305.70       1316.72    
   3  0.788140     -0.238080      -8.33975       8.33975       1434.31       1442.65    
   4  0.718031     -0.331242      -11.6032       11.6032       1443.32       1454.93    
   5  0.603575     -0.504885      -17.6857       17.6857       1436.17       1453.86    
   6  0.287757      -1.24564      -43.6338       43.6338       1442.39       1486.02    
   7  0.690986     -0.369635      -12.9480       12.9480       1436.80       1449.75    
   8  0.976315     -0.239695E-01 -0.839633      0.839633       1456.12       1456.96    
   9  0.983892     -0.162393E-01 -0.568850      0.568850       1463.74       1464.31    
  10  0.858769     -0.152255      -5.33337       5.33337       1454.77       1460.11    
  11  0.968889     -0.316048E-01  -1.10709       1.10709       1460.12       1461.22    
  12  0.364921      -1.00807      -35.3120       35.3120       1466.62       1501.93    
  13  0.540930     -0.614466      -21.5243       21.5243       1462.36       1483.88    
  14  0.812278E-01  -2.51050      -87.9408       87.9408       1449.71       1537.65    
  15  0.919841     -0.835539E-01  -2.92683       2.92683       1440.10       1443.02    
  16  0.275462      -1.28930      -45.1633       45.1633       1529.84       1575.01    
  17  0.704362     -0.350463      -12.2765       12.2765       1510.27       1522.54    
  18  0.896809     -0.108913      -3.81513       3.81513       1489.63       1493.45    
  19  0.166873      -1.79052      -62.7207       62.7207       1490.39       1553.11    
  20  0.927791E-02  -4.68012      -163.941       163.941       1504.88       1668.83    
  21  0.906733     -0.979074E-01  -3.42962       3.42962       1497.52       1500.95    
  22  0.575421     -0.552654      -19.3590       19.3590       1502.52       1521.88    
  23  0.975069     -0.252469E-01 -0.884381      0.884381       1544.91       1545.79    
  24  0.610094     -0.494143      -17.3094       17.3094       1571.48       1588.79    
  25  0.823028     -0.194765      -6.82245       6.82245       1587.39       1594.21    
  26  0.709022     -0.343869      -12.0455       12.0455       1588.30       1600.34    
  27  0.956893     -0.440633E-01  -1.54350       1.54350       1439.46       1441.00    
  28  0.897850E-01  -2.41034      -84.4322       84.4322       1567.29       1651.72    
  29  0.836996     -0.177936      -6.23297       6.23297       1563.69       1569.92    
  30  0.688664     -0.373001      -13.0659       13.0659       1597.78       1610.85    
  31  0.587454     -0.531957      -18.6340       18.6340       1609.45       1628.09    
  32  0.880970     -0.126731      -4.43929       4.43929       1613.45       1617.89    
  33  0.506724     -0.679789      -23.8125       23.8125       1564.37       1588.18    
  34  0.802262     -0.220320      -7.71763       7.71763       1618.25       1625.96    
  35  0.764787E-01  -2.57074      -90.0511       90.0511       1561.28       1651.33    
  36  0.907101     -0.975014E-01  -3.41540       3.41540       1526.77       1530.19    
  37  0.797350     -0.226461      -7.93277       7.93277       1610.66       1618.59    
  38  0.257375      -1.35722      -47.5423       47.5423       1590.93       1638.47    
  39  0.643190     -0.441315      -15.4589       15.4589       1636.91       1652.37    
  40  0.513768     -0.665984      -23.3289       23.3289       1601.22       1624.55    
  41  0.850264     -0.162208      -5.68203       5.68203       1597.91       1603.60    
  42  0.200819      -1.60535      -56.2342       56.2342       1660.61       1716.84    
  43  0.331940      -1.10280      -38.6302       38.6302       1655.87       1694.50    
  44  0.900490     -0.104816      -3.67162       3.67162       1661.38       1665.05    
  45  0.618957     -0.479719      -16.8042       16.8042       1655.48       1672.28    
  46  0.395756     -0.926956      -32.4706       32.4706       1694.67       1727.14    
  47  0.528166     -0.638345      -22.3607       22.3607       1556.76       1579.13    
  48  0.586635     -0.533352      -18.6829       18.6829       1707.38       1726.06    
  49  0.705559     -0.348765      -12.2170       12.2170       1689.97       1702.19    
  50  0.191018      -1.65539      -57.9869       57.9869       1709.82       1767.80    
  51  0.581133     -0.542775      -19.0130       19.0130       1500.51       1519.52    
loop,thermsimp(1:2)       57   41.7217       11.0259    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    263       1706.47          0.87          1.11         21.90          0.18          0.05         24.10
Just calling func    0   0         24.10


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1706.47
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    35.0292               301
loop is:       57
neval is:      262
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       57      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    560.467      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    35.0292               301
loop is:       58
neval is:      262


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      301
neval,tstepnext:      262     301

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.530208     -0.634486      -22.2256       22.2256       1305.70       1327.92    
   2  0.175946E-01  -4.04016      -141.524       141.524       1349.50       1491.02    
   3  0.419998     -0.867504      -30.3880       30.3880       1439.46       1469.85    
   4  0.448197E-01  -3.10511      -108.769       108.769       1434.31       1543.08    
   5  0.501784     -0.689586      -24.1557       24.1557       1440.10       1464.25    
   6  0.858173     -0.152949      -5.35770       5.35770       1436.80       1442.16    
   7  0.101932      -2.28345      -79.9876       79.9876       1436.17       1516.16    
   8  0.453268     -0.791273      -27.7177       27.7177       1443.32       1471.04    
   9  0.128092      -2.05501      -71.9853       71.9853       1456.12       1528.10    
  10  0.779644     -0.248918      -8.71939       8.71939       1454.77       1463.49    
  11  0.769943E-01  -2.56402      -89.8158       89.8158       1460.12       1549.93    
  12  0.140214      -1.96458      -68.8178       68.8178       1463.74       1532.56    
  13  0.571588     -0.559337      -19.5931       19.5931       1462.36       1481.95    
  14  0.455096     -0.787247      -27.5766       27.5766       1442.39       1469.97    
  15  0.594240     -0.520471      -18.2317       18.2317       1489.63       1507.86    
  16  0.833288     -0.182376      -6.38848       6.38848       1497.52       1503.91    
  17  0.807090E-01  -2.51691      -88.1652       88.1652       1466.62       1554.79    
  18  0.430313     -0.843242      -29.5381       29.5381       1500.51       1530.05    
  19  0.990463     -0.958277E-02 -0.335677      0.335677       1502.52       1502.86    
  20  0.907906     -0.966144E-01  -3.38433       3.38433       1510.27       1513.65    
  21  0.607469     -0.498455      -17.4605       17.4605       1526.77       1544.23    
  22  0.927102     -0.756916E-01  -2.65142       2.65142       1449.71       1452.36    
  23  0.379122     -0.969896      -33.9747       33.9747       1544.91       1578.88    
  24  0.183121E-01  -4.00019      -140.124       140.124       1490.39       1630.52    
  25  0.561966     -0.576313      -20.1878       20.1878       1563.69       1583.87    
  26  0.638772     -0.448208      -15.7004       15.7004       1529.84       1545.54    
  27  0.234202      -1.45157      -50.8474       50.8474       1556.76       1607.61    
  28  0.257221      -1.35782      -47.5633       47.5633       1564.37       1611.93    
  29  0.688379     -0.373416      -13.0805       13.0805       1571.48       1584.56    
  30  0.360237E-01  -3.32358      -116.422       116.422       1587.39       1703.81    
  31  0.849177     -0.163487      -5.72683       5.72683       1588.30       1594.02    
  32  0.324868E-01  -3.42692      -120.042       120.042       1597.91       1717.96    
  33  0.216483E-01  -3.83283      -134.261       134.261       1597.78       1732.05    
  34  0.794095     -0.230552      -8.07605       8.07605       1613.45       1621.53    
  35  0.453180     -0.791465      -27.7244       27.7244       1610.66       1638.38    
  36  0.286278      -1.25079      -43.8143       43.8143       1601.22       1645.04    
  37  0.931500     -0.709590E-01  -2.48564       2.48564       1618.25       1620.73    
  38  0.483424     -0.726861      -25.4614       25.4614       1609.45       1634.91    
  39  0.782276     -0.245547      -8.60133       8.60133       1590.93       1599.53    
  40  0.976661     -0.236156E-01 -0.827235      0.827235       1561.28       1562.11    
  41  0.707981     -0.345338      -12.0969       12.0969       1567.29       1579.38    
  42  0.101993      -2.28285      -79.9665       79.9665       1636.91       1716.88    
  43  0.690974E-01  -2.67224      -93.6064       93.6064       1661.38       1754.98    
  44  0.767576E-01  -2.56710      -89.9236       89.9236       1504.88       1594.81    
  45  0.584825     -0.536443      -18.7912       18.7912       1655.48       1674.27    
  46  0.588828     -0.529621      -18.5522       18.5522       1655.87       1674.43    
  47  0.894562     -0.111421      -3.90299       3.90299       1689.97       1693.87    
  48  0.260723      -1.34430      -47.0897       47.0897       1660.61       1707.70    
  49  0.773456E-01  -2.55947      -89.6563       89.6563       1707.38       1797.03    
  50  0.848651E-01  -2.46669      -86.4063       86.4063       1694.67       1781.08    
  51  0.992803     -0.722305E-02 -0.253018      0.253018       1706.47       1706.73    
loop,thermsimp(1:2)       58   22.2256       141.524    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    264       1998.03          0.87          1.11         22.01          0.11          0.05         24.14
Just calling func    0   0         24.15


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    265       1558.96          0.87          1.11         21.95          0.11          0.05         24.09
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3   1558.96
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    35.0292               301
loop is:       58
neval is:      264
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       58      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    560.467      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    35.0292               301
loop is:       59
neval is:      264


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      301
neval,tstepnext:      264     301

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.946919     -0.545412E-01  -1.91054       1.91054       1305.70       1307.61    
   2  0.224221      -1.49512      -52.3729       52.3729       1436.80       1489.17    
   3  0.699642     -0.357186      -12.5119       12.5119       1449.71       1462.22    
   4  0.490916     -0.711482      -24.9227       24.9227       1454.77       1479.70    
   5  0.204251      -1.58840      -55.6405       55.6405       1440.10       1495.74    
   6  0.356522      -1.03136      -36.1277       36.1277       1439.46       1475.59    
   7  0.745938     -0.293113      -10.2675       10.2675       1442.39       1452.66    
   8  0.451533     -0.795107      -27.8520       27.8520       1443.32       1471.18    
   9  0.101038      -2.29226      -80.2961       80.2961       1462.36       1542.66    
  10  0.826978     -0.189977      -6.65475       6.65475       1349.50       1356.15    
  11  0.212337      -1.54958      -54.2806       54.2806       1502.52       1556.80    
  12  0.490540     -0.712248      -24.9495       24.9495       1497.52       1522.47    
  13  0.672078     -0.397381      -13.9199       13.9199       1489.63       1503.55    
  14  0.690580     -0.370223      -12.9686       12.9686       1510.27       1523.23    
  15  0.513190     -0.667108      -23.3683       23.3683       1436.17       1459.54    
  16  0.268393      -1.31530      -46.0741       46.0741       1456.12       1502.19    
  17  0.896898     -0.108813      -3.81163       3.81163       1500.51       1504.32    
  18  0.911953     -0.921674E-01  -3.22855       3.22855       1463.74       1466.97    
  19  0.355703      -1.03366      -36.2082       36.2082       1434.31       1470.52    
  20  0.293818      -1.22479      -42.9036       42.9036       1526.77       1569.67    
  21  0.713392     -0.337724      -11.8302       11.8302       1529.84       1541.67    
  22  0.660627     -0.414565      -14.5219       14.5219       1460.12       1474.64    
  23  0.795097     -0.229291      -8.03188       8.03188       1466.62       1474.65    
  24  0.919484     -0.839428E-01  -2.94045       2.94045       1561.28       1564.22    
  25  0.976382     -0.239014E-01 -0.837246      0.837246       1544.91       1545.74    
  26  0.922195     -0.809991E-01  -2.83733       2.83733       1567.29       1570.12    
  27  0.436062     -0.829970      -29.0732       29.0732       1563.69       1592.76    
  28  0.271848      -1.30251      -45.6260       45.6260       1571.48       1617.11    
  29  0.389360     -0.943252      -33.0414       33.0414       1588.30       1621.34    
  30  0.314178E-01  -3.46038      -121.214       121.214       1504.88       1626.10    
  31  0.545460     -0.606126      -21.2321       21.2321       1590.93       1612.16    
  32  0.925479E-01  -2.38003      -83.3706       83.3706       1556.76       1640.13    
  33  0.971973     -0.284273E-01 -0.995786      0.995786       1564.37       1565.36    
  34  0.403500     -0.907578      -31.7917       31.7917       1618.25       1650.04    
  35  0.392926     -0.934133      -32.7220       32.7220       1613.45       1646.17    
  36  0.718758     -0.330230      -11.5677       11.5677       1490.39       1501.96    
  37  0.746082     -0.292920      -10.2608       10.2608       1609.45       1619.71    
  38  0.353478      -1.03993      -36.4281       36.4281       1610.66       1647.09    
  39  0.843229     -0.170517      -5.97307       5.97307       1601.22       1607.20    
  40  0.388011     -0.946720      -33.1629       33.1629       1655.48       1688.64    
  41  0.969569     -0.309034E-01  -1.08252       1.08252       1655.87       1656.96    
  42  0.441380E-01  -3.12043      -109.306       109.306       1689.97       1799.28    
  43  0.533000     -0.629233      -22.0415       22.0415       1587.39       1609.43    
  44  0.288396      -1.24342      -43.5561       43.5561       1706.47       1750.03    
  45  0.683115     -0.381092      -13.3493       13.3493       1660.61       1673.96    
  46  0.339511      -1.08025      -37.8403       37.8403       1636.91       1674.75    
  47  0.150420E-01  -4.19691      -147.014       147.014       1597.91       1744.93    
  48  0.141026      -1.95881      -68.6155       68.6155       1597.78       1666.40    
  49  0.421666     -0.863541      -30.2492       30.2492       1661.38       1691.62    
  50  0.953496     -0.476201E-01  -1.66810       1.66810       1694.67       1696.34    
  51  0.966647     -0.339215E-01  -1.18824       1.18824       1558.96       1560.15    
loop,thermsimp(1:2)       59   1.91054       52.3729    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    266       2005.73          0.87          1.11         21.85          0.23          0.05         24.11
Just calling func    0   0         24.10


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    267       1603.25          0.87          1.11         22.02          0.12          0.05         24.17
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3   1603.25
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    35.0292               301
loop is:       59
neval is:      266
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       59      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    560.467      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    35.0292               301
loop is:       60
neval is:      266


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      301
neval,tstepnext:      266     301

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.347122      -1.05808      -37.0637       37.0637       1305.70       1342.76    
   2  0.605757     -0.501276      -17.5593       17.5593       1349.50       1367.06    
   3  0.690633     -0.370146      -12.9659       12.9659       1442.39       1455.35    
   4  0.400665     -0.914628      -32.0387       32.0387       1436.17       1468.21    
   5  0.862165     -0.148309      -5.19514       5.19514       1449.71       1454.90    
   6  0.874011     -0.134662      -4.71711       4.71711       1463.74       1468.46    
   7  0.389525     -0.942826      -33.0265       33.0265       1434.31       1467.33    
   8  0.102225E-01  -4.58317      -160.545       160.545       1443.32       1603.87    
   9  0.102697      -2.27597      -79.7255       79.7255       1460.12       1539.84    
  10  0.818271     -0.200561      -7.02550       7.02550       1466.62       1473.65    
  11  0.888768     -0.117920      -4.13063       4.13063       1439.46       1443.59    
  12  0.539210     -0.617651      -21.6358       21.6358       1454.77       1476.41    
  13  0.317914      -1.14597      -40.1426       40.1426       1436.80       1476.94    
  14  0.437422     -0.826857      -28.9641       28.9641       1440.10       1469.06    
  15  0.925263     -0.776773E-01  -2.72098       2.72098       1490.39       1493.11    
  16  0.422436     -0.861717      -30.1853       30.1853       1456.12       1486.30    
  17  0.965248     -0.353697E-01  -1.23897       1.23897       1489.63       1490.87    
  18  0.771278     -0.259706      -9.09729       9.09729       1500.51       1509.61    
  19  0.902488     -0.102600      -3.59400       3.59400       1497.52       1501.11    
  20  0.512816     -0.667839      -23.3939       23.3939       1510.27       1533.66    
  21  0.915966     -0.877758E-01  -3.07472       3.07472       1529.84       1532.92    
  22  0.612605     -0.490035      -17.1655       17.1655       1462.36       1479.53    
  23  0.323528      -1.12847      -39.5294       39.5294       1544.91       1584.44    
  24  0.206646      -1.57675      -55.2323       55.2323       1502.52       1557.75    
  25  0.481057     -0.731769      -25.6333       25.6333       1558.96       1584.60    
  26  0.287887E-01  -3.54777      -124.276       124.276       1561.28       1685.56    
  27  0.996968     -0.303648E-02 -0.106366      0.106366       1564.37       1564.47    
  28  0.132770      -2.01914      -70.7288       70.7288       1526.77       1597.50    
  29  0.716038     -0.334023      -11.7005       11.7005       1567.29       1578.99    
  30  0.229552      -1.47162      -51.5499       51.5499       1563.69       1615.24    
  31  0.236358      -1.44241      -50.5264       50.5264       1601.22       1651.75    
  32  0.542780     -0.611051      -21.4046       21.4046       1587.39       1608.79    
  33  0.875156     -0.133353      -4.67124       4.67124       1590.93       1595.60    
  34  0.988730     -0.113343E-01 -0.397032      0.397032       1571.48       1571.88    
  35  0.244332      -1.40923      -49.3641       49.3641       1609.45       1658.82    
  36  0.659246     -0.416659      -14.5952       14.5952       1588.30       1602.89    
  37  0.457872     -0.781166      -27.3636       27.3636       1504.88       1532.25    
  38  0.380652E-01  -3.26846      -114.491       114.491       1556.76       1671.26    
  39  0.358843      -1.02487      -35.9004       35.9004       1613.45       1649.35    
  40  0.846233     -0.166960      -5.84848       5.84848       1610.66       1616.51    
  41  0.359308      -1.02358      -35.8551       35.8551       1618.25       1654.10    
  42  0.533329     -0.628617      -22.0200       22.0200       1655.87       1677.89    
  43  0.645289     -0.438058      -15.3448       15.3448       1597.78       1613.13    
  44  0.311850      -1.16523      -40.8171       40.8171       1660.61       1701.43    
  45  0.270084      -1.30902      -45.8540       45.8540       1636.91       1682.77    
  46  0.530313     -0.634287      -22.2186       22.2186       1655.48       1677.70    
  47  0.975874     -0.244213E-01 -0.855459      0.855459       1661.38       1662.23    
  48  0.313811      -1.15896      -40.5976       40.5976       1694.67       1735.27    
  49  0.932688     -0.696844E-01  -2.44099       2.44099       1597.91       1600.36    
  50  0.357359      -1.02901      -36.0456       36.0456       1706.47       1742.52    
  51  0.545837     -0.605435      -21.2079       21.2079       1603.25       1624.46    
loop,thermsimp(1:2)       60   37.0637       17.5593    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    268       1726.08          0.88          1.11         21.94          0.21          0.04         24.18
Just calling func    0   0         24.18


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1726.08
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    35.0292               301
loop is:       60
neval is:      267
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       60      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    560.467      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    35.0292               301
loop is:       61
neval is:      267


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      301
neval,tstepnext:      267     301

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.663917     -0.409597      -14.3479       14.3479       1305.70       1320.04    
   2  0.718953     -0.329960      -11.5582       11.5582       1349.50       1361.06    
   3  0.454275     -0.789053      -27.6399       27.6399       1439.46       1467.10    
   4  0.253407E-01  -3.67534      -128.744       128.744       1449.71       1578.45    
   5  0.611947     -0.491110      -17.2032       17.2032       1442.39       1459.59    
   6  0.234016      -1.45237      -50.8753       50.8753       1434.31       1485.18    
   7  0.359481E-01  -3.32568      -116.496       116.496       1436.17       1552.67    
   8  0.222118E-01  -3.80713      -133.361       133.361       1463.74       1597.10    
   9  0.905838E-01  -2.40148      -84.1220       84.1220       1440.10       1524.22    
  10  0.791683     -0.233594      -8.18261       8.18261       1466.62       1474.80    
  11  0.557734     -0.583873      -20.4526       20.4526       1454.77       1475.22    
  12  0.936048E-01  -2.36867      -82.9728       82.9728       1436.80       1519.77    
  13  0.431059     -0.841510      -29.4774       29.4774       1462.36       1491.84    
  14  0.225758      -1.48829      -52.1337       52.1337       1456.12       1508.25    
  15  0.275181E-01  -3.59291      -125.857       125.857       1489.63       1615.49    
  16  0.802517     -0.220002      -7.70651       7.70651       1490.39       1498.10    
  17  0.423872     -0.858323      -30.0664       30.0664       1497.52       1527.58    
  18  0.300971      -1.20074      -42.0610       42.0610       1500.51       1542.57    
  19  0.479556     -0.734895      -25.7428       25.7428       1504.88       1530.63    
  20  0.621838     -0.475076      -16.6416       16.6416       1529.84       1546.48    
  21  0.397654     -0.922172      -32.3030       32.3030       1510.27       1542.57    
  22  0.664976     -0.408004      -14.2921       14.2921       1460.12       1474.41    
  23  0.288358      -1.24355      -43.5606       43.5606       1502.52       1546.08    
  24  0.442017     -0.816406      -28.5981       28.5981       1564.37       1592.97    
  25  0.150763E-01  -4.19463      -146.935       146.935       1571.48       1718.42    
  26  0.600886     -0.509350      -17.8421       17.8421       1567.29       1585.13    
  27  0.162927      -1.81446      -63.5590       63.5590       1544.91       1608.47    
  28  0.932743     -0.696251E-01  -2.43891       2.43891       1558.96       1561.40    
  29  0.997186     -0.281799E-02 -0.987121E-01  0.987121E-01   1590.93       1591.03    
  30  0.418339     -0.871463      -30.5266       30.5266       1526.77       1557.30    
  31  0.694800     -0.364132      -12.7552       12.7552       1597.91       1610.67    
  32  0.852711     -0.159334      -5.58136       5.58136       1588.30       1593.88    
  33  0.624847     -0.470249      -16.4724       16.4724       1443.32       1459.80    
  34  0.427649     -0.849453      -29.7557       29.7557       1587.39       1617.14    
  35  0.149871      -1.89798      -66.4848       66.4848       1597.78       1664.27    
  36  0.563430     -0.573713      -20.0967       20.0967       1563.69       1583.78    
  37  0.860100     -0.150706      -5.27912       5.27912       1610.66       1615.94    
  38  0.867090E-01  -2.44520      -85.6533       85.6533       1603.25       1688.90    
  39  0.847848     -0.165054      -5.78170       5.78170       1613.45       1619.23    
  40  0.782599E-01  -2.54772      -89.2446       89.2446       1601.22       1690.47    
  41  0.697889E-01  -2.66228      -93.2576       93.2576       1618.25       1711.50    
  42  0.422765     -0.860939      -30.1580       30.1580       1609.45       1639.61    
  43  0.158365      -1.84286      -64.5538       64.5538       1661.38       1725.93    
  44  0.518935     -0.655976      -22.9783       22.9783       1556.76       1579.74    
  45  0.430406     -0.843027      -29.5306       29.5306       1655.48       1685.01    
  46  0.639805     -0.446592      -15.6438       15.6438       1655.87       1671.52    
  47  0.830453E-01  -2.48837      -87.1656       87.1656       1636.91       1724.08    
  48  0.639384     -0.447250      -15.6668       15.6668       1561.28       1576.95    
  49  0.833791     -0.181773      -6.36736       6.36736       1660.61       1666.98    
  50  0.453972     -0.789720      -27.6633       27.6633       1694.67       1722.34    
  51  0.542088     -0.612327      -21.4493       21.4493       1726.08       1747.53    
loop,thermsimp(1:2)       61   14.3479       11.5582    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    269       1706.47          0.87          1.11         22.09          0.17          0.05         24.29
Just calling func    0   0         24.28


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1706.47
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    35.0292               301
loop is:       61
neval is:      268
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       61      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    560.467      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    35.0292               301
loop is:       62
neval is:      268


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      301
neval,tstepnext:      268     301

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.985932     -0.141675E-01 -0.496275      0.496275       1305.70       1306.19    
   2  0.420912     -0.865330      -30.3118       30.3118       1349.50       1379.81    
   3  0.617210     -0.482545      -16.9032       16.9032       1442.39       1459.29    
   4  0.787846     -0.238453      -8.35283       8.35283       1443.32       1451.68    
   5  0.608770     -0.496315      -17.3855       17.3855       1439.46       1456.85    
   6  0.925975     -0.769083E-01  -2.69404       2.69404       1460.12       1462.81    
   7  0.545822     -0.605462      -21.2088       21.2088       1466.62       1487.83    
   8  0.240142      -1.42653      -49.9701       49.9701       1454.77       1504.74    
   9  0.800257     -0.222822      -7.80528       7.80528       1434.31       1442.11    
  10  0.250149      -1.38570      -48.5400       48.5400       1462.36       1510.90    
  11  0.814044     -0.205741      -7.20696       7.20696       1490.39       1497.60    
  12  0.897552     -0.108084      -3.78610       3.78610       1456.12       1459.90    
  13  0.807530     -0.213775      -7.48839       7.48839       1436.80       1444.29    
  14  0.369031     -0.996874      -34.9197       34.9197       1440.10       1475.02    
  15  0.892620     -0.113594      -3.97911       3.97911       1497.52       1501.50    
  16  0.992736     -0.729054E-02 -0.255382      0.255382       1504.88       1505.14    
  17  0.264259      -1.33083      -46.6178       46.6178       1510.27       1556.88    
  18  0.164586      -1.80432      -63.2041       63.2041       1500.51       1563.71    
  19  0.594739     -0.519633      -18.2023       18.2023       1502.52       1520.73    
  20  0.766319     -0.266156      -9.32325       9.32325       1529.84       1539.17    
  21  0.392663     -0.934804      -32.7454       32.7454       1436.17       1468.92    
  22  0.900399     -0.104917      -3.67517       3.67517       1526.77       1530.45    
  23  0.853164E-01  -2.46139      -86.2205       86.2205       1558.96       1645.18    
  24  0.753181     -0.283450      -9.92904       9.92904       1561.28       1571.21    
  25  0.801958     -0.220699      -7.73090       7.73090       1449.71       1457.44    
  26  0.840206     -0.174108      -6.09888       6.09888       1556.76       1562.86    
  27  0.899787     -0.105597      -3.69899       3.69899       1563.69       1567.39    
  28  0.555629     -0.587654      -20.5851       20.5851       1567.29       1587.87    
  29  0.117481E-01  -4.44406      -155.672       155.672       1590.93       1746.60    
  30  0.228476      -1.47632      -51.7144       51.7144       1564.37       1616.08    
  31  0.121877      -2.10474      -73.7275       73.7275       1588.30       1662.02    
  32  0.475375     -0.743652      -26.0495       26.0495       1463.74       1489.79    
  33  0.208734      -1.56669      -54.8801       54.8801       1544.91       1599.79    
  34  0.680231     -0.385322      -13.4975       13.4975       1597.91       1611.41    
  35  0.211647      -1.55284      -54.3947       54.3947       1489.63       1544.03    
  36  0.982763     -0.173870E-01 -0.609054      0.609054       1610.66       1611.27    
  37  0.819904     -0.198568      -6.95569       6.95569       1587.39       1594.34    
  38  0.282339      -1.26465      -44.2996       44.2996       1613.45       1657.75    
  39  0.391986     -0.936529      -32.8059       32.8059       1609.45       1642.26    
  40  0.218050      -1.52303      -53.3506       53.3506       1597.78       1651.14    
  41  0.236244      -1.44289      -50.5434       50.5434       1660.61       1711.15    
  42  0.544673     -0.607570      -21.2827       21.2827       1655.87       1677.16    
  43  0.721937     -0.325818      -11.4131       11.4131       1655.48       1666.89    
  44  0.649728     -0.431202      -15.1047       15.1047       1603.25       1618.35    
  45  0.641823     -0.443443      -15.5334       15.5334       1601.22       1616.76    
  46  0.597293     -0.515347      -18.0522       18.0522       1618.25       1636.30    
  47  0.467405     -0.760558      -26.6418       26.6418       1571.48       1598.12    
  48  0.676900     -0.390232      -13.6695       13.6695       1694.67       1708.34    
  49  0.925913     -0.769750E-01  -2.69638       2.69638       1636.91       1639.61    
  50  0.692551     -0.367374      -12.8688       12.8688       1661.38       1674.24    
  51  0.161390      -1.82393      -63.8909       63.8909       1706.47       1770.36    
loop,thermsimp(1:2)       62  0.496275       30.3118    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    270       1726.08          0.87          1.11         21.94          0.14          0.05         24.12
Just calling func    0   0         24.12


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1726.08
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    35.0292               301
loop is:       62
neval is:      269
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       62      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    560.467      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    35.0292               301
loop is:       63
neval is:      269


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      301
neval,tstepnext:      269     301

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.984982     -0.151315E-01 -0.530045      0.530045       1305.70       1306.23    
   2  0.760415     -0.273890      -9.59417       9.59417       1349.50       1359.09    
   3  0.328612      -1.11288      -38.9832       38.9832       1434.31       1473.29    
   4  0.164880      -1.80254      -63.1415       63.1415       1436.80       1499.94    
   5  0.706606     -0.347282      -12.1650       12.1650       1443.32       1455.49    
   6  0.832070     -0.183839      -6.43974       6.43974       1439.46       1445.90    
   7  0.231505      -1.46315      -51.2531       51.2531       1449.71       1500.96    
   8  0.802671E-01  -2.52240      -88.3575       88.3575       1442.39       1530.75    
   9  0.116349      -2.15116      -75.3535       75.3535       1456.12       1531.47    
  10  0.874222     -0.134421      -4.70867       4.70867       1460.12       1464.83    
  11  0.729333     -0.315625      -11.0561       11.0561       1436.17       1447.23    
  12  0.301675      -1.19841      -41.9792       41.9792       1440.10       1482.07    
  13  0.496896     -0.699375      -24.4985       24.4985       1466.62       1491.12    
  14  0.692174     -0.367918      -12.8879       12.8879       1463.74       1476.63    
  15  0.717718     -0.331678      -11.6184       11.6184       1490.39       1502.01    
  16  0.867334E-01  -2.44492      -85.6435       85.6435       1497.52       1583.16    
  17  0.762934     -0.270584      -9.47833       9.47833       1454.77       1464.25    
  18  0.966741     -0.338246E-01  -1.18485       1.18485       1504.88       1506.07    
  19  0.375386     -0.979801      -34.3217       34.3217       1462.36       1496.68    
  20  0.878716     -0.129293      -4.52904       4.52904       1502.52       1507.05    
  21  0.238969      -1.43142      -50.1416       50.1416       1526.77       1576.91    
  22  0.939578     -0.623249E-01  -2.18319       2.18319       1529.84       1532.03    
  23  0.694828     -0.364091      -12.7538       12.7538       1489.63       1502.39    
  24  0.869149     -0.140241      -4.91252       4.91252       1510.27       1515.18    
  25  0.310010      -1.17115      -41.0245       41.0245       1556.76       1597.79    
  26  0.831753     -0.184219      -6.45306       6.45306       1500.51       1506.96    
  27  0.621050     -0.476344      -16.6859       16.6859       1563.69       1580.37    
  28  0.902274     -0.102837      -3.60231       3.60231       1561.28       1564.88    
  29  0.341345      -1.07486      -37.6516       37.6516       1567.29       1604.94    
  30  0.718647     -0.330385      -11.5731       11.5731       1587.39       1598.96    
  31  0.489532     -0.714305      -25.0215       25.0215       1571.48       1596.50    
  32  0.387793     -0.947282      -33.1826       33.1826       1544.91       1578.09    
  33  0.576785     -0.550285      -19.2761       19.2761       1610.66       1629.93    
  34  0.454048     -0.789552      -27.6574       27.6574       1597.91       1625.57    
  35  0.532728     -0.629744      -22.0595       22.0595       1564.37       1586.43    
  36  0.459832     -0.776895      -27.2140       27.2140       1601.22       1628.44    
  37  0.784910     -0.242187      -8.48361       8.48361       1603.25       1611.73    
  38  0.842297     -0.171622      -6.01179       6.01179       1618.25       1624.26    
  39  0.967556     -0.329823E-01  -1.15535       1.15535       1636.91       1638.07    
  40  0.126414      -2.06819      -72.4472       72.4472       1609.45       1681.90    
  41  0.407002     -0.898938      -31.4891       31.4891       1558.96       1590.45    
  42  0.903435     -0.101551      -3.55727       3.55727       1597.78       1601.34    
  43  0.430116     -0.843701      -29.5542       29.5542       1613.45       1643.01    
  44  0.675859     -0.391771      -13.7234       13.7234       1588.30       1602.02    
  45  0.444470     -0.810872      -28.4042       28.4042       1655.48       1683.88    
  46  0.728661     -0.316547      -11.0884       11.0884       1661.38       1672.46    
  47  0.143617      -1.94060      -67.9778       67.9778       1655.87       1723.85    
  48  0.729467E-01  -2.61803      -91.7074       91.7074       1694.67       1786.38    
  49  0.720547     -0.327745      -11.4806       11.4806       1660.61       1672.09    
  50  0.742905     -0.297187      -10.4102       10.4102       1590.93       1601.34    
  51  0.807330     -0.214023      -7.49707       7.49707       1726.08       1733.58    
loop,thermsimp(1:2)       63  0.530045       9.59417    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    271       1901.55          0.87          1.11         21.89          0.25          0.05         24.17
Just calling func    0   0         24.17


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    272       1606.23          0.87          1.11         22.00          0.10          0.05         24.12
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3   1606.23
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    35.0292               301
loop is:       63
neval is:      271
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       63      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    560.467      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    35.0292               301
loop is:       64
neval is:      271


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      301
neval,tstepnext:      271     301

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.964311     -0.363416E-01  -1.27302       1.27302       1305.70       1306.97    
   2  0.186231      -1.68077      -58.8759       58.8759       1349.50       1408.37    
   3  0.127308      -2.06115      -72.2003       72.2003       1439.46       1511.66    
   4  0.305661      -1.18528      -41.5194       41.5194       1436.17       1477.69    
   5  0.685804     -0.377164      -13.2117       13.2117       1443.32       1456.54    
   6  0.713250     -0.337923      -11.8372       11.8372       1454.77       1466.61    
   7  0.562604     -0.575180      -20.1481       20.1481       1460.12       1480.27    
   8  0.410540     -0.890283      -31.1859       31.1859       1434.31       1465.49    
   9  0.667633     -0.404017      -14.1524       14.1524       1463.74       1477.90    
  10  0.111237      -2.19609      -76.9273       76.9273       1440.10       1517.02    
  11  0.987129     -0.129550E-01 -0.453803      0.453803       1466.62       1467.07    
  12  0.525481     -0.643442      -22.5393       22.5393       1462.36       1484.90    
  13  0.740553     -0.300358      -10.5213       10.5213       1436.80       1447.32    
  14  0.456748E-01  -3.08621      -108.107       108.107       1449.71       1557.81    
  15  0.831796     -0.184168      -6.45128       6.45128       1490.39       1496.84    
  16  0.798422     -0.225118      -7.88572       7.88572       1489.63       1497.52    
  17  0.985535     -0.145708E-01 -0.510402      0.510402       1504.88       1505.40    
  18  0.323340      -1.12905      -39.5497       39.5497       1500.51       1540.06    
  19  0.745026     -0.294336      -10.3104       10.3104       1502.52       1512.83    
  20  0.711871     -0.339858      -11.9050       11.9050       1510.27       1522.17    
  21  0.232875      -1.45725      -51.0464       51.0464       1442.39       1493.44    
  22  0.118192      -2.13545      -74.8031       74.8031       1456.12       1530.92    
  23  0.310641      -1.16912      -40.9532       40.9532       1529.84       1570.80    
  24  0.220899      -1.51005      -52.8959       52.8959       1561.28       1614.18    
  25  0.487797     -0.717856      -25.1459       25.1459       1526.77       1551.92    
  26  0.278848      -1.27709      -44.7354       44.7354       1544.91       1589.64    
  27  0.159355      -1.83662      -64.3353       64.3353       1563.69       1628.02    
  28  0.473156     -0.748329      -26.2134       26.2134       1497.52       1523.73    
  29  0.358980      -1.02449      -35.8870       35.8870       1564.37       1600.25    
  30  0.873266     -0.135515      -4.74698       4.74698       1558.96       1563.71    
  31  0.168201      -1.78260      -62.4429       62.4429       1571.48       1633.93    
  32  0.492581     -0.708096      -24.8040       24.8040       1556.76       1581.57    
  33  0.878329     -0.129734      -4.54449       4.54449       1587.39       1591.93    
  34  0.266147      -1.32371      -46.3685       46.3685       1590.93       1637.30    
  35  0.510485     -0.672394      -23.5534       23.5534       1597.78       1621.34    
  36  0.810074     -0.210630      -7.37820       7.37820       1588.30       1595.67    
  37  0.950614     -0.506467E-01  -1.77411       1.77411       1567.29       1569.06    
  38  0.329006      -1.11168      -38.9413       38.9413       1603.25       1642.19    
  39  0.934893E-01  -2.36991      -83.0160       83.0160       1618.25       1701.26    
  40  0.686671     -0.375900      -13.1675       13.1675       1597.91       1611.08    
  41  0.888060     -0.118716      -4.15854       4.15854       1601.22       1605.38    
  42  0.749618     -0.288192      -10.0951       10.0951       1610.66       1620.75    
  43  0.433754     -0.835279      -29.2592       29.2592       1636.91       1666.17    
  44  0.630341     -0.461494      -16.1658       16.1658       1613.45       1629.62    
  45  0.569388     -0.563194      -19.7282       19.7282       1660.61       1680.34    
  46  0.965872     -0.347242E-01  -1.21636       1.21636       1661.38       1662.59    
  47  0.797995     -0.225653      -7.90445       7.90445       1609.45       1617.36    
  48  0.716091     -0.333948      -11.6979       11.6979       1655.48       1667.18    
  49  0.339849      -1.07925      -37.8054       37.8054       1655.87       1693.68    
  50  0.202757      -1.59575      -55.8978       55.8978       1726.08       1781.98    
  51  0.266068      -1.32400      -46.3788       46.3788       1606.23       1652.61    
loop,thermsimp(1:2)       64   1.27302       58.8759    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    273       1672.36          0.87          1.11         22.04          0.20          0.05         24.26
Just calling func    0   0         24.26


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1672.36
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    35.0292               301
loop is:       64
neval is:      272
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       64      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    560.467      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    35.0292               301
loop is:       65
neval is:      272


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      301
neval,tstepnext:      272     301

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.424550     -0.856726      -30.0104       30.0104       1305.70       1335.71    
   2  0.350039      -1.04971      -36.7705       36.7705       1349.50       1386.27    
   3  0.872911     -0.135921      -4.76122       4.76122       1436.80       1441.56    
   4  0.829005     -0.187529      -6.56898       6.56898       1443.32       1449.89    
   5  0.201827      -1.60035      -56.0589       56.0589       1434.31       1490.37    
   6  0.735791     -0.306809      -10.7473       10.7473       1454.77       1465.52    
   7  0.985788     -0.143135E-01 -0.501390      0.501390       1466.62       1467.12    
   8  0.962727     -0.379858E-01  -1.33061       1.33061       1436.17       1437.50    
   9  0.796954     -0.226958      -7.95018       7.95018       1463.74       1471.69    
  10  0.563149     -0.574211      -20.1142       20.1142       1460.12       1480.23    
  11  0.776846     -0.252513      -8.84534       8.84534       1462.36       1471.21    
  12  0.921010     -0.822839E-01  -2.88234       2.88234       1442.39       1445.27    
  13  0.884938     -0.122238      -4.28191       4.28191       1490.39       1494.67    
  14  0.850974     -0.161373      -5.65278       5.65278       1489.63       1495.28    
  15  0.391065     -0.938882      -32.8883       32.8883       1504.88       1537.77    
  16  0.150921      -1.89100      -66.2402       66.2402       1439.46       1505.70    
  17  0.295162      -1.22023      -42.7437       42.7437       1502.52       1545.27    
  18  0.662567     -0.411634      -14.4192       14.4192       1440.10       1454.51    
  19  0.893994     -0.112056      -3.92523       3.92523       1510.27       1514.19    
  20  0.103282      -2.27029      -79.5265       79.5265       1497.52       1577.04    
  21  0.416341     -0.876251      -30.6944       30.6944       1456.12       1486.81    
  22  0.986101E-01  -2.31658      -81.1480       81.1480       1500.51       1581.66    
  23  0.617817E-01  -2.78415      -97.5265       97.5265       1526.77       1624.30    
  24  0.371945     -0.989010      -34.6442       34.6442       1449.71       1484.35    
  25  0.884755     -0.122444      -4.28913       4.28913       1558.96       1563.25    
  26  0.584237     -0.537449      -18.8264       18.8264       1567.29       1586.11    
  27  0.239981      -1.42719      -49.9935       49.9935       1529.84       1579.84    
  28  0.106477      -2.23982      -78.4592       78.4592       1556.76       1635.22    
  29  0.142954      -1.94523      -68.1399       68.1399       1544.91       1613.05    
  30  0.802284     -0.220292      -7.71666       7.71666       1587.39       1595.10    
  31  0.373571     -0.984648      -34.4915       34.4915       1588.30       1622.79    
  32  0.617091     -0.482739      -16.9100       16.9100       1564.37       1581.28    
  33  0.813617     -0.206266      -7.22533       7.22533       1601.22       1608.45    
  34  0.219787E-01  -3.81768      -133.730       133.730       1597.91       1731.64    
  35  0.398995     -0.918807      -32.1851       32.1851       1561.28       1593.47    
  36  0.906985     -0.976296E-01  -3.41989       3.41989       1609.45       1612.87    
  37  0.259146E-01  -3.65295      -127.960       127.960       1610.66       1738.62    
  38  0.347543      -1.05687      -37.0212       37.0212       1597.78       1634.81    
  39  0.879549     -0.128346      -4.49585       4.49585       1563.69       1568.18    
  40  0.618015     -0.481242      -16.8575       16.8575       1613.45       1630.31    
  41  0.173348      -1.75246      -61.3871       61.3871       1571.48       1632.87    
  42  0.324418      -1.12572      -39.4331       39.4331       1590.93       1630.36    
  43  0.426503     -0.852135      -29.8496       29.8496       1603.25       1633.10    
  44  0.672650     -0.396530      -13.8901       13.8901       1606.23       1620.12    
  45  0.500711     -0.691727      -24.2307       24.2307       1661.38       1685.61    
  46  0.457446     -0.782097      -27.3962       27.3962       1636.91       1664.31    
  47  0.408507     -0.895245      -31.3597       31.3597       1655.48       1686.84    
  48  0.649058     -0.432234      -15.1408       15.1408       1660.61       1675.75    
  49  0.275220      -1.29018      -45.1941       45.1941       1655.87       1701.07    
  50  0.706820     -0.346979      -12.1544       12.1544       1618.25       1630.40    
  51  0.596044     -0.517441      -18.1255       18.1255       1672.36       1690.49    
loop,thermsimp(1:2)       65   30.0104       36.7705    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    274       1463.87          0.87          1.12         22.25          0.19          0.05         24.48
Just calling func    0   0         24.48


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1463.87
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    35.0292               301
loop is:       65
neval is:      273
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       65      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    560.467      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    35.0292               301
loop is:       66
neval is:      273


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      301
neval,tstepnext:      273     301

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.474155     -0.746220      -26.1395       26.1395       1305.70       1331.84    
   2  0.162949E-01  -4.11691      -144.212       144.212       1349.50       1493.71    
   3  0.560104     -0.579632      -20.3041       20.3041       1436.17       1456.48    
   4  0.583629     -0.538490      -18.8629       18.8629       1436.80       1455.66    
   5  0.794243     -0.230366      -8.06954       8.06954       1442.39       1450.46    
   6  0.183626E-01  -3.99744      -140.027       140.027       1443.32       1583.35    
   7  0.642495     -0.442397      -15.4968       15.4968       1440.10       1455.59    
   8  0.611061E-02  -5.09773      -178.569       178.569       1454.77       1633.34    
   9  0.974115E-01  -2.32881      -81.5764       81.5764       1466.62       1548.20    
  10  0.817249E-01  -2.50440      -87.7270       87.7270       1462.36       1550.09    
  11  0.644422     -0.439401      -15.3919       15.3919       1463.74       1479.14    
  12  0.378181     -0.972383      -34.0618       34.0618       1460.12       1494.18    
  13  0.105422      -2.24978      -78.8081       78.8081       1449.71       1528.51    
  14  0.713647     -0.337367      -11.8177       11.8177       1456.12       1467.94    
  15  0.602100     -0.507333      -17.7715       17.7715       1434.31       1452.08    
  16  0.746624     -0.292194      -10.2353       10.2353       1490.39       1500.63    
  17  0.687673     -0.374442      -13.1164       13.1164       1489.63       1502.75    
  18  0.356323      -1.03192      -36.1473       36.1473       1439.46       1475.61    
  19  0.631203     -0.460128      -16.1179       16.1179       1510.27       1526.38    
  20  0.348432      -1.05431      -36.9318       36.9318       1504.88       1541.82    
  21  0.200848      -1.60521      -56.2291       56.2291       1502.52       1558.75    
  22  0.863860     -0.146345      -5.12634       5.12634       1558.96       1564.09    
  23  0.278415      -1.27864      -44.7898       44.7898       1563.69       1608.48    
  24  0.871038     -0.138069      -4.83646       4.83646       1497.52       1502.35    
  25  0.581010     -0.542987      -19.0204       19.0204       1529.84       1548.86    
  26  0.960519     -0.402815E-01  -1.41103       1.41103       1564.37       1565.78    
  27  0.104828      -2.25543      -79.0059       79.0059       1500.51       1579.52    
  28  0.907238     -0.973501E-01  -3.41010       3.41010       1567.29       1570.70    
  29  0.685005     -0.378330      -13.2526       13.2526       1561.28       1574.53    
  30  0.239566E-01  -3.73151      -130.712       130.712       1587.39       1718.10    
  31  0.643900     -0.440211      -15.4203       15.4203       1601.22       1616.64    
  32  0.526819     -0.640898      -22.4502       22.4502       1609.45       1631.90    
  33  0.463387     -0.769192      -26.9442       26.9442       1544.91       1571.85    
  34  0.847158E-01  -2.46845      -86.4680       86.4680       1606.23       1692.70    
  35  0.134368E-01  -4.30976      -150.967       150.967       1588.30       1739.26    
  36  0.141068      -1.95851      -68.6051       68.6051       1526.77       1595.38    
  37  0.239867      -1.42767      -50.0102       50.0102       1613.45       1663.46    
  38  0.317049      -1.14870      -40.2380       40.2380       1590.93       1631.17    
  39  0.925847     -0.770459E-01  -2.69886       2.69886       1618.25       1620.94    
  40  0.939258     -0.626649E-01  -2.19510       2.19510       1571.48       1573.68    
  41  0.111598      -2.19286      -76.8140       76.8140       1603.25       1680.06    
  42  0.357545      -1.02849      -36.0273       36.0273       1597.78       1633.81    
  43  0.902640     -0.102432      -3.58811       3.58811       1556.76       1560.35    
  44  0.914421     -0.894640E-01  -3.13385       3.13385       1636.91       1640.05    
  45  0.320420      -1.13812      -39.8675       39.8675       1660.61       1700.48    
  46  0.341333      -1.07490      -37.6528       37.6528       1661.38       1699.03    
  47  0.509727     -0.673879      -23.6055       23.6055       1655.48       1679.08    
  48  0.130581E-02  -6.64093      -232.627       232.627       1672.36       1904.99    
  49  0.105413      -2.24987      -78.8110       78.8110       1655.87       1734.68    
  50  0.743306     -0.296647      -10.3913       10.3913       1597.91       1608.31    
  51  0.114013      -2.17144      -76.0640       76.0640       1463.87       1539.94    
loop,thermsimp(1:2)       66   26.1395       144.212    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    275       1717.67          0.88          1.12         21.87          0.20          0.05         24.11
Just calling func    0   0         24.10


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1717.67
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    35.0292               301
loop is:       66
neval is:      274
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       66      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    560.467      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    35.0292               301
loop is:       67
neval is:      274


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      301
neval,tstepnext:      274     301

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.711215     -0.340780      -11.9373       11.9373       1305.70       1317.63    
   2  0.492413     -0.708438      -24.8160       24.8160       1442.39       1467.21    
   3  0.156563      -1.85430      -64.9546       64.9546       1434.31       1499.26    
   4  0.185270      -1.68594      -59.0572       59.0572       1440.10       1499.15    
   5  0.685983     -0.376903      -13.2026       13.2026       1436.80       1450.00    
   6  0.518581     -0.656659      -23.0022       23.0022       1436.17       1459.17    
   7  0.430667     -0.842421      -29.5093       29.5093       1456.12       1485.63    
   8  0.748228     -0.290047      -10.1601       10.1601       1439.46       1449.62    
   9  0.348167      -1.05507      -36.9584       36.9584       1463.74       1500.70    
  10  0.281980E-01  -3.56850      -125.002       125.002       1349.50       1474.50    
  11  0.670749     -0.399360      -13.9893       13.9893       1460.12       1474.11    
  12  0.225031      -1.49152      -52.2467       52.2467       1490.39       1542.64    
  13  0.258016      -1.35474      -47.4553       47.4553       1497.52       1544.97    
  14  0.122388      -2.10056      -73.5809       73.5809       1489.63       1563.21    
  15  0.556210     -0.586609      -20.5485       20.5485       1510.27       1530.81    
  16  0.938933     -0.630108E-01  -2.20722       2.20722       1449.71       1451.91    
  17  0.440352     -0.820180      -28.7303       28.7303       1463.87       1492.60    
  18  0.779048     -0.249683      -8.74621       8.74621       1504.88       1513.63    
  19  0.929725     -0.728667E-01  -2.55246       2.55246       1466.62       1469.17    
  20  0.330740      -1.10642      -38.7572       38.7572       1529.84       1568.60    
  21  0.214890      -1.53763      -53.8619       53.8619       1462.36       1516.22    
  22  0.363221      -1.01274      -35.4756       35.4756       1502.52       1538.00    
  23  0.681309     -0.383740      -13.4421       13.4421       1556.76       1570.21    
  24  0.107313      -2.23200      -78.1853       78.1853       1558.96       1637.15    
  25  0.622524     -0.473973      -16.6029       16.6029       1564.37       1580.97    
  26  0.532378     -0.630402      -22.0825       22.0825       1567.29       1589.37    
  27  0.298562      -1.20878      -42.3426       42.3426       1544.91       1587.25    
  28  0.432099     -0.839100      -29.3930       29.3930       1571.48       1600.88    
  29  0.243978      -1.41068      -49.4150       49.4150       1561.28       1610.70    
  30  0.581243     -0.542587      -19.0064       19.0064       1500.51       1519.52    
  31  0.897127E-01  -2.41114      -84.4604       84.4604       1443.32       1527.78    
  32  0.738124     -0.303644      -10.6364       10.6364       1526.77       1537.41    
  33  0.462727     -0.770619      -26.9942       26.9942       1597.91       1624.91    
  34  0.984641E-01  -2.31806      -81.1999       81.1999       1563.69       1644.89    
  35  0.641923     -0.443287      -15.5280       15.5280       1601.22       1616.75    
  36  0.334628      -1.09474      -38.3478       38.3478       1618.25       1656.59    
  37  0.482851     -0.728048      -25.5029       25.5029       1590.93       1616.43    
  38  0.826279     -0.190822      -6.68436       6.68436       1609.45       1616.14    
  39  0.966417     -0.341596E-01  -1.19659       1.19659       1454.77       1455.97    
  40  0.236833      -1.44040      -50.4561       50.4561       1597.78       1648.24    
  41  0.274744      -1.29192      -45.2548       45.2548       1636.91       1682.17    
  42  0.310307      -1.17019      -40.9909       40.9909       1613.45       1654.44    
  43  0.697298     -0.360543      -12.6295       12.6295       1655.48       1668.11    
  44  0.239072      -1.43099      -50.1265       50.1265       1603.25       1653.37    
  45  0.809729     -0.211055      -7.39310       7.39310       1606.23       1613.63    
  46  0.651880     -0.427895      -14.9888       14.9888       1661.38       1676.36    
  47  0.515020     -0.663550      -23.2436       23.2436       1660.61       1683.85    
  48  0.359059      -1.02427      -35.8793       35.8793       1587.39       1623.27    
  49  0.516010E-02  -5.26680      -184.492       184.492       1655.87       1840.37    
  50  0.321807      -1.13380      -39.7162       39.7162       1588.30       1628.01    
  51  0.787972     -0.238293      -8.34723       8.34723       1717.67       1726.01    
loop,thermsimp(1:2)       67   11.9373       24.8160    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    276       1500.77          0.87          1.11         22.00          0.11          0.05         24.14
Just calling func    0   0         24.14


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1500.77
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    35.0292               301
loop is:       67
neval is:      275
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       67      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    560.467      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    35.0292               301
loop is:       68
neval is:      275


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      301
neval,tstepnext:      275     301

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.595062     -0.519089      -18.1833       18.1833       1305.70       1323.88    
   2  0.204294      -1.58819      -55.6332       55.6332       1439.46       1495.09    
   3  0.902141     -0.102985      -3.60747       3.60747       1436.80       1440.41    
   4  0.317306      -1.14789      -40.2097       40.2097       1449.71       1489.92    
   5  0.914914E-01  -2.39151      -83.7727       83.7727       1454.77       1538.55    
   6  0.362439      -1.01490      -35.5511       35.5511       1436.17       1471.72    
   7  0.284546      -1.25686      -44.0268       44.0268       1442.39       1486.42    
   8  0.752727     -0.284053      -9.95015       9.95015       1466.62       1476.57    
   9  0.972148     -0.282475E-01 -0.989486      0.989486       1460.12       1461.11    
  10  0.312417      -1.16342      -40.7535       40.7535       1349.50       1390.25    
  11  0.772549E-01  -2.56064      -89.6974       89.6974       1456.12       1545.82    
  12  0.190763      -1.65672      -58.0337       58.0337       1463.87       1521.91    
  13  0.829036     -0.187492      -6.56770       6.56770       1440.10       1446.66    
  14  0.309766      -1.17194      -41.0521       41.0521       1434.31       1475.36    
  15  0.691616     -0.368724      -12.9161       12.9161       1463.74       1476.66    
  16  0.177510      -1.72873      -60.5561       60.5561       1504.88       1565.44    
  17  0.848561     -0.164214      -5.75228       5.75228       1462.36       1468.11    
  18  0.464945     -0.765836      -26.8266       26.8266       1500.51       1527.34    
  19  0.626682     -0.467316      -16.3697       16.3697       1443.32       1459.69    
  20  0.451266     -0.795699      -27.8727       27.8727       1510.27       1538.14    
  21  0.161179E-01  -4.12783      -144.594       144.594       1526.77       1671.37    
  22  0.848853     -0.163869      -5.74022       5.74022       1502.52       1508.26    
  23  0.565946     -0.569256      -19.9406       19.9406       1490.39       1510.33    
  24  0.798567     -0.224937      -7.87936       7.87936       1497.52       1505.40    
  25  0.282371      -1.26453      -44.2956       44.2956       1489.63       1533.93    
  26  0.887219     -0.119663      -4.19172       4.19172       1529.84       1534.03    
  27  0.311981      -1.16481      -40.8025       40.8025       1556.76       1597.57    
  28  0.454937     -0.787596      -27.5889       27.5889       1564.37       1591.96    
  29  0.200774E-01  -3.90816      -136.900       136.900       1544.91       1681.81    
  30  0.549692     -0.598397      -20.9614       20.9614       1567.29       1588.25    
  31  0.928164     -0.745470E-01  -2.61132       2.61132       1571.48       1574.09    
  32  0.876026     -0.132360      -4.63646       4.63646       1561.28       1565.92    
  33  0.360538      -1.02016      -35.7353       35.7353       1606.23       1641.97    
  34  0.810484     -0.210124      -7.36047       7.36047       1609.45       1616.81    
  35  0.350387      -1.04872      -36.7357       36.7357       1590.93       1627.66    
  36  0.609257     -0.495514      -17.3575       17.3575       1601.22       1618.58    
  37  0.847473     -0.165497      -5.79721       5.79721       1587.39       1593.18    
  38  0.459433     -0.777763      -27.2444       27.2444       1597.91       1625.16    
  39  0.213778      -1.54282      -54.0437       54.0437       1588.30       1642.34    
  40  0.983077     -0.170677E-01 -0.597867      0.597867       1558.96       1559.56    
  41  0.719533     -0.329153      -11.5300       11.5300       1563.69       1575.22    
  42  0.317292      -1.14793      -40.2112       40.2112       1597.78       1638.00    
  43  0.300670      -1.20174      -42.0961       42.0961       1603.25       1645.34    
  44  0.486388     -0.720748      -25.2472       25.2472       1613.45       1638.70    
  45  0.309580      -1.17254      -41.0731       41.0731       1618.25       1659.32    
  46  0.111802      -2.19103      -76.7501       76.7501       1655.48       1732.23    
  47  0.913484     -0.904897E-01  -3.16978       3.16978       1661.38       1664.55    
  48  0.438377     -0.824676      -28.8878       28.8878       1636.91       1665.80    
  49  0.773114     -0.257329      -9.01405       9.01405       1660.61       1669.62    
  50  0.248259      -1.39328      -48.8057       48.8057       1717.67       1766.47    
  51  0.502855     -0.687454      -24.0810       24.0810       1500.77       1524.85    
loop,thermsimp(1:2)       68   18.1833       55.6332    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    277       1681.75          0.87          1.11         21.88          0.21          0.05         24.12
Just calling func    0   0         24.12


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1681.75
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    35.0292               301
loop is:       68
neval is:      276
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       68      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    560.467      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    35.0292               301
loop is:       69
neval is:      276


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      301
neval,tstepnext:      276     301

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.440626     -0.819560      -28.7085       28.7085       1305.70       1334.40    
   2  0.752309     -0.284608      -9.96958       9.96958       1349.50       1359.47    
   3  0.209108      -1.56490      -54.8174       54.8174       1436.80       1491.62    
   4  0.842922     -0.170881      -5.98584       5.98584       1440.10       1446.08    
   5  0.161148      -1.82543      -63.9434       63.9434       1443.32       1507.27    
   6  0.601748     -0.507917      -17.7919       17.7919       1460.12       1477.91    
   7  0.890912     -0.115510      -4.04622       4.04622       1462.36       1466.41    
   8  0.631939     -0.458963      -16.0771       16.0771       1436.17       1452.25    
   9  0.144759E-01  -4.23527      -148.358       148.358       1434.31       1582.67    
  10  0.653698     -0.425110      -14.8913       14.8913       1466.62       1481.51    
  11  0.401463     -0.912639      -31.9690       31.9690       1463.74       1495.71    
  12  0.906126     -0.985765E-01  -3.45306       3.45306       1442.39       1445.84    
  13  0.480601E-01  -3.03530      -106.324       106.324       1449.71       1556.03    
  14  0.264260      -1.33082      -46.6176       46.6176       1439.46       1486.08    
  15  0.586033     -0.534379      -18.7189       18.7189       1497.52       1516.24    
  16  0.323072      -1.12988      -39.5788       39.5788       1502.52       1542.10    
  17  0.785147     -0.241884      -8.47300       8.47300       1490.39       1498.87    
  18  0.139165      -1.97210      -69.0810       69.0810       1463.87       1532.95    
  19  0.105818E-01  -4.54862      -159.334       159.334       1500.77       1660.11    
  20  0.896943     -0.108763      -3.80990       3.80990       1500.51       1504.32    
  21  0.854239     -0.157544      -5.51863       5.51863       1489.63       1495.15    
  22  0.566003     -0.569157      -19.9371       19.9371       1529.84       1549.78    
  23  0.566387     -0.568477      -19.9133       19.9133       1510.27       1530.18    
  24  0.414905     -0.879707      -30.8154       30.8154       1454.77       1485.59    
  25  0.173772      -1.75001      -61.3016       61.3016       1456.12       1517.42    
  26  0.884308E-01  -2.42554      -84.9646       84.9646       1558.96       1643.93    
  27  0.417457     -0.873573      -30.6006       30.6006       1504.88       1535.49    
  28  0.334615      -1.09477      -38.3491       38.3491       1561.28       1599.63    
  29  0.706024E-01  -2.65069      -92.8517       92.8517       1571.48       1664.33    
  30  0.996422     -0.358418E-02 -0.125551      0.125551       1563.69       1563.81    
  31  0.894500     -0.111491      -3.90543       3.90543       1567.29       1571.19    
  32  0.827855     -0.188917      -6.61761       6.61761       1564.37       1570.99    
  33  0.434964     -0.832492      -29.1616       29.1616       1587.39       1616.55    
  34  0.121450      -2.10825      -73.8504       73.8504       1556.76       1630.61    
  35  0.498977     -0.695195      -24.3521       24.3521       1609.45       1633.81    
  36  0.117961      -2.13740      -74.8715       74.8715       1601.22       1676.10    
  37  0.309211      -1.17373      -41.1148       41.1148       1597.91       1639.03    
  38  0.786265     -0.240461      -8.42318       8.42318       1590.93       1599.35    
  39  0.614330     -0.487222      -17.0670       17.0670       1597.78       1614.85    
  40  0.820857     -0.197407      -6.91500       6.91500       1613.45       1620.37    
  41  0.670448     -0.399809      -14.0050       14.0050       1606.23       1620.24    
  42  0.742403     -0.297863      -10.4339       10.4339       1588.30       1598.73    
  43  0.760912E-01  -2.57582      -90.2290       90.2290       1603.25       1693.48    
  44  0.709677     -0.342945      -12.0131       12.0131       1618.25       1630.26    
  45  0.943449     -0.582133E-01  -2.03917       2.03917       1661.38       1663.41    
  46  0.176370      -1.73517      -60.7818       60.7818       1636.91       1697.69    
  47  0.866890     -0.142843      -5.00369       5.00369       1660.61       1665.61    
  48  0.711056     -0.341004      -11.9451       11.9451       1526.77       1538.72    
  49  0.929667E-01  -2.37551      -83.2124       83.2124       1544.91       1628.12    
  50  0.960091     -0.407270E-01  -1.42663       1.42663       1655.48       1656.91    
  51  0.948380     -0.530000E-01  -1.85655       1.85655       1681.75       1683.61    
loop,thermsimp(1:2)       69   28.7085       9.96958    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    278       1675.84          0.87          1.12         21.94          0.13          0.05         24.11
Just calling func    0   0         24.11


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1675.84
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    35.0292               301
loop is:       69
neval is:      277
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       69      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    560.467      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    35.0292               301
loop is:       70
neval is:      277


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      301
neval,tstepnext:      277     301

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.988390     -0.116781E-01 -0.409076      0.409076       1305.70       1306.10    
   2  0.482301     -0.729186      -25.5428       25.5428       1349.50       1375.04    
   3  0.546964     -0.603372      -21.1357       21.1357       1442.39       1463.52    
   4  0.543918     -0.608957      -21.3313       21.3313       1440.10       1461.43    
   5  0.427641     -0.849472      -29.7563       29.7563       1436.17       1465.93    
   6  0.498345     -0.696462      -24.3965       24.3965       1462.36       1486.76    
   7  0.989308     -0.107494E-01 -0.376542      0.376542       1460.12       1460.49    
   8  0.658822     -0.417302      -14.6177       14.6177       1466.62       1481.24    
   9  0.917808     -0.857673E-01  -3.00436       3.00436       1454.77       1457.78    
  10  0.914490E-04  -9.29973      -325.762       325.762       1439.46       1765.22    
  11  0.989901     -0.101499E-01 -0.355543      0.355543       1436.80       1437.16    
  12  0.558183     -0.583069      -20.4245       20.4245       1489.63       1510.06    
  13  0.706994     -0.346733      -12.1458       12.1458       1463.74       1475.89    
  14  0.599152     -0.512240      -17.9434       17.9434       1490.39       1508.34    
  15  0.845909     -0.167343      -5.86189       5.86189       1500.51       1506.37    
  16  0.655384     -0.422534      -14.8010       14.8010       1443.32       1458.12    
  17  0.412232E-01  -3.18875      -111.700       111.700       1497.52       1609.22    
  18  0.495401     -0.702387      -24.6041       24.6041       1456.12       1480.72    
  19  0.378829     -0.970671      -34.0018       34.0018       1510.27       1544.27    
  20  0.653665E-02  -5.03033      -176.209       176.209       1463.87       1640.08    
  21  0.782670     -0.245045      -8.58372       8.58372       1504.88       1513.47    
  22  0.945547     -0.559921E-01  -1.96136       1.96136       1526.77       1528.73    
  23  0.969857     -0.306063E-01  -1.07212       1.07212       1502.52       1503.59    
  24  0.822249     -0.195712      -6.85563       6.85563       1529.84       1536.70    
  25  0.265012E-01  -3.63056      -127.176       127.176       1449.71       1576.88    
  26  0.360432E-01  -3.32304      -116.403       116.403       1563.69       1680.09    
  27  0.796418     -0.227631      -7.97372       7.97372       1564.37       1572.34    
  28  0.292313E-01  -3.53252      -123.741       123.741       1567.29       1691.03    
  29  0.227321      -1.48139      -51.8920       51.8920       1434.31       1486.20    
  30  0.812637     -0.207471      -7.26753       7.26753       1588.30       1595.56    
  31  0.930544     -0.719857E-01  -2.52160       2.52160       1590.93       1593.45    
  32  0.674873     -0.393231      -13.7746       13.7746       1561.28       1575.05    
  33  0.264030      -1.33169      -46.6481       46.6481       1597.78       1644.43    
  34  0.807464     -0.213856      -7.49122       7.49122       1587.39       1594.88    
  35  0.653731     -0.425060      -14.8895       14.8895       1606.23       1621.12    
  36  0.858536     -0.152527      -5.34290       5.34290       1613.45       1618.79    
  37  0.538887     -0.618250      -21.6568       21.6568       1544.91       1566.56    
  38  0.468049     -0.759182      -26.5936       26.5936       1618.25       1644.84    
  39  0.401324     -0.912987      -31.9812       31.9812       1556.76       1588.75    
  40  0.363356      -1.01237      -35.4626       35.4626       1609.45       1644.92    
  41  0.924933     -0.780342E-01  -2.73348       2.73348       1597.91       1600.65    
  42  0.797289     -0.226538      -7.93545       7.93545       1558.96       1566.90    
  43  0.200097      -1.60895      -56.3603       56.3603       1655.48       1711.84    
  44  0.686219     -0.376559      -13.1906       13.1906       1500.77       1513.96    
  45  0.895629     -0.110230      -3.86125       3.86125       1661.38       1665.24    
  46  0.331830      -1.10313      -38.6418       38.6418       1571.48       1610.12    
  47  0.967018     -0.335379E-01  -1.17480       1.17480       1660.61       1661.78    
  48  0.268282      -1.31572      -46.0885       46.0885       1601.22       1647.31    
  49  0.472399     -0.749931      -26.2695       26.2695       1681.75       1708.02    
  50  0.399276E-01  -3.22069      -112.818       112.818       1603.25       1716.07    
  51  0.956493     -0.444820E-01  -1.55817       1.55817       1675.84       1677.40    
loop,thermsimp(1:2)       70  0.409076       25.5428    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    279       1726.29          0.87          1.11         22.04          0.17          0.05         24.23
Just calling func    0   0         24.23


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    280       1546.00          0.86          1.11         22.02          0.12          0.05         24.15
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3   1546.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    35.0292               301
loop is:       70
neval is:      279
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       70      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    560.467      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    35.0292               301
loop is:       71
neval is:      279


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      301
neval,tstepnext:      279     301

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.860213     -0.150575      -5.27453       5.27453       1305.70       1310.97    
   2  0.573661     -0.555717      -19.4663       19.4663       1349.50       1368.97    
   3  0.499290     -0.694569      -24.3302       24.3302       1436.80       1461.13    
   4  0.677563     -0.389253      -13.6352       13.6352       1454.77       1468.41    
   5  0.476566     -0.741149      -25.9619       25.9619       1443.32       1469.29    
   6  0.153036      -1.87708      -65.7527       65.7527       1460.12       1525.87    
   7  0.626270     -0.467973      -16.3927       16.3927       1440.10       1456.49    
   8  0.794744     -0.229735      -8.04745       8.04745       1442.39       1450.44    
   9  0.111868E-01  -4.49302      -157.387       157.387       1436.17       1593.56    
  10  0.643880     -0.440243      -15.4214       15.4214       1463.74       1479.16    
  11  0.634705     -0.454595      -15.9241       15.9241       1456.12       1472.04    
  12  0.653568     -0.425308      -14.8982       14.8982       1466.62       1481.52    
  13  0.888231     -0.118524      -4.15180       4.15180       1434.31       1438.46    
  14  0.681775E-01  -2.68564      -94.0759       94.0759       1462.36       1556.44    
  15  0.241248      -1.42193      -49.8091       49.8091       1502.52       1552.33    
  16  0.208857      -1.56610      -54.8594       54.8594       1500.51       1555.37    
  17  0.652439     -0.427038      -14.9588       14.9588       1490.39       1505.35    
  18  0.489833     -0.713691      -25.0000       25.0000       1489.63       1514.63    
  19  0.719225     -0.329581      -11.5449       11.5449       1504.88       1516.43    
  20  0.924762     -0.782189E-01  -2.73995       2.73995       1500.77       1503.51    
  21  0.845502     -0.167825      -5.87878       5.87878       1526.77       1532.65    
  22  0.665989     -0.406482      -14.2388       14.2388       1529.84       1544.08    
  23  0.378562     -0.971376      -34.0265       34.0265       1510.27       1544.29    
  24  0.396889     -0.924098      -32.3704       32.3704       1544.91       1577.28    
  25  0.158089      -1.84460      -64.6148       64.6148       1558.96       1623.58    
  26  0.590577     -0.526655      -18.4483       18.4483       1564.37       1582.82    
  27  0.949513     -0.518061E-01  -1.81473       1.81473       1561.28       1563.09    
  28  0.518198     -0.657398      -23.0281       23.0281       1449.71       1472.73    
  29  0.551080     -0.595875      -20.8730       20.8730       1556.76       1577.64    
  30  0.986285     -0.138097E-01 -0.483745      0.483745       1590.93       1591.41    
  31  0.920142     -0.832276E-01  -2.91540       2.91540       1587.39       1590.30    
  32  0.133201      -2.01590      -70.6154       70.6154       1588.30       1658.91    
  33  0.584507     -0.536987      -18.8102       18.8102       1597.91       1616.72    
  34  0.790583     -0.234984      -8.23131       8.23131       1497.52       1505.75    
  35  0.702664     -0.352876      -12.3610       12.3610       1571.48       1583.84    
  36  0.148885      -1.90458      -66.7160       66.7160       1613.45       1680.17    
  37  0.290436      -1.23637      -43.3091       43.3091       1606.23       1649.54    
  38  0.638249     -0.449027      -15.7291       15.7291       1463.87       1479.60    
  39  0.381605     -0.963369      -33.7461       33.7461       1597.78       1631.53    
  40  0.823069     -0.194716      -6.82074       6.82074       1618.25       1625.07    
  41  0.492318     -0.708630      -24.8227       24.8227       1609.45       1634.28    
  42  0.773199     -0.257218      -9.01016       9.01016       1601.22       1610.23    
  43  0.289475E-01  -3.54227      -124.083       124.083       1660.61       1784.69    
  44  0.355683      -1.03371      -36.2102       36.2102       1661.38       1697.59    
  45  0.160396      -1.83011      -64.1073       64.1073       1675.84       1739.95    
  46  0.972861     -0.275140E-01 -0.963795      0.963795       1563.69       1564.65    
  47  0.781938E-02  -4.85115      -169.932       169.932       1567.29       1737.22    
  48  0.225299      -1.49033      -52.2051       52.2051       1681.75       1733.96    
  49  0.631686     -0.459363      -16.0911       16.0911       1655.48       1671.57    
  50  0.212316      -1.54968      -54.2840       54.2840       1603.25       1657.53    
  51  0.673664     -0.395024      -13.8374       13.8374       1546.00       1559.84    
loop,thermsimp(1:2)       71   5.27453       19.4663    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    281       1723.25          0.88          1.11         21.92          0.18          0.05         24.14
Just calling func    0   0         24.14


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  280    1723.3       0.1312     -2.404      3.807     -102.6     0.4570    
                       2.084     -3.392     -99.70      3.538      2.630    

                       3.508     -2.561      1.540      7000.      7000.    

                      -2.417      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -8.983     -7.382     -6.030      7.764    

                      -11.44     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.6407E-01 0.2205    -0.2739E-01 0.4276E-01

                     -0.2486     0.2857E-01 0.1431     0.1028     0.4098E-01



                     -0.8436     -1.160      0.000    -0.5922E-02-0.7509E-01

                     -0.5239E-01 0.1952    -0.7116    -0.2869E-01 0.4090    

                      0.5898E-01 0.7132E-01-0.6430     -1.080      7000.    



                     -0.2390    -0.6590     -2.142     -1.982    -0.3807    

                     -0.3252      9.143      8.703    -0.1672E+05 -6.000    

                      -1.218     -1.844      9.511      9.113    -0.1969E+05



                      -6.000      1.200    -0.6851      8.906      9.064    

                     -0.1944E+05 -6.000     -1.074    -0.2469      9.217    

                       8.939    -0.1891E+05 -6.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1723.25
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    35.0292               301
loop is:       71
neval is:      280
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       71      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    560.467      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    35.0292               301
loop is:       72
neval is:      280


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      301
neval,tstepnext:      280     301

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.440770     -0.819232      -28.6971       28.6971       1305.70       1334.39    
   2  0.202294      -1.59803      -55.9778       55.9778       1349.50       1405.48    
   3  0.873786     -0.134920      -4.72615       4.72615       1434.31       1439.03    
   4  0.262141      -1.33887      -46.8997       46.8997       1442.39       1489.29    
   5  0.342005      -1.07293      -37.5839       37.5839       1440.10       1477.68    
   6  0.421217     -0.864607      -30.2865       30.2865       1436.80       1467.09    
   7  0.618489     -0.480477      -16.8307       16.8307       1454.77       1471.60    
   8  0.412552     -0.885393      -31.0146       31.0146       1443.32       1474.34    
   9  0.951192     -0.500396E-01  -1.75285       1.75285       1456.12       1457.87    
  10  0.298546      -1.20883      -42.3445       42.3445       1449.71       1492.05    
  11  0.805120     -0.216763      -7.59305       7.59305       1463.74       1471.34    
  12  0.208146      -1.56951      -54.9788       54.9788       1463.87       1518.85    
  13  0.924021     -0.790209E-01  -2.76804       2.76804       1466.62       1469.39    
  14  0.447624     -0.803802      -28.1565       28.1565       1500.77       1528.93    
  15  0.667709     -0.403903      -14.1484       14.1484       1490.39       1504.54    
  16  0.767295E-01  -2.56747      -89.9364       89.9364       1497.52       1587.45    
  17  0.301582      -1.19871      -41.9900       41.9900       1489.63       1531.62    
  18  0.788580     -0.237522      -8.32020       8.32020       1504.88       1513.20    
  19  0.887020     -0.119888      -4.19957       4.19957       1460.12       1464.32    
  20  0.233035E-01  -3.75915      -131.680       131.680       1526.77       1658.45    
  21  0.899320     -0.106116      -3.71718       3.71718       1529.84       1533.56    
  22  0.144480      -1.93461      -67.7680       67.7680       1510.27       1578.03    
  23  0.274629      -1.29233      -45.2694       45.2694       1502.52       1547.79    
  24  0.831597     -0.184407      -6.45963       6.45963       1500.51       1506.97    
  25  0.388827     -0.944620      -33.0893       33.0893       1462.36       1495.45    
  26  0.257578      -1.35643      -47.5148       47.5148       1546.00       1593.52    
  27  0.427791     -0.849120      -29.7440       29.7440       1561.28       1591.02    
  28  0.837664E-01  -2.47972      -86.8628       86.8628       1563.69       1650.55    
  29  0.782727     -0.244972      -8.58116       8.58116       1544.91       1553.49    
  30  0.259676E-01  -3.65091      -127.888       127.888       1556.76       1684.65    
  31  0.166181      -1.79468      -62.8662       62.8662       1564.37       1627.23    
  32  0.360749      -1.01957      -35.7148       35.7148       1571.48       1607.20    
  33  0.369697     -0.995071      -34.8566       34.8566       1587.39       1622.24    
  34  0.959392     -0.414553E-01  -1.45215       1.45215       1590.93       1592.38    
  35  0.449170     -0.800353      -28.0358       28.0358       1436.17       1464.21    
  36  0.655790E-02  -5.02708      -176.095       176.095       1601.22       1777.32    
  37  0.133569      -2.01313      -70.5185       70.5185       1597.91       1668.43    
  38  0.282061      -1.26563      -44.3341       44.3341       1558.96       1603.30    
  39  0.431813     -0.839762      -29.4162       29.4162       1618.25       1647.66    
  40  0.713174     -0.338031      -11.8409       11.8409       1597.78       1609.63    
  41  0.511305     -0.670790      -23.4972       23.4972       1609.45       1632.95    
  42  0.264485      -1.32997      -46.5879       46.5879       1606.23       1652.82    
  43  0.779298     -0.249362      -8.73496       8.73496       1603.25       1611.98    
  44  0.709352E-02  -4.94857      -173.345       173.345       1588.30       1761.64    
  45  0.770402     -0.260843      -9.13711       9.13711       1655.48       1664.62    
  46  0.694393     -0.364718      -12.7758       12.7758       1613.45       1626.23    
  47  0.589268E-01  -2.83146      -99.1838       99.1838       1661.38       1760.56    
  48  0.817644     -0.201328      -7.05236       7.05236       1681.75       1688.80    
  49  0.990168     -0.988073E-02 -0.346114      0.346114       1567.29       1567.63    
  50  0.733536E-01  -2.61246      -91.5126       91.5126       1675.84       1767.36    
  51  0.781472     -0.246575      -8.63734       8.63734       1723.25       1731.89    
loop,thermsimp(1:2)       72   28.6971       55.9778    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    282       1467.81          0.87          1.11         21.95          0.19          0.05         24.18
Just calling func    0   0         24.18


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1467.81
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    35.0292               301
loop is:       72
neval is:      281
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       72      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    560.467      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    35.0292               301
loop is:       73
neval is:      281


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      301
neval,tstepnext:      281     301

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.807892     -0.213326      -7.47265       7.47265       1305.70       1313.17    
   2  0.554495     -0.589697      -20.6566       20.6566       1349.50       1370.16    
   3  0.997056     -0.294851E-02 -0.103284      0.103284       1434.31       1434.41    
   4  0.901183E-01  -2.40663      -84.3024       84.3024       1456.12       1540.42    
   5  0.296736      -1.21491      -42.5575       42.5575       1436.17       1478.73    
   6  0.907820     -0.967094E-01  -3.38765       3.38765       1460.12       1463.50    
   7  0.325542      -1.12226      -39.3120       39.3120       1436.80       1476.11    
   8  0.947537     -0.538896E-01  -1.88771       1.88771       1466.62       1468.51    
   9  0.378276     -0.972130      -34.0530       34.0530       1463.74       1497.80    
  10  0.985613     -0.144920E-01 -0.507642      0.507642       1454.77       1455.28    
  11  0.167434      -1.78717      -62.6031       62.6031       1443.32       1505.93    
  12  0.693849E-01  -2.66809      -93.4609       93.4609       1440.10       1533.56    
  13  0.434983     -0.832447      -29.1600       29.1600       1442.39       1471.55    
  14  0.998656     -0.134491E-02 -0.471112E-01  0.471112E-01   1449.71       1449.75    
  15  0.650302     -0.430318      -15.0737       15.0737       1462.36       1477.43    
  16  0.152610      -1.87987      -65.8504       65.8504       1490.39       1556.24    
  17  0.273947      -1.29482      -45.3565       45.3565       1500.51       1545.87    
  18  0.990471     -0.957469E-02 -0.335394      0.335394       1504.88       1505.22    
  19  0.684493     -0.379077      -13.2788       13.2788       1463.87       1477.15    
  20  0.864467E-01  -2.44823      -85.7595       85.7595       1500.77       1586.53    
  21  0.546085     -0.604980      -21.1920       21.1920       1489.63       1510.82    
  22  0.246642      -1.39982      -49.0345       49.0345       1529.84       1578.88    
  23  0.484505     -0.724627      -25.3831       25.3831       1502.52       1527.91    
  24  0.567359     -0.566763      -19.8533       19.8533       1544.91       1564.76    
  25  0.564371     -0.572043      -20.0382       20.0382       1567.29       1587.32    
  26  0.825604     -0.191640      -6.71302       6.71302       1510.27       1516.98    
  27  0.302493      -1.19570      -41.8844       41.8844       1497.52       1539.40    
  28  0.630396     -0.461407      -16.1627       16.1627       1561.28       1577.44    
  29  0.886734     -0.120210      -4.21088       4.21088       1590.93       1595.14    
  30  0.389345     -0.943288      -33.0427       33.0427       1546.00       1579.04    
  31  0.181391      -1.70710      -59.7984       59.7984       1558.96       1618.76    
  32  0.933221     -0.691132E-01  -2.42098       2.42098       1571.48       1573.90    
  33  0.169237E-01  -4.07904      -142.886       142.886       1597.78       1740.67    
  34  0.757788     -0.277351      -9.71540       9.71540       1603.25       1612.96    
  35  0.300993E-01  -3.50325      -122.716       122.716       1587.39       1710.10    
  36  0.395621     -0.927300      -32.4826       32.4826       1613.45       1645.93    
  37  0.459505     -0.777605      -27.2389       27.2389       1564.37       1591.61    
  38  0.733176     -0.310370      -10.8720       10.8720       1609.45       1620.33    
  39  0.575459     -0.552587      -19.3567       19.3567       1618.25       1637.60    
  40  0.560889     -0.578233      -20.2550       20.2550       1563.69       1583.94    
  41  0.428351     -0.847812      -29.6982       29.6982       1606.23       1635.93    
  42  0.553832     -0.590895      -20.6986       20.6986       1526.77       1547.47    
  43  0.581118     -0.542801      -19.0139       19.0139       1655.48       1674.49    
  44  0.319195E-01  -3.44454      -120.660       120.660       1597.91       1718.57    
  45  0.224512E-01  -3.79641      -132.985       132.985       1556.76       1689.75    
  46  0.113637E-01  -4.47733      -156.837       156.837       1681.75       1838.59    
  47  0.889134     -0.117508      -4.11621       4.11621       1723.25       1727.37    
  48  0.422937     -0.860531      -30.1437       30.1437       1661.38       1691.52    
  49  0.479928     -0.734119      -25.7156       25.7156       1588.30       1614.01    
  50  0.813133     -0.206861      -7.24617       7.24617       1675.84       1683.09    
  51  0.544683     -0.607551      -21.2820       21.2820       1467.81       1489.09    
loop,thermsimp(1:2)       73   7.47265       20.6566    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    283       1741.74          0.87          1.12         21.89          0.20          0.05         24.12
Just calling func    0   0         24.12


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1741.74
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    35.0292               301
loop is:       73
neval is:      282
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       73      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    560.467      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    35.0292               301
loop is:       74
neval is:      282


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      301
neval,tstepnext:      282     301

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.889684     -0.116889      -4.09454       4.09454       1305.70       1309.79    
   2  0.480213     -0.733525      -25.6948       25.6948       1349.50       1375.19    
   3  0.226156      -1.48653      -52.0720       52.0720       1434.31       1486.38    
   4  0.633402     -0.456651      -15.9961       15.9961       1449.71       1465.70    
   5  0.925311     -0.776258E-01  -2.71917       2.71917       1454.77       1457.49    
   6  0.498405     -0.696343      -24.3923       24.3923       1460.12       1484.51    
   7  0.133283      -2.01528      -70.5937       70.5937       1466.62       1537.21    
   8  0.657074E-01  -2.72254      -95.3686       95.3686       1442.39       1537.76    
   9  0.726758     -0.319162      -11.1800       11.1800       1436.80       1447.98    
  10  0.398365     -0.920388      -32.2405       32.2405       1463.87       1496.11    
  11  0.321047E-01  -3.43875      -120.457       120.457       1462.36       1582.82    
  12  0.276307      -1.28624      -45.0561       45.0561       1436.17       1481.23    
  13  0.483740     -0.726208      -25.4385       25.4385       1467.81       1493.25    
  14  0.224589      -1.49348      -52.3155       52.3155       1463.74       1516.06    
  15  0.832041     -0.183874      -6.44095       6.44095       1504.88       1511.33    
  16  0.939301     -0.626192E-01  -2.19350       2.19350       1443.32       1445.52    
  17  0.624052     -0.471522      -16.5170       16.5170       1489.63       1506.15    
  18  0.172753      -1.75589      -61.5076       61.5076       1510.27       1571.77    
  19  0.468323     -0.758597      -26.5730       26.5730       1502.52       1529.10    
  20  0.963461     -0.372229E-01  -1.30389       1.30389       1440.10       1441.40    
  21  0.812092     -0.208142      -7.29105       7.29105       1497.52       1504.81    
  22  0.376764     -0.976137      -34.1933       34.1933       1456.12       1490.31    
  23  0.791872E-01  -2.53594      -88.8320       88.8320       1500.51       1589.34    
  24  0.237003      -1.43968      -50.4310       50.4310       1526.77       1577.20    
  25  0.320094      -1.13914      -39.9032       39.9032       1490.39       1530.30    
  26  0.821410E-01  -2.49932      -87.5491       87.5491       1544.91       1632.46    
  27  0.789147     -0.236802      -8.29499       8.29499       1571.48       1579.78    
  28  0.734353E-01  -2.61135      -91.4735       91.4735       1561.28       1652.75    
  29  0.226401      -1.48545      -52.0341       52.0341       1529.84       1581.88    
  30  0.380831     -0.965399      -33.8172       33.8172       1546.00       1579.82    
  31  0.264857      -1.32857      -46.5386       46.5386       1563.69       1610.22    
  32  0.246167      -1.40174      -49.1020       49.1020       1500.77       1549.87    
  33  0.142133      -1.95099      -68.3418       68.3418       1567.29       1635.63    
  34  0.123438E-01  -4.39460      -153.939       153.939       1564.37       1718.31    
  35  0.853289     -0.158657      -5.55762       5.55762       1590.93       1596.49    
  36  0.418603     -0.870831      -30.5045       30.5045       1603.25       1633.75    
  37  0.235242      -1.44714      -50.6922       50.6922       1588.30       1638.99    
  38  0.841712     -0.172317      -6.03613       6.03613       1558.96       1565.00    
  39  0.113373      -2.17707      -76.2611       76.2611       1609.45       1685.71    
  40  0.617966     -0.481322      -16.8603       16.8603       1606.23       1623.09    
  41  0.149268      -1.90202      -66.6261       66.6261       1618.25       1684.87    
  42  0.811010     -0.209475      -7.33776       7.33776       1613.45       1620.79    
  43  0.571477     -0.559531      -19.5999       19.5999       1655.48       1675.08    
  44  0.105494      -2.24911      -78.7844       78.7844       1675.84       1754.63    
  45  0.709548     -0.343127      -12.0195       12.0195       1556.76       1568.78    
  46  0.535895     -0.623816      -21.8518       21.8518       1661.38       1683.23    
  47  0.137736      -1.98242      -69.4426       69.4426       1587.39       1656.83    
  48  0.666779     -0.405297      -14.1972       14.1972       1597.91       1612.11    
  49  0.326487      -1.11936      -39.2104       39.2104       1723.25       1762.46    
  50  0.461090     -0.774162      -27.1183       27.1183       1597.78       1624.90    
  51  0.246088      -1.40207      -49.1133       49.1133       1741.74       1790.86    
loop,thermsimp(1:2)       74   4.09454       25.6948    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    284       1681.75          0.88          1.10         22.01          0.16          0.05         24.20
Just calling func    0   0         24.20


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1681.75
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    35.0292               301
loop is:       74
neval is:      283
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       74      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    560.467      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    35.0292               301
loop is:       75
neval is:      283


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      301
neval,tstepnext:      283     301

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.645801     -0.437264      -15.3170       15.3170       1305.70       1321.01    
   2  0.108032      -2.22533      -77.9514       77.9514       1349.50       1427.45    
   3  0.908790     -0.956413E-01  -3.35024       3.35024       1440.10       1443.45    
   4  0.987883     -0.121914E-01 -0.427054      0.427054       1443.32       1443.75    
   5  0.318380      -1.14451      -40.0913       40.0913       1436.80       1476.89    
   6  0.924426     -0.785824E-01  -2.75268       2.75268       1454.77       1457.53    
   7  0.965220     -0.353996E-01  -1.24002       1.24002       1449.71       1450.95    
   8  0.852248     -0.159878      -5.60041       5.60041       1436.17       1441.77    
   9  0.329186      -1.11113      -38.9221       38.9221       1460.12       1499.04    
  10  0.282479      -1.26415      -44.2822       44.2822       1434.31       1478.59    
  11  0.818943     -0.199740      -6.99675       6.99675       1456.12       1463.12    
  12  0.842569     -0.171300      -6.00050       6.00050       1467.81       1473.81    
  13  0.370966     -0.991644      -34.7365       34.7365       1463.87       1498.61    
  14  0.362233      -1.01547      -35.5710       35.5710       1497.52       1533.09    
  15  0.356944E-01  -3.33276      -116.744       116.744       1489.63       1606.38    
  16  0.149119      -1.90301      -66.6610       66.6610       1504.88       1571.55    
  17  0.127170      -2.06223      -72.2384       72.2384       1463.74       1535.98    
  18  0.589256     -0.528895      -18.5268       18.5268       1502.52       1521.05    
  19  0.702139     -0.353624      -12.3872       12.3872       1490.39       1502.78    
  20  0.713819     -0.337127      -11.8093       11.8093       1466.62       1478.43    
  21  0.121783      -2.10552      -73.7546       73.7546       1442.39       1516.14    
  22  0.992321     -0.770837E-02 -0.270018      0.270018       1500.77       1501.04    
  23  0.622746     -0.473616      -16.5904       16.5904       1558.96       1575.55    
  24  0.388486     -0.945499      -33.1201       33.1201       1556.76       1589.88    
  25  0.365204      -1.00730      -35.2849       35.2849       1510.27       1545.55    
  26  0.416566     -0.875710      -30.6754       30.6754       1526.77       1557.45    
  27  0.250735      -1.38336      -48.4579       48.4579       1571.48       1619.94    
  28  0.243824      -1.41131      -49.4371       49.4371       1546.00       1595.44    
  29  0.177195      -1.73050      -60.6181       60.6181       1529.84       1590.46    
  30  0.723685     -0.323399      -11.3284       11.3284       1462.36       1473.69    
  31  0.157256      -1.84988      -64.7998       64.7998       1500.51       1565.31    
  32  0.941988     -0.597623E-01  -2.09343       2.09343       1590.93       1593.02    
  33  0.110785      -2.20016      -77.0700       77.0700       1563.69       1640.76    
  34  0.200758      -1.60566      -56.2449       56.2449       1597.91       1654.16    
  35  0.873323     -0.135450      -4.74471       4.74471       1613.45       1618.20    
  36  0.842283     -0.171639      -6.01237       6.01237       1606.23       1612.25    
  37  0.326633      -1.11892      -39.1948       39.1948       1597.78       1636.98    
  38  0.648559     -0.433003      -15.1678       15.1678       1544.91       1560.07    
  39  0.460689E-01  -3.07762      -107.806       107.806       1603.25       1711.05    
  40  0.676614     -0.390654      -13.6843       13.6843       1567.29       1580.97    
  41  0.863029     -0.147307      -5.16005       5.16005       1588.30       1593.46    
  42  0.646727     -0.435831      -15.2668       15.2668       1561.28       1576.55    
  43  0.310616      -1.16920      -40.9561       40.9561       1587.39       1628.34    
  44  0.521840     -0.650394      -22.7828       22.7828       1655.48       1678.26    
  45  0.381245     -0.964312      -33.7791       33.7791       1661.38       1695.15    
  46  0.815908     -0.203453      -7.12682       7.12682       1618.25       1625.37    
  47  0.209395E-01  -3.86612      -135.427       135.427       1609.45       1744.88    
  48  0.800991E-01  -2.52449      -88.4309       88.4309       1564.37       1652.80    
  49  0.824204     -0.193337      -6.77245       6.77245       1675.84       1682.62    
  50  0.828636     -0.187975      -6.58461       6.58461       1723.25       1729.84    
  51  0.609810     -0.494608      -17.3257       17.3257       1681.75       1699.08    
loop,thermsimp(1:2)       75   15.3170       77.9514    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    285       1484.69          0.87          1.11         21.95          0.16          0.05         24.15
Just calling func    0   0         24.15


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1484.69
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    35.0292               301
loop is:       75
neval is:      284
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       75      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    560.467      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    35.0292               301
loop is:       76
neval is:      284


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      301
neval,tstepnext:      284     301

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.202436      -1.59733      -55.9533       55.9533       1305.70       1361.65    
   2  0.337724      -1.08553      -38.0252       38.0252       1349.50       1387.52    
   3  0.870295     -0.138923      -4.86637       4.86637       1436.17       1441.04    
   4  0.837087     -0.177827      -6.22914       6.22914       1440.10       1446.32    
   5  0.512110     -0.669215      -23.4421       23.4421       1443.32       1466.77    
   6  0.998742     -0.125879E-02 -0.440945E-01  0.440945E-01   1449.71       1449.75    
   7  0.203490      -1.59214      -55.7714       55.7714       1454.77       1510.54    
   8  0.525951E-01  -2.94513      -103.166       103.166       1456.12       1559.28    
   9  0.474810     -0.744841      -26.0912       26.0912       1462.36       1488.45    
  10  0.440755     -0.819266      -28.6983       28.6983       1467.81       1496.51    
  11  0.225689      -1.48860      -52.1445       52.1445       1436.80       1488.94    
  12  0.902704     -0.102360      -3.58559       3.58559       1466.62       1470.21    
  13  0.663331     -0.410481      -14.3788       14.3788       1434.31       1448.69    
  14  0.511480     -0.670447      -23.4852       23.4852       1463.87       1487.36    
  15  0.625297     -0.469528      -16.4472       16.4472       1460.12       1476.56    
  16  0.812907     -0.207139      -7.25592       7.25592       1500.77       1508.03    
  17  0.979453     -0.207607E-01 -0.727230      0.727230       1490.39       1491.12    
  18  0.255329      -1.36520      -47.8220       47.8220       1442.39       1490.21    
  19  0.856654     -0.154722      -5.41978       5.41978       1502.52       1507.94    
  20  0.610394     -0.493650      -17.2922       17.2922       1497.52       1514.81    
  21  0.703614     -0.351525      -12.3136       12.3136       1463.74       1476.06    
  22  0.623403     -0.472562      -16.5535       16.5535       1510.27       1526.82    
  23  0.375727     -0.978893      -34.2898       34.2898       1526.77       1561.06    
  24  0.870528     -0.138656      -4.85700       4.85700       1544.91       1549.76    
  25  0.175838E-01  -4.04078      -141.545       141.545       1500.51       1642.05    
  26  0.237914      -1.43585      -50.2965       50.2965       1504.88       1555.18    
  27  0.464352     -0.767112      -26.8713       26.8713       1558.96       1585.83    
  28  0.776873     -0.252478      -8.84412       8.84412       1561.28       1570.12    
  29  0.380679     -0.965800      -33.8312       33.8312       1567.29       1601.12    
  30  0.391295     -0.938295      -32.8677       32.8677       1556.76       1589.63    
  31  0.369488     -0.995636      -34.8764       34.8764       1529.84       1564.72    
  32  0.302398      -1.19601      -41.8953       41.8953       1590.93       1632.82    
  33  0.809138     -0.211786      -7.41869       7.41869       1588.30       1595.72    
  34  0.675473     -0.392342      -13.7434       13.7434       1546.00       1559.75    
  35  0.486217     -0.721100      -25.2596       25.2596       1489.63       1514.89    
  36  0.937468     -0.645730E-01  -2.26194       2.26194       1606.23       1608.50    
  37  0.741025     -0.299721      -10.4990       10.4990       1613.45       1623.95    
  38  0.155236      -1.86281      -65.2527       65.2527       1571.48       1636.73    
  39  0.407249     -0.898331      -31.4678       31.4678       1618.25       1649.71    
  40  0.348550E-01  -3.35656      -117.578       117.578       1587.39       1704.96    
  41  0.178548      -1.72290      -60.3517       60.3517       1597.78       1658.14    
  42  0.127429      -2.06020      -72.1671       72.1671       1563.69       1635.85    
  43  0.919888     -0.835037E-01  -2.92507       2.92507       1564.37       1567.29    
  44  0.520080     -0.653772      -22.9011       22.9011       1597.91       1620.82    
  45  0.574092     -0.554965      -19.4400       19.4400       1655.48       1674.92    
  46  0.893427     -0.112690      -3.94746       3.94746       1675.84       1679.79    
  47  0.658991     -0.417045      -14.6088       14.6088       1661.38       1675.98    
  48  0.803744     -0.218475      -7.65300       7.65300       1681.75       1689.40    
  49  0.499877     -0.693392      -24.2890       24.2890       1603.25       1627.54    
  50  0.723109     -0.324195      -11.3563       11.3563       1723.25       1734.61    
  51  0.477842     -0.738475      -25.8682       25.8682       1484.69       1510.56    
loop,thermsimp(1:2)       76   55.9533       38.0252    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    286       1647.37          0.87          1.11         21.90          0.21          0.05         24.14
Just calling func    0   0         24.14


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1647.37
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    35.0292               301
loop is:       76
neval is:      285
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       76      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    560.467      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    35.0292               301
loop is:       77
neval is:      285


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      301
neval,tstepnext:      285     301

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.608851     -0.496181      -17.3808       17.3808       1305.70       1323.08    
   2  0.437836     -0.825911      -28.9310       28.9310       1349.50       1378.43    
   3  0.123560      -2.09103      -73.2472       73.2472       1436.17       1509.42    
   4  0.943438     -0.582242E-01  -2.03955       2.03955       1440.10       1442.14    
   5  0.215054      -1.53686      -53.8351       53.8351       1434.31       1488.14    
   6  0.984763     -0.153546E-01 -0.537859      0.537859       1449.71       1450.24    
   7  0.154160E-01  -4.17235      -146.154       146.154       1443.32       1589.48    
   8  0.231957      -1.46120      -51.1848       51.1848       1466.62       1517.81    
   9  0.476349     -0.741605      -25.9778       25.9778       1463.74       1489.72    
  10  0.620436     -0.477333      -16.7206       16.7206       1460.12       1476.84    
  11  0.456145     -0.784945      -27.4960       27.4960       1463.87       1491.37    
  12  0.507296     -0.678660      -23.7729       23.7729       1462.36       1486.13    
  13  0.910123     -0.941755E-01  -3.29889       3.29889       1436.80       1440.10    
  14  0.323556      -1.12838      -39.5264       39.5264       1442.39       1481.92    
  15  0.666279     -0.406046      -14.2235       14.2235       1490.39       1504.62    
  16  0.781920     -0.246002      -8.61726       8.61726       1467.81       1476.43    
  17  0.921689     -0.815478E-01  -2.85655       2.85655       1502.52       1505.38    
  18  0.152544      -1.88030      -65.8655       65.8655       1500.77       1566.64    
  19  0.265926      -1.32454      -46.3975       46.3975       1454.77       1501.17    
  20  0.812409     -0.207751      -7.27735       7.27735       1484.69       1491.97    
  21  0.517560E-01  -2.96121      -103.729       103.729       1497.52       1601.25    
  22  0.559187     -0.581271      -20.3615       20.3615       1489.63       1509.99    
  23  0.708792     -0.344194      -12.0568       12.0568       1510.27       1522.32    
  24  0.287762      -1.24562      -43.6332       43.6332       1544.91       1588.54    
  25  0.896953     -0.108752      -3.80951       3.80951       1504.88       1508.69    
  26  0.305048      -1.18729      -41.5898       41.5898       1456.12       1497.71    
  27  0.752428     -0.284450      -9.96405       9.96405       1546.00       1555.97    
  28  0.248159      -1.39369      -48.8197       48.8197       1526.77       1575.59    
  29  0.997822     -0.217989E-02 -0.763599E-01  0.763599E-01   1529.84       1529.92    
  30  0.706427     -0.347535      -12.1739       12.1739       1564.37       1576.54    
  31  0.885217     -0.121923      -4.27086       4.27086       1561.28       1565.55    
  32  0.448301     -0.802290      -28.1036       28.1036       1558.96       1587.07    
  33  0.316275      -1.15114      -40.3237       40.3237       1556.76       1597.09    
  34  0.682241     -0.382372      -13.3942       13.3942       1588.30       1601.69    
  35  0.655896     -0.421752      -14.7737       14.7737       1567.29       1582.06    
  36  0.129575      -2.04350      -71.5822       71.5822       1606.23       1677.82    
  37  0.236133      -1.44336      -50.5598       50.5598       1597.91       1648.47    
  38  0.481338     -0.731186      -25.6129       25.6129       1613.45       1639.06    
  39  0.825902     -0.191279      -6.70035       6.70035       1603.25       1609.95    
  40  0.818029     -0.200857      -7.03587       7.03587       1590.93       1597.96    
  41  0.135951E-01  -4.29805      -150.557       150.557       1563.69       1714.24    
  42  0.535484     -0.624585      -21.8787       21.8787       1571.48       1593.36    
  43  0.451882     -0.794334      -27.8249       27.8249       1500.51       1528.33    
  44  0.591282     -0.525463      -18.4066       18.4066       1618.25       1636.65    
  45  0.220584      -1.51148      -52.9458       52.9458       1597.78       1650.73    
  46  0.217569      -1.52524      -53.4279       53.4279       1655.48       1708.91    
  47  0.541669     -0.613101      -21.4764       21.4764       1661.38       1682.85    
  48  0.927891     -0.748411E-01  -2.62163       2.62163       1675.84       1678.47    
  49  0.888902     -0.117768      -4.12532       4.12532       1681.75       1685.88    
  50  0.391529     -0.937694      -32.8467       32.8467       1587.39       1620.23    
  51  0.611187     -0.492353      -17.2467       17.2467       1647.37       1664.62    
loop,thermsimp(1:2)       77   17.3808       28.9310    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    287       1412.25          0.87          1.11         21.93          0.20          0.05         24.16
Just calling func    0   0         24.16


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    288       1650.84          0.87          1.10         21.97          0.13          0.04         24.12
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1412.25
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    35.0292               301
loop is:       77
neval is:      287
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       77      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    560.467      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    35.0292               301
loop is:       78
neval is:      287


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      301
neval,tstepnext:      287     301

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.980204E-01  -2.32258      -81.3581       81.3581       1305.70       1387.05    
   2  0.700279     -0.356277      -12.4801       12.4801       1349.50       1361.98    
   3  0.681564     -0.383366      -13.4290       13.4290       1436.80       1450.23    
   4  0.838213E-01  -2.47907      -86.8398       86.8398       1440.10       1526.94    
   5  0.708687     -0.344341      -12.0620       12.0620       1449.71       1461.77    
   6  0.253966      -1.37055      -48.0094       48.0094       1467.81       1515.82    
   7  0.210796      -1.55686      -54.5357       54.5357       1460.12       1514.65    
   8  0.967741     -0.327906E-01  -1.14863       1.14863       1442.39       1443.54    
   9  0.901331     -0.103882      -3.63892       3.63892       1462.36       1466.00    
  10  0.985067     -0.150452E-01 -0.527020      0.527020       1434.31       1434.83    
  11  0.153899      -1.87146      -65.5557       65.5557       1463.74       1529.30    
  12  0.297572      -1.21210      -42.4588       42.4588       1463.87       1506.33    
  13  0.111036      -2.19790      -76.9907       76.9907       1484.69       1561.68    
  14  0.489011     -0.715370      -25.0588       25.0588       1456.12       1481.18    
  15  0.970731     -0.297058E-01  -1.04057       1.04057       1454.77       1455.81    
  16  0.246322      -1.40112      -49.0800       49.0800       1490.39       1539.47    
  17  0.293332      -1.22645      -42.9615       42.9615       1502.52       1545.48    
  18  0.545752     -0.605591      -21.2134       21.2134       1504.88       1526.10    
  19  0.455999     -0.785265      -27.5072       27.5072       1436.17       1463.68    
  20  0.427211     -0.850477      -29.7915       29.7915       1489.63       1519.42    
  21  0.185046E-01  -3.98974      -139.757       139.757       1466.62       1606.38    
  22  0.768936     -0.262748      -9.20385       9.20385       1510.27       1519.47    
  23  0.870591     -0.138583      -4.85447       4.85447       1500.51       1505.36    
  24  0.563023     -0.574436      -20.1220       20.1220       1529.84       1549.96    
  25  0.132150E-01  -4.32640      -151.551       151.551       1546.00       1697.55    
  26  0.890415     -0.116068      -4.06576       4.06576       1561.28       1565.35    
  27  0.163417      -1.81145      -63.4538       63.4538       1500.77       1564.23    
  28  0.360288      -1.02085      -35.7596       35.7596       1526.77       1562.53    
  29  0.622131     -0.474604      -16.6250       16.6250       1564.37       1580.99    
  30  0.942630     -0.590811E-01  -2.06957       2.06957       1567.29       1569.36    
  31  0.135626      -1.99785      -69.9833       69.9833       1558.96       1628.95    
  32  0.369646     -0.995208      -34.8614       34.8614       1544.91       1579.77    
  33  0.501457     -0.690237      -24.1785       24.1785       1443.32       1467.50    
  34  0.459762     -0.777047      -27.2193       27.2193       1571.48       1598.70    
  35  0.489970     -0.713411      -24.9902       24.9902       1556.76       1581.75    
  36  0.504194     -0.684794      -23.9878       23.9878       1590.93       1614.92    
  37  0.543102E-01  -2.91304      -102.042       102.042       1497.52       1599.56    
  38  0.873609     -0.135122      -4.73322       4.73322       1588.30       1593.03    
  39  0.425787     -0.853816      -29.9085       29.9085       1603.25       1633.16    
  40  0.792406     -0.232682      -8.15066       8.15066       1587.39       1595.54    
  41  0.691102     -0.369469      -12.9422       12.9422       1618.25       1631.19    
  42  0.752290     -0.284633      -9.97048       9.97048       1613.45       1623.42    
  43  0.279962      -1.27310      -44.5957       44.5957       1597.91       1642.51    
  44  0.315915E-01  -3.45487      -121.021       121.021       1597.78       1718.81    
  45  0.266419      -1.32269      -46.3326       46.3326       1647.37       1693.70    
  46  0.949868     -0.514319E-01  -1.80162       1.80162       1606.23       1608.04    
  47  0.520560     -0.652850      -22.8688       22.8688       1675.84       1698.71    
  48  0.805351     -0.216477      -7.58303       7.58303       1661.38       1668.96    
  49  0.281582      -1.26733      -44.3936       44.3936       1681.75       1726.14    
  50  0.365228      -1.00723      -35.2826       35.2826       1655.48       1690.76    
  51  0.961426     -0.393382E-01  -1.37799       1.37799       1412.25       1413.63    
loop,thermsimp(1:2)       78   81.3581       12.4801    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    289       1737.10          0.87          1.11         21.92          0.27          0.05         24.21
Just calling func    0   0         24.21


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1737.10
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    35.0292               301
loop is:       78
neval is:      288
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       78      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    560.467      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    35.0292               301
loop is:       79
neval is:      288


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      301
neval,tstepnext:      288     301

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.190215      -1.65960      -58.1345       58.1345       1349.50       1407.63    
   2  0.812983     -0.207045      -7.25263       7.25263       1305.70       1312.95    
   3  0.820046E-01  -2.50098      -87.6074       87.6074       1412.25       1499.86    
   4  0.863006     -0.147333      -5.16097       5.16097       1434.31       1439.47    
   5  0.647901     -0.434017      -15.2033       15.2033       1442.39       1457.59    
   6  0.650063E-01  -2.73327      -95.7444       95.7444       1436.80       1532.54    
   7  0.407685E-02  -5.50243      -192.746       192.746       1454.77       1647.52    
   8  0.935930     -0.662149E-01  -2.31946       2.31946       1449.71       1452.03    
   9  0.158531      -1.84180      -64.5170       64.5170       1436.17       1500.69    
  10  0.846482     -0.166666      -5.83819       5.83819       1462.36       1468.20    
  11  0.252208      -1.37750      -48.2528       48.2528       1443.32       1491.58    
  12  0.781651E-02  -4.85152      -169.945       169.945       1456.12       1626.06    
  13  0.990286     -0.976134E-02 -0.341932      0.341932       1500.51       1500.85    
  14  0.550116     -0.597625      -20.9343       20.9343       1463.87       1484.81    
  15  0.483066     -0.727601      -25.4873       25.4873       1460.12       1485.60    
  16  0.196160      -1.62883      -57.0565       57.0565       1467.81       1524.86    
  17  0.469455     -0.756184      -26.4885       26.4885       1489.63       1516.12    
  18  0.624392     -0.470977      -16.4980       16.4980       1510.27       1526.76    
  19  0.743593     -0.296262      -10.3778       10.3778       1504.88       1515.26    
  20  0.348439      -1.05429      -36.9310       36.9310       1440.10       1477.03    
  21  0.779083     -0.249637      -8.74460       8.74460       1463.74       1472.49    
  22  0.989010     -0.110506E-01 -0.387094      0.387094       1490.39       1490.78    
  23  0.655432E-01  -2.72505      -95.4562       95.4562       1502.52       1597.98    
  24  0.470908     -0.753092      -26.3802       26.3802       1529.84       1556.22    
  25  0.685537     -0.377553      -13.2254       13.2254       1484.69       1497.92    
  26  0.863060E-02  -4.75244      -166.474       166.474       1526.77       1693.25    
  27  0.526195     -0.642084      -22.4917       22.4917       1500.77       1523.26    
  28  0.767692     -0.264367      -9.26055       9.26055       1561.28       1570.54    
  29  0.380048     -0.967459      -33.8893       33.8893       1567.29       1601.18    
  30  0.337508E-01  -3.38875      -118.705       118.705       1544.91       1663.61    
  31  0.683667     -0.380285      -13.3211       13.3211       1564.37       1577.69    
  32  0.245511      -1.40441      -49.1955       49.1955       1556.76       1605.96    
  33  0.294388      -1.22286      -42.8357       42.8357       1588.30       1631.13    
  34  0.159040      -1.83860      -64.4046       64.4046       1587.39       1651.79    
  35  0.613798     -0.488089      -17.0974       17.0974       1571.48       1588.58    
  36  0.863839E-01  -2.44895      -85.7849       85.7849       1497.52       1583.30    
  37  0.118930      -2.12922      -74.5849       74.5849       1466.62       1541.21    
  38  0.961460     -0.393026E-01  -1.37674       1.37674       1606.23       1607.61    
  39  0.457884     -0.781140      -27.3627       27.3627       1590.93       1618.29    
  40  0.312963      -1.16167      -40.6924       40.6924       1613.45       1654.14    
  41  0.892553     -0.113669      -3.98173       3.98173       1558.96       1562.94    
  42  0.448774     -0.801235      -28.0666       28.0666       1618.25       1646.31    
  43  0.942987E-01  -2.36129      -82.7141       82.7141       1603.25       1685.96    
  44  0.848599     -0.164169      -5.75070       5.75070       1597.91       1603.67    
  45  0.665342     -0.407455      -14.2728       14.2728       1661.38       1675.65    
  46  0.894010     -0.112039      -3.92462       3.92462       1655.48       1659.40    
  47  0.403928     -0.906518      -31.7546       31.7546       1647.37       1679.13    
  48  0.612812     -0.489696      -17.1537       17.1537       1546.00       1563.16    
  49  0.726279     -0.319821      -11.2031       11.2031       1675.84       1687.05    
  50  0.694767     -0.364179      -12.7569       12.7569       1597.78       1610.54    
  51  0.849471     -0.163141      -5.71471       5.71471       1737.10       1742.82    
loop,thermsimp(1:2)       79   58.1345       7.25263    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    290       1681.75          0.87          1.11         21.86          0.25          0.05         24.13
Just calling func    0   0         24.13


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1681.75
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    35.0292               301
loop is:       79
neval is:      289
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       79      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    560.467      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    35.0292               301
loop is:       80
neval is:      289


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      301
neval,tstepnext:      289     301

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.337114      -1.08733      -38.0884       38.0884       1305.70       1343.78    
   2  0.744737     -0.294724      -10.3239       10.3239       1349.50       1359.82    
   3  0.361564E-01  -3.31990      -116.294       116.294       1434.31       1550.60    
   4  0.312099      -1.16444      -40.7893       40.7893       1449.71       1490.50    
   5  0.119132      -2.12752      -74.5255       74.5255       1442.39       1516.91    
   6  0.617735     -0.481696      -16.8734       16.8734       1462.36       1479.23    
   7  0.117626      -2.14025      -74.9712       74.9712       1463.74       1538.71    
   8  0.258570      -1.35259      -47.3801       47.3801       1440.10       1487.48    
   9  0.851854E-01  -2.46293      -86.2744       86.2744       1463.87       1550.15    
  10  0.220620      -1.51131      -52.9401       52.9401       1460.12       1513.06    
  11  0.648876     -0.432513      -15.1506       15.1506       1490.39       1505.54    
  12  0.958689     -0.421884E-01  -1.47783       1.47783       1443.32       1444.80    
  13  0.240652      -1.42440      -49.8957       49.8957       1484.69       1534.59    
  14  0.975871     -0.244252E-01 -0.855596      0.855596       1412.25       1413.11    
  15  0.467835     -0.759639      -26.6095       26.6095       1436.17       1462.78    
  16  0.398205     -0.920788      -32.2545       32.2545       1500.51       1532.76    
  17  0.757338E-01  -2.58053      -90.3939       90.3939       1504.88       1595.28    
  18  0.654643     -0.423666      -14.8407       14.8407       1489.63       1504.47    
  19  0.305298      -1.18647      -41.5610       41.5610       1500.77       1542.33    
  20  0.435768     -0.830645      -29.0968       29.0968       1467.81       1496.91    
  21  0.689410     -0.371920      -13.0281       13.0281       1510.27       1523.29    
  22  0.267500      -1.31864      -46.1908       46.1908       1436.80       1482.99    
  23  0.590747     -0.526367      -18.4382       18.4382       1466.62       1485.06    
  24  0.108947E-01  -4.51948      -158.314       158.314       1529.84       1688.16    
  25  0.236025      -1.44382      -50.5758       50.5758       1558.96       1609.54    
  26  0.590760     -0.526345      -18.4375       18.4375       1546.00       1564.44    
  27  0.782443     -0.245334      -8.59385       8.59385       1561.28       1569.87    
  28  0.702257     -0.353456      -12.3813       12.3813       1564.37       1576.75    
  29  0.764991     -0.267891      -9.38403       9.38403       1497.52       1506.90    
  30  0.753362     -0.283210      -9.92061       9.92061       1571.48       1581.40    
  31  0.961949E-01  -2.34138      -82.0167       82.0167       1502.52       1584.54    
  32  0.541564     -0.613294      -21.4832       21.4832       1567.29       1588.77    
  33  0.474786     -0.744891      -26.0929       26.0929       1597.91       1624.01    
  34  0.242842      -1.41534      -49.5784       49.5784       1556.76       1606.34    
  35  0.495414     -0.702361      -24.6032       24.6032       1606.23       1630.84    
  36  0.636645     -0.451543      -15.8172       15.8172       1597.78       1613.60    
  37  0.758087     -0.276957      -9.70159       9.70159       1590.93       1600.63    
  38  0.209321      -1.56389      -54.7818       54.7818       1456.12       1510.90    
  39  0.484343     -0.724961      -25.3948       25.3948       1588.30       1613.69    
  40  0.499790     -0.693567      -24.2951       24.2951       1618.25       1642.54    
  41  0.316628      -1.15003      -40.2846       40.2846       1454.77       1495.06    
  42  0.705469     -0.348892      -12.2214       12.2214       1587.39       1599.61    
  43  0.514591     -0.664383      -23.2728       23.2728       1613.45       1636.72    
  44  0.869006     -0.140406      -4.91830       4.91830       1655.48       1660.40    
  45  0.112600      -2.18392      -76.5008       76.5008       1544.91       1621.41    
  46  0.511991     -0.669449      -23.4503       23.4503       1661.38       1684.83    
  47  0.477456     -0.739283      -25.8965       25.8965       1647.37       1673.27    
  48  0.494460     -0.704290      -24.6707       24.6707       1603.25       1627.92    
  49  0.698938     -0.358193      -12.5472       12.5472       1675.84       1688.39    
  50  0.430212     -0.843478      -29.5464       29.5464       1526.77       1556.32    
  51  0.474243E-01  -3.04862      -106.791       106.791       1681.75       1788.54    
loop,thermsimp(1:2)       80   38.0884       10.3239    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    291       1737.10          0.87          1.12         22.21          0.12          0.05         24.36
Just calling func    0   0         24.37


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1737.10
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    35.0292               301
loop is:       80
neval is:      290
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       80      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    560.467      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    35.0292               301
loop is:       81
neval is:      290


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      301
neval,tstepnext:      290     301

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.343927      -1.06733      -37.3876       37.3876       1305.70       1343.08    
   2  0.822787     -0.195058      -6.83272       6.83272       1349.50       1356.33    
   3  0.320831E-01  -3.43942      -120.480       120.480       1412.25       1532.73    
   4  0.224034      -1.49596      -52.4022       52.4022       1443.32       1495.73    
   5  0.200770      -1.60559      -56.2427       56.2427       1436.17       1492.41    
   6  0.983846     -0.162863E-01 -0.570495      0.570495       1462.36       1462.93    
   7  0.762274     -0.271449      -9.50865       9.50865       1436.80       1446.31    
   8  0.872649     -0.136221      -4.77173       4.77173       1466.62       1471.39    
   9  0.366891      -1.00269      -35.1234       35.1234       1440.10       1475.22    
  10  0.800852     -0.222079      -7.77927       7.77927       1449.71       1457.49    
  11  0.755695     -0.280117      -9.81227       9.81227       1454.77       1464.58    
  12  0.595174     -0.518902      -18.1767       18.1767       1467.81       1485.99    
  13  0.316509      -1.15040      -40.2977       40.2977       1489.63       1529.93    
  14  0.847901     -0.164991      -5.77950       5.77950       1490.39       1496.17    
  15  0.116195      -2.15248      -75.3998       75.3998       1497.52       1572.92    
  16  0.121963      -2.10403      -73.7027       73.7027       1456.12       1529.82    
  17  0.298485      -1.20903      -42.3515       42.3515       1460.12       1502.47    
  18  0.698751     -0.358461      -12.5566       12.5566       1442.39       1454.95    
  19  0.248186      -1.39358      -48.8159       48.8159       1510.27       1559.08    
  20  0.717251     -0.332329      -11.6412       11.6412       1500.51       1512.15    
  21  0.591856     -0.524491      -18.3725       18.3725       1484.69       1503.07    
  22  0.780177E-01  -2.55082      -89.3532       89.3532       1463.74       1553.10    
  23  0.314281      -1.15747      -40.5452       40.5452       1500.77       1541.32    
  24  0.565423E-01  -2.87277      -100.631       100.631       1463.87       1564.50    
  25  0.964829     -0.358044E-01  -1.25420       1.25420       1434.31       1435.56    
  26  0.900157     -0.105186      -3.68459       3.68459       1526.77       1530.46    
  27  0.656998     -0.420074      -14.7148       14.7148       1546.00       1560.72    
  28  0.888436E-01  -2.42088      -84.8015       84.8015       1561.28       1646.08    
  29  0.853838     -0.158014      -5.53511       5.53511       1564.37       1569.90    
  30  0.704842     -0.349782      -12.2526       12.2526       1571.48       1583.73    
  31  0.890111     -0.116409      -4.07771       4.07771       1502.52       1506.60    
  32  0.424397     -0.857087      -30.0231       30.0231       1567.29       1597.31    
  33  0.959371     -0.414778E-01  -1.45294       1.45294       1504.88       1506.34    
  34  0.323832      -1.12753      -39.4965       39.4965       1587.39       1626.88    
  35  0.943913     -0.577217E-01  -2.02194       2.02194       1590.93       1592.95    
  36  0.119048      -2.12823      -74.5501       74.5501       1556.76       1631.31    
  37  0.427842E-01  -3.15159      -110.398       110.398       1558.96       1669.36    
  38  0.433544     -0.835761      -29.2761       29.2761       1597.78       1627.06    
  39  0.773173     -0.257253      -9.01137       9.01137       1588.30       1597.31    
  40  0.455657     -0.786014      -27.5335       27.5335       1544.91       1572.44    
  41  0.362132      -1.01575      -35.5808       35.5808       1597.91       1633.50    
  42  0.775394     -0.254384      -8.91086       8.91086       1603.25       1612.16    
  43  0.889906     -0.116639      -4.08578       4.08578       1606.23       1610.32    
  44  0.415923     -0.877255      -30.7295       30.7295       1613.45       1644.18    
  45  0.374532E-01  -3.28466      -115.059       115.059       1618.25       1733.30    
  46  0.904805     -0.100036      -3.50418       3.50418       1655.48       1658.98    
  47  0.130905      -2.03328      -71.2243       71.2243       1647.37       1718.59    
  48  0.951733     -0.494710E-01  -1.73293       1.73293       1661.38       1663.11    
  49  0.720673     -0.327570      -11.4745       11.4745       1529.84       1541.32    
  50  0.425150     -0.855314      -29.9610       29.9610       1675.84       1705.80    
  51  0.464059     -0.767744      -26.8935       26.8935       1737.10       1763.99    
loop,thermsimp(1:2)       81   37.3876       6.83272    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    292       1681.75          0.88          1.11         22.16          0.18          0.05         24.38
Just calling func    0   0         24.38


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1681.75
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    35.0292               301
loop is:       81
neval is:      291
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       81      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    560.467      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    35.0292               301
loop is:       82
neval is:      291


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      301
neval,tstepnext:      291     301

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.556446     -0.586184      -20.5336       20.5336       1305.70       1326.23    
   2  0.926592     -0.762421E-01  -2.67070       2.67070       1349.50       1352.17    
   3  0.766762     -0.265579      -9.30303       9.30303       1434.31       1443.61    
   4  0.627980     -0.465247      -16.2973       16.2973       1436.80       1453.10    
   5  0.647527     -0.434594      -15.2235       15.2235       1442.39       1457.61    
   6  0.639464     -0.447125      -15.6624       15.6624       1449.71       1465.37    
   7  0.168437      -1.78119      -62.3938       62.3938       1462.36       1524.75    
   8  0.725133     -0.321400      -11.2584       11.2584       1454.77       1466.03    
   9  0.620073     -0.477917      -16.7411       16.7411       1466.62       1483.36    
  10  0.837394     -0.177461      -6.21631       6.21631       1440.10       1446.31    
  11  0.763326     -0.270070      -9.46033       9.46033       1467.81       1477.27    
  12  0.216703      -1.52923      -53.5677       53.5677       1436.17       1489.74    
  13  0.846730     -0.166373      -5.82792       5.82792       1443.32       1449.15    
  14  0.712127     -0.339499      -11.8924       11.8924       1490.39       1502.28    
  15  0.731222     -0.313039      -10.9655       10.9655       1460.12       1471.08    
  16  0.131329      -2.03005      -71.1111       71.1111       1484.69       1555.80    
  17  0.946517     -0.549662E-01  -1.92542       1.92542       1504.88       1506.81    
  18  0.303743      -1.19157      -41.7399       41.7399       1502.52       1544.26    
  19  0.452199     -0.793633      -27.8003       27.8003       1500.51       1528.31    
  20  0.176302      -1.73556      -60.7952       60.7952       1456.12       1516.91    
  21  0.569871     -0.562345      -19.6985       19.6985       1489.63       1509.33    
  22  0.267873      -1.31724      -46.1420       46.1420       1526.77       1572.91    
  23  0.295877      -1.21781      -42.6589       42.6589       1412.25       1454.91    
  24  0.658567     -0.417689      -14.6313       14.6313       1529.84       1544.47    
  25  0.633120     -0.457096      -16.0117       16.0117       1500.77       1516.78    
  26  0.655522     -0.422324      -14.7937       14.7937       1463.74       1478.54    
  27  0.532295     -0.630558      -22.0880       22.0880       1510.27       1532.35    
  28  0.611209     -0.492317      -17.2455       17.2455       1546.00       1563.25    
  29  0.768812E-01  -2.56549      -89.8672       89.8672       1463.87       1553.74    
  30  0.845132     -0.168262      -5.89409       5.89409       1564.37       1570.26    
  31  0.133696      -2.01219      -70.4853       70.4853       1544.91       1615.39    
  32  0.850522E-01  -2.46449      -86.3291       86.3291       1497.52       1583.85    
  33  0.901960     -0.103185      -3.61448       3.61448       1571.48       1575.10    
  34  0.394454E-01  -3.23284      -113.244       113.244       1590.93       1704.17    
  35  0.152819      -1.87850      -65.8023       65.8023       1588.30       1654.10    
  36  0.951369     -0.498538E-01  -1.74634       1.74634       1567.29       1569.03    
  37  0.909075     -0.953273E-01  -3.33924       3.33924       1606.23       1609.57    
  38  0.552964     -0.592462      -20.7535       20.7535       1603.25       1624.00    
  39  0.904748     -0.100099      -3.50639       3.50639       1587.39       1590.89    
  40  0.434860     -0.832731      -29.1699       29.1699       1597.78       1626.95    
  41  0.807557E-01  -2.51633      -88.1450       88.1450       1556.76       1644.91    
  42  0.245089      -1.40614      -49.2558       49.2558       1597.91       1647.17    
  43  0.566857     -0.567648      -19.8843       19.8843       1613.45       1633.34    
  44  0.154441      -1.86794      -65.4325       65.4325       1561.28       1626.71    
  45  0.961849     -0.388974E-01  -1.36255       1.36255       1655.48       1656.84    
  46  0.267234      -1.31963      -46.2257       46.2257       1661.38       1707.60    
  47  0.170042      -1.77171      -62.0616       62.0616       1558.96       1621.02    
  48  0.796608     -0.227393      -7.96540       7.96540       1675.84       1683.81    
  49  0.474137     -0.746260      -26.1409       26.1409       1647.37       1673.51    
  50  0.164737      -1.80340      -63.1719       63.1719       1618.25       1681.42    
  51  0.728428     -0.316867      -11.0996       11.0996       1681.75       1692.85    
loop,thermsimp(1:2)       82   20.5336       2.67070    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    293       1448.85          0.86          1.11         21.95          0.19          0.05         24.15
Just calling func    0   0         24.15


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1448.85
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    35.0292               301
loop is:       82
neval is:      292
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       82      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    560.467      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    35.0292               301
loop is:       83
neval is:      292


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      301
neval,tstepnext:      292     301

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.620562     -0.477129      -16.7135       16.7135       1305.70       1322.41    
   2  0.835522     -0.179699      -6.29471       6.29471       1349.50       1355.79    
   3  0.626661     -0.467350      -16.3709       16.3709       1434.31       1450.68    
   4  0.197939      -1.61980      -56.7402       56.7402       1440.10       1496.84    
   5  0.842637     -0.171219      -5.99766       5.99766       1443.32       1449.32    
   6  0.873669     -0.135053      -4.73082       4.73082       1436.80       1441.53    
   7  0.298180E-01  -3.51264      -123.045       123.045       1412.25       1535.30    
   8  0.548374     -0.600797      -21.0455       21.0455       1442.39       1463.43    
   9  0.407469E-01  -3.20037      -112.107       112.107       1449.71       1561.81    
  10  0.210105E-02  -6.16532      -215.966       215.966       1454.77       1670.74    
  11  0.631577     -0.459536      -16.0972       16.0972       1460.12       1476.21    
  12  0.944026     -0.576013E-01  -2.01773       2.01773       1467.81       1469.83    
  13  0.492775     -0.707703      -24.7903       24.7903       1463.74       1488.53    
  14  0.195107      -1.63421      -57.2450       57.2450       1466.62       1523.87    
  15  0.775688     -0.254005      -8.89758       8.89758       1436.17       1445.07    
  16  0.763907     -0.269310      -9.43370       9.43370       1490.39       1499.83    
  17  0.797499     -0.226275      -7.92623       7.92623       1504.88       1512.81    
  18  0.639217     -0.447511      -15.6760       15.6760       1489.63       1505.31    
  19  0.775225     -0.254602      -8.91851       8.91851       1500.77       1509.69    
  20  0.680633     -0.384733      -13.4769       13.4769       1456.12       1469.60    
  21  0.532184     -0.630766      -22.0952       22.0952       1462.36       1484.45    
  22  0.843009     -0.170778      -5.98223       5.98223       1500.51       1506.49    
  23  0.943186     -0.584913E-01  -2.04890       2.04890       1510.27       1512.32    
  24  0.601611     -0.508143      -17.7999       17.7999       1502.52       1520.32    
  25  0.259021      -1.35084      -47.3190       47.3190       1529.84       1577.16    
  26  0.855132     -0.156500      -5.48207       5.48207       1463.87       1469.36    
  27  0.351229      -1.04632      -36.6517       36.6517       1484.69       1521.34    
  28  0.950362     -0.509122E-01  -1.78341       1.78341       1546.00       1547.79    
  29  0.447301     -0.804524      -28.1819       28.1819       1567.29       1595.47    
  30  0.325509      -1.12237      -39.3156       39.3156       1564.37       1603.68    
  31  0.717010     -0.332666      -11.6530       11.6530       1526.77       1538.42    
  32  0.676718     -0.390500      -13.6789       13.6789       1571.48       1585.16    
  33  0.493623     -0.705983      -24.7300       24.7300       1497.52       1522.25    
  34  0.155805E-01  -4.16174      -145.782       145.782       1587.39       1733.17    
  35  0.417708     -0.872973      -30.5796       30.5796       1606.23       1636.81    
  36  0.395067     -0.928699      -32.5316       32.5316       1544.91       1577.44    
  37  0.977835     -0.224139E-01 -0.785142      0.785142       1558.96       1559.75    
  38  0.603414     -0.505151      -17.6950       17.6950       1603.25       1620.94    
  39  0.173810      -1.74979      -61.2938       61.2938       1561.28       1622.57    
  40  0.979719     -0.204895E-01 -0.717730      0.717730       1597.78       1598.50    
  41  0.234071      -1.45213      -50.8670       50.8670       1613.45       1664.32    
  42  0.264051      -1.33161      -46.6454       46.6454       1556.76       1603.41    
  43  0.756353     -0.279247      -9.78182       9.78182       1597.91       1607.70    
  44  0.980782     -0.194046E-01 -0.679728      0.679728       1588.30       1588.98    
  45  0.444591E-01  -3.11319      -109.052       109.052       1655.48       1764.53    
  46  0.276895      -1.28412      -44.9816       44.9816       1647.37       1692.35    
  47  0.754338     -0.281915      -9.87527       9.87527       1618.25       1628.12    
  48  0.288496      -1.24308      -43.5440       43.5440       1675.84       1719.39    
  49  0.945547     -0.559915E-01  -1.96134       1.96134       1681.75       1683.71    
  50  0.698722     -0.358502      -12.5580       12.5580       1590.93       1603.49    
  51  0.586821     -0.533035      -18.6718       18.6718       1448.85       1467.52    
loop,thermsimp(1:2)       83   16.7135       6.29471    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    294       1470.36          0.88          1.11         21.96          0.20          0.05         24.20
Just calling func    0   0         24.20


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1470.36
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    35.0292               301
loop is:       83
neval is:      293
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       83      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    560.467      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    35.0292               301
loop is:       84
neval is:      293


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      301
neval,tstepnext:      293     301

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.573743     -0.555573      -19.4613       19.4613       1305.70       1325.16    
   2  0.583943E-01  -2.84054      -99.5018       99.5018       1349.50       1449.00    
   3  0.377108     -0.975224      -34.1613       34.1613       1436.80       1470.96    
   4  0.117758      -2.13912      -74.9318       74.9318       1436.17       1511.10    
   5  0.531627     -0.631812      -22.1319       22.1319       1443.32       1465.46    
   6  0.348101      -1.05526      -36.9650       36.9650       1434.31       1471.27    
   7  0.713050     -0.338204      -11.8470       11.8470       1442.39       1454.24    
   8  0.895286     -0.110612      -3.87466       3.87466       1448.85       1452.73    
   9  0.873863     -0.134831      -4.72303       4.72303       1463.87       1468.60    
  10  0.225074      -1.49132      -52.2399       52.2399       1456.12       1508.36    
  11  0.542220     -0.612083      -21.4408       21.4408       1467.81       1489.25    
  12  0.262707      -1.33672      -46.8241       46.8241       1460.12       1506.94    
  13  0.864358E-01  -2.44835      -85.7639       85.7639       1462.36       1548.12    
  14  0.468331     -0.758581      -26.5725       26.5725       1463.74       1490.32    
  15  0.896509     -0.109247      -3.82684       3.82684       1440.10       1443.92    
  16  0.169842E-01  -4.07547      -142.761       142.761       1490.39       1633.15    
  17  0.980158     -0.200410E-01 -0.702021      0.702021       1489.63       1490.33    
  18  0.252821      -1.37507      -48.1677       48.1677       1500.51       1548.68    
  19  0.556823     -0.585507      -20.5099       20.5099       1500.77       1521.28    
  20  0.520304     -0.653342      -22.8860       22.8860       1510.27       1533.15    
  21  0.956705E-01  -2.34685      -82.2081       82.2081       1504.88       1587.09    
  22  0.458762     -0.779224      -27.2956       27.2956       1502.52       1529.82    
  23  0.684654     -0.378842      -13.2705       13.2705       1484.69       1497.96    
  24  0.749393     -0.288492      -10.1056       10.1056       1497.52       1507.62    
  25  0.112724      -2.18282      -76.4623       76.4623       1466.62       1543.08    
  26  0.642114     -0.442989      -15.5176       15.5176       1412.25       1427.77    
  27  0.881888     -0.125691      -4.40284       4.40284       1526.77       1531.17    
  28  0.933845     -0.684452E-01  -2.39758       2.39758       1546.00       1548.40    
  29  0.124482      -2.08359      -72.9866       72.9866       1558.96       1631.95    
  30  0.189487      -1.66344      -58.2689       58.2689       1449.71       1507.98    
  31  0.526869     -0.640804      -22.4469       22.4469       1529.84       1552.29    
  32  0.490162     -0.713020      -24.9765       24.9765       1544.91       1569.88    
  33  0.292049      -1.23083      -43.1152       43.1152       1571.48       1614.60    
  34  0.646685     -0.435896      -15.2691       15.2691       1588.30       1603.57    
  35  0.738289     -0.303420      -10.6286       10.6286       1567.29       1577.92    
  36  0.379268     -0.969513      -33.9613       33.9613       1597.78       1631.75    
  37  0.691037     -0.369562      -12.9455       12.9455       1556.76       1569.71    
  38  0.566288     -0.568653      -19.9195       19.9195       1590.93       1610.85    
  39  0.130734      -2.03459      -71.2701       71.2701       1564.37       1635.64    
  40  0.298876      -1.20773      -42.3057       42.3057       1597.91       1640.22    
  41  0.369194     -0.996434      -34.9043       34.9043       1603.25       1638.15    
  42  0.291325      -1.23331      -43.2020       43.2020       1561.28       1604.48    
  43  0.828296     -0.188384      -6.59896       6.59896       1618.25       1624.84    
  44  0.540492E-01  -2.91786      -102.210       102.210       1606.23       1708.44    
  45  0.979889     -0.203162E-01 -0.711661      0.711661       1613.45       1614.16    
  46  0.411533     -0.887866      -31.1012       31.1012       1454.77       1485.87    
  47  0.430635     -0.842495      -29.5119       29.5119       1681.75       1711.26    
  48  0.948338     -0.530447E-01  -1.85811       1.85811       1647.37       1649.23    
  49  0.400713E-02  -5.51968      -193.350       193.350       1675.84       1869.19    
  50  0.963092     -0.376065E-01  -1.31733       1.31733       1587.39       1588.70    
  51  0.101802      -2.28472      -80.0321       80.0321       1470.36       1550.39    
loop,thermsimp(1:2)       84   19.4613       99.5018    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    295       1641.42          0.87          1.12         21.95          0.15          0.05         24.14
Just calling func    0   0         24.14


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1641.42
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    35.0292               301
loop is:       84
neval is:      294
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       84      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    560.467      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    35.0292               301
loop is:       85
neval is:      294


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      301
neval,tstepnext:      294     301

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.936701     -0.653915E-01  -2.29061       2.29061       1305.70       1307.99    
   2  0.765516     -0.267206      -9.36000       9.36000       1412.25       1421.61    
   3  0.899266     -0.106176      -3.71926       3.71926       1440.10       1443.82    
   4  0.953341     -0.477822E-01  -1.67377       1.67377       1349.50       1351.17    
   5  0.642356     -0.442612      -15.5044       15.5044       1448.85       1464.36    
   6  0.265713      -1.32534      -46.4256       46.4256       1442.39       1488.81    
   7  0.379937     -0.967749      -33.8995       33.8995       1443.32       1477.22    
   8  0.449606     -0.799384      -28.0018       28.0018       1463.87       1491.88    
   9  0.810725     -0.209826      -7.35005       7.35005       1436.80       1444.15    
  10  0.218977      -1.51879      -53.2020       53.2020       1434.31       1487.51    
  11  0.456613     -0.783919      -27.4601       27.4601       1454.77       1482.23    
  12  0.439289E-02  -5.42777      -190.130       190.130       1467.81       1657.94    
  13  0.710409     -0.341914      -11.9770       11.9770       1463.74       1475.72    
  14  0.385315     -0.953695      -33.4072       33.4072       1489.63       1523.04    
  15  0.116701      -2.14814      -75.2478       75.2478       1484.69       1559.94    
  16  0.985237     -0.148728E-01 -0.520981      0.520981       1460.12       1460.64    
  17  0.856588     -0.154798      -5.42244       5.42244       1497.52       1502.94    
  18  0.155419      -1.86163      -65.2114       65.2114       1449.71       1514.92    
  19  0.257525      -1.35664      -47.5220       47.5220       1456.12       1503.64    
  20  0.548716     -0.600174      -21.0236       21.0236       1436.17       1457.20    
  21  0.589698     -0.528145      -18.5005       18.5005       1500.77       1519.27    
  22  0.884364     -0.122887      -4.30462       4.30462       1502.52       1506.83    
  23  0.871018E-01  -2.44068      -85.4950       85.4950       1526.77       1612.27    
  24  0.486795     -0.719912      -25.2180       25.2180       1510.27       1535.48    
  25  0.161417      -1.82376      -63.8850       63.8850       1466.62       1530.51    
  26  0.598774     -0.512871      -17.9655       17.9655       1462.36       1480.33    
  27  0.483527     -0.726647      -25.4539       25.4539       1546.00       1571.46    
  28  0.715961     -0.334130      -11.7043       11.7043       1500.51       1512.21    
  29  0.771801     -0.259029      -9.07357       9.07357       1470.36       1479.43    
  30  0.458713     -0.779330      -27.2993       27.2993       1529.84       1557.14    
  31  0.235181      -1.44740      -50.7013       50.7013       1556.76       1607.47    
  32  0.488220     -0.716988      -25.1155       25.1155       1544.91       1570.02    
  33  0.365473      -1.00656      -35.2591       35.2591       1567.29       1602.55    
  34  0.191311      -1.65386      -57.9333       57.9333       1504.88       1562.82    
  35  0.484999     -0.723609      -25.3475       25.3475       1587.39       1612.73    
  36  0.799086     -0.224286      -7.85657       7.85657       1588.30       1596.15    
  37  0.811458     -0.208923      -7.31841       7.31841       1561.28       1568.60    
  38  0.829885E-01  -2.48905      -87.1896       87.1896       1590.93       1678.12    
  39  0.731085     -0.313226      -10.9721       10.9721       1613.45       1624.42    
  40  0.854012     -0.157810      -5.52794       5.52794       1571.48       1577.01    
  41  0.699629     -0.357205      -12.5126       12.5126       1618.25       1630.76    
  42  0.918965     -0.845069E-01  -2.96021       2.96021       1597.78       1600.75    
  43  0.463498     -0.768952      -26.9358       26.9358       1558.96       1585.90    
  44  0.758690E-01  -2.57875      -90.3315       90.3315       1490.39       1580.72    
  45  0.577757     -0.548602      -19.2171       19.2171       1564.37       1583.58    
  46  0.897332     -0.108329      -3.79468       3.79468       1603.25       1607.04    
  47  0.522547     -0.649040      -22.7354       22.7354       1597.91       1620.65    
  48  0.408730E-01  -3.19729      -111.998       111.998       1647.37       1759.37    
  49  0.244793      -1.40734      -49.2981       49.2981       1606.23       1655.53    
  50  0.503867     -0.685443      -24.0105       24.0105       1681.75       1705.76    
  51  0.268075      -1.31649      -46.1156       46.1156       1641.42       1687.54    
loop,thermsimp(1:2)       85   2.29061       9.36000    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    296       1696.88          0.87          1.11         22.03          0.11          0.05         24.17
Just calling func    0   0         24.17


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1696.88
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    35.0292               301
loop is:       85
neval is:      295
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       85      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    560.467      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    35.0292               301
loop is:       86
neval is:      295


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      301
neval,tstepnext:      295     301

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.334399      -1.09542      -38.3717       38.3717       1305.70       1344.07    
   2  0.140144      -1.96508      -68.8353       68.8353       1349.50       1418.33    
   3  0.520913     -0.652172      -22.8451       22.8451       1412.25       1435.10    
   4  0.628337     -0.464678      -16.2773       16.2773       1440.10       1456.37    
   5  0.203324      -1.59296      -55.8000       55.8000       1436.80       1492.60    
   6  0.481205     -0.731462      -25.6225       25.6225       1436.17       1461.79    
   7  0.948759     -0.526009E-01  -1.84257       1.84257       1460.12       1461.96    
   8  0.251825      -1.37902      -48.3060       48.3060       1448.85       1497.16    
   9  0.363806      -1.01114      -35.4193       35.4193       1463.74       1499.16    
  10  0.465077     -0.765552      -26.8167       26.8167       1443.32       1470.14    
  11  0.580920     -0.543143      -19.0259       19.0259       1470.36       1489.39    
  12  0.957129     -0.438167E-01  -1.53486       1.53486       1462.36       1463.89    
  13  0.345007      -1.06419      -37.2777       37.2777       1454.77       1492.05    
  14  0.177852E-01  -4.02939      -141.146       141.146       1434.31       1575.45    
  15  0.843779     -0.169864      -5.95021       5.95021       1442.39       1448.34    
  16  0.765452     -0.267288      -9.36289       9.36289       1463.87       1473.24    
  17  0.453925     -0.789824      -27.6669       27.6669       1497.52       1525.18    
  18  0.378234     -0.972243      -34.0569       34.0569       1456.12       1490.18    
  19  0.167312      -1.78790      -62.6286       62.6286       1502.52       1565.15    
  20  0.240345      -1.42568      -49.9404       49.9404       1500.51       1550.45    
  21  0.868226     -0.141303      -4.94974       4.94974       1449.71       1454.66    
  22  0.907002     -0.976102E-01  -3.41921       3.41921       1500.77       1504.19    
  23  0.433040     -0.836925      -29.3168       29.3168       1489.63       1518.95    
  24  0.291080      -1.23416      -43.2315       43.2315       1466.62       1509.85    
  25  0.391091     -0.938815      -32.8859       32.8859       1510.27       1543.15    
  26  0.541803     -0.612853      -21.4678       21.4678       1529.84       1551.31    
  27  0.494251     -0.704711      -24.6855       24.6855       1484.69       1509.38    
  28  0.617376     -0.482277      -16.8938       16.8938       1504.88       1521.78    
  29  0.919515     -0.839094E-01  -2.93928       2.93928       1561.28       1564.22    
  30  0.836216     -0.178868      -6.26561       6.26561       1544.91       1551.17    
  31  0.436173     -0.829716      -29.0643       29.0643       1546.00       1575.07    
  32  0.175211      -1.74176      -61.0126       61.0126       1571.48       1632.49    
  33  0.304297      -1.18975      -41.6760       41.6760       1490.39       1532.07    
  34  0.996125     -0.388259E-02 -0.136004      0.136004       1564.37       1564.50    
  35  0.146253      -1.92242      -67.3408       67.3408       1558.96       1626.30    
  36  0.110666      -2.20124      -77.1076       77.1076       1588.30       1665.40    
  37  0.481190E-01  -3.03408      -106.281       106.281       1597.78       1704.07    
  38  0.342728      -1.07082      -37.5099       37.5099       1567.29       1604.80    
  39  0.998409E-01  -2.30418      -80.7135       80.7135       1603.25       1683.96    
  40  0.509248     -0.674821      -23.6384       23.6384       1556.76       1580.40    
  41  0.974159     -0.261804E-01 -0.917081      0.917081       1526.77       1527.69    
  42  0.950347     -0.509279E-01  -1.78396       1.78396       1587.39       1589.17    
  43  0.333494      -1.09813      -38.4666       38.4666       1597.91       1636.38    
  44  0.914660     -0.892024E-01  -3.12469       3.12469       1613.45       1616.58    
  45  0.249678      -1.38758      -48.6060       48.6060       1618.25       1666.85    
  46  0.512508     -0.668440      -23.4149       23.4149       1606.23       1629.65    
  47  0.592185     -0.523937      -18.3531       18.3531       1467.81       1486.16    
  48  0.931089     -0.714008E-01  -2.50111       2.50111       1590.93       1593.43    
  49  0.638700     -0.448321      -15.7043       15.7043       1641.42       1657.12    
  50  0.563786     -0.573081      -20.0746       20.0746       1681.75       1701.83    
  51  0.136824      -1.98906      -69.6752       69.6752       1696.88       1766.55    
loop,thermsimp(1:2)       86   38.3717       68.8353    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    297       1647.37          0.87          1.12         21.89          0.17          0.05         24.10
Just calling func    0   0         24.10


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1647.37
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    35.0292               301
loop is:       86
neval is:      296
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       86      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    560.467      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    35.0292               301
loop is:       87
neval is:      296


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      301
neval,tstepnext:      296     301

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.447127E-01  -3.10750      -108.853       108.853       1305.70       1414.55    
   2  0.682805     -0.381545      -13.3652       13.3652       1349.50       1362.86    
   3  0.699780     -0.356989      -12.5051       12.5051       1412.25       1424.76    
   4  0.515086     -0.663422      -23.2391       23.2391       1442.39       1465.63    
   5  0.402461     -0.910157      -31.8821       31.8821       1449.71       1481.59    
   6  0.652803     -0.426480      -14.9393       14.9393       1440.10       1455.04    
   7  0.483213     -0.727297      -25.4767       25.4767       1436.17       1461.65    
   8  0.873684     -0.135037      -4.73023       4.73023       1460.12       1464.85    
   9  0.142648      -1.94738      -68.2152       68.2152       1462.36       1530.57    
  10  0.844357     -0.169180      -5.92625       5.92625       1443.32       1449.25    
  11  0.154187      -1.86959      -65.4902       65.4902       1463.87       1529.36    
  12  0.437314E-01  -3.12969      -109.631       109.631       1467.81       1577.44    
  13  0.455393E-02  -5.39176      -188.869       188.869       1470.36       1659.23    
  14  0.236800      -1.44054      -50.4610       50.4610       1456.12       1506.58    
  15  0.660181     -0.415241      -14.5456       14.5456       1454.77       1469.32    
  16  0.652586     -0.426813      -14.9509       14.9509       1436.80       1451.75    
  17  0.153101      -1.87666      -65.7379       65.7379       1448.85       1514.59    
  18  0.753412     -0.283143      -9.91826       9.91826       1463.74       1473.66    
  19  0.240839      -1.42363      -49.8685       49.8685       1500.77       1550.64    
  20  0.684622     -0.378888      -13.2722       13.2722       1484.69       1497.96    
  21  0.243018      -1.41462      -49.5530       49.5530       1466.62       1516.17    
  22  0.815539     -0.203906      -7.14267       7.14267       1489.63       1496.77    
  23  0.589355     -0.528726      -18.5209       18.5209       1504.88       1523.41    
  24  0.243009      -1.41466      -49.5543       49.5543       1497.52       1547.07    
  25  0.821886     -0.196154      -6.87113       6.87113       1526.77       1533.64    
  26  0.261401      -1.34170      -46.9987       46.9987       1490.39       1537.39    
  27  0.571134     -0.560131      -19.6210       19.6210       1510.27       1529.89    
  28  0.406429E-01  -3.20293      -112.196       112.196       1500.51       1612.71    
  29  0.341463      -1.07451      -37.6394       37.6394       1544.91       1582.55    
  30  0.252643      -1.37578      -48.1925       48.1925       1529.84       1578.03    
  31  0.503366     -0.686439      -24.0454       24.0454       1561.28       1585.33    
  32  0.247804      -1.39512      -48.8698       48.8698       1564.37       1613.24    
  33  0.902392     -0.102706      -3.59771       3.59771       1502.52       1506.12    
  34  0.198330E-01  -3.92041      -137.329       137.329       1546.00       1683.33    
  35  0.695627     -0.362942      -12.7136       12.7136       1434.31       1447.02    
  36  0.833441     -0.182192      -6.38205       6.38205       1556.76       1563.15    
  37  0.720954     -0.327181      -11.4609       11.4609       1587.39       1598.85    
  38  0.155604      -1.86044      -65.1698       65.1698       1590.93       1656.10    
  39  0.496580E-01  -3.00260      -105.179       105.179       1567.29       1672.47    
  40  0.804644     -0.217356      -7.61380       7.61380       1613.45       1621.07    
  41  0.329241      -1.11097      -38.9162       38.9162       1558.96       1597.88    
  42  0.889596     -0.116988      -4.09800       4.09800       1606.23       1610.33    
  43  0.857341     -0.153920      -5.39169       5.39169       1571.48       1576.87    
  44  0.238258      -1.43440      -50.2459       50.2459       1597.91       1648.16    
  45  0.998437     -0.156448E-02 -0.548024E-01  0.548024E-01   1641.42       1641.47    
  46  0.280889      -1.26979      -44.4799       44.4799       1588.30       1632.78    
  47  0.518450     -0.656912      -23.0111       23.0111       1618.25       1641.26    
  48  0.348786      -1.05330      -36.8962       36.8962       1603.25       1640.14    
  49  0.250207      -1.38547      -48.5318       48.5318       1681.75       1730.28    
  50  0.442136     -0.816138      -28.5887       28.5887       1597.78       1626.37    
  51  0.881002     -0.126696      -4.43805       4.43805       1647.37       1651.81    
loop,thermsimp(1:2)       87   108.853       13.3652    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    298       1752.88          0.87          1.11         21.92          0.18          0.05         24.14
Just calling func    0   0         24.13


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    299       1578.49          0.87          1.11         21.96          0.17          0.05         24.16
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3   1578.49
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    35.0292               301
loop is:       87
neval is:      298
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       87      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    560.467      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    35.0292               301
loop is:       88
neval is:      298


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      301
neval,tstepnext:      298     301

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.471068     -0.752752      -26.3683       26.3683       1349.50       1375.87    
   2  0.531040     -0.632917      -22.1706       22.1706       1305.70       1327.87    
   3  0.592986E-01  -2.82517      -98.9635       98.9635       1412.25       1511.22    
   4  0.247694      -1.39556      -48.8855       48.8855       1434.31       1483.19    
   5  0.131832      -2.02623      -70.9771       70.9771       1443.32       1514.30    
   6  0.928797E-01  -2.37645      -83.2452       83.2452       1436.80       1520.04    
   7  0.638590     -0.448492      -15.7103       15.7103       1440.10       1455.81    
   8  0.220145      -1.51347      -53.0157       53.0157       1436.17       1489.19    
   9  0.764323     -0.268765      -9.41463       9.41463       1460.12       1469.53    
  10  0.223429      -1.49866      -52.4969       52.4969       1442.39       1494.89    
  11  0.705665     -0.348615      -12.2117       12.2117       1454.77       1466.98    
  12  0.812667     -0.207434      -7.26626       7.26626       1463.74       1471.01    
  13  0.344167      -1.06663      -37.3632       37.3632       1449.71       1487.07    
  14  0.691720     -0.368573      -12.9108       12.9108       1489.63       1502.54    
  15  0.601584     -0.508189      -17.8015       17.8015       1484.69       1502.49    
  16  0.323598      -1.12825      -39.5218       39.5218       1502.52       1542.04    
  17  0.536181     -0.623284      -21.8332       21.8332       1456.12       1477.95    
  18  0.224445      -1.49412      -52.3380       52.3380       1448.85       1501.19    
  19  0.967837     -0.326916E-01  -1.14516       1.14516       1466.62       1467.77    
  20  0.982234     -0.179257E-01 -0.627924      0.627924       1504.88       1505.51    
  21  0.656459     -0.420894      -14.7436       14.7436       1463.87       1478.62    
  22  0.138036      -1.98024      -69.3662       69.3662       1510.27       1579.63    
  23  0.698821     -0.358360      -12.5531       12.5531       1462.36       1474.91    
  24  0.603237     -0.505446      -17.7054       17.7054       1526.77       1544.48    
  25  0.253585      -1.37205      -48.0620       48.0620       1490.39       1538.45    
  26  0.404885     -0.904153      -31.6718       31.6718       1497.52       1529.19    
  27  0.802083     -0.220543      -7.72544       7.72544       1500.77       1508.50    
  28  0.756447     -0.279123      -9.77746       9.77746       1556.76       1566.54    
  29  0.390929     -0.939231      -32.9005       32.9005       1571.48       1604.38    
  30  0.260757      -1.34417      -47.0851       47.0851       1467.81       1514.89    
  31  0.177681      -1.72776      -60.5222       60.5222       1529.84       1590.36    
  32  0.806362     -0.215223      -7.53909       7.53909       1544.91       1552.45    
  33  0.222380      -1.50337      -52.6617       52.6617       1561.28       1613.94    
  34  0.969986     -0.304736E-01  -1.06747       1.06747       1558.96       1560.03    
  35  0.417166     -0.874272      -30.6251       30.6251       1587.39       1618.01    
  36  0.212672      -1.54800      -54.2254       54.2254       1606.23       1660.46    
  37  0.141187      -1.95767      -68.5756       68.5756       1500.51       1569.09    
  38  0.750343     -0.287224      -10.0612       10.0612       1564.37       1574.43    
  39  0.628172     -0.464941      -16.2865       16.2865       1613.45       1629.74    
  40  0.466629     -0.762221      -26.7000       26.7000       1597.78       1624.48    
  41  0.120425      -2.11672      -74.1472       74.1472       1588.30       1662.44    
  42  0.179567      -1.71721      -60.1525       60.1525       1603.25       1663.40    
  43  0.209268      -1.56414      -54.7906       54.7906       1618.25       1673.04    
  44  0.730304E-01  -2.61688      -91.6672       91.6672       1641.42       1733.09    
  45  0.985392     -0.147157E-01 -0.515480      0.515480       1597.91       1598.43    
  46  0.726759E-01  -2.62175      -91.8377       91.8377       1647.37       1739.21    
  47  0.205943      -1.58016      -55.3517       55.3517       1590.93       1646.28    
  48  0.198791      -1.61550      -56.5898       56.5898       1470.36       1526.95    
  49  0.320500      -1.13787      -39.8588       39.8588       1567.29       1607.15    
  50  0.911267     -0.929191E-01  -3.25488       3.25488       1546.00       1549.26    
  51  0.153842      -1.87183      -65.5688       65.5688       1578.49       1644.06    
loop,thermsimp(1:2)       88   26.3683       22.1706    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    300       1730.67          0.87          1.11         21.95          0.17          0.05         24.15
Just calling func    0   0         24.15


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1730.67
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    35.0292               301
loop is:       88
neval is:      299
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       88      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    560.467      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    35.0292               301
loop is:       89
neval is:      299


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      301
neval,tstepnext:      299     301

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.350369      -1.04877      -36.7376       36.7376       1305.70       1342.43    
   2  0.650675     -0.429745      -15.0536       15.0536       1349.50       1364.55    
   3  0.849247     -0.163405      -5.72396       5.72396       1440.10       1445.82    
   4  0.910703     -0.935381E-01  -3.27657       3.27657       1454.77       1458.05    
   5  0.188892      -1.66658      -58.3789       58.3789       1466.62       1525.00    
   6  0.256564      -1.36038      -47.6529       47.6529       1460.12       1507.77    
   7  0.465488E-01  -3.06725      -107.443       107.443       1463.74       1571.19    
   8  0.824855     -0.192548      -6.74481       6.74481       1462.36       1469.10    
   9  0.730565     -0.313937      -10.9970       10.9970       1456.12       1467.12    
  10  0.888077     -0.118697      -4.15785       4.15785       1463.87       1468.03    
  11  0.898172     -0.107394      -3.76193       3.76193       1434.31       1438.07    
  12  0.314974      -1.15527      -40.4681       40.4681       1449.71       1490.17    
  13  0.247979      -1.39441      -48.8451       48.8451       1436.17       1485.02    
  14  0.330032E-01  -3.41115      -119.490       119.490       1442.39       1561.88    
  15  0.570783E-01  -2.86333      -100.300       100.300       1448.85       1549.15    
  16  0.694187     -0.365014      -12.7861       12.7861       1484.69       1497.48    
  17  0.314834      -1.15571      -40.4836       40.4836       1489.63       1530.12    
  18  0.917621     -0.859711E-01  -3.01150       3.01150       1504.88       1507.90    
  19  0.613858     -0.487991      -17.0939       17.0939       1500.77       1517.87    
  20  0.744084E-01  -2.59819      -91.0124       91.0124       1412.25       1503.27    
  21  0.454198     -0.789221      -27.6458       27.6458       1443.32       1470.97    
  22  0.118203E-01  -4.43793      -155.457       155.457       1467.81       1623.27    
  23  0.746996     -0.291695      -10.2178       10.2178       1436.80       1447.02    
  24  0.416160     -0.876686      -30.7096       30.7096       1470.36       1501.07    
  25  0.339178E-01  -3.38381      -118.532       118.532       1497.52       1616.05    
  26  0.824080     -0.193487      -6.77770       6.77770       1490.39       1497.17    
  27  0.589652     -0.528223      -18.5032       18.5032       1502.52       1521.03    
  28  0.680293     -0.385231      -13.4943       13.4943       1526.77       1540.27    
  29  0.864872E-01  -2.44776      -85.7431       85.7431       1546.00       1631.74    
  30  0.672988     -0.396027      -13.8725       13.8725       1544.91       1558.78    
  31  0.797049E-01  -2.52942      -88.6037       88.6037       1558.96       1647.57    
  32  0.831708     -0.184273      -6.45495       6.45495       1556.76       1563.22    
  33  0.280253E-01  -3.57465      -125.217       125.217       1500.51       1625.73    
  34  0.131717      -2.02710      -71.0077       71.0077       1564.37       1635.38    
  35  0.343675      -1.06806      -37.4133       37.4133       1510.27       1547.68    
  36  0.280745      -1.27031      -44.4980       44.4980       1529.84       1574.34    
  37  0.322275      -1.13235      -39.6654       39.6654       1597.91       1637.58    
  38  0.769830E-01  -2.56417      -89.8209       89.8209       1571.48       1661.30    
  39  0.851798     -0.160406      -5.61888       5.61888       1567.29       1572.91    
  40  0.864683     -0.145392      -5.09296       5.09296       1561.28       1566.37    
  41  0.157880      -1.84592      -64.6611       64.6611       1587.39       1652.05    
  42  0.371895     -0.989143      -34.6489       34.6489       1597.78       1632.43    
  43  0.861425     -0.149167      -5.22521       5.22521       1613.45       1618.68    
  44  0.778275E-01  -2.55326      -89.4387       89.4387       1578.49       1667.93    
  45  0.450106     -0.798272      -27.9628       27.9628       1590.93       1618.89    
  46  0.188928      -1.66639      -58.3724       58.3724       1606.23       1664.61    
  47  0.225391      -1.48992      -52.1907       52.1907       1588.30       1640.49    
  48  0.814689     -0.204949      -7.17919       7.17919       1603.25       1610.43    
  49  0.556109     -0.586791      -20.5548       20.5548       1618.25       1638.80    
  50  0.860351     -0.150415      -5.26893       5.26893       1641.42       1646.69    
  51  0.124594      -2.08269      -72.9550       72.9550       1730.67       1803.62    
loop,thermsimp(1:2)       89   36.7376       15.0536    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    301       1647.37          0.87          1.11         21.93          0.21          0.05         24.16
Just calling func    0   0         24.16


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  300    1647.4       0.2534     -2.420      3.377     -102.6     0.1065    
                       1.436      6.535     -99.70      3.528    -0.3989    

                       2.703     -1.270      1.540      7000.      7000.    

                      -2.422      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -10.66     -6.158     -5.997      8.224    

                      -12.62     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.    -0.2168E-02 0.1207    -0.6980E-01 0.3699E-01

                     -0.2486     0.1326E-01 0.1783     0.1236     0.8454E-01



                     -0.8441    -0.7653      0.000    -0.1150E-01-0.4762E-01

                      0.5425E-01 0.2138    -0.7116     0.2525E-01 0.4269    

                      0.7312E-01 0.1584    -0.4537     -1.071      7000.    



                     -0.2390    -0.6590     -2.142     -1.982    -0.3807    

                     -0.3252      9.077      8.768    -0.1672E+05 -6.000    

                     -0.8669     -1.854      9.561      8.750    -0.1969E+05



                      -6.000      1.117    -0.3554      8.956      9.215    

                     -0.1944E+05 -6.000    -0.1425    -0.1123      9.194    

                       8.856    -0.1891E+05 -6.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1647.37
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    35.0292               301
loop is:       89
neval is:      300
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       89      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    560.467      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    35.0292               301
loop is:       90
neval is:      300


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      301
neval,tstepnext:      300     301

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.131617      -2.02786      -71.0342       71.0342       1305.70       1376.73    
   2  0.314760      -1.15594      -40.4918       40.4918       1349.50       1389.99    
   3  0.748375     -0.289851      -10.1533       10.1533       1434.31       1444.46    
   4  0.632472     -0.458119      -16.0475       16.0475       1440.10       1456.14    
   5  0.677472     -0.389387      -13.6399       13.6399       1436.80       1450.44    
   6  0.433475     -0.835921      -29.2816       29.2816       1454.77       1484.05    
   7  0.458976     -0.778758      -27.2793       27.2793       1456.12       1483.40    
   8  0.411427E-02  -5.49329      -192.426       192.426       1463.87       1656.30    
   9  0.904989     -0.998322E-01  -3.49704       3.49704       1462.36       1465.86    
  10  0.480311     -0.733322      -25.6877       25.6877       1443.32       1469.01    
  11  0.277870      -1.28060      -44.8584       44.8584       1436.17       1481.03    
  12  0.958372     -0.425196E-01  -1.48943       1.48943       1449.71       1451.20    
  13  0.321639      -1.13432      -39.7345       39.7345       1490.39       1530.13    
  14  0.562333     -0.575660      -20.1649       20.1649       1484.69       1504.86    
  15  0.665565     -0.407119      -14.2610       14.2610       1470.36       1484.62    
  16  0.307614      -1.17891      -41.2963       41.2963       1412.25       1453.55    
  17  0.504790E-01  -2.98620      -104.604       104.604       1460.12       1564.72    
  18  0.361959      -1.01622      -35.5975       35.5975       1504.88       1540.48    
  19  0.470787     -0.753350      -26.3893       26.3893       1500.77       1527.16    
  20  0.312221      -1.16404      -40.7755       40.7755       1502.52       1543.30    
  21  0.156792      -1.85283      -64.9033       64.9033       1466.62       1531.52    
  22  0.445216     -0.809196      -28.3455       28.3455       1489.63       1517.98    
  23  0.999492     -0.508321E-03 -0.178061E-01  0.178061E-01   1526.77       1526.79    
  24  0.167067      -1.78936      -62.6798       62.6798       1510.27       1572.95    
  25  0.435083     -0.832219      -29.1520       29.1520       1448.85       1478.00    
  26  0.110403      -2.20362      -77.1910       77.1910       1544.91       1622.10    
  27  0.704194     -0.350701      -12.2848       12.2848       1442.39       1454.67    
  28  0.767816     -0.264205      -9.25490       9.25490       1556.76       1566.02    
  29  0.231293      -1.46407      -51.2852       51.2852       1561.28       1612.57    
  30  0.965513     -0.350953E-01  -1.22936       1.22936       1463.74       1464.97    
  31  0.674440     -0.393873      -13.7970       13.7970       1567.29       1581.08    
  32  0.248626      -1.39181      -48.7539       48.7539       1529.84       1578.60    
  33  0.461218     -0.773884      -27.1086       27.1086       1603.25       1630.36    
  34  0.778910     -0.249859      -8.75238       8.75238       1497.52       1506.27    
  35  0.665530     -0.407172      -14.2629       14.2629       1613.45       1627.71    
  36  0.383296     -0.958947      -33.5912       33.5912       1590.93       1624.52    
  37  0.492311     -0.708645      -24.8233       24.8233       1467.81       1492.63    
  38  0.631911     -0.459006      -16.0786       16.0786       1500.51       1516.59    
  39  0.150454E-01  -4.19668      -147.007       147.007       1546.00       1693.01    
  40  0.958677     -0.422006E-01  -1.47825       1.47825       1597.78       1599.26    
  41  0.411899     -0.886977      -31.0701       31.0701       1564.37       1595.44    
  42  0.466999     -0.761428      -26.6722       26.6722       1597.91       1624.59    
  43  0.622674     -0.473731      -16.5944       16.5944       1618.25       1634.84    
  44  0.497710     -0.697737      -24.4412       24.4412       1588.30       1612.74    
  45  0.763352E-01  -2.57262      -90.1169       90.1169       1641.42       1731.54    
  46  0.192360      -1.64839      -57.7417       57.7417       1558.96       1616.70    
  47  0.444368     -0.811101      -28.4122       28.4122       1587.39       1615.80    
  48  0.617268     -0.482452      -16.8999       16.8999       1571.48       1588.38    
  49  0.898554     -0.106968      -3.74701       3.74701       1606.23       1609.98    
  50  0.382850     -0.960111      -33.6320       33.6320       1578.49       1612.12    
  51  0.769319     -0.262250      -9.18640       9.18640       1647.37       1656.56    
loop,thermsimp(1:2)       90   71.0342       40.4918    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    302       1725.54          0.87          1.11         21.98          0.13          0.05         24.14
Just calling func    0   0         24.14


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    303       1489.28          0.87          1.11         21.94          0.16          0.05         24.13
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3   1489.28
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    35.0292               301
loop is:       90
neval is:      302
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       90      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    560.467      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    35.0292               301
loop is:       91
neval is:      302


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 




neval>tstepnex so lower away!t
---> lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
     new SAtemp,tstepnext are :    17.5146               351

 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      351
neval,tstepnext:      302     351

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.920377     -0.829717E-01  -1.45322       1.45322       1305.70       1307.15    
   2  0.393393     -0.932946      -16.3402       16.3402       1349.50       1365.84    
   3  0.317218      -1.14817      -20.1097       20.1097       1434.31       1454.42    
   4  0.324247      -1.12625      -19.7258       19.7258       1436.80       1456.53    
   5  0.515746E-01  -2.96473      -51.9260       51.9260       1449.71       1501.63    
   6  0.143224      -1.94335      -34.0369       34.0369       1412.25       1446.29    
   7  0.512136     -0.669164      -11.7201       11.7201       1442.39       1454.11    
   8  0.993896     -0.612239E-02 -0.107231      0.107231       1440.10       1440.20    
   9  0.440900     -0.818937      -14.3434       14.3434       1463.74       1478.09    
  10  0.861233     -0.149390      -2.61651       2.61651       1462.36       1464.98    
  11  0.690005     -0.371056      -6.49891       6.49891       1443.32       1449.82    
  12  0.192792      -1.64614      -28.8315       28.8315       1448.85       1477.68    
  13  0.975175     -0.251388E-01 -0.440295      0.440295       1436.17       1436.61    
  14  0.595327E-01  -2.82123      -49.4127       49.4127       1456.12       1505.53    
  15  0.142661      -1.94729      -34.1059       34.1059       1454.77       1488.88    
  16  0.141610      -1.95468      -34.2354       34.2354       1470.36       1504.60    
  17  0.976591     -0.236872E-01 -0.414873      0.414873       1467.81       1468.22    
  18  0.894748     -0.111213      -1.94786       1.94786       1484.69       1486.64    
  19  0.747310     -0.291275      -5.10157       5.10157       1497.52       1502.62    
  20  0.434887     -0.832670      -14.5839       14.5839       1500.51       1515.09    
  21  0.673581     -0.395146      -6.92084       6.92084       1489.63       1496.55    
  22  0.624944     -0.470094      -8.23351       8.23351       1526.77       1535.00    
  23  0.617967     -0.481321      -8.43015       8.43015       1500.77       1509.20    
  24  0.659853     -0.415739      -7.28150       7.28150       1490.39       1497.67    
  25  0.963159E-01  -2.34012      -40.9863       40.9863       1466.62       1507.61    
  26  0.179190      -1.71931      -30.1130       30.1130       1504.88       1535.00    
  27  0.251042      -1.38213      -24.2075       24.2075       1502.52       1526.73    
  28  0.116711      -2.14806      -37.6224       37.6224       1460.12       1497.74    
  29  0.890376     -0.116112      -2.03365       2.03365       1556.76       1558.80    
  30  0.880065E-02  -4.73293      -82.8954       82.8954       1510.27       1593.16    
  31  0.613810     -0.488070      -8.54836       8.54836       1529.84       1538.39    
  32  0.960436E-01  -2.34295      -41.0359       41.0359       1567.29       1608.32    
  33  0.768907E-02  -4.86796      -85.2603       85.2603       1571.48       1656.74    
  34  0.316163      -1.15150      -20.1680       20.1680       1564.37       1584.54    
  35  0.195769      -1.63082      -28.5631       28.5631       1597.78       1626.35    
  36  0.813020     -0.207000      -3.62552       3.62552       1606.23       1609.86    
  37  0.578245     -0.547758      -9.59377       9.59377       1578.49       1588.08    
  38  0.711511     -0.340365      -5.96135       5.96135       1561.28       1567.24    
  39  0.565886     -0.569362      -9.97215       9.97215       1588.30       1598.27    
  40  0.874556     -0.134039      -2.34764       2.34764       1587.39       1589.73    
  41  0.335685      -1.09158      -19.1186       19.1186       1558.96       1578.08    
  42  0.861776     -0.148759      -2.60546       2.60546       1544.91       1547.51    
  43  0.634500     -0.454918      -7.96772       7.96772       1590.93       1598.90    
  44  0.211879      -1.55174      -27.1781       27.1781       1597.91       1625.09    
  45  0.789454     -0.236414      -4.14070       4.14070       1613.45       1617.59    
  46  0.726316E-01  -2.62235      -45.9295       45.9295       1603.25       1649.18    
  47  0.344022      -1.06705      -18.6890       18.6890       1618.25       1636.93    
  48  0.367544      -1.00091      -17.5306       17.5306       1463.87       1481.40    
  49  0.634223     -0.455355      -7.97536       7.97536       1647.37       1655.35    
  50  0.462643     -0.770799      -13.5002       13.5002       1546.00       1559.50    
  51  0.904061     -0.100859      -1.76650       1.76650       1489.28       1491.05    
loop,thermsimp(1:2)       91   1.45322       16.3402    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    304       1452.61          0.87          1.11         22.06          0.21          0.05         24.29
Just calling func    0   0         24.29


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1452.61
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    17.5146               351
loop is:       91
neval is:      303
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       91      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    560.467      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    17.5146               351
loop is:       92
neval is:      303


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      351
neval,tstepnext:      303     351

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.313932      -1.15858      -20.2920       20.2920       1305.70       1325.99    
   2  0.484866     -0.723883      -12.6785       12.6785       1349.50       1362.18    
   3  0.743257     -0.296713      -5.19681       5.19681       1436.17       1441.37    
   4  0.476659     -0.740953      -12.9775       12.9775       1440.10       1453.07    
   5  0.895662E-01  -2.41278      -42.2588       42.2588       1412.25       1454.51    
   6  0.100541      -2.29719      -40.2343       40.2343       1443.32       1483.56    
   7  0.394309     -0.930621      -16.2995       16.2995       1442.39       1458.69    
   8  0.856201     -0.155250      -2.71914       2.71914       1434.31       1437.03    
   9  0.903325     -0.101673      -1.78076       1.78076       1436.80       1438.58    
  10  0.849389     -0.163238      -2.85905       2.85905       1462.36       1465.22    
  11  0.245876      -1.40293      -24.5718       24.5718       1467.81       1492.38    
  12  0.535664     -0.624247      -10.9335       10.9335       1448.85       1459.79    
  13  0.509317     -0.674685      -11.8168       11.8168       1463.74       1475.56    
  14  0.103141      -2.27166      -39.7872       39.7872       1463.87       1503.66    
  15  0.822327     -0.195617      -3.42615       3.42615       1484.69       1488.12    
  16  0.293454      -1.22603      -21.4735       21.4735       1454.77       1476.25    
  17  0.610098E-01  -2.79672      -48.9835       48.9835       1489.28       1538.26    
  18  0.467864E-01  -3.06216      -53.6326       53.6326       1489.63       1543.26    
  19  0.888641     -0.118062      -2.06780       2.06780       1490.39       1492.46    
  20  0.371769     -0.989482      -17.3304       17.3304       1460.12       1477.45    
  21  0.770202     -0.261103      -4.57311       4.57311       1449.71       1454.28    
  22  0.752967E-01  -2.58632      -45.2984       45.2984       1497.52       1542.82    
  23  0.787365E-01  -2.54165      -44.5160       44.5160       1470.36       1514.88    
  24  0.516026     -0.661597      -11.5876       11.5876       1456.12       1467.71    
  25  0.133613      -2.01281      -35.2536       35.2536       1466.62       1501.87    
  26  0.705575     -0.348742      -6.10809       6.10809       1500.77       1506.88    
  27  0.747326     -0.291254      -5.10120       5.10120       1500.51       1505.61    
  28  0.941066E-01  -2.36333      -41.3927       41.3927       1502.52       1543.92    
  29  0.243001      -1.41469      -24.7777       24.7777       1504.88       1529.66    
  30  0.186020      -1.68190      -29.4578       29.4578       1526.77       1556.23    
  31  0.707073     -0.346621      -6.07094       6.07094       1529.84       1535.91    
  32  0.820399     -0.197964      -3.46726       3.46726       1544.91       1548.37    
  33  0.169787E-01  -4.07580      -71.3860       71.3860       1556.76       1628.15    
  34  0.196118      -1.62904      -28.5320       28.5320       1546.00       1574.53    
  35  0.910420E-01  -2.39643      -41.9726       41.9726       1561.28       1603.25    
  36  0.101963      -2.28314      -39.9884       39.9884       1558.96       1598.95    
  37  0.816143     -0.203166      -3.55836       3.55836       1564.37       1567.93    
  38  0.921931     -0.812847E-01  -1.42367       1.42367       1578.49       1579.91    
  39  0.867385     -0.142273      -2.49185       2.49185       1587.39       1589.88    
  40  0.534867     -0.625737      -10.9595       10.9595       1510.27       1521.23    
  41  0.354961      -1.03575      -18.1407       18.1407       1588.30       1606.44    
  42  0.707205     -0.346435      -6.06768       6.06768       1590.93       1597.00    
  43  0.341296      -1.07501      -18.8283       18.8283       1567.29       1586.11    
  44  0.615332     -0.485594      -8.50499       8.50499       1606.23       1614.74    
  45  0.100325      -2.29934      -40.2720       40.2720       1613.45       1653.72    
  46  0.218012      -1.52321      -26.6783       26.6783       1597.91       1624.59    
  47  0.346044      -1.06119      -18.5863       18.5863       1597.78       1616.37    
  48  0.313706      -1.15930      -20.3047       20.3047       1618.25       1638.55    
  49  0.884226     -0.123043      -2.15505       2.15505       1603.25       1605.40    
  50  0.562231     -0.575842      -10.0856       10.0856       1647.37       1657.46    
  51  0.208749      -1.56662      -27.4388       27.4388       1452.61       1480.05    
loop,thermsimp(1:2)       92   20.2920       12.6785    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    305       1717.25          0.88          1.11         22.03          0.21          0.05         24.28
Just calling func    0   0         24.28


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    306       1533.26          0.88          1.11         22.38          0.09          0.05         24.51
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3   1533.26
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    17.5146               351
loop is:       92
neval is:      305
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       92      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    560.467      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    17.5146               351
loop is:       93
neval is:      305


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      351
neval,tstepnext:      305     351

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.642285E-02  -5.04789      -88.4119       88.4119       1305.70       1394.11    
   2  0.977343     -0.229176E-01 -0.401394      0.401394       1349.50       1349.90    
   3  0.515611     -0.662402      -11.6017       11.6017       1434.31       1445.91    
   4  0.985018     -0.150949E-01 -0.264382      0.264382       1436.80       1437.06    
   5  0.909744E-01  -2.39718      -41.9856       41.9856       1436.17       1478.16    
   6  0.163485      -1.81103      -31.7195       31.7195       1440.10       1471.82    
   7  0.709610     -0.343039      -6.00819       6.00819       1449.71       1455.71    
   8  0.639309     -0.447368      -7.83547       7.83547       1412.25       1420.09    
   9  0.500633     -0.691882      -12.1180       12.1180       1442.39       1454.51    
  10  0.623218     -0.472859      -8.28195       8.28195       1448.85       1457.13    
  11  0.974620     -0.257075E-01 -0.450256      0.450256       1462.36       1462.81    
  12  0.940866     -0.609540E-01  -1.06759       1.06759       1456.12       1457.19    
  13  0.268848      -1.31361      -23.0073       23.0073       1463.74       1486.75    
  14  0.131404      -2.02948      -35.5455       35.5455       1454.77       1490.32    
  15  0.242045      -1.41863      -24.8468       24.8468       1460.12       1484.96    
  16  0.333489      -1.09815      -19.2336       19.2336       1452.61       1471.84    
  17  0.540917     -0.614489      -10.7625       10.7625       1443.32       1454.09    
  18  0.935945     -0.661981E-01  -1.15943       1.15943       1484.69       1485.85    
  19  0.948265     -0.531218E-01 -0.930407      0.930407       1467.81       1468.74    
  20  0.306672      -1.18198      -20.7019       20.7019       1490.39       1511.09    
  21  0.674766E-01  -2.69597      -47.2189       47.2189       1466.62       1513.84    
  22  0.304885      -1.18782      -20.8042       20.8042       1463.87       1484.68    
  23  0.987276     -0.128055E-01 -0.224283      0.224283       1500.51       1500.73    
  24  0.866309     -0.143514      -2.51359       2.51359       1500.77       1503.29    
  25  0.325072      -1.12371      -19.6813       19.6813       1470.36       1490.04    
  26  0.882651     -0.124826      -2.18628       2.18628       1510.27       1512.45    
  27  0.608994E-02  -5.10112      -89.3441       89.3441       1504.88       1594.23    
  28  0.956776     -0.441859E-01 -0.773898      0.773898       1529.84       1530.62    
  29  0.680690E-01  -2.68723      -47.0658       47.0658       1489.28       1536.35    
  30  0.870194     -0.139039      -2.43521       2.43521       1497.52       1499.95    
  31  0.154954      -1.86463      -32.6582       32.6582       1489.63       1522.29    
  32  0.533144     -0.628963      -11.0160       11.0160       1502.52       1513.54    
  33  0.848128     -0.164724      -2.88507       2.88507       1544.91       1547.79    
  34  0.302343E-01  -3.49878      -61.2797       61.2797       1526.77       1588.05    
  35  0.670768     -0.399332      -6.99414       6.99414       1564.37       1571.36    
  36  0.575709     -0.552152      -9.67073       9.67073       1546.00       1555.67    
  37  0.961243     -0.395278E-01 -0.692315      0.692315       1578.49       1579.18    
  38  0.174287      -1.74705      -30.5990       30.5990       1567.29       1597.89    
  39  0.450902     -0.796506      -13.9505       13.9505       1587.39       1601.34    
  40  0.807155     -0.214240      -3.75233       3.75233       1590.93       1594.68    
  41  0.245094E-01  -3.70870      -64.9564       64.9564       1558.96       1623.92    
  42  0.840819     -0.173379      -3.03666       3.03666       1561.28       1564.32    
  43  0.418157     -0.871899      -15.2710       15.2710       1603.25       1618.52    
  44  0.795491     -0.228796      -4.00726       4.00726       1588.30       1592.30    
  45  0.675445E-01  -2.69497      -47.2013       47.2013       1606.23       1653.44    
  46  0.158617      -1.84126      -32.2490       32.2490       1597.78       1630.03    
  47  0.538475     -0.619015      -10.8418       10.8418       1597.91       1608.76    
  48  0.318292      -1.14479      -20.0505       20.0505       1556.76       1576.81    
  49  0.427160     -0.850596      -14.8979       14.8979       1618.25       1633.14    
  50  0.485422     -0.722737      -12.6584       12.6584       1613.45       1626.11    
  51  0.603579     -0.504879      -8.84276       8.84276       1533.26       1542.10    
loop,thermsimp(1:2)       93   88.4119      0.401394    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    307       1441.12          0.87          1.11         21.86          0.23          0.05         24.13
Just calling func    0   0         24.13


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1441.12
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    17.5146               351
loop is:       93
neval is:      306
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       93      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    560.467      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    17.5146               351
loop is:       94
neval is:      306


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      351
neval,tstepnext:      306     351

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.415683     -0.877831      -15.3749       15.3749       1349.50       1364.87    
   2  0.262668E-01  -3.63945      -63.7435       63.7435       1305.70       1369.44    
   3  0.620248     -0.477636      -8.36561       8.36561       1412.25       1420.62    
   4  0.249183      -1.38957      -24.3377       24.3377       1436.80       1461.14    
   5  0.999872     -0.128438E-03 -0.224954E-02  0.224954E-02   1434.31       1434.31    
   6  0.933252     -0.690802E-01  -1.20991       1.20991       1443.32       1444.53    
   7  0.857047     -0.154263      -2.70186       2.70186       1442.39       1445.09    
   8  0.365787      -1.00570      -17.6145       17.6145       1449.71       1467.32    
   9  0.499682     -0.693784      -12.1514       12.1514       1448.85       1461.00    
  10  0.761560     -0.272387      -4.77075       4.77075       1456.12       1460.89    
  11  0.793904E-01  -2.53338      -44.3711       44.3711       1462.36       1506.73    
  12  0.514449     -0.664659      -11.6412       11.6412       1467.81       1479.45    
  13  0.678176     -0.388349      -6.80178       6.80178       1440.10       1446.90    
  14  0.257558      -1.35651      -23.7587       23.7587       1452.61       1476.37    
  15  0.832067E-01  -2.48643      -43.5488       43.5488       1436.17       1479.72    
  16  0.272851      -1.29883      -22.7485       22.7485       1463.87       1486.62    
  17  0.255245      -1.36553      -23.9168       23.9168       1460.12       1484.03    
  18  0.419883     -0.867779      -15.1988       15.1988       1484.69       1499.89    
  19  0.870346     -0.138865      -2.43216       2.43216       1463.74       1466.18    
  20  0.814510E-01  -2.50775      -43.9223       43.9223       1470.36       1514.28    
  21  0.560000     -0.579819      -10.1553       10.1553       1454.77       1464.93    
  22  0.860285     -0.150492      -2.63581       2.63581       1497.52       1500.15    
  23  0.538601     -0.618780      -10.8377       10.8377       1500.51       1511.35    
  24  0.542321     -0.611898      -10.7171       10.7171       1500.77       1511.49    
  25  0.836575     -0.178440      -3.12530       3.12530       1490.39       1493.52    
  26  0.705694     -0.348574      -6.10514       6.10514       1510.27       1516.37    
  27  0.301063      -1.20043      -21.0251       21.0251       1502.52       1523.55    
  28  0.125899      -2.07227      -36.2950       36.2950       1466.62       1502.92    
  29  0.476747     -0.740770      -12.9743       12.9743       1489.63       1502.61    
  30  0.676103     -0.391410      -6.85539       6.85539       1529.84       1536.70    
  31  0.385349     -0.953606      -16.7020       16.7020       1489.28       1505.98    
  32  0.141470      -1.95567      -34.2527       34.2527       1533.26       1567.51    
  33  0.146971      -1.91752      -33.5846       33.5846       1544.91       1578.49    
  34  0.616396     -0.483866      -8.47472       8.47472       1546.00       1554.48    
  35  0.962361     -0.383659E-01 -0.671964      0.671964       1561.28       1561.95    
  36  0.618266     -0.480836      -8.42165       8.42165       1564.37       1572.79    
  37  0.369072     -0.996763      -17.4579       17.4579       1556.76       1574.22    
  38  0.312675      -1.16259      -20.3623       20.3623       1578.49       1598.85    
  39  0.367326      -1.00150      -17.5410       17.5410       1526.77       1544.31    
  40  0.184422      -1.69053      -29.6090       29.6090       1588.30       1617.91    
  41  0.113088      -2.17959      -38.1747       38.1747       1504.88       1543.06    
  42  0.333487      -1.09815      -19.2337       19.2337       1590.93       1610.16    
  43  0.407562     -0.897562      -15.7204       15.7204       1567.29       1583.01    
  44  0.443434     -0.813206      -14.2430       14.2430       1587.39       1601.63    
  45  0.265046      -1.32785      -23.2568       23.2568       1597.91       1621.17    
  46  0.444603     -0.810573      -14.1969       14.1969       1603.25       1617.44    
  47  0.689395E-01  -2.67453      -46.8433       46.8433       1558.96       1605.81    
  48  0.862417     -0.148017      -2.59245       2.59245       1613.45       1616.04    
  49  0.541063     -0.614219      -10.7578       10.7578       1597.78       1608.54    
  50  0.885208     -0.121933      -2.13560       2.13560       1618.25       1620.38    
  51  0.808718     -0.212305      -3.71844       3.71844       1441.12       1444.84    
loop,thermsimp(1:2)       94   15.3749       63.7435    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    308       1376.25          0.87          1.11         21.88          0.21          0.05         24.12
Just calling func    0   0         24.12


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    309       1327.94          0.87          1.11         21.89          0.25          0.04         24.16
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1327.94
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    17.5146               351
loop is:       94
neval is:      308
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       94      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    560.467      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    17.5146               351
loop is:       95
neval is:      308


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      351
neval,tstepnext:      308     351

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.292887      -1.22797      -21.5074       21.5074       1349.50       1371.01    
   2  0.225242      -1.49058      -26.1069       26.1069       1305.70       1331.80    
   3  0.946430E-01  -2.35764      -41.2932       41.2932       1412.25       1453.55    
   4  0.371694     -0.989684      -17.3339       17.3339       1434.31       1451.64    
   5  0.933291     -0.690381E-01  -1.20918       1.20918       1443.32       1444.53    
   6  0.926571     -0.762651E-01  -1.33575       1.33575       1441.12       1442.45    
   7  0.138048      -1.98015      -34.6816       34.6816       1442.39       1477.07    
   8  0.113008E-01  -4.48288      -78.5160       78.5160       1440.10       1518.61    
   9  0.405736     -0.902053      -15.7991       15.7991       1456.12       1471.92    
  10  0.390885     -0.939341      -16.4522       16.4522       1448.85       1465.31    
  11  0.873008     -0.135810      -2.37866       2.37866       1436.80       1439.18    
  12  0.945037     -0.565316E-01 -0.990128      0.990128       1454.77       1455.76    
  13  0.642194E-01  -2.74545      -48.0855       48.0855       1463.74       1511.83    
  14  0.322052E-01  -3.43563      -60.1737       60.1737       1449.71       1509.88    
  15  0.521559     -0.650933      -11.4008       11.4008       1452.61       1464.01    
  16  0.271788      -1.30273      -22.8169       22.8169       1467.81       1490.63    
  17  0.153503      -1.87403      -32.8230       32.8230       1436.17       1469.00    
  18  0.219303      -1.51730      -26.5749       26.5749       1460.12       1486.69    
  19  0.476616     -0.741044      -12.9791       12.9791       1463.87       1476.85    
  20  0.510024     -0.673297      -11.7925       11.7925       1490.39       1502.18    
  21  0.393388     -0.932959      -16.3404       16.3404       1484.69       1501.03    
  22  0.947927     -0.534776E-01 -0.936640      0.936640       1497.52       1498.45    
  23  0.472009     -0.750758      -13.1492       13.1492       1489.63       1502.78    
  24  0.678717     -0.387551      -6.78780       6.78780       1466.62       1473.41    
  25  0.617620     -0.481882      -8.43998       8.43998       1489.28       1497.72    
  26  0.138594E-01  -4.27879      -74.9413       74.9413       1462.36       1537.30    
  27  0.588445     -0.530273      -9.28752       9.28752       1500.51       1509.80    
  28  0.950805     -0.504465E-01 -0.883550      0.883550       1500.77       1501.66    
  29  0.444108     -0.811687      -14.2164       14.2164       1470.36       1484.58    
  30  0.299195      -1.20666      -21.1342       21.1342       1510.27       1531.40    
  31  0.808517E-01  -2.51514      -44.0517       44.0517       1502.52       1546.57    
  32  0.493903     -0.705415      -12.3551       12.3551       1529.84       1542.20    
  33  0.973584     -0.267710E-01 -0.468883      0.468883       1504.88       1505.35    
  34  0.219889      -1.51463      -26.5282       26.5282       1526.77       1553.30    
  35  0.872114     -0.136835      -2.39662       2.39662       1546.00       1548.40    
  36  0.413991     -0.881912      -15.4463       15.4463       1561.28       1576.73    
  37  0.155656      -1.86011      -32.5791       32.5791       1533.26       1565.84    
  38  0.744603     -0.294905      -5.16514       5.16514       1564.37       1569.53    
  39  0.627736     -0.465635      -8.15541       8.15541       1556.76       1564.92    
  40  0.137880      -1.98137      -34.7029       34.7029       1544.91       1579.61    
  41  0.270817      -1.30631      -22.8795       22.8795       1567.29       1590.17    
  42  0.271872      -1.30243      -22.8115       22.8115       1578.49       1601.30    
  43  0.988104     -0.119670E-01 -0.209597      0.209597       1587.39       1587.60    
  44  0.837729E-01  -2.47965      -43.4300       43.4300       1558.96       1602.39    
  45  0.731806     -0.312240      -5.46877       5.46877       1597.78       1603.25    
  46  0.520356     -0.653242      -11.4413       11.4413       1590.93       1602.37    
  47  0.158934      -1.83927      -32.2141       32.2141       1613.45       1645.67    
  48  0.724534     -0.322226      -5.64367       5.64367       1603.25       1608.89    
  49  0.895315     -0.110580      -1.93676       1.93676       1588.30       1590.23    
  50  0.850194     -0.162291      -2.84246       2.84246       1618.25       1621.09    
  51  0.428755     -0.846869      -14.8326       14.8326       1327.94       1342.78    
loop,thermsimp(1:2)       95   21.5074       26.1069    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    310       1473.48          0.87          1.11         21.88          0.21          0.05         24.12
Just calling func    0   0         24.12


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1473.48
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    17.5146               351
loop is:       95
neval is:      309
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       95      95
 right before GO TO 250



 right after: 250 IF (loop < nloop) CYCLE Main_loop 
loop,nloop:       95      95
loop was equal to nloop so did not start main cycle again, now will do the following: 




calculate mean & stdev of func values for current simplex (hmean,hstd)
 write hstd
 RMS of function values of last simplex =   67.4084    

hmean,hstd :    1491.85       67.4084    


writing best so far by calling functn2 
 but just writing params not moments. see the change in functn2
hmean,hstd :    1491.85       67.4084    
h(1),h(best1),h(np1) :    1305.70       1305.70       1473.48    
htherm(1),htherm(best1),htherm(np1) :    1331.80       1331.80       1645.67    


 CHECK hstd>?stopcr
---------> IF hstd>stopcr (and maxfn,neval.nevalp conditions as well) then set iflag and loop to zero and go to the start of the main cycle again 
---------> IF hstd<=stopcr then find the centroid of the current simplex and get the function value there 
 ............
 ............
 ............
 ............
  (hstd > stopcr .AND. (((maxfn>=0).AND.(neval <= maxfn)).OR.((maxfn<0).AND.(nevalp <= -1*maxfn))  )) 
  so set iflag=0 and loop=0 and start the main cycle again 
  right before CYCLE MAIN_LOOP 



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    560.467      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    17.5146               351
loop is:        1
neval is:      309


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      351
neval,tstepnext:      309     351

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.195490      -1.63225      -28.5881       28.5881       1305.70       1334.28    
   2  0.313379      -1.16034      -20.3229       20.3229       1327.94       1348.27    
   3  0.769177     -0.262434      -4.59643       4.59643       1349.50       1354.10    
   4  0.884560E-01  -2.42525      -42.4773       42.4773       1436.80       1479.28    
   5  0.890596     -0.115865      -2.02933       2.02933       1441.12       1443.15    
   6  0.657268     -0.419664      -7.35024       7.35024       1443.32       1450.67    
   7  0.960898     -0.398874E-01 -0.698612      0.698612       1434.31       1435.01    
   8  0.613422E-01  -2.79129      -48.8883       48.8883       1412.25       1461.14    
   9  0.264483E-01  -3.63256      -63.6229       63.6229       1454.77       1518.40    
  10  0.304822      -1.18803      -20.8079       20.8079       1452.61       1473.42    
  11  0.977907     -0.223409E-01 -0.391292      0.391292       1448.85       1449.24    
  12  0.746737     -0.292042      -5.11501       5.11501       1436.17       1441.29    
  13  0.450918E-01  -3.09905      -54.2787       54.2787       1456.12       1510.40    
  14  0.625433     -0.469311      -8.21980       8.21980       1466.62       1474.84    
  15  0.990029     -0.100208E-01 -0.175510      0.175510       1463.87       1464.05    
  16  0.985060     -0.150527E-01 -0.263642      0.263642       1442.39       1442.65    
  17  0.691362     -0.369092      -6.46450       6.46450       1470.36       1476.82    
  18  0.864323E-02  -4.75098      -83.2115       83.2115       1460.12       1543.33    
  19  0.908027E-01  -2.39907      -42.0187       42.0187       1467.81       1509.83    
  20  0.500093     -0.692962      -12.1370       12.1370       1489.28       1501.42    
  21  0.806913     -0.214539      -3.75757       3.75757       1497.52       1501.27    
  22  0.317749      -1.14649      -20.0804       20.0804       1484.69       1504.77    
  23  0.753050     -0.283623      -4.96755       4.96755       1500.77       1505.74    
  24  0.850048     -0.162463      -2.84547       2.84547       1490.39       1493.24    
  25  0.346718      -1.05924      -18.5522       18.5522       1489.63       1508.18    
  26  0.731558     -0.312579      -5.47469       5.47469       1504.88       1510.36    
  27  0.226645      -1.48437      -25.9982       25.9982       1500.51       1526.51    
  28  0.887805     -0.119003      -2.08429       2.08429       1449.71       1451.79    
  29  0.277731      -1.28110      -22.4380       22.4380       1463.74       1486.18    
  30  0.914814     -0.890349E-01  -1.55941       1.55941       1440.10       1441.66    
  31  0.298911      -1.20761      -21.1508       21.1508       1510.27       1531.42    
  32  0.469757     -0.755540      -13.2330       13.2330       1462.36       1475.59    
  33  0.217087      -1.52746      -26.7528       26.7528       1529.84       1556.59    
  34  0.143996      -1.93797      -33.9428       33.9428       1502.52       1536.47    
  35  0.873815     -0.134887      -2.36249       2.36249       1546.00       1548.36    
  36  0.102289      -2.27995      -39.9324       39.9324       1526.77       1566.70    
  37  0.583483     -0.538740      -9.43582       9.43582       1556.76       1566.20    
  38  0.308185      -1.17705      -20.6157       20.6157       1533.26       1553.87    
  39  0.129509      -2.04400      -35.7999       35.7999       1564.37       1600.17    
  40  0.858329     -0.152767      -2.67566       2.67566       1561.28       1563.96    
  41  0.247121      -1.39788      -24.4832       24.4832       1544.91       1569.39    
  42  0.672462     -0.396810      -6.94997       6.94997       1587.39       1594.34    
  43  0.978226     -0.220145E-01 -0.385575      0.385575       1567.29       1567.67    
  44  0.571205     -0.560006      -9.80829       9.80829       1588.30       1598.10    
  45  0.390724E-01  -3.24234      -56.7883       56.7883       1578.49       1635.28    
  46  0.773307     -0.257080      -4.50265       4.50265       1590.93       1595.43    
  47  0.860034     -0.150783      -2.64091       2.64091       1558.96       1561.60    
  48  0.521048     -0.651913      -11.4180       11.4180       1597.78       1609.20    
  49  0.577715     -0.548675      -9.60983       9.60983       1603.25       1612.86    
  50  0.449025     -0.800676      -14.0235       14.0235       1618.25       1632.27    
  51  0.879701     -0.128173      -2.24490       2.24490       1473.48       1475.73    
loop,thermsimp(1:2)        1   28.5881       20.3229    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    311       1455.02          0.87          1.11         21.93          0.23          0.05         24.18
Just calling func    0   0         24.18


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1455.02
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    17.5146               351
loop is:        1
neval is:      310
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        1      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    560.467      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    17.5146               351
loop is:        2
neval is:      310


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      351
neval,tstepnext:      310     351

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.233544      -1.45438      -25.4729       25.4729       1305.70       1331.17    
   2  0.293881      -1.22458      -21.4480       21.4480       1327.94       1349.39    
   3  0.833435     -0.182199      -3.19115       3.19115       1349.50       1352.69    
   4  0.931284     -0.711905E-01  -1.24687       1.24687       1434.31       1435.55    
   5  0.965536     -0.350722E-01 -0.614276      0.614276       1436.17       1436.79    
   6  0.534034     -0.627296      -10.9868       10.9868       1440.10       1451.08    
   7  0.975689     -0.246118E-01 -0.431065      0.431065       1442.39       1442.82    
   8  0.958131     -0.427704E-01 -0.749108      0.749108       1441.12       1441.87    
   9  0.487835     -0.717779      -12.5716       12.5716       1448.85       1461.42    
  10  0.941751     -0.600144E-01  -1.05113       1.05113       1443.32       1444.37    
  11  0.764698     -0.268274      -4.69871       4.69871       1449.71       1454.41    
  12  0.282403      -1.26442      -22.1458       22.1458       1412.25       1434.40    
  13  0.694349     -0.364781      -6.38900       6.38900       1463.87       1470.26    
  14  0.257622      -1.35626      -23.7544       23.7544       1452.61       1476.36    
  15  0.401572     -0.912369      -15.9798       15.9798       1466.62       1482.60    
  16  0.828654     -0.187952      -3.29191       3.29191       1462.36       1465.65    
  17  0.113844      -2.17292      -38.0579       38.0579       1473.48       1511.54    
  18  0.383967     -0.957199      -16.7650       16.7650       1470.36       1487.13    
  19  0.767294     -0.264886      -4.63937       4.63937       1436.80       1441.44    
  20  0.230085      -1.46930      -25.7343       25.7343       1463.74       1489.48    
  21  0.248551      -1.39211      -24.3822       24.3822       1490.39       1514.77    
  22  0.739043     -0.302399      -5.29639       5.29639       1497.52       1502.81    
  23  0.427702     -0.849328      -14.8756       14.8756       1489.28       1504.15    
  24  0.217549      -1.52533      -26.7156       26.7156       1484.69       1511.41    
  25  0.126759      -2.06546      -36.1758       36.1758       1500.77       1536.95    
  26  0.278624      -1.27789      -22.3818       22.3818       1489.63       1512.01    
  27  0.736668     -0.305618      -5.35277       5.35277       1467.81       1473.16    
  28  0.183809      -1.69386      -29.6672       29.6672       1504.88       1534.55    
  29  0.915242     -0.885666E-01  -1.55121       1.55121       1456.12       1457.67    
  30  0.864610     -0.145477      -2.54797       2.54797       1454.77       1457.32    
  31  0.996457     -0.354911E-02 -0.621613E-01  0.621613E-01   1500.51       1500.57    
  32  0.937047     -0.650222E-01  -1.13884       1.13884       1510.27       1511.40    
  33  0.664908     -0.408106      -7.14782       7.14782       1502.52       1509.67    
  34  0.409422     -0.893009      -15.6407       15.6407       1460.12       1475.76    
  35  0.293825E-01  -3.52736      -61.7803       61.7803       1546.00       1607.78    
  36  0.528099     -0.638471      -11.1826       11.1826       1533.26       1544.44    
  37  0.582244E-01  -2.84345      -49.8019       49.8019       1529.84       1579.64    
  38  0.394879     -0.929175      -16.2741       16.2741       1558.96       1575.24    
  39  0.619316     -0.479139      -8.39194       8.39194       1561.28       1569.67    
  40  0.760056     -0.274363      -4.80536       4.80536       1556.76       1561.57    
  41  0.322606      -1.13132      -19.8147       19.8147       1526.77       1546.59    
  42  0.806034     -0.215629      -3.77666       3.77666       1567.29       1571.06    
  43  0.158197      -1.84391      -32.2954       32.2954       1544.91       1577.20    
  44  0.964399     -0.362497E-01 -0.634900      0.634900       1587.39       1588.02    
  45  0.891984     -0.114307      -2.00204       2.00204       1590.93       1592.93    
  46  0.896576E-01  -2.41176      -42.2410       42.2410       1588.30       1630.54    
  47  0.976522     -0.237576E-01 -0.416104      0.416104       1564.37       1564.78    
  48  0.145640      -1.92662      -33.7439       33.7439       1597.78       1631.53    
  49  0.580689E-01  -2.84612      -49.8488       49.8488       1603.25       1653.10    
  50  0.154224      -1.86935      -32.7409       32.7409       1618.25       1650.99    
  51  0.623776     -0.471964      -8.26627       8.26627       1455.02       1463.29    
loop,thermsimp(1:2)        2   25.4729       21.4480    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    312       1452.23          0.87          1.11         21.94          0.15          0.05         24.12
Just calling func    0   0         24.12


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1452.23
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    17.5146               351
loop is:        2
neval is:      311
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        2      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    560.467      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    17.5146               351
loop is:        3
neval is:      311


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      351
neval,tstepnext:      311     351

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.402951     -0.908939      -15.9197       15.9197       1305.70       1321.62    
   2  0.995767     -0.424237E-02 -0.743035E-01  0.743035E-01   1327.94       1328.02    
   3  0.232708      -1.45797      -25.5358       25.5358       1349.50       1375.03    
   4  0.844104     -0.169480      -2.96838       2.96838       1412.25       1415.22    
   5  0.835080     -0.180228      -3.15662       3.15662       1434.31       1437.46    
   6  0.492927     -0.707395      -12.3897       12.3897       1436.17       1448.56    
   7  0.669838     -0.400719      -7.01843       7.01843       1436.80       1443.82    
   8  0.161727      -1.82184      -31.9089       31.9089       1441.12       1473.03    
   9  0.712877     -0.338447      -5.92776       5.92776       1442.39       1448.32    
  10  0.187101      -1.67610      -29.3563       29.3563       1443.32       1472.68    
  11  0.152475      -1.88075      -32.9406       32.9406       1440.10       1473.04    
  12  0.299805      -1.20462      -21.0985       21.0985       1449.71       1470.81    
  13  0.388928     -0.944360      -16.5401       16.5401       1454.77       1471.31    
  14  0.396030     -0.926264      -16.2232       16.2232       1456.12       1472.34    
  15  0.795332     -0.228996      -4.01078       4.01078       1448.85       1452.86    
  16  0.209301      -1.56398      -27.3925       27.3925       1455.02       1482.41    
  17  0.292717      -1.22855      -21.5176       21.5176       1462.36       1483.88    
  18  0.128603E-01  -4.35361      -76.2517       76.2517       1463.87       1540.13    
  19  0.386579E-01  -3.25301      -56.9751       56.9751       1467.81       1524.78    
  20  0.284417      -1.25731      -22.0214       22.0214       1460.12       1482.14    
  21  0.962037     -0.387027E-01 -0.677862      0.677862       1452.61       1453.29    
  22  0.340824      -1.07639      -18.8525       18.8525       1466.62       1485.47    
  23  0.463892     -0.768103      -13.4530       13.4530       1470.36       1483.81    
  24  0.772349     -0.258319      -4.52436       4.52436       1463.74       1468.27    
  25  0.580884     -0.543204      -9.51400       9.51400       1500.51       1510.02    
  26  0.519264     -0.655343      -11.4781       11.4781       1497.52       1508.99    
  27  0.336321      -1.08969      -19.0855       19.0855       1489.28       1508.36    
  28  0.975360     -0.249491E-01 -0.436973      0.436973       1502.52       1502.96    
  29  0.768530     -0.263276      -4.61118       4.61118       1510.27       1514.88    
  30  0.536540     -0.622614      -10.9048       10.9048       1484.69       1495.60    
  31  0.922732     -0.804161E-01  -1.40846       1.40846       1473.48       1474.89    
  32  0.603353     -0.505252      -8.84929       8.84929       1489.63       1498.48    
  33  0.927279E-01  -2.37809      -41.6512       41.6512       1490.39       1532.04    
  34  0.180890      -1.70987      -29.9476       29.9476       1504.88       1534.83    
  35  0.933825E-01  -2.37105      -41.5280       41.5280       1500.77       1542.30    
  36  0.343444      -1.06873      -18.7184       18.7184       1533.26       1551.98    
  37  0.102193      -2.28089      -39.9489       39.9489       1526.77       1566.72    
  38  0.397576     -0.922370      -16.1549       16.1549       1556.76       1572.92    
  39  0.455007     -0.787443      -13.7918       13.7918       1564.37       1578.16    
  40  0.559910     -0.579979      -10.1581       10.1581       1561.28       1571.44    
  41  0.901058     -0.104186      -1.82477       1.82477       1567.29       1569.11    
  42  0.849435     -0.163184      -2.85810       2.85810       1558.96       1561.82    
  43  0.231812      -1.46183      -25.6033       25.6033       1544.91       1570.51    
  44  0.119620      -2.12344      -37.1912       37.1912       1529.84       1567.03    
  45  0.885994     -0.121045      -2.12005       2.12005       1587.39       1589.51    
  46  0.166933      -1.79016      -31.3540       31.3540       1590.93       1622.28    
  47  0.284605      -1.25665      -22.0098       22.0098       1546.00       1568.01    
  48  0.392630     -0.934887      -16.3742       16.3742       1588.30       1604.67    
  49  0.275341      -1.28974      -22.5894       22.5894       1597.78       1620.37    
  50  0.808723     -0.212299      -3.71833       3.71833       1618.25       1621.96    
  51  0.544552     -0.607792      -10.6452       10.6452       1452.23       1462.87    
loop,thermsimp(1:2)        3   15.9197      0.743035E-01

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    313       1372.23          0.88          1.11         21.94          0.20          0.05         24.18
Just calling func    0   0         24.18


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1372.23
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    17.5146               351
loop is:        3
neval is:      312
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        3      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    560.467      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    17.5146               351
loop is:        4
neval is:      312


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      351
neval,tstepnext:      312     351

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.344716      -1.06504      -18.6537       18.6537       1305.70       1324.35    
   2  0.337825      -1.08523      -19.0073       19.0073       1327.94       1346.95    
   3  0.129257      -2.04595      -35.8341       35.8341       1349.50       1385.33    
   4  0.218013      -1.52320      -26.6783       26.6783       1412.25       1438.93    
   5  0.764988     -0.267896      -4.69209       4.69209       1434.31       1439.00    
   6  0.134235      -2.00816      -35.1721       35.1721       1436.80       1471.97    
   7  0.921891     -0.813288E-01  -1.42444       1.42444       1442.39       1443.81    
   8  0.879140E-01  -2.43140      -42.5849       42.5849       1436.17       1478.76    
   9  0.853506     -0.158403      -2.77436       2.77436       1448.85       1451.63    
  10  0.781888     -0.246043      -4.30935       4.30935       1452.61       1456.92    
  11  0.572060     -0.558512      -9.78212       9.78212       1452.23       1462.01    
  12  0.370929     -0.991745      -17.3700       17.3700       1463.74       1481.11    
  13  0.659208     -0.416716      -7.29862       7.29862       1449.71       1457.01    
  14  0.192080      -1.64984      -28.8963       28.8963       1454.77       1483.67    
  15  0.834249     -0.181224      -3.17406       3.17406       1456.12       1459.29    
  16  0.275735      -1.28831      -22.5643       22.5643       1443.32       1465.89    
  17  0.899896     -0.105476      -1.84737       1.84737       1441.12       1442.97    
  18  0.263842      -1.33241      -23.3366       23.3366       1440.10       1463.43    
  19  0.542051     -0.612396      -10.7259       10.7259       1473.48       1484.21    
  20  0.883103     -0.124314      -2.17731       2.17731       1460.12       1462.29    
  21  0.603547     -0.504931      -8.84367       8.84367       1455.02       1463.87    
  22  0.461006     -0.774344      -13.5623       13.5623       1470.36       1483.92    
  23  0.640920     -0.444850      -7.79138       7.79138       1462.36       1470.15    
  24  0.787319     -0.239122      -4.18813       4.18813       1466.62       1470.81    
  25  0.258775E-01  -3.65438      -64.0051       64.0051       1484.69       1548.70    
  26  0.838926     -0.175633      -3.07614       3.07614       1489.63       1492.71    
  27  0.184807      -1.68845      -29.5725       29.5725       1502.52       1532.10    
  28  0.642750     -0.441999      -7.74144       7.74144       1489.28       1497.02    
  29  0.962815     -0.378938E-01 -0.663694      0.663694       1497.52       1498.18    
  30  0.866393     -0.143417      -2.51189       2.51189       1500.51       1503.02    
  31  0.652626     -0.426751      -7.47437       7.47437       1510.27       1517.74    
  32  0.170956      -1.76635      -30.9369       30.9369       1467.81       1498.75    
  33  0.769008     -0.262654      -4.60028       4.60028       1490.39       1494.99    
  34  0.156770      -1.85298      -32.4542       32.4542       1504.88       1537.34    
  35  0.256549E-01  -3.66302      -64.1564       64.1564       1463.87       1528.03    
  36  0.726661     -0.319295      -5.59232       5.59232       1500.77       1506.36    
  37  0.556665     -0.585792      -10.2599       10.2599       1533.26       1543.52    
  38  0.381201     -0.964427      -16.8916       16.8916       1558.96       1575.85    
  39  0.312648      -1.16268      -20.3638       20.3638       1526.77       1547.13    
  40  0.523641     -0.646949      -11.3311       11.3311       1529.84       1541.17    
  41  0.525107     -0.644154      -11.2821       11.2821       1546.00       1557.28    
  42  0.577096     -0.549746      -9.62859       9.62859       1567.29       1576.92    
  43  0.218919      -1.51905      -26.6056       26.6056       1544.91       1571.51    
  44  0.406968     -0.899021      -15.7460       15.7460       1561.28       1577.03    
  45  0.269244      -1.31214      -22.9815       22.9815       1556.76       1579.75    
  46  0.150666      -1.89269      -33.1497       33.1497       1564.37       1597.52    
  47  0.619490     -0.478859      -8.38703       8.38703       1587.39       1595.77    
  48  0.204317      -1.58808      -27.8147       27.8147       1588.30       1616.11    
  49  0.924766     -0.782150E-01  -1.36990       1.36990       1597.78       1599.15    
  50  0.897527E-01  -2.41070      -42.2224       42.2224       1618.25       1660.47    
  51  0.938635     -0.633286E-01  -1.10918       1.10918       1372.23       1373.34    
loop,thermsimp(1:2)        4   18.6537       19.0073    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    314       1493.27          0.87          1.10         22.01          0.20          0.05         24.23
Just calling func    0   0         24.23


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1493.27
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    17.5146               351
loop is:        4
neval is:      313
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        4      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    560.467      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    17.5146               351
loop is:        5
neval is:      313


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      351
neval,tstepnext:      313     351

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.993880     -0.613850E-02 -0.107513      0.107513       1305.70       1305.80    
   2  0.544036     -0.608740      -10.6619       10.6619       1327.94       1338.61    
   3  0.752151     -0.284818      -4.98847       4.98847       1372.23       1377.22    
   4  0.128894      -2.04876      -35.8833       35.8833       1349.50       1385.38    
   5  0.954586     -0.464781E-01 -0.814045      0.814045       1412.25       1413.07    
   6  0.699109     -0.357949      -6.26934       6.26934       1434.31       1440.58    
   7  0.158831      -1.83992      -32.2254       32.2254       1441.12       1473.34    
   8  0.317803      -1.14632      -20.0774       20.0774       1442.39       1462.47    
   9  0.533633     -0.628047      -11.0000       11.0000       1448.85       1459.85    
  10  0.232061      -1.46076      -25.5846       25.5846       1452.61       1478.19    
  11  0.798671     -0.224806      -3.93739       3.93739       1449.71       1453.64    
  12  0.629719     -0.462482      -8.10019       8.10019       1456.12       1464.22    
  13  0.285415      -1.25381      -21.9600       21.9600       1452.23       1474.19    
  14  0.101345      -2.28923      -40.0949       40.0949       1460.12       1500.21    
  15  0.523846     -0.646557      -11.3242       11.3242       1440.10       1451.42    
  16  0.570798     -0.560721      -9.82080       9.82080       1455.02       1464.84    
  17  0.471006     -0.752884      -13.1865       13.1865       1443.32       1456.51    
  18  0.439034     -0.823179      -14.4177       14.4177       1462.36       1476.78    
  19  0.755118     -0.280881      -4.91953       4.91953       1466.62       1471.54    
  20  0.987033     -0.130515E-01 -0.228592      0.228592       1436.80       1437.03    
  21  0.800390E-01  -2.52524      -44.2286       44.2286       1436.17       1480.40    
  22  0.739282     -0.302075      -5.29073       5.29073       1463.74       1469.03    
  23  0.367536      -1.00093      -17.5310       17.5310       1454.77       1472.30    
  24  0.397431     -0.922735      -16.1613       16.1613       1470.36       1486.52    
  25  0.338773      -1.08242      -18.9582       18.9582       1473.48       1492.44    
  26  0.388721     -0.944893      -16.5494       16.5494       1489.63       1506.18    
  27  0.298998      -1.20732      -21.1457       21.1457       1490.39       1511.54    
  28  0.668470     -0.402763      -7.05424       7.05424       1489.28       1496.33    
  29  0.604587     -0.503210      -8.81352       8.81352       1497.52       1506.33    
  30  0.455577     -0.786190      -13.7698       13.7698       1467.81       1481.58    
  31  0.842360     -0.171548      -3.00460       3.00460       1500.51       1503.51    
  32  0.452047     -0.793969      -13.9061       13.9061       1500.77       1514.68    
  33  0.994488     -0.552709E-02 -0.968049E-01  0.968049E-01   1510.27       1510.36    
  34  0.309000E-02  -5.77958      -101.227       101.227       1463.87       1565.10    
  35  0.171789      -1.76149      -30.8517       30.8517       1502.52       1533.37    
  36  0.567417     -0.566661      -9.92485       9.92485       1504.88       1514.81    
  37  0.885121     -0.122031      -2.13732       2.13732       1529.84       1531.98    
  38  0.342608      -1.07117      -18.7611       18.7611       1533.26       1552.02    
  39  0.954017     -0.470733E-01 -0.824471      0.824471       1526.77       1527.60    
  40  0.439346     -0.822467      -14.4052       14.4052       1484.69       1499.10    
  41  0.237365E-01  -3.74074      -65.5176       65.5176       1546.00       1611.52    
  42  0.100236      -2.30023      -40.2876       40.2876       1544.91       1585.19    
  43  0.539338     -0.617412      -10.8137       10.8137       1558.96       1569.78    
  44  0.825393     -0.191896      -3.36099       3.36099       1567.29       1570.65    
  45  0.252744      -1.37538      -24.0892       24.0892       1561.28       1585.37    
  46  0.676050     -0.391488      -6.85675       6.85675       1556.76       1563.62    
  47  0.621378     -0.475815      -8.33372       8.33372       1587.39       1595.72    
  48  0.375614     -0.979194      -17.1502       17.1502       1564.37       1581.52    
  49  0.638637     -0.448418      -7.85387       7.85387       1597.78       1605.64    
  50  0.540154     -0.615902      -10.7873       10.7873       1588.30       1599.08    
  51  0.295099      -1.22045      -21.3756       21.3756       1493.27       1514.65    
loop,thermsimp(1:2)        5  0.107513       10.6619    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    315       1348.08          0.87          1.11         21.98          0.15          0.05         24.16
Just calling func    0   0         24.16


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1348.08
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    17.5146               351
loop is:        5
neval is:      314
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        5      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    560.467      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    17.5146               351
loop is:        6
neval is:      314


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      351
neval,tstepnext:      314     351

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.342475      -1.07156      -18.7679       18.7679       1305.70       1324.46    
   2  0.738210     -0.303527      -5.31616       5.31616       1327.94       1333.26    
   3  0.254388      -1.36889      -23.9757       23.9757       1372.23       1396.21    
   4  0.184184      -1.69182      -29.6315       29.6315       1349.50       1379.13    
   5  0.467311     -0.760760      -13.3244       13.3244       1412.25       1425.58    
   6  0.718957     -0.329953      -5.77900       5.77900       1436.80       1442.58    
   7  0.233172      -1.45598      -25.5009       25.5009       1434.31       1459.81    
   8  0.855319     -0.156281      -2.73720       2.73720       1440.10       1442.83    
   9  0.331323      -1.10466      -19.3477       19.3477       1449.71       1469.05    
  10  0.737635E-01  -2.60689      -45.6587       45.6587       1443.32       1488.98    
  11  0.960656     -0.401393E-01 -0.703025      0.703025       1448.85       1449.56    
  12  0.312287      -1.16383      -20.3841       20.3841       1442.39       1462.77    
  13  0.252190      -1.37757      -24.1276       24.1276       1456.12       1480.25    
  14  0.775876     -0.253763      -4.44455       4.44455       1455.02       1459.47    
  15  0.397248     -0.923194      -16.1694       16.1694       1463.74       1479.91    
  16  0.587084E-01  -2.83517      -49.6569       49.6569       1466.62       1516.28    
  17  0.923214     -0.798941E-01  -1.39931       1.39931       1454.77       1456.17    
  18  0.147001      -1.91731      -33.5810       33.5810       1441.12       1474.70    
  19  0.275551      -1.28898      -22.5760       22.5760       1452.23       1474.80    
  20  0.157032      -1.85131      -32.4249       32.4249       1462.36       1494.78    
  21  0.468534     -0.758146      -13.2786       13.2786       1452.61       1465.89    
  22  0.101055      -2.29209      -40.1450       40.1450       1436.17       1476.32    
  23  0.891765     -0.114553      -2.00634       2.00634       1467.81       1469.81    
  24  0.756241     -0.279395      -4.89349       4.89349       1470.36       1475.25    
  25  0.212181E-01  -3.85290      -67.4820       67.4820       1473.48       1540.97    
  26  0.807607     -0.213679      -3.74251       3.74251       1489.28       1493.02    
  27  0.233854      -1.45306      -25.4497       25.4497       1484.69       1510.14    
  28  0.622600     -0.473852      -8.29933       8.29933       1460.12       1468.42    
  29  0.188561      -1.66833      -29.2202       29.2202       1500.51       1529.73    
  30  0.938432E-01  -2.36613      -41.4418       41.4418       1489.63       1531.07    
  31  0.846333     -0.166843      -2.92218       2.92218       1497.52       1500.44    
  32  0.258796      -1.35172      -23.6748       23.6748       1510.27       1533.94    
  33  0.503854     -0.685469      -12.0057       12.0057       1490.39       1502.40    
  34  0.577410     -0.549202      -9.61906       9.61906       1493.27       1502.89    
  35  0.282259E-01  -3.56751      -62.4836       62.4836       1500.77       1563.26    
  36  0.618901     -0.479811      -8.40369       8.40369       1504.88       1513.29    
  37  0.563982     -0.572733      -10.0312       10.0312       1526.77       1536.80    
  38  0.290650      -1.23563      -21.6417       21.6417       1529.84       1551.48    
  39  0.165662      -1.79781      -31.4879       31.4879       1502.52       1534.01    
  40  0.871949E-01  -2.43961      -42.7288       42.7288       1533.26       1575.99    
  41  0.494744     -0.703714      -12.3253       12.3253       1556.76       1569.09    
  42  0.156326      -1.85581      -32.5038       32.5038       1463.87       1496.38    
  43  0.558357     -0.582757      -10.2068       10.2068       1558.96       1569.17    
  44  0.974745     -0.255792E-01 -0.448009      0.448009       1567.29       1567.73    
  45  0.399321     -0.917991      -16.0782       16.0782       1564.37       1580.45    
  46  0.649792     -0.431103      -7.55060       7.55060       1544.91       1552.46    
  47  0.210634      -1.55763      -27.2813       27.2813       1561.28       1588.56    
  48  0.939937     -0.619427E-01  -1.08490       1.08490       1587.39       1588.47    
  49  0.617394     -0.482248      -8.44638       8.44638       1588.30       1596.74    
  50  0.435355     -0.831593      -14.5650       14.5650       1597.78       1612.35    
  51  0.423449     -0.859323      -15.0507       15.0507       1348.08       1363.13    
loop,thermsimp(1:2)        6   18.7679       5.31616    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    316       1489.87          0.87          1.10         21.93          0.21          0.05         24.16
Just calling func    0   0         24.16


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1489.87
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    17.5146               351
loop is:        6
neval is:      315
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        6      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    560.467      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    17.5146               351
loop is:        7
neval is:      315


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      351
neval,tstepnext:      315     351

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.667416     -0.404342      -7.08190       7.08190       1305.70       1312.78    
   2  0.361364E-01  -3.32046      -58.1565       58.1565       1327.94       1386.10    
   3  0.167171      -1.78874      -31.3290       31.3290       1348.08       1379.41    
   4  0.268590E-01  -3.61716      -63.3531       63.3531       1349.50       1412.85    
   5  0.979339     -0.208774E-01 -0.365659      0.365659       1372.23       1372.60    
   6  0.285956E-01  -3.55450      -62.2557       62.2557       1412.25       1474.51    
   7  0.614036     -0.487701      -8.54190       8.54190       1436.80       1445.34    
   8  0.291622      -1.23230      -21.5832       21.5832       1440.10       1461.68    
   9  0.495778     -0.701626      -12.2887       12.2887       1448.85       1461.14    
  10  0.289385      -1.24000      -21.7181       21.7181       1454.77       1476.49    
  11  0.601390     -0.508511      -8.90637       8.90637       1455.02       1463.93    
  12  0.868837     -0.140599      -2.46254       2.46254       1434.31       1436.77    
  13  0.289097E-01  -3.54358      -62.0644       62.0644       1442.39       1504.45    
  14  0.999895     -0.104574E-03 -0.183158E-02  0.183158E-02   1452.61       1452.61    
  15  0.547924     -0.601620      -10.5371       10.5371       1460.12       1470.65    
  16  0.562607     -0.575175      -10.0740       10.0740       1449.71       1459.78    
  17  0.422387     -0.861832      -15.0947       15.0947       1467.81       1482.90    
  18  0.934703     -0.675264E-01  -1.18270       1.18270       1441.12       1442.30    
  19  0.484044     -0.725579      -12.7082       12.7082       1452.23       1464.93    
  20  0.362136      -1.01574      -17.7902       17.7902       1470.36       1488.15    
  21  0.826677     -0.190341      -3.33374       3.33374       1436.17       1439.51    
  22  0.383965     -0.957204      -16.7651       16.7651       1463.74       1480.51    
  23  0.403854     -0.906702      -15.8805       15.8805       1456.12       1472.00    
  24  0.375365     -0.979857      -17.1618       17.1618       1443.32       1460.49    
  25  0.335540      -1.09201      -19.1262       19.1262       1489.28       1508.41    
  26  0.744256     -0.295370      -5.17329       5.17329       1462.36       1467.53    
  27  0.611040     -0.492593      -8.62757       8.62757       1463.87       1472.50    
  28  0.361728      -1.01686      -17.8099       17.8099       1497.52       1515.33    
  29  0.381582     -0.963430      -16.8741       16.8741       1490.39       1507.27    
  30  0.738884E-01  -2.60520      -45.6290       45.6290       1493.27       1538.90    
  31  0.185722E-01  -3.98609      -69.8148       69.8148       1484.69       1554.51    
  32  0.470279     -0.754429      -13.2135       13.2135       1504.88       1518.10    
  33  0.499505     -0.694139      -12.1576       12.1576       1466.62       1478.78    
  34  0.641578     -0.443824      -7.77341       7.77341       1500.51       1508.28    
  35  0.462400     -0.771325      -13.5095       13.5095       1489.63       1503.14    
  36  0.953656     -0.474527E-01 -0.831115      0.831115       1510.27       1511.10    
  37  0.305321E-01  -3.48898      -61.1081       61.1081       1502.52       1563.63    
  38  0.281396      -1.26799      -22.2084       22.2084       1526.77       1548.98    
  39  0.642231     -0.442807      -7.75559       7.75559       1473.48       1481.24    
  40  0.506226     -0.680772      -11.9235       11.9235       1529.84       1541.77    
  41  0.152451      -1.88091      -32.9435       32.9435       1544.91       1577.85    
  42  0.825356     -0.191941      -3.36176       3.36176       1500.77       1504.13    
  43  0.895901     -0.109926      -1.92530       1.92530       1567.29       1569.21    
  44  0.706880     -0.346894      -6.07572       6.07572       1556.76       1562.84    
  45  0.810453     -0.210162      -3.68091       3.68091       1558.96       1562.64    
  46  0.463153     -0.769698      -13.4810       13.4810       1533.26       1546.74    
  47  0.333587      -1.09785      -19.2284       19.2284       1564.37       1583.60    
  48  0.588678     -0.529875      -9.28056       9.28056       1587.39       1596.67    
  49  0.724542E-01  -2.62480      -45.9724       45.9724       1561.28       1607.25    
  50  0.550549     -0.596839      -10.4534       10.4534       1588.30       1598.75    
  51  0.945764     -0.557622E-01 -0.976653      0.976653       1489.87       1490.84    
loop,thermsimp(1:2)        7   7.08190       58.1565    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    317       1407.88          0.87          1.10         21.97          0.18          0.05         24.17
Just calling func    0   0         24.17


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1407.88
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    17.5146               351
loop is:        7
neval is:      316
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        7      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    560.467      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    17.5146               351
loop is:        8
neval is:      316


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      351
neval,tstepnext:      316     351

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.832859     -0.182891      -3.20327       3.20327       1305.70       1308.90    
   2  0.610299     -0.493806      -8.64882       8.64882       1372.23       1380.88    
   3  0.652915     -0.426308      -7.46661       7.46661       1348.08       1355.54    
   4  0.273016      -1.29823      -22.7379       22.7379       1327.94       1350.68    
   5  0.570853     -0.560623      -9.81909       9.81909       1349.50       1359.32    
   6  0.107477E-01  -4.53306      -79.3948       79.3948       1434.31       1513.70    
   7  0.651717     -0.428145      -7.49879       7.49879       1436.17       1443.67    
   8  0.214404      -1.53989      -26.9706       26.9706       1441.12       1468.09    
   9  0.132680      -2.01982      -35.3763       35.3763       1436.80       1472.18    
  10  0.370727     -0.992290      -17.3796       17.3796       1452.61       1469.99    
  11  0.330444      -1.10732      -19.3942       19.3942       1449.71       1469.10    
  12  0.462713     -0.770647      -13.4976       13.4976       1443.32       1456.82    
  13  0.514022     -0.665489      -11.6558       11.6558       1448.85       1460.51    
  14  0.644984     -0.438530      -7.68069       7.68069       1440.10       1447.78    
  15  0.813975     -0.205826      -3.60497       3.60497       1455.02       1458.63    
  16  0.434803     -0.832863      -14.5873       14.5873       1452.23       1466.81    
  17  0.212985      -1.54653      -27.0869       27.0869       1462.36       1489.45    
  18  0.796179     -0.227931      -3.99212       3.99212       1460.12       1464.11    
  19  0.259948      -1.34727      -23.5970       23.5970       1456.12       1479.72    
  20  0.526723     -0.641081      -11.2283       11.2283       1463.87       1475.10    
  21  0.392691     -0.934731      -16.3714       16.3714       1412.25       1428.63    
  22  0.949472     -0.518494E-01 -0.908122      0.908122       1454.77       1455.68    
  23  0.665479E-01  -2.70983      -47.4617       47.4617       1466.62       1514.08    
  24  0.927466E-01  -2.37788      -41.6477       41.6477       1463.74       1505.39    
  25  0.630503     -0.461237      -8.07838       8.07838       1473.48       1481.56    
  26  0.714749     -0.335823      -5.88182       5.88182       1467.81       1473.69    
  27  0.450999     -0.796290      -13.9467       13.9467       1470.36       1484.31    
  28  0.184997      -1.68742      -29.5545       29.5545       1489.87       1519.42    
  29  0.989607     -0.104473E-01 -0.182981      0.182981       1489.63       1489.81    
  30  0.530766     -0.633434      -11.0943       11.0943       1500.77       1511.87    
  31  0.495227     -0.702738      -12.3082       12.3082       1442.39       1454.70    
  32  0.787696     -0.238642      -4.17973       4.17973       1490.39       1494.57    
  33  0.168123      -1.78306      -31.2296       31.2296       1500.51       1531.74    
  34  0.205580      -1.58192      -27.7067       27.7067       1489.28       1516.99    
  35  0.182087      -1.70327      -29.8322       29.8322       1510.27       1540.10    
  36  0.320489      -1.13791      -19.9300       19.9300       1497.52       1517.45    
  37  0.591526     -0.525050      -9.19604       9.19604       1504.88       1514.08    
  38  0.374258     -0.982811      -17.2135       17.2135       1493.27       1510.49    
  39  0.578871     -0.546675      -9.57480       9.57480       1529.84       1539.42    
  40  0.542113     -0.612280      -10.7238       10.7238       1533.26       1543.98    
  41  0.123399      -2.09233      -36.6464       36.6464       1526.77       1563.42    
  42  0.874747     -0.133820      -2.34381       2.34381       1484.69       1487.04    
  43  0.521146     -0.651725      -11.4147       11.4147       1558.96       1570.38    
  44  0.160493      -1.82950      -32.0430       32.0430       1556.76       1588.81    
  45  0.606451     -0.500131      -8.75959       8.75959       1502.52       1511.28    
  46  0.947463     -0.539676E-01 -0.945222      0.945222       1567.29       1568.23    
  47  0.187698      -1.67292      -29.3005       29.3005       1544.91       1574.21    
  48  0.157453      -1.84863      -32.3781       32.3781       1564.37       1596.75    
  49  0.411413     -0.888157      -15.5557       15.5557       1587.39       1602.94    
  50  0.399256     -0.918152      -16.0811       16.0811       1588.30       1604.38    
  51  0.629238     -0.463246      -8.11358       8.11358       1407.88       1415.99    
loop,thermsimp(1:2)        8   3.20327       8.64882    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    318       1320.58          0.86          1.10         21.89          0.29          0.05         24.19
Just calling func    0   0         24.19


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    319       1825.73          0.87          1.09         21.88          0.40          0.05         24.29
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1320.58
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    17.5146               351
loop is:        8
neval is:      318
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        8      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    560.467      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    17.5146               351
loop is:        9
neval is:      318


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      351
neval,tstepnext:      318     351

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.193078      -1.64466      -28.8056       28.8056       1305.70       1334.50    
   2  0.822950     -0.194860      -3.41290       3.41290       1327.94       1331.36    
   3  0.396787     -0.924357      -16.1897       16.1897       1348.08       1364.27    
   4  0.141060      -1.95857      -34.3036       34.3036       1349.50       1383.80    
   5  0.673747     -0.394901      -6.91654       6.91654       1372.23       1379.15    
   6  0.142835      -1.94606      -34.0845       34.0845       1407.88       1441.96    
   7  0.707555     -0.345940      -6.05900       6.05900       1412.25       1418.31    
   8  0.957483     -0.434474E-01 -0.760965      0.760965       1436.17       1436.93    
   9  0.524586     -0.645145      -11.2995       11.2995       1440.10       1451.40    
  10  0.692024     -0.368135      -6.44774       6.44774       1442.39       1448.84    
  11  0.936675E-01  -2.36800      -41.4747       41.4747       1454.77       1496.25    
  12  0.216270      -1.53123      -26.8188       26.8188       1443.32       1470.14    
  13  0.329369      -1.11058      -19.4513       19.4513       1455.02       1474.47    
  14  0.670774     -0.399323      -6.99398       6.99398       1448.85       1455.85    
  15  0.263445      -1.33391      -23.3629       23.3629       1460.12       1483.48    
  16  0.150248      -1.89547      -33.1984       33.1984       1452.23       1485.42    
  17  0.357034      -1.02992      -18.0387       18.0387       1441.12       1459.16    
  18  0.833286E-01  -2.48496      -43.5232       43.5232       1449.71       1493.23    
  19  0.431395     -0.840731      -14.7251       14.7251       1452.61       1467.33    
  20  0.304550      -1.18892      -20.8235       20.8235       1436.80       1457.62    
  21  0.930203     -0.723520E-01  -1.26722       1.26722       1467.81       1469.08    
  22  0.443091     -0.813979      -14.2565       14.2565       1463.87       1478.13    
  23  0.361548      -1.01736      -17.8187       17.8187       1456.12       1473.94    
  24  0.603851     -0.504427      -8.83484       8.83484       1473.48       1482.32    
  25  0.825014     -0.192355      -3.36902       3.36902       1470.36       1473.73    
  26  0.658742     -0.417424      -7.31101       7.31101       1484.69       1492.00    
  27  0.938632     -0.633319E-01  -1.10923       1.10923       1462.36       1463.47    
  28  0.264383E-01  -3.63294      -63.6295       63.6295       1489.63       1553.26    
  29  0.770543     -0.260660      -4.56536       4.56536       1490.39       1494.96    
  30  0.536385     -0.622903      -10.9099       10.9099       1463.74       1474.65    
  31  0.173997      -1.74872      -30.6281       30.6281       1493.27       1523.90    
  32  0.876286     -0.132063      -2.31303       2.31303       1502.52       1504.84    
  33  0.447573     -0.803915      -14.0803       14.0803       1500.77       1514.85    
  34  0.521740E-01  -2.95317      -51.7236       51.7236       1434.31       1486.03    
  35  0.509285     -0.674747      -11.8179       11.8179       1504.88       1516.70    
  36  0.135259      -2.00056      -35.0390       35.0390       1466.62       1501.66    
  37  0.238321      -1.43414      -25.1183       25.1183       1489.28       1514.40    
  38  0.146995      -1.91735      -33.5817       33.5817       1497.52       1531.10    
  39  0.166047      -1.79549      -31.4473       31.4473       1489.87       1521.31    
  40  0.830113     -0.186194      -3.26111       3.26111       1500.51       1503.77    
  41  0.638960     -0.447914      -7.84503       7.84503       1529.84       1537.69    
  42  0.156696      -1.85345      -32.4625       32.4625       1510.27       1542.73    
  43  0.956507     -0.444668E-01 -0.778819      0.778819       1533.26       1534.04    
  44  0.313979      -1.15843      -20.2895       20.2895       1526.77       1547.06    
  45  0.185265      -1.68597      -29.5291       29.5291       1567.29       1596.82    
  46  0.952300     -0.488757E-01 -0.856038      0.856038       1558.96       1559.82    
  47  0.181060      -1.70892      -29.9311       29.9311       1544.91       1574.84    
  48  0.969330     -0.311499E-01 -0.545578      0.545578       1556.76       1557.31    
  49  0.832772     -0.182996      -3.20510       3.20510       1564.37       1567.57    
  50  0.733500     -0.309927      -5.42826       5.42826       1587.39       1592.81    
  51  0.901211     -0.104016      -1.82179       1.82179       1320.58       1322.40    
loop,thermsimp(1:2)        9   28.8056       3.41290    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    320       1539.42          0.86          1.09         22.12          0.11          0.04         24.24
Just calling func    0   0         24.24


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1539.42
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    17.5146               351
loop is:        9
neval is:      319
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        9      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    560.467      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    17.5146               351
loop is:       10
neval is:      319


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      351
neval,tstepnext:      319     351

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.516123     -0.661410      -11.5843       11.5843       1320.58       1332.17    
   2  0.677402     -0.389491      -6.82178       6.82178       1327.94       1334.77    
   3  0.899541     -0.105871      -1.85428       1.85428       1305.70       1307.55    
   4  0.235706      -1.44517      -25.3116       25.3116       1348.08       1373.39    
   5  0.194769      -1.63594      -28.6529       28.6529       1372.23       1400.89    
   6  0.814930     -0.204653      -3.58442       3.58442       1349.50       1353.08    
   7  0.727423E-01  -2.62083      -45.9029       45.9029       1412.25       1458.16    
   8  0.126759      -2.06547      -36.1759       36.1759       1436.17       1472.35    
   9  0.592876     -0.522770      -9.15611       9.15611       1407.88       1417.04    
  10  0.131380      -2.02966      -35.5488       35.5488       1442.39       1477.94    
  11  0.394760E-01  -3.23206      -56.6083       56.6083       1440.10       1496.70    
  12  0.539964     -0.616252      -10.7934       10.7934       1448.85       1459.65    
  13  0.127256      -2.06155      -36.1073       36.1073       1436.80       1472.91    
  14  0.245583      -1.40412      -24.5926       24.5926       1441.12       1465.71    
  15  0.236145E-01  -3.74590      -65.6079       65.6079       1462.36       1527.97    
  16  0.791943     -0.233266      -4.08556       4.08556       1452.61       1456.70    
  17  0.223014      -1.50052      -26.2810       26.2810       1467.81       1494.09    
  18  0.943370     -0.582970E-01  -1.02105       1.02105       1443.32       1444.34    
  19  0.844237     -0.169322      -2.96561       2.96561       1470.36       1473.33    
  20  0.600301     -0.510323      -8.93811       8.93811       1456.12       1465.06    
  21  0.742625E-01  -2.60015      -45.5406       45.5406       1455.02       1500.56    
  22  0.288925E-01  -3.54417      -62.0748       62.0748       1463.74       1525.82    
  23  0.325834      -1.12137      -19.6403       19.6403       1463.87       1483.51    
  24  0.317147      -1.14839      -20.1136       20.1136       1473.48       1493.60    
  25  0.655873     -0.421788      -7.38745       7.38745       1460.12       1467.50    
  26  0.259034      -1.35080      -23.6586       23.6586       1452.23       1475.88    
  27  0.639742E-01  -2.74927      -48.1525       48.1525       1434.31       1482.46    
  28  0.110416E-01  -4.50609      -78.9223       78.9223       1484.69       1563.61    
  29  0.768965E-01  -2.56529      -44.9301       44.9301       1449.71       1494.64    
  30  0.757182     -0.278151      -4.87171       4.87171       1490.39       1495.26    
  31  0.788615     -0.237477      -4.15931       4.15931       1454.77       1458.93    
  32  0.724297     -0.322554      -5.64940       5.64940       1466.62       1472.27    
  33  0.807261     -0.214109      -3.75003       3.75003       1500.51       1504.26    
  34  0.356497      -1.03143      -18.0651       18.0651       1502.52       1520.59    
  35  0.685602     -0.377458      -6.61103       6.61103       1489.28       1495.89    
  36  0.681617     -0.383288      -6.71313       6.71313       1500.77       1507.48    
  37  0.323748      -1.12779      -19.7528       19.7528       1504.88       1524.64    
  38  0.622817     -0.473503      -8.29322       8.29322       1489.87       1498.16    
  39  0.534584     -0.626266      -10.9688       10.9688       1493.27       1504.24    
  40  0.130255E-02  -6.64343      -116.357       116.357       1497.52       1613.87    
  41  0.357398      -1.02891      -18.0209       18.0209       1533.26       1551.28    
  42  0.290986      -1.23448      -21.6215       21.6215       1529.84       1551.46    
  43  0.182566      -1.70064      -29.7861       29.7861       1510.27       1540.05    
  44  0.695597     -0.362984      -6.35753       6.35753       1526.77       1533.13    
  45  0.612287     -0.490555      -8.59187       8.59187       1489.63       1498.22    
  46  0.845780     -0.167496      -2.93363       2.93363       1556.76       1559.70    
  47  0.628042     -0.465149      -8.14690       8.14690       1558.96       1567.11    
  48  0.830233     -0.186049      -3.25858       3.25858       1564.37       1567.63    
  49  0.373260     -0.985481      -17.2603       17.2603       1544.91       1562.17    
  50  0.711640     -0.340183      -5.95818       5.95818       1587.39       1593.34    
  51  0.449400     -0.799842      -14.0089       14.0089       1539.42       1553.43    
loop,thermsimp(1:2)       10   11.5843       6.82178    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    321       1394.92          0.87          1.11         22.27          0.20          0.05         24.50
Just calling func    0   0         24.50


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  320    1394.9       0.2083     -2.601      3.652     -102.6     0.2036    
                       2.131      1.696     -99.70      3.604      1.806    

                       3.064     -2.515      1.540      7000.      7000.    

                      -2.492      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -10.79     -7.441     -5.911      8.358    

                      -11.92     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.8055E-02 0.1319    -0.5384E-01 0.3825E-01

                     -0.2486     0.3367     0.1696     0.1481     0.8094E-01



                     -0.9477     -1.159      0.000    -0.4631E-01-0.3990E-01

                      0.2144E-01 0.2347    -0.7116    -0.1314E-01 0.4135    

                      0.8498E-01 0.1334    -0.6227     -1.075      7000.    



                     -0.2390    -0.6590     -2.142     -1.982    -0.3807    

                     -0.3252      9.073      8.748    -0.1672E+05 -6.000    

                      -1.194     -1.822      9.623      8.946    -0.1969E+05



                      -6.000      1.181    -0.4210      8.958      9.109    

                     -0.1944E+05 -6.000    -0.6540    -0.1891      9.245    

                       8.894    -0.1891E+05 -6.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1394.92
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    17.5146               351
loop is:       10
neval is:      320
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       10      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    560.467      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    17.5146               351
loop is:       11
neval is:      320


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      351
neval,tstepnext:      320     351

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.737263     -0.304811      -5.33864       5.33864       1305.70       1311.03    
   2  0.372515     -0.987477      -17.2953       17.2953       1320.58       1337.88    
   3  0.197611E-01  -3.92404      -68.7280       68.7280       1327.94       1396.67    
   4  0.939239     -0.626858E-01  -1.09792       1.09792       1349.50       1350.60    
   5  0.212506      -1.54879      -27.1264       27.1264       1348.08       1375.20    
   6  0.141762      -1.95360      -34.2166       34.2166       1372.23       1406.45    
   7  0.183632      -1.69482      -29.6842       29.6842       1407.88       1437.56    
   8  0.479067     -0.735915      -12.8893       12.8893       1443.32       1456.21    
   9  0.113189      -2.17870      -38.1590       38.1590       1452.61       1490.77    
  10  0.314091      -1.15807      -20.2832       20.2832       1412.25       1432.54    
  11  0.457761     -0.781409      -13.6861       13.6861       1454.77       1468.46    
  12  0.923744     -0.793200E-01  -1.38926       1.38926       1448.85       1450.24    
  13  0.805387     -0.216433      -3.79074       3.79074       1456.12       1459.91    
  14  0.979257     -0.209609E-01 -0.367121      0.367121       1441.12       1441.48    
  15  0.634716E-01  -2.75716      -48.2906       48.2906       1460.12       1508.41    
  16  0.502866     -0.687432      -12.0401       12.0401       1466.62       1478.66    
  17  0.844986     -0.168435      -2.95008       2.95008       1436.17       1439.12    
  18  0.548347     -0.600848      -10.5236       10.5236       1436.80       1447.32    
  19  0.825472     -0.191800      -3.35930       3.35930       1470.36       1473.72    
  20  0.806424     -0.215145      -3.76818       3.76818       1452.23       1455.99    
  21  0.497450E-01  -3.00085      -52.5586       52.5586       1442.39       1494.95    
  22  0.407289     -0.898233      -15.7322       15.7322       1434.31       1450.04    
  23  0.522833     -0.648493      -11.3581       11.3581       1463.87       1475.23    
  24  0.763038     -0.270448      -4.73679       4.73679       1473.48       1478.22    
  25  0.706120     -0.347970      -6.09457       6.09457       1467.81       1473.90    
  26  0.540862     -0.614591      -10.7643       10.7643       1449.71       1460.47    
  27  0.807340E-01  -2.51660      -44.0772       44.0772       1490.39       1534.47    
  28  0.310756      -1.16875      -20.4701       20.4701       1489.28       1509.75    
  29  0.689192     -0.372235      -6.51955       6.51955       1440.10       1446.62    
  30  0.634973     -0.454174      -7.95467       7.95467       1489.87       1497.82    
  31  0.598432     -0.513442      -8.99273       8.99273       1489.63       1498.62    
  32  0.393639     -0.932321      -16.3292       16.3292       1455.02       1471.35    
  33  0.369460     -0.995714      -17.4395       17.4395       1493.27       1510.71    
  34  0.129274      -2.04582      -35.8317       35.8317       1500.51       1536.34    
  35  0.250376      -1.38479      -24.2541       24.2541       1500.77       1525.03    
  36  0.536641     -0.622425      -10.9015       10.9015       1502.52       1513.42    
  37  0.495942     -0.701296      -12.2829       12.2829       1504.88       1517.17    
  38  0.650684     -0.429731      -7.52658       7.52658       1463.74       1471.27    
  39  0.889212     -0.117420      -2.05656       2.05656       1462.36       1464.42    
  40  0.314936      -1.15539      -20.2361       20.2361       1526.77       1547.01    
  41  0.943567     -0.580875E-01  -1.01738       1.01738       1510.27       1511.28    
  42  0.672016     -0.397473      -6.96158       6.96158       1533.26       1540.22    
  43  0.133907      -2.01061      -35.2151       35.2151       1529.84       1565.06    
  44  0.259017      -1.35086      -23.6598       23.6598       1539.42       1563.08    
  45  0.112444      -2.18530      -38.2746       38.2746       1556.76       1595.04    
  46  0.235994      -1.44395      -25.2902       25.2902       1544.91       1570.20    
  47  0.879651     -0.128231      -2.24591       2.24591       1484.69       1486.94    
  48  0.750555     -0.286942      -5.02567       5.02567       1558.96       1563.99    
  49  0.996491E-01  -2.30610      -40.3904       40.3904       1564.37       1604.76    
  50  0.100853      -2.29409      -40.1801       40.1801       1587.39       1627.57    
  51  0.520543     -0.652882      -11.4350       11.4350       1394.92       1406.36    
loop,thermsimp(1:2)       11   5.33864       17.2953    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    322       1434.41          0.87          1.11         22.00          0.14          0.05         24.16
Just calling func    0   0         24.16


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1434.41
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    17.5146               351
loop is:       11
neval is:      321
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       11      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    560.467      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    17.5146               351
loop is:       12
neval is:      321


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      351
neval,tstepnext:      321     351

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.783491     -0.243995      -4.27348       4.27348       1305.70       1309.97    
   2  0.973841     -0.265069E-01 -0.464258      0.464258       1320.58       1321.05    
   3  0.294662      -1.22193      -21.4015       21.4015       1349.50       1370.90    
   4  0.702628     -0.352928      -6.18140       6.18140       1348.08       1354.26    
   5  0.763280     -0.270131      -4.73123       4.73123       1327.94       1332.68    
   6  0.578080E-01  -2.85063      -49.9276       49.9276       1394.92       1444.85    
   7  0.834037     -0.181478      -3.17852       3.17852       1372.23       1375.41    
   8  0.976312     -0.239730E-01 -0.419878      0.419878       1412.25       1412.67    
   9  0.603670     -0.504728      -8.84011       8.84011       1407.88       1416.72    
  10  0.458546     -0.779695      -13.6560       13.6560       1436.17       1449.83    
  11  0.201917      -1.59990      -28.0216       28.0216       1441.12       1469.14    
  12  0.362727      -1.01411      -17.7617       17.7617       1440.10       1457.86    
  13  0.466909E-01  -3.06421      -53.6684       53.6684       1436.80       1490.47    
  14  0.602192     -0.507180      -8.88305       8.88305       1434.31       1443.19    
  15  0.332545      -1.10098      -19.2832       19.2832       1448.85       1468.14    
  16  0.758378     -0.276574      -4.84408       4.84408       1452.23       1457.07    
  17  0.834950     -0.180384      -3.15935       3.15935       1443.32       1446.48    
  18  0.910410     -0.938599E-01  -1.64392       1.64392       1456.12       1457.76    
  19  0.825418E-01  -2.49445      -43.6893       43.6893       1449.71       1493.40    
  20  0.639611     -0.446894      -7.82718       7.82718       1462.36       1470.19    
  21  0.345418      -1.06300      -18.6180       18.6180       1454.77       1473.39    
  22  0.961674     -0.390802E-01 -0.684475      0.684475       1463.74       1464.43    
  23  0.274135      -1.29413      -22.6663       22.6663       1455.02       1477.69    
  24  0.275236      -1.29013      -22.5961       22.5961       1470.36       1492.96    
  25  0.373550     -0.984704      -17.2467       17.2467       1467.81       1485.06    
  26  0.407178     -0.898505      -15.7370       15.7370       1463.87       1479.61    
  27  0.908773     -0.956602E-01  -1.67545       1.67545       1473.48       1475.16    
  28  0.578518     -0.547286      -9.58550       9.58550       1466.62       1476.21    
  29  0.674288     -0.394098      -6.90248       6.90248       1484.69       1491.60    
  30  0.758166     -0.276853      -4.84897       4.84897       1452.61       1457.46    
  31  0.764349E-01  -2.57132      -45.0356       45.0356       1442.39       1487.42    
  32  0.962342     -0.383853E-01 -0.672303      0.672303       1489.87       1490.54    
  33  0.918960     -0.845125E-01  -1.48020       1.48020       1489.63       1491.11    
  34  0.617888     -0.481448      -8.43237       8.43237       1460.12       1468.55    
  35  0.227646      -1.47996      -25.9210       25.9210       1489.28       1515.20    
  36  0.262001      -1.33941      -23.4592       23.4592       1493.27       1516.73    
  37  0.589438     -0.528586      -9.25798       9.25798       1510.27       1519.52    
  38  0.201352      -1.60270      -28.0707       28.0707       1502.52       1530.59    
  39  0.350279      -1.04903      -18.3733       18.3733       1504.88       1523.26    
  40  0.647374     -0.434831      -7.61589       7.61589       1500.77       1508.39    
  41  0.604508     -0.503341      -8.81581       8.81581       1490.39       1499.21    
  42  0.700946     -0.355325      -6.22338       6.22338       1500.51       1506.73    
  43  0.575270     -0.552915      -9.68410       9.68410       1533.26       1542.94    
  44  0.554419     -0.589835      -10.3307       10.3307       1526.77       1537.10    
  45  0.375300     -0.980029      -17.1648       17.1648       1539.42       1556.59    
  46  0.605541     -0.501632      -8.78589       8.78589       1558.96       1567.75    
  47  0.109847      -2.20867      -38.6839       38.6839       1529.84       1568.53    
  48  0.553505     -0.591485      -10.3596       10.3596       1544.91       1555.27    
  49  0.412268     -0.886082      -15.5194       15.5194       1556.76       1572.28    
  50  0.664246     -0.409102      -7.16527       7.16527       1564.37       1571.53    
  51  0.707719     -0.345708      -6.05493       6.05493       1434.41       1440.47    
loop,thermsimp(1:2)       12   4.27348      0.464258    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    323       1308.24          0.87          1.11         21.93          0.22          0.05         24.19
Just calling func    0   0         24.19


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    324       1453.62          0.88          1.13         22.00          0.16          0.05         24.22
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1308.24
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    17.5146               351
loop is:       12
neval is:      323
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       12      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    560.467      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    17.5146               351
loop is:       13
neval is:      323


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      351
neval,tstepnext:      323     351

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.964298     -0.363545E-01 -0.636735      0.636735       1305.70       1306.33    
   2  0.963371     -0.373169E-01 -0.653591      0.653591       1320.58       1321.24    
   3  0.851172E-02  -4.76631      -83.4801       83.4801       1327.94       1411.42    
   4  0.731929E-01  -2.61466      -45.7947       45.7947       1348.08       1393.87    
   5  0.491869     -0.709543      -12.4274       12.4274       1349.50       1361.93    
   6  0.625436     -0.469306      -8.21970       8.21970       1372.23       1380.45    
   7  0.139469      -1.96991      -34.5023       34.5023       1412.25       1446.76    
   8  0.464987     -0.765746      -13.4117       13.4117       1407.88       1421.29    
   9  0.192956      -1.64529      -28.8167       28.8167       1434.41       1463.23    
  10  0.184589E-01  -3.99221      -69.9219       69.9219       1434.31       1504.23    
  11  0.327387      -1.11661      -19.5570       19.5570       1394.92       1414.48    
  12  0.447570     -0.803921      -14.0804       14.0804       1443.32       1457.40    
  13  0.282132      -1.26538      -22.1626       22.1626       1436.17       1458.33    
  14  0.991234     -0.880510E-02 -0.154218      0.154218       1452.23       1452.38    
  15  0.574009     -0.555110      -9.72253       9.72253       1452.61       1462.33    
  16  0.884017     -0.123279      -2.15918       2.15918       1456.12       1458.28    
  17  0.332578      -1.10088      -19.2815       19.2815       1440.10       1459.38    
  18  0.294524      -1.22240      -21.4098       21.4098       1463.74       1485.15    
  19  0.865605     -0.144326      -2.52782       2.52782       1448.85       1451.38    
  20  0.441883E-01  -3.11930      -54.6332       54.6332       1460.12       1514.75    
  21  0.652915     -0.426309      -7.46663       7.46663       1441.12       1448.58    
  22  0.712636E-01  -2.64137      -46.2626       46.2626       1462.36       1508.62    
  23  0.211397      -1.55402      -27.2180       27.2180       1454.77       1481.99    
  24  0.836672E-01  -2.48091      -43.4521       43.4521       1473.48       1516.94    
  25  0.397953     -0.921422      -16.1383       16.1383       1466.62       1482.76    
  26  0.545442     -0.606159      -10.6166       10.6166       1455.02       1465.64    
  27  0.628874     -0.463825      -8.12371       8.12371       1463.87       1472.00    
  28  0.243035      -1.41455      -24.7753       24.7753       1467.81       1492.58    
  29  0.700237     -0.356336      -6.24108       6.24108       1442.39       1448.63    
  30  0.887974     -0.118813      -2.08096       2.08096       1436.80       1438.88    
  31  0.354481      -1.03710      -18.1644       18.1644       1489.87       1508.03    
  32  0.579479     -0.545626      -9.55643       9.55643       1489.63       1499.19    
  33  0.873601E-01  -2.43772      -42.6957       42.6957       1484.69       1527.39    
  34  0.414510     -0.880658      -15.4244       15.4244       1470.36       1485.78    
  35  0.263485      -1.33376      -23.3603       23.3603       1449.71       1473.07    
  36  0.174560E-01  -4.04807      -70.9004       70.9004       1490.39       1561.29    
  37  0.461287     -0.773735      -13.5517       13.5517       1500.51       1514.06    
  38  0.914554     -0.893185E-01  -1.56438       1.56438       1500.77       1502.34    
  39  0.551497     -0.595119      -10.4233       10.4233       1489.28       1499.70    
  40  0.751145     -0.286157      -5.01192       5.01192       1493.27       1498.28    
  41  0.838814     -0.175766      -3.07847       3.07847       1510.27       1513.34    
  42  0.494321     -0.704571      -12.3403       12.3403       1504.88       1517.23    
  43  0.878137     -0.129953      -2.27607       2.27607       1502.52       1504.80    
  44  0.249667      -1.38763      -24.3038       24.3038       1526.77       1551.07    
  45  0.569995     -0.562128      -9.84545       9.84545       1533.26       1543.10    
  46  0.338221      -1.08406      -18.9868       18.9868       1544.91       1563.89    
  47  0.536421     -0.622836      -10.9087       10.9087       1539.42       1550.33    
  48  0.482027     -0.729755      -12.7814       12.7814       1558.96       1571.74    
  49  0.436505     -0.828955      -14.5188       14.5188       1529.84       1544.36    
  50  0.225116      -1.49114      -26.1168       26.1168       1564.37       1590.48    
  51  0.126546      -2.06715      -36.2054       36.2054       1308.24       1344.45    
loop,thermsimp(1:2)       13  0.636735      0.653591    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    325       1517.32          0.87          1.10         21.96          0.17          0.04         24.15
Just calling func    0   0         24.14


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1517.32
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    17.5146               351
loop is:       13
neval is:      324
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       13      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    560.467      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    17.5146               351
loop is:       14
neval is:      324


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      351
neval,tstepnext:      324     351

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.536122     -0.623393      -10.9185       10.9185       1305.70       1316.61    
   2  0.902010     -0.103129      -1.80627       1.80627       1320.58       1322.39    
   3  0.918906     -0.845717E-01  -1.48124       1.48124       1308.24       1309.72    
   4  0.300977E-01  -3.50330      -61.3590       61.3590       1349.50       1410.86    
   5  0.180939      -1.70960      -29.9429       29.9429       1372.23       1402.18    
   6  0.996736     -0.326981E-02 -0.572694E-01  0.572694E-01   1348.08       1348.14    
   7  0.974749     -0.255749E-01 -0.447934      0.447934       1327.94       1328.39    
   8  0.259085      -1.35060      -23.6552       23.6552       1394.92       1418.58    
   9  0.237439      -1.43784      -25.1833       25.1833       1407.88       1433.06    
  10  0.733816     -0.309497      -5.42072       5.42072       1436.80       1442.22    
  11  0.458028     -0.780824      -13.6758       13.6758       1412.25       1425.93    
  12  0.623300     -0.472727      -8.27962       8.27962       1441.12       1449.40    
  13  0.789074     -0.236895      -4.14913       4.14913       1442.39       1446.54    
  14  0.718847     -0.330107      -5.78169       5.78169       1448.85       1454.63    
  15  0.414258     -0.881266      -15.4350       15.4350       1452.23       1467.66    
  16  0.121880E-01  -4.40730      -77.1922       77.1922       1443.32       1520.52    
  17  0.976927     -0.233433E-01 -0.408848      0.408848       1456.12       1456.53    
  18  0.998133     -0.186873E-02 -0.327301E-01  0.327301E-01   1436.17       1436.20    
  19  0.582806     -0.539901      -9.45615       9.45615       1440.10       1449.55    
  20  0.461010     -0.774335      -13.5622       13.5622       1452.61       1466.17    
  21  0.748404     -0.289812      -5.07594       5.07594       1434.41       1439.49    
  22  0.627394     -0.466180      -8.16496       8.16496       1455.02       1463.19    
  23  0.823247     -0.194499      -3.40658       3.40658       1463.87       1467.28    
  24  0.696302     -0.361971      -6.33979       6.33979       1449.71       1456.05    
  25  0.571207     -0.560004      -9.80825       9.80825       1454.77       1464.58    
  26  0.189272      -1.66457      -29.1543       29.1543       1466.62       1495.77    
  27  0.534816     -0.625833      -10.9612       10.9612       1463.74       1474.70    
  28  0.846241     -0.166951      -2.92408       2.92408       1470.36       1473.28    
  29  0.157466      -1.84855      -32.3765       32.3765       1467.81       1500.18    
  30  0.123756      -2.08945      -36.5958       36.5958       1493.27       1529.87    
  31  0.458067     -0.780739      -13.6743       13.6743       1489.63       1503.31    
  32  0.989772     -0.102804E-01 -0.180057      0.180057       1489.28       1489.46    
  33  0.292614      -1.22890      -21.5237       21.5237       1500.77       1522.30    
  34  0.707885     -0.345474      -6.05084       6.05084       1434.31       1440.36    
  35  0.686290     -0.376455      -6.59346       6.59346       1502.52       1509.12    
  36  0.752747     -0.284026      -4.97461       4.97461       1489.87       1494.84    
  37  0.577950E-01  -2.85085      -49.9316       49.9316       1462.36       1512.29    
  38  0.496568E-02  -5.30521      -92.9186       92.9186       1510.27       1603.18    
  39  0.632817     -0.457575      -8.01424       8.01424       1500.51       1508.52    
  40  0.306568      -1.18232      -20.7078       20.7078       1460.12       1480.82    
  41  0.800757     -0.222198      -3.89170       3.89170       1473.48       1477.38    
  42  0.754206     -0.282090      -4.94069       4.94069       1504.88       1509.83    
  43  0.875958     -0.132437      -2.31959       2.31959       1484.69       1487.01    
  44  0.411581     -0.887750      -15.5486       15.5486       1533.26       1548.81    
  45  0.784837     -0.242279      -4.24343       4.24343       1529.84       1534.09    
  46  0.615964     -0.484567      -8.48701       8.48701       1539.42       1547.91    
  47  0.427318     -0.850227      -14.8914       14.8914       1526.77       1541.66    
  48  0.373288     -0.985405      -17.2590       17.2590       1490.39       1507.65    
  49  0.118712      -2.13106      -37.3246       37.3246       1544.91       1582.23    
  50  0.465204     -0.765279      -13.4036       13.4036       1558.96       1572.37    
  51  0.361628      -1.01714      -17.8148       17.8148       1517.32       1535.13    
loop,thermsimp(1:2)       14   10.9185       1.80627    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    326       1350.35          0.87          1.10         22.05          0.18          0.05         24.25
Just calling func    0   0         24.25


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1350.35
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    17.5146               351
loop is:       14
neval is:      325
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       14      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    560.467      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    17.5146               351
loop is:       15
neval is:      325


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      351
neval,tstepnext:      325     351

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.210086      -1.56024      -27.3270       27.3270       1308.24       1335.57    
   2  0.682169     -0.382478      -6.69895       6.69895       1305.70       1312.39    
   3  0.831163     -0.184930      -3.23897       3.23897       1320.58       1323.82    
   4  0.625179     -0.469718      -8.22692       8.22692       1327.94       1336.17    
   5  0.907522     -0.970376E-01  -1.69958       1.69958       1348.08       1349.78    
   6  0.406703     -0.899672      -15.7574       15.7574       1372.23       1387.99    
   7  0.463060     -0.769899      -13.4845       13.4845       1349.50       1362.98    
   8  0.206056      -1.57961      -27.6662       27.6662       1394.92       1422.59    
   9  0.303716      -1.19166      -20.8715       20.8715       1412.25       1433.13    
  10  0.843889     -0.169734      -2.97283       2.97283       1407.88       1410.85    
  11  0.273678      -1.29580      -22.6955       22.6955       1436.17       1458.87    
  12  0.571842     -0.558892      -9.78877       9.78877       1434.41       1444.20    
  13  0.803131     -0.219238      -3.83987       3.83987       1434.31       1438.15    
  14  0.330375      -1.10753      -19.3979       19.3979       1436.80       1456.20    
  15  0.155557      -1.86074      -32.5902       32.5902       1442.39       1474.98    
  16  0.878823     -0.129172      -2.26240       2.26240       1441.12       1443.38    
  17  0.781654     -0.246343      -4.31460       4.31460       1440.10       1444.41    
  18  0.782655     -0.245064      -4.29219       4.29219       1448.85       1453.15    
  19  0.682155     -0.382499      -6.69932       6.69932       1449.71       1456.41    
  20  0.899702     -0.105691      -1.85114       1.85114       1456.12       1457.97    
  21  0.444808     -0.810113      -14.1888       14.1888       1455.02       1469.21    
  22  0.495252     -0.702688      -12.3073       12.3073       1454.77       1467.08    
  23  0.640834     -0.444984      -7.79373       7.79373       1452.61       1460.40    
  24  0.314465      -1.15688      -20.2624       20.2624       1463.87       1484.14    
  25  0.368564     -0.998140      -17.4820       17.4820       1452.23       1469.71    
  26  0.572254E-02  -5.16334      -90.4339       90.4339       1470.36       1560.79    
  27  0.468080E-01  -3.06170      -53.6245       53.6245       1463.74       1517.37    
  28  0.598693E-01  -2.81559      -49.3140       49.3140       1473.48       1522.80    
  29  0.658687     -0.417508      -7.31248       7.31248       1460.12       1467.43    
  30  0.449565     -0.799475      -14.0025       14.0025       1484.69       1498.70    
  31  0.799405     -0.223887      -3.92129       3.92129       1489.28       1493.20    
  32  0.414416     -0.880885      -15.4284       15.4284       1489.87       1505.29    
  33  0.395703E-01  -3.22968      -56.5665       56.5665       1466.62       1523.19    
  34  0.704129E-01  -2.65338      -46.4729       46.4729       1467.81       1514.28    
  35  0.336217      -1.09000      -19.0909       19.0909       1489.63       1508.72    
  36  0.169926      -1.77239      -31.0427       31.0427       1490.39       1521.43    
  37  0.846601E-01  -2.46911      -43.2455       43.2455       1500.51       1543.76    
  38  0.798628     -0.224860      -3.93834       3.93834       1502.52       1506.46    
  39  0.377891     -0.973150      -17.0443       17.0443       1504.88       1521.93    
  40  0.183739      -1.69424      -29.6739       29.6739       1462.36       1492.03    
  41  0.930280     -0.722695E-01  -1.26577       1.26577       1443.32       1444.59    
  42  0.280682      -1.27053      -22.2529       22.2529       1500.77       1523.02    
  43  0.475397     -0.743606      -13.0240       13.0240       1493.27       1506.30    
  44  0.705714     -0.348545      -6.10464       6.10464       1529.84       1535.95    
  45  0.307479      -1.17935      -20.6558       20.6558       1517.32       1537.98    
  46  0.408291     -0.895776      -15.6892       15.6892       1526.77       1542.46    
  47  0.174897      -1.74356      -30.5377       30.5377       1539.42       1569.96    
  48  0.462267     -0.771612      -13.5145       13.5145       1533.26       1546.77    
  49  0.805682E-01  -2.51865      -44.1132       44.1132       1558.96       1603.08    
  50  0.276714      -1.28477      -22.5023       22.5023       1544.91       1567.41    
  51  0.914639     -0.892253E-01  -1.56275       1.56275       1350.35       1351.91    
loop,thermsimp(1:2)       15   27.3270       6.69895    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    327       1350.82          0.86          1.11         21.95          0.15          0.05         24.12
Just calling func    0   0         24.12


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1350.82
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    17.5146               351
loop is:       15
neval is:      326
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       15      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    560.467      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    17.5146               351
loop is:       16
neval is:      326


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      351
neval,tstepnext:      326     351

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.652831E-01  -2.72902      -47.7977       47.7977       1305.70       1353.49    
   2  0.388935     -0.944342      -16.5398       16.5398       1320.58       1337.12    
   3  0.716732     -0.333053      -5.83330       5.83330       1308.24       1314.08    
   4  0.375936     -0.978336      -17.1352       17.1352       1327.94       1345.08    
   5  0.518505E-01  -2.95939      -51.8326       51.8326       1348.08       1399.91    
   6  0.892279     -0.113976      -1.99625       1.99625       1350.35       1352.35    
   7  0.145412      -1.92818      -33.7714       33.7714       1349.50       1383.27    
   8  0.759376E-01  -2.57784      -45.1499       45.1499       1372.23       1417.38    
   9  0.799111     -0.224255      -3.92774       3.92774       1407.88       1411.81    
  10  0.566636     -0.568038      -9.94896       9.94896       1394.92       1404.87    
  11  0.957834     -0.430803E-01 -0.754535      0.754535       1412.25       1413.01    
  12  0.421133     -0.864808      -15.1468       15.1468       1434.31       1449.45    
  13  0.965171     -0.354495E-01 -0.620885      0.620885       1441.12       1441.74    
  14  0.527073     -0.640416      -11.2166       11.2166       1434.41       1445.63    
  15  0.221584      -1.50695      -26.3937       26.3937       1440.10       1466.49    
  16  0.675180     -0.392776      -6.87932       6.87932       1443.32       1450.20    
  17  0.462159     -0.771846      -13.5186       13.5186       1448.85       1462.37    
  18  0.134826      -2.00377      -35.0952       35.0952       1436.80       1471.89    
  19  0.869165     -0.140222      -2.45593       2.45593       1449.71       1452.16    
  20  0.898965     -0.106511      -1.86549       1.86549       1456.12       1457.98    
  21  0.174160      -1.74778      -30.6117       30.6117       1436.17       1466.78    
  22  0.463810     -0.768281      -13.4561       13.4561       1452.61       1466.07    
  23  0.145870      -1.92504      -33.7163       33.7163       1454.77       1488.49    
  24  0.525172     -0.644029      -11.2799       11.2799       1460.12       1471.40    
  25  0.667609     -0.404052      -7.07682       7.07682       1455.02       1462.10    
  26  0.964408     -0.362405E-01 -0.634738      0.634738       1452.23       1452.86    
  27  0.981636     -0.185350E-01 -0.324633      0.324633       1442.39       1442.71    
  28  0.585742     -0.534875      -9.36813       9.36813       1463.87       1473.24    
  29  0.956106     -0.448864E-01 -0.786167      0.786167       1462.36       1463.15    
  30  0.153686      -1.87284      -32.8021       32.8021       1489.28       1522.08    
  31  0.937356     -0.646920E-01  -1.13306       1.13306       1484.69       1485.83    
  32  0.821414     -0.196728      -3.44562       3.44562       1489.87       1493.31    
  33  0.901583     -0.103603      -1.81457       1.81457       1493.27       1495.09    
  34  0.145469      -1.92779      -33.7645       33.7645       1502.52       1536.29    
  35  0.944310     -0.573011E-01  -1.00361       1.00361       1489.63       1490.64    
  36  0.639748     -0.446680      -7.82343       7.82343       1467.81       1475.63    
  37  0.533071     -0.629101      -11.0185       11.0185       1463.74       1474.76    
  38  0.708805     -0.344175      -6.02809       6.02809       1490.39       1496.42    
  39  0.953023     -0.481167E-01 -0.842745      0.842745       1504.88       1505.73    
  40  0.606832     -0.499502      -8.74859       8.74859       1473.48       1482.23    
  41  0.791257     -0.234132      -4.10073       4.10073       1500.77       1504.87    
  42  0.203064      -1.59423      -27.9224       27.9224       1466.62       1494.54    
  43  0.168642      -1.77998      -31.1756       31.1756       1529.84       1561.02    
  44  0.718173     -0.331045      -5.79813       5.79813       1517.32       1523.12    
  45  0.976939E-02  -4.62850      -81.0664       81.0664       1526.77       1607.84    
  46  0.211685      -1.55265      -27.1941       27.1941       1500.51       1527.70    
  47  0.624191     -0.471298      -8.25461       8.25461       1533.26       1541.51    
  48  0.749801     -0.287948      -5.04329       5.04329       1470.36       1475.40    
  49  0.710340     -0.342011      -5.99019       5.99019       1544.91       1550.90    
  50  0.447179     -0.804797      -14.0957       14.0957       1539.42       1553.52    
  51  0.567779     -0.566023      -9.91367       9.91367       1350.82       1360.73    
loop,thermsimp(1:2)       16   47.7977       16.5398    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    328       1369.77          0.87          1.09         21.96          0.16          0.05         24.13
Just calling func    0   0         24.13


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1369.77
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    17.5146               351
loop is:       16
neval is:      327
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       16      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    560.467      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    17.5146               351
loop is:       17
neval is:      327


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      351
neval,tstepnext:      327     351

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.488972     -0.715450      -12.5308       12.5308       1308.24       1320.77    
   2  0.243137      -1.41413      -24.7679       24.7679       1320.58       1345.35    
   3  0.530653     -0.633646      -11.0981       11.0981       1327.94       1339.04    
   4  0.926282     -0.765763E-01  -1.34120       1.34120       1350.35       1351.69    
   5  0.374288     -0.982729      -17.2121       17.2121       1305.70       1322.91    
   6  0.675293     -0.392608      -6.87638       6.87638       1350.82       1357.69    
   7  0.605942     -0.500970      -8.77430       8.77430       1349.50       1358.27    
   8  0.280229      -1.27215      -22.2812       22.2812       1348.08       1370.36    
   9  0.297259      -1.21315      -21.2479       21.2479       1394.92       1416.17    
  10  0.697504E-01  -2.66283      -46.6384       46.6384       1407.88       1454.52    
  11  0.824348     -0.193163      -3.38318       3.38318       1412.25       1415.64    
  12  0.750452     -0.287080      -5.02809       5.02809       1372.23       1377.26    
  13  0.120595      -2.11532      -37.0490       37.0490       1441.12       1478.17    
  14  0.935324     -0.668625E-01  -1.17107       1.17107       1442.39       1443.56    
  15  0.215551      -1.53456      -26.8772       26.8772       1434.41       1461.29    
  16  0.708821     -0.344153      -6.02770       6.02770       1434.31       1440.34    
  17  0.402499     -0.910063      -15.9394       15.9394       1443.32       1459.26    
  18  0.836443     -0.178597      -3.12806       3.12806       1449.71       1452.83    
  19  0.969979E-01  -2.33307      -40.8627       40.8627       1452.23       1493.09    
  20  0.178795      -1.72152      -30.1517       30.1517       1456.12       1486.27    
  21  0.140077      -1.96556      -34.4260       34.4260       1455.02       1489.45    
  22  0.375507     -0.979479      -17.1552       17.1552       1448.85       1466.01    
  23  0.831487     -0.184540      -3.23214       3.23214       1462.36       1465.59    
  24  0.815951     -0.203401      -3.56249       3.56249       1452.61       1456.17    
  25  0.468603     -0.757998      -13.2760       13.2760       1440.10       1453.37    
  26  0.677551     -0.389270      -6.81792       6.81792       1436.17       1442.99    
  27  0.169538      -1.77468      -31.0828       31.0828       1460.12       1491.20    
  28  0.950448     -0.508223E-01 -0.890133      0.890133       1436.80       1437.69    
  29  0.981726     -0.184427E-01 -0.323017      0.323017       1463.87       1464.20    
  30  0.442406     -0.815527      -14.2836       14.2836       1463.74       1478.03    
  31  0.531953     -0.631200      -11.0552       11.0552       1470.36       1481.42    
  32  0.363692      -1.01145      -17.7151       17.7151       1467.81       1485.52    
  33  0.144511E-01  -4.23698      -74.2091       74.2091       1473.48       1547.69    
  34  0.748780     -0.289310      -5.06715       5.06715       1484.69       1489.76    
  35  0.195075      -1.63437      -28.6254       28.6254       1454.77       1483.40    
  36  0.440325     -0.820241      -14.3662       14.3662       1489.63       1504.00    
  37  0.805864     -0.215841      -3.78037       3.78037       1489.87       1493.65    
  38  0.921415     -0.818451E-01  -1.43348       1.43348       1466.62       1468.05    
  39  0.296293      -1.21641      -21.3049       21.3049       1493.27       1514.58    
  40  0.645874E-01  -2.73974      -47.9854       47.9854       1490.39       1538.38    
  41  0.488279     -0.716868      -12.5557       12.5557       1500.77       1513.33    
  42  0.573105     -0.556686      -9.75014       9.75014       1504.88       1514.63    
  43  0.967891     -0.326356E-01 -0.571599      0.571599       1489.28       1489.85    
  44  0.780434E-01  -2.55049      -44.6708       44.6708       1517.32       1561.99    
  45  0.968859     -0.316363E-01 -0.554098      0.554098       1500.51       1501.06    
  46  0.858835     -0.152178      -2.66534       2.66534       1502.52       1505.19    
  47  0.968806     -0.316911E-01 -0.555058      0.555058       1533.26       1533.81    
  48  0.134500      -2.00619      -35.1376       35.1376       1544.91       1580.04    
  49  0.993707     -0.631323E-02 -0.110574      0.110574       1539.42       1539.53    
  50  0.300401      -1.20264      -21.0637       21.0637       1529.84       1550.91    
  51  0.166933      -1.79016      -31.3540       31.3540       1369.77       1401.12    
loop,thermsimp(1:2)       17   12.5308       24.7679    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    329       1541.57          0.87          1.10         22.03          0.11          0.05         24.16
Just calling func    0   0         24.16


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1541.57
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    17.5146               351
loop is:       17
neval is:      328
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       17      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    560.467      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    17.5146               351
loop is:       18
neval is:      328


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      351
neval,tstepnext:      328     351

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.490618     -0.712090      -12.4720       12.4720       1308.24       1320.71    
   2  0.486668     -0.720173      -12.6136       12.6136       1305.70       1318.31    
   3  0.319995E-01  -3.44203      -60.2859       60.2859       1327.94       1388.23    
   4  0.957863     -0.430503E-01 -0.754009      0.754009       1320.58       1321.34    
   5  0.713202E-01  -2.64058      -46.2486       46.2486       1350.35       1396.60    
   6  0.677570     -0.389242      -6.81743       6.81743       1350.82       1357.64    
   7  0.533853     -0.627634      -10.9928       10.9928       1349.50       1360.49    
   8  0.963967     -0.366984E-01 -0.642759      0.642759       1348.08       1348.72    
   9  0.590118     -0.527432      -9.23776       9.23776       1372.23       1381.47    
  10  0.102350      -2.27936      -39.9220       39.9220       1369.77       1409.69    
  11  0.313487      -1.16000      -20.3169       20.3169       1412.25       1432.57    
  12  0.876181     -0.132183      -2.31513       2.31513       1394.92       1397.24    
  13  0.780541     -0.247768      -4.33956       4.33956       1436.80       1441.14    
  14  0.222922      -1.50093      -26.2882       26.2882       1434.31       1460.60    
  15  0.913991     -0.899351E-01  -1.57518       1.57518       1436.17       1437.75    
  16  0.493176     -0.706888      -12.3809       12.3809       1442.39       1454.77    
  17  0.884766     -0.122432      -2.14435       2.14435       1449.71       1451.85    
  18  0.576549E-01  -2.85328      -49.9741       49.9741       1440.10       1490.07    
  19  0.398597     -0.919804      -16.1100       16.1100       1407.88       1423.99    
  20  0.980633     -0.195573E-01 -0.342538      0.342538       1452.61       1452.95    
  21  0.304985      -1.18749      -20.7985       20.7985       1443.32       1464.12    
  22  0.628666     -0.464156      -8.12951       8.12951       1434.41       1442.54    
  23  0.367895     -0.999957      -17.5139       17.5139       1463.87       1481.39    
  24  0.442302     -0.815762      -14.2878       14.2878       1462.36       1476.65    
  25  0.656121     -0.421410      -7.38083       7.38083       1448.85       1456.23    
  26  0.229893      -1.47014      -25.7489       25.7489       1466.62       1492.37    
  27  0.475469     -0.743453      -13.0213       13.0213       1463.74       1476.76    
  28  0.801985     -0.220665      -3.86486       3.86486       1441.12       1444.98    
  29  0.454630     -0.788272      -13.8063       13.8063       1470.36       1484.17    
  30  0.858022     -0.153126      -2.68194       2.68194       1454.77       1457.45    
  31  0.692704     -0.367153      -6.43054       6.43054       1467.81       1474.24    
  32  0.466274     -0.762981      -13.3633       13.3633       1456.12       1469.48    
  33  0.682446     -0.382072      -6.69184       6.69184       1455.02       1461.71    
  34  0.660760     -0.414365      -7.25744       7.25744       1484.69       1491.95    
  35  0.957519     -0.434092E-01 -0.760296      0.760296       1489.28       1490.04    
  36  0.108167      -2.22408      -38.9539       38.9539       1460.12       1499.07    
  37  0.846378     -0.166789      -2.92125       2.92125       1452.23       1455.15    
  38  0.621158E-01  -2.77876      -48.6688       48.6688       1489.87       1538.53    
  39  0.988945E-01  -2.31370      -40.5236       40.5236       1500.51       1541.03    
  40  0.253472      -1.37250      -24.0388       24.0388       1489.63       1513.67    
  41  0.915015     -0.888152E-01  -1.55556       1.55556       1502.52       1504.08    
  42  0.662342     -0.411973      -7.21554       7.21554       1500.77       1507.99    
  43  0.210223      -1.55959      -27.3156       27.3156       1493.27       1520.59    
  44  0.141043      -1.95869      -34.3058       34.3058       1504.88       1539.19    
  45  0.839834     -0.174551      -3.05720       3.05720       1533.26       1536.31    
  46  0.132358      -2.02225      -35.4188       35.4188       1490.39       1525.81    
  47  0.129895E-01  -4.34361      -76.0767       76.0767       1539.42       1615.50    
  48  0.795497     -0.228788      -4.00713       4.00713       1473.48       1477.49    
  49  0.547485     -0.602421      -10.5512       10.5512       1529.84       1540.39    
  50  0.137643      -1.98309      -34.7330       34.7330       1517.32       1552.05    
  51  0.603188     -0.505526      -8.85409       8.85409       1541.57       1550.42    
loop,thermsimp(1:2)       18   12.4720       12.6136    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    330       1452.28          0.87          1.12         22.04          0.18          0.05         24.26
Just calling func    0   0         24.26


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1452.28
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    17.5146               351
loop is:       18
neval is:      329
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       18      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    560.467      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    17.5146               351
loop is:       19
neval is:      329


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      351
neval,tstepnext:      329     351

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.155141      -1.86342      -32.6371       32.6371       1305.70       1338.33    
   2  0.881882     -0.125697      -2.20154       2.20154       1308.24       1310.44    
   3  0.908319     -0.961592E-01  -1.68419       1.68419       1320.58       1322.27    
   4  0.732380     -0.311455      -5.45502       5.45502       1348.08       1353.53    
   5  0.367412      -1.00127      -17.5369       17.5369       1350.82       1368.36    
   6  0.624330     -0.471077      -8.25073       8.25073       1349.50       1357.75    
   7  0.833858     -0.181693      -3.18228       3.18228       1372.23       1375.42    
   8  0.194603E-02  -6.24197      -109.326       109.326       1327.94       1437.27    
   9  0.995416     -0.459497E-02 -0.804791E-01  0.804791E-01   1350.35       1350.43    
  10  0.665599     -0.407068      -7.12964       7.12964       1394.92       1402.05    
  11  0.747574     -0.290922      -5.09539       5.09539       1369.77       1374.86    
  12  0.539692     -0.616756      -10.8022       10.8022       1407.88       1418.68    
  13  0.958323     -0.425700E-01 -0.745597      0.745597       1412.25       1413.00    
  14  0.111027      -2.19798      -38.4968       38.4968       1436.17       1474.67    
  15  0.520965     -0.652072      -11.4208       11.4208       1436.80       1448.22    
  16  0.177207E-01  -4.03302      -70.6368       70.6368       1434.41       1505.05    
  17  0.860365     -0.150398      -2.63417       2.63417       1441.12       1443.75    
  18  0.383700     -0.957895      -16.7772       16.7772       1449.71       1466.48    
  19  0.524904     -0.644539      -11.2888       11.2888       1452.61       1463.90    
  20  0.589629     -0.528262      -9.25230       9.25230       1442.39       1451.64    
  21  0.125125      -2.07844      -36.4031       36.4031       1452.23       1488.63    
  22  0.154207      -1.86946      -32.7429       32.7429       1448.85       1481.60    
  23  0.752747     -0.284026      -4.97461       4.97461       1454.77       1459.75    
  24  0.551286     -0.595501      -10.4300       10.4300       1434.31       1444.74    
  25  0.733343     -0.310142      -5.43201       5.43201       1455.02       1460.45    
  26  0.904985     -0.998368E-01  -1.74860       1.74860       1443.32       1445.07    
  27  0.987632     -0.124455E-01 -0.217979      0.217979       1456.12       1456.34    
  28  0.228587      -1.47584      -25.8487       25.8487       1467.81       1493.66    
  29  0.384883     -0.954815      -16.7232       16.7232       1462.36       1479.08    
  30  0.781910     -0.246015      -4.30886       4.30886       1463.74       1468.05    
  31  0.402051E-02  -5.51635      -96.6167       96.6167       1473.48       1570.10    
  32  0.880575     -0.127180      -2.22752       2.22752       1463.87       1466.10    
  33  0.427180     -0.850550      -14.8970       14.8970       1470.36       1485.26    
  34  0.613064     -0.489286      -8.56965       8.56965       1489.28       1497.85    
  35  0.529053     -0.636668      -11.1510       11.1510       1440.10       1451.25    
  36  0.973505     -0.268519E-01 -0.470301      0.470301       1484.69       1485.16    
  37  0.889868     -0.116682      -2.04364       2.04364       1466.62       1468.66    
  38  0.133989      -2.01000      -35.2043       35.2043       1460.12       1495.32    
  39  0.289828      -1.23847      -21.6913       21.6913       1502.52       1524.21    
  40  0.724995     -0.321591      -5.63254       5.63254       1500.77       1506.40    
  41  0.547932     -0.601605      -10.5369       10.5369       1489.63       1500.17    
  42  0.608240E-01  -2.79977      -49.0369       49.0369       1493.27       1542.31    
  43  0.481259E-01  -3.03393      -53.1382       53.1382       1490.39       1543.53    
  44  0.356843      -1.03046      -18.0481       18.0481       1533.26       1551.31    
  45  0.417411     -0.873685      -15.3023       15.3023       1489.87       1505.17    
  46  0.918903     -0.845742E-01  -1.48128       1.48128       1504.88       1506.37    
  47  0.852285     -0.159834      -2.79943       2.79943       1529.84       1532.64    
  48  0.744864     -0.294553      -5.15899       5.15899       1500.51       1505.67    
  49  0.128521      -2.05166      -35.9341       35.9341       1541.57       1577.50    
  50  0.484639     -0.724351      -12.6867       12.6867       1517.32       1530.01    
  51  0.478847     -0.736375      -12.8973       12.8973       1452.28       1465.18    
loop,thermsimp(1:2)       19   32.6371       2.20154    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    331       1545.49          0.87          1.11         21.98          0.16          0.05         24.17
Just calling func    0   0         24.17


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1545.49
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    17.5146               351
loop is:       19
neval is:      330
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       19      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    560.467      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    17.5146               351
loop is:       20
neval is:      330


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      351
neval,tstepnext:      330     351

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.272787      -1.29906      -22.7526       22.7526       1308.24       1330.99    
   2  0.284829      -1.25587      -21.9960       21.9960       1320.58       1342.58    
   3  0.422534E-01  -3.16407      -55.4175       55.4175       1305.70       1361.11    
   4  0.788018E-01  -2.54082      -44.5015       44.5015       1350.35       1394.85    
   5  0.396626E-01  -3.22735      -56.5257       56.5257       1348.08       1404.60    
   6  0.412432     -0.885684      -15.5124       15.5124       1349.50       1365.01    
   7  0.390866     -0.939390      -16.4530       16.4530       1350.82       1367.27    
   8  0.853334     -0.158604      -2.77788       2.77788       1369.77       1372.54    
   9  0.506127     -0.680968      -11.9269       11.9269       1372.23       1384.16    
  10  0.254200      -1.36963      -23.9886       23.9886       1394.92       1418.91    
  11  0.643116     -0.441430      -7.73148       7.73148       1412.25       1419.99    
  12  0.897721     -0.107896      -1.88976       1.88976       1407.88       1409.77    
  13  0.830899     -0.185247      -3.24453       3.24453       1327.94       1331.19    
  14  0.357312      -1.02915      -18.0251       18.0251       1441.12       1459.14    
  15  0.525942     -0.642564      -11.2543       11.2543       1434.31       1445.56    
  16  0.742929     -0.297155      -5.20455       5.20455       1443.32       1448.53    
  17  0.970959     -0.294711E-01 -0.516175      0.516175       1436.80       1437.32    
  18  0.235894      -1.44437      -25.2976       25.2976       1440.10       1465.39    
  19  0.723381E-01  -2.62640      -46.0004       46.0004       1442.39       1488.39    
  20  0.190915      -1.65593      -29.0029       29.0029       1456.12       1485.12    
  21  0.524670     -0.644986      -11.2967       11.2967       1454.77       1466.07    
  22  0.536043     -0.623540      -10.9211       10.9211       1455.02       1465.94    
  23  0.281730      -1.26681      -22.1876       22.1876       1452.61       1474.80    
  24  0.747791     -0.290632      -5.09030       5.09030       1452.28       1457.37    
  25  0.255771      -1.36347      -23.8807       23.8807       1463.87       1487.75    
  26  0.194866      -1.63544      -28.6442       28.6442       1449.71       1478.35    
  27  0.639630     -0.446865      -7.82666       7.82666       1463.74       1471.57    
  28  0.485808     -0.721941      -12.6445       12.6445       1466.62       1479.27    
  29  0.659147     -0.416809      -7.30025       7.30025       1436.17       1443.47    
  30  0.196308      -1.62807      -28.5150       28.5150       1462.36       1490.87    
  31  0.308964      -1.17453      -20.5714       20.5714       1448.85       1469.42    
  32  0.181287      -1.70768      -29.9093       29.9093       1484.69       1514.60    
  33  0.386667     -0.950191      -16.6422       16.6422       1470.36       1487.00    
  34  0.947825     -0.535853E-01 -0.938525      0.938525       1452.23       1453.16    
  35  0.699942     -0.356758      -6.24848       6.24848       1467.81       1474.06    
  36  0.208747      -1.56663      -27.4389       27.4389       1460.12       1487.56    
  37  0.717648     -0.331775      -5.81092       5.81092       1489.28       1495.09    
  38  0.734922     -0.307991      -5.39434       5.39434       1489.63       1495.03    
  39  0.862816     -0.147554      -2.58435       2.58435       1434.41       1437.00    
  40  0.677494     -0.389354      -6.81939       6.81939       1489.87       1496.68    
  41  0.829375     -0.187082      -3.27667       3.27667       1500.51       1503.79    
  42  0.393856     -0.931770      -16.3196       16.3196       1504.88       1521.20    
  43  0.447370     -0.804370      -14.0882       14.0882       1500.77       1514.86    
  44  0.485389     -0.722806      -12.6597       12.6597       1502.52       1515.18    
  45  0.522363     -0.649392      -11.3738       11.3738       1517.32       1528.69    
  46  0.740056E-01  -2.60361      -45.6013       45.6013       1529.84       1575.44    
  47  0.396252     -0.925705      -16.2134       16.2134       1493.27       1509.49    
  48  0.429395     -0.845378      -14.8065       14.8065       1490.39       1505.20    
  49  0.865472     -0.144480      -2.53052       2.53052       1533.26       1535.79    
  50  0.103085      -2.27220      -39.7968       39.7968       1473.48       1513.28    
  51  0.257437      -1.35698      -23.7670       23.7670       1545.49       1569.26    
loop,thermsimp(1:2)       20   22.7526       21.9960    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    332       1518.29          0.87          1.11         21.98          0.16          0.05         24.17
Just calling func    0   0         24.17


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1518.29
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    17.5146               351
loop is:       20
neval is:      331
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       20      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    560.467      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    17.5146               351
loop is:       21
neval is:      331


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      351
neval,tstepnext:      331     351

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.633870E-01  -2.75850      -48.3140       48.3140       1308.24       1356.56    
   2  0.713782     -0.337177      -5.90553       5.90553       1327.94       1333.85    
   3  0.851614     -0.160622      -2.81323       2.81323       1320.58       1323.40    
   4  0.721769     -0.326050      -5.71063       5.71063       1305.70       1311.41    
   5  0.954937     -0.461102E-01 -0.807602      0.807602       1349.50       1350.31    
   6  0.302532E-01  -3.49815      -61.2688       61.2688       1350.82       1412.09    
   7  0.942920E-01  -2.36136      -41.3583       41.3583       1369.77       1411.13    
   8  0.515750E-01  -2.96472      -51.9259       51.9259       1372.23       1424.16    
   9  0.612753     -0.489794      -8.57854       8.57854       1350.35       1358.93    
  10  0.758041     -0.277018      -4.85186       4.85186       1348.08       1352.93    
  11  0.530485E-01  -2.93655      -51.4325       51.4325       1407.88       1459.31    
  12  0.941175     -0.606258E-01  -1.06184       1.06184       1394.92       1395.98    
  13  0.167539      -1.78654      -31.2906       31.2906       1412.25       1443.54    
  14  0.738662E-01  -2.60550      -45.6343       45.6343       1434.41       1480.05    
  15  0.822155     -0.195827      -3.42983       3.42983       1436.80       1440.23    
  16  0.578765     -0.546859      -9.57802       9.57802       1436.17       1445.75    
  17  0.912739E-01  -2.39389      -41.9280       41.9280       1434.31       1476.24    
  18  0.949215     -0.521197E-01 -0.912856      0.912856       1443.32       1444.24    
  19  0.485124     -0.723351      -12.6692       12.6692       1452.23       1464.90    
  20  0.359009      -1.02441      -17.9421       17.9421       1452.28       1470.23    
  21  0.747559     -0.290942      -5.09574       5.09574       1441.12       1446.21    
  22  0.482847     -0.728056      -12.7516       12.7516       1440.10       1452.85    
  23  0.994301     -0.571526E-02 -0.100101      0.100101       1455.02       1455.12    
  24  0.937801     -0.642177E-01  -1.12475       1.12475       1454.77       1455.90    
  25  0.699033     -0.358058      -6.27124       6.27124       1448.85       1455.12    
  26  0.358162      -1.02677      -17.9835       17.9835       1463.74       1481.73    
  27  0.746418     -0.292470      -5.12249       5.12249       1467.81       1472.93    
  28  0.532195     -0.630744      -11.0472       11.0472       1452.61       1463.66    
  29  0.727066     -0.318738      -5.58258       5.58258       1449.71       1455.29    
  30  0.461510     -0.773252      -13.5432       13.5432       1466.62       1480.16    
  31  0.285112      -1.25487      -21.9786       21.9786       1456.12       1478.10    
  32  0.316830      -1.14939      -20.1311       20.1311       1470.36       1490.49    
  33  0.835731     -0.179448      -3.14296       3.14296       1460.12       1463.26    
  34  0.516269E-02  -5.26630      -92.2371       92.2371       1463.87       1556.11    
  35  0.309002      -1.17441      -20.5693       20.5693       1442.39       1462.96    
  36  0.770766     -0.260370      -4.56028       4.56028       1462.36       1466.92    
  37  0.878913     -0.129069      -2.26059       2.26059       1489.63       1491.89    
  38  0.981341E-01  -2.32142      -40.6588       40.6588       1489.28       1529.94    
  39  0.634060     -0.455612      -7.97986       7.97986       1489.87       1497.85    
  40  0.359967      -1.02174      -17.8954       17.8954       1500.51       1518.40    
  41  0.480002     -0.733964      -12.8551       12.8551       1490.39       1503.25    
  42  0.706923     -0.346834      -6.07466       6.07466       1493.27       1499.35    
  43  0.497828     -0.697501      -12.2165       12.2165       1473.48       1485.70    
  44  0.885038     -0.122125      -2.13896       2.13896       1484.69       1486.83    
  45  0.504752     -0.683689      -11.9745       11.9745       1500.77       1512.75    
  46  0.719262     -0.329529      -5.77158       5.77158       1502.52       1508.29    
  47  0.516359     -0.660954      -11.5763       11.5763       1504.88       1516.46    
  48  0.584389E-01  -2.83977      -49.7375       49.7375       1517.32       1567.06    
  49  0.768960E-01  -2.56530      -44.9303       44.9303       1533.26       1578.19    
  50  0.253658      -1.37177      -24.0260       24.0260       1545.49       1569.52    
  51  0.451822     -0.794468      -13.9148       13.9148       1518.29       1532.21    
loop,thermsimp(1:2)       21   48.3140       5.90553    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    333       1354.04          0.87          1.10         22.02          0.10          0.05         24.13
Just calling func    0   0         24.14


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1354.04
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    17.5146               351
loop is:       21
neval is:      332
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       21      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    560.467      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    17.5146               351
loop is:       22
neval is:      332


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      351
neval,tstepnext:      332     351

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.434858     -0.832735      -14.5850       14.5850       1305.70       1320.28    
   2  0.380177E-01  -3.26970      -57.2676       57.2676       1320.58       1377.85    
   3  0.198795      -1.61548      -28.2945       28.2945       1327.94       1356.24    
   4  0.880944E-01  -2.42935      -42.5491       42.5491       1349.50       1392.05    
   5  0.279105      -1.27617      -22.3516       22.3516       1348.08       1370.43    
   6  0.379482     -0.968948      -16.9708       16.9708       1308.24       1325.21    
   7  0.510142     -0.673065      -11.7885       11.7885       1350.35       1362.14    
   8  0.869007     -0.140404      -2.45912       2.45912       1394.92       1397.38    
   9  0.905256     -0.995378E-01  -1.74336       1.74336       1369.77       1371.51    
  10  0.587200     -0.532390      -9.32460       9.32460       1350.82       1360.14    
  11  0.309008      -1.17439      -20.5690       20.5690       1372.23       1392.80    
  12  0.210718      -1.55723      -27.2743       27.2743       1436.80       1464.07    
  13  0.362152      -1.01569      -17.7894       17.7894       1412.25       1430.04    
  14  0.465452     -0.764747      -13.3942       13.3942       1443.32       1456.72    
  15  0.155270E-01  -4.16518      -72.9514       72.9514       1436.17       1509.12    
  16  0.632166     -0.458603      -8.03225       8.03225       1441.12       1449.15    
  17  0.171028      -1.76593      -30.9296       30.9296       1440.10       1471.03    
  18  0.926401     -0.764482E-01  -1.33896       1.33896       1455.02       1456.36    
  19  0.130449      -2.03678      -35.6733       35.6733       1448.85       1484.53    
  20  0.536069     -0.623492      -10.9202       10.9202       1449.71       1460.63    
  21  0.128128      -2.05472      -35.9877       35.9877       1454.77       1490.76    
  22  0.729730     -0.315081      -5.51852       5.51852       1407.88       1413.40    
  23  0.982387     -0.177702E-01 -0.311238      0.311238       1442.39       1442.70    
  24  0.707707     -0.345726      -6.05525       6.05525       1460.12       1466.17    
  25  0.643878     -0.440245      -7.71073       7.71073       1452.61       1460.32    
  26  0.136721      -1.98982      -34.8508       34.8508       1452.23       1487.08    
  27  0.146320      -1.92196      -33.6624       33.6624       1462.36       1496.02    
  28  0.214169      -1.54099      -26.9899       26.9899       1452.28       1479.27    
  29  0.774008     -0.256172      -4.48676       4.48676       1467.81       1472.30    
  30  0.487333     -0.718808      -12.5896       12.5896       1434.31       1446.90    
  31  0.594481E-01  -2.82265      -49.4376       49.4376       1456.12       1505.56    
  32  0.305368      -1.18624      -20.7765       20.7765       1434.41       1455.19    
  33  0.206200      -1.57891      -27.6540       27.6540       1466.62       1494.27    
  34  0.185235      -1.68613      -29.5319       29.5319       1463.74       1493.28    
  35  0.945154     -0.564077E-01 -0.987959      0.987959       1473.48       1474.47    
  36  0.657328     -0.419572      -7.34864       7.34864       1484.69       1492.04    
  37  0.932191     -0.702171E-01  -1.22983       1.22983       1470.36       1471.59    
  38  0.258055      -1.35458      -23.7250       23.7250       1489.63       1513.36    
  39  0.525568E-01  -2.94586      -51.5956       51.5956       1489.87       1541.46    
  40  0.692807     -0.367004      -6.42792       6.42792       1493.27       1499.70    
  41  0.691658     -0.368664      -6.45701       6.45701       1490.39       1496.85    
  42  0.163447      -1.81127      -31.7236       31.7236       1502.52       1534.25    
  43  0.462923     -0.770194      -13.4896       13.4896       1500.77       1514.26    
  44  0.758611     -0.276266      -4.83868       4.83868       1504.88       1509.72    
  45  0.278938      -1.27677      -22.3621       22.3621       1500.51       1522.87    
  46  0.726655     -0.319304      -5.59248       5.59248       1489.28       1494.87    
  47  0.288418      -1.24334      -21.7767       21.7767       1518.29       1540.07    
  48  0.640221     -0.445941      -7.81049       7.81049       1463.87       1471.68    
  49  0.531981     -0.631147      -11.0543       11.0543       1517.32       1528.37    
  50  0.494380     -0.704450      -12.3382       12.3382       1545.49       1557.83    
  51  0.765719     -0.266940      -4.67536       4.67536       1354.04       1358.71    
loop,thermsimp(1:2)       22   14.5850       57.2676    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    334       1553.56          0.88          1.10         21.92          0.22          0.05         24.18
Just calling func    0   0         24.17


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1553.56
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    17.5146               351
loop is:       22
neval is:      333
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       22      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    560.467      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    17.5146               351
loop is:       23
neval is:      333


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      351
neval,tstepnext:      333     351

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.262849      -1.33618      -23.4026       23.4026       1305.70       1329.10    
   2  0.388449     -0.945595      -16.5617       16.5617       1308.24       1324.80    
   3  0.827051     -0.189889      -3.32584       3.32584       1327.94       1331.27    
   4  0.958395     -0.424951E-01 -0.744285      0.744285       1354.04       1354.78    
   5  0.125400      -2.07625      -36.3647       36.3647       1350.82       1387.18    
   6  0.524174     -0.645931      -11.3132       11.3132       1350.35       1361.66    
   7  0.783721     -0.243702      -4.26835       4.26835       1348.08       1352.35    
   8  0.183361      -1.69630      -29.7100       29.7100       1369.77       1399.48    
   9  0.122208      -2.10203      -36.8162       36.8162       1320.58       1357.40    
  10  0.913915     -0.900182E-01  -1.57663       1.57663       1349.50       1351.08    
  11  0.273776      -1.29545      -22.6892       22.6892       1372.23       1394.92    
  12  0.779874     -0.248622      -4.35452       4.35452       1394.92       1399.27    
  13  0.305314      -1.18641      -20.7796       20.7796       1407.88       1428.66    
  14  0.720732     -0.327488      -5.73583       5.73583       1412.25       1417.99    
  15  0.222329      -1.50360      -26.3349       26.3349       1442.39       1468.72    
  16  0.826299     -0.190798      -3.34176       3.34176       1434.31       1437.65    
  17  0.581574     -0.542017      -9.49321       9.49321       1441.12       1450.61    
  18  0.616258     -0.484089      -8.47864       8.47864       1434.41       1442.89    
  19  0.604230     -0.503801      -8.82387       8.82387       1455.02       1463.85    
  20  0.333333      -1.09861      -19.2418       19.2418       1443.32       1462.57    
  21  0.289888E-01  -3.54085      -62.0165       62.0165       1452.61       1514.63    
  22  0.396892     -0.924091      -16.1851       16.1851       1449.71       1465.89    
  23  0.910378     -0.938957E-01  -1.64455       1.64455       1436.80       1438.44    
  24  0.998355     -0.164683E-02 -0.288435E-01  0.288435E-01   1460.12       1460.15    
  25  0.735990     -0.306539      -5.36891       5.36891       1440.10       1445.46    
  26  0.779044     -0.249688      -4.37319       4.37319       1470.36       1474.73    
  27  0.498268     -0.696618      -12.2010       12.2010       1463.87       1476.07    
  28  0.693129     -0.366539      -6.41978       6.41978       1467.81       1474.23    
  29  0.691370     -0.369080      -6.46429       6.46429       1473.48       1479.95    
  30  0.519398     -0.655086      -11.4736       11.4736       1452.28       1463.76    
  31  0.365801      -1.00567      -17.6138       17.6138       1448.85       1466.47    
  32  0.352392      -1.04301      -18.2679       18.2679       1452.23       1470.49    
  33  0.176642      -1.73363      -30.3639       30.3639       1454.77       1485.14    
  34  0.982977     -0.171697E-01 -0.300720      0.300720       1484.69       1484.99    
  35  0.466781     -0.761894      -13.3443       13.3443       1463.74       1477.09    
  36  0.481130     -0.731617      -12.8140       12.8140       1466.62       1479.43    
  37  0.238852      -1.43191      -25.0794       25.0794       1489.28       1514.36    
  38  0.453247     -0.791318      -13.8596       13.8596       1462.36       1476.22    
  39  0.579188     -0.546129      -9.56523       9.56523       1490.39       1499.96    
  40  0.802776E-01  -2.52226      -44.1765       44.1765       1493.27       1537.45    
  41  0.819632     -0.198900      -3.48366       3.48366       1456.12       1459.60    
  42  0.917023     -0.866231E-01  -1.51717       1.51717       1436.17       1437.69    
  43  0.328296      -1.11384      -19.5085       19.5085       1504.88       1524.39    
  44  0.751681     -0.285443      -4.99942       4.99942       1489.63       1494.63    
  45  0.760454     -0.273840      -4.79620       4.79620       1500.77       1505.57    
  46  0.655053     -0.423039      -7.40937       7.40937       1500.51       1507.92    
  47  0.438192     -0.825097      -14.4513       14.4513       1517.32       1531.77    
  48  0.615984E-01  -2.78712      -48.8153       48.8153       1502.52       1551.34    
  49  0.373345     -0.985252      -17.2563       17.2563       1518.29       1535.55    
  50  0.173578      -1.75113      -30.6703       30.6703       1489.87       1520.54    
  51  0.787098     -0.239402      -4.19303       4.19303       1553.56       1557.76    
loop,thermsimp(1:2)       23   23.4026       16.5617    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    335       1545.49          0.87          1.12         21.91          0.16          0.04         24.10
Just calling func    0   0         24.10


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1545.49
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    17.5146               351
loop is:       23
neval is:      334
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       23      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    560.467      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    17.5146               351
loop is:       24
neval is:      334


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      351
neval,tstepnext:      334     351

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.562447     -0.575458      -10.0789       10.0789       1308.24       1318.32    
   2  0.429755     -0.844539      -14.7918       14.7918       1305.70       1320.49    
   3  0.598807     -0.512815      -8.98176       8.98176       1327.94       1336.93    
   4  0.757798     -0.277339      -4.85748       4.85748       1349.50       1354.36    
   5  0.954130E-01  -2.34954      -41.1513       41.1513       1348.08       1389.23    
   6  0.968708E-01  -2.33438      -40.8857       40.8857       1354.04       1394.92    
   7  0.196924      -1.62494      -28.4601       28.4601       1320.58       1349.04    
   8  0.616654     -0.483447      -8.46738       8.46738       1350.35       1358.82    
   9  0.181969      -1.70392      -29.8435       29.8435       1350.82       1380.66    
  10  0.383918     -0.957326      -16.7672       16.7672       1372.23       1389.00    
  11  0.377012     -0.975478      -17.0851       17.0851       1394.92       1412.01    
  12  0.899192     -0.106259      -1.86108       1.86108       1369.77       1371.63    
  13  0.409833     -0.892005      -15.6231       15.6231       1412.25       1427.88    
  14  0.728621     -0.316601      -5.54514       5.54514       1407.88       1413.42    
  15  0.568233     -0.565224      -9.89968       9.89968       1434.31       1444.21    
  16  0.647091     -0.435269      -7.62356       7.62356       1436.17       1443.80    
  17  0.118896      -2.12951      -37.2975       37.2975       1436.80       1474.10    
  18  0.910801     -0.934313E-01  -1.63641       1.63641       1434.41       1436.05    
  19  0.484176     -0.725308      -12.7035       12.7035       1440.10       1452.80    
  20  0.327343      -1.11675      -19.5594       19.5594       1441.12       1460.68    
  21  0.674995     -0.393050      -6.88412       6.88412       1456.12       1463.00    
  22  0.234857      -1.44878      -25.3748       25.3748       1460.12       1485.49    
  23  0.800837     -0.222098      -3.88996       3.88996       1443.32       1447.21    
  24  0.619975     -0.478077      -8.37333       8.37333       1452.28       1460.66    
  25  0.578519     -0.547284      -9.58546       9.58546       1455.02       1464.61    
  26  0.837214     -0.177675      -3.11192       3.11192       1449.71       1452.82    
  27  0.935915     -0.662302E-01  -1.16000       1.16000       1448.85       1450.01    
  28  0.779751     -0.248781      -4.35730       4.35730       1442.39       1446.75    
  29  0.801557     -0.221199      -3.87422       3.87422       1452.23       1456.10    
  30  0.827533E-01  -2.49189      -43.6445       43.6445       1467.81       1511.45    
  31  0.640581     -0.445379      -7.80064       7.80064       1470.36       1478.16    
  32  0.226382      -1.48553      -26.0185       26.0185       1463.87       1489.89    
  33  0.198814E-01  -3.91797      -68.6217       68.6217       1462.36       1530.98    
  34  0.147003      -1.91730      -33.5807       33.5807       1463.74       1497.32    
  35  0.568592     -0.564592      -9.88861       9.88861       1466.62       1476.51    
  36  0.650717     -0.429680      -7.52567       7.52567       1473.48       1481.01    
  37  0.259092      -1.35057      -23.6548       23.6548       1484.69       1508.35    
  38  0.935898     -0.662490E-01  -1.16032       1.16032       1454.77       1455.93    
  39  0.702433     -0.353205      -6.18625       6.18625       1489.63       1495.82    
  40  0.622661     -0.473753      -8.29760       8.29760       1490.39       1498.69    
  41  0.546960     -0.603380      -10.5680       10.5680       1500.77       1511.34    
  42  0.883578     -0.123775      -2.16788       2.16788       1500.51       1502.68    
  43  0.728206E-02  -4.92234      -86.2129       86.2129       1489.28       1575.49    
  44  0.112001      -2.18925      -38.3438       38.3438       1452.61       1490.95    
  45  0.689494     -0.371797      -6.51188       6.51188       1489.87       1496.38    
  46  0.872629     -0.136244      -2.38627       2.38627       1504.88       1507.27    
  47  0.688489     -0.373256      -6.53743       6.53743       1517.32       1523.86    
  48  0.947843     -0.535662E-01 -0.938191      0.938191       1518.29       1519.23    
  49  0.294529      -1.22238      -21.4094       21.4094       1493.27       1514.68    
  50  0.717675E-01  -2.63432      -46.1392       46.1392       1502.52       1548.66    
  51  0.738094     -0.303684      -5.31891       5.31891       1545.49       1550.81    
loop,thermsimp(1:2)       24   10.0789       14.7918    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    336       1357.10          0.87          1.10         22.15          0.07          0.05         24.24
Just calling func    0   0         24.24


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1357.10
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    17.5146               351
loop is:       24
neval is:      335
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       24      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    560.467      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    17.5146               351
loop is:       25
neval is:      335


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      351
neval,tstepnext:      335     351

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.756122     -0.279553      -4.89626       4.89626       1308.24       1313.14    
   2  0.693006     -0.366716      -6.42289       6.42289       1305.70       1312.12    
   3  0.647780     -0.434203      -7.60490       7.60490       1327.94       1335.55    
   4  0.895769     -0.110072      -1.92788       1.92788       1320.58       1322.51    
   5  0.775956     -0.253659      -4.44274       4.44274       1349.50       1353.94    
   6  0.891264     -0.115114      -2.01618       2.01618       1350.35       1352.37    
   7  0.553736     -0.591068      -10.3523       10.3523       1369.77       1380.12    
   8  0.646797     -0.435723      -7.63151       7.63151       1350.82       1358.45    
   9  0.646048     -0.436881      -7.65180       7.65180       1372.23       1379.88    
  10  0.160937      -1.82675      -31.9947       31.9947       1348.08       1380.07    
  11  0.840732     -0.173482      -3.03847       3.03847       1354.04       1357.08    
  12  0.377447     -0.974325      -17.0649       17.0649       1394.92       1411.98    
  13  0.214649      -1.53875      -26.9506       26.9506       1407.88       1434.83    
  14  0.424093     -0.857804      -15.0241       15.0241       1412.25       1427.28    
  15  0.693510     -0.365990      -6.41017       6.41017       1434.41       1440.82    
  16  0.252894      -1.37478      -24.0788       24.0788       1436.17       1460.25    
  17  0.765441     -0.267303      -4.68171       4.68171       1434.31       1438.99    
  18  0.481029     -0.731828      -12.8177       12.8177       1442.39       1455.21    
  19  0.211808      -1.55207      -27.1840       27.1840       1443.32       1470.51    
  20  0.616599E-01  -2.78612      -48.7978       48.7978       1448.85       1497.65    
  21  0.110259      -2.20492      -38.6183       38.6183       1440.10       1478.71    
  22  0.475319     -0.743769      -13.0268       13.0268       1449.71       1462.73    
  23  0.500411E-01  -2.99491      -52.4547       52.4547       1454.77       1507.23    
  24  0.126445      -2.06795      -36.2193       36.2193       1452.23       1488.45    
  25  0.693760     -0.365629      -6.40385       6.40385       1452.28       1458.69    
  26  0.876607E-01  -2.43428      -42.6355       42.6355       1441.12       1483.75    
  27  0.564718     -0.571429      -10.0084       10.0084       1456.12       1466.13    
  28  0.572706     -0.557383      -9.76235       9.76235       1455.02       1464.78    
  29  0.739618     -0.301621      -5.28278       5.28278       1436.80       1442.08    
  30  0.428028     -0.848566      -14.8623       14.8623       1466.62       1481.48    
  31  0.864224     -0.145923      -2.55578       2.55578       1470.36       1472.92    
  32  0.326884      -1.11815      -19.5840       19.5840       1473.48       1493.07    
  33  0.626295     -0.467933      -8.19566       8.19566       1460.12       1468.31    
  34  0.576680     -0.550467      -9.64122       9.64122       1463.87       1473.52    
  35  0.988375     -0.116929E-01 -0.204797      0.204797       1452.61       1452.81    
  36  0.834431     -0.181006      -3.17024       3.17024       1489.63       1492.80    
  37  0.944839     -0.567403E-01 -0.993784      0.993784       1489.87       1490.86    
  38  0.182182      -1.70275      -29.8230       29.8230       1463.74       1493.57    
  39  0.882984     -0.124449      -2.17967       2.17967       1490.39       1492.57    
  40  0.756839     -0.278604      -4.87965       4.87965       1500.51       1505.39    
  41  0.530350     -0.634218      -11.1081       11.1081       1504.88       1515.99    
  42  0.257866      -1.35531      -23.7378       23.7378       1484.69       1508.43    
  43  0.575794     -0.552006      -9.66817       9.66817       1500.77       1510.44    
  44  0.907029     -0.975811E-01  -1.70909       1.70909       1467.81       1469.52    
  45  0.385513     -0.953180      -16.6946       16.6946       1493.27       1509.97    
  46  0.352081      -1.04389      -18.2834       18.2834       1518.29       1536.58    
  47  0.587153     -0.532470      -9.32600       9.32600       1517.32       1526.65    
  48  0.748916     -0.289129      -5.06398       5.06398       1462.36       1467.42    
  49  0.152024      -1.88371      -32.9925       32.9925       1502.52       1535.52    
  50  0.501193     -0.690765      -12.0985       12.0985       1545.49       1557.59    
  51  0.743551     -0.296318      -5.18989       5.18989       1357.10       1362.29    
loop,thermsimp(1:2)       25   4.89626       6.42289    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    337       1555.94          0.89          1.10         22.22          0.18          0.05         24.44
Just calling func    0   0         24.44


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    338       1432.25          0.88          1.11         21.96          0.18          0.05         24.16
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3   1432.25
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    17.5146               351
loop is:       25
neval is:      337
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       25      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    560.467      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    17.5146               351
loop is:       26
neval is:      337


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      351
neval,tstepnext:      337     351

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.409890     -0.891867      -15.6207       15.6207       1305.70       1321.32    
   2  0.389332     -0.943323      -16.5219       16.5219       1308.24       1324.76    
   3  0.765657     -0.267021      -4.67677       4.67677       1320.58       1325.26    
   4  0.505025     -0.683148      -11.9651       11.9651       1327.94       1339.91    
   5  0.681598     -0.383316      -6.71362       6.71362       1350.35       1357.07    
   6  0.895525     -0.110345      -1.93265       1.93265       1349.50       1351.43    
   7  0.540074     -0.616050      -10.7899       10.7899       1354.04       1364.83    
   8  0.125370      -2.07648      -36.3688       36.3688       1350.82       1387.19    
   9  0.306095      -1.18386      -20.7348       20.7348       1357.10       1377.84    
  10  0.898677     -0.106831      -1.87111       1.87111       1372.23       1374.10    
  11  0.355276      -1.03486      -18.1252       18.1252       1348.08       1366.20    
  12  0.855641     -0.155905      -2.73061       2.73061       1369.77       1372.50    
  13  0.894333E-01  -2.41426      -42.2849       42.2849       1394.92       1437.20    
  14  0.291038      -1.23430      -21.6183       21.6183       1412.25       1433.87    
  15  0.848476E-01  -2.46690      -43.2068       43.2068       1407.88       1451.09    
  16  0.655469     -0.422404      -7.39825       7.39825       1434.31       1441.71    
  17  0.181028      -1.70910      -29.9343       29.9343       1434.41       1464.35    
  18  0.801189     -0.221659      -3.88227       3.88227       1436.80       1440.68    
  19  0.659702     -0.415967      -7.28550       7.28550       1452.61       1459.90    
  20  0.500397     -0.692354      -12.1263       12.1263       1442.39       1454.52    
  21  0.901964     -0.103181      -1.80718       1.80718       1452.28       1454.09    
  22  0.331186      -1.10508      -19.3550       19.3550       1436.17       1455.53    
  23  0.572805E-01  -2.85979      -50.0882       50.0882       1449.71       1499.79    
  24  0.511624     -0.670164      -11.7377       11.7377       1455.02       1466.76    
  25  0.953295     -0.478312E-01 -0.837744      0.837744       1456.12       1456.96    
  26  0.454382     -0.788818      -13.8158       13.8158       1462.36       1476.18    
  27  0.697217E-01  -2.66324      -46.6457       46.6457       1460.12       1506.76    
  28  0.269239      -1.31216      -22.9819       22.9819       1467.81       1490.79    
  29  0.855725     -0.155806      -2.72889       2.72889       1443.32       1446.05    
  30  0.408332E-02  -5.50085      -96.3452       96.3452       1470.36       1566.71    
  31  0.926366     -0.764862E-01  -1.33963       1.33963       1463.87       1465.21    
  32  0.356547      -1.03129      -18.0626       18.0626       1440.10       1458.16    
  33  0.550351     -0.597200      -10.4597       10.4597       1466.62       1477.08    
  34  0.475063     -0.744308      -13.0363       13.0363       1441.12       1454.15    
  35  0.420107     -0.867246      -15.1895       15.1895       1452.23       1467.42    
  36  0.521034     -0.651939      -11.4185       11.4185       1489.87       1501.28    
  37  0.979034     -0.211889E-01 -0.371115      0.371115       1490.39       1490.76    
  38  0.599858     -0.511062      -8.95105       8.95105       1489.63       1498.58    
  39  0.800850     -0.222082      -3.88968       3.88968       1473.48       1477.37    
  40  0.823189     -0.194570      -3.40781       3.40781       1463.74       1467.15    
  41  0.709226E-01  -2.64617      -46.3466       46.3466       1448.85       1495.20    
  42  0.555654     -0.587609      -10.2917       10.2917       1500.51       1510.80    
  43  0.920379     -0.829696E-01  -1.45318       1.45318       1454.77       1456.23    
  44  0.904537     -0.100332      -1.75727       1.75727       1484.69       1486.45    
  45  0.990568     -0.947695E-02 -0.165985      0.165985       1493.27       1493.44    
  46  0.647203     -0.435096      -7.62053       7.62053       1500.77       1508.39    
  47  0.634714     -0.454580      -7.96179       7.96179       1504.88       1512.85    
  48  0.771196     -0.259812      -4.55051       4.55051       1517.32       1521.87    
  49  0.857464     -0.153776      -2.69333       2.69333       1502.52       1505.22    
  50  0.816462     -0.202774      -3.55151       3.55151       1518.29       1521.84    
  51  0.233603      -1.45413      -25.4685       25.4685       1432.25       1457.72    
loop,thermsimp(1:2)       26   15.6207       16.5219    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    339       1430.92          0.88          1.11         21.91          0.18          0.05         24.12
Just calling func    0   0         24.12


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1430.92
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    17.5146               351
loop is:       26
neval is:      338
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       26      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    560.467      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    17.5146               351
loop is:       27
neval is:      338


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      351
neval,tstepnext:      338     351

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.478820     -0.736431      -12.8983       12.8983       1305.70       1318.59    
   2  0.431280     -0.840999      -14.7298       14.7298       1308.24       1322.97    
   3  0.231120      -1.46482      -25.6557       25.6557       1320.58       1346.24    
   4  0.306155      -1.18366      -20.7314       20.7314       1327.94       1348.68    
   5  0.514107     -0.665324      -11.6529       11.6529       1349.50       1361.15    
   6  0.784944E-01  -2.54473      -44.5699       44.5699       1350.35       1394.92    
   7  0.767893     -0.264105      -4.62570       4.62570       1354.04       1358.66    
   8  0.240450E-02  -6.03041      -105.620       105.620       1348.08       1453.70    
   9  0.185505      -1.68467      -29.5064       29.5064       1369.77       1399.27    
  10  0.405909     -0.901627      -15.7916       15.7916       1372.23       1388.02    
  11  0.681143     -0.383983      -6.72531       6.72531       1357.10       1363.83    
  12  0.529175     -0.636436      -11.1469       11.1469       1350.82       1361.97    
  13  0.873060     -0.135751      -2.37763       2.37763       1412.25       1414.63    
  14  0.457661     -0.781625      -13.6899       13.6899       1394.92       1408.61    
  15  0.564230     -0.572293      -10.0235       10.0235       1436.80       1446.82    
  16  0.949800     -0.515039E-01 -0.902071      0.902071       1434.31       1435.21    
  17  0.581003E-01  -2.84558      -49.8393       49.8393       1443.32       1493.16    
  18  0.180069      -1.71442      -30.0273       30.0273       1407.88       1437.91    
  19  0.222412      -1.50322      -26.3283       26.3283       1452.28       1478.61    
  20  0.821703     -0.196377      -3.43946       3.43946       1441.12       1444.56    
  21  0.948363     -0.530176E-01 -0.928582      0.928582       1442.39       1443.32    
  22  0.796186     -0.227922      -3.99196       3.99196       1436.17       1440.16    
  23  0.881546     -0.126078      -2.20820       2.20820       1454.77       1456.98    
  24  0.702001     -0.353821      -6.19704       6.19704       1456.12       1462.32    
  25  0.878483     -0.129559      -2.26918       2.26918       1432.25       1434.52    
  26  0.158251      -1.84358      -32.2895       32.2895       1440.10       1472.39    
  27  0.759310E-02  -4.88052      -85.4803       85.4803       1452.61       1538.09    
  28  0.549090     -0.599492      -10.4999       10.4999       1434.41       1444.91    
  29  0.294083      -1.22389      -21.4360       21.4360       1463.87       1485.31    
  30  0.358851      -1.02485      -17.9498       17.9498       1455.02       1472.97    
  31  0.591031E-01  -2.82847      -49.5396       49.5396       1463.74       1513.28    
  32  0.413139     -0.883972      -15.4824       15.4824       1452.23       1467.71    
  33  0.564800     -0.571284      -10.0058       10.0058       1462.36       1472.37    
  34  0.472034     -0.750704      -13.1483       13.1483       1466.62       1479.77    
  35  0.270343      -1.30806      -22.9102       22.9102       1473.48       1496.39    
  36  0.704266     -0.350600      -6.14062       6.14062       1484.69       1490.83    
  37  0.317895E-01  -3.44862      -60.4012       60.4012       1490.39       1550.79    
  38  0.489641     -0.714083      -12.5069       12.5069       1467.81       1480.32    
  39  0.558309     -0.582843      -10.2083       10.2083       1493.27       1503.48    
  40  0.239099      -1.43088      -25.0612       25.0612       1448.85       1473.91    
  41  0.387399     -0.948301      -16.6091       16.6091       1489.63       1506.24    
  42  0.434686     -0.833131      -14.5920       14.5920       1449.71       1464.30    
  43  0.713921     -0.336983      -5.90213       5.90213       1489.87       1495.77    
  44  0.655374     -0.422550      -7.40080       7.40080       1502.52       1509.92    
  45  0.739749     -0.301444      -5.27968       5.27968       1460.12       1465.40    
  46  0.758411     -0.276530      -4.84331       4.84331       1500.77       1505.61    
  47  0.750796     -0.286621      -5.02005       5.02005       1500.51       1505.53    
  48  0.557150E-01  -2.88751      -50.5735       50.5735       1504.88       1555.46    
  49  0.438885     -0.823518      -14.4236       14.4236       1518.29       1532.72    
  50  0.384409     -0.956048      -16.7448       16.7448       1517.32       1534.06    
  51  0.163955E-01  -4.11075      -71.9981       71.9981       1430.92       1502.91    
loop,thermsimp(1:2)       27   12.8983       14.7298    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    340       1357.78          0.86          1.10         21.99          0.15          0.04         24.14
Just calling func    0   0         24.14


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1357.78
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    17.5146               351
loop is:       27
neval is:      339
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       27      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    560.467      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    17.5146               351
loop is:       28
neval is:      339


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      351
neval,tstepnext:      339     351

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.382581     -0.960815      -16.8283       16.8283       1305.70       1322.52    
   2  0.718155     -0.331070      -5.79857       5.79857       1308.24       1314.04    
   3  0.581515     -0.542118      -9.49498       9.49498       1320.58       1330.08    
   4  0.230175E-01  -3.77150      -66.0563       66.0563       1327.94       1394.00    
   5  0.506601     -0.680031      -11.9105       11.9105       1354.04       1365.95    
   6  0.209297      -1.56400      -27.3929       27.3929       1349.50       1376.89    
   7  0.757725     -0.277434      -4.85916       4.85916       1350.82       1355.68    
   8  0.230972      -1.46546      -25.6669       25.6669       1357.10       1382.77    
   9  0.495080     -0.703037      -12.3134       12.3134       1372.23       1384.55    
  10  0.947190     -0.542553E-01 -0.950260      0.950260       1350.35       1351.30    
  11  0.977432     -0.228269E-01 -0.399804      0.399804       1369.77       1370.17    
  12  0.320616      -1.13751      -19.9230       19.9230       1394.92       1414.84    
  13  0.252125      -1.37783      -24.1321       24.1321       1412.25       1436.39    
  14  0.871535     -0.137499      -2.40825       2.40825       1432.25       1434.66    
  15  0.856468E-02  -4.76011      -83.3714       83.3714       1434.31       1517.68    
  16  0.352534      -1.04261      -18.2609       18.2609       1407.88       1426.14    
  17  0.750419     -0.287124      -5.02887       5.02887       1436.17       1441.20    
  18  0.215691      -1.53391      -26.8658       26.8658       1442.39       1469.25    
  19  0.833929     -0.181606      -3.18077       3.18077       1441.12       1444.30    
  20  0.714656E-01  -2.63854      -46.2130       46.2130       1434.41       1480.63    
  21  0.758349     -0.276612      -4.84475       4.84475       1436.80       1441.64    
  22  0.571963     -0.558680      -9.78507       9.78507       1348.08       1357.86    
  23  0.472398     -0.749934      -13.1348       13.1348       1454.77       1467.91    
  24  0.606854     -0.499467      -8.74797       8.74797       1456.12       1464.87    
  25  0.247109      -1.39793      -24.4841       24.4841       1449.71       1474.19    
  26  0.581778     -0.541666      -9.48707       9.48707       1460.12       1469.60    
  27  0.455447     -0.786476      -13.7748       13.7748       1452.23       1466.00    
  28  0.606617     -0.499857      -8.75480       8.75480       1462.36       1471.11    
  29  0.620033     -0.477983      -8.37168       8.37168       1440.10       1448.47    
  30  0.367527      -1.00096      -17.5314       17.5314       1455.02       1472.55    
  31  0.611260     -0.492233      -8.62127       8.62127       1448.85       1457.47    
  32  0.310332      -1.17011      -20.4940       20.4940       1452.28       1472.78    
  33  0.611387     -0.492025      -8.61763       8.61763       1466.62       1475.24    
  34  0.584386     -0.537193      -9.40872       9.40872       1467.81       1477.22    
  35  0.950350     -0.509246E-01 -0.891924      0.891924       1463.87       1464.77    
  36  0.228570      -1.47591      -25.8500       25.8500       1484.69       1510.54    
  37  0.879867     -0.127985      -2.24160       2.24160       1443.32       1445.57    
  38  0.390808E-01  -3.24212      -56.7845       56.7845       1489.87       1546.65    
  39  0.104244      -2.26102      -39.6009       39.6009       1473.48       1513.08    
  40  0.922634     -0.805225E-01  -1.41032       1.41032       1430.92       1432.33    
  41  0.559015     -0.581578      -10.1861       10.1861       1493.27       1503.46    
  42  0.809074     -0.211865      -3.71074       3.71074       1500.51       1504.22    
  43  0.840951     -0.173222      -3.03391       3.03391       1500.77       1503.81    
  44  0.384796     -0.955043      -16.7272       16.7272       1489.63       1506.36    
  45  0.471744     -0.751318      -13.1590       13.1590       1502.52       1515.68    
  46  0.750950     -0.286417      -5.01647       5.01647       1463.74       1468.76    
  47  0.197617      -1.62143      -28.3986       28.3986       1518.29       1546.69    
  48  0.405005     -0.903855      -15.8307       15.8307       1517.32       1533.15    
  49  0.526481     -0.641540      -11.2363       11.2363       1452.61       1463.85    
  50  0.808042     -0.213142      -3.73309       3.73309       1490.39       1494.13    
  51  0.315225      -1.15447      -20.2201       20.2201       1357.78       1378.00    
loop,thermsimp(1:2)       28   16.8283       5.79857    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    341       1489.67          0.87          1.11         21.98          0.19          0.05         24.19
Just calling func    0   0         24.19


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  340    1489.7       0.5672E-01 -2.307      3.286     -102.6     0.4047    
                       2.123      1.632     -99.70      3.828      1.454    

                       3.354     -6.947      1.540      7000.      7000.    

                      -2.529      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                       1.500     -12.27     -8.993     -5.496      8.036    

                      -11.65     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.    -0.1408E-01 0.1682    -0.1067    -0.4141E-02

                     -0.2486     0.4978E-01 0.1464     0.1034     0.1481E-01



                      -1.148    -0.9880      0.000    -0.1155    -0.9080E-01

                     -0.1058E-01 0.1716    -0.7116     0.5649E-01 0.4568    

                      0.4342E-01 0.1485    -0.4127     -1.042      7000.    



                     -0.2390    -0.6590     -2.142     -1.982    -0.3807    

                     -0.3252      9.110      8.719    -0.1672E+05 -6.000    

                      -1.233     -1.755      9.630      8.803    -0.1969E+05



                      -6.000      1.220    -0.5300      8.923      9.144    

                     -0.1944E+05 -6.000    -0.4144     0.1160E-01  9.268    

                       8.898    -0.1891E+05 -6.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1489.67
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    17.5146               351
loop is:       28
neval is:      340
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       28      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    560.467      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    17.5146               351
loop is:       29
neval is:      340


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      351
neval,tstepnext:      340     351

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.571653     -0.559223      -9.79457       9.79457       1308.24       1318.04    
   2  0.243540      -1.41247      -24.7389       24.7389       1305.70       1330.43    
   3  0.374772     -0.981437      -17.1895       17.1895       1320.58       1337.77    
   4  0.700054     -0.356598      -6.24568       6.24568       1350.35       1356.60    
   5  0.301581      -1.19872      -20.9950       20.9950       1350.82       1371.81    
   6  0.531818     -0.631454      -11.0597       11.0597       1348.08       1359.14    
   7  0.185013      -1.68733      -29.5530       29.5530       1354.04       1383.59    
   8  0.107050      -2.23446      -39.1357       39.1357       1369.77       1408.90    
   9  0.979566     -0.206453E-01 -0.361594      0.361594       1349.50       1349.86    
  10  0.706074     -0.348035      -6.09570       6.09570       1357.78       1363.88    
  11  0.112110      -2.18827      -38.3267       38.3267       1357.10       1395.43    
  12  0.212442      -1.54908      -27.1316       27.1316       1372.23       1399.36    
  13  0.625740     -0.468820      -8.21120       8.21120       1327.94       1336.16    
  14  0.265918      -1.32457      -23.1993       23.1993       1394.92       1418.12    
  15  0.369004     -0.996947      -17.4611       17.4611       1407.88       1425.34    
  16  0.531799     -0.631491      -11.0603       11.0603       1430.92       1441.98    
  17  0.227318      -1.48140      -25.9462       25.9462       1432.25       1458.20    
  18  0.512871     -0.667732      -11.6951       11.6951       1412.25       1423.95    
  19  0.394785     -0.929415      -16.2783       16.2783       1436.17       1452.45    
  20  0.720084     -0.328388      -5.75159       5.75159       1436.80       1442.55    
  21  0.185505      -1.68467      -29.5064       29.5064       1441.12       1470.62    
  22  0.658242     -0.418183      -7.32432       7.32432       1443.32       1450.65    
  23  0.888593     -0.118116      -2.06875       2.06875       1440.10       1442.16    
  24  0.773453     -0.256890      -4.49933       4.49933       1448.85       1453.35    
  25  0.594480E-01  -2.82265      -49.4377       49.4377       1452.61       1502.05    
  26  0.112908      -2.18118      -38.2026       38.2026       1463.87       1502.08    
  27  0.940300     -0.615559E-01  -1.07813       1.07813       1456.12       1457.20    
  28  0.990261     -0.978663E-02 -0.171409      0.171409       1452.23       1452.40    
  29  0.686451     -0.376220      -6.58934       6.58934       1454.77       1461.36    
  30  0.558815     -0.581936      -10.1924       10.1924       1463.74       1473.94    
  31  0.574196     -0.554784      -9.71683       9.71683       1442.39       1452.11    
  32  0.678960     -0.387193      -6.78153       6.78153       1460.12       1466.90    
  33  0.306232      -1.18341      -20.7270       20.7270       1462.36       1483.09    
  34  0.969485     -0.309907E-01 -0.542789      0.542789       1455.02       1455.56    
  35  0.520627     -0.652722      -11.4322       11.4322       1452.28       1463.72    
  36  0.870581     -0.138594      -2.42742       2.42742       1449.71       1452.13    
  37  0.127650      -2.05846      -36.0531       36.0531       1466.62       1502.67    
  38  0.276190      -1.28667      -22.5354       22.5354       1467.81       1490.34    
  39  0.842544     -0.171330      -3.00077       3.00077       1434.41       1437.41    
  40  0.336933      -1.08787      -19.0537       19.0537       1490.39       1509.45    
  41  0.685284     -0.377921      -6.61915       6.61915       1493.27       1499.89    
  42  0.555142     -0.588531      -10.3079       10.3079       1500.77       1511.08    
  43  0.857048     -0.154261      -2.70182       2.70182       1500.51       1503.21    
  44  0.612111E-01  -2.79343      -48.9258       48.9258       1489.63       1538.56    
  45  0.672500     -0.396753      -6.94897       6.94897       1484.69       1491.64    
  46  0.820423E-01  -2.50052      -43.7956       43.7956       1473.48       1517.28    
  47  0.546679     -0.603893      -10.5769       10.5769       1502.52       1513.10    
  48  0.624723     -0.470446      -8.23968       8.23968       1434.31       1442.55    
  49  0.906365     -0.983128E-01  -1.72191       1.72191       1517.32       1519.04    
  50  0.807763     -0.213487      -3.73913       3.73913       1489.87       1493.60    
  51  0.347580      -1.05676      -18.5088       18.5088       1489.67       1508.17    
loop,thermsimp(1:2)       29   9.79457       24.7389    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    342       1446.37          0.87          1.10         21.99          0.18          0.05         24.19
Just calling func    0   0         24.19


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1446.37
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    17.5146               351
loop is:       29
neval is:      341
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       29      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    560.467      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    17.5146               351
loop is:       30
neval is:      341


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      351
neval,tstepnext:      341     351

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.218498      -1.52098      -26.6393       26.6393       1308.24       1334.88    
   2  0.142120      -1.95108      -34.1724       34.1724       1305.70       1339.87    
   3  0.240947      -1.42318      -24.9264       24.9264       1327.94       1352.87    
   4  0.622235     -0.474438      -8.30960       8.30960       1320.58       1328.89    
   5  0.167679      -1.78570      -31.2759       31.2759       1349.50       1380.77    
   6  0.712985E-01  -2.64088      -46.2540       46.2540       1350.35       1396.61    
   7  0.861645E-02  -4.75408      -83.2659       83.2659       1348.08       1431.34    
   8  0.820106     -0.198321      -3.47352       3.47352       1357.78       1361.26    
   9  0.882469     -0.125032      -2.18988       2.18988       1350.82       1353.01    
  10  0.530124     -0.634644      -11.1155       11.1155       1354.04       1365.15    
  11  0.920027E-01  -2.38594      -41.7888       41.7888       1357.10       1398.89    
  12  0.669458     -0.401287      -7.02838       7.02838       1372.23       1379.26    
  13  0.348419      -1.05435      -18.4665       18.4665       1369.77       1388.23    
  14  0.979616     -0.205944E-01 -0.360703      0.360703       1394.92       1395.28    
  15  0.661083     -0.413875      -7.24887       7.24887       1412.25       1419.50    
  16  0.535120     -0.625265      -10.9513       10.9513       1407.88       1418.83    
  17  0.929679E-01  -2.37550      -41.6060       41.6060       1434.41       1476.02    
  18  0.580221     -0.544346      -9.53401       9.53401       1430.92       1440.45    
  19  0.652449     -0.427023      -7.47914       7.47914       1440.10       1447.57    
  20  0.252328      -1.37703      -24.1181       24.1181       1434.31       1458.43    
  21  0.364859      -1.00824      -17.6590       17.6590       1436.80       1454.46    
  22  0.205873      -1.58049      -27.6817       27.6817       1443.32       1471.01    
  23  0.404183E-01  -3.20847      -56.1951       56.1951       1442.39       1498.58    
  24  0.922242     -0.809474E-01  -1.41776       1.41776       1449.71       1451.12    
  25  0.164359      -1.80570      -31.6261       31.6261       1452.23       1483.85    
  26  0.606051     -0.500791      -8.77116       8.77116       1436.17       1444.94    
  27  0.461849E-01  -3.07510      -53.8592       53.8592       1448.85       1502.71    
  28  0.761223     -0.272829      -4.77850       4.77850       1455.02       1459.80    
  29  0.170682      -1.76796      -30.9650       30.9650       1456.12       1487.08    
  30  0.501713     -0.689726      -12.0803       12.0803       1432.25       1444.33    
  31  0.892390E-01  -2.41644      -42.3229       42.3229       1454.77       1497.10    
  32  0.281632E-01  -3.56974      -62.5226       62.5226       1452.28       1514.81    
  33  0.664381     -0.408899      -7.16171       7.16171       1460.12       1467.28    
  34  0.124936      -2.07995      -36.4296       36.4296       1441.12       1477.55    
  35  0.623262     -0.472788      -8.28070       8.28070       1463.74       1472.02    
  36  0.876206     -0.132154      -2.31463       2.31463       1462.36       1464.67    
  37  0.744183     -0.295469      -5.17502       5.17502       1467.81       1472.98    
  38  0.251914      -1.37867      -24.1468       24.1468       1484.69       1508.84    
  39  0.391818     -0.936959      -16.4105       16.4105       1489.87       1506.28    
  40  0.131094      -2.03184      -35.5869       35.5869       1493.27       1528.86    
  41  0.887574     -0.119263      -2.08884       2.08884       1452.61       1454.70    
  42  0.682509     -0.381980      -6.69022       6.69022       1463.87       1470.56    
  43  0.184805      -1.68846      -29.5726       29.5726       1466.62       1496.19    
  44  0.258729      -1.35197      -23.6793       23.6793       1500.51       1524.19    
  45  0.275506      -1.28915      -22.5789       22.5789       1489.67       1512.24    
  46  0.718710     -0.330297      -5.78503       5.78503       1490.39       1496.18    
  47  0.445066     -0.809533      -14.1787       14.1787       1500.77       1514.95    
  48  0.772965     -0.257522      -4.51040       4.51040       1502.52       1507.03    
  49  0.992595     -0.743255E-02 -0.130178      0.130178       1473.48       1473.61    
  50  0.847655E-01  -2.46787      -43.2237       43.2237       1517.32       1560.54    
  51  0.805100E-01  -2.51937      -44.1258       44.1258       1446.37       1490.49    
loop,thermsimp(1:2)       30   26.6393       34.1724    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    343       1500.86          0.87          1.11         21.91          0.22          0.05         24.16
Just calling func    0   0         24.16


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1500.86
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    17.5146               351
loop is:       30
neval is:      342
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       30      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    560.467      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    17.5146               351
loop is:       31
neval is:      342


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      351
neval,tstepnext:      342     351

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.179824      -1.71578      -30.0512       30.0512       1320.58       1350.63    
   2  0.422562     -0.861418      -15.0874       15.0874       1308.24       1323.33    
   3  0.186245      -1.68069      -29.4367       29.4367       1305.70       1335.13    
   4  0.567236     -0.566979      -9.93042       9.93042       1327.94       1337.88    
   5  0.464464E-01  -3.06946      -53.7603       53.7603       1350.82       1404.58    
   6  0.349374      -1.05161      -18.4186       18.4186       1357.78       1376.20    
   7  0.336208      -1.09002      -19.0913       19.0913       1354.04       1373.13    
   8  0.631615     -0.459475      -8.04753       8.04753       1372.23       1380.28    
   9  0.225630E-01  -3.79144      -66.4056       66.4056       1349.50       1415.90    
  10  0.221391      -1.50782      -26.4090       26.4090       1369.77       1396.18    
  11  0.635199     -0.453817      -7.94842       7.94842       1394.92       1402.87    
  12  0.957727     -0.431923E-01 -0.756495      0.756495       1350.35       1351.11    
  13  0.284413      -1.25733      -22.0216       22.0216       1357.10       1379.13    
  14  0.814352     -0.205363      -3.59685       3.59685       1407.88       1411.48    
  15  0.699052     -0.358030      -6.27076       6.27076       1412.25       1418.52    
  16  0.145269      -1.92917      -33.7886       33.7886       1348.08       1381.87    
  17  0.397569     -0.922386      -16.1552       16.1552       1430.92       1447.07    
  18  0.610583     -0.493342      -8.64069       8.64069       1432.25       1440.89    
  19  0.737372     -0.304663      -5.33605       5.33605       1436.17       1441.51    
  20  0.230083      -1.46931      -25.7344       25.7344       1440.10       1465.83    
  21  0.721698     -0.326149      -5.71237       5.71237       1449.71       1455.42    
  22  0.469765     -0.755524      -13.2327       13.2327       1436.80       1450.03    
  23  0.148742      -1.90554      -33.3749       33.3749       1452.61       1485.98    
  24  0.631872     -0.459069      -8.04041       8.04041       1434.31       1442.35    
  25  0.456921     -0.783245      -13.7182       13.7182       1455.02       1468.74    
  26  0.631874E-01  -2.76165      -48.3692       48.3692       1462.36       1510.73    
  27  0.470948     -0.753008      -13.1886       13.1886       1460.12       1473.31    
  28  0.313695      -1.15933      -20.3053       20.3053       1463.87       1484.18    
  29  0.856516     -0.154883      -2.71271       2.71271       1443.32       1446.04    
  30  0.487159     -0.719166      -12.5959       12.5959       1463.74       1476.34    
  31  0.383726     -0.957827      -16.7760       16.7760       1467.81       1484.58    
  32  0.242248      -1.41779      -24.8321       24.8321       1473.48       1498.32    
  33  0.760305     -0.274035      -4.79962       4.79962       1434.41       1439.21    
  34  0.524314     -0.645664      -11.3086       11.3086       1441.12       1452.43    
  35  0.759572     -0.275001      -4.81653       4.81653       1452.23       1457.04    
  36  0.784019     -0.243322      -4.26169       4.26169       1456.12       1460.38    
  37  0.430930     -0.841810      -14.7440       14.7440       1446.37       1461.11    
  38  0.670659     -0.399494      -6.99698       6.99698       1490.39       1497.39    
  39  0.458005     -0.780876      -13.6767       13.6767       1466.62       1480.30    
  40  0.413739     -0.882521      -15.4570       15.4570       1454.77       1470.23    
  41  0.388661     -0.945048      -16.5522       16.5522       1442.39       1458.94    
  42  0.753750     -0.282694      -4.95127       4.95127       1448.85       1453.80    
  43  0.505767     -0.681679      -11.9393       11.9393       1489.87       1501.80    
  44  0.759664     -0.274878      -4.81439       4.81439       1502.52       1507.34    
  45  0.468968     -0.757221      -13.2624       13.2624       1484.69       1497.96    
  46  0.740796     -0.300031      -5.25492       5.25492       1489.67       1494.92    
  47  0.737223     -0.304865      -5.33959       5.33959       1452.28       1457.62    
  48  0.584325     -0.537298      -9.41056       9.41056       1500.77       1510.18    
  49  0.850800     -0.161578      -2.82998       2.82998       1500.51       1503.34    
  50  0.181706      -1.70536      -29.8688       29.8688       1493.27       1523.14    
  51  0.801855E-01  -2.52341      -44.1966       44.1966       1500.86       1545.06    
loop,thermsimp(1:2)       31   30.0512       15.0874    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    344       1517.32          0.88          1.10         21.95          0.19          0.05         24.16
Just calling func    0   0         24.16


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1517.32
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    17.5146               351
loop is:       31
neval is:      343
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       31      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    560.467      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    17.5146               351
loop is:       32
neval is:      343


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      351
neval,tstepnext:      343     351

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.574970E-01  -2.85602      -50.0221       50.0221       1308.24       1358.26    
   2  0.695439     -0.363212      -6.36152       6.36152       1305.70       1312.06    
   3  0.338668      -1.08273      -18.9637       18.9637       1327.94       1346.91    
   4  0.494821     -0.703559      -12.3226       12.3226       1320.58       1332.90    
   5  0.433638E-02  -5.44072      -95.2920       95.2920       1350.35       1445.64    
   6  0.270974      -1.30573      -22.8694       22.8694       1354.04       1376.91    
   7  0.926362E-01  -2.37907      -41.6686       41.6686       1357.78       1399.45    
   8  0.437858     -0.825861      -14.4646       14.4646       1357.10       1371.57    
   9  0.297746      -1.21151      -21.2192       21.2192       1372.23       1393.45    
  10  0.948309     -0.530750E-01 -0.929588      0.929588       1348.08       1349.01    
  11  0.845139     -0.168254      -2.94691       2.94691       1369.77       1372.71    
  12  0.930128     -0.724325E-01  -1.26863       1.26863       1394.92       1396.19    
  13  0.921850     -0.813732E-01  -1.42522       1.42522       1350.82       1352.24    
  14  0.447950     -0.803074      -14.0655       14.0655       1407.88       1421.94    
  15  0.712740     -0.338638      -5.93111       5.93111       1349.50       1355.43    
  16  0.574809     -0.553717      -9.69814       9.69814       1412.25       1421.95    
  17  0.136104      -1.99433      -34.9300       34.9300       1434.41       1469.34    
  18  0.340340      -1.07781      -18.8774       18.8774       1432.25       1451.13    
  19  0.149160      -1.90274      -33.3257       33.3257       1436.17       1469.50    
  20  0.433234E-01  -3.13906      -54.9795       54.9795       1434.31       1489.29    
  21  0.909134     -0.952630E-01  -1.66849       1.66849       1443.32       1444.99    
  22  0.619739     -0.478456      -8.37997       8.37997       1430.92       1439.30    
  23  0.726693     -0.319251      -5.59155       5.59155       1436.80       1442.39    
  24  0.962860     -0.378471E-01 -0.662877      0.662877       1441.12       1441.78    
  25  0.615108     -0.485958      -8.51137       8.51137       1448.85       1457.36    
  26  0.500401     -0.692346      -12.1262       12.1262       1449.71       1461.83    
  27  0.402080     -0.911104      -15.9576       15.9576       1452.23       1468.18    
  28  0.749737     -0.288033      -5.04478       5.04478       1452.28       1457.33    
  29  0.926553     -0.762839E-01  -1.33608       1.33608       1442.39       1443.73    
  30  0.519037     -0.655779      -11.4857       11.4857       1456.12       1467.60    
  31  0.498178E-01  -2.99938      -52.5330       52.5330       1446.37       1498.90    
  32  0.473692     -0.747197      -13.0869       13.0869       1440.10       1453.18    
  33  0.574927E-02  -5.15868      -90.3523       90.3523       1455.02       1545.37    
  34  0.349575      -1.05104      -18.4085       18.4085       1454.77       1473.18    
  35  0.661333     -0.413498      -7.24225       7.24225       1460.12       1467.36    
  36  0.314247E-01  -3.46016      -60.6033       60.6033       1463.74       1524.35    
  37  0.318841      -1.14306      -20.0203       20.0203       1466.62       1486.64    
  38  0.111349E-01  -4.49767      -78.7750       78.7750       1463.87       1542.65    
  39  0.845234E-02  -4.77331      -83.6027       83.6027       1467.81       1551.41    
  40  0.704975E-01  -2.65218      -46.4519       46.4519       1452.61       1499.06    
  41  0.126423      -2.06812      -36.2224       36.2224       1489.67       1525.89    
  42  0.120140      -2.11910      -37.1152       37.1152       1490.39       1527.51    
  43  0.664865     -0.408172      -7.14897       7.14897       1484.69       1491.84    
  44  0.829336     -0.187130      -3.27750       3.27750       1473.48       1476.76    
  45  0.656735     -0.420475      -7.36446       7.36446       1489.87       1497.23    
  46  0.955374     -0.456526E-01 -0.799588      0.799588       1500.51       1501.31    
  47  0.220157      -1.51341      -26.5068       26.5068       1502.52       1529.03    
  48  0.151230      -1.88895      -33.0843       33.0843       1500.77       1533.86    
  49  0.127393      -2.06048      -36.0885       36.0885       1462.36       1498.45    
  50  0.206727      -1.57636      -27.6093       27.6093       1493.27       1520.88    
  51  0.637521     -0.450168      -7.88452       7.88452       1517.32       1525.20    
loop,thermsimp(1:2)       32   50.0221       6.36152    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    345       1629.26          0.87          1.11         21.96          0.23          0.05         24.23
Just calling func    0   0         24.23


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    346       1417.07          0.88          1.10         22.27          0.18          0.05         24.48
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3   1417.07
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    17.5146               351
loop is:       32
neval is:      345
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       32      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    560.467      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    17.5146               351
loop is:       33
neval is:      345


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      351
neval,tstepnext:      345     351

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.806752     -0.214739      -3.76107       3.76107       1305.70       1309.46    
   2  0.549594     -0.598576      -10.4838       10.4838       1320.58       1331.07    
   3  0.631143     -0.460223      -8.06063       8.06063       1327.94       1336.01    
   4  0.268455      -1.31507      -23.0330       23.0330       1348.08       1371.11    
   5  0.513519     -0.666468      -11.6729       11.6729       1350.82       1362.49    
   6  0.886725     -0.120220      -2.10561       2.10561       1349.50       1351.60    
   7  0.568618     -0.564546      -9.88780       9.88780       1308.24       1318.13    
   8  0.443178     -0.813783      -14.2531       14.2531       1357.10       1371.36    
   9  0.898491     -0.107039      -1.87474       1.87474       1369.77       1371.64    
  10  0.235118      -1.44767      -25.3553       25.3553       1354.04       1379.39    
  11  0.509444     -0.674434      -11.8125       11.8125       1372.23       1384.05    
  12  0.223921      -1.49646      -26.2099       26.2099       1394.92       1421.13    
  13  0.188995      -1.66603      -29.1799       29.1799       1357.78       1386.96    
  14  0.969568     -0.309049E-01 -0.541286      0.541286       1407.88       1408.42    
  15  0.287265      -1.24735      -21.8469       21.8469       1412.25       1434.10    
  16  0.559573E-01  -2.88317      -50.4975       50.4975       1430.92       1481.41    
  17  0.668393     -0.402878      -7.05626       7.05626       1441.12       1448.17    
  18  0.488393     -0.716635      -12.5516       12.5516       1436.80       1449.35    
  19  0.605591     -0.501551      -8.78446       8.78446       1442.39       1451.17    
  20  0.490783     -0.711753      -12.4661       12.4661       1443.32       1455.79    
  21  0.313180      -1.16098      -20.3340       20.3340       1350.35       1370.69    
  22  0.200234      -1.60827      -28.1682       28.1682       1432.25       1460.42    
  23  0.575811     -0.551975      -9.66763       9.66763       1440.10       1449.76    
  24  0.856965     -0.154358      -2.70351       2.70351       1452.28       1454.99    
  25  0.310774      -1.16869      -20.4691       20.4691       1448.85       1469.32    
  26  0.836513     -0.178513      -3.12659       3.12659       1449.71       1452.83    
  27  0.286335      -1.25059      -21.9037       21.9037       1460.12       1482.02    
  28  0.240507      -1.42500      -24.9584       24.9584       1456.12       1481.08    
  29  0.103511E-01  -4.57066      -80.0533       80.0533       1452.23       1532.28    
  30  0.516897     -0.659912      -11.5581       11.5581       1434.41       1445.97    
  31  0.237615      -1.43710      -25.1703       25.1703       1436.17       1461.34    
  32  0.602330     -0.506950      -8.87903       8.87903       1454.77       1463.65    
  33  0.677792     -0.388915      -6.81170       6.81170       1473.48       1480.30    
  34  0.965031     -0.355954E-01 -0.623439      0.623439       1466.62       1467.24    
  35  0.851769     -0.160440      -2.81005       2.81005       1434.31       1437.12    
  36  0.998637     -0.136415E-02 -0.238925E-01  0.238925E-01   1484.69       1484.72    
  37  0.690071E-01  -2.67355      -46.8261       46.8261       1489.87       1536.69    
  38  0.865316E-02  -4.74983      -83.1914       83.1914       1462.36       1545.55    
  39  0.657551     -0.419234      -7.34271       7.34271       1446.37       1453.71    
  40  0.249918      -1.38662      -24.2861       24.2861       1452.61       1476.90    
  41  0.762839     -0.270708      -4.74134       4.74134       1500.51       1505.25    
  42  0.875176     -0.133331      -2.33524       2.33524       1493.27       1495.61    
  43  0.805569     -0.216207      -3.78678       3.78678       1463.74       1467.53    
  44  0.308797      -1.17507      -20.5809       20.5809       1517.32       1537.90    
  45  0.255763      -1.36350      -23.8812       23.8812       1489.67       1513.55    
  46  0.218508      -1.52093      -26.6385       26.6385       1490.39       1517.03    
  47  0.518593     -0.656637      -11.5007       11.5007       1502.52       1514.02    
  48  0.856838     -0.154506      -2.70611       2.70611       1500.77       1503.48    
  49  0.300810      -1.20128      -21.0399       21.0399       1463.87       1484.91    
  50  0.310312      -1.17018      -20.4952       20.4952       1455.02       1475.52    
  51  0.503825     -0.685526      -12.0067       12.0067       1417.07       1429.08    
loop,thermsimp(1:2)       33   3.76107       10.4838    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    347       1319.36          0.88          1.11         21.90          0.18          0.05         24.11
Just calling func    0   0         24.11


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    348       2451.11          0.87          1.10         22.12          0.12          0.05         24.27
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1319.36
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    17.5146               351
loop is:       33
neval is:      347
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       33      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    560.467      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    17.5146               351
loop is:       34
neval is:      347


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      351
neval,tstepnext:      347     351

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.375893     -0.978451      -17.1372       17.1372       1305.70       1322.83    
   2  0.356800      -1.03058      -18.0502       18.0502       1308.24       1326.29    
   3  0.686180     -0.376616      -6.59628       6.59628       1320.58       1327.18    
   4  0.443986     -0.811963      -14.2212       14.2212       1327.94       1342.17    
   5  0.837544     -0.177281      -3.10501       3.10501       1349.50       1352.60    
   6  0.902394     -0.102704      -1.79882       1.79882       1350.82       1352.62    
   7  0.509658E-01  -2.97660      -52.1340       52.1340       1350.35       1402.49    
   8  0.662569     -0.411631      -7.20956       7.20956       1348.08       1355.29    
   9  0.226311      -1.48585      -26.0240       26.0240       1357.10       1383.13    
  10  0.336196      -1.09006      -19.0920       19.0920       1369.77       1388.86    
  11  0.122038      -2.10342      -36.8406       36.8406       1354.04       1390.88    
  12  0.323275      -1.12925      -19.7784       19.7784       1372.23       1392.01    
  13  0.326513      -1.11929      -19.6039       19.6039       1357.78       1377.39    
  14  0.904434     -0.100446      -1.75927       1.75927       1407.88       1409.64    
  15  0.856476     -0.154928      -2.71351       2.71351       1394.92       1397.63    
  16  0.873700     -0.135019      -2.36480       2.36480       1417.07       1419.44    
  17  0.989627     -0.104267E-01 -0.182620      0.182620       1412.25       1412.44    
  18  0.546745     -0.603772      -10.5748       10.5748       1434.31       1444.88    
  19  0.731718     -0.312360      -5.47086       5.47086       1434.41       1439.88    
  20  0.859154     -0.151807      -2.65884       2.65884       1441.12       1443.78    
  21  0.419381     -0.868976      -15.2198       15.2198       1436.80       1452.02    
  22  0.587067     -0.532617      -9.32857       9.32857       1440.10       1449.42    
  23  0.460289E-01  -3.07849      -53.9185       53.9185       1442.39       1496.31    
  24  0.522902     -0.648362      -11.3558       11.3558       1449.71       1461.06    
  25  0.398671     -0.919618      -16.1067       16.1067       1446.37       1462.47    
  26  0.881302     -0.126355      -2.21305       2.21305       1452.28       1454.50    
  27  0.226039      -1.48705      -26.0450       26.0450       1443.32       1469.37    
  28  0.124144      -2.08631      -36.5409       36.5409       1432.25       1468.79    
  29  0.542680     -0.611235      -10.7055       10.7055       1436.17       1446.88    
  30  0.167496      -1.78679      -31.2950       31.2950       1454.77       1486.07    
  31  0.619825     -0.478318      -8.37756       8.37756       1466.62       1475.00    
  32  0.169564      -1.77452      -31.0801       31.0801       1463.74       1494.82    
  33  0.781291     -0.246807      -4.32273       4.32273       1448.85       1453.18    
  34  0.486264     -0.721004      -12.6281       12.6281       1455.02       1467.65    
  35  0.895366     -0.110522      -1.93575       1.93575       1452.61       1454.55    
  36  0.321503      -1.13475      -19.8747       19.8747       1473.48       1493.36    
  37  0.607862E-01  -2.80039      -49.0478       49.0478       1456.12       1505.17    
  38  0.365124      -1.00752      -17.6463       17.6463       1430.92       1448.56    
  39  0.110107      -2.20630      -38.6425       38.6425       1460.12       1498.76    
  40  0.905082     -0.997294E-01  -1.74672       1.74672       1484.69       1486.44    
  41  0.960140     -0.406759E-01 -0.712423      0.712423       1463.87       1464.59    
  42  0.320200      -1.13881      -19.9458       19.9458       1493.27       1513.22    
  43  0.396920     -0.924021      -16.1839       16.1839       1500.77       1516.96    
  44  0.674668     -0.393534      -6.89260       6.89260       1500.51       1507.40    
  45  0.894300     -0.111715      -1.95664       1.95664       1489.67       1491.62    
  46  0.875669     -0.132767      -2.32537       2.32537       1502.52       1504.85    
  47  0.881286     -0.126374      -2.21338       2.21338       1490.39       1492.61    
  48  0.779885     -0.248609      -4.35429       4.35429       1452.23       1456.58    
  49  0.691264     -0.369233      -6.46697       6.46697       1489.87       1496.33    
  50  0.406618     -0.899882      -15.7611       15.7611       1517.32       1533.08    
  51  0.225318      -1.49024      -26.1010       26.1010       1319.36       1345.46    
loop,thermsimp(1:2)       34   17.1372       18.0502    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    349       1475.04          0.87          1.11         21.93          0.20          0.05         24.16
Just calling func    0   0         24.16


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1475.04
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    17.5146               351
loop is:       34
neval is:      348
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       34      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    560.467      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    17.5146               351
loop is:       35
neval is:      348


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      351
neval,tstepnext:      348     351

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.478411     -0.737285      -12.9133       12.9133       1305.70       1318.61    
   2  0.380700     -0.965745      -16.9146       16.9146       1308.24       1325.16    
   3  0.821138     -0.197064      -3.45150       3.45150       1320.58       1324.03    
   4  0.728654     -0.316557      -5.54437       5.54437       1327.94       1333.49    
   5  0.670900     -0.399135      -6.99070       6.99070       1319.36       1326.35    
   6  0.175262      -1.74147      -30.5012       30.5012       1349.50       1380.00    
   7  0.709150     -0.343688      -6.01956       6.01956       1350.82       1356.84    
   8  0.247481      -1.39642      -24.4577       24.4577       1348.08       1372.54    
   9  0.231597      -1.46276      -25.6196       25.6196       1357.78       1383.40    
  10  0.764757     -0.268198      -4.69738       4.69738       1357.10       1361.80    
  11  0.798540     -0.224970      -3.94025       3.94025       1369.77       1373.71    
  12  0.903782     -0.101167      -1.77190       1.77190       1354.04       1355.81    
  13  0.136634      -1.99045      -34.8620       34.8620       1372.23       1407.09    
  14  0.141955      -1.95225      -34.1929       34.1929       1394.92       1429.11    
  15  0.658650     -0.417563      -7.31345       7.31345       1350.35       1357.67    
  16  0.265370      -1.32663      -23.2354       23.2354       1407.88       1431.11    
  17  0.439277E-01  -3.12521      -54.7368       54.7368       1412.25       1466.99    
  18  0.451732     -0.794667      -13.9183       13.9183       1417.07       1430.99    
  19  0.475868     -0.742615      -13.0066       13.0066       1434.41       1447.42    
  20  0.336185      -1.09009      -19.0926       19.0926       1441.12       1460.21    
  21  0.519277     -0.655317      -11.4776       11.4776       1434.31       1445.79    
  22  0.455030     -0.787393      -13.7909       13.7909       1436.17       1449.96    
  23  0.272148E-01  -3.60399      -63.1225       63.1225       1430.92       1494.04    
  24  0.125510      -2.07537      -36.3493       36.3493       1440.10       1476.45    
  25  0.687868     -0.374159      -6.55324       6.55324       1436.80       1443.35    
  26  0.271894      -1.30234      -22.8100       22.8100       1448.85       1471.66    
  27  0.641335     -0.444204      -7.78006       7.78006       1452.28       1460.06    
  28  0.858838E-01  -2.45476      -42.9942       42.9942       1452.61       1495.60    
  29  0.579605     -0.545408      -9.55261       9.55261       1452.23       1461.78    
  30  0.249942      -1.38653      -24.2845       24.2845       1449.71       1473.99    
  31  0.938016     -0.639885E-01  -1.12073       1.12073       1446.37       1447.49    
  32  0.453695     -0.790330      -13.8423       13.8423       1463.87       1477.72    
  33  0.319751      -1.14021      -19.9704       19.9704       1455.02       1474.99    
  34  0.346149      -1.06089      -18.5810       18.5810       1432.25       1450.83    
  35  0.870951     -0.138169      -2.41998       2.41998       1443.32       1445.74    
  36  0.187313      -1.67497      -29.3365       29.3365       1466.62       1495.96    
  37  0.984950     -0.151645E-01 -0.265601      0.265601       1454.77       1455.04    
  38  0.524062     -0.646145      -11.3170       11.3170       1484.69       1496.01    
  39  0.432392     -0.838423      -14.6847       14.6847       1489.67       1504.35    
  40  0.687254     -0.375052      -6.56889       6.56889       1490.39       1496.96    
  41  0.869131     -0.140262      -2.45663       2.45663       1473.48       1475.94    
  42  0.350749      -1.04769      -18.3498       18.3498       1463.74       1482.09    
  43  0.663152E-01  -2.71334      -47.5230       47.5230       1442.39       1489.91    
  44  0.306857      -1.18137      -20.6913       20.6913       1489.87       1510.56    
  45  0.925728     -0.771751E-01  -1.35169       1.35169       1460.12       1461.47    
  46  0.649899     -0.430939      -7.54773       7.54773       1502.52       1510.07    
  47  0.492368     -0.708529      -12.4096       12.4096       1456.12       1468.53    
  48  0.104223      -2.26122      -39.6044       39.6044       1500.51       1540.11    
  49  0.345103      -1.06391      -18.6340       18.6340       1493.27       1511.91    
  50  0.425380     -0.854773      -14.9710       14.9710       1500.77       1515.74    
  51  0.922590     -0.805699E-01  -1.41115       1.41115       1475.04       1476.45    
loop,thermsimp(1:2)       35   12.9133       16.9146    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    350       1403.57          0.87          1.11         21.89          0.24          0.05         24.16
Just calling func    0   0         24.16


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1403.57
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    17.5146               351
loop is:       35
neval is:      349
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       35      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    560.467      0.500000    
T0,tstep,tfreq (these do not change):             50
current SAtemp,tstepnext are:    17.5146               351
loop is:       36
neval is:      349


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      351
neval,tstepnext:      349     351

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.943705     -0.579419E-01  -1.01483       1.01483       1305.70       1306.71    
   2  0.628336     -0.464680      -8.13869       8.13869       1320.58       1328.72    
   3  0.261321      -1.34200      -23.5047       23.5047       1308.24       1331.75    
   4  0.256100      -1.36219      -23.8582       23.8582       1319.36       1343.22    
   5  0.318070      -1.14548      -20.0627       20.0627       1327.94       1348.01    
   6  0.895943     -0.109878      -1.92448       1.92448       1354.04       1355.96    
   7  0.856491     -0.154912      -2.71322       2.71322       1350.82       1353.53    
   8  0.269953      -1.30951      -22.9355       22.9355       1350.35       1373.29    
   9  0.663616     -0.410051      -7.18188       7.18188       1357.10       1364.29    
  10  0.249338E-01  -3.69153      -64.6557       64.6557       1348.08       1412.73    
  11  0.362852      -1.01376      -17.7556       17.7556       1369.77       1387.52    
  12  0.868529E-02  -4.74612      -83.1265       83.1265       1349.50       1432.63    
  13  0.705785     -0.348444      -6.10286       6.10286       1357.78       1363.89    
  14  0.527358     -0.639875      -11.2072       11.2072       1372.23       1383.44    
  15  0.831399     -0.184645      -3.23398       3.23398       1394.92       1398.15    
  16  0.594963     -0.519255      -9.09455       9.09455       1417.07       1426.17    
  17  0.501981     -0.689193      -12.0709       12.0709       1407.88       1419.95    
  18  0.594311     -0.520353      -9.11377       9.11377       1436.80       1445.91    
  19  0.618124     -0.481066      -8.42568       8.42568       1443.32       1451.75    
  20  0.959578E-01  -2.34385      -41.0516       41.0516       1434.31       1475.36    
  21  0.776845     -0.252514      -4.42269       4.42269       1434.41       1438.84    
  22  0.458742     -0.779266      -13.6485       13.6485       1446.37       1460.01    
  23  0.645084     -0.438374      -7.67795       7.67795       1436.17       1443.85    
  24  0.545194     -0.606614      -10.6246       10.6246       1432.25       1442.88    
  25  0.618072     -0.481151      -8.42717       8.42717       1454.77       1463.20    
  26  0.390168     -0.941179      -16.4844       16.4844       1452.28       1468.77    
  27  0.122318      -2.10113      -36.8005       36.8005       1441.12       1477.92    
  28  0.823049     -0.194740      -3.41079       3.41079       1460.12       1463.53    
  29  0.817844E-01  -2.50367      -43.8508       43.8508       1452.23       1496.08    
  30  0.189400      -1.66389      -29.1424       29.1424       1412.25       1441.40    
  31  0.257378      -1.35721      -23.7710       23.7710       1456.12       1479.89    
  32  0.854384     -0.157375      -2.75636       2.75636       1448.85       1451.61    
  33  0.128350      -2.05300      -35.9574       35.9574       1449.71       1485.66    
  34  0.410790     -0.889673      -15.5823       15.5823       1455.02       1470.60    
  35  0.645584     -0.437599      -7.66438       7.66438       1473.48       1481.15    
  36  0.309517      -1.17274      -20.5401       20.5401       1440.10       1460.64    
  37  0.568550     -0.564667      -9.88992       9.88992       1475.04       1484.93    
  38  0.702184     -0.353560      -6.19247       6.19247       1463.87       1470.07    
  39  0.939991     -0.618850E-01  -1.08389       1.08389       1463.74       1464.83    
  40  0.944105     -0.575180E-01  -1.00740       1.00740       1442.39       1443.40    
  41  0.202943      -1.59483      -27.9329       27.9329       1430.92       1458.85    
  42  0.948631E-02  -4.65791      -81.5814       81.5814       1452.61       1534.19    
  43  0.568674     -0.564449      -9.88610       9.88610       1466.62       1476.51    
  44  0.216733      -1.52909      -26.7814       26.7814       1484.69       1511.47    
  45  0.385755     -0.952553      -16.6836       16.6836       1490.39       1507.08    
  46  0.894850E-01  -2.41368      -42.2747       42.2747       1489.67       1531.94    
  47  0.136648      -1.99035      -34.8602       34.8602       1502.52       1537.38    
  48  0.473765     -0.747044      -13.0842       13.0842       1489.87       1502.95    
  49  0.208114E-01  -3.87225      -67.8210       67.8210       1493.27       1561.09    
  50  0.158159      -1.84415      -32.2996       32.2996       1500.77       1533.07    
  51  0.112432      -2.18541      -38.2765       38.2765       1403.57       1441.84    
loop,thermsimp(1:2)       36   1.01483       8.13869    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


